Implementation smell,Namespace,Class,File,Method,Description
Long Method,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,AddEditRule,The method has 209 lines of code.
Long Method,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The method has 179 lines of code.
Long Method,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The method has 125 lines of code.
Long Parameter List,BasicFirewall,BasicFirewallModule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\fireBwallModule.cs,GenUDPPORT,The method has 5 parameters. Parameters: ps' args' dir' log' notify
Long Parameter List,BasicFirewall,BasicFirewallModule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\fireBwallModule.cs,GenTCPPORT,The method has 5 parameters. Parameters: ps' args' dir' log' notify
Long Parameter List,BasicFirewall,BasicFirewallModule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\fireBwallModule.cs,GenIPRule,The method has 5 parameters. Parameters: ps' args' dir' log' notify
Long Parameter List,BasicFirewall,RuleFactory,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\fireBwallModule.cs,MakeRule,The method has 6 parameters. Parameters: ruleType' ps' dir' args' log' notify
Long Parameter List,BasicFirewall,TCPPortRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\fireBwallModule.cs,TCPPortRule,The method has 5 parameters. Parameters: ps' port' direction' log' notify
Long Parameter List,BasicFirewall,TCPIPPortRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\fireBwallModule.cs,TCPIPPortRule,The method has 6 parameters. Parameters: ps' ip' port' direction' log' notify
Long Parameter List,BasicFirewall,UDPPortRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\fireBwallModule.cs,UDPPortRule,The method has 5 parameters. Parameters: ps' port' direction' log' notify
Long Parameter List,BasicFirewall,IPRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\fireBwallModule.cs,IPRule,The method has 5 parameters. Parameters: ps' ip' direction' log' notify
Long Statement,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 100F)); " is 123.
Long Statement,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 96F)); " is 123.
Long Statement,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel3.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 100F)); " is 123.
Complex Conditional,BasicFirewall,UDPPortRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\fireBwallModule.cs,GetStatus,The conditional expression  "port.Contains(udppkt.DestPort) ||                          inPortRange(udppkt.DestPort) ||                          port.Contains(udppkt.SourcePort) ||                          inPortRange(udppkt.SourcePort)"  is complex.
Complex Conditional,BasicFirewall,UDPPortRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\fireBwallModule.cs,GetStatus,The conditional expression  "port.Contains(udppkt.DestPort) ||                          inPortRange(udppkt.DestPort) ||                          port.Contains(udppkt.SourcePort) ||                          inPortRange(udppkt.SourcePort)"  is complex.
Empty Catch Block,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,buttonMoveUp_Click,The method has an empty catch block.
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,AddEditRule,The following statement contains a magic number: if (tmp is AllRule)              {                  AllRule t = (AllRule)tmp;                  checkBoxLog.Checked = t.log;                    // set the rule type                  comboBox1.SelectedIndex = 5;                    // set the direction                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    // set the action box                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is IPRule)              {                  IPRule t = (IPRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 6;                    //direction                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //args                  textBoxArguments.Text = t.GetIPString();                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is TCPAllRule)              {                  TCPAllRule t = (TCPAllRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 0;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is TCPIPPortRule)              {                  TCPIPPortRule t = (TCPIPPortRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 1;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //args                  textBoxArguments.Text = String.Format("{0} {1}"' t.ip' t.port);                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is TCPPortRule)              {                  TCPPortRule t = (TCPPortRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 2;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //args                  textBoxArguments.Text = t.GetPortString();                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is UDPAllRule)              {                  UDPAllRule t = (UDPAllRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 3;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is UDPPortRule)              {                  UDPPortRule t = (UDPPortRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 4;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //args                  textBoxArguments.Text = t.GetPortString();                    //notify                  notifyBox.Checked = (t.notify);              }
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,AddEditRule,The following statement contains a magic number: if (tmp is AllRule)              {                  AllRule t = (AllRule)tmp;                  checkBoxLog.Checked = t.log;                    // set the rule type                  comboBox1.SelectedIndex = 5;                    // set the direction                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    // set the action box                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is IPRule)              {                  IPRule t = (IPRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 6;                    //direction                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //args                  textBoxArguments.Text = t.GetIPString();                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is TCPAllRule)              {                  TCPAllRule t = (TCPAllRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 0;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is TCPIPPortRule)              {                  TCPIPPortRule t = (TCPIPPortRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 1;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //args                  textBoxArguments.Text = String.Format("{0} {1}"' t.ip' t.port);                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is TCPPortRule)              {                  TCPPortRule t = (TCPPortRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 2;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //args                  textBoxArguments.Text = t.GetPortString();                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is UDPAllRule)              {                  UDPAllRule t = (UDPAllRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 3;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is UDPPortRule)              {                  UDPPortRule t = (UDPPortRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 4;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //args                  textBoxArguments.Text = t.GetPortString();                    //notify                  notifyBox.Checked = (t.notify);              }
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,AddEditRule,The following statement contains a magic number: if (tmp is AllRule)              {                  AllRule t = (AllRule)tmp;                  checkBoxLog.Checked = t.log;                    // set the rule type                  comboBox1.SelectedIndex = 5;                    // set the direction                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    // set the action box                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is IPRule)              {                  IPRule t = (IPRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 6;                    //direction                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //args                  textBoxArguments.Text = t.GetIPString();                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is TCPAllRule)              {                  TCPAllRule t = (TCPAllRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 0;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is TCPIPPortRule)              {                  TCPIPPortRule t = (TCPIPPortRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 1;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //args                  textBoxArguments.Text = String.Format("{0} {1}"' t.ip' t.port);                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is TCPPortRule)              {                  TCPPortRule t = (TCPPortRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 2;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //args                  textBoxArguments.Text = t.GetPortString();                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is UDPAllRule)              {                  UDPAllRule t = (UDPAllRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 3;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is UDPPortRule)              {                  UDPPortRule t = (UDPPortRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 4;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //args                  textBoxArguments.Text = t.GetPortString();                    //notify                  notifyBox.Checked = (t.notify);              }
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,AddEditRule,The following statement contains a magic number: if (tmp is AllRule)              {                  AllRule t = (AllRule)tmp;                  checkBoxLog.Checked = t.log;                    // set the rule type                  comboBox1.SelectedIndex = 5;                    // set the direction                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    // set the action box                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is IPRule)              {                  IPRule t = (IPRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 6;                    //direction                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //args                  textBoxArguments.Text = t.GetIPString();                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is TCPAllRule)              {                  TCPAllRule t = (TCPAllRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 0;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is TCPIPPortRule)              {                  TCPIPPortRule t = (TCPIPPortRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 1;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //args                  textBoxArguments.Text = String.Format("{0} {1}"' t.ip' t.port);                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is TCPPortRule)              {                  TCPPortRule t = (TCPPortRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 2;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //args                  textBoxArguments.Text = t.GetPortString();                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is UDPAllRule)              {                  UDPAllRule t = (UDPAllRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 3;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is UDPPortRule)              {                  UDPPortRule t = (UDPPortRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 4;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //args                  textBoxArguments.Text = t.GetPortString();                    //notify                  notifyBox.Checked = (t.notify);              }
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,AddEditRule,The following statement contains a magic number: if (tmp is AllRule)              {                  AllRule t = (AllRule)tmp;                  checkBoxLog.Checked = t.log;                    // set the rule type                  comboBox1.SelectedIndex = 5;                    // set the direction                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    // set the action box                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is IPRule)              {                  IPRule t = (IPRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 6;                    //direction                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //args                  textBoxArguments.Text = t.GetIPString();                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is TCPAllRule)              {                  TCPAllRule t = (TCPAllRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 0;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is TCPIPPortRule)              {                  TCPIPPortRule t = (TCPIPPortRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 1;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //args                  textBoxArguments.Text = String.Format("{0} {1}"' t.ip' t.port);                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is TCPPortRule)              {                  TCPPortRule t = (TCPPortRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 2;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //args                  textBoxArguments.Text = t.GetPortString();                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is UDPAllRule)              {                  UDPAllRule t = (UDPAllRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 3;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //notify                  notifyBox.Checked = (t.notify);              }              else if (tmp is UDPPortRule)              {                  UDPPortRule t = (UDPPortRule)tmp;                  checkBoxLog.Checked = t.log;                    //idx                  comboBox1.SelectedIndex = 4;                    //dir                  checkBoxIn.Checked = ((t.direction & Direction.IN) != 0) ? true : false;                  checkBoxOut.Checked = ((t.direction & Direction.OUT) != 0) ? true : false;                    //action                  comboBoxAction.SelectedIndex = ((t.ps & PacketStatus.ALLOWED) != 0) ? 1 : 0;                    //args                  textBoxArguments.Text = t.GetPortString();                    //notify                  notifyBox.Checked = (t.notify);              }
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,comboBox1_SelectedIndexChanged,The following statement contains a magic number: switch (comboBox1.SelectedIndex)              {                  case 0:                  case 3:                  case 5:                      // most of these aren't going to translate very differently                       // into their foreign tongue' so i'm leaving it as is                      tmp = "No args";                      enableArgs = false;                      break;                  case 2:                  case 4:                      tmp = "(Space Separated) Port";                      break;                  case 1:                      tmp = "(Space Separated) IP Port";                      break;                  case 6:                      tmp = "(Space Separated) IP";                      break;              }
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,comboBox1_SelectedIndexChanged,The following statement contains a magic number: switch (comboBox1.SelectedIndex)              {                  case 0:                  case 3:                  case 5:                      // most of these aren't going to translate very differently                       // into their foreign tongue' so i'm leaving it as is                      tmp = "No args";                      enableArgs = false;                      break;                  case 2:                  case 4:                      tmp = "(Space Separated) Port";                      break;                  case 1:                      tmp = "(Space Separated) IP Port";                      break;                  case 6:                      tmp = "(Space Separated) IP";                      break;              }
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,comboBox1_SelectedIndexChanged,The following statement contains a magic number: switch (comboBox1.SelectedIndex)              {                  case 0:                  case 3:                  case 5:                      // most of these aren't going to translate very differently                       // into their foreign tongue' so i'm leaving it as is                      tmp = "No args";                      enableArgs = false;                      break;                  case 2:                  case 4:                      tmp = "(Space Separated) Port";                      break;                  case 1:                      tmp = "(Space Separated) IP Port";                      break;                  case 6:                      tmp = "(Space Separated) IP";                      break;              }
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,comboBox1_SelectedIndexChanged,The following statement contains a magic number: switch (comboBox1.SelectedIndex)              {                  case 0:                  case 3:                  case 5:                      // most of these aren't going to translate very differently                       // into their foreign tongue' so i'm leaving it as is                      tmp = "No args";                      enableArgs = false;                      break;                  case 2:                  case 4:                      tmp = "(Space Separated) Port";                      break;                  case 1:                      tmp = "(Space Separated) IP Port";                      break;                  case 6:                      tmp = "(Space Separated) IP";                      break;              }
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,comboBox1_SelectedIndexChanged,The following statement contains a magic number: switch (comboBox1.SelectedIndex)              {                  case 0:                  case 3:                  case 5:                      // most of these aren't going to translate very differently                       // into their foreign tongue' so i'm leaving it as is                      tmp = "No args";                      enableArgs = false;                      break;                  case 2:                  case 4:                      tmp = "(Space Separated) Port";                      break;                  case 1:                      tmp = "(Space Separated) IP Port";                      break;                  case 6:                      tmp = "(Space Separated) IP";                      break;              }
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,button1_Click,The following statement contains a magic number: if (checkBoxIn.Checked || checkBoxOut.Checked)              {                  try                  {                      RuleType rt = RuleType.ALL;                      switch (comboBox1.SelectedIndex)                      {                          case 3:                              rt = RuleType.UDPALL;                              break;                          case 4:                              rt = RuleType.UDPPORT;                              break;                          case 1:                              rt = RuleType.TCPIPPORT;                              break;                          case 2:                              rt = RuleType.TCPPORT;                              break;                          case 0:                              rt = RuleType.TCPALL;                              break;                          case 5:                              rt = RuleType.ALL;                              break;                          case 6:                              rt = RuleType.IP;                              break;                      }                      Direction dir;                      if (checkBoxIn.Checked && checkBoxOut.Checked)                      {                          dir = Direction.IN | Direction.OUT;                      }                      else if (checkBoxOut.Checked)                      {                          dir = Direction.OUT;                      }                      else                      {                          dir = Direction.IN;                      }                      PacketStatus ps;                      if (comboBoxAction.Text == "Block")                          ps = PacketStatus.BLOCKED;                      else                          ps = PacketStatus.ALLOWED;                        // multiple ports and the ip:port rule are parsed later on' so send all args as a string                        this.DialogResult = System.Windows.Forms.DialogResult.OK;                      newRule = BasicFirewallModule.RuleFactory.MakeRule(rt' ps' dir' textBoxArguments.Text'                                                              checkBoxLog.Checked' notifyBox.Checked);                      this.Close();                  }                  catch (Exception ex)                  {                      MessageBox.Show("Error in creating rule.");                      fireBwall.Logging.LogCenter.Instance.LogException(ex);                  }              }              else              {                  MessageBox.Show("You need to select in or out first");              }
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,button1_Click,The following statement contains a magic number: if (checkBoxIn.Checked || checkBoxOut.Checked)              {                  try                  {                      RuleType rt = RuleType.ALL;                      switch (comboBox1.SelectedIndex)                      {                          case 3:                              rt = RuleType.UDPALL;                              break;                          case 4:                              rt = RuleType.UDPPORT;                              break;                          case 1:                              rt = RuleType.TCPIPPORT;                              break;                          case 2:                              rt = RuleType.TCPPORT;                              break;                          case 0:                              rt = RuleType.TCPALL;                              break;                          case 5:                              rt = RuleType.ALL;                              break;                          case 6:                              rt = RuleType.IP;                              break;                      }                      Direction dir;                      if (checkBoxIn.Checked && checkBoxOut.Checked)                      {                          dir = Direction.IN | Direction.OUT;                      }                      else if (checkBoxOut.Checked)                      {                          dir = Direction.OUT;                      }                      else                      {                          dir = Direction.IN;                      }                      PacketStatus ps;                      if (comboBoxAction.Text == "Block")                          ps = PacketStatus.BLOCKED;                      else                          ps = PacketStatus.ALLOWED;                        // multiple ports and the ip:port rule are parsed later on' so send all args as a string                        this.DialogResult = System.Windows.Forms.DialogResult.OK;                      newRule = BasicFirewallModule.RuleFactory.MakeRule(rt' ps' dir' textBoxArguments.Text'                                                              checkBoxLog.Checked' notifyBox.Checked);                      this.Close();                  }                  catch (Exception ex)                  {                      MessageBox.Show("Error in creating rule.");                      fireBwall.Logging.LogCenter.Instance.LogException(ex);                  }              }              else              {                  MessageBox.Show("You need to select in or out first");              }
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,button1_Click,The following statement contains a magic number: if (checkBoxIn.Checked || checkBoxOut.Checked)              {                  try                  {                      RuleType rt = RuleType.ALL;                      switch (comboBox1.SelectedIndex)                      {                          case 3:                              rt = RuleType.UDPALL;                              break;                          case 4:                              rt = RuleType.UDPPORT;                              break;                          case 1:                              rt = RuleType.TCPIPPORT;                              break;                          case 2:                              rt = RuleType.TCPPORT;                              break;                          case 0:                              rt = RuleType.TCPALL;                              break;                          case 5:                              rt = RuleType.ALL;                              break;                          case 6:                              rt = RuleType.IP;                              break;                      }                      Direction dir;                      if (checkBoxIn.Checked && checkBoxOut.Checked)                      {                          dir = Direction.IN | Direction.OUT;                      }                      else if (checkBoxOut.Checked)                      {                          dir = Direction.OUT;                      }                      else                      {                          dir = Direction.IN;                      }                      PacketStatus ps;                      if (comboBoxAction.Text == "Block")                          ps = PacketStatus.BLOCKED;                      else                          ps = PacketStatus.ALLOWED;                        // multiple ports and the ip:port rule are parsed later on' so send all args as a string                        this.DialogResult = System.Windows.Forms.DialogResult.OK;                      newRule = BasicFirewallModule.RuleFactory.MakeRule(rt' ps' dir' textBoxArguments.Text'                                                              checkBoxLog.Checked' notifyBox.Checked);                      this.Close();                  }                  catch (Exception ex)                  {                      MessageBox.Show("Error in creating rule.");                      fireBwall.Logging.LogCenter.Instance.LogException(ex);                  }              }              else              {                  MessageBox.Show("You need to select in or out first");              }
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,button1_Click,The following statement contains a magic number: if (checkBoxIn.Checked || checkBoxOut.Checked)              {                  try                  {                      RuleType rt = RuleType.ALL;                      switch (comboBox1.SelectedIndex)                      {                          case 3:                              rt = RuleType.UDPALL;                              break;                          case 4:                              rt = RuleType.UDPPORT;                              break;                          case 1:                              rt = RuleType.TCPIPPORT;                              break;                          case 2:                              rt = RuleType.TCPPORT;                              break;                          case 0:                              rt = RuleType.TCPALL;                              break;                          case 5:                              rt = RuleType.ALL;                              break;                          case 6:                              rt = RuleType.IP;                              break;                      }                      Direction dir;                      if (checkBoxIn.Checked && checkBoxOut.Checked)                      {                          dir = Direction.IN | Direction.OUT;                      }                      else if (checkBoxOut.Checked)                      {                          dir = Direction.OUT;                      }                      else                      {                          dir = Direction.IN;                      }                      PacketStatus ps;                      if (comboBoxAction.Text == "Block")                          ps = PacketStatus.BLOCKED;                      else                          ps = PacketStatus.ALLOWED;                        // multiple ports and the ip:port rule are parsed later on' so send all args as a string                        this.DialogResult = System.Windows.Forms.DialogResult.OK;                      newRule = BasicFirewallModule.RuleFactory.MakeRule(rt' ps' dir' textBoxArguments.Text'                                                              checkBoxLog.Checked' notifyBox.Checked);                      this.Close();                  }                  catch (Exception ex)                  {                      MessageBox.Show("Error in creating rule.");                      fireBwall.Logging.LogCenter.Instance.LogException(ex);                  }              }              else              {                  MessageBox.Show("You need to select in or out first");              }
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,button1_Click,The following statement contains a magic number: if (checkBoxIn.Checked || checkBoxOut.Checked)              {                  try                  {                      RuleType rt = RuleType.ALL;                      switch (comboBox1.SelectedIndex)                      {                          case 3:                              rt = RuleType.UDPALL;                              break;                          case 4:                              rt = RuleType.UDPPORT;                              break;                          case 1:                              rt = RuleType.TCPIPPORT;                              break;                          case 2:                              rt = RuleType.TCPPORT;                              break;                          case 0:                              rt = RuleType.TCPALL;                              break;                          case 5:                              rt = RuleType.ALL;                              break;                          case 6:                              rt = RuleType.IP;                              break;                      }                      Direction dir;                      if (checkBoxIn.Checked && checkBoxOut.Checked)                      {                          dir = Direction.IN | Direction.OUT;                      }                      else if (checkBoxOut.Checked)                      {                          dir = Direction.OUT;                      }                      else                      {                          dir = Direction.IN;                      }                      PacketStatus ps;                      if (comboBoxAction.Text == "Block")                          ps = PacketStatus.BLOCKED;                      else                          ps = PacketStatus.ALLOWED;                        // multiple ports and the ip:port rule are parsed later on' so send all args as a string                        this.DialogResult = System.Windows.Forms.DialogResult.OK;                      newRule = BasicFirewallModule.RuleFactory.MakeRule(rt' ps' dir' textBoxArguments.Text'                                                              checkBoxLog.Checked' notifyBox.Checked);                      this.Close();                  }                  catch (Exception ex)                  {                      MessageBox.Show("Error in creating rule.");                      fireBwall.Logging.LogCenter.Instance.LogException(ex);                  }              }              else              {                  MessageBox.Show("You need to select in or out first");              }
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Location = new System.Drawing.Point(12' 29);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Location = new System.Drawing.Point(12' 29);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Size = new System.Drawing.Size(451' 21);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Size = new System.Drawing.Size(451' 21);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(13' 13);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(13' 13);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(56' 13);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(56' 13);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(16' 57);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(16' 57);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(52' 13);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(52' 13);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 2;
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(388' 157);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(388' 157);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(75' 23);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(75' 23);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.button1.TabIndex = 4;
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point(307' 157);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point(307' 157);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size(75' 23);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size(75' 23);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.button2.TabIndex = 5;
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxLog.Location = new System.Drawing.Point(419' 56);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxLog.Location = new System.Drawing.Point(419' 56);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxLog.Size = new System.Drawing.Size(44' 17);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxLog.Size = new System.Drawing.Size(44' 17);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxLog.TabIndex = 6;
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxIn.Location = new System.Drawing.Point(71' 57);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxIn.Location = new System.Drawing.Point(71' 57);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxIn.Size = new System.Drawing.Size(35' 17);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxIn.Size = new System.Drawing.Size(35' 17);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxIn.TabIndex = 7;
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxOut.Location = new System.Drawing.Point(112' 56);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxOut.Location = new System.Drawing.Point(112' 56);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxOut.Size = new System.Drawing.Size(43' 17);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxOut.Size = new System.Drawing.Size(43' 17);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxOut.TabIndex = 8;
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(16' 115);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(16' 115);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(60' 13);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(60' 13);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 9;
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.labelArgs.Location = new System.Drawing.Point(82' 115);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.labelArgs.Location = new System.Drawing.Point(82' 115);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.labelArgs.Size = new System.Drawing.Size(96' 13);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.labelArgs.Size = new System.Drawing.Size(96' 13);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.labelArgs.TabIndex = 10;
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.textBoxArguments.Location = new System.Drawing.Point(12' 131);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.textBoxArguments.Location = new System.Drawing.Point(12' 131);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.textBoxArguments.Size = new System.Drawing.Size(451' 20);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.textBoxArguments.Size = new System.Drawing.Size(451' 20);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.textBoxArguments.TabIndex = 11;
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(16' 74);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(16' 74);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(37' 13);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(37' 13);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 12;
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxAction.Location = new System.Drawing.Point(12' 91);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxAction.Location = new System.Drawing.Point(12' 91);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxAction.Size = new System.Drawing.Size(451' 21);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxAction.Size = new System.Drawing.Size(451' 21);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxAction.TabIndex = 13;
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.notifyBox.Location = new System.Drawing.Point(360' 56);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.notifyBox.Location = new System.Drawing.Point(360' 56);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.notifyBox.Size = new System.Drawing.Size(53' 17);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.notifyBox.Size = new System.Drawing.Size(53' 17);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.notifyBox.TabIndex = 14;
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(470' 186);
Magic Number,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(470' 186);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.ColumnCount = 2;
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(555' 446);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(555' 446);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.Location = new System.Drawing.Point(3' 3);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.Location = new System.Drawing.Point(3' 3);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.Size = new System.Drawing.Size(453' 440);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.Size = new System.Drawing.Size(453' 440);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Controls.Add(this.buttonMoveDown' 0' 4);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Controls.Add(this.buttonMoveUp' 0' 3);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Controls.Add(this.button2' 0' 2);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Location = new System.Drawing.Point(462' 3);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Location = new System.Drawing.Point(462' 3);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.RowCount = 5;
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Size = new System.Drawing.Size(90' 440);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Size = new System.Drawing.Size(90' 440);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.TabIndex = 2;
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point(3' 179);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point(3' 179);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size(84' 82);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size(84' 82);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(3' 3);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(3' 3);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(84' 82);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(84' 82);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveUp.Location = new System.Drawing.Point(3' 267);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveUp.Location = new System.Drawing.Point(3' 267);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveUp.Size = new System.Drawing.Size(84' 82);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveUp.Size = new System.Drawing.Size(84' 82);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveUp.TabIndex = 2;
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveDown.Location = new System.Drawing.Point(3' 355);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveDown.Location = new System.Drawing.Point(3' 355);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveDown.Size = new System.Drawing.Size(84' 82);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveDown.Size = new System.Drawing.Size(84' 82);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveDown.TabIndex = 3;
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.editButton.Location = new System.Drawing.Point(3' 91);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.editButton.Location = new System.Drawing.Point(3' 91);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.editButton.Size = new System.Drawing.Size(84' 82);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.editButton.Size = new System.Drawing.Size(84' 82);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.editButton.TabIndex = 4;
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(555' 446);
Magic Number,BasicFirewall,BasicFirewallControl,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\BasicFirewallControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(555' 446);
Missing Default,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,comboBox1_SelectedIndexChanged,The following switch statement is missing a default case: switch (comboBox1.SelectedIndex)              {                  case 0:                  case 3:                  case 5:                      // most of these aren't going to translate very differently                       // into their foreign tongue' so i'm leaving it as is                      tmp = "No args";                      enableArgs = false;                      break;                  case 2:                  case 4:                      tmp = "(Space Separated) Port";                      break;                  case 1:                      tmp = "(Space Separated) IP Port";                      break;                  case 6:                      tmp = "(Space Separated) IP";                      break;              }
Missing Default,BasicFirewall,AddEditRule,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\AddEditRule.cs,button1_Click,The following switch statement is missing a default case: switch (comboBox1.SelectedIndex)                      {                          case 3:                              rt = RuleType.UDPALL;                              break;                          case 4:                              rt = RuleType.UDPPORT;                              break;                          case 1:                              rt = RuleType.TCPIPPORT;                              break;                          case 2:                              rt = RuleType.TCPPORT;                              break;                          case 0:                              rt = RuleType.TCPALL;                              break;                          case 5:                              rt = RuleType.ALL;                              break;                          case 6:                              rt = RuleType.IP;                              break;                      }
Missing Default,BasicFirewall,RuleFactory,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\fireBwallModule.cs,MakeRule,The following switch statement is missing a default case: switch (ruleType)                  {                      case RuleType.IP:                          return GenIPRule(ps' args' dir' log' notify);                      case RuleType.TCPALL:                          return new TCPAllRule(ps' dir' log' notify);                      case RuleType.TCPIPPORT:                          return new TCPIPPortRule(ps' IPAddr.Parse(args.Split(' ')[0])' int.Parse(args.Split(' ')[1])' dir' log' notify);                      case RuleType.TCPPORT:                          return GenTCPPORT(ps' args' dir' log' notify);                      case RuleType.UDPALL:                          return new UDPAllRule(ps' dir' log' notify);                      case RuleType.UDPPORT:                          return GenUDPPORT(ps' args' dir' log' notify);                      case RuleType.ALL:                          return new AllRule(ps' dir' log' notify);                  }
Missing Default,BasicFirewall,RuleSet,C:\repos\bwall_fireBwall\fireBwall\BasicFirewall\fireBwallModule.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name)                      {                          case "tcpallrule":                              serializer = new XmlSerializer(typeof(TCPAllRule));                              rules.Add((TCPAllRule)serializer.Deserialize(reader));                              break;                          case "tcpportrule":                              serializer = new XmlSerializer(typeof(TCPPortRule));                              rules.Add((TCPPortRule)serializer.Deserialize(reader));                              break;                          case "tcpipportrule":                              serializer = new XmlSerializer(typeof(TCPIPPortRule));                              rules.Add((TCPIPPortRule)serializer.Deserialize(reader));                              break;                          case "udpportrule":                              serializer = new XmlSerializer(typeof(UDPPortRule));                              rules.Add((UDPPortRule)serializer.Deserialize(reader));                              break;                          case "allrule":                              serializer = new XmlSerializer(typeof(AllRule));                              rules.Add((AllRule)serializer.Deserialize(reader));                              break;                          case "iprule":                              serializer = new XmlSerializer(typeof(IPRule));                              rules.Add((IPRule)serializer.Deserialize(reader));                              break;                          case "udpallrule":                              serializer = new XmlSerializer(typeof(UDPAllRule));                              rules.Add((UDPAllRule)serializer.Deserialize(reader));                              break;                      }
