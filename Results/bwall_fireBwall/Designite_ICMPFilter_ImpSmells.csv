Implementation smell,Namespace,Class,File,Method,Description
Long Method,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The method has 193 lines of code.
Long Method,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The method has 178 lines of code.
Long Method,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The method has 274 lines of code.
Complex Method,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,button1_Click,Cyclomatic complexity of the method is 12
Complex Method,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,Cyclomatic complexity of the method is 33
Complex Method,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,Cyclomatic complexity of the method is 31
Long Statement,ICMPFilter,ICMPFilterModule,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\fireBwallModule.cs,interiorMain,The length of the statement  "                        le = new LogEvent(String.Format(multistring.GetString("ICMPv4 was dropped")' packet.SourceIP.ToString()' packet.DestIP.ToString())' this); " is 138.
Long Statement,ICMPFilter,ICMPFilterModule,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\fireBwallModule.cs,interiorMain,The length of the statement  "                        le = new LogEvent(String.Format(multistring.GetString("ICMPv6 was dropped")' packet.SourceIP.ToString()' packet.DestIP.ToString())' this); " is 138.
Long Statement,ICMPFilter,ICMPFilterModule,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\fireBwallModule.cs,Help,The length of the statement  "                + "ICMP packets are used to exchange error messages between networked computers' but it's also used with tools such as nmap " " is 125.
Long Statement,ICMPFilter,ICMPFilterModule,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\fireBwallModule.cs,Help,The length of the statement  "                + "\n\nAs of .3.11' ICMPFilter differentiates between ICMPv4 and ICMPv6.  It can block all IPv4 or all IPv6 packets' as well" " is 125.
Long Statement,ICMPFilter,ICMPFilterModule,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\fireBwallModule.cs,Help,The length of the statement  "                + " as in inidividual v4/v6.\n\nThe module can also now block all ICMPv6 packets EXCEPT for NDP packets.  This is because" " is 122.
Long Statement,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The length of the statement  "            this.deleteButton.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 145.
Long Statement,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The length of the statement  "            this.allBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 139.
Long Statement,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The length of the statement  "            this.viewICMP.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 141.
Long Statement,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The length of the statement  "            this.tableDisplay.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 147.
Long Statement,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 50F)); " is 122.
Long Statement,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 84.36658F)); " is 122.
Long Statement,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 15.63342F)); " is 122.
Magic Number,ICMPFilter,ICMPFilterModule,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\fireBwallModule.cs,interiorMain,The following statement contains a magic number: isAllowed(packet.Type.ToString()' packet.Code.ToString()' 4) &&                      !data.DenyIPv4
Magic Number,ICMPFilter,ICMPFilterModule,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\fireBwallModule.cs,interiorMain,The following statement contains a magic number: (isAllowed(packet.Type.ToString()' packet.Code.ToString()' 6) &&                      !data.DenyIPv6) && isDeniedNDP(packet)
Magic Number,ICMPFilter,ICMPFilterModule,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\fireBwallModule.cs,isAllowed,The following statement contains a magic number: version == 4
Magic Number,ICMPFilter,ICMPFilterModule,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\fireBwallModule.cs,isDeniedNDP,The following statement contains a magic number: (packet.Type <= 133) && (packet.Type >= 137)
Magic Number,ICMPFilter,ICMPFilterModule,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\fireBwallModule.cs,isDeniedNDP,The following statement contains a magic number: (packet.Type <= 133) && (packet.Type >= 137)
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following statement contains a magic number: i <= 41
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following statement contains a magic number: i < 36
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(5' 6);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(5' 6);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(58' 17);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(58' 17);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.typeField.Location = new System.Drawing.Point(64' 3);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.typeField.Location = new System.Drawing.Point(64' 3);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.typeField.Size = new System.Drawing.Size(61' 20);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.typeField.Size = new System.Drawing.Size(61' 20);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.typeField.TabIndex = 2;
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(136' 6);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(136' 6);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(32' 13);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(32' 13);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 3;
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.codeField.Location = new System.Drawing.Point(174' 3);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.codeField.Location = new System.Drawing.Point(174' 3);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.codeField.Size = new System.Drawing.Size(188' 20);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.codeField.Size = new System.Drawing.Size(188' 20);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.codeField.TabIndex = 4;
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.addButton.Location = new System.Drawing.Point(368' 3);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.addButton.Location = new System.Drawing.Point(368' 3);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.addButton.Size = new System.Drawing.Size(97' 23);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.addButton.Size = new System.Drawing.Size(97' 23);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.addButton.TabIndex = 5;
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(171' 26);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(171' 26);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(164' 13);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(164' 13);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 6;
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.deleteButton.Location = new System.Drawing.Point(471' 3);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.deleteButton.Location = new System.Drawing.Point(471' 3);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.deleteButton.Size = new System.Drawing.Size(116' 23);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.deleteButton.Size = new System.Drawing.Size(116' 23);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.deleteButton.TabIndex = 9;
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.allBox.Location = new System.Drawing.Point(458' 3);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.allBox.Location = new System.Drawing.Point(458' 3);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.allBox.Size = new System.Drawing.Size(92' 17);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.allBox.Size = new System.Drawing.Size(92' 17);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.allBox.TabIndex = 10;
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.viewICMP.Location = new System.Drawing.Point(471' 28);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.viewICMP.Location = new System.Drawing.Point(471' 28);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.viewICMP.Size = new System.Drawing.Size(116' 23);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.viewICMP.Size = new System.Drawing.Size(116' 23);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.viewICMP.TabIndex = 11;
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.tableDisplay.Location = new System.Drawing.Point(0' 3);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.tableDisplay.Size = new System.Drawing.Size(445' 307);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.tableDisplay.Size = new System.Drawing.Size(445' 307);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.tableDisplay.TabIndex = 7;
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.Type.Width = 56;
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.Code.Width = 57;
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 50F));
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowCount = 2;
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 84.36658F));
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 15.63342F));
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(601' 374);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(601' 374);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.TabIndex = 12;
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(3' 318);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(3' 318);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(595' 53);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(595' 53);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.panel1.TabIndex = 8;
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.allButNDP.Location = new System.Drawing.Point(458' 49);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.allButNDP.Location = new System.Drawing.Point(458' 49);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.allButNDP.Size = new System.Drawing.Size(140' 17);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.allButNDP.Size = new System.Drawing.Size(140' 17);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.allButNDP.TabIndex = 14;
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.blockIPv6Box.Location = new System.Drawing.Point(458' 26);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.blockIPv6Box.Location = new System.Drawing.Point(458' 26);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.blockIPv6Box.Size = new System.Drawing.Size(92' 17);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.blockIPv6Box.Size = new System.Drawing.Size(92' 17);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.blockIPv6Box.TabIndex = 13;
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.ipv6Box.Location = new System.Drawing.Point(5' 32);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.ipv6Box.Location = new System.Drawing.Point(5' 32);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.ipv6Box.Size = new System.Drawing.Size(48' 17);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.ipv6Box.Size = new System.Drawing.Size(48' 17);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.ipv6Box.TabIndex = 12;
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Location = new System.Drawing.Point(3' 3);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Location = new System.Drawing.Point(3' 3);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(595' 309);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(595' 309);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.panel2.TabIndex = 9;
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.logBox.Location = new System.Drawing.Point(458' 73);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.logBox.Location = new System.Drawing.Point(458' 73);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.logBox.Size = new System.Drawing.Size(58' 17);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.logBox.Size = new System.Drawing.Size(58' 17);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.logBox.TabIndex = 15;
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(601' 374);
Magic Number,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(601' 374);
Missing Default,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv4,The following switch statement is missing a default case: switch (i)                  {                      // echo                      case 0:                          temp.Add("0"' "Echo Reply");                          icmpv4List.Add("0"' temp);                          break;                        // reserve                      case 1:                           temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("1"' temp);                          break;                        // reserve                      case 2:                          temp.Add("0"' "Reserved");                          temp.Add("1"' "Reserved");                          icmpv4List.Add("2"' temp);                          break;                        // destination unreachable                      case 3:                          temp.Add("0"' "Destination Network Unreachable");                          temp.Add("1"' "Destination Host Unreachable");                          temp.Add("2"' "Destination Protocol Unreachable");                          temp.Add("3"' "Destination Port Unreachable");                          temp.Add("4"' "Fragmentation Required' and DF Flag Set");                          temp.Add("5"' "Source Route Failed");                          temp.Add("6"' "Destination Network Unknown");                          temp.Add("7"' "Destination Host Unknown");                          temp.Add("8"' "Source Host Isolated");                          temp.Add("9"' "Network Administratively Prohibited");                          temp.Add("10"' "Host Administratively Prohibited");                          temp.Add("11"' "Network Unreachable for TOS");                          temp.Add("12"' "Host Unreachable for TOS");                          temp.Add("13"' "Communication Administratively Prohibited");                          icmpv4List.Add("3"' temp);                          break;                        // source quench                      case 4:                          temp.Add("0"' "Source Quenched(Congestion Control)");                          icmpv4List.Add("4"' temp);                          break;                        // redirect message                      case 5:                          temp.Add("0"' "Redirect Datagram For the Network");                          temp.Add("1"' "Redirect Datagram For the Host");                          temp.Add("2"' "Redirect Datagram For the TOS & Network");                          temp.Add("3"' "Redirect Datagram For the TOS & Host");                          icmpv4List.Add("5"' temp);                          break;                        // alt host addr                      case 6:                          temp.Add("0"' "Alternate Host Address");                          icmpv4List.Add("6"' temp);                          break;                        // alt host addr                      case 7:                          temp.Add("0"' "Reserved");                          icmpv4List.Add("7"' temp);                          break;                        // echo request                      case 8:                          temp.Add("0"' "Echo Request (Used to Ping)");                          icmpv4List.Add("8"' temp);                          break;                        // router advertisement                      case 9:                          temp.Add("0"' "Router Advertisement");                          icmpv4List.Add("9"' temp);                          break;                        // router solicitation                      case 10:                          temp.Add("0"' "Router Discovery/Selection/Solicitation");                          icmpv4List.Add("10"' temp);                          break;                        // time exceeded                      case 11:                          temp.Add("0"' "TTL Expired in Transit");                          temp.Add("1"' "Fragment Reassembly Time Exceeded");                          icmpv4List.Add("11"' temp);                          break;                         // bad IP header                      case 12:                          temp.Add("0"' "Pointer Indicates the Error");                          temp.Add("1"' "Missing A Required Option");                          temp.Add("2"' "Bad Length");                          icmpv4List.Add("12"' temp);                          break;                         // Timestamp                      case 13:                          temp.Add("0"' "Timestamp");                          icmpv4List.Add("13"' temp);                          break;                                             // Timestamp reply                      case 14:                          temp.Add("0"' "Timestamp Reply");                          icmpv4List.Add("14"' temp);                          break;                         // information request                      case 15:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("15"' temp);                          break;                         // information reply                      case 16:                          temp.Add("0"' "Information Reply");                          icmpv4List.Add("16"' temp);                          break;                         // address mask request                      case 17:                          temp.Add("0"' "Address Mask Request");                          icmpv4List.Add("17"' temp);                          break;                         // Address mask reply                      case 18:                          temp.Add("0"' "Address Mask Reply");                          icmpv4List.Add("18"' temp);                          break;                         // Reserved                      case 19:                          temp.Add("0"' "Reserved For Security");                          icmpv4List.Add("19"' temp);                          break;                        // traceroute                      case 30:                          temp.Add("0"' "Information Request");                          icmpv4List.Add("30"' temp);                          break;                                            // datagram                       case 31:                          temp.Add("0"' "Datagram Conversion Error");                          icmpv4List.Add("31"' temp);                          break;                        // mobile host redirect                      case 32:                          temp.Add("0"' "Mobile Host Redirect");                          icmpv4List.Add("32"' temp);                          break;                        // where-are-you                      case 33:                          temp.Add("0"' "Where-Are-You (Originally meant for IPv6)");                          icmpv4List.Add("33"' temp);                          break;                        // here-i-am                      case 34:                          temp.Add("0"' "Here-I-Am (Originally meant for IPv6)");                          icmpv4List.Add("34"' temp);                          break;                        // mobile reg                      case 35:                          temp.Add("0"' "Mobile Registration Request");                          icmpv4List.Add("35"' temp);                          break;                        // mobile reg                      case 36:                          temp.Add("0"' "Mobile Registration Reply");                          icmpv4List.Add("36"' temp);                          break;                        // domain name request                      case 37:                          temp.Add("0"' "Domain Name Request");                          icmpv4List.Add("37"' temp);                          break;                        // domain name reply                      case 38:                          temp.Add("0"' "Domain Name Reply");                          icmpv4List.Add("38"' temp);                          break;                                        // SKIP                      case 39:                          temp.Add("0"' "SKIP Algorithm Discovery Protocol");                          icmpv4List.Add("39"' temp);                          break;                        // Photuris                      case 40:                          temp.Add("0"' "Photuris' Security Failures");                          icmpv4List.Add("40"' temp);                          break;                        // experimental ICMP                      case 41:                          temp.Add("0"' "ICMP For Experimental Mobility Protocols");                          icmpv4List.Add("41"' temp);                          break;                  }
Missing Default,ICMPFilter,ICMPFilterDisplay,D:\research\architectureSmells\repos\bwall_fireBwall\fireBwall\ICMPFilter\ICMPFilterDisplay.cs,buildICMPListv6,The following switch statement is missing a default case: switch (i)                  {                      // destination unreachable                      case 0:                          tmp.Add("0"' "No route to destination");                          tmp.Add("1"' "Communication with destination administratively prohibited");                          tmp.Add("2"' "Communication with destination administratively prohibited");                          tmp.Add("3"' "Address Unreachable");                          tmp.Add("4"' "Port Unreachable");                          tmp.Add("5"' "Source address failed ingress/egress policy");                          tmp.Add("6"' "Reject route to destination");                          tmp.Add("7"' "Error in source routing header");                          icmpv6List.Add("1"' tmp);                          break;                                            // packet too big                      case 1:                          tmp.Add("0"' "Packet too big");                          icmpv6List.Add("2"' tmp);                          break;                        // time exceeded                      case 2:                          tmp.Add("0"' "Hop limit exceeded in transit");                          tmp.Add("1"' "Fragment reassembly time exceeded");                          icmpv6List.Add("3"' tmp);                          break;                        // parameter problem                      case 3:                          tmp.Add("0"' "Erroneous header field encountered");                          tmp.Add("1"' "Unrecognized next header type encountered");                          tmp.Add("2"' "Unrecognized IPv6 option encountered");                          icmpv6List.Add("4"' tmp);                          break;                        // echo request                      case 4:                          tmp.Add("0"' "Echo request");                          icmpv6List.Add("128"' tmp);                          break;                        // echo reply                      case 5:                          tmp.Add("0"' "Echo reply");                          icmpv6List.Add("129"' tmp);                          break;                        // multicast listener query                      case 6:                          tmp.Add("0"' "General/Multicast query");                          icmpv6List.Add("130"' tmp);                          break;                        // multicast listener report                      case 7:                          tmp.Add("0"' "Multicast listener report");                          icmpv6List.Add("131"' tmp);                          break;                        // multicast listener done                      case 8:                          tmp.Add("0"' "Multicast listener done");                          icmpv6List.Add("132"' tmp);                          break;                        // router solicitation (NDP)                      case 9:                          tmp.Add("0"' "Router Solicitation (NDP)");                          icmpv6List.Add("133"' tmp);                          break;                        // router advertisement (NDP)                      case 10:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("134"' tmp);                          break;                        // Neighbor Solicitation (NDP)                      case 11:                          tmp.Add("0"' "Neighbor Solicitation (NDP)");                          icmpv6List.Add("135"' tmp);                          break;                        // Neighbor Advertisement (NDP)                      case 12:                          tmp.Add("0"' "Router Advertisement (NDP)");                          icmpv6List.Add("136"' tmp);                          break;                        // Redirect Message (NDP)                      case 13:                          tmp.Add("0"' "Redirect Message (NDP)");                          icmpv6List.Add("137"' tmp);                          break;                        // Router Renumbering                      case 14:                          tmp.Add("0"' "Router Renumbering Command");                          tmp.Add("1"' "Router Renumbering Result");                          tmp.Add("255"' "Sequence Number Reset");                          icmpv6List.Add("138"' tmp);                          break;                        // ICMP Node information query                      case 15:                          tmp.Add("0"' "Data field contains IPv6 Address");                          tmp.Add("1"' "Data field contains a name or is empty");                          tmp.Add("2"' "Data field contains IPv4 Address");                          icmpv6List.Add("139"' tmp);                          break;                        // ICMP Node information response                      case 16:                          tmp.Add("0"' "Successful Reply");                          tmp.Add("1"' "Responder refuses to supply answer");                          tmp.Add("2"' "Qtype of query is unknown to responder");                          icmpv6List.Add("140"' tmp);                          break;                        // inverse neighbor discovery solicitation message                      case 17:                          tmp.Add("0"' "Inverse neighbor discovery solicitation message");                          icmpv6List.Add("141"' tmp);                          break;                                            // inverse neighbor discovery advertisement message                      case 18:                          tmp.Add("0"' "Inverse neighbor discovery advertisement message");                          icmpv6List.Add("142"' tmp);                          break;                                            // Multicast listener discovery reports                      case 19:                          tmp.Add("0"' "Multicast listener discovery reports");                          icmpv6List.Add("143"' tmp);                          break;                        // Home agent address discovery request message                      case 20:                          tmp.Add("0"' "Home agent address discovery request message");                          icmpv6List.Add("144"' tmp);                          break;                        // Home agent address discovery reply message                       case 21:                          tmp.Add("0"' "Home agent address discovery reply message");                          icmpv6List.Add("145"' tmp);                          break;                        // Mobile prefix solicitation                      case 22:                          tmp.Add("0"' "Mobile prefix solicitation");                          icmpv6List.Add("146"' tmp);                          break;                        // Mobile prefix advertisement                      case 23:                          tmp.Add("0"' "Mobile prefix advertisement");                          icmpv6List.Add("147"' tmp);                          break;                        // Certification Path Solicitation                      case 24:                          tmp.Add("0"' "Certification path solicitation");                          icmpv6List.Add("148"' tmp);                          break;                        // Certification path advertisement                      case 25:                          tmp.Add("0"' "Certification path advertisement");                          icmpv6List.Add("149"' tmp);                          break;                        // Multicast Router Advertisement                      case 26:                          tmp.Add("0"' "Multicast Router Advertisement");                          icmpv6List.Add("151"' tmp);                          break;                        // Multicast router solicitation                      case 27:                          tmp.Add("0"' "Multicast router solicitation");                          icmpv6List.Add("152"' tmp);                          break;                        // Multicast router termination                      case 28:                          tmp.Add("0"' "Multicast router termination");                          icmpv6List.Add("153"' tmp);                          break;                        // RPL Control message                      case 29:                          tmp.Add("0"' "RPL Control message");                          icmpv6List.Add("155"' tmp);                          break;                  }
