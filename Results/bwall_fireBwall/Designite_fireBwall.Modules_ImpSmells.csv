Implementation smell,Namespace,Class,File,Method,Description
Long Method,fireBwall.Filters.NDIS,WinpkFilter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\WinpkFilter.cs,ProcessLoop,The method has 122 lines of code.
Complex Method,fireBwall.Filters.NDIS,WinpkFilter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\WinpkFilter.cs,ProcessLoop,Cyclomatic complexity of the method is 25
Complex Method,fireBwall.Filters.NDIS,WinpkFilterList,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\WinpkFilterList.cs,NewAdaptersLoop,Cyclomatic complexity of the method is 11
Complex Method,fireBwall.Filters.NDIS,WinpkFilterList,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\WinpkFilterList.cs,UpdateCurrentAdapters,Cyclomatic complexity of the method is 13
Complex Method,fireBwall.Logging,LogCenter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Logging\LogCenter.cs,CleanLogs,Cyclomatic complexity of the method is 12
Long Parameter List,fireBwall.Filters.NDIS,WinpkFilter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\WinpkFilter.cs,WinpkFilter,The method has 5 parameters. Parameters: hNdisapi' adapterHandle' name' filter' dropall
Long Parameter List,fireBwall.Packets,PacketFactory,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\PacketFactory.cs,MakeSynPacket,The method has 6 parameters. Parameters: fromMac' toMac' fromIP' toIP' fromPort' toPort
Long Parameter List,fireBwall.Packets,PacketFactory,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\PacketFactory.cs,MakeSynPacket,The method has 5 parameters. Parameters: fromAdapter' toMac' toIP' fromPort' toPort
Long Parameter List,fireBwall.Packets,PacketFactory,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\PacketFactory.cs,MakePortClosedPacket,The method has 7 parameters. Parameters: fromMac' toMac' fromIP' toIP' fromPort' toPort' ackNumber
Long Statement,fireBwall.Configuration,GeneralConfiguration,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Configuration\GeneralConfiguration.cs,Save,The length of the statement  "                    TextWriter writer = new StreamWriter(ConfigurationManagement.Instance.ConfigurationPath + Path.DirectorySeparatorChar + "general.cfg"); " is 135.
Long Statement,fireBwall.Configuration,GeneralConfiguration,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Configuration\GeneralConfiguration.cs,Load,The length of the statement  "                        TextReader reader = new StreamReader(ConfigurationManagement.Instance.ConfigurationPath + Path.DirectorySeparatorChar + "general.cfg"); " is 135.
Long Statement,fireBwall.Configuration,IPLists,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Configuration\IPLists.cs,Save,The length of the statement  "                    TextWriter writer = new StreamWriter(ConfigurationManagement.Instance.ConfigurationPath + Path.DirectorySeparatorChar + "IPLists.cfg"); " is 135.
Long Statement,fireBwall.Configuration,IPLists,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Configuration\IPLists.cs,Load,The length of the statement  "                            TextReader reader = new StreamReader(ConfigurationManagement.Instance.ConfigurationPath + Path.DirectorySeparatorChar + "IPLists.cfg"); " is 135.
Long Statement,fireBwall.Configuration,ThemeConfiguration,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Configuration\ThemeConfiguration.cs,SetColorScheme,The length of the statement  "                ((DataGridView)control).ColumnHeadersDefaultCellStyle = new DataGridViewCellStyle() { ForeColor = Color.DarkBlue' BackColor = Color.WhiteSmoke' SelectionForeColor = Color.DarkBlue' SelectionBackColor = Color.WhiteSmoke }; " is 221.
Long Statement,fireBwall.Configuration,ThemeConfiguration,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Configuration\ThemeConfiguration.cs,SetColorScheme,The length of the statement  "                ((DataGridView)control).DefaultCellStyle = new DataGridViewCellStyle() { ForeColor = Color.DarkBlue' BackColor = Color.WhiteSmoke' SelectionBackColor = Color.LightBlue' SelectionForeColor = Color.DarkBlue }; " is 207.
Long Statement,fireBwall.Filters.NDIS,WinpkFilter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\WinpkFilter.cs,ProcessLoop,The length of the statement  "                string f = folder + System.IO.Path.DirectorySeparatorChar + "blocked-" + inter.Name + "-" + DateTime.Now.ToBinary() + ".pcap"; " is 126.
Long Statement,fireBwall.Filters.NDIS,WinpkFilterList,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\WinpkFilterList.cs,OpenDriver,The length of the statement  "                LogCenter.Instance.LogDebugMessage("Bad state was found' attempting to open the NDIS Filter Driver while the IntPtr != IntPtr.Zero' continuing"); " is 145.
Long Statement,fireBwall.Filters.NDIS,WinpkFilterList,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\WinpkFilterList.cs,NewAdaptersLoop,The length of the statement  "                            WinpkFilter newAdapter = new WinpkFilter(hNdisapi' adList.m_nAdapterHandle[x]' Encoding.ASCII.GetString(adList.m_szAdapterNameList' x * 256' 256)); " is 147.
Long Statement,fireBwall.Filters.NDIS,WinpkFilterList,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\WinpkFilterList.cs,UpdateCurrentAdapters,The length of the statement  "                        WinpkFilter newAdapter = new WinpkFilter(hNdisapi' adList.m_nAdapterHandle[x]' Encoding.ASCII.GetString(adList.m_szAdapterNameList' x * 256' 256)); " is 147.
Long Statement,fireBwall.Modules,NDISModule,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\NDISModule.cs,Load,The length of the statement  "                string file = folder + Path.DirectorySeparatorChar + adapter.GetAdapterInformation().Id + "-" + MetaData.GetMeta().Name + ".cfg"; " is 129.
Long Statement,fireBwall.Modules,NDISModule,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\NDISModule.cs,Save,The length of the statement  "                string file = folder + Path.DirectorySeparatorChar + adapter.GetAdapterInformation().Id + "-" + MetaData.GetMeta().Name + ".cfg"; " is 129.
Long Statement,fireBwall.Modules,ModuleList,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\ModuleList.cs,LoadExternalModules,The length of the statement  "            if (Directory.Exists(Configuration.ConfigurationManagement.Instance.ConfigurationPath + Path.DirectorySeparatorChar + "modules")) " is 129.
Long Statement,fireBwall.Modules,ModuleList,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\ModuleList.cs,LoadExternalModules,The length of the statement  "                DirectoryInfo di = new DirectoryInfo(Configuration.ConfigurationManagement.Instance.ConfigurationPath + Path.DirectorySeparatorChar + "modules"); " is 145.
Long Statement,fireBwall.Modules,ModuleList,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\ModuleList.cs,UpdateModuleOrder,The length of the statement  "                    moduleOrder.Add(new KeyValuePair<bool' string>(enabled[GetModuleIndex(fm.MetaData.GetMeta().Name)]' fm.MetaData.GetMeta().Name)); " is 129.
Long Statement,fireBwall.Logging,LogEvent,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Logging\LogEvent.cs,ToString,The length of the statement  "            return time.TimeOfDay.Hours.ToString("D2") + ":" + time.TimeOfDay.Minutes.ToString("D2") + ":" + time.TimeOfDay.Seconds.ToString("D2") + " " + Module.MetaData.GetMeta().Name + " " + Message; " is 190.
Long Statement,fireBwall.Packets,PacketFactory,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\PacketFactory.cs,MakeSynPacket,The length of the statement  "            return MakeSynPacket(fromAdapter.GetAdapterInformation().InterfaceInformation.GetPhysicalAddress().GetAddressBytes()' toMac' toIP' fromAdapter.GetAdapterInformation().IPv4.GetAddressBytes()' fromPort' toPort); " is 209.
Long Statement,fireBwall.Packets,PacketFactory,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\PacketFactory.cs,MakePortClosedPacket,The length of the statement  "            return MakePortClosedPacket(in_packet.ToMac' in_packet.FromMac' in_packet.DestIP.AddressBytes' in_packet.SourceIP.AddressBytes' in_packet.DestPort' in_packet.SourcePort' in_packet.SequenceNumber); " is 196.
Long Statement,fireBwall.Utils,Quad,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\Quad.cs,Equals,The length of the statement  "            return (srcIP.Equals(other.srcIP) && srcPort == other.srcPort && dstIP.Equals(other.dstIP) && dstPort == other.dstPort); " is 120.
Empty Catch Block,fireBwall.Filters.NDIS,WinpkFilterList,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\WinpkFilterList.cs,NewAdaptersLoop,The method has an empty catch block.
Magic Number,fireBwall.Filters.NDIS,Ndisapi,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\ndisapi.cs,ConvertAdapterName,The following statement contains a magic number: byte[] szAdapterName = new byte[256];
Magic Number,fireBwall.Filters.NDIS,Ndisapi,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\ndisapi.cs,ConvertAdapterName,The following statement contains a magic number: fixed (byte* pbFriendlyName = szAdapterName)              {                  if (dwPlatformId == 2/*VER_PLATFORM_WIN32_NT*/)                  {                      if (dwMajorVersion > 4)                      {                          // Windows 2000 or XP                          success = Ndisapi.ConvertWindows2000AdapterName(bAdapterName' pbFriendlyName' (uint)szAdapterName.Length);                      }                      else if (dwMajorVersion == 4)                      {                          // Windows NT 4.0                          success = Ndisapi.ConvertWindowsNTAdapterName(bAdapterName' pbFriendlyName' (uint)szAdapterName.Length);                      }                  }                  else                  {                      // Windows 9x/ME                      success = Ndisapi.ConvertWindows9xAdapterName(bAdapterName' pbFriendlyName' (uint)szAdapterName.Length);                  }                  if (success)                  {                      int zero_index = 0;                      while (zero_index < 256 && szAdapterName[zero_index] != 0)                          ++zero_index;                      res = System.Text.Encoding.ASCII.GetString(szAdapterName' 0' zero_index);                  }              }
Magic Number,fireBwall.Filters.NDIS,Ndisapi,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\ndisapi.cs,ConvertAdapterName,The following statement contains a magic number: fixed (byte* pbFriendlyName = szAdapterName)              {                  if (dwPlatformId == 2/*VER_PLATFORM_WIN32_NT*/)                  {                      if (dwMajorVersion > 4)                      {                          // Windows 2000 or XP                          success = Ndisapi.ConvertWindows2000AdapterName(bAdapterName' pbFriendlyName' (uint)szAdapterName.Length);                      }                      else if (dwMajorVersion == 4)                      {                          // Windows NT 4.0                          success = Ndisapi.ConvertWindowsNTAdapterName(bAdapterName' pbFriendlyName' (uint)szAdapterName.Length);                      }                  }                  else                  {                      // Windows 9x/ME                      success = Ndisapi.ConvertWindows9xAdapterName(bAdapterName' pbFriendlyName' (uint)szAdapterName.Length);                  }                  if (success)                  {                      int zero_index = 0;                      while (zero_index < 256 && szAdapterName[zero_index] != 0)                          ++zero_index;                      res = System.Text.Encoding.ASCII.GetString(szAdapterName' 0' zero_index);                  }              }
Magic Number,fireBwall.Filters.NDIS,Ndisapi,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\ndisapi.cs,ConvertAdapterName,The following statement contains a magic number: fixed (byte* pbFriendlyName = szAdapterName)              {                  if (dwPlatformId == 2/*VER_PLATFORM_WIN32_NT*/)                  {                      if (dwMajorVersion > 4)                      {                          // Windows 2000 or XP                          success = Ndisapi.ConvertWindows2000AdapterName(bAdapterName' pbFriendlyName' (uint)szAdapterName.Length);                      }                      else if (dwMajorVersion == 4)                      {                          // Windows NT 4.0                          success = Ndisapi.ConvertWindowsNTAdapterName(bAdapterName' pbFriendlyName' (uint)szAdapterName.Length);                      }                  }                  else                  {                      // Windows 9x/ME                      success = Ndisapi.ConvertWindows9xAdapterName(bAdapterName' pbFriendlyName' (uint)szAdapterName.Length);                  }                  if (success)                  {                      int zero_index = 0;                      while (zero_index < 256 && szAdapterName[zero_index] != 0)                          ++zero_index;                      res = System.Text.Encoding.ASCII.GetString(szAdapterName' 0' zero_index);                  }              }
Magic Number,fireBwall.Filters.NDIS,Ndisapi,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\ndisapi.cs,ConvertAdapterName,The following statement contains a magic number: fixed (byte* pbFriendlyName = szAdapterName)              {                  if (dwPlatformId == 2/*VER_PLATFORM_WIN32_NT*/)                  {                      if (dwMajorVersion > 4)                      {                          // Windows 2000 or XP                          success = Ndisapi.ConvertWindows2000AdapterName(bAdapterName' pbFriendlyName' (uint)szAdapterName.Length);                      }                      else if (dwMajorVersion == 4)                      {                          // Windows NT 4.0                          success = Ndisapi.ConvertWindowsNTAdapterName(bAdapterName' pbFriendlyName' (uint)szAdapterName.Length);                      }                  }                  else                  {                      // Windows 9x/ME                      success = Ndisapi.ConvertWindows9xAdapterName(bAdapterName' pbFriendlyName' (uint)szAdapterName.Length);                  }                  if (success)                  {                      int zero_index = 0;                      while (zero_index < 256 && szAdapterName[zero_index] != 0)                          ++zero_index;                      res = System.Text.Encoding.ASCII.GetString(szAdapterName' 0' zero_index);                  }              }
Magic Number,fireBwall.Filters.NDIS,WinpkFilterList,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\WinpkFilterList.cs,NewAdaptersLoop,The following statement contains a magic number: try              {                  while (true)                  {                      Thread.Sleep(5000);                      if (!isNdisFilterDriverOpen)                      {                          OpenDriver();                      }                      allAdapters = NetworkInterface.GetAllNetworkInterfaces();                      TCP_AdapterList adList = new TCP_AdapterList();                      Ndisapi.GetTcpipBoundAdaptersInfo(hNdisapi' ref adList);                      for (int x = 0; x < currentAdapters.Count; x++)                      {                          for (int y = 0; y < adList.m_nAdapterCount; y++)                          {                              if (adList.m_nAdapterHandle[y] == currentAdapters[x].adapterHandle)                              {                                  string name = Encoding.ASCII.GetString(adList.m_szAdapterNameList' y * 256' 256);                                  currentAdapters[x].UpdateNetworkInterface(name.Substring(0' name.IndexOf((char)0x00)));                              }                          }                      }                      for (int x = 0; x < adList.m_nAdapterCount; x++)                      {                          bool found = false;                          for (int y = 0; y < currentAdapters.Count; y++)                          {                              if (adList.m_nAdapterHandle[x] == currentAdapters[y].adapterHandle)                                  found = true;                          }                          if (!found)                          {                              WinpkFilter newAdapter = new WinpkFilter(hNdisapi' adList.m_nAdapterHandle[x]' Encoding.ASCII.GetString(adList.m_szAdapterNameList' x * 256' 256));                              if (newAdapter.GetAdapterInformation() != null && !string.IsNullOrEmpty(newAdapter.GetAdapterInformation().Name))                              {                                  //lock (newAdapters)                                  //{                                  newAdapters.Add(newAdapter);                                  //}                              }                          }                      }                  }              }              catch (ThreadAbortException) { }              catch (Exception e)              {                  LogCenter.Instance.LogException(e);              }
Magic Number,fireBwall.Filters.NDIS,WinpkFilterList,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\WinpkFilterList.cs,NewAdaptersLoop,The following statement contains a magic number: try              {                  while (true)                  {                      Thread.Sleep(5000);                      if (!isNdisFilterDriverOpen)                      {                          OpenDriver();                      }                      allAdapters = NetworkInterface.GetAllNetworkInterfaces();                      TCP_AdapterList adList = new TCP_AdapterList();                      Ndisapi.GetTcpipBoundAdaptersInfo(hNdisapi' ref adList);                      for (int x = 0; x < currentAdapters.Count; x++)                      {                          for (int y = 0; y < adList.m_nAdapterCount; y++)                          {                              if (adList.m_nAdapterHandle[y] == currentAdapters[x].adapterHandle)                              {                                  string name = Encoding.ASCII.GetString(adList.m_szAdapterNameList' y * 256' 256);                                  currentAdapters[x].UpdateNetworkInterface(name.Substring(0' name.IndexOf((char)0x00)));                              }                          }                      }                      for (int x = 0; x < adList.m_nAdapterCount; x++)                      {                          bool found = false;                          for (int y = 0; y < currentAdapters.Count; y++)                          {                              if (adList.m_nAdapterHandle[x] == currentAdapters[y].adapterHandle)                                  found = true;                          }                          if (!found)                          {                              WinpkFilter newAdapter = new WinpkFilter(hNdisapi' adList.m_nAdapterHandle[x]' Encoding.ASCII.GetString(adList.m_szAdapterNameList' x * 256' 256));                              if (newAdapter.GetAdapterInformation() != null && !string.IsNullOrEmpty(newAdapter.GetAdapterInformation().Name))                              {                                  //lock (newAdapters)                                  //{                                  newAdapters.Add(newAdapter);                                  //}                              }                          }                      }                  }              }              catch (ThreadAbortException) { }              catch (Exception e)              {                  LogCenter.Instance.LogException(e);              }
Magic Number,fireBwall.Filters.NDIS,WinpkFilterList,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\WinpkFilterList.cs,NewAdaptersLoop,The following statement contains a magic number: try              {                  while (true)                  {                      Thread.Sleep(5000);                      if (!isNdisFilterDriverOpen)                      {                          OpenDriver();                      }                      allAdapters = NetworkInterface.GetAllNetworkInterfaces();                      TCP_AdapterList adList = new TCP_AdapterList();                      Ndisapi.GetTcpipBoundAdaptersInfo(hNdisapi' ref adList);                      for (int x = 0; x < currentAdapters.Count; x++)                      {                          for (int y = 0; y < adList.m_nAdapterCount; y++)                          {                              if (adList.m_nAdapterHandle[y] == currentAdapters[x].adapterHandle)                              {                                  string name = Encoding.ASCII.GetString(adList.m_szAdapterNameList' y * 256' 256);                                  currentAdapters[x].UpdateNetworkInterface(name.Substring(0' name.IndexOf((char)0x00)));                              }                          }                      }                      for (int x = 0; x < adList.m_nAdapterCount; x++)                      {                          bool found = false;                          for (int y = 0; y < currentAdapters.Count; y++)                          {                              if (adList.m_nAdapterHandle[x] == currentAdapters[y].adapterHandle)                                  found = true;                          }                          if (!found)                          {                              WinpkFilter newAdapter = new WinpkFilter(hNdisapi' adList.m_nAdapterHandle[x]' Encoding.ASCII.GetString(adList.m_szAdapterNameList' x * 256' 256));                              if (newAdapter.GetAdapterInformation() != null && !string.IsNullOrEmpty(newAdapter.GetAdapterInformation().Name))                              {                                  //lock (newAdapters)                                  //{                                  newAdapters.Add(newAdapter);                                  //}                              }                          }                      }                  }              }              catch (ThreadAbortException) { }              catch (Exception e)              {                  LogCenter.Instance.LogException(e);              }
Magic Number,fireBwall.Filters.NDIS,WinpkFilterList,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\WinpkFilterList.cs,NewAdaptersLoop,The following statement contains a magic number: try              {                  while (true)                  {                      Thread.Sleep(5000);                      if (!isNdisFilterDriverOpen)                      {                          OpenDriver();                      }                      allAdapters = NetworkInterface.GetAllNetworkInterfaces();                      TCP_AdapterList adList = new TCP_AdapterList();                      Ndisapi.GetTcpipBoundAdaptersInfo(hNdisapi' ref adList);                      for (int x = 0; x < currentAdapters.Count; x++)                      {                          for (int y = 0; y < adList.m_nAdapterCount; y++)                          {                              if (adList.m_nAdapterHandle[y] == currentAdapters[x].adapterHandle)                              {                                  string name = Encoding.ASCII.GetString(adList.m_szAdapterNameList' y * 256' 256);                                  currentAdapters[x].UpdateNetworkInterface(name.Substring(0' name.IndexOf((char)0x00)));                              }                          }                      }                      for (int x = 0; x < adList.m_nAdapterCount; x++)                      {                          bool found = false;                          for (int y = 0; y < currentAdapters.Count; y++)                          {                              if (adList.m_nAdapterHandle[x] == currentAdapters[y].adapterHandle)                                  found = true;                          }                          if (!found)                          {                              WinpkFilter newAdapter = new WinpkFilter(hNdisapi' adList.m_nAdapterHandle[x]' Encoding.ASCII.GetString(adList.m_szAdapterNameList' x * 256' 256));                              if (newAdapter.GetAdapterInformation() != null && !string.IsNullOrEmpty(newAdapter.GetAdapterInformation().Name))                              {                                  //lock (newAdapters)                                  //{                                  newAdapters.Add(newAdapter);                                  //}                              }                          }                      }                  }              }              catch (ThreadAbortException) { }              catch (Exception e)              {                  LogCenter.Instance.LogException(e);              }
Magic Number,fireBwall.Filters.NDIS,WinpkFilterList,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\WinpkFilterList.cs,NewAdaptersLoop,The following statement contains a magic number: try              {                  while (true)                  {                      Thread.Sleep(5000);                      if (!isNdisFilterDriverOpen)                      {                          OpenDriver();                      }                      allAdapters = NetworkInterface.GetAllNetworkInterfaces();                      TCP_AdapterList adList = new TCP_AdapterList();                      Ndisapi.GetTcpipBoundAdaptersInfo(hNdisapi' ref adList);                      for (int x = 0; x < currentAdapters.Count; x++)                      {                          for (int y = 0; y < adList.m_nAdapterCount; y++)                          {                              if (adList.m_nAdapterHandle[y] == currentAdapters[x].adapterHandle)                              {                                  string name = Encoding.ASCII.GetString(adList.m_szAdapterNameList' y * 256' 256);                                  currentAdapters[x].UpdateNetworkInterface(name.Substring(0' name.IndexOf((char)0x00)));                              }                          }                      }                      for (int x = 0; x < adList.m_nAdapterCount; x++)                      {                          bool found = false;                          for (int y = 0; y < currentAdapters.Count; y++)                          {                              if (adList.m_nAdapterHandle[x] == currentAdapters[y].adapterHandle)                                  found = true;                          }                          if (!found)                          {                              WinpkFilter newAdapter = new WinpkFilter(hNdisapi' adList.m_nAdapterHandle[x]' Encoding.ASCII.GetString(adList.m_szAdapterNameList' x * 256' 256));                              if (newAdapter.GetAdapterInformation() != null && !string.IsNullOrEmpty(newAdapter.GetAdapterInformation().Name))                              {                                  //lock (newAdapters)                                  //{                                  newAdapters.Add(newAdapter);                                  //}                              }                          }                      }                  }              }              catch (ThreadAbortException) { }              catch (Exception e)              {                  LogCenter.Instance.LogException(e);              }
Magic Number,fireBwall.Filters.NDIS,WinpkFilterList,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\WinpkFilterList.cs,UpdateCurrentAdapters,The following statement contains a magic number: while (!succeeded)              {                  if (!isNdisFilterDriverOpen)                      OpenDriver();                  TCP_AdapterList adList = new TCP_AdapterList();                  Ndisapi.GetTcpipBoundAdaptersInfo(hNdisapi' ref adList);                  List<WinpkFilter> tempList = new List<WinpkFilter>();                    //Populate with current adapters                  List<WinpkFilter> notFound = new List<WinpkFilter>();                  for (int x = 0; x < currentAdapters.Count; x++)                  {                      bool found = false;                      for (int y = 0; y < adList.m_nAdapterCount; y++)                      {                          if (adList.m_nAdapterHandle[y] == currentAdapters[x].adapterHandle)                          {                              currentAdapters[x].UpdateNetworkInterface(Encoding.ASCII.GetString(adList.m_szAdapterNameList' y * 256' 256));                              tempList.Add(currentAdapters[x]);                              found = true;                          }                      }                      if (!found)                      {                          notFound.Add(currentAdapters[x]);                      }                  }                    //Deal with no longer existant adapters                  for (int x = 0; x < notFound.Count; x++)                  {                      notFound[x].StopProcessing();                  }                    //Adding any new adapters                  for (int x = 0; x < adList.m_nAdapterCount; x++)                  {                      bool found = false;                      for (int y = 0; y < currentAdapters.Count; y++)                      {                          if (adList.m_nAdapterHandle[x] == currentAdapters[y].adapterHandle)                              found = true;                      }                      if (!found)                      {                          WinpkFilter newAdapter = new WinpkFilter(hNdisapi' adList.m_nAdapterHandle[x]' Encoding.ASCII.GetString(adList.m_szAdapterNameList' x * 256' 256));                          if (newAdapter.GetAdapterInformation() != null && !string.IsNullOrEmpty(newAdapter.GetAdapterInformation().Name))                          {                              tempList.Add(newAdapter);                          }                      }                  }                    currentAdapters = new List<WinpkFilter>(tempList);                  succeeded = true;              }
Magic Number,fireBwall.Filters.NDIS,WinpkFilterList,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\WinpkFilterList.cs,UpdateCurrentAdapters,The following statement contains a magic number: while (!succeeded)              {                  if (!isNdisFilterDriverOpen)                      OpenDriver();                  TCP_AdapterList adList = new TCP_AdapterList();                  Ndisapi.GetTcpipBoundAdaptersInfo(hNdisapi' ref adList);                  List<WinpkFilter> tempList = new List<WinpkFilter>();                    //Populate with current adapters                  List<WinpkFilter> notFound = new List<WinpkFilter>();                  for (int x = 0; x < currentAdapters.Count; x++)                  {                      bool found = false;                      for (int y = 0; y < adList.m_nAdapterCount; y++)                      {                          if (adList.m_nAdapterHandle[y] == currentAdapters[x].adapterHandle)                          {                              currentAdapters[x].UpdateNetworkInterface(Encoding.ASCII.GetString(adList.m_szAdapterNameList' y * 256' 256));                              tempList.Add(currentAdapters[x]);                              found = true;                          }                      }                      if (!found)                      {                          notFound.Add(currentAdapters[x]);                      }                  }                    //Deal with no longer existant adapters                  for (int x = 0; x < notFound.Count; x++)                  {                      notFound[x].StopProcessing();                  }                    //Adding any new adapters                  for (int x = 0; x < adList.m_nAdapterCount; x++)                  {                      bool found = false;                      for (int y = 0; y < currentAdapters.Count; y++)                      {                          if (adList.m_nAdapterHandle[x] == currentAdapters[y].adapterHandle)                              found = true;                      }                      if (!found)                      {                          WinpkFilter newAdapter = new WinpkFilter(hNdisapi' adList.m_nAdapterHandle[x]' Encoding.ASCII.GetString(adList.m_szAdapterNameList' x * 256' 256));                          if (newAdapter.GetAdapterInformation() != null && !string.IsNullOrEmpty(newAdapter.GetAdapterInformation().Name))                          {                              tempList.Add(newAdapter);                          }                      }                  }                    currentAdapters = new List<WinpkFilter>(tempList);                  succeeded = true;              }
Magic Number,fireBwall.Filters.NDIS,WinpkFilterList,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\WinpkFilterList.cs,UpdateCurrentAdapters,The following statement contains a magic number: while (!succeeded)              {                  if (!isNdisFilterDriverOpen)                      OpenDriver();                  TCP_AdapterList adList = new TCP_AdapterList();                  Ndisapi.GetTcpipBoundAdaptersInfo(hNdisapi' ref adList);                  List<WinpkFilter> tempList = new List<WinpkFilter>();                    //Populate with current adapters                  List<WinpkFilter> notFound = new List<WinpkFilter>();                  for (int x = 0; x < currentAdapters.Count; x++)                  {                      bool found = false;                      for (int y = 0; y < adList.m_nAdapterCount; y++)                      {                          if (adList.m_nAdapterHandle[y] == currentAdapters[x].adapterHandle)                          {                              currentAdapters[x].UpdateNetworkInterface(Encoding.ASCII.GetString(adList.m_szAdapterNameList' y * 256' 256));                              tempList.Add(currentAdapters[x]);                              found = true;                          }                      }                      if (!found)                      {                          notFound.Add(currentAdapters[x]);                      }                  }                    //Deal with no longer existant adapters                  for (int x = 0; x < notFound.Count; x++)                  {                      notFound[x].StopProcessing();                  }                    //Adding any new adapters                  for (int x = 0; x < adList.m_nAdapterCount; x++)                  {                      bool found = false;                      for (int y = 0; y < currentAdapters.Count; y++)                      {                          if (adList.m_nAdapterHandle[x] == currentAdapters[y].adapterHandle)                              found = true;                      }                      if (!found)                      {                          WinpkFilter newAdapter = new WinpkFilter(hNdisapi' adList.m_nAdapterHandle[x]' Encoding.ASCII.GetString(adList.m_szAdapterNameList' x * 256' 256));                          if (newAdapter.GetAdapterInformation() != null && !string.IsNullOrEmpty(newAdapter.GetAdapterInformation().Name))                          {                              tempList.Add(newAdapter);                          }                      }                  }                    currentAdapters = new List<WinpkFilter>(tempList);                  succeeded = true;              }
Magic Number,fireBwall.Filters.NDIS,WinpkFilterList,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\WinpkFilterList.cs,UpdateCurrentAdapters,The following statement contains a magic number: while (!succeeded)              {                  if (!isNdisFilterDriverOpen)                      OpenDriver();                  TCP_AdapterList adList = new TCP_AdapterList();                  Ndisapi.GetTcpipBoundAdaptersInfo(hNdisapi' ref adList);                  List<WinpkFilter> tempList = new List<WinpkFilter>();                    //Populate with current adapters                  List<WinpkFilter> notFound = new List<WinpkFilter>();                  for (int x = 0; x < currentAdapters.Count; x++)                  {                      bool found = false;                      for (int y = 0; y < adList.m_nAdapterCount; y++)                      {                          if (adList.m_nAdapterHandle[y] == currentAdapters[x].adapterHandle)                          {                              currentAdapters[x].UpdateNetworkInterface(Encoding.ASCII.GetString(adList.m_szAdapterNameList' y * 256' 256));                              tempList.Add(currentAdapters[x]);                              found = true;                          }                      }                      if (!found)                      {                          notFound.Add(currentAdapters[x]);                      }                  }                    //Deal with no longer existant adapters                  for (int x = 0; x < notFound.Count; x++)                  {                      notFound[x].StopProcessing();                  }                    //Adding any new adapters                  for (int x = 0; x < adList.m_nAdapterCount; x++)                  {                      bool found = false;                      for (int y = 0; y < currentAdapters.Count; y++)                      {                          if (adList.m_nAdapterHandle[x] == currentAdapters[y].adapterHandle)                              found = true;                      }                      if (!found)                      {                          WinpkFilter newAdapter = new WinpkFilter(hNdisapi' adList.m_nAdapterHandle[x]' Encoding.ASCII.GetString(adList.m_szAdapterNameList' x * 256' 256));                          if (newAdapter.GetAdapterInformation() != null && !string.IsNullOrEmpty(newAdapter.GetAdapterInformation().Name))                          {                              tempList.Add(newAdapter);                          }                      }                  }                    currentAdapters = new List<WinpkFilter>(tempList);                  succeeded = true;              }
Magic Number,fireBwall.Logging,LogCenter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Logging\LogCenter.cs,EventLoop,The following statement contains a magic number: while (true)              {                  Thread.Sleep(50);                  LogEvent[] temp = EventQueue.DumpBuffer().ToArray();                  if (temp != null)                  {                      foreach (LogEvent le in temp)                      {                          WriteLogFile(le);                          if (PushLogEvent != null)                              PushLogEvent(le);                      }                  }              }
Magic Number,fireBwall.Logging,LogCenter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Logging\LogCenter.cs,ExceptionLoop,The following statement contains a magic number: while (true)              {                  Thread.Sleep(50);                  Exception[] temp = ExceptionQueue.DumpBuffer().ToArray();                  if (temp != null)                  {                      foreach (Exception le in temp)                      {                          WriteErrorLog(le);                          if (PushExceptionEvent != null)                              PushExceptionEvent(le);                      }                  }              }
Magic Number,fireBwall.Logging,LogCenter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Logging\LogCenter.cs,DebugLoop,The following statement contains a magic number: while (true)              {                  Thread.Sleep(50);                  DebugLogMessage[] temp = DebugQueue.DumpBuffer().ToArray();                  if (temp != null)                  {                      foreach (DebugLogMessage le in temp)                      {                          WriteDebugLog(le);                          if (PushDebugLogEvent != null)                              PushDebugLogEvent(le);                      }                  }              }
Magic Number,fireBwall.Packets,ARPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\ARPPacket.cs,ARPPacket,The following statement contains a magic number: if (eth.CodeGenerated)              {                  HardwareType = 1;                  ProtocolType = 0x0800;                  HardwareSize = 0x06;                  ProtocolSize = 4;                  ARPOpcode = 0x0002;              }
Magic Number,fireBwall.Packets,EthPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\EthPacket.cs,LayerLength,The following statement contains a magic number: return 14;
Magic Number,fireBwall.Packets,ICMPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\ICMPPacket.cs,GetICMPData,The following statement contains a magic number: uint dataStart = start + 8;
Magic Number,fireBwall.Packets,ICMPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\ICMPPacket.cs,GetICMPData,The following statement contains a magic number: uint dataEnd = dataStart + 32;
Magic Number,fireBwall.Packets,ICMPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\ICMPPacket.cs,SetICMPData,The following statement contains a magic number: uint dataStart = start + 8;
Magic Number,fireBwall.Packets,ICMPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\ICMPPacket.cs,SetICMPData,The following statement contains a magic number: uint dataEnd = dataStart + 32;
Magic Number,fireBwall.Packets,ICMPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\ICMPPacket.cs,LayerLength,The following statement contains a magic number: return 8;
Magic Number,fireBwall.Packets,IPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\IPPacket.cs,IPPacket,The following statement contains a magic number: if (eth.CodeGenerated)              {                  this.CodeGenerated = true;                  if (isIPv6())                  {                      data->m_IBuffer[start] = 0x60;                      data->m_IBuffer[start + 1] = 0x00;                      this.TTL = 0xff;                  }                  else                  {                      data->m_IBuffer[start] = 0x45;                      this.DiffServicesField = 0x00;                      this.Identification = 23950;                      this.FragmentOffset = 0;                      this.Flags = 0x40;                      this.TTL = 128;                  }                              }
Magic Number,fireBwall.Packets,IPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\IPPacket.cs,IPPacket,The following statement contains a magic number: if (eth.CodeGenerated)              {                  this.CodeGenerated = true;                  if (isIPv6())                  {                      data->m_IBuffer[start] = 0x60;                      data->m_IBuffer[start + 1] = 0x00;                      this.TTL = 0xff;                  }                  else                  {                      data->m_IBuffer[start] = 0x45;                      this.DiffServicesField = 0x00;                      this.Identification = 23950;                      this.FragmentOffset = 0;                      this.Flags = 0x40;                      this.TTL = 128;                  }                              }
Magic Number,fireBwall.Packets,IPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\IPPacket.cs,IPPacket,The following statement contains a magic number: if (isIPv6())                  length = 40;              else                  length = (uint)((data->m_IBuffer[start] & 0xf) * 4);
Magic Number,fireBwall.Packets,IPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\IPPacket.cs,IPPacket,The following statement contains a magic number: if (isIPv6())                  length = 40;              else                  length = (uint)((data->m_IBuffer[start] & 0xf) * 4);
Magic Number,fireBwall.Packets,IPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\IPPacket.cs,GetIPChecksum,The following statement contains a magic number: for (uint i = this.start; i < this.start + 10; i += 2)              {                  sum += (UInt32)(data->m_IBuffer[i] << 8) | data->m_IBuffer[i + 1];              }
Magic Number,fireBwall.Packets,IPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\IPPacket.cs,GetIPChecksum,The following statement contains a magic number: for (uint i = this.start; i < this.start + 10; i += 2)              {                  sum += (UInt32)(data->m_IBuffer[i] << 8) | data->m_IBuffer[i + 1];              }
Magic Number,fireBwall.Packets,IPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\IPPacket.cs,GetIPChecksum,The following statement contains a magic number: for (uint i = this.start; i < this.start + 10; i += 2)              {                  sum += (UInt32)(data->m_IBuffer[i] << 8) | data->m_IBuffer[i + 1];              }
Magic Number,fireBwall.Packets,IPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\IPPacket.cs,GetIPChecksum,The following statement contains a magic number: for (uint i = this.start + 12; i < this.start + this.length; i += 2)              {                  sum += (UInt32)(data->m_IBuffer[i] << 8) | data->m_IBuffer[i + 1];              }
Magic Number,fireBwall.Packets,IPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\IPPacket.cs,GetIPChecksum,The following statement contains a magic number: for (uint i = this.start + 12; i < this.start + this.length; i += 2)              {                  sum += (UInt32)(data->m_IBuffer[i] << 8) | data->m_IBuffer[i + 1];              }
Magic Number,fireBwall.Packets,IPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\IPPacket.cs,GetIPChecksum,The following statement contains a magic number: for (uint i = this.start + 12; i < this.start + this.length; i += 2)              {                  sum += (UInt32)(data->m_IBuffer[i] << 8) | data->m_IBuffer[i + 1];              }
Magic Number,fireBwall.Packets,IPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\IPPacket.cs,GetIPChecksum,The following statement contains a magic number: while ((sum >> 16) != 0)                  sum = ((sum & 0xFFFF) + (sum >> 16));
Magic Number,fireBwall.Packets,IPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\IPPacket.cs,GetIPChecksum,The following statement contains a magic number: while ((sum >> 16) != 0)                  sum = ((sum & 0xFFFF) + (sum >> 16));
Magic Number,fireBwall.Packets,IPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\IPPacket.cs,IPPacket,The following statement contains a magic number: if (isIPv6())                  length = 40;              else                  length = (uint)((data->m_IBuffer[start] & 0xf) * 4);
Magic Number,fireBwall.Packets,IPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\IPPacket.cs,IPPacket,The following statement contains a magic number: if (isIPv6())                  length = 40;              else                  length = (uint)((data->m_IBuffer[start] & 0xf) * 4);
Magic Number,fireBwall.Packets,PacketFactory,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\PacketFactory.cs,MakeSynPacket,The following statement contains a magic number: EthPacket e = new EthPacket(60);
Magic Number,fireBwall.Packets,PacketFactory,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\PacketFactory.cs,MakeSynPacket,The following statement contains a magic number: e.Proto = new byte[2] { 0x08' 0x00 };
Magic Number,fireBwall.Packets,PacketFactory,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\PacketFactory.cs,MakeSynPacket,The following statement contains a magic number: ip.TotalLength = 40;
Magic Number,fireBwall.Packets,PacketFactory,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\PacketFactory.cs,MakeSynPacket,The following statement contains a magic number: tcp.WindowSize = 8192;
Magic Number,fireBwall.Packets,PacketFactory,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\PacketFactory.cs,MakePortClosedPacket,The following statement contains a magic number: EthPacket e = new EthPacket(60);
Magic Number,fireBwall.Packets,PacketFactory,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\PacketFactory.cs,MakePortClosedPacket,The following statement contains a magic number: e.Proto = new byte[2] { 0x08' 0x00 };
Magic Number,fireBwall.Packets,PacketFactory,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\PacketFactory.cs,MakePortClosedPacket,The following statement contains a magic number: ip.TotalLength = 40;
Magic Number,fireBwall.Packets,PacketFactory,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\PacketFactory.cs,MakePortClosedPacket,The following statement contains a magic number: tcp.WindowSize = 8192;
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,TCPPacket,The following statement contains a magic number: length = (uint)((data->m_IBuffer[start + 12] >> 4) * 4);
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,TCPPacket,The following statement contains a magic number: length = (uint)((data->m_IBuffer[start + 12] >> 4) * 4);
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,TCPPacket,The following statement contains a magic number: length = (uint)((data->m_IBuffer[start + 12] >> 4) * 4);
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,TCPPacket,The following statement contains a magic number: if (eth.CodeGenerated)              {                  this.CodeGenerated = true;                  data->m_IBuffer[start + 12] = 0x50;              }
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,TCPPacket,The following statement contains a magic number: length = (uint)((data->m_IBuffer[start + 12] >> 4) * 4);
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,TCPPacket,The following statement contains a magic number: length = (uint)((data->m_IBuffer[start + 12] >> 4) * 4);
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,TCPPacket,The following statement contains a magic number: length = (uint)((data->m_IBuffer[start + 12] >> 4) * 4);
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,GetApplicationLayer_safe,The following statement contains a magic number: if (data->m_IBuffer[start + 14] == 0xff && data->m_IBuffer[start + 15] == 0x37)                  return new byte[0];
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,GetApplicationLayer_safe,The following statement contains a magic number: if (data->m_IBuffer[start + 14] == 0xff && data->m_IBuffer[start + 15] == 0x37)                  return new byte[0];
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,GetNextSequenceNumber,The following statement contains a magic number: return SequenceNumber + this.TotalLength - 40;
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,GetChecksum,The following statement contains a magic number: for (uint i = this.start; i < this.start + 16; i += 2)              {                  sum += (UInt32)(data->m_IBuffer[i] << 8) | data->m_IBuffer[i + 1];              }
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,GetChecksum,The following statement contains a magic number: for (uint i = this.start; i < this.start + 16; i += 2)              {                  sum += (UInt32)(data->m_IBuffer[i] << 8) | data->m_IBuffer[i + 1];              }
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,GetChecksum,The following statement contains a magic number: for (uint i = this.start; i < this.start + 16; i += 2)              {                  sum += (UInt32)(data->m_IBuffer[i] << 8) | data->m_IBuffer[i + 1];              }
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,GetChecksum,The following statement contains a magic number: for (uint i = this.start + 18; i < TotalLength + base.LayerStart() - 1; i += 2)              {                  sum += (UInt32)(data->m_IBuffer[i] << 8) | data->m_IBuffer[i + 1];                              }
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,GetChecksum,The following statement contains a magic number: for (uint i = this.start + 18; i < TotalLength + base.LayerStart() - 1; i += 2)              {                  sum += (UInt32)(data->m_IBuffer[i] << 8) | data->m_IBuffer[i + 1];                              }
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,GetChecksum,The following statement contains a magic number: for (uint i = this.start + 18; i < TotalLength + base.LayerStart() - 1; i += 2)              {                  sum += (UInt32)(data->m_IBuffer[i] << 8) | data->m_IBuffer[i + 1];                              }
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,GetChecksum,The following statement contains a magic number: if (((TotalLength + base.LayerStart()) % 2) == 1)              {                  sum += (UInt32)(data->m_IBuffer[TotalLength + base.LayerStart() - 1] << 8);              }
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,GetChecksum,The following statement contains a magic number: if (((TotalLength + base.LayerStart()) % 2) == 1)              {                  sum += (UInt32)(data->m_IBuffer[TotalLength + base.LayerStart() - 1] << 8);              }
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,GetChecksum,The following statement contains a magic number: for (int i = 0; i < 4; i += 2)              {                  sum += (UInt32)(((srcB[i] << 8) & 0xFF00) | (srcB[i + 1] & 0xFF));              }
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,GetChecksum,The following statement contains a magic number: for (int i = 0; i < 4; i += 2)              {                  sum += (UInt32)(((srcB[i] << 8) & 0xFF00) | (srcB[i + 1] & 0xFF));              }
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,GetChecksum,The following statement contains a magic number: for (int i = 0; i < 4; i += 2)              {                  sum += (UInt32)(((srcB[i] << 8) & 0xFF00) | (srcB[i + 1] & 0xFF));              }
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,GetChecksum,The following statement contains a magic number: for (int i = 0; i < 4; i += 2)              {                  sum += (UInt32)(((destB[i] << 8) & 0xFF00) | (destB[i + 1] & 0xFF));              }
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,GetChecksum,The following statement contains a magic number: for (int i = 0; i < 4; i += 2)              {                  sum += (UInt32)(((destB[i] << 8) & 0xFF00) | (destB[i + 1] & 0xFF));              }
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,GetChecksum,The following statement contains a magic number: for (int i = 0; i < 4; i += 2)              {                  sum += (UInt32)(((destB[i] << 8) & 0xFF00) | (destB[i + 1] & 0xFF));              }
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,GetChecksum,The following statement contains a magic number: while ((sum >> 16) != 0)                  sum = ((sum & 0xFFFF) + (sum >> 16));
Magic Number,fireBwall.Packets,TCPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\TCPPacket.cs,GetChecksum,The following statement contains a magic number: while ((sum >> 16) != 0)                  sum = ((sum & 0xFFFF) + (sum >> 16));
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,LayerLength,The following statement contains a magic number: return 8;
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,isEmpty,The following statement contains a magic number: return ((data->m_IBuffer[start + 8] << 8) == 0x00);
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,isEmpty,The following statement contains a magic number: return ((data->m_IBuffer[start + 8] << 8) == 0x00);
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,isDNS,The following statement contains a magic number: return (SourcePort == 53 || DestPort == 53);
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,isDNS,The following statement contains a magic number: return (SourcePort == 53 || DestPort == 53);
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,isSNMP,The following statement contains a magic number: return (SourcePort == 161 || SourcePort == 162);
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,isSNMP,The following statement contains a magic number: return (SourcePort == 161 || SourcePort == 162);
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,GetUDPChecksum,The following statement contains a magic number: for (uint i = this.start; i < this.start + 6; i += 2)              {                  sum += (UInt32)(data->m_IBuffer[i] << 8) | data->m_IBuffer[i + 1];              }
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,GetUDPChecksum,The following statement contains a magic number: for (uint i = this.start; i < this.start + 6; i += 2)              {                  sum += (UInt32)(data->m_IBuffer[i] << 8) | data->m_IBuffer[i + 1];              }
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,GetUDPChecksum,The following statement contains a magic number: for (uint i = this.start; i < this.start + 6; i += 2)              {                  sum += (UInt32)(data->m_IBuffer[i] << 8) | data->m_IBuffer[i + 1];              }
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,GetUDPChecksum,The following statement contains a magic number: for (uint i = this.start + 8; i < TotalLength + base.LayerStart() - 1; i += 2)              {                  sum += (UInt32)(data->m_IBuffer[i] << 8) | data->m_IBuffer[i + 1];              }
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,GetUDPChecksum,The following statement contains a magic number: for (uint i = this.start + 8; i < TotalLength + base.LayerStart() - 1; i += 2)              {                  sum += (UInt32)(data->m_IBuffer[i] << 8) | data->m_IBuffer[i + 1];              }
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,GetUDPChecksum,The following statement contains a magic number: for (uint i = this.start + 8; i < TotalLength + base.LayerStart() - 1; i += 2)              {                  sum += (UInt32)(data->m_IBuffer[i] << 8) | data->m_IBuffer[i + 1];              }
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,GetUDPChecksum,The following statement contains a magic number: if (((TotalLength + base.LayerStart()) % 2) == 1)              {                  sum += (UInt32)(data->m_IBuffer[TotalLength + base.LayerStart() - 1] << 8);              }
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,GetUDPChecksum,The following statement contains a magic number: if (((TotalLength + base.LayerStart()) % 2) == 1)              {                  sum += (UInt32)(data->m_IBuffer[TotalLength + base.LayerStart() - 1] << 8);              }
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,GetUDPChecksum,The following statement contains a magic number: for (int i = 0; i < 4; i += 2)              {                  sum += (UInt32)(((srcB[i] << 8) & 0xFF00) | (srcB[i + 1] & 0xFF));              }
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,GetUDPChecksum,The following statement contains a magic number: for (int i = 0; i < 4; i += 2)              {                  sum += (UInt32)(((srcB[i] << 8) & 0xFF00) | (srcB[i + 1] & 0xFF));              }
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,GetUDPChecksum,The following statement contains a magic number: for (int i = 0; i < 4; i += 2)              {                  sum += (UInt32)(((srcB[i] << 8) & 0xFF00) | (srcB[i + 1] & 0xFF));              }
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,GetUDPChecksum,The following statement contains a magic number: for (int i = 0; i < 4; i += 2)              {                  sum += (UInt32)(((destB[i] << 8) & 0xFF00) | (destB[i + 1] & 0xFF));              }
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,GetUDPChecksum,The following statement contains a magic number: for (int i = 0; i < 4; i += 2)              {                  sum += (UInt32)(((destB[i] << 8) & 0xFF00) | (destB[i + 1] & 0xFF));              }
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,GetUDPChecksum,The following statement contains a magic number: for (int i = 0; i < 4; i += 2)              {                  sum += (UInt32)(((destB[i] << 8) & 0xFF00) | (destB[i + 1] & 0xFF));              }
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,GetUDPChecksum,The following statement contains a magic number: while ((sum >> 16) != 0)                  sum = ((sum & 0xFFFF) + (sum >> 16));
Magic Number,fireBwall.Packets,UDPPacket,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Packets\UDPPacket.cs,GetUDPChecksum,The following statement contains a magic number: while ((sum >> 16) != 0)                  sum = ((sum & 0xFFFF) + (sum >> 16));
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: AddBits(count * 8);
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,AddBits,The following statement contains a magic number: kbits += bits / 1024;
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,AddBits,The following statement contains a magic number: bits = bits % 1024;
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,AddBits,The following statement contains a magic number: mbits += kbits / 1024;
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,AddBits,The following statement contains a magic number: kbits = kbits % 1024;
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,AddBits,The following statement contains a magic number: gbits += mbits / 1024;
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,AddBits,The following statement contains a magic number: mbits = mbits % 1024;
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,AddBits,The following statement contains a magic number: tbits += gbits / 1024;
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,AddBits,The following statement contains a magic number: gbits = gbits % 1024;
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,AddBits,The following statement contains a magic number: pbits += tbits / 1024;
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,AddBits,The following statement contains a magic number: tbits = tbits % 1024;
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)              {                  double ret = (double)pbits + ((double)((double)tbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbits > 0)              {                  double ret = (double)tbits + ((double)((double)gbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Tb";              }              else if (gbits > 0)              {                  double ret = (double)gbits + ((double)((double)mbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Gb";              }              else if (mbits > 0)              {                  double ret = (double)mbits + ((double)((double)kbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Mb";              }              else if (kbits > 0)              {                  double ret = (double)kbits + ((double)((double)bits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Kb";              }              else              {                  string s = bits.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)              {                  double ret = (double)pbits + ((double)((double)tbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbits > 0)              {                  double ret = (double)tbits + ((double)((double)gbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Tb";              }              else if (gbits > 0)              {                  double ret = (double)gbits + ((double)((double)mbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Gb";              }              else if (mbits > 0)              {                  double ret = (double)mbits + ((double)((double)kbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Mb";              }              else if (kbits > 0)              {                  double ret = (double)kbits + ((double)((double)bits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Kb";              }              else              {                  string s = bits.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)              {                  double ret = (double)pbits + ((double)((double)tbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbits > 0)              {                  double ret = (double)tbits + ((double)((double)gbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Tb";              }              else if (gbits > 0)              {                  double ret = (double)gbits + ((double)((double)mbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Gb";              }              else if (mbits > 0)              {                  double ret = (double)mbits + ((double)((double)kbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Mb";              }              else if (kbits > 0)              {                  double ret = (double)kbits + ((double)((double)bits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Kb";              }              else              {                  string s = bits.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)              {                  double ret = (double)pbits + ((double)((double)tbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbits > 0)              {                  double ret = (double)tbits + ((double)((double)gbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Tb";              }              else if (gbits > 0)              {                  double ret = (double)gbits + ((double)((double)mbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Gb";              }              else if (mbits > 0)              {                  double ret = (double)mbits + ((double)((double)kbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Mb";              }              else if (kbits > 0)              {                  double ret = (double)kbits + ((double)((double)bits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Kb";              }              else              {                  string s = bits.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)              {                  double ret = (double)pbits + ((double)((double)tbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbits > 0)              {                  double ret = (double)tbits + ((double)((double)gbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Tb";              }              else if (gbits > 0)              {                  double ret = (double)gbits + ((double)((double)mbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Gb";              }              else if (mbits > 0)              {                  double ret = (double)mbits + ((double)((double)kbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Mb";              }              else if (kbits > 0)              {                  double ret = (double)kbits + ((double)((double)bits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Kb";              }              else              {                  string s = bits.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)              {                  double ret = (double)pbits + ((double)((double)tbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbits > 0)              {                  double ret = (double)tbits + ((double)((double)gbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Tb";              }              else if (gbits > 0)              {                  double ret = (double)gbits + ((double)((double)mbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Gb";              }              else if (mbits > 0)              {                  double ret = (double)mbits + ((double)((double)kbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Mb";              }              else if (kbits > 0)              {                  double ret = (double)kbits + ((double)((double)bits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Kb";              }              else              {                  string s = bits.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)              {                  double ret = (double)pbits + ((double)((double)tbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbits > 0)              {                  double ret = (double)tbits + ((double)((double)gbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Tb";              }              else if (gbits > 0)              {                  double ret = (double)gbits + ((double)((double)mbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Gb";              }              else if (mbits > 0)              {                  double ret = (double)mbits + ((double)((double)kbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Mb";              }              else if (kbits > 0)              {                  double ret = (double)kbits + ((double)((double)bits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Kb";              }              else              {                  string s = bits.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)              {                  double ret = (double)pbits + ((double)((double)tbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbits > 0)              {                  double ret = (double)tbits + ((double)((double)gbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Tb";              }              else if (gbits > 0)              {                  double ret = (double)gbits + ((double)((double)mbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Gb";              }              else if (mbits > 0)              {                  double ret = (double)mbits + ((double)((double)kbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Mb";              }              else if (kbits > 0)              {                  double ret = (double)kbits + ((double)((double)bits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Kb";              }              else              {                  string s = bits.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)              {                  double ret = (double)pbits + ((double)((double)tbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbits > 0)              {                  double ret = (double)tbits + ((double)((double)gbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Tb";              }              else if (gbits > 0)              {                  double ret = (double)gbits + ((double)((double)mbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Gb";              }              else if (mbits > 0)              {                  double ret = (double)mbits + ((double)((double)kbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Mb";              }              else if (kbits > 0)              {                  double ret = (double)kbits + ((double)((double)bits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Kb";              }              else              {                  string s = bits.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)              {                  double ret = (double)pbits + ((double)((double)tbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbits > 0)              {                  double ret = (double)tbits + ((double)((double)gbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Tb";              }              else if (gbits > 0)              {                  double ret = (double)gbits + ((double)((double)mbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Gb";              }              else if (mbits > 0)              {                  double ret = (double)mbits + ((double)((double)kbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Mb";              }              else if (kbits > 0)              {                  double ret = (double)kbits + ((double)((double)bits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Kb";              }              else              {                  string s = bits.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)              {                  double ret = (double)pbits + ((double)((double)tbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbits > 0)              {                  double ret = (double)tbits + ((double)((double)gbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Tb";              }              else if (gbits > 0)              {                  double ret = (double)gbits + ((double)((double)mbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Gb";              }              else if (mbits > 0)              {                  double ret = (double)mbits + ((double)((double)kbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Mb";              }              else if (kbits > 0)              {                  double ret = (double)kbits + ((double)((double)bits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Kb";              }              else              {                  string s = bits.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)              {                  double ret = (double)pbits + ((double)((double)tbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbits > 0)              {                  double ret = (double)tbits + ((double)((double)gbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Tb";              }              else if (gbits > 0)              {                  double ret = (double)gbits + ((double)((double)mbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Gb";              }              else if (mbits > 0)              {                  double ret = (double)mbits + ((double)((double)kbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Mb";              }              else if (kbits > 0)              {                  double ret = (double)kbits + ((double)((double)bits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Kb";              }              else              {                  string s = bits.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)              {                  double ret = (double)pbits + ((double)((double)tbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbits > 0)              {                  double ret = (double)tbits + ((double)((double)gbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Tb";              }              else if (gbits > 0)              {                  double ret = (double)gbits + ((double)((double)mbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Gb";              }              else if (mbits > 0)              {                  double ret = (double)mbits + ((double)((double)kbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Mb";              }              else if (kbits > 0)              {                  double ret = (double)kbits + ((double)((double)bits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Kb";              }              else              {                  string s = bits.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)              {                  double ret = (double)pbits + ((double)((double)tbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbits > 0)              {                  double ret = (double)tbits + ((double)((double)gbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Tb";              }              else if (gbits > 0)              {                  double ret = (double)gbits + ((double)((double)mbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Gb";              }              else if (mbits > 0)              {                  double ret = (double)mbits + ((double)((double)kbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Mb";              }              else if (kbits > 0)              {                  double ret = (double)kbits + ((double)((double)bits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Kb";              }              else              {                  string s = bits.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)              {                  double ret = (double)pbits + ((double)((double)tbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbits > 0)              {                  double ret = (double)tbits + ((double)((double)gbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Tb";              }              else if (gbits > 0)              {                  double ret = (double)gbits + ((double)((double)mbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Gb";              }              else if (mbits > 0)              {                  double ret = (double)mbits + ((double)((double)kbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Mb";              }              else if (kbits > 0)              {                  double ret = (double)kbits + ((double)((double)bits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Kb";              }              else              {                  string s = bits.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)              {                  double ret = (double)pbits + ((double)((double)tbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbits > 0)              {                  double ret = (double)tbits + ((double)((double)gbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Tb";              }              else if (gbits > 0)              {                  double ret = (double)gbits + ((double)((double)mbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Gb";              }              else if (mbits > 0)              {                  double ret = (double)mbits + ((double)((double)kbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Mb";              }              else if (kbits > 0)              {                  double ret = (double)kbits + ((double)((double)bits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Kb";              }              else              {                  string s = bits.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,fireBwall.Utils,BandwidthCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)              {                  double ret = (double)pbits + ((double)((double)tbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbits > 0)              {                  double ret = (double)tbits + ((double)((double)gbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Tb";              }              else if (gbits > 0)              {                  double ret = (double)gbits + ((double)((double)mbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Gb";              }              else if (mbits > 0)              {                  double ret = (double)mbits + ((double)((double)kbits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Mb";              }              else if (kbits > 0)              {                  double ret = (double)kbits + ((double)((double)bits / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Kb";              }              else              {                  string s = bits.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,fireBwall.Utils,MiniCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,AddBits,The following statement contains a magic number: kbits += bits / 1024;
Magic Number,fireBwall.Utils,MiniCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,AddBits,The following statement contains a magic number: bits = bits % 1024;
Magic Number,fireBwall.Utils,MiniCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,AddBits,The following statement contains a magic number: mbits += kbits / 1024;
Magic Number,fireBwall.Utils,MiniCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,AddBits,The following statement contains a magic number: kbits = kbits % 1024;
Magic Number,fireBwall.Utils,MiniCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,AddBits,The following statement contains a magic number: gbits += mbits / 1024;
Magic Number,fireBwall.Utils,MiniCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,AddBits,The following statement contains a magic number: mbits = mbits % 1024;
Magic Number,fireBwall.Utils,MiniCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,AddBits,The following statement contains a magic number: tbits += gbits / 1024;
Magic Number,fireBwall.Utils,MiniCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,AddBits,The following statement contains a magic number: gbits = gbits % 1024;
Magic Number,fireBwall.Utils,MiniCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,AddBits,The following statement contains a magic number: pbits += tbits / 1024;
Magic Number,fireBwall.Utils,MiniCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,AddBits,The following statement contains a magic number: tbits = tbits % 1024;
Magic Number,fireBwall.Utils,MiniCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)                  {                      double ret = (double)pbits + ((double)((double)tbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Pb";                  }                  else if (tbits > 0)                  {                      double ret = (double)tbits + ((double)((double)gbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Tb";                  }                  else if (gbits > 0)                  {                      double ret = (double)gbits + ((double)((double)mbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Gb";                  }                  else if (mbits > 0)                  {                      double ret = (double)mbits + ((double)((double)kbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Mb";                  }                  else if (kbits > 0)                  {                      double ret = (double)kbits + ((double)((double)bits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Kb";                  }                  else                  {                      double ret = bits;                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " b";                  }
Magic Number,fireBwall.Utils,MiniCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)                  {                      double ret = (double)pbits + ((double)((double)tbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Pb";                  }                  else if (tbits > 0)                  {                      double ret = (double)tbits + ((double)((double)gbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Tb";                  }                  else if (gbits > 0)                  {                      double ret = (double)gbits + ((double)((double)mbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Gb";                  }                  else if (mbits > 0)                  {                      double ret = (double)mbits + ((double)((double)kbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Mb";                  }                  else if (kbits > 0)                  {                      double ret = (double)kbits + ((double)((double)bits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Kb";                  }                  else                  {                      double ret = bits;                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " b";                  }
Magic Number,fireBwall.Utils,MiniCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)                  {                      double ret = (double)pbits + ((double)((double)tbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Pb";                  }                  else if (tbits > 0)                  {                      double ret = (double)tbits + ((double)((double)gbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Tb";                  }                  else if (gbits > 0)                  {                      double ret = (double)gbits + ((double)((double)mbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Gb";                  }                  else if (mbits > 0)                  {                      double ret = (double)mbits + ((double)((double)kbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Mb";                  }                  else if (kbits > 0)                  {                      double ret = (double)kbits + ((double)((double)bits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Kb";                  }                  else                  {                      double ret = bits;                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " b";                  }
Magic Number,fireBwall.Utils,MiniCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)                  {                      double ret = (double)pbits + ((double)((double)tbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Pb";                  }                  else if (tbits > 0)                  {                      double ret = (double)tbits + ((double)((double)gbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Tb";                  }                  else if (gbits > 0)                  {                      double ret = (double)gbits + ((double)((double)mbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Gb";                  }                  else if (mbits > 0)                  {                      double ret = (double)mbits + ((double)((double)kbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Mb";                  }                  else if (kbits > 0)                  {                      double ret = (double)kbits + ((double)((double)bits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Kb";                  }                  else                  {                      double ret = bits;                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " b";                  }
Magic Number,fireBwall.Utils,MiniCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)                  {                      double ret = (double)pbits + ((double)((double)tbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Pb";                  }                  else if (tbits > 0)                  {                      double ret = (double)tbits + ((double)((double)gbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Tb";                  }                  else if (gbits > 0)                  {                      double ret = (double)gbits + ((double)((double)mbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Gb";                  }                  else if (mbits > 0)                  {                      double ret = (double)mbits + ((double)((double)kbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Mb";                  }                  else if (kbits > 0)                  {                      double ret = (double)kbits + ((double)((double)bits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Kb";                  }                  else                  {                      double ret = bits;                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " b";                  }
Magic Number,fireBwall.Utils,MiniCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)                  {                      double ret = (double)pbits + ((double)((double)tbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Pb";                  }                  else if (tbits > 0)                  {                      double ret = (double)tbits + ((double)((double)gbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Tb";                  }                  else if (gbits > 0)                  {                      double ret = (double)gbits + ((double)((double)mbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Gb";                  }                  else if (mbits > 0)                  {                      double ret = (double)mbits + ((double)((double)kbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Mb";                  }                  else if (kbits > 0)                  {                      double ret = (double)kbits + ((double)((double)bits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Kb";                  }                  else                  {                      double ret = bits;                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " b";                  }
Magic Number,fireBwall.Utils,MiniCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)                  {                      double ret = (double)pbits + ((double)((double)tbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Pb";                  }                  else if (tbits > 0)                  {                      double ret = (double)tbits + ((double)((double)gbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Tb";                  }                  else if (gbits > 0)                  {                      double ret = (double)gbits + ((double)((double)mbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Gb";                  }                  else if (mbits > 0)                  {                      double ret = (double)mbits + ((double)((double)kbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Mb";                  }                  else if (kbits > 0)                  {                      double ret = (double)kbits + ((double)((double)bits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Kb";                  }                  else                  {                      double ret = bits;                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " b";                  }
Magic Number,fireBwall.Utils,MiniCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)                  {                      double ret = (double)pbits + ((double)((double)tbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Pb";                  }                  else if (tbits > 0)                  {                      double ret = (double)tbits + ((double)((double)gbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Tb";                  }                  else if (gbits > 0)                  {                      double ret = (double)gbits + ((double)((double)mbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Gb";                  }                  else if (mbits > 0)                  {                      double ret = (double)mbits + ((double)((double)kbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Mb";                  }                  else if (kbits > 0)                  {                      double ret = (double)kbits + ((double)((double)bits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Kb";                  }                  else                  {                      double ret = bits;                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " b";                  }
Magic Number,fireBwall.Utils,MiniCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)                  {                      double ret = (double)pbits + ((double)((double)tbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Pb";                  }                  else if (tbits > 0)                  {                      double ret = (double)tbits + ((double)((double)gbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Tb";                  }                  else if (gbits > 0)                  {                      double ret = (double)gbits + ((double)((double)mbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Gb";                  }                  else if (mbits > 0)                  {                      double ret = (double)mbits + ((double)((double)kbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Mb";                  }                  else if (kbits > 0)                  {                      double ret = (double)kbits + ((double)((double)bits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Kb";                  }                  else                  {                      double ret = bits;                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " b";                  }
Magic Number,fireBwall.Utils,MiniCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)                  {                      double ret = (double)pbits + ((double)((double)tbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Pb";                  }                  else if (tbits > 0)                  {                      double ret = (double)tbits + ((double)((double)gbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Tb";                  }                  else if (gbits > 0)                  {                      double ret = (double)gbits + ((double)((double)mbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Gb";                  }                  else if (mbits > 0)                  {                      double ret = (double)mbits + ((double)((double)kbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Mb";                  }                  else if (kbits > 0)                  {                      double ret = (double)kbits + ((double)((double)bits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Kb";                  }                  else                  {                      double ret = bits;                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " b";                  }
Magic Number,fireBwall.Utils,MiniCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)                  {                      double ret = (double)pbits + ((double)((double)tbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Pb";                  }                  else if (tbits > 0)                  {                      double ret = (double)tbits + ((double)((double)gbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Tb";                  }                  else if (gbits > 0)                  {                      double ret = (double)gbits + ((double)((double)mbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Gb";                  }                  else if (mbits > 0)                  {                      double ret = (double)mbits + ((double)((double)kbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Mb";                  }                  else if (kbits > 0)                  {                      double ret = (double)kbits + ((double)((double)bits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Kb";                  }                  else                  {                      double ret = bits;                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " b";                  }
Magic Number,fireBwall.Utils,MiniCounter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbits > 0)                  {                      double ret = (double)pbits + ((double)((double)tbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Pb";                  }                  else if (tbits > 0)                  {                      double ret = (double)tbits + ((double)((double)gbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Tb";                  }                  else if (gbits > 0)                  {                      double ret = (double)gbits + ((double)((double)mbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Gb";                  }                  else if (mbits > 0)                  {                      double ret = (double)mbits + ((double)((double)kbits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Mb";                  }                  else if (kbits > 0)                  {                      double ret = (double)kbits + ((double)((double)bits / 1024f));                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " Kb";                  }                  else                  {                      double ret = bits;                      ret = 1000f * ret / (millis);                      lastRead = DateTime.UtcNow;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " b";                  }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,Parse,The following statement contains a magic number: if (ip.Contains("."))              {                  string[] split = ip.Split('.');                  if (split.Length != 4)                  {                      throw new FormatException();                  }                  byte[] bytes = new byte[4];                  bytes[0] = byte.Parse(split[0]);                  bytes[1] = byte.Parse(split[1]);                  bytes[2] = byte.Parse(split[2]);                  bytes[3] = byte.Parse(split[3]);                  IPAddr ret = new IPAddr(bytes);                  return ret;              }              else if (ip.Contains(":"))              {                  string temp = ip;                  List<byte> bytes = new List<byte>();                  while (!string.IsNullOrWhiteSpace(temp))                  {                      if (temp.StartsWith(":"))                      {                          bytes.Add(0x00);                          bytes.Add(0x00);                      }                      else                      {                          bytes.Add(Convert.ToByte("" + temp[0] + temp[1]' 16));                          bytes.Add(Convert.ToByte("" + temp[0] + temp[1]' 16));                          temp = temp.Substring(4);                      }                      if(temp.Length != 0)                          temp = temp.Substring(1);                  }                  if (bytes.Count != 16)                      throw new FormatException();                  IPAddr ret = new IPAddr(bytes.ToArray());                  return ret;              }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,Parse,The following statement contains a magic number: if (ip.Contains("."))              {                  string[] split = ip.Split('.');                  if (split.Length != 4)                  {                      throw new FormatException();                  }                  byte[] bytes = new byte[4];                  bytes[0] = byte.Parse(split[0]);                  bytes[1] = byte.Parse(split[1]);                  bytes[2] = byte.Parse(split[2]);                  bytes[3] = byte.Parse(split[3]);                  IPAddr ret = new IPAddr(bytes);                  return ret;              }              else if (ip.Contains(":"))              {                  string temp = ip;                  List<byte> bytes = new List<byte>();                  while (!string.IsNullOrWhiteSpace(temp))                  {                      if (temp.StartsWith(":"))                      {                          bytes.Add(0x00);                          bytes.Add(0x00);                      }                      else                      {                          bytes.Add(Convert.ToByte("" + temp[0] + temp[1]' 16));                          bytes.Add(Convert.ToByte("" + temp[0] + temp[1]' 16));                          temp = temp.Substring(4);                      }                      if(temp.Length != 0)                          temp = temp.Substring(1);                  }                  if (bytes.Count != 16)                      throw new FormatException();                  IPAddr ret = new IPAddr(bytes.ToArray());                  return ret;              }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,Parse,The following statement contains a magic number: if (ip.Contains("."))              {                  string[] split = ip.Split('.');                  if (split.Length != 4)                  {                      throw new FormatException();                  }                  byte[] bytes = new byte[4];                  bytes[0] = byte.Parse(split[0]);                  bytes[1] = byte.Parse(split[1]);                  bytes[2] = byte.Parse(split[2]);                  bytes[3] = byte.Parse(split[3]);                  IPAddr ret = new IPAddr(bytes);                  return ret;              }              else if (ip.Contains(":"))              {                  string temp = ip;                  List<byte> bytes = new List<byte>();                  while (!string.IsNullOrWhiteSpace(temp))                  {                      if (temp.StartsWith(":"))                      {                          bytes.Add(0x00);                          bytes.Add(0x00);                      }                      else                      {                          bytes.Add(Convert.ToByte("" + temp[0] + temp[1]' 16));                          bytes.Add(Convert.ToByte("" + temp[0] + temp[1]' 16));                          temp = temp.Substring(4);                      }                      if(temp.Length != 0)                          temp = temp.Substring(1);                  }                  if (bytes.Count != 16)                      throw new FormatException();                  IPAddr ret = new IPAddr(bytes.ToArray());                  return ret;              }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,Parse,The following statement contains a magic number: if (ip.Contains("."))              {                  string[] split = ip.Split('.');                  if (split.Length != 4)                  {                      throw new FormatException();                  }                  byte[] bytes = new byte[4];                  bytes[0] = byte.Parse(split[0]);                  bytes[1] = byte.Parse(split[1]);                  bytes[2] = byte.Parse(split[2]);                  bytes[3] = byte.Parse(split[3]);                  IPAddr ret = new IPAddr(bytes);                  return ret;              }              else if (ip.Contains(":"))              {                  string temp = ip;                  List<byte> bytes = new List<byte>();                  while (!string.IsNullOrWhiteSpace(temp))                  {                      if (temp.StartsWith(":"))                      {                          bytes.Add(0x00);                          bytes.Add(0x00);                      }                      else                      {                          bytes.Add(Convert.ToByte("" + temp[0] + temp[1]' 16));                          bytes.Add(Convert.ToByte("" + temp[0] + temp[1]' 16));                          temp = temp.Substring(4);                      }                      if(temp.Length != 0)                          temp = temp.Substring(1);                  }                  if (bytes.Count != 16)                      throw new FormatException();                  IPAddr ret = new IPAddr(bytes.ToArray());                  return ret;              }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,Parse,The following statement contains a magic number: if (ip.Contains("."))              {                  string[] split = ip.Split('.');                  if (split.Length != 4)                  {                      throw new FormatException();                  }                  byte[] bytes = new byte[4];                  bytes[0] = byte.Parse(split[0]);                  bytes[1] = byte.Parse(split[1]);                  bytes[2] = byte.Parse(split[2]);                  bytes[3] = byte.Parse(split[3]);                  IPAddr ret = new IPAddr(bytes);                  return ret;              }              else if (ip.Contains(":"))              {                  string temp = ip;                  List<byte> bytes = new List<byte>();                  while (!string.IsNullOrWhiteSpace(temp))                  {                      if (temp.StartsWith(":"))                      {                          bytes.Add(0x00);                          bytes.Add(0x00);                      }                      else                      {                          bytes.Add(Convert.ToByte("" + temp[0] + temp[1]' 16));                          bytes.Add(Convert.ToByte("" + temp[0] + temp[1]' 16));                          temp = temp.Substring(4);                      }                      if(temp.Length != 0)                          temp = temp.Substring(1);                  }                  if (bytes.Count != 16)                      throw new FormatException();                  IPAddr ret = new IPAddr(bytes.ToArray());                  return ret;              }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,Parse,The following statement contains a magic number: if (ip.Contains("."))              {                  string[] split = ip.Split('.');                  if (split.Length != 4)                  {                      throw new FormatException();                  }                  byte[] bytes = new byte[4];                  bytes[0] = byte.Parse(split[0]);                  bytes[1] = byte.Parse(split[1]);                  bytes[2] = byte.Parse(split[2]);                  bytes[3] = byte.Parse(split[3]);                  IPAddr ret = new IPAddr(bytes);                  return ret;              }              else if (ip.Contains(":"))              {                  string temp = ip;                  List<byte> bytes = new List<byte>();                  while (!string.IsNullOrWhiteSpace(temp))                  {                      if (temp.StartsWith(":"))                      {                          bytes.Add(0x00);                          bytes.Add(0x00);                      }                      else                      {                          bytes.Add(Convert.ToByte("" + temp[0] + temp[1]' 16));                          bytes.Add(Convert.ToByte("" + temp[0] + temp[1]' 16));                          temp = temp.Substring(4);                      }                      if(temp.Length != 0)                          temp = temp.Substring(1);                  }                  if (bytes.Count != 16)                      throw new FormatException();                  IPAddr ret = new IPAddr(bytes.ToArray());                  return ret;              }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,Parse,The following statement contains a magic number: if (ip.Contains("."))              {                  string[] split = ip.Split('.');                  if (split.Length != 4)                  {                      throw new FormatException();                  }                  byte[] bytes = new byte[4];                  bytes[0] = byte.Parse(split[0]);                  bytes[1] = byte.Parse(split[1]);                  bytes[2] = byte.Parse(split[2]);                  bytes[3] = byte.Parse(split[3]);                  IPAddr ret = new IPAddr(bytes);                  return ret;              }              else if (ip.Contains(":"))              {                  string temp = ip;                  List<byte> bytes = new List<byte>();                  while (!string.IsNullOrWhiteSpace(temp))                  {                      if (temp.StartsWith(":"))                      {                          bytes.Add(0x00);                          bytes.Add(0x00);                      }                      else                      {                          bytes.Add(Convert.ToByte("" + temp[0] + temp[1]' 16));                          bytes.Add(Convert.ToByte("" + temp[0] + temp[1]' 16));                          temp = temp.Substring(4);                      }                      if(temp.Length != 0)                          temp = temp.Substring(1);                  }                  if (bytes.Count != 16)                      throw new FormatException();                  IPAddr ret = new IPAddr(bytes.ToArray());                  return ret;              }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,Parse,The following statement contains a magic number: if (ip.Contains("."))              {                  string[] split = ip.Split('.');                  if (split.Length != 4)                  {                      throw new FormatException();                  }                  byte[] bytes = new byte[4];                  bytes[0] = byte.Parse(split[0]);                  bytes[1] = byte.Parse(split[1]);                  bytes[2] = byte.Parse(split[2]);                  bytes[3] = byte.Parse(split[3]);                  IPAddr ret = new IPAddr(bytes);                  return ret;              }              else if (ip.Contains(":"))              {                  string temp = ip;                  List<byte> bytes = new List<byte>();                  while (!string.IsNullOrWhiteSpace(temp))                  {                      if (temp.StartsWith(":"))                      {                          bytes.Add(0x00);                          bytes.Add(0x00);                      }                      else                      {                          bytes.Add(Convert.ToByte("" + temp[0] + temp[1]' 16));                          bytes.Add(Convert.ToByte("" + temp[0] + temp[1]' 16));                          temp = temp.Substring(4);                      }                      if(temp.Length != 0)                          temp = temp.Substring(1);                  }                  if (bytes.Count != 16)                      throw new FormatException();                  IPAddr ret = new IPAddr(bytes.ToArray());                  return ret;              }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,Parse,The following statement contains a magic number: if (ip.Contains("."))              {                  string[] split = ip.Split('.');                  if (split.Length != 4)                  {                      throw new FormatException();                  }                  byte[] bytes = new byte[4];                  bytes[0] = byte.Parse(split[0]);                  bytes[1] = byte.Parse(split[1]);                  bytes[2] = byte.Parse(split[2]);                  bytes[3] = byte.Parse(split[3]);                  IPAddr ret = new IPAddr(bytes);                  return ret;              }              else if (ip.Contains(":"))              {                  string temp = ip;                  List<byte> bytes = new List<byte>();                  while (!string.IsNullOrWhiteSpace(temp))                  {                      if (temp.StartsWith(":"))                      {                          bytes.Add(0x00);                          bytes.Add(0x00);                      }                      else                      {                          bytes.Add(Convert.ToByte("" + temp[0] + temp[1]' 16));                          bytes.Add(Convert.ToByte("" + temp[0] + temp[1]' 16));                          temp = temp.Substring(4);                      }                      if(temp.Length != 0)                          temp = temp.Substring(1);                  }                  if (bytes.Count != 16)                      throw new FormatException();                  IPAddr ret = new IPAddr(bytes.ToArray());                  return ret;              }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,Parse,The following statement contains a magic number: if (ip.Contains("."))              {                  string[] split = ip.Split('.');                  if (split.Length != 4)                  {                      throw new FormatException();                  }                  byte[] bytes = new byte[4];                  bytes[0] = byte.Parse(split[0]);                  bytes[1] = byte.Parse(split[1]);                  bytes[2] = byte.Parse(split[2]);                  bytes[3] = byte.Parse(split[3]);                  IPAddr ret = new IPAddr(bytes);                  return ret;              }              else if (ip.Contains(":"))              {                  string temp = ip;                  List<byte> bytes = new List<byte>();                  while (!string.IsNullOrWhiteSpace(temp))                  {                      if (temp.StartsWith(":"))                      {                          bytes.Add(0x00);                          bytes.Add(0x00);                      }                      else                      {                          bytes.Add(Convert.ToByte("" + temp[0] + temp[1]' 16));                          bytes.Add(Convert.ToByte("" + temp[0] + temp[1]' 16));                          temp = temp.Substring(4);                      }                      if(temp.Length != 0)                          temp = temp.Substring(1);                  }                  if (bytes.Count != 16)                      throw new FormatException();                  IPAddr ret = new IPAddr(bytes.ToArray());                  return ret;              }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,GetHashCode,The following statement contains a magic number: for (int x = 0; x < AddressBytes.Length; x++)              {                  hash += (AddressBytes[x] << (8 * (3 - (x % 4))));              }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,GetHashCode,The following statement contains a magic number: for (int x = 0; x < AddressBytes.Length; x++)              {                  hash += (AddressBytes[x] << (8 * (3 - (x % 4))));              }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,GetHashCode,The following statement contains a magic number: for (int x = 0; x < AddressBytes.Length; x++)              {                  hash += (AddressBytes[x] << (8 * (3 - (x % 4))));              }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,ToString,The following statement contains a magic number: if (AddressBytes.Length == 4)              {                  return AddressBytes[0] + "." + AddressBytes[1] + "." + AddressBytes[2] + "." + AddressBytes[3];              }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,ToString,The following statement contains a magic number: if (AddressBytes.Length == 4)              {                  return AddressBytes[0] + "." + AddressBytes[1] + "." + AddressBytes[2] + "." + AddressBytes[3];              }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,ToString,The following statement contains a magic number: if (AddressBytes.Length == 4)              {                  return AddressBytes[0] + "." + AddressBytes[1] + "." + AddressBytes[2] + "." + AddressBytes[3];              }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,ToString,The following statement contains a magic number: for (int x = 0; x < 16; x += 2)              {                  if (!(AddressBytes[x] == 0x00 && AddressBytes[x + 1] == 0x00))                  {                      if (Convert.ToString(AddressBytes[x]' 16).Length == 1)                          ret += "0";                      ret += Convert.ToString(AddressBytes[x]' 16);                      if (Convert.ToString(AddressBytes[x + 1]' 16).Length == 1)                          ret += "0";                      ret += Convert.ToString(AddressBytes[x + 1]' 16);                  }                  if (x != 14)                  {                      ret += ":";                  }              }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,ToString,The following statement contains a magic number: for (int x = 0; x < 16; x += 2)              {                  if (!(AddressBytes[x] == 0x00 && AddressBytes[x + 1] == 0x00))                  {                      if (Convert.ToString(AddressBytes[x]' 16).Length == 1)                          ret += "0";                      ret += Convert.ToString(AddressBytes[x]' 16);                      if (Convert.ToString(AddressBytes[x + 1]' 16).Length == 1)                          ret += "0";                      ret += Convert.ToString(AddressBytes[x + 1]' 16);                  }                  if (x != 14)                  {                      ret += ":";                  }              }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,ToString,The following statement contains a magic number: for (int x = 0; x < 16; x += 2)              {                  if (!(AddressBytes[x] == 0x00 && AddressBytes[x + 1] == 0x00))                  {                      if (Convert.ToString(AddressBytes[x]' 16).Length == 1)                          ret += "0";                      ret += Convert.ToString(AddressBytes[x]' 16);                      if (Convert.ToString(AddressBytes[x + 1]' 16).Length == 1)                          ret += "0";                      ret += Convert.ToString(AddressBytes[x + 1]' 16);                  }                  if (x != 14)                  {                      ret += ":";                  }              }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,ToString,The following statement contains a magic number: for (int x = 0; x < 16; x += 2)              {                  if (!(AddressBytes[x] == 0x00 && AddressBytes[x + 1] == 0x00))                  {                      if (Convert.ToString(AddressBytes[x]' 16).Length == 1)                          ret += "0";                      ret += Convert.ToString(AddressBytes[x]' 16);                      if (Convert.ToString(AddressBytes[x + 1]' 16).Length == 1)                          ret += "0";                      ret += Convert.ToString(AddressBytes[x + 1]' 16);                  }                  if (x != 14)                  {                      ret += ":";                  }              }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,ToString,The following statement contains a magic number: for (int x = 0; x < 16; x += 2)              {                  if (!(AddressBytes[x] == 0x00 && AddressBytes[x + 1] == 0x00))                  {                      if (Convert.ToString(AddressBytes[x]' 16).Length == 1)                          ret += "0";                      ret += Convert.ToString(AddressBytes[x]' 16);                      if (Convert.ToString(AddressBytes[x + 1]' 16).Length == 1)                          ret += "0";                      ret += Convert.ToString(AddressBytes[x + 1]' 16);                  }                  if (x != 14)                  {                      ret += ":";                  }              }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,ToString,The following statement contains a magic number: for (int x = 0; x < 16; x += 2)              {                  if (!(AddressBytes[x] == 0x00 && AddressBytes[x + 1] == 0x00))                  {                      if (Convert.ToString(AddressBytes[x]' 16).Length == 1)                          ret += "0";                      ret += Convert.ToString(AddressBytes[x]' 16);                      if (Convert.ToString(AddressBytes[x + 1]' 16).Length == 1)                          ret += "0";                      ret += Convert.ToString(AddressBytes[x + 1]' 16);                  }                  if (x != 14)                  {                      ret += ":";                  }              }
Magic Number,fireBwall.Utils,IPAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPAddr.cs,ToString,The following statement contains a magic number: for (int x = 0; x < 16; x += 2)              {                  if (!(AddressBytes[x] == 0x00 && AddressBytes[x + 1] == 0x00))                  {                      if (Convert.ToString(AddressBytes[x]' 16).Length == 1)                          ret += "0";                      ret += Convert.ToString(AddressBytes[x]' 16);                      if (Convert.ToString(AddressBytes[x + 1]' 16).Length == 1)                          ret += "0";                      ret += Convert.ToString(AddressBytes[x + 1]' 16);                  }                  if (x != 14)                  {                      ret += ":";                  }              }
Magic Number,fireBwall.Utils,IPObj,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPObj.cs,time,The following statement contains a magic number: if (last_packet != long.MinValue)              {                  long span = (t.Ticks) - last_packet;                  average_time = (average_time + span) / 2;              }
Magic Number,fireBwall.Utils,IPObj,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\IPObj.cs,getAverage,The following statement contains a magic number: return average_time / 10000000;
Magic Number,fireBwall.Utils,MACAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\MACAddr.cs,MACAddr,The following statement contains a magic number: AddressBytes = new byte[6] { 0x00' 0x00' 0x00' 0x00' 0x00' 0x00 };
Magic Number,fireBwall.Utils,MACAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\MACAddr.cs,GetHashCode,The following statement contains a magic number: for (int x = 0; x < AddressBytes.Length; x++)              {                  hash += (AddressBytes[x] << (8 * (3 - (x % 4))));              }
Magic Number,fireBwall.Utils,MACAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\MACAddr.cs,GetHashCode,The following statement contains a magic number: for (int x = 0; x < AddressBytes.Length; x++)              {                  hash += (AddressBytes[x] << (8 * (3 - (x % 4))));              }
Magic Number,fireBwall.Utils,MACAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\MACAddr.cs,GetHashCode,The following statement contains a magic number: for (int x = 0; x < AddressBytes.Length; x++)              {                  hash += (AddressBytes[x] << (8 * (3 - (x % 4))));              }
Magic Number,fireBwall.Utils,MACAddr,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\MACAddr.cs,Parse,The following statement contains a magic number: if (ip.Length != 12)                  throw new FormatException();
Magic Number,fireBwall.Utils,PcapFileWriter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\PcapFileWriter.cs,PcapFileWriter,The following statement contains a magic number: file.Write((ushort)2);
Magic Number,fireBwall.Utils,PcapFileWriter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\PcapFileWriter.cs,PcapFileWriter,The following statement contains a magic number: file.Write((ushort)4);
Magic Number,fireBwall.Utils,PcapFileWriter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\PcapFileWriter.cs,PcapFileWriter,The following statement contains a magic number: file.Write((uint)65535);
Magic Number,fireBwall.Utils,PcapFileWriter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\PcapFileWriter.cs,PcapFileWriter,The following statement contains a magic number: referenceTime = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,fireBwall.Utils,PcapFileWriter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\PcapFileWriter.cs,WriteLoop,The following statement contains a magic number: while (true)              {                  buffer = swapQueue.DumpBuffer();                  foreach (KeyValuePair<DateTime' byte[]> pkt in buffer)                  {                      file.Write((uint)(pkt.Key - referenceTime).TotalSeconds);                      file.Write((uint)(pkt.Key.Millisecond));                      file.Write((uint)pkt.Value.Length);                      file.Write((uint)pkt.Value.Length);                      file.Write(pkt.Value);                  }                  Thread.Sleep(100);              }
Magic Number,fireBwall.Utils,Utility,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\Utility.cs,StringToByteArray,The following statement contains a magic number: byte[] bytes = new byte[NumberChars / 2];
Magic Number,fireBwall.Utils,Utility,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\Utility.cs,StringToByteArray,The following statement contains a magic number: for (int i = 0; i < NumberChars; i += 2)                  bytes[i / 2] = Convert.ToByte(hex.Substring(i' 2)' 16);
Magic Number,fireBwall.Utils,Utility,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\Utility.cs,StringToByteArray,The following statement contains a magic number: for (int i = 0; i < NumberChars; i += 2)                  bytes[i / 2] = Convert.ToByte(hex.Substring(i' 2)' 16);
Magic Number,fireBwall.Utils,Utility,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\Utility.cs,StringToByteArray,The following statement contains a magic number: for (int i = 0; i < NumberChars; i += 2)                  bytes[i / 2] = Convert.ToByte(hex.Substring(i' 2)' 16);
Magic Number,fireBwall.Utils,Utility,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Utils\Utility.cs,StringToByteArray,The following statement contains a magic number: for (int i = 0; i < NumberChars; i += 2)                  bytes[i / 2] = Convert.ToByte(hex.Substring(i' 2)' 16);
Duplicate Code,fireBwall.Filters.NDIS,WinpkFilter,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Filters\NDIS\WinpkFilter.cs,ProcessLoop,The method contains a code clone-set at the following line numbers (starting from the method definition): ((36' 80)' (86' 130))
Missing Default,fireBwall.Configuration,MultilingualStringManager,C:\repos\bwall_fireBwall\fireBwall\fireBwall.Modules\Configuration\MultilingualStringManager.cs,SetString,The following switch statement is missing a default case: switch (language)              {                  case Language.CHINESE:                      SetString("zh"' name' value);                      break;                  case Language.ENGLISH:                      SetString("en"' name' value);                      break;                  case Language.GERMAN:                      SetString("de"' name' value);                      break;                  case Language.PORTUGUESE:                      SetString("pt"' name' value);                      break;                  case Language.RUSSIAN:                      SetString("ru"' name' value);                      break;                  case Language.SPANISH:                      SetString("es"' name' value);                      break;                  case Language.JAPANESE:                      SetString("ja"' name' value);                      break;                   case Language.ITALIAN:                      SetString("it"' name' value);                      break;                  case Language.FRENCH:                      SetString("fr"' name' value);                      break;                  case Language.HEBREW:                      SetString("he"' name' value);                      break;                  case Language.DUTCH:                      SetString("nl"' name' value);                      break;              }
