Implementation smell,Namespace,Class,File,Method,Description
Long Method,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The method has 145 lines of code.
Long Method,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,interiorMain,The method has 126 lines of code.
Complex Method,DDoS,DDoSData,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,ReadXml,Cyclomatic complexity of the method is 8
Complex Method,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,interiorMain,Cyclomatic complexity of the method is 17
Long Statement,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The length of the statement  "            this.removeButton.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 145.
Long Statement,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 153.
Long Statement,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 50F)); " is 122.
Long Statement,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 83.41346F)); " is 122.
Long Statement,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 16.58654F)); " is 122.
Long Statement,DDoS,DDoSData,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,ReadXml,The length of the statement  "                BlockCache = (SerializableDictionary<IPAddr' BlockedIP>)new XmlSerializer(typeof(SerializableDictionary<IPAddr' BlockedIP>)).Deserialize(reader); " is 145.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            m.Help = "A DDoS' or a distributed denial of service' is an attack on a network in an attempt to exhaust all possible resources.  The idea " " is 140.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "                + " is not to 'hack' passwords or steal data (although it can be used as a staging attack)' but rather to cause a service to become unavailable.  The theft " " is 157.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "                + " of availability.  This module' at its current inception' assists in the mitigation of three different types of attacks.\n\n" " is 128.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "                + "DoS/TCP FLOOD\n\tThis general attack is characterized by an overwhelming amount of incoming TCP packets destined for arbitrary ports' or' if it" " is 147.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "                + " is a web server' port 80.  The idea behind mitigation is to keep a count of IP's' packet counts' and packet timestamps to trace a possible source of a " " is 156.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "                + "DDoS.  As the name would suggest' a DDoS will not be limited to a single IP' but rather be distributed over hundreds of thousands of systems.  This module " " is 159.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "                + "attempts to take these concepts into account and premptively cease a DDoS attack.  When a DDoS is detected' packets from violating IPs are added to a block list." " is 165.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "                + "  Eventually' this module will be intelligent enough to take more decisive action when floods are detected.  To test the module' disable the basic firewall module " " is 167.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "                + "(or temporarily allow packets through TCP port 3211)' and use the following command: hping3 --flood -p 3211 -S <ip of PC with firebwall> This will spam the given " " is 166.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "                + "FRAGGLE ATTACK\nA fraggle attack is a UDP flood of echo traffic to IP broadcast addresses.  When it hits the broadcast address' its spammed throughout the entire" " is 165.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "                + " block of IPs' then those IPs all reply to the spoof source address.  These packets usually have empty packet headers and are destined for a select few ports' " " is 163.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "                + "SMURF ATTACK\nMuch like the fraggle attack' this flood takes advantage broadcast addresses' though instead of UDP traffic it's ICMP.  An attacker A sends " " is 158.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "                + " a slew of echo requests towards a router broadcat address' spoofed with the source address of the victim.  The router then sends all the ICMP echo requests to " " is 164.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "                + " every IP it has.  These systems then send back an echo reply towards the spoofed address' the victim.  Modern systems have these capabilites disabled' but there" " is 165.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "                + "\n\nThe DoS Threshold setting allows you to control what too many packets per second actually means.  The default value is 10ms (meaning' " " is 142.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "                + " if more than X packets fly in with less than 10ms between them' block the IP).  If you're unsure' or you're getting too many false positives' " " is 147.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "DoS Log"' "DoS attempt detected from IP {0} (likely spoofed).  Packets from this IP will be dropped.  You can unblock this IP from the module interface."); " is 184.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "Fraggle Log"' "Potential fraggle attack from IP {0} (likely spoofed). Packets from this IP will be dropped.  You can unblock this IP from the module interface."); " is 191.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "Smurf Log"' "Potential Smurf attack from IP {0} (likely spoofed). Packets from this IP will be dropped.  You can unblock this IP from the module interface."); " is 187.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "DoS Log"' "Dos poging gedetecteerd vanaf IP {0} (waarschijnlijk vals zijn).  Pakketten van dit IP-adres zullen worden gedropt. U kunt deblokkeren dit IP-adres van de module interface."); " is 215.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "Fraggle Log"' "Potentiële Fraggle aanval van IP {0} (waarschijnlijk vals zijn).  Pakketten van dit IP-adres zullen worden gedropt. U kunt deblokkeren dit IP-adres van de module interface."); " is 219.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "Smurf Log"' "Potentiële smurf aanval van IP {0} (waarschijnlijk vals zijn).  Pakketten van dit IP-adres zullen worden gedropt. U kunt deblokkeren dit IP-adres van de module interface."); " is 215.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "DoS Log"' "DoS tentative détecté d'IP {0} (probablement le nom usurpé).  Les paquets de cette IP seront supprimées.  Vous pouvez débloquer cette IP de l'interface du module."); " is 205.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "Fraggle Log"' "Attaque de fraggle potentielle de IP {0} (probablement le nom usurpé).  Les paquets de cette IP seront supprimées.  Vous pouvez débloquer cette IP de l'interface du module."); " is 219.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "Smurf Log"' "Attaque smurf potentielle de IP {0} (probablement le nom usurpé).  Les paquets de cette IP seront supprimées.  Vous pouvez débloquer cette IP de l'interface du module."); " is 212.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "DoS Log"' "DoS Versuch erkannt von IP {0} (wahrscheinlich gefälscht).  Pakete von dieser IP-Adresse werden verworfen werden.  Sie können diese IP-Adresse von der Schnittstelle des Funktionsbausteins freizugeben."); " is 243.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "Fraggle Log"' "Potenzielle Fraggle-Angriff von IP {0} (wahrscheinlich gefälscht).  Pakete von dieser IP-Adresse werden verworfen werden.  Sie können diese IP-Adresse von der Schnittstelle des Funktionsbausteins freizugeben."); " is 255.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "Smurf Log"' "Potenzielle Smurf-Angriff von IP {0} (wahrscheinlich gefälscht).  Pakete von dieser IP-Adresse werden verworfen werden.  Sie können diese IP-Adresse von der Schnittstelle des Funktionsbausteins freizugeben."); " is 251.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "DoS Log"' "DoS tentativo rilevato da IP {0} (probabilmente spoofing).  I pacchetti da questo IP saranno essere ignorati.  È possibile sbloccare questo IP dell'interfaccia del modulo."); " is 214.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "Fraggle Log"' "Fraggle potenziale attacco da IP {0} (probabilmente spoofing).  I pacchetti da questo IP saranno essere ignorati.  È possibile sbloccare questo IP dell'interfaccia del modulo."); " is 222.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "Smurf Log"' "Puffo potenziale attacco da IP {0} (probabilmente spoofing).  I pacchetti da questo IP saranno essere ignorati.  È possibile sbloccare questo IP dell'interfaccia del modulo."); " is 218.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "DoS Log"' "DoS から ip アドレスを検出しようとすると {0} (スプーフィングの可能性が高い).  この ip アドレスからのパケットが破棄されます。このモジュール インターフェイスから ip アドレスのブロックを解除することができます。"); " is 160.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "Fraggle Log"' "潜在的な fraggle 攻撃から IP {0} (偽装されている可能性があります)。 この ip アドレスからのパケットが破棄されます。このモジュール インターフェイスから ip アドレスのブロックを解除することができます。"); " is 160.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "Smurf Log"' "潜在的なスマーフ攻撃から IP {0} (偽装されている可能性があります)。この ip アドレスからのパケットが破棄されます。このモジュール インターフェイスから ip アドレスのブロックを解除することができます。"); " is 152.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "DoS Log"' "DoS tentativa detectada do IP {0} (provavelmente falsificado).  Pacotes este IP serão descartados.  Você pode desbloquear esse IP da interface do módulo."); " is 196.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "Fraggle Log"' "Ataque fraggle potencial de IP {0} (provavelmente falsificado).  Pacotes este IP serão descartados.  Você pode desbloquear esse IP da interface do módulo."); " is 201.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "Smurf Log"' "Ataque smurf potencial de IP {0} (provavelmente falsificado).  Pacotes este IP serão descartados.  Você pode desbloquear esse IP da interface do módulo."); " is 197.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "DoS Log"' "DoS попытка от IP {0} (скорее всего подмененным).  Пакеты с этого IP-адреса будут удалены.  Можно разблокировать этот IP от интерфейса модуля."); " is 185.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "Fraggle Log"' "Потенциальные fraggle атака с IP {0} (вероятно ложным).  Пакеты с этого IP-адреса будут удалены.  Можно разблокировать этот IP от интерфейса модуля."); " is 195.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "Smurf Log"' "Потенциальные атаки smurf от IP {0} (вероятно ложным).  Пакеты с этого IP-адреса будут удалены.  Можно разблокировать этот IP от интерфейса модуля."); " is 192.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "DoS Log"' "DoS intento detectado desde IP {0} (probablemente falsa).  Se quitarán los paquetes desde esta dirección IP.  Puede desbloquear esta IP de la interfaz del módulo."); " is 205.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "Fraggle Log"' "Ataque potencial fraggle de IP {0} (probablemente falseada).  Se quitarán los paquetes desde esta dirección IP.  Puede desbloquear esta IP de la interfaz del módulo."); " is 212.
Long Statement,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,Help,The length of the statement  "            multistring.SetString(lang' "Smurf Log"' "Potencial ataque smurf desde IP {0} (probablemente falseada).  Se quitarán los paquetes desde esta dirección IP.  Puede desbloquear esta IP de la interfaz del módulo."); " is 211.
Complex Conditional,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,interiorMain,The conditional expression  "packet.isEmpty() && packet.DestPort.Equals(7) || packet.DestPort.Equals(13) ||                           packet.DestPort.Equals(19) || packet.DestPort.Equals(17) &&                           (ipcache[packet.SourceIP]) > 50"  is complex.
Complex Conditional,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,interiorMain,The conditional expression  "packet.Type.ToString().Equals("0") &&                           packet.Code.ToString().Equals("0") &&                           isLocalIP(packet.SourceIP) &&                           (packet.PacketTime.Millisecond - ICMPprevious_packet.PacketTime.Millisecond) <= data.dos_threshold &&                           ipcache[packet.SourceIP] > 50"  is complex.
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,DDoSDisplay_Load,The following statement contains a magic number: dosBlockTable.Columns[2].HeaderText = "Date Blocked";
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.dosBlockTable.Location = new System.Drawing.Point(3' 3);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.dosBlockTable.Location = new System.Drawing.Point(3' 3);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.dosBlockTable.Size = new System.Drawing.Size(611' 340);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.dosBlockTable.Size = new System.Drawing.Size(611' 340);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.removeButton.Location = new System.Drawing.Point(533' 3);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.removeButton.Location = new System.Drawing.Point(533' 3);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.removeButton.Size = new System.Drawing.Size(75' 23);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.removeButton.Size = new System.Drawing.Size(75' 23);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.addButton.Location = new System.Drawing.Point(126' 3);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.addButton.Location = new System.Drawing.Point(126' 3);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.addButton.Size = new System.Drawing.Size(75' 23);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.addButton.Size = new System.Drawing.Size(75' 23);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.addButton.TabIndex = 2;
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.addField.Location = new System.Drawing.Point(3' 3);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.addField.Location = new System.Drawing.Point(3' 3);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.addField.Size = new System.Drawing.Size(117' 20);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.addField.Size = new System.Drawing.Size(117' 20);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.addField.TabIndex = 4;
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Location = new System.Drawing.Point(3' 0);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowCount = 2;
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(617' 416);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(617' 416);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.TabIndex = 5;
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(3' 349);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(3' 349);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(611' 64);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(611' 64);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.thresholdBox.Location = new System.Drawing.Point(115' 34);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.thresholdBox.Location = new System.Drawing.Point(115' 34);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.thresholdBox.Size = new System.Drawing.Size(38' 20);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.thresholdBox.Size = new System.Drawing.Size(38' 20);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.thresholdBox.TabIndex = 6;
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 37);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 37);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(106' 13);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(106' 13);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 5;
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(623' 420);
Magic Number,DDoS,DDoSDisplay,C:\repos\bwall_fireBwall\fireBwall\DDoS\DDoSDisplay.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(623' 420);
Magic Number,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,interiorMain,The following statement contains a magic number: if ((ipcache.Count) > 500)                  ipcache.Clear();
Magic Number,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,interiorMain,The following statement contains a magic number: if (in_packet.GetHighestLayer() == Protocol.TCP)              {                  TCPPacket packet = ((TCPPacket)in_packet);                  packet.PacketTime = DateTime.UtcNow;                    // if it's inbound and the SYN flag is set                  if (!packet.Outbound && packet.SYN && !packet.ACK)                  {                      // first packet init                      if (TCPprevious_packet == null)                          TCPprevious_packet = packet;                        // if the IP hasn't been logged yet                       if (!(ipcache.ContainsKey(packet.SourceIP)))                          ipcache.Add(packet.SourceIP' 1);                      // if the ipcache contains the ip                      else if (ipcache.ContainsKey(packet.SourceIP))                      {                          // increment the packet count if they're coming in fast                          if ((packet.PacketTime - TCPprevious_packet.PacketTime).TotalMilliseconds <= data.dos_threshold)                              ipcache[packet.SourceIP] = (ipcache[packet.SourceIP]) + 1;                          else ipcache[packet.SourceIP] = 1;                            // check if this packet = previous' if the packet count is > 50'                           // and if the time between sent packets is less than the threshhold                          if (packet.SourceIP.Equals(TCPprevious_packet.SourceIP) &&                              ((ipcache[packet.SourceIP]) > 50) &&                              (packet.PacketTime - TCPprevious_packet.PacketTime).TotalMilliseconds <= data.dos_threshold)                          {                              pmr = PacketMainReturnType.Drop | PacketMainReturnType.Log | PacketMainReturnType.Popup;                              le = new LogEvent(String.Format(multistring.GetString("DoS Log")' packet.SourceIP.ToString())' this);                              le.PMR = PacketMainReturnType.Drop | PacketMainReturnType.Log | PacketMainReturnType.Popup;                              LogCenter.Instance.LogEvent(le);                              data.BlockCache.Add(packet.SourceIP' new BlockedIP(packet.SourceIP' DateTime.UtcNow' "DoS Attempt"));                              return pmr;                          }                      }                      TCPprevious_packet = packet;                  }              }
Magic Number,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,interiorMain,The following statement contains a magic number: if (in_packet.GetHighestLayer() == Protocol.UDP)              {                  UDPPacket packet = ((UDPPacket)in_packet);                  packet.PacketTime = DateTime.UtcNow;                    // if it's inbound                  if (!(packet.Outbound))                  {                      // add IP to cache or increment packet count                      if (!(ipcache.ContainsKey(packet.SourceIP)))                          ipcache.Add(packet.SourceIP' 1);                      else                          ipcache[packet.SourceIP] = (ipcache[packet.SourceIP]) + 1;                        // if the packet header is empty' headed towards port (7'13'19'17)' and count > 50'                      // then it's probably a fraggle attack                      if (packet.isEmpty() && packet.DestPort.Equals(7) || packet.DestPort.Equals(13) ||                           packet.DestPort.Equals(19) || packet.DestPort.Equals(17) &&                           (ipcache[packet.SourceIP]) > 50)                      {                          pmr = PacketMainReturnType.Drop | PacketMainReturnType.Log | PacketMainReturnType.Popup;                          le = new LogEvent(String.Format(multistring.GetString("Fraggle Log")' packet.SourceIP.ToString())' this);                          le.PMR = PacketMainReturnType.Drop | PacketMainReturnType.Log | PacketMainReturnType.Popup;                          LogCenter.Instance.LogEvent(le);                          data.BlockCache.Add(packet.SourceIP' new BlockedIP(packet.SourceIP' DateTime.UtcNow' "Fraggle Attempt"));                          return pmr;                      }                  }              }
Magic Number,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,interiorMain,The following statement contains a magic number: if (in_packet.GetHighestLayer() == Protocol.UDP)              {                  UDPPacket packet = ((UDPPacket)in_packet);                  packet.PacketTime = DateTime.UtcNow;                    // if it's inbound                  if (!(packet.Outbound))                  {                      // add IP to cache or increment packet count                      if (!(ipcache.ContainsKey(packet.SourceIP)))                          ipcache.Add(packet.SourceIP' 1);                      else                          ipcache[packet.SourceIP] = (ipcache[packet.SourceIP]) + 1;                        // if the packet header is empty' headed towards port (7'13'19'17)' and count > 50'                      // then it's probably a fraggle attack                      if (packet.isEmpty() && packet.DestPort.Equals(7) || packet.DestPort.Equals(13) ||                           packet.DestPort.Equals(19) || packet.DestPort.Equals(17) &&                           (ipcache[packet.SourceIP]) > 50)                      {                          pmr = PacketMainReturnType.Drop | PacketMainReturnType.Log | PacketMainReturnType.Popup;                          le = new LogEvent(String.Format(multistring.GetString("Fraggle Log")' packet.SourceIP.ToString())' this);                          le.PMR = PacketMainReturnType.Drop | PacketMainReturnType.Log | PacketMainReturnType.Popup;                          LogCenter.Instance.LogEvent(le);                          data.BlockCache.Add(packet.SourceIP' new BlockedIP(packet.SourceIP' DateTime.UtcNow' "Fraggle Attempt"));                          return pmr;                      }                  }              }
Magic Number,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,interiorMain,The following statement contains a magic number: if (in_packet.GetHighestLayer() == Protocol.UDP)              {                  UDPPacket packet = ((UDPPacket)in_packet);                  packet.PacketTime = DateTime.UtcNow;                    // if it's inbound                  if (!(packet.Outbound))                  {                      // add IP to cache or increment packet count                      if (!(ipcache.ContainsKey(packet.SourceIP)))                          ipcache.Add(packet.SourceIP' 1);                      else                          ipcache[packet.SourceIP] = (ipcache[packet.SourceIP]) + 1;                        // if the packet header is empty' headed towards port (7'13'19'17)' and count > 50'                      // then it's probably a fraggle attack                      if (packet.isEmpty() && packet.DestPort.Equals(7) || packet.DestPort.Equals(13) ||                           packet.DestPort.Equals(19) || packet.DestPort.Equals(17) &&                           (ipcache[packet.SourceIP]) > 50)                      {                          pmr = PacketMainReturnType.Drop | PacketMainReturnType.Log | PacketMainReturnType.Popup;                          le = new LogEvent(String.Format(multistring.GetString("Fraggle Log")' packet.SourceIP.ToString())' this);                          le.PMR = PacketMainReturnType.Drop | PacketMainReturnType.Log | PacketMainReturnType.Popup;                          LogCenter.Instance.LogEvent(le);                          data.BlockCache.Add(packet.SourceIP' new BlockedIP(packet.SourceIP' DateTime.UtcNow' "Fraggle Attempt"));                          return pmr;                      }                  }              }
Magic Number,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,interiorMain,The following statement contains a magic number: if (in_packet.GetHighestLayer() == Protocol.UDP)              {                  UDPPacket packet = ((UDPPacket)in_packet);                  packet.PacketTime = DateTime.UtcNow;                    // if it's inbound                  if (!(packet.Outbound))                  {                      // add IP to cache or increment packet count                      if (!(ipcache.ContainsKey(packet.SourceIP)))                          ipcache.Add(packet.SourceIP' 1);                      else                          ipcache[packet.SourceIP] = (ipcache[packet.SourceIP]) + 1;                        // if the packet header is empty' headed towards port (7'13'19'17)' and count > 50'                      // then it's probably a fraggle attack                      if (packet.isEmpty() && packet.DestPort.Equals(7) || packet.DestPort.Equals(13) ||                           packet.DestPort.Equals(19) || packet.DestPort.Equals(17) &&                           (ipcache[packet.SourceIP]) > 50)                      {                          pmr = PacketMainReturnType.Drop | PacketMainReturnType.Log | PacketMainReturnType.Popup;                          le = new LogEvent(String.Format(multistring.GetString("Fraggle Log")' packet.SourceIP.ToString())' this);                          le.PMR = PacketMainReturnType.Drop | PacketMainReturnType.Log | PacketMainReturnType.Popup;                          LogCenter.Instance.LogEvent(le);                          data.BlockCache.Add(packet.SourceIP' new BlockedIP(packet.SourceIP' DateTime.UtcNow' "Fraggle Attempt"));                          return pmr;                      }                  }              }
Magic Number,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,interiorMain,The following statement contains a magic number: if (in_packet.GetHighestLayer() == Protocol.UDP)              {                  UDPPacket packet = ((UDPPacket)in_packet);                  packet.PacketTime = DateTime.UtcNow;                    // if it's inbound                  if (!(packet.Outbound))                  {                      // add IP to cache or increment packet count                      if (!(ipcache.ContainsKey(packet.SourceIP)))                          ipcache.Add(packet.SourceIP' 1);                      else                          ipcache[packet.SourceIP] = (ipcache[packet.SourceIP]) + 1;                        // if the packet header is empty' headed towards port (7'13'19'17)' and count > 50'                      // then it's probably a fraggle attack                      if (packet.isEmpty() && packet.DestPort.Equals(7) || packet.DestPort.Equals(13) ||                           packet.DestPort.Equals(19) || packet.DestPort.Equals(17) &&                           (ipcache[packet.SourceIP]) > 50)                      {                          pmr = PacketMainReturnType.Drop | PacketMainReturnType.Log | PacketMainReturnType.Popup;                          le = new LogEvent(String.Format(multistring.GetString("Fraggle Log")' packet.SourceIP.ToString())' this);                          le.PMR = PacketMainReturnType.Drop | PacketMainReturnType.Log | PacketMainReturnType.Popup;                          LogCenter.Instance.LogEvent(le);                          data.BlockCache.Add(packet.SourceIP' new BlockedIP(packet.SourceIP' DateTime.UtcNow' "Fraggle Attempt"));                          return pmr;                      }                  }              }
Magic Number,DDoS,DDoSModule,C:\repos\bwall_fireBwall\fireBwall\DDoS\fireBwallModule.cs,interiorMain,The following statement contains a magic number: if (in_packet.GetHighestLayer() == Protocol.ICMP)              {                  ICMPPacket packet = ((ICMPPacket)in_packet);                  packet.PacketTime = DateTime.UtcNow;                    if (!(packet.Outbound))                  {                      // init the previous packet                      if (ICMPprevious_packet == null)                          ICMPprevious_packet = packet;                        // add IP to cache or increment packet count                      if (!(ipcache.ContainsKey(packet.SourceIP)))                          ipcache.Add(packet.SourceIP' 1);                      // if the packet is >= threshold after the previous and it's the same packet' clear up the cache                      else if ((packet.PacketTime.Millisecond - ICMPprevious_packet.PacketTime.Millisecond) >= data.dos_threshold &&                                  packet.Equals(ICMPprevious_packet))                          ipcache[packet.SourceIP] = 1;                      // if the packet is coming in quickly' add it to the packet count                      else if ((packet.PacketTime.Millisecond - ICMPprevious_packet.PacketTime.Millisecond) <= data.dos_threshold)                          ipcache[packet.SourceIP] = (ipcache[packet.SourceIP]) + 1;                        // if the packet is an echo reply and the IP source                      // is the same as localhost and the time between packets is <= threshhold and                      // there are over 50 accumulated packets' it's probably a smurf attack                      if (packet.Type.ToString().Equals("0") &&                           packet.Code.ToString().Equals("0") &&                           isLocalIP(packet.SourceIP) &&                           (packet.PacketTime.Millisecond - ICMPprevious_packet.PacketTime.Millisecond) <= data.dos_threshold &&                           ipcache[packet.SourceIP] > 50)                      {                          pmr = PacketMainReturnType.Drop | PacketMainReturnType.Log | PacketMainReturnType.Popup;                          le = new LogEvent(String.Format(multistring.GetString("Smurf Log")' packet.SourceIP.ToString())' this);                          le.PMR = PacketMainReturnType.Drop | PacketMainReturnType.Log | PacketMainReturnType.Popup;                          LogCenter.Instance.LogEvent(le);                          data.BlockCache.Add(packet.SourceIP' new BlockedIP(packet.SourceIP' DateTime.UtcNow' "Smurf Attempt"));                          return pmr;                      }                      ICMPprevious_packet = packet;                  }              }
