Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NJsonSchema.CodeGeneration.CSharp,CSharpTypeResolver,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.CSharp\CSharpTypeResolver.cs,Resolve,Cyclomatic complexity of the method is 14
Complex Method,NJsonSchema.CodeGeneration.CSharp,CSharpTypeResolver,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.CSharp\CSharpTypeResolver.cs,ResolveString,Cyclomatic complexity of the method is 8
Complex Method,NJsonSchema.CodeGeneration.CSharp,CSharpValueGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.CSharp\CSharpValueGenerator.cs,GetNumericValue,Cyclomatic complexity of the method is 8
Complex Method,NJsonSchema.CodeGeneration.CSharp.Models,EnumTemplateModel,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.CSharp\Models\EnumTemplateModel.cs,TryGetInt64,Cyclomatic complexity of the method is 11
Long Parameter List,NJsonSchema.CodeGeneration.CSharp,CSharpValueGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.CSharp\CSharpValueGenerator.cs,GetDefaultValue,The method has 6 parameters. Parameters: schema' allowsNull' targetType' typeNameHint' useSchemaDefault' typeResolver
Long Parameter List,NJsonSchema.CodeGeneration.CSharp.Models,ClassTemplateModel,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.CSharp\Models\ClassTemplateModel.cs,ClassTemplateModel,The method has 5 parameters. Parameters: typeName' settings' resolver' schema' rootObject
Long Identifier,NJsonSchema.CodeGeneration.CSharp,CSharpJsonSerializerGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.CSharp\CSharpJsonSerializerGenerator.cs,GenerateJsonSerializerParameterCode,The length of the parameter useSettingsTransformationMethod is 31.
Long Statement,NJsonSchema.CodeGeneration.CSharp,CSharpGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.CSharp\CSharpGenerator.cs,GenerateTypes,The length of the statement  "                    artifacts.Add(new CodeArtifact("JsonInheritanceAttribute"' CodeArtifactType.Class' CodeArtifactLanguage.CSharp' CodeArtifactCategory.Utility' template)); " is 153.
Long Statement,NJsonSchema.CodeGeneration.CSharp,CSharpGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.CSharp\CSharpGenerator.cs,GenerateTypes,The length of the statement  "                    artifacts.Add(new CodeArtifact("JsonInheritanceConverter"' CodeArtifactType.Class' CodeArtifactLanguage.CSharp' CodeArtifactCategory.Utility' template)); " is 153.
Long Statement,NJsonSchema.CodeGeneration.CSharp,CSharpGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.CSharp\CSharpGenerator.cs,GenerateTypes,The length of the statement  "                    artifacts.Add(new CodeArtifact("DateFormatConverter"' CodeArtifactType.Class' CodeArtifactLanguage.CSharp' CodeArtifactCategory.Utility' template)); " is 148.
Long Statement,NJsonSchema.CodeGeneration.CSharp,CSharpGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.CSharp\CSharpGenerator.cs,GenerateClass,The length of the statement  "            return new CodeArtifact(typeName' model.BaseClassName' CodeArtifactType.Class' CodeArtifactLanguage.CSharp' CodeArtifactCategory.Contract' template); " is 149.
Long Statement,NJsonSchema.CodeGeneration.CSharp,CSharpGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.CSharp\CSharpGenerator.cs,GenerateEnum,The length of the statement  "            return new CodeArtifact(typeName' CodeArtifactType.Enum' CodeArtifactLanguage.CSharp' CodeArtifactCategory.Contract' template); " is 127.
Long Statement,NJsonSchema.CodeGeneration.CSharp,CSharpJsonSerializerGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.CSharp\CSharpJsonSerializerGenerator.cs,GenerateJsonSerializerParameterCode,The length of the statement  "            var jsonConverters = (settings.JsonConverters ?? new string[0]).Concat(additionalJsonConverters ?? new string[0]).ToList(); " is 123.
Long Statement,NJsonSchema.CodeGeneration.CSharp,CSharpJsonSerializerGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.CSharp\CSharpJsonSerializerGenerator.cs,GenerateConverters,The length of the statement  "                return "new Newtonsoft.Json.JsonConverter[] { " + string.Join("' "' jsonConverters.Select(c => "new " + c + "()")) + " }"; " is 122.
Long Statement,NJsonSchema.CodeGeneration.CSharp,CSharpTypeResolver,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.CSharp\CSharpTypeResolver.cs,ResolveString,The length of the statement  "                return isNullable && Settings.DateTimeType?.ToLowerInvariant() != "string" ? Settings.DateTimeType + "?" : Settings.DateTimeType; " is 129.
Long Statement,NJsonSchema.CodeGeneration.CSharp,CSharpTypeResolver,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.CSharp\CSharpTypeResolver.cs,ResolveString,The length of the statement  "                return isNullable && Settings.TimeSpanType?.ToLowerInvariant() != "string" ? Settings.TimeSpanType + "?" : Settings.TimeSpanType; " is 129.
Complex Conditional,NJsonSchema.CodeGeneration.CSharp,CSharpTypeResolver,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.CSharp\CSharpTypeResolver.cs,Resolve,The conditional expression  "schema.ActualTypeSchema.IsAnyType &&                  schema.InheritedSchema == null && // not in inheritance hierarchy                  schema.AllOf.Count == 0 &&                  !Types.Keys.Contains(schema) &&                  !schema.HasReference"  is complex.
Complex Conditional,NJsonSchema.CodeGeneration.CSharp,CSharpTypeResolver,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.CSharp\CSharpTypeResolver.cs,IsDefinitionTypeSchema,The conditional expression  "(schema.IsDictionary && !Settings.InlineNamedDictionaries) ||                  (schema.IsArray && !Settings.InlineNamedArrays) ||                  (schema.IsTuple && !Settings.InlineNamedTuples)"  is complex.
Complex Conditional,NJsonSchema.CodeGeneration.CSharp,CSharpTypeResolver,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.CSharp\CSharpTypeResolver.cs,ResolveInteger,The conditional expression  "schema.Minimum < int.MinValue ||                          schema.Minimum > int.MaxValue ||                          schema.Maximum < int.MinValue ||                          schema.Maximum > int.MaxValue"  is complex.
Missing Default,NJsonSchema.CodeGeneration.CSharp.Models,PropertyModel,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.CSharp\Models\PropertyModel.cs,GetSchemaFormat,The following switch statement is missing a default case: switch (schema.Type)                  {                      case JsonObjectType.Integer:                          return JsonFormatStrings.Integer;                        case JsonObjectType.Number:                          return JsonFormatStrings.Double;                  }
