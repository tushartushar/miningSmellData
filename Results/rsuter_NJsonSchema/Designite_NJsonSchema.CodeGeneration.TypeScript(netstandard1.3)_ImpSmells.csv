Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NJsonSchema.CodeGeneration.TypeScript,DataConversionGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\DataConversionGenerator.cs,IsDateTime,Cyclomatic complexity of the method is 9
Complex Method,NJsonSchema.CodeGeneration.TypeScript,TypeScriptTypeResolver,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\TypeScriptTypeResolver.cs,Resolve,Cyclomatic complexity of the method is 14
Complex Method,NJsonSchema.CodeGeneration.TypeScript,TypeScriptTypeResolver,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\TypeScriptTypeResolver.cs,ResolveString,Cyclomatic complexity of the method is 11
Complex Method,NJsonSchema.CodeGeneration.TypeScript,TypeScriptValueGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\TypeScriptValueGenerator.cs,GetDefaultValue,Cyclomatic complexity of the method is 8
Long Parameter List,NJsonSchema.CodeGeneration.TypeScript,TypeScriptValueGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\TypeScriptValueGenerator.cs,GetDefaultValue,The method has 6 parameters. Parameters: schema' allowsNull' targetType' typeNameHint' useSchemaDefault' typeResolver
Long Parameter List,NJsonSchema.CodeGeneration.TypeScript.Models,ClassTemplateModel,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\Models\ClassTemplateModel.cs,ClassTemplateModel,The method has 6 parameters. Parameters: typeName' discriminatorName' settings' resolver' schema' rootObject
Long Parameter List,NJsonSchema.CodeGeneration.TypeScript.Models,PropertyModel,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\Models\PropertyModel.cs,PropertyModel,The method has 5 parameters. Parameters: classTemplateModel' property' parentTypeName' typeResolver' settings
Long Statement,NJsonSchema.CodeGeneration.TypeScript,DataConversionGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\DataConversionGenerator.cs,CreateModel,The length of the statement  "            var dictionaryValueType = parameters.Resolver.TryResolve(typeSchema.AdditionalPropertiesSchema' parameters.TypeNameHint) ?? "any"; " is 130.
Long Statement,NJsonSchema.CodeGeneration.TypeScript,DataConversionGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\DataConversionGenerator.cs,CreateModel,The length of the statement  "                    typeSchema.AdditionalPropertiesSchema.IsNullable(parameters.Settings.SchemaType)' dictionaryValueType' parameters.TypeNameHint' " is 127.
Long Statement,NJsonSchema.CodeGeneration.TypeScript,DataConversionGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\DataConversionGenerator.cs,CreateModel,The length of the statement  "                    parameters.IsPropertyNullable' type' parameters.TypeNameHint' parameters.Settings.GenerateDefaultValues' parameters.Resolver) != null' " is 134.
Long Statement,NJsonSchema.CodeGeneration.TypeScript,DataConversionGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\DataConversionGenerator.cs,CreateModel,The length of the statement  "                    parameters.IsPropertyNullable' type' parameters.TypeNameHint' parameters.Settings.GenerateDefaultValues' parameters.Resolver)' " is 126.
Long Statement,NJsonSchema.CodeGeneration.TypeScript,DataConversionGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\DataConversionGenerator.cs,CreateModel,The length of the statement  "                IsDictionaryValueNewableObject = typeSchema.AdditionalPropertiesSchema != null && IsNewableObject(typeSchema.AdditionalPropertiesSchema' parameters)' " is 149.
Long Statement,NJsonSchema.CodeGeneration.TypeScript,DataConversionGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\DataConversionGenerator.cs,CreateModel,The length of the statement  "                IsDictionaryValueDate = IsDate(typeSchema.AdditionalPropertiesSchema?.ActualSchema?.Format' parameters.Settings.DateTimeType)' " is 126.
Long Statement,NJsonSchema.CodeGeneration.TypeScript,DataConversionGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\DataConversionGenerator.cs,CreateModel,The length of the statement  "                IsDictionaryValueDateTime = IsDateTime(typeSchema.AdditionalPropertiesSchema?.ActualSchema?.Format' parameters.Settings.DateTimeType)' " is 134.
Long Statement,NJsonSchema.CodeGeneration.TypeScript,TypeScriptGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\TypeScriptGenerator.cs,GenerateTypes,The length of the statement  "                yield return new CodeArtifact("formatDate"' CodeArtifactType.Function' CodeArtifactLanguage.CSharp' CodeArtifactCategory.Utility' template); " is 140.
Long Statement,NJsonSchema.CodeGeneration.TypeScript,TypeScriptGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\TypeScriptGenerator.cs,GenerateTypes,The length of the statement  "                var template = Settings.TemplateFactory.CreateTemplate("TypeScript"' "File.ReferenceHandling"' new TemplateModelBase()); " is 120.
Long Statement,NJsonSchema.CodeGeneration.TypeScript,TypeScriptGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\TypeScriptGenerator.cs,GenerateTypes,The length of the statement  "                yield return new CodeArtifact("jsonParse"' CodeArtifactType.Function' CodeArtifactLanguage.CSharp' CodeArtifactCategory.Utility' template); " is 139.
Long Statement,NJsonSchema.CodeGeneration.TypeScript,TypeScriptGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\TypeScriptGenerator.cs,GenerateType,The length of the statement  "                return new CodeArtifact(typeName' CodeArtifactType.Enum' CodeArtifactLanguage.TypeScript' CodeArtifactCategory.Contract' template); " is 131.
Long Statement,NJsonSchema.CodeGeneration.TypeScript,TypeScriptGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\TypeScriptGenerator.cs,GenerateType,The length of the statement  "                return new CodeArtifact(typeName' model.BaseClass' type' CodeArtifactLanguage.TypeScript' CodeArtifactCategory.Contract' template); " is 131.
Long Statement,NJsonSchema.CodeGeneration.TypeScript,TypeScriptTypeResolver,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\TypeScriptTypeResolver.cs,Resolve,The length of the statement  "            return (addInterfacePrefix && !schema.ActualTypeSchema.IsEnumeration && SupportsConstructorConversion(schema) ? "I" : "") + " is 123.
Complex Conditional,NJsonSchema.CodeGeneration.TypeScript,TypeScriptTypeResolver,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\TypeScriptTypeResolver.cs,Resolve,The conditional expression  "schema.ActualTypeSchema.IsAnyType &&                  schema.InheritedSchema == null && // not in inheritance hierarchy                  schema.AllOf.Count == 0 &&                  !Types.Keys.Contains(schema) &&                  !schema.HasReference"  is complex.
Magic Number,NJsonSchema.CodeGeneration.TypeScript,DataConversionGenerator,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\DataConversionGenerator.cs,CreateModel,The following statement contains a magic number: return new              {                  NullValue = parameters.NullValue.ToString().ToLowerInvariant()'                    Variable = parameters.Variable'                  Value = parameters.Value'                    HasDefaultValue = valueGenerator.GetDefaultValue(parameters.Schema'                      parameters.IsPropertyNullable' type' parameters.TypeNameHint' parameters.Settings.GenerateDefaultValues' parameters.Resolver) != null'                  DefaultValue = valueGenerator.GetDefaultValue(parameters.Schema'                      parameters.IsPropertyNullable' type' parameters.TypeNameHint' parameters.Settings.GenerateDefaultValues' parameters.Resolver)'                    Type = type'                    CheckNewableObject = parameters.CheckNewableObject'                  IsNewableObject = IsNewableObject(parameters.Schema' parameters)'                  IsDate = IsDate(typeSchema.Format' parameters.Settings.DateTimeType)'                  IsDateTime = IsDateTime(typeSchema.Format' parameters.Settings.DateTimeType)'                    IsDictionary = typeSchema.IsDictionary'                  DictionaryValueType = dictionaryValueType'                  DictionaryValueDefaultValue = dictionaryValueDefaultValue'                  HasDictionaryValueDefaultValue = dictionaryValueDefaultValue != null'                    IsDictionaryValueNewableObject = typeSchema.AdditionalPropertiesSchema != null && IsNewableObject(typeSchema.AdditionalPropertiesSchema' parameters)'                  IsDictionaryValueDate = IsDate(typeSchema.AdditionalPropertiesSchema?.ActualSchema?.Format' parameters.Settings.DateTimeType)'                  IsDictionaryValueDateTime = IsDateTime(typeSchema.AdditionalPropertiesSchema?.ActualSchema?.Format' parameters.Settings.DateTimeType)'                  IsDictionaryValueNewableArray = typeSchema.AdditionalPropertiesSchema?.ActualSchema?.IsArray == true &&                      IsNewableObject(typeSchema.AdditionalPropertiesSchema.Item' parameters)'                  DictionaryValueArrayItemType = typeSchema.AdditionalPropertiesSchema?.ActualSchema?.IsArray == true ?                      parameters.Resolver.TryResolve(typeSchema.AdditionalPropertiesSchema.Item' "Anonymous") ?? "any" : "any"'                    IsArray = typeSchema.IsArray'                  ArrayItemType = parameters.Resolver.TryResolve(typeSchema.Item' parameters.TypeNameHint) ?? "any"'                  IsArrayItemNewableObject = typeSchema.Item != null && IsNewableObject(typeSchema.Item' parameters)'                  IsArrayItemDate = IsDate(typeSchema.Item?.Format' parameters.Settings.DateTimeType)'                  IsArrayItemDateTime = IsDateTime(typeSchema.Item?.Format' parameters.Settings.DateTimeType)'                    RequiresStrictPropertyInitialization = parameters.Settings.TypeScriptVersion >= 2.7m'                    //StringToDateCode is used for date and date-time formats                  UseJsDate = parameters.Settings.DateTimeType == TypeScriptDateTimeType.Date'                  StringToDateCode = parameters.Settings.DateTimeType == TypeScriptDateTimeType.Date ? "new Date" :                          (parameters.Settings.DateTimeType == TypeScriptDateTimeType.MomentJS ||                          parameters.Settings.DateTimeType == TypeScriptDateTimeType.OffsetMomentJS) &&                          typeSchema.Format == JsonFormatStrings.TimeSpan ? "moment.duration" :                      parameters.Settings.DateTimeType == TypeScriptDateTimeType.OffsetMomentJS ? "moment.parseZone" : "moment"'                  DateTimeToStringCode =                          (parameters.Settings.DateTimeType == TypeScriptDateTimeType.MomentJS ||                          parameters.Settings.DateTimeType == TypeScriptDateTimeType.OffsetMomentJS) &&                          typeSchema.Format == JsonFormatStrings.TimeSpan ? "format('d.hh:mm:ss.SS'' { trim: false })" :                      parameters.Settings.DateTimeType == TypeScriptDateTimeType.OffsetMomentJS ? "toISOString(true)" : "toISOString()"'                    HandleReferences = parameters.Settings.HandleReferences              };
Magic Number,NJsonSchema.CodeGeneration.TypeScript,TypeScriptExtensionCode,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\TypeScriptExtensionCode.cs,TypeScriptExtensionCode,The following statement contains a magic number: code = Regex.Replace(code' "\n(@.*\n)?((export )?[^/\n]*?class ([\\S]*)(.*?)\n([\\s\\S]*?)\n})"' match =>              {                  var hasExport = match.Groups[3].Success;                  var className = match.Groups[4].Value;                  var classCode = hasExport ? match.Groups[2].Value : match.Groups[2].Value.Replace("class " + className' "export class " + className);                    if (extendedClasses?.Contains(className) == true)                  {                      ExtensionClasses[className] = classCode;                      return string.Empty;                  }                    if (baseClasses?.Contains(className) == true)                  {                      TopCode += classCode + "\n\n";                      return string.Empty;                  }                    return match.Groups[0].Value;              }' RegexOptions.Multiline);
Magic Number,NJsonSchema.CodeGeneration.TypeScript,TypeScriptExtensionCode,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\TypeScriptExtensionCode.cs,TypeScriptExtensionCode,The following statement contains a magic number: code = Regex.Replace(code' "\n(@.*\n)?((export )?[^/\n]*?class ([\\S]*)(.*?)\n([\\s\\S]*?)\n})"' match =>              {                  var hasExport = match.Groups[3].Success;                  var className = match.Groups[4].Value;                  var classCode = hasExport ? match.Groups[2].Value : match.Groups[2].Value.Replace("class " + className' "export class " + className);                    if (extendedClasses?.Contains(className) == true)                  {                      ExtensionClasses[className] = classCode;                      return string.Empty;                  }                    if (baseClasses?.Contains(className) == true)                  {                      TopCode += classCode + "\n\n";                      return string.Empty;                  }                    return match.Groups[0].Value;              }' RegexOptions.Multiline);
Magic Number,NJsonSchema.CodeGeneration.TypeScript,TypeScriptExtensionCode,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\TypeScriptExtensionCode.cs,TypeScriptExtensionCode,The following statement contains a magic number: code = Regex.Replace(code' "\n(@.*\n)?((export )?[^/\n]*?class ([\\S]*)(.*?)\n([\\s\\S]*?)\n})"' match =>              {                  var hasExport = match.Groups[3].Success;                  var className = match.Groups[4].Value;                  var classCode = hasExport ? match.Groups[2].Value : match.Groups[2].Value.Replace("class " + className' "export class " + className);                    if (extendedClasses?.Contains(className) == true)                  {                      ExtensionClasses[className] = classCode;                      return string.Empty;                  }                    if (baseClasses?.Contains(className) == true)                  {                      TopCode += classCode + "\n\n";                      return string.Empty;                  }                    return match.Groups[0].Value;              }' RegexOptions.Multiline);
Magic Number,NJsonSchema.CodeGeneration.TypeScript,TypeScriptExtensionCode,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\TypeScriptExtensionCode.cs,TypeScriptExtensionCode,The following statement contains a magic number: code = Regex.Replace(code' "\n(@.*\n)?((export )?[^/\n]*?class ([\\S]*)(.*?)\n([\\s\\S]*?)\n})"' match =>              {                  var hasExport = match.Groups[3].Success;                  var className = match.Groups[4].Value;                  var classCode = hasExport ? match.Groups[2].Value : match.Groups[2].Value.Replace("class " + className' "export class " + className);                    if (extendedClasses?.Contains(className) == true)                  {                      ExtensionClasses[className] = classCode;                      return string.Empty;                  }                    if (baseClasses?.Contains(className) == true)                  {                      TopCode += classCode + "\n\n";                      return string.Empty;                  }                    return match.Groups[0].Value;              }' RegexOptions.Multiline);
Magic Number,NJsonSchema.CodeGeneration.TypeScript,TypeScriptGeneratorSettings,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\TypeScriptGeneratorSettings.cs,TypeScriptGeneratorSettings,The following statement contains a magic number: TypeScriptVersion = 2.7m;
Magic Number,NJsonSchema.CodeGeneration.TypeScript,TypeScriptTypeResolver,C:\research\architectureSmells\repos\rsuter_NJsonSchema\src\NJsonSchema.CodeGeneration.TypeScript\TypeScriptTypeResolver.cs,Resolve,The following statement contains a magic number: var keyType = Settings.TypeScriptVersion >= 2.1m ? prefix + resolvedType : defaultType;
