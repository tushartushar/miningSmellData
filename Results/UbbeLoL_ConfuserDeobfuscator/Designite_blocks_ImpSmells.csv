Implementation smell,Namespace,Class,File,Method,Description
Long Method,de4dot.blocks.cflow,DeadCodeRemover,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\DeadCodeRemover.cs,okInstructions,The method has 229 lines of code.
Long Method,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The method has 467 lines of code.
Complex Method,de4dot.blocks,Blocks,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\Blocks.cs,optimizeLocals,Cyclomatic complexity of the method is 36
Complex Method,de4dot.blocks,Blocks,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\Blocks.cs,optimizeLocalInstr,Cyclomatic complexity of the method is 27
Complex Method,de4dot.blocks,Blocks,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\Blocks.cs,mergeNopBlocks,Cyclomatic complexity of the method is 12
Complex Method,de4dot.blocks,CodeGenerator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\CodeGenerator.cs,layOutInstructions,Cyclomatic complexity of the method is 10
Complex Method,de4dot.blocks,CodeGenerator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\CodeGenerator.cs,doBaseBlock,Cyclomatic complexity of the method is 8
Complex Method,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\DotNetUtils.cs,findMethods,Cyclomatic complexity of the method is 8
Complex Method,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\DotNetUtils.cs,copyBody,Cyclomatic complexity of the method is 10
Complex Method,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\DotNetUtils.cs,updateInstructionOperands,Cyclomatic complexity of the method is 8
Complex Method,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\DotNetUtils.cs,getFrameworkType,Cyclomatic complexity of the method is 8
Complex Method,de4dot.blocks,GenericArgsSubstitutor,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\GenericArgsSubstitutor.cs,create2,Cyclomatic complexity of the method is 80
Complex Method,de4dot.blocks,Instr,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\Instr.cs,isSimpleLoad,Cyclomatic complexity of the method is 35
Complex Method,de4dot.blocks,Instr,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\Instr.cs,getFlippedBranchOpCode,Cyclomatic complexity of the method is 46
Complex Method,de4dot.blocks,Instr,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\Instr.cs,updateTargets,Cyclomatic complexity of the method is 17
Complex Method,de4dot.blocks,InstructionListParser,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\InstructionListParser.cs,createBranches,Cyclomatic complexity of the method is 20
Complex Method,de4dot.blocks,InstructionListParser,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\InstructionListParser.cs,fixBranchTargets,Cyclomatic complexity of the method is 16
Complex Method,de4dot.blocks,ScopeBlock,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\ScopeBlock.cs,removeDeadBlocks,Cyclomatic complexity of the method is 8
Complex Method,de4dot.blocks,ScopeBlock,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\ScopeBlock.cs,mergeBlocks,Cyclomatic complexity of the method is 8
Complex Method,de4dot.blocks,ScopeBlock,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\ScopeBlock.cs,removeAllDeadBlocks,Cyclomatic complexity of the method is 13
Complex Method,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,Cyclomatic complexity of the method is 12
Complex Method,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate,Cyclomatic complexity of the method is 28
Complex Method,de4dot.blocks.cflow,ConstantsFolder,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\ConstantsFolder.cs,deobfuscate,Cyclomatic complexity of the method is 26
Complex Method,de4dot.blocks.cflow,DeadCodeRemover,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\DeadCodeRemover.cs,deobfuscate,Cyclomatic complexity of the method is 28
Complex Method,de4dot.blocks.cflow,DeadCodeRemover,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\DeadCodeRemover.cs,okInstructions,Cyclomatic complexity of the method is 221
Complex Method,de4dot.blocks.cflow,DeadStoreRemover,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\DeadStoreRemover.cs,findLoadStores,Cyclomatic complexity of the method is 30
Complex Method,de4dot.blocks.cflow,DeadStoreRemover,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\DeadStoreRemover.cs,removeDeadStores,Cyclomatic complexity of the method is 14
Complex Method,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,getUnknownValue,Cyclomatic complexity of the method is 9
Complex Method,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,truncateValue,Cyclomatic complexity of the method is 20
Complex Method,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,Cyclomatic complexity of the method is 463
Complex Method,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate_Conv_U1,Cyclomatic complexity of the method is 12
Complex Method,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate_Conv_I1,Cyclomatic complexity of the method is 12
Complex Method,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate_Conv_U2,Cyclomatic complexity of the method is 12
Complex Method,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate_Conv_I2,Cyclomatic complexity of the method is 12
Complex Method,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate_Conv_U4,Cyclomatic complexity of the method is 12
Complex Method,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate_Conv_I4,Cyclomatic complexity of the method is 12
Complex Method,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate_Conv_U8,Cyclomatic complexity of the method is 12
Complex Method,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate_Conv_I8,Cyclomatic complexity of the method is 12
Complex Method,de4dot.blocks.cflow,MethodCallInliner,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\MethodCallInliner.cs,inlineMethod,Cyclomatic complexity of the method is 33
Complex Method,de4dot.blocks.cflow,MethodCallInlinerBase,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\MethodCallInlinerBase.cs,tryInlineOtherMethod,Cyclomatic complexity of the method is 20
Complex Method,de4dot.blocks.cflow,StLdlocFixer,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\StLdlocFixer.cs,deobfuscate,Cyclomatic complexity of the method is 22
Complex Method,de4dot.blocks.cflow,SwitchCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\SwitchCflowDeobfuscator.cs,isSwitchType2,Cyclomatic complexity of the method is 8
Complex Method,de4dot.blocks.cflow,SwitchCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\SwitchCflowDeobfuscator.cs,deobfuscateLdloc,Cyclomatic complexity of the method is 8
Complex Method,de4dot.blocks.cflow,SwitchCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\SwitchCflowDeobfuscator.cs,isBccBlock,Cyclomatic complexity of the method is 25
Complex Method,de4dot.blocks.cflow,SwitchCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\SwitchCflowDeobfuscator.cs,deobfuscateType2,Cyclomatic complexity of the method is 8
Complex Method,de4dot.blocks.cflow,SwitchCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\SwitchCflowDeobfuscator.cs,getBccLocalConstants,Cyclomatic complexity of the method is 9
Long Parameter List,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\DotNetUtils.cs,findOrCreateTypeRef,The method has 5 parameters.
Long Parameter List,de4dot.blocks.cflow,MethodCallInlinerBase,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\MethodCallInlinerBase.cs,inlineOtherMethod,The method has 5 parameters.
Long Parameter List,de4dot.blocks.cflow,MethodCallInlinerBase,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\MethodCallInlinerBase.cs,tryInlineOtherMethod,The method has 5 parameters.
Long Statement,de4dot.blocks,Blocks,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\Blocks.cs,optimizeLocals,The length of the statement  "			info.block.Instructions [info.index] = new Instr (optimizeLocalInstr (info.block.Instructions [info.index]' local' (uint)newIndex)); " is 132.
Long Statement,de4dot.blocks,Blocks,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\Blocks.cs,repartitionBlocks,The length of the statement  "			Console.WriteLine ("Null ref exception! Invalid metadata token in code? Method: {0:X8}: {1}"' method.MDToken.Raw' method.FullName); " is 131.
Long Statement,de4dot.blocks,CodeGenerator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\CodeGenerator.cs,doTryBlock,The length of the statement  "		exceptions.Add (new ExceptionInfo (tryStart' tryEnd' filterStart' handlerStart' handlerEnd' handlerBlock.CatchType' handlerBlock.HandlerType)); " is 143.
Long Statement,de4dot.blocks,CodeGenerator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\CodeGenerator.cs,doHandlerBlock,The length of the statement  "		return block.LastInstr.OpCode == OpCodes.Endfinally || block.LastInstr.OpCode == OpCodes.Leave || block.LastInstr.OpCode == OpCodes.Leave_S; " is 140.
Long Statement,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\DotNetUtils.cs,isMethod,The length of the statement  "	return method != null && method.FullName == returnType + " " + method.DeclaringType.FullName + "::" + method.Name + parameters; " is 127.
Long Statement,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\DotNetUtils.cs,getGenericArgument,The length of the statement  "	var genMethodArgs = methodOwner == null || methodOwner.GenericInstMethodSig == null ? null : methodOwner.GenericInstMethodSig.GenericArguments; " is 143.
Long Statement,de4dot.blocks,ForwardScanOrder,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\ForwardScanOrder.cs,createNewList,The length of the statement  "		throw new ApplicationException (string.Format ("Too many/few blocks after sorting: {0} vs {1}"' newList.Count' sorted.Count)); " is 126.
Long Statement,de4dot.blocks,ForwardScanOrder,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\ForwardScanOrder.cs,addToNewList,The length of the statement  "	if (blockInfo.stackStart == 0 || ReferenceEquals (bb' sorted [0]) || block == null || block.Sources == null || isInNewList (block.Sources)) { " is 141.
Long Statement,de4dot.blocks,GenericArgsSubstitutor,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\GenericArgsSubstitutor.cs,create,The length of the statement  "	if (type == null || ((genericArgs == null || genericArgs.Count == 0) && (genericMethodArgs == null || genericMethodArgs.Count == 0))) " is 133.
Long Statement,de4dot.blocks,InstructionListParser,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\InstructionListParser.cs,getSortedExceptionInfos,The length of the statement  "			throw new ApplicationException ("Exception handler's try block does not start and end at the same place as the other one."); " is 124.
Long Statement,de4dot.blocks,TypeDefDict,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\MemberDefDict.cs,add,The length of the statement  "	if (!refToValue.ContainsKey (typeDef) || getAccessibilityOrder (typeDef) < getAccessibilityOrder (refToKey [typeDef])) { " is 120.
Long Statement,de4dot.blocks,MethodDefDictBase,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\MemberDefDict.cs,add,The length of the statement  "	if (!refToValue.ContainsKey (refKey) || getAccessibilityOrder (methodDef) < getAccessibilityOrder (refToKey [refKey])) { " is 120.
Long Statement,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The length of the statement  "		if (instructions [4].OpCode.Code != Code.Blt && instructions [4].OpCode.Code != Code.Blt_S && instructions [4].OpCode.Code != Code.Bgt && instructions [4].OpCode.Code != Code.Bgt_S) " is 181.
Long Statement,de4dot.blocks.cflow,MethodCallInlinerBase,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\MethodCallInlinerBase.cs,tryInlineOtherMethod,The length of the statement  "	else if (instr.OpCode.Code == Code.Ldfld || instr.OpCode.Code == Code.Ldflda || instr.OpCode.Code == Code.Ldftn || instr.OpCode.Code == Code.Ldvirtftn) { " is 153.
Long Statement,de4dot.blocks.cflow,SwitchCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\SwitchCflowDeobfuscator.cs,isStLdlocBranch,The length of the statement  "	return switchBlock.Instructions.Count == numInstrs && switchBlock.Instructions [0].isStloc () && switchBlock.Instructions [1].isLdloc () && Instr.getLocalVar (blocks.Locals' switchBlock.Instructions [0]) == Instr.getLocalVar (blocks.Locals' switchBlock.Instructions [1]); " is 271.
Complex Conditional,de4dot.blocks,Block,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\Block.cs,removeLastBr,The conditional expression  "fallThrough != null || (LastInstr.Operand != null && (targets == null || targets.Count != 1))"  is complex.
Complex Conditional,de4dot.blocks,ForwardScanOrder,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\ForwardScanOrder.cs,addToNewList,The conditional expression  "blockInfo.stackStart == 0 || ReferenceEquals (bb' sorted [0]) || block == null || block.Sources == null || isInNewList (block.Sources)"  is complex.
Complex Conditional,de4dot.blocks,GenericArgsSubstitutor,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\GenericArgsSubstitutor.cs,create,The conditional expression  "type == null || ((genericArgs == null || genericArgs.Count == 0) && (genericMethodArgs == null || genericMethodArgs.Count == 0))"  is complex.
Complex Conditional,de4dot.blocks,GenericArgsSubstitutor,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\GenericArgsSubstitutor.cs,create,The conditional expression  "(genericArgs == null || genericArgs.Count == 0) && (genericMethodArgs == null || genericMethodArgs.Count == 0)"  is complex.
Complex Conditional,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The conditional expression  "instructions [4].OpCode.Code != Code.Blt && instructions [4].OpCode.Code != Code.Blt_S && instructions [4].OpCode.Code != Code.Bgt && instructions [4].OpCode.Code != Code.Bgt_S"  is complex.
Complex Conditional,de4dot.blocks.cflow,MethodCallInlinerBase,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\MethodCallInlinerBase.cs,tryInlineOtherMethod,The conditional expression  "instr.OpCode.Code == Code.Ldfld || instr.OpCode.Code == Code.Ldflda || instr.OpCode.Code == Code.Ldftn || instr.OpCode.Code == Code.Ldvirtftn"  is complex.
Empty Catch Block,de4dot.blocks.cflow,BlockDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlockDeobfuscator.cs,deobfuscate,The method has an empty catch block.
Magic Number,de4dot.blocks,Blocks,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\Blocks.cs,optimizeLocalInstr,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Ldloc:  case Code.Ldloc_S:  case Code.Ldloc_0:  case Code.Ldloc_1:  case Code.Ldloc_2:  case Code.Ldloc_3:  	if (newIndex == 0)  		return OpCodes.Ldloc_0.ToInstruction ();  	if (newIndex == 1)  		return OpCodes.Ldloc_1.ToInstruction ();  	if (newIndex == 2)  		return OpCodes.Ldloc_2.ToInstruction ();  	if (newIndex == 3)  		return OpCodes.Ldloc_3.ToInstruction ();  	if (newIndex <= 0xFF)  		return OpCodes.Ldloc_S.ToInstruction (local);  	return OpCodes.Ldloc.ToInstruction (local);  case Code.Stloc:  case Code.Stloc_S:  case Code.Stloc_0:  case Code.Stloc_1:  case Code.Stloc_2:  case Code.Stloc_3:  	if (newIndex == 0)  		return OpCodes.Stloc_0.ToInstruction ();  	if (newIndex == 1)  		return OpCodes.Stloc_1.ToInstruction ();  	if (newIndex == 2)  		return OpCodes.Stloc_2.ToInstruction ();  	if (newIndex == 3)  		return OpCodes.Stloc_3.ToInstruction ();  	if (newIndex <= 0xFF)  		return OpCodes.Stloc_S.ToInstruction (local);  	return OpCodes.Stloc.ToInstruction (local);  case Code.Ldloca_S:  case Code.Ldloca:  	if (newIndex <= 0xFF)  		return OpCodes.Ldloca_S.ToInstruction (local);  	return OpCodes.Ldloca.ToInstruction (local);  default:  	throw new ApplicationException ("Invalid ld/st local instruction");  }  
Magic Number,de4dot.blocks,Blocks,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\Blocks.cs,optimizeLocalInstr,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Ldloc:  case Code.Ldloc_S:  case Code.Ldloc_0:  case Code.Ldloc_1:  case Code.Ldloc_2:  case Code.Ldloc_3:  	if (newIndex == 0)  		return OpCodes.Ldloc_0.ToInstruction ();  	if (newIndex == 1)  		return OpCodes.Ldloc_1.ToInstruction ();  	if (newIndex == 2)  		return OpCodes.Ldloc_2.ToInstruction ();  	if (newIndex == 3)  		return OpCodes.Ldloc_3.ToInstruction ();  	if (newIndex <= 0xFF)  		return OpCodes.Ldloc_S.ToInstruction (local);  	return OpCodes.Ldloc.ToInstruction (local);  case Code.Stloc:  case Code.Stloc_S:  case Code.Stloc_0:  case Code.Stloc_1:  case Code.Stloc_2:  case Code.Stloc_3:  	if (newIndex == 0)  		return OpCodes.Stloc_0.ToInstruction ();  	if (newIndex == 1)  		return OpCodes.Stloc_1.ToInstruction ();  	if (newIndex == 2)  		return OpCodes.Stloc_2.ToInstruction ();  	if (newIndex == 3)  		return OpCodes.Stloc_3.ToInstruction ();  	if (newIndex <= 0xFF)  		return OpCodes.Stloc_S.ToInstruction (local);  	return OpCodes.Stloc.ToInstruction (local);  case Code.Ldloca_S:  case Code.Ldloca:  	if (newIndex <= 0xFF)  		return OpCodes.Ldloca_S.ToInstruction (local);  	return OpCodes.Ldloca.ToInstruction (local);  default:  	throw new ApplicationException ("Invalid ld/st local instruction");  }  
Magic Number,de4dot.blocks,Blocks,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\Blocks.cs,optimizeLocalInstr,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Ldloc:  case Code.Ldloc_S:  case Code.Ldloc_0:  case Code.Ldloc_1:  case Code.Ldloc_2:  case Code.Ldloc_3:  	if (newIndex == 0)  		return OpCodes.Ldloc_0.ToInstruction ();  	if (newIndex == 1)  		return OpCodes.Ldloc_1.ToInstruction ();  	if (newIndex == 2)  		return OpCodes.Ldloc_2.ToInstruction ();  	if (newIndex == 3)  		return OpCodes.Ldloc_3.ToInstruction ();  	if (newIndex <= 0xFF)  		return OpCodes.Ldloc_S.ToInstruction (local);  	return OpCodes.Ldloc.ToInstruction (local);  case Code.Stloc:  case Code.Stloc_S:  case Code.Stloc_0:  case Code.Stloc_1:  case Code.Stloc_2:  case Code.Stloc_3:  	if (newIndex == 0)  		return OpCodes.Stloc_0.ToInstruction ();  	if (newIndex == 1)  		return OpCodes.Stloc_1.ToInstruction ();  	if (newIndex == 2)  		return OpCodes.Stloc_2.ToInstruction ();  	if (newIndex == 3)  		return OpCodes.Stloc_3.ToInstruction ();  	if (newIndex <= 0xFF)  		return OpCodes.Stloc_S.ToInstruction (local);  	return OpCodes.Stloc.ToInstruction (local);  case Code.Ldloca_S:  case Code.Ldloca:  	if (newIndex <= 0xFF)  		return OpCodes.Ldloca_S.ToInstruction (local);  	return OpCodes.Ldloca.ToInstruction (local);  default:  	throw new ApplicationException ("Invalid ld/st local instruction");  }  
Magic Number,de4dot.blocks,Blocks,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\Blocks.cs,optimizeLocalInstr,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Ldloc:  case Code.Ldloc_S:  case Code.Ldloc_0:  case Code.Ldloc_1:  case Code.Ldloc_2:  case Code.Ldloc_3:  	if (newIndex == 0)  		return OpCodes.Ldloc_0.ToInstruction ();  	if (newIndex == 1)  		return OpCodes.Ldloc_1.ToInstruction ();  	if (newIndex == 2)  		return OpCodes.Ldloc_2.ToInstruction ();  	if (newIndex == 3)  		return OpCodes.Ldloc_3.ToInstruction ();  	if (newIndex <= 0xFF)  		return OpCodes.Ldloc_S.ToInstruction (local);  	return OpCodes.Ldloc.ToInstruction (local);  case Code.Stloc:  case Code.Stloc_S:  case Code.Stloc_0:  case Code.Stloc_1:  case Code.Stloc_2:  case Code.Stloc_3:  	if (newIndex == 0)  		return OpCodes.Stloc_0.ToInstruction ();  	if (newIndex == 1)  		return OpCodes.Stloc_1.ToInstruction ();  	if (newIndex == 2)  		return OpCodes.Stloc_2.ToInstruction ();  	if (newIndex == 3)  		return OpCodes.Stloc_3.ToInstruction ();  	if (newIndex <= 0xFF)  		return OpCodes.Stloc_S.ToInstruction (local);  	return OpCodes.Stloc.ToInstruction (local);  case Code.Ldloca_S:  case Code.Ldloca:  	if (newIndex <= 0xFF)  		return OpCodes.Ldloca_S.ToInstruction (local);  	return OpCodes.Ldloca.ToInstruction (local);  default:  	throw new ApplicationException ("Invalid ld/st local instruction");  }  
Magic Number,de4dot.blocks,Blocks,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\Blocks.cs,optimizeLocalInstr,The following statement contains a magic number: if (newIndex == 2)  	return OpCodes.Ldloc_2.ToInstruction ();  
Magic Number,de4dot.blocks,Blocks,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\Blocks.cs,optimizeLocalInstr,The following statement contains a magic number: if (newIndex == 3)  	return OpCodes.Ldloc_3.ToInstruction ();  
Magic Number,de4dot.blocks,Blocks,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\Blocks.cs,optimizeLocalInstr,The following statement contains a magic number: if (newIndex == 2)  	return OpCodes.Stloc_2.ToInstruction ();  
Magic Number,de4dot.blocks,Blocks,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\Blocks.cs,optimizeLocalInstr,The following statement contains a magic number: if (newIndex == 3)  	return OpCodes.Stloc_3.ToInstruction ();  
Magic Number,de4dot.blocks,Blocks,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\Blocks.cs,mergeNopBlocks,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	bool changed = false;  	foreach (var block in allBlocks) {  		Block nopBlockTarget;  		nopBlockTarget = getNopBlockTarget (nopBlocks' block' block.FallThrough);  		if (nopBlockTarget != null) {  			block.setNewFallThrough (nopBlockTarget);  			changed = true;  		}  		if (block.Targets != null) {  			for (int targetIndex = 0; targetIndex < block.Targets.Count; targetIndex++) {  				nopBlockTarget = getNopBlockTarget (nopBlocks' block' block.Targets [targetIndex]);  				if (nopBlockTarget == null)  					continue;  				block.setNewTarget (targetIndex' nopBlockTarget);  				changed = true;  			}  		}  	}  	if (!changed)  		break;  }  
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\DotNetUtils.cs,getDllName,The following statement contains a magic number: if (dll.EndsWith (".dll"' StringComparison.OrdinalIgnoreCase))  	return dll.Substring (0' dll.Length - 4);  
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\DotNetUtils.cs,getDllName,The following statement contains a magic number: return dll.Substring (0' dll.Length - 4);  
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\DotNetUtils.cs,getInstruction,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	if (index < 0 || index >= instructions.Count)  		return null;  	var instr = instructions [index++];  	if (instr.OpCode.Code == Code.Nop)  		continue;  	if (instr.OpCode.OpCodeType == OpCodeType.Prefix)  		continue;  	if (instr == null || (instr.OpCode.Code != Code.Br && instr.OpCode.Code != Code.Br_S))  		return instr;  	instr = instr.Operand as Instruction;  	if (instr == null)  		return null;  	index = instructions.IndexOf (instr);  }  
Magic Number,de4dot.blocks,TypeDefDict,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\MemberDefDict.cs,getAccessibilityOrder,The following statement contains a magic number: return accessibilityOrder [(int)typeDef.Attributes & 7];  
Magic Number,de4dot.blocks,FieldDefDictBase,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\MemberDefDict.cs,getAccessibilityOrder,The following statement contains a magic number: return accessibilityOrder [(int)fieldDef.Attributes & 7];  
Magic Number,de4dot.blocks,MethodDefDictBase,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\MemberDefDict.cs,getAccessibilityOrder,The following statement contains a magic number: return accessibilityOrder [(int)methodDef.Attributes & 7];  
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  	if (block.Instructions.Count != 5)  		continue;  	var instructions = block.Instructions;  	if (instructions [0].OpCode.Code != Code.Dup)  		continue;  	if (instructions [1].OpCode.Code != Code.Dup)  		continue;  	if (!instructions [2].isLdcI4 ())  		continue;  	if (instructions [3].OpCode.Code != Code.Sub && instructions [3].OpCode.Code != Code.Add)  		continue;  	if (instructions [4].OpCode.Code != Code.Blt && instructions [4].OpCode.Code != Code.Blt_S && instructions [4].OpCode.Code != Code.Bgt && instructions [4].OpCode.Code != Code.Bgt_S)  		continue;  	if (block.Sources.Count != 2)  		continue;  	var prev = block.Sources [0];  	if (prev == block)  		prev = block.Sources [1];  	if (prev == null || !prev.LastInstr.isLdcI4 ())  		continue;  	var next = block.FallThrough;  	if (next.FirstInstr.OpCode.Code != Code.Pop)  		continue;  	block.replaceLastInstrsWithBranch (5' next);  	changed = true;  }  
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  	if (block.Instructions.Count != 5)  		continue;  	var instructions = block.Instructions;  	if (instructions [0].OpCode.Code != Code.Dup)  		continue;  	if (instructions [1].OpCode.Code != Code.Dup)  		continue;  	if (!instructions [2].isLdcI4 ())  		continue;  	if (instructions [3].OpCode.Code != Code.Sub && instructions [3].OpCode.Code != Code.Add)  		continue;  	if (instructions [4].OpCode.Code != Code.Blt && instructions [4].OpCode.Code != Code.Blt_S && instructions [4].OpCode.Code != Code.Bgt && instructions [4].OpCode.Code != Code.Bgt_S)  		continue;  	if (block.Sources.Count != 2)  		continue;  	var prev = block.Sources [0];  	if (prev == block)  		prev = block.Sources [1];  	if (prev == null || !prev.LastInstr.isLdcI4 ())  		continue;  	var next = block.FallThrough;  	if (next.FirstInstr.OpCode.Code != Code.Pop)  		continue;  	block.replaceLastInstrsWithBranch (5' next);  	changed = true;  }  
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  	if (block.Instructions.Count != 5)  		continue;  	var instructions = block.Instructions;  	if (instructions [0].OpCode.Code != Code.Dup)  		continue;  	if (instructions [1].OpCode.Code != Code.Dup)  		continue;  	if (!instructions [2].isLdcI4 ())  		continue;  	if (instructions [3].OpCode.Code != Code.Sub && instructions [3].OpCode.Code != Code.Add)  		continue;  	if (instructions [4].OpCode.Code != Code.Blt && instructions [4].OpCode.Code != Code.Blt_S && instructions [4].OpCode.Code != Code.Bgt && instructions [4].OpCode.Code != Code.Bgt_S)  		continue;  	if (block.Sources.Count != 2)  		continue;  	var prev = block.Sources [0];  	if (prev == block)  		prev = block.Sources [1];  	if (prev == null || !prev.LastInstr.isLdcI4 ())  		continue;  	var next = block.FallThrough;  	if (next.FirstInstr.OpCode.Code != Code.Pop)  		continue;  	block.replaceLastInstrsWithBranch (5' next);  	changed = true;  }  
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  	if (block.Instructions.Count != 5)  		continue;  	var instructions = block.Instructions;  	if (instructions [0].OpCode.Code != Code.Dup)  		continue;  	if (instructions [1].OpCode.Code != Code.Dup)  		continue;  	if (!instructions [2].isLdcI4 ())  		continue;  	if (instructions [3].OpCode.Code != Code.Sub && instructions [3].OpCode.Code != Code.Add)  		continue;  	if (instructions [4].OpCode.Code != Code.Blt && instructions [4].OpCode.Code != Code.Blt_S && instructions [4].OpCode.Code != Code.Bgt && instructions [4].OpCode.Code != Code.Bgt_S)  		continue;  	if (block.Sources.Count != 2)  		continue;  	var prev = block.Sources [0];  	if (prev == block)  		prev = block.Sources [1];  	if (prev == null || !prev.LastInstr.isLdcI4 ())  		continue;  	var next = block.FallThrough;  	if (next.FirstInstr.OpCode.Code != Code.Pop)  		continue;  	block.replaceLastInstrsWithBranch (5' next);  	changed = true;  }  
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  	if (block.Instructions.Count != 5)  		continue;  	var instructions = block.Instructions;  	if (instructions [0].OpCode.Code != Code.Dup)  		continue;  	if (instructions [1].OpCode.Code != Code.Dup)  		continue;  	if (!instructions [2].isLdcI4 ())  		continue;  	if (instructions [3].OpCode.Code != Code.Sub && instructions [3].OpCode.Code != Code.Add)  		continue;  	if (instructions [4].OpCode.Code != Code.Blt && instructions [4].OpCode.Code != Code.Blt_S && instructions [4].OpCode.Code != Code.Bgt && instructions [4].OpCode.Code != Code.Bgt_S)  		continue;  	if (block.Sources.Count != 2)  		continue;  	var prev = block.Sources [0];  	if (prev == block)  		prev = block.Sources [1];  	if (prev == null || !prev.LastInstr.isLdcI4 ())  		continue;  	var next = block.FallThrough;  	if (next.FirstInstr.OpCode.Code != Code.Pop)  		continue;  	block.replaceLastInstrsWithBranch (5' next);  	changed = true;  }  
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  	if (block.Instructions.Count != 5)  		continue;  	var instructions = block.Instructions;  	if (instructions [0].OpCode.Code != Code.Dup)  		continue;  	if (instructions [1].OpCode.Code != Code.Dup)  		continue;  	if (!instructions [2].isLdcI4 ())  		continue;  	if (instructions [3].OpCode.Code != Code.Sub && instructions [3].OpCode.Code != Code.Add)  		continue;  	if (instructions [4].OpCode.Code != Code.Blt && instructions [4].OpCode.Code != Code.Blt_S && instructions [4].OpCode.Code != Code.Bgt && instructions [4].OpCode.Code != Code.Bgt_S)  		continue;  	if (block.Sources.Count != 2)  		continue;  	var prev = block.Sources [0];  	if (prev == block)  		prev = block.Sources [1];  	if (prev == null || !prev.LastInstr.isLdcI4 ())  		continue;  	var next = block.FallThrough;  	if (next.FirstInstr.OpCode.Code != Code.Pop)  		continue;  	block.replaceLastInstrsWithBranch (5' next);  	changed = true;  }  
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  	if (block.Instructions.Count != 5)  		continue;  	var instructions = block.Instructions;  	if (instructions [0].OpCode.Code != Code.Dup)  		continue;  	if (instructions [1].OpCode.Code != Code.Dup)  		continue;  	if (!instructions [2].isLdcI4 ())  		continue;  	if (instructions [3].OpCode.Code != Code.Sub && instructions [3].OpCode.Code != Code.Add)  		continue;  	if (instructions [4].OpCode.Code != Code.Blt && instructions [4].OpCode.Code != Code.Blt_S && instructions [4].OpCode.Code != Code.Bgt && instructions [4].OpCode.Code != Code.Bgt_S)  		continue;  	if (block.Sources.Count != 2)  		continue;  	var prev = block.Sources [0];  	if (prev == block)  		prev = block.Sources [1];  	if (prev == null || !prev.LastInstr.isLdcI4 ())  		continue;  	var next = block.FallThrough;  	if (next.FirstInstr.OpCode.Code != Code.Pop)  		continue;  	block.replaceLastInstrsWithBranch (5' next);  	changed = true;  }  
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  	if (block.Instructions.Count != 5)  		continue;  	var instructions = block.Instructions;  	if (instructions [0].OpCode.Code != Code.Dup)  		continue;  	if (instructions [1].OpCode.Code != Code.Dup)  		continue;  	if (!instructions [2].isLdcI4 ())  		continue;  	if (instructions [3].OpCode.Code != Code.Sub && instructions [3].OpCode.Code != Code.Add)  		continue;  	if (instructions [4].OpCode.Code != Code.Blt && instructions [4].OpCode.Code != Code.Blt_S && instructions [4].OpCode.Code != Code.Bgt && instructions [4].OpCode.Code != Code.Bgt_S)  		continue;  	if (block.Sources.Count != 2)  		continue;  	var prev = block.Sources [0];  	if (prev == block)  		prev = block.Sources [1];  	if (prev == null || !prev.LastInstr.isLdcI4 ())  		continue;  	var next = block.FallThrough;  	if (next.FirstInstr.OpCode.Code != Code.Pop)  		continue;  	block.replaceLastInstrsWithBranch (5' next);  	changed = true;  }  
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  	if (block.Instructions.Count != 5)  		continue;  	var instructions = block.Instructions;  	if (instructions [0].OpCode.Code != Code.Dup)  		continue;  	if (instructions [1].OpCode.Code != Code.Dup)  		continue;  	if (!instructions [2].isLdcI4 ())  		continue;  	if (instructions [3].OpCode.Code != Code.Sub && instructions [3].OpCode.Code != Code.Add)  		continue;  	if (instructions [4].OpCode.Code != Code.Blt && instructions [4].OpCode.Code != Code.Blt_S && instructions [4].OpCode.Code != Code.Bgt && instructions [4].OpCode.Code != Code.Bgt_S)  		continue;  	if (block.Sources.Count != 2)  		continue;  	var prev = block.Sources [0];  	if (prev == block)  		prev = block.Sources [1];  	if (prev == null || !prev.LastInstr.isLdcI4 ())  		continue;  	var next = block.FallThrough;  	if (next.FirstInstr.OpCode.Code != Code.Pop)  		continue;  	block.replaceLastInstrsWithBranch (5' next);  	changed = true;  }  
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  	if (block.Instructions.Count != 5)  		continue;  	var instructions = block.Instructions;  	if (instructions [0].OpCode.Code != Code.Dup)  		continue;  	if (instructions [1].OpCode.Code != Code.Dup)  		continue;  	if (!instructions [2].isLdcI4 ())  		continue;  	if (instructions [3].OpCode.Code != Code.Sub && instructions [3].OpCode.Code != Code.Add)  		continue;  	if (instructions [4].OpCode.Code != Code.Blt && instructions [4].OpCode.Code != Code.Blt_S && instructions [4].OpCode.Code != Code.Bgt && instructions [4].OpCode.Code != Code.Bgt_S)  		continue;  	if (block.Sources.Count != 2)  		continue;  	var prev = block.Sources [0];  	if (prev == block)  		prev = block.Sources [1];  	if (prev == null || !prev.LastInstr.isLdcI4 ())  		continue;  	var next = block.FallThrough;  	if (next.FirstInstr.OpCode.Code != Code.Pop)  		continue;  	block.replaceLastInstrsWithBranch (5' next);  	changed = true;  }  
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: if (block.Instructions.Count != 5)  	continue;  
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: if (!instructions [2].isLdcI4 ())  	continue;  
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: if (instructions [3].OpCode.Code != Code.Sub && instructions [3].OpCode.Code != Code.Add)  	continue;  
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: if (instructions [3].OpCode.Code != Code.Sub && instructions [3].OpCode.Code != Code.Add)  	continue;  
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: if (instructions [4].OpCode.Code != Code.Blt && instructions [4].OpCode.Code != Code.Blt_S && instructions [4].OpCode.Code != Code.Bgt && instructions [4].OpCode.Code != Code.Bgt_S)  	continue;  
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: if (instructions [4].OpCode.Code != Code.Blt && instructions [4].OpCode.Code != Code.Blt_S && instructions [4].OpCode.Code != Code.Bgt && instructions [4].OpCode.Code != Code.Bgt_S)  	continue;  
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: if (instructions [4].OpCode.Code != Code.Blt && instructions [4].OpCode.Code != Code.Blt_S && instructions [4].OpCode.Code != Code.Bgt && instructions [4].OpCode.Code != Code.Bgt_S)  	continue;  
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: if (instructions [4].OpCode.Code != Code.Blt && instructions [4].OpCode.Code != Code.Blt_S && instructions [4].OpCode.Code != Code.Bgt && instructions [4].OpCode.Code != Code.Bgt_S)  	continue;  
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: if (block.Sources.Count != 2)  	continue;  
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: block.replaceLastInstrsWithBranch (5' next);  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Beq,The following statement contains a magic number: if (val1.isInt32 () && val2.isInt32 ())  	return emulateBranch (2' Int32Value.compareEq ((Int32Value)val1' (Int32Value)val2));  else if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareEq ((Int64Value)val1' (Int64Value)val2));  else if (val1.isNull () && val2.isNull ())  	return emulateBranch (2' true);  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Beq,The following statement contains a magic number: if (val1.isInt32 () && val2.isInt32 ())  	return emulateBranch (2' Int32Value.compareEq ((Int32Value)val1' (Int32Value)val2));  else if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareEq ((Int64Value)val1' (Int64Value)val2));  else if (val1.isNull () && val2.isNull ())  	return emulateBranch (2' true);  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Beq,The following statement contains a magic number: if (val1.isInt32 () && val2.isInt32 ())  	return emulateBranch (2' Int32Value.compareEq ((Int32Value)val1' (Int32Value)val2));  else if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareEq ((Int64Value)val1' (Int64Value)val2));  else if (val1.isNull () && val2.isNull ())  	return emulateBranch (2' true);  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Beq,The following statement contains a magic number: return emulateBranch (2' Int32Value.compareEq ((Int32Value)val1' (Int32Value)val2));  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Beq,The following statement contains a magic number: if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareEq ((Int64Value)val1' (Int64Value)val2));  else if (val1.isNull () && val2.isNull ())  	return emulateBranch (2' true);  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Beq,The following statement contains a magic number: if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareEq ((Int64Value)val1' (Int64Value)val2));  else if (val1.isNull () && val2.isNull ())  	return emulateBranch (2' true);  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Beq,The following statement contains a magic number: return emulateBranch (2' Int64Value.compareEq ((Int64Value)val1' (Int64Value)val2));  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Beq,The following statement contains a magic number: if (val1.isNull () && val2.isNull ())  	return emulateBranch (2' true);  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Beq,The following statement contains a magic number: return emulateBranch (2' true);  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bne_Un,The following statement contains a magic number: if (val1.isInt32 () && val2.isInt32 ())  	return emulateBranch (2' Int32Value.compareNeq ((Int32Value)val1' (Int32Value)val2));  else if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareNeq ((Int64Value)val1' (Int64Value)val2));  else if (val1.isNull () && val2.isNull ())  	return emulateBranch (2' false);  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bne_Un,The following statement contains a magic number: if (val1.isInt32 () && val2.isInt32 ())  	return emulateBranch (2' Int32Value.compareNeq ((Int32Value)val1' (Int32Value)val2));  else if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareNeq ((Int64Value)val1' (Int64Value)val2));  else if (val1.isNull () && val2.isNull ())  	return emulateBranch (2' false);  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bne_Un,The following statement contains a magic number: if (val1.isInt32 () && val2.isInt32 ())  	return emulateBranch (2' Int32Value.compareNeq ((Int32Value)val1' (Int32Value)val2));  else if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareNeq ((Int64Value)val1' (Int64Value)val2));  else if (val1.isNull () && val2.isNull ())  	return emulateBranch (2' false);  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bne_Un,The following statement contains a magic number: return emulateBranch (2' Int32Value.compareNeq ((Int32Value)val1' (Int32Value)val2));  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bne_Un,The following statement contains a magic number: if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareNeq ((Int64Value)val1' (Int64Value)val2));  else if (val1.isNull () && val2.isNull ())  	return emulateBranch (2' false);  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bne_Un,The following statement contains a magic number: if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareNeq ((Int64Value)val1' (Int64Value)val2));  else if (val1.isNull () && val2.isNull ())  	return emulateBranch (2' false);  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bne_Un,The following statement contains a magic number: return emulateBranch (2' Int64Value.compareNeq ((Int64Value)val1' (Int64Value)val2));  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bne_Un,The following statement contains a magic number: if (val1.isNull () && val2.isNull ())  	return emulateBranch (2' false);  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bne_Un,The following statement contains a magic number: return emulateBranch (2' false);  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bge,The following statement contains a magic number: if (val1.isInt32 () && val2.isInt32 ())  	return emulateBranch (2' Int32Value.compareGe ((Int32Value)val1' (Int32Value)val2));  else if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareGe ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bge,The following statement contains a magic number: if (val1.isInt32 () && val2.isInt32 ())  	return emulateBranch (2' Int32Value.compareGe ((Int32Value)val1' (Int32Value)val2));  else if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareGe ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bge,The following statement contains a magic number: return emulateBranch (2' Int32Value.compareGe ((Int32Value)val1' (Int32Value)val2));  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bge,The following statement contains a magic number: if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareGe ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bge,The following statement contains a magic number: return emulateBranch (2' Int64Value.compareGe ((Int64Value)val1' (Int64Value)val2));  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bge_Un,The following statement contains a magic number: if (val1.isInt32 () && val2.isInt32 ())  	return emulateBranch (2' Int32Value.compareGe_Un ((Int32Value)val1' (Int32Value)val2));  else if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareGe_Un ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bge_Un,The following statement contains a magic number: if (val1.isInt32 () && val2.isInt32 ())  	return emulateBranch (2' Int32Value.compareGe_Un ((Int32Value)val1' (Int32Value)val2));  else if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareGe_Un ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bge_Un,The following statement contains a magic number: return emulateBranch (2' Int32Value.compareGe_Un ((Int32Value)val1' (Int32Value)val2));  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bge_Un,The following statement contains a magic number: if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareGe_Un ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bge_Un,The following statement contains a magic number: return emulateBranch (2' Int64Value.compareGe_Un ((Int64Value)val1' (Int64Value)val2));  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bgt,The following statement contains a magic number: if (val1.isInt32 () && val2.isInt32 ())  	return emulateBranch (2' Int32Value.compareGt ((Int32Value)val1' (Int32Value)val2));  else if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareGt ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bgt,The following statement contains a magic number: if (val1.isInt32 () && val2.isInt32 ())  	return emulateBranch (2' Int32Value.compareGt ((Int32Value)val1' (Int32Value)val2));  else if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareGt ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bgt,The following statement contains a magic number: return emulateBranch (2' Int32Value.compareGt ((Int32Value)val1' (Int32Value)val2));  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bgt,The following statement contains a magic number: if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareGt ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bgt,The following statement contains a magic number: return emulateBranch (2' Int64Value.compareGt ((Int64Value)val1' (Int64Value)val2));  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bgt_Un,The following statement contains a magic number: if (val1.isInt32 () && val2.isInt32 ())  	return emulateBranch (2' Int32Value.compareGt_Un ((Int32Value)val1' (Int32Value)val2));  else if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareGt_Un ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bgt_Un,The following statement contains a magic number: if (val1.isInt32 () && val2.isInt32 ())  	return emulateBranch (2' Int32Value.compareGt_Un ((Int32Value)val1' (Int32Value)val2));  else if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareGt_Un ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bgt_Un,The following statement contains a magic number: return emulateBranch (2' Int32Value.compareGt_Un ((Int32Value)val1' (Int32Value)val2));  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bgt_Un,The following statement contains a magic number: if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareGt_Un ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Bgt_Un,The following statement contains a magic number: return emulateBranch (2' Int64Value.compareGt_Un ((Int64Value)val1' (Int64Value)val2));  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Ble,The following statement contains a magic number: if (val1.isInt32 () && val2.isInt32 ())  	return emulateBranch (2' Int32Value.compareLe ((Int32Value)val1' (Int32Value)val2));  else if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareLe ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Ble,The following statement contains a magic number: if (val1.isInt32 () && val2.isInt32 ())  	return emulateBranch (2' Int32Value.compareLe ((Int32Value)val1' (Int32Value)val2));  else if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareLe ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Ble,The following statement contains a magic number: return emulateBranch (2' Int32Value.compareLe ((Int32Value)val1' (Int32Value)val2));  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Ble,The following statement contains a magic number: if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareLe ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Ble,The following statement contains a magic number: return emulateBranch (2' Int64Value.compareLe ((Int64Value)val1' (Int64Value)val2));  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Ble_Un,The following statement contains a magic number: if (val1.isInt32 () && val2.isInt32 ())  	return emulateBranch (2' Int32Value.compareLe_Un ((Int32Value)val1' (Int32Value)val2));  else if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareLe_Un ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Ble_Un,The following statement contains a magic number: if (val1.isInt32 () && val2.isInt32 ())  	return emulateBranch (2' Int32Value.compareLe_Un ((Int32Value)val1' (Int32Value)val2));  else if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareLe_Un ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Ble_Un,The following statement contains a magic number: return emulateBranch (2' Int32Value.compareLe_Un ((Int32Value)val1' (Int32Value)val2));  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Ble_Un,The following statement contains a magic number: if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareLe_Un ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Ble_Un,The following statement contains a magic number: return emulateBranch (2' Int64Value.compareLe_Un ((Int64Value)val1' (Int64Value)val2));  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Blt,The following statement contains a magic number: if (val1.isInt32 () && val2.isInt32 ())  	return emulateBranch (2' Int32Value.compareLt ((Int32Value)val1' (Int32Value)val2));  else if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareLt ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Blt,The following statement contains a magic number: if (val1.isInt32 () && val2.isInt32 ())  	return emulateBranch (2' Int32Value.compareLt ((Int32Value)val1' (Int32Value)val2));  else if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareLt ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Blt,The following statement contains a magic number: return emulateBranch (2' Int32Value.compareLt ((Int32Value)val1' (Int32Value)val2));  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Blt,The following statement contains a magic number: if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareLt ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Blt,The following statement contains a magic number: return emulateBranch (2' Int64Value.compareLt ((Int64Value)val1' (Int64Value)val2));  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Blt_Un,The following statement contains a magic number: if (val1.isInt32 () && val2.isInt32 ())  	return emulateBranch (2' Int32Value.compareLt_Un ((Int32Value)val1' (Int32Value)val2));  else if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareLt_Un ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Blt_Un,The following statement contains a magic number: if (val1.isInt32 () && val2.isInt32 ())  	return emulateBranch (2' Int32Value.compareLt_Un ((Int32Value)val1' (Int32Value)val2));  else if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareLt_Un ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Blt_Un,The following statement contains a magic number: return emulateBranch (2' Int32Value.compareLt_Un ((Int32Value)val1' (Int32Value)val2));  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Blt_Un,The following statement contains a magic number: if (val1.isInt64 () && val2.isInt64 ())  	return emulateBranch (2' Int64Value.compareLt_Un ((Int64Value)val1' (Int64Value)val2));  else  	return false;  
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\BranchEmulator.cs,emulate_Blt_Un,The following statement contains a magic number: return emulateBranch (2' Int64Value.compareLt_Un ((Int64Value)val1' (Int64Value)val2));  
Magic Number,de4dot.blocks.cflow,DupBlockCflowDeobfuscator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\DupBlockDeobfuscator.cs,deobfuscate,The following statement contains a magic number: if (block.Instructions.Count != 2)  	return false;  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Starg:  case Code.Starg_S:  	emulate_Starg ((Parameter)instr.Operand);  	break;  case Code.Stloc:  case Code.Stloc_S:  	emulate_Stloc ((Local)instr.Operand);  	break;  case Code.Stloc_0:  	emulate_Stloc (0);  	break;  case Code.Stloc_1:  	emulate_Stloc (1);  	break;  case Code.Stloc_2:  	emulate_Stloc (2);  	break;  case Code.Stloc_3:  	emulate_Stloc (3);  	break;  case Code.Ldarg:  case Code.Ldarg_S:  	valueStack.push (getArg ((Parameter)instr.Operand));  	break;  case Code.Ldarg_0:  	valueStack.push (getArg (0));  	break;  case Code.Ldarg_1:  	valueStack.push (getArg (1));  	break;  case Code.Ldarg_2:  	valueStack.push (getArg (2));  	break;  case Code.Ldarg_3:  	valueStack.push (getArg (3));  	break;  case Code.Ldloc:  case Code.Ldloc_S:  	valueStack.push (getLocal ((Local)instr.Operand));  	break;  case Code.Ldloc_0:  	valueStack.push (getLocal (0));  	break;  case Code.Ldloc_1:  	valueStack.push (getLocal (1));  	break;  case Code.Ldloc_2:  	valueStack.push (getLocal (2));  	break;  case Code.Ldloc_3:  	valueStack.push (getLocal (3));  	break;  case Code.Ldarga:  case Code.Ldarga_S:  	emulate_Ldarga ((Parameter)instr.Operand);  	break;  case Code.Ldloca:  case Code.Ldloca_S:  	emulate_Ldloca ((Local)instr.Operand);  	break;  case Code.Dup:  	valueStack.copyTop ();  	break;  case Code.Ldc_I4:  	valueStack.push (new Int32Value ((int)instr.Operand));  	break;  case Code.Ldc_I4_S:  	valueStack.push (new Int32Value ((sbyte)instr.Operand));  	break;  case Code.Ldc_I8:  	valueStack.push (new Int64Value ((long)instr.Operand));  	break;  case Code.Ldc_R4:  	valueStack.push (new Real8Value ((float)instr.Operand));  	break;  case Code.Ldc_R8:  	valueStack.push (new Real8Value ((double)instr.Operand));  	break;  case Code.Ldc_I4_0:  	valueStack.push (Int32Value.zero);  	break;  case Code.Ldc_I4_1:  	valueStack.push (Int32Value.one);  	break;  case Code.Ldc_I4_2:  	valueStack.push (new Int32Value (2));  	break;  case Code.Ldc_I4_3:  	valueStack.push (new Int32Value (3));  	break;  case Code.Ldc_I4_4:  	valueStack.push (new Int32Value (4));  	break;  case Code.Ldc_I4_5:  	valueStack.push (new Int32Value (5));  	break;  case Code.Ldc_I4_6:  	valueStack.push (new Int32Value (6));  	break;  case Code.Ldc_I4_7:  	valueStack.push (new Int32Value (7));  	break;  case Code.Ldc_I4_8:  	valueStack.push (new Int32Value (8));  	break;  case Code.Ldc_I4_M1:  	valueStack.push (new Int32Value (-1));  	break;  case Code.Ldnull:  	valueStack.push (NullValue.Instance);  	break;  case Code.Ldstr:  	valueStack.push (new StringValue ((string)instr.Operand));  	break;  case Code.Box:  	valueStack.push (new BoxedValue (valueStack.pop ()));  	break;  case Code.Conv_U1:  	emulate_Conv_U1 (instr);  	break;  case Code.Conv_U2:  	emulate_Conv_U2 (instr);  	break;  case Code.Conv_U4:  	emulate_Conv_U4 (instr);  	break;  case Code.Conv_U8:  	emulate_Conv_U8 (instr);  	break;  case Code.Conv_I1:  	emulate_Conv_I1 (instr);  	break;  case Code.Conv_I2:  	emulate_Conv_I2 (instr);  	break;  case Code.Conv_I4:  	emulate_Conv_I4 (instr);  	break;  case Code.Conv_I8:  	emulate_Conv_I8 (instr);  	break;  case Code.Add:  	emulate_Add (instr);  	break;  case Code.Sub:  	emulate_Sub (instr);  	break;  case Code.Mul:  	emulate_Mul (instr);  	break;  case Code.Div:  	emulate_Div (instr);  	break;  case Code.Div_Un:  	emulate_Div_Un (instr);  	break;  case Code.Rem:  	emulate_Rem (instr);  	break;  case Code.Rem_Un:  	emulate_Rem_Un (instr);  	break;  case Code.Neg:  	emulate_Neg (instr);  	break;  case Code.And:  	emulate_And (instr);  	break;  case Code.Or:  	emulate_Or (instr);  	break;  case Code.Xor:  	emulate_Xor (instr);  	break;  case Code.Not:  	emulate_Not (instr);  	break;  case Code.Shl:  	emulate_Shl (instr);  	break;  case Code.Shr:  	emulate_Shr (instr);  	break;  case Code.Shr_Un:  	emulate_Shr_Un (instr);  	break;  case Code.Ceq:  	emulate_Ceq (instr);  	break;  case Code.Cgt:  	emulate_Cgt (instr);  	break;  case Code.Cgt_Un:  	emulate_Cgt_Un (instr);  	break;  case Code.Clt:  	emulate_Clt (instr);  	break;  case Code.Clt_Un:  	emulate_Clt_Un (instr);  	break;  case Code.Unbox_Any:  	emulate_Unbox_Any (instr);  	break;  case Code.Call:  	emulate_Call (instr);  	break;  case Code.Callvirt:  	emulate_Callvirt (instr);  	break;  case Code.Castclass:  	emulate_Castclass (instr);  	break;  case Code.Isinst:  	emulate_Isinst (instr);  	break;  case Code.Add_Ovf:  	emulateIntOps2 ();  	break;  case Code.Add_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Conv_Ovf_I1:  case Code.Conv_Ovf_I1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I2:  case Code.Conv_Ovf_I2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I4:  case Code.Conv_Ovf_I4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I8:  case Code.Conv_Ovf_I8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Conv_Ovf_U1:  case Code.Conv_Ovf_U1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Conv_Ovf_U2:  case Code.Conv_Ovf_U2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Conv_Ovf_U4:  case Code.Conv_Ovf_U4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_U8:  case Code.Conv_Ovf_U8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_I1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I8:  	valueStack.pop (2);  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_U1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldelem_U2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldelem_U4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem:  	valueStack.pop (2);  	valueStack.push (getUnknownValue (instr.Operand as ITypeDefOrRef));  	break;  case Code.Ldind_I1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I8:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldind_U1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldind_U2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldind_U4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldlen:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Sizeof:  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldfld:  	emulate_Ldfld (instr);  	break;  case Code.Ldsfld:  	emulate_Ldsfld (instr);  	break;  case Code.Ldftn:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldsflda:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldtoken:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldvirtftn:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Ldflda:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Unbox:  case Code.Conv_R_Un:  case Code.Conv_R4:  case Code.Conv_R8:  case Code.Arglist:  case Code.Beq:  case Code.Beq_S:  case Code.Bge:  case Code.Bge_S:  case Code.Bge_Un:  case Code.Bge_Un_S:  case Code.Bgt:  case Code.Bgt_S:  case Code.Bgt_Un:  case Code.Bgt_Un_S:  case Code.Ble:  case Code.Ble_S:  case Code.Ble_Un:  case Code.Ble_Un_S:  case Code.Blt:  case Code.Blt_S:  case Code.Blt_Un:  case Code.Blt_Un_S:  case Code.Bne_Un:  case Code.Bne_Un_S:  case Code.Brfalse:  case Code.Brfalse_S:  case Code.Brtrue:  case Code.Brtrue_S:  case Code.Br:  case Code.Br_S:  case Code.Break:  case Code.Calli:  case Code.Ckfinite:  case Code.Constrained:  case Code.Conv_I:  case Code.Conv_Ovf_I:  case Code.Conv_Ovf_I_Un:  case Code.Conv_Ovf_U:  case Code.Conv_Ovf_U_Un:  case Code.Conv_U:  case Code.Cpblk:  case Code.Cpobj:  case Code.Endfilter:  case Code.Endfinally:  case Code.Initblk:  case Code.Initobj:  case Code.Jmp:  case Code.Ldelema:  case Code.Ldelem_I:  case Code.Ldelem_R4:  case Code.Ldelem_R8:  case Code.Ldelem_Ref:  case Code.Ldind_I:  case Code.Ldind_R4:  case Code.Ldind_R8:  case Code.Ldind_Ref:  case Code.Ldobj:  case Code.Leave:  case Code.Leave_S:  case Code.Localloc:  case Code.Mkrefany:  case Code.Newarr:  case Code.Newobj:  case Code.Nop:  case Code.Pop:  case Code.Readonly:  case Code.Refanytype:  case Code.Refanyval:  case Code.Ret:  case Code.Rethrow:  case Code.Stelem:  case Code.Stelem_I:  case Code.Stelem_I1:  case Code.Stelem_I2:  case Code.Stelem_I4:  case Code.Stelem_I8:  case Code.Stelem_R4:  case Code.Stelem_R8:  case Code.Stelem_Ref:  case Code.Stfld:  case Code.Stind_I:  case Code.Stind_I1:  case Code.Stind_I2:  case Code.Stind_I4:  case Code.Stind_I8:  case Code.Stind_R4:  case Code.Stind_R8:  case Code.Stind_Ref:  case Code.Stobj:  case Code.Stsfld:  case Code.Switch:  case Code.Tailcall:  case Code.Throw:  case Code.Unaligned:  case Code.Volatile:  default:  	updateStack (instr);  	break;  }  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Starg:  case Code.Starg_S:  	emulate_Starg ((Parameter)instr.Operand);  	break;  case Code.Stloc:  case Code.Stloc_S:  	emulate_Stloc ((Local)instr.Operand);  	break;  case Code.Stloc_0:  	emulate_Stloc (0);  	break;  case Code.Stloc_1:  	emulate_Stloc (1);  	break;  case Code.Stloc_2:  	emulate_Stloc (2);  	break;  case Code.Stloc_3:  	emulate_Stloc (3);  	break;  case Code.Ldarg:  case Code.Ldarg_S:  	valueStack.push (getArg ((Parameter)instr.Operand));  	break;  case Code.Ldarg_0:  	valueStack.push (getArg (0));  	break;  case Code.Ldarg_1:  	valueStack.push (getArg (1));  	break;  case Code.Ldarg_2:  	valueStack.push (getArg (2));  	break;  case Code.Ldarg_3:  	valueStack.push (getArg (3));  	break;  case Code.Ldloc:  case Code.Ldloc_S:  	valueStack.push (getLocal ((Local)instr.Operand));  	break;  case Code.Ldloc_0:  	valueStack.push (getLocal (0));  	break;  case Code.Ldloc_1:  	valueStack.push (getLocal (1));  	break;  case Code.Ldloc_2:  	valueStack.push (getLocal (2));  	break;  case Code.Ldloc_3:  	valueStack.push (getLocal (3));  	break;  case Code.Ldarga:  case Code.Ldarga_S:  	emulate_Ldarga ((Parameter)instr.Operand);  	break;  case Code.Ldloca:  case Code.Ldloca_S:  	emulate_Ldloca ((Local)instr.Operand);  	break;  case Code.Dup:  	valueStack.copyTop ();  	break;  case Code.Ldc_I4:  	valueStack.push (new Int32Value ((int)instr.Operand));  	break;  case Code.Ldc_I4_S:  	valueStack.push (new Int32Value ((sbyte)instr.Operand));  	break;  case Code.Ldc_I8:  	valueStack.push (new Int64Value ((long)instr.Operand));  	break;  case Code.Ldc_R4:  	valueStack.push (new Real8Value ((float)instr.Operand));  	break;  case Code.Ldc_R8:  	valueStack.push (new Real8Value ((double)instr.Operand));  	break;  case Code.Ldc_I4_0:  	valueStack.push (Int32Value.zero);  	break;  case Code.Ldc_I4_1:  	valueStack.push (Int32Value.one);  	break;  case Code.Ldc_I4_2:  	valueStack.push (new Int32Value (2));  	break;  case Code.Ldc_I4_3:  	valueStack.push (new Int32Value (3));  	break;  case Code.Ldc_I4_4:  	valueStack.push (new Int32Value (4));  	break;  case Code.Ldc_I4_5:  	valueStack.push (new Int32Value (5));  	break;  case Code.Ldc_I4_6:  	valueStack.push (new Int32Value (6));  	break;  case Code.Ldc_I4_7:  	valueStack.push (new Int32Value (7));  	break;  case Code.Ldc_I4_8:  	valueStack.push (new Int32Value (8));  	break;  case Code.Ldc_I4_M1:  	valueStack.push (new Int32Value (-1));  	break;  case Code.Ldnull:  	valueStack.push (NullValue.Instance);  	break;  case Code.Ldstr:  	valueStack.push (new StringValue ((string)instr.Operand));  	break;  case Code.Box:  	valueStack.push (new BoxedValue (valueStack.pop ()));  	break;  case Code.Conv_U1:  	emulate_Conv_U1 (instr);  	break;  case Code.Conv_U2:  	emulate_Conv_U2 (instr);  	break;  case Code.Conv_U4:  	emulate_Conv_U4 (instr);  	break;  case Code.Conv_U8:  	emulate_Conv_U8 (instr);  	break;  case Code.Conv_I1:  	emulate_Conv_I1 (instr);  	break;  case Code.Conv_I2:  	emulate_Conv_I2 (instr);  	break;  case Code.Conv_I4:  	emulate_Conv_I4 (instr);  	break;  case Code.Conv_I8:  	emulate_Conv_I8 (instr);  	break;  case Code.Add:  	emulate_Add (instr);  	break;  case Code.Sub:  	emulate_Sub (instr);  	break;  case Code.Mul:  	emulate_Mul (instr);  	break;  case Code.Div:  	emulate_Div (instr);  	break;  case Code.Div_Un:  	emulate_Div_Un (instr);  	break;  case Code.Rem:  	emulate_Rem (instr);  	break;  case Code.Rem_Un:  	emulate_Rem_Un (instr);  	break;  case Code.Neg:  	emulate_Neg (instr);  	break;  case Code.And:  	emulate_And (instr);  	break;  case Code.Or:  	emulate_Or (instr);  	break;  case Code.Xor:  	emulate_Xor (instr);  	break;  case Code.Not:  	emulate_Not (instr);  	break;  case Code.Shl:  	emulate_Shl (instr);  	break;  case Code.Shr:  	emulate_Shr (instr);  	break;  case Code.Shr_Un:  	emulate_Shr_Un (instr);  	break;  case Code.Ceq:  	emulate_Ceq (instr);  	break;  case Code.Cgt:  	emulate_Cgt (instr);  	break;  case Code.Cgt_Un:  	emulate_Cgt_Un (instr);  	break;  case Code.Clt:  	emulate_Clt (instr);  	break;  case Code.Clt_Un:  	emulate_Clt_Un (instr);  	break;  case Code.Unbox_Any:  	emulate_Unbox_Any (instr);  	break;  case Code.Call:  	emulate_Call (instr);  	break;  case Code.Callvirt:  	emulate_Callvirt (instr);  	break;  case Code.Castclass:  	emulate_Castclass (instr);  	break;  case Code.Isinst:  	emulate_Isinst (instr);  	break;  case Code.Add_Ovf:  	emulateIntOps2 ();  	break;  case Code.Add_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Conv_Ovf_I1:  case Code.Conv_Ovf_I1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I2:  case Code.Conv_Ovf_I2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I4:  case Code.Conv_Ovf_I4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I8:  case Code.Conv_Ovf_I8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Conv_Ovf_U1:  case Code.Conv_Ovf_U1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Conv_Ovf_U2:  case Code.Conv_Ovf_U2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Conv_Ovf_U4:  case Code.Conv_Ovf_U4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_U8:  case Code.Conv_Ovf_U8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_I1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I8:  	valueStack.pop (2);  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_U1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldelem_U2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldelem_U4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem:  	valueStack.pop (2);  	valueStack.push (getUnknownValue (instr.Operand as ITypeDefOrRef));  	break;  case Code.Ldind_I1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I8:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldind_U1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldind_U2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldind_U4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldlen:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Sizeof:  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldfld:  	emulate_Ldfld (instr);  	break;  case Code.Ldsfld:  	emulate_Ldsfld (instr);  	break;  case Code.Ldftn:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldsflda:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldtoken:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldvirtftn:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Ldflda:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Unbox:  case Code.Conv_R_Un:  case Code.Conv_R4:  case Code.Conv_R8:  case Code.Arglist:  case Code.Beq:  case Code.Beq_S:  case Code.Bge:  case Code.Bge_S:  case Code.Bge_Un:  case Code.Bge_Un_S:  case Code.Bgt:  case Code.Bgt_S:  case Code.Bgt_Un:  case Code.Bgt_Un_S:  case Code.Ble:  case Code.Ble_S:  case Code.Ble_Un:  case Code.Ble_Un_S:  case Code.Blt:  case Code.Blt_S:  case Code.Blt_Un:  case Code.Blt_Un_S:  case Code.Bne_Un:  case Code.Bne_Un_S:  case Code.Brfalse:  case Code.Brfalse_S:  case Code.Brtrue:  case Code.Brtrue_S:  case Code.Br:  case Code.Br_S:  case Code.Break:  case Code.Calli:  case Code.Ckfinite:  case Code.Constrained:  case Code.Conv_I:  case Code.Conv_Ovf_I:  case Code.Conv_Ovf_I_Un:  case Code.Conv_Ovf_U:  case Code.Conv_Ovf_U_Un:  case Code.Conv_U:  case Code.Cpblk:  case Code.Cpobj:  case Code.Endfilter:  case Code.Endfinally:  case Code.Initblk:  case Code.Initobj:  case Code.Jmp:  case Code.Ldelema:  case Code.Ldelem_I:  case Code.Ldelem_R4:  case Code.Ldelem_R8:  case Code.Ldelem_Ref:  case Code.Ldind_I:  case Code.Ldind_R4:  case Code.Ldind_R8:  case Code.Ldind_Ref:  case Code.Ldobj:  case Code.Leave:  case Code.Leave_S:  case Code.Localloc:  case Code.Mkrefany:  case Code.Newarr:  case Code.Newobj:  case Code.Nop:  case Code.Pop:  case Code.Readonly:  case Code.Refanytype:  case Code.Refanyval:  case Code.Ret:  case Code.Rethrow:  case Code.Stelem:  case Code.Stelem_I:  case Code.Stelem_I1:  case Code.Stelem_I2:  case Code.Stelem_I4:  case Code.Stelem_I8:  case Code.Stelem_R4:  case Code.Stelem_R8:  case Code.Stelem_Ref:  case Code.Stfld:  case Code.Stind_I:  case Code.Stind_I1:  case Code.Stind_I2:  case Code.Stind_I4:  case Code.Stind_I8:  case Code.Stind_R4:  case Code.Stind_R8:  case Code.Stind_Ref:  case Code.Stobj:  case Code.Stsfld:  case Code.Switch:  case Code.Tailcall:  case Code.Throw:  case Code.Unaligned:  case Code.Volatile:  default:  	updateStack (instr);  	break;  }  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Starg:  case Code.Starg_S:  	emulate_Starg ((Parameter)instr.Operand);  	break;  case Code.Stloc:  case Code.Stloc_S:  	emulate_Stloc ((Local)instr.Operand);  	break;  case Code.Stloc_0:  	emulate_Stloc (0);  	break;  case Code.Stloc_1:  	emulate_Stloc (1);  	break;  case Code.Stloc_2:  	emulate_Stloc (2);  	break;  case Code.Stloc_3:  	emulate_Stloc (3);  	break;  case Code.Ldarg:  case Code.Ldarg_S:  	valueStack.push (getArg ((Parameter)instr.Operand));  	break;  case Code.Ldarg_0:  	valueStack.push (getArg (0));  	break;  case Code.Ldarg_1:  	valueStack.push (getArg (1));  	break;  case Code.Ldarg_2:  	valueStack.push (getArg (2));  	break;  case Code.Ldarg_3:  	valueStack.push (getArg (3));  	break;  case Code.Ldloc:  case Code.Ldloc_S:  	valueStack.push (getLocal ((Local)instr.Operand));  	break;  case Code.Ldloc_0:  	valueStack.push (getLocal (0));  	break;  case Code.Ldloc_1:  	valueStack.push (getLocal (1));  	break;  case Code.Ldloc_2:  	valueStack.push (getLocal (2));  	break;  case Code.Ldloc_3:  	valueStack.push (getLocal (3));  	break;  case Code.Ldarga:  case Code.Ldarga_S:  	emulate_Ldarga ((Parameter)instr.Operand);  	break;  case Code.Ldloca:  case Code.Ldloca_S:  	emulate_Ldloca ((Local)instr.Operand);  	break;  case Code.Dup:  	valueStack.copyTop ();  	break;  case Code.Ldc_I4:  	valueStack.push (new Int32Value ((int)instr.Operand));  	break;  case Code.Ldc_I4_S:  	valueStack.push (new Int32Value ((sbyte)instr.Operand));  	break;  case Code.Ldc_I8:  	valueStack.push (new Int64Value ((long)instr.Operand));  	break;  case Code.Ldc_R4:  	valueStack.push (new Real8Value ((float)instr.Operand));  	break;  case Code.Ldc_R8:  	valueStack.push (new Real8Value ((double)instr.Operand));  	break;  case Code.Ldc_I4_0:  	valueStack.push (Int32Value.zero);  	break;  case Code.Ldc_I4_1:  	valueStack.push (Int32Value.one);  	break;  case Code.Ldc_I4_2:  	valueStack.push (new Int32Value (2));  	break;  case Code.Ldc_I4_3:  	valueStack.push (new Int32Value (3));  	break;  case Code.Ldc_I4_4:  	valueStack.push (new Int32Value (4));  	break;  case Code.Ldc_I4_5:  	valueStack.push (new Int32Value (5));  	break;  case Code.Ldc_I4_6:  	valueStack.push (new Int32Value (6));  	break;  case Code.Ldc_I4_7:  	valueStack.push (new Int32Value (7));  	break;  case Code.Ldc_I4_8:  	valueStack.push (new Int32Value (8));  	break;  case Code.Ldc_I4_M1:  	valueStack.push (new Int32Value (-1));  	break;  case Code.Ldnull:  	valueStack.push (NullValue.Instance);  	break;  case Code.Ldstr:  	valueStack.push (new StringValue ((string)instr.Operand));  	break;  case Code.Box:  	valueStack.push (new BoxedValue (valueStack.pop ()));  	break;  case Code.Conv_U1:  	emulate_Conv_U1 (instr);  	break;  case Code.Conv_U2:  	emulate_Conv_U2 (instr);  	break;  case Code.Conv_U4:  	emulate_Conv_U4 (instr);  	break;  case Code.Conv_U8:  	emulate_Conv_U8 (instr);  	break;  case Code.Conv_I1:  	emulate_Conv_I1 (instr);  	break;  case Code.Conv_I2:  	emulate_Conv_I2 (instr);  	break;  case Code.Conv_I4:  	emulate_Conv_I4 (instr);  	break;  case Code.Conv_I8:  	emulate_Conv_I8 (instr);  	break;  case Code.Add:  	emulate_Add (instr);  	break;  case Code.Sub:  	emulate_Sub (instr);  	break;  case Code.Mul:  	emulate_Mul (instr);  	break;  case Code.Div:  	emulate_Div (instr);  	break;  case Code.Div_Un:  	emulate_Div_Un (instr);  	break;  case Code.Rem:  	emulate_Rem (instr);  	break;  case Code.Rem_Un:  	emulate_Rem_Un (instr);  	break;  case Code.Neg:  	emulate_Neg (instr);  	break;  case Code.And:  	emulate_And (instr);  	break;  case Code.Or:  	emulate_Or (instr);  	break;  case Code.Xor:  	emulate_Xor (instr);  	break;  case Code.Not:  	emulate_Not (instr);  	break;  case Code.Shl:  	emulate_Shl (instr);  	break;  case Code.Shr:  	emulate_Shr (instr);  	break;  case Code.Shr_Un:  	emulate_Shr_Un (instr);  	break;  case Code.Ceq:  	emulate_Ceq (instr);  	break;  case Code.Cgt:  	emulate_Cgt (instr);  	break;  case Code.Cgt_Un:  	emulate_Cgt_Un (instr);  	break;  case Code.Clt:  	emulate_Clt (instr);  	break;  case Code.Clt_Un:  	emulate_Clt_Un (instr);  	break;  case Code.Unbox_Any:  	emulate_Unbox_Any (instr);  	break;  case Code.Call:  	emulate_Call (instr);  	break;  case Code.Callvirt:  	emulate_Callvirt (instr);  	break;  case Code.Castclass:  	emulate_Castclass (instr);  	break;  case Code.Isinst:  	emulate_Isinst (instr);  	break;  case Code.Add_Ovf:  	emulateIntOps2 ();  	break;  case Code.Add_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Conv_Ovf_I1:  case Code.Conv_Ovf_I1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I2:  case Code.Conv_Ovf_I2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I4:  case Code.Conv_Ovf_I4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I8:  case Code.Conv_Ovf_I8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Conv_Ovf_U1:  case Code.Conv_Ovf_U1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Conv_Ovf_U2:  case Code.Conv_Ovf_U2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Conv_Ovf_U4:  case Code.Conv_Ovf_U4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_U8:  case Code.Conv_Ovf_U8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_I1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I8:  	valueStack.pop (2);  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_U1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldelem_U2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldelem_U4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem:  	valueStack.pop (2);  	valueStack.push (getUnknownValue (instr.Operand as ITypeDefOrRef));  	break;  case Code.Ldind_I1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I8:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldind_U1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldind_U2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldind_U4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldlen:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Sizeof:  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldfld:  	emulate_Ldfld (instr);  	break;  case Code.Ldsfld:  	emulate_Ldsfld (instr);  	break;  case Code.Ldftn:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldsflda:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldtoken:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldvirtftn:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Ldflda:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Unbox:  case Code.Conv_R_Un:  case Code.Conv_R4:  case Code.Conv_R8:  case Code.Arglist:  case Code.Beq:  case Code.Beq_S:  case Code.Bge:  case Code.Bge_S:  case Code.Bge_Un:  case Code.Bge_Un_S:  case Code.Bgt:  case Code.Bgt_S:  case Code.Bgt_Un:  case Code.Bgt_Un_S:  case Code.Ble:  case Code.Ble_S:  case Code.Ble_Un:  case Code.Ble_Un_S:  case Code.Blt:  case Code.Blt_S:  case Code.Blt_Un:  case Code.Blt_Un_S:  case Code.Bne_Un:  case Code.Bne_Un_S:  case Code.Brfalse:  case Code.Brfalse_S:  case Code.Brtrue:  case Code.Brtrue_S:  case Code.Br:  case Code.Br_S:  case Code.Break:  case Code.Calli:  case Code.Ckfinite:  case Code.Constrained:  case Code.Conv_I:  case Code.Conv_Ovf_I:  case Code.Conv_Ovf_I_Un:  case Code.Conv_Ovf_U:  case Code.Conv_Ovf_U_Un:  case Code.Conv_U:  case Code.Cpblk:  case Code.Cpobj:  case Code.Endfilter:  case Code.Endfinally:  case Code.Initblk:  case Code.Initobj:  case Code.Jmp:  case Code.Ldelema:  case Code.Ldelem_I:  case Code.Ldelem_R4:  case Code.Ldelem_R8:  case Code.Ldelem_Ref:  case Code.Ldind_I:  case Code.Ldind_R4:  case Code.Ldind_R8:  case Code.Ldind_Ref:  case Code.Ldobj:  case Code.Leave:  case Code.Leave_S:  case Code.Localloc:  case Code.Mkrefany:  case Code.Newarr:  case Code.Newobj:  case Code.Nop:  case Code.Pop:  case Code.Readonly:  case Code.Refanytype:  case Code.Refanyval:  case Code.Ret:  case Code.Rethrow:  case Code.Stelem:  case Code.Stelem_I:  case Code.Stelem_I1:  case Code.Stelem_I2:  case Code.Stelem_I4:  case Code.Stelem_I8:  case Code.Stelem_R4:  case Code.Stelem_R8:  case Code.Stelem_Ref:  case Code.Stfld:  case Code.Stind_I:  case Code.Stind_I1:  case Code.Stind_I2:  case Code.Stind_I4:  case Code.Stind_I8:  case Code.Stind_R4:  case Code.Stind_R8:  case Code.Stind_Ref:  case Code.Stobj:  case Code.Stsfld:  case Code.Switch:  case Code.Tailcall:  case Code.Throw:  case Code.Unaligned:  case Code.Volatile:  default:  	updateStack (instr);  	break;  }  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Starg:  case Code.Starg_S:  	emulate_Starg ((Parameter)instr.Operand);  	break;  case Code.Stloc:  case Code.Stloc_S:  	emulate_Stloc ((Local)instr.Operand);  	break;  case Code.Stloc_0:  	emulate_Stloc (0);  	break;  case Code.Stloc_1:  	emulate_Stloc (1);  	break;  case Code.Stloc_2:  	emulate_Stloc (2);  	break;  case Code.Stloc_3:  	emulate_Stloc (3);  	break;  case Code.Ldarg:  case Code.Ldarg_S:  	valueStack.push (getArg ((Parameter)instr.Operand));  	break;  case Code.Ldarg_0:  	valueStack.push (getArg (0));  	break;  case Code.Ldarg_1:  	valueStack.push (getArg (1));  	break;  case Code.Ldarg_2:  	valueStack.push (getArg (2));  	break;  case Code.Ldarg_3:  	valueStack.push (getArg (3));  	break;  case Code.Ldloc:  case Code.Ldloc_S:  	valueStack.push (getLocal ((Local)instr.Operand));  	break;  case Code.Ldloc_0:  	valueStack.push (getLocal (0));  	break;  case Code.Ldloc_1:  	valueStack.push (getLocal (1));  	break;  case Code.Ldloc_2:  	valueStack.push (getLocal (2));  	break;  case Code.Ldloc_3:  	valueStack.push (getLocal (3));  	break;  case Code.Ldarga:  case Code.Ldarga_S:  	emulate_Ldarga ((Parameter)instr.Operand);  	break;  case Code.Ldloca:  case Code.Ldloca_S:  	emulate_Ldloca ((Local)instr.Operand);  	break;  case Code.Dup:  	valueStack.copyTop ();  	break;  case Code.Ldc_I4:  	valueStack.push (new Int32Value ((int)instr.Operand));  	break;  case Code.Ldc_I4_S:  	valueStack.push (new Int32Value ((sbyte)instr.Operand));  	break;  case Code.Ldc_I8:  	valueStack.push (new Int64Value ((long)instr.Operand));  	break;  case Code.Ldc_R4:  	valueStack.push (new Real8Value ((float)instr.Operand));  	break;  case Code.Ldc_R8:  	valueStack.push (new Real8Value ((double)instr.Operand));  	break;  case Code.Ldc_I4_0:  	valueStack.push (Int32Value.zero);  	break;  case Code.Ldc_I4_1:  	valueStack.push (Int32Value.one);  	break;  case Code.Ldc_I4_2:  	valueStack.push (new Int32Value (2));  	break;  case Code.Ldc_I4_3:  	valueStack.push (new Int32Value (3));  	break;  case Code.Ldc_I4_4:  	valueStack.push (new Int32Value (4));  	break;  case Code.Ldc_I4_5:  	valueStack.push (new Int32Value (5));  	break;  case Code.Ldc_I4_6:  	valueStack.push (new Int32Value (6));  	break;  case Code.Ldc_I4_7:  	valueStack.push (new Int32Value (7));  	break;  case Code.Ldc_I4_8:  	valueStack.push (new Int32Value (8));  	break;  case Code.Ldc_I4_M1:  	valueStack.push (new Int32Value (-1));  	break;  case Code.Ldnull:  	valueStack.push (NullValue.Instance);  	break;  case Code.Ldstr:  	valueStack.push (new StringValue ((string)instr.Operand));  	break;  case Code.Box:  	valueStack.push (new BoxedValue (valueStack.pop ()));  	break;  case Code.Conv_U1:  	emulate_Conv_U1 (instr);  	break;  case Code.Conv_U2:  	emulate_Conv_U2 (instr);  	break;  case Code.Conv_U4:  	emulate_Conv_U4 (instr);  	break;  case Code.Conv_U8:  	emulate_Conv_U8 (instr);  	break;  case Code.Conv_I1:  	emulate_Conv_I1 (instr);  	break;  case Code.Conv_I2:  	emulate_Conv_I2 (instr);  	break;  case Code.Conv_I4:  	emulate_Conv_I4 (instr);  	break;  case Code.Conv_I8:  	emulate_Conv_I8 (instr);  	break;  case Code.Add:  	emulate_Add (instr);  	break;  case Code.Sub:  	emulate_Sub (instr);  	break;  case Code.Mul:  	emulate_Mul (instr);  	break;  case Code.Div:  	emulate_Div (instr);  	break;  case Code.Div_Un:  	emulate_Div_Un (instr);  	break;  case Code.Rem:  	emulate_Rem (instr);  	break;  case Code.Rem_Un:  	emulate_Rem_Un (instr);  	break;  case Code.Neg:  	emulate_Neg (instr);  	break;  case Code.And:  	emulate_And (instr);  	break;  case Code.Or:  	emulate_Or (instr);  	break;  case Code.Xor:  	emulate_Xor (instr);  	break;  case Code.Not:  	emulate_Not (instr);  	break;  case Code.Shl:  	emulate_Shl (instr);  	break;  case Code.Shr:  	emulate_Shr (instr);  	break;  case Code.Shr_Un:  	emulate_Shr_Un (instr);  	break;  case Code.Ceq:  	emulate_Ceq (instr);  	break;  case Code.Cgt:  	emulate_Cgt (instr);  	break;  case Code.Cgt_Un:  	emulate_Cgt_Un (instr);  	break;  case Code.Clt:  	emulate_Clt (instr);  	break;  case Code.Clt_Un:  	emulate_Clt_Un (instr);  	break;  case Code.Unbox_Any:  	emulate_Unbox_Any (instr);  	break;  case Code.Call:  	emulate_Call (instr);  	break;  case Code.Callvirt:  	emulate_Callvirt (instr);  	break;  case Code.Castclass:  	emulate_Castclass (instr);  	break;  case Code.Isinst:  	emulate_Isinst (instr);  	break;  case Code.Add_Ovf:  	emulateIntOps2 ();  	break;  case Code.Add_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Conv_Ovf_I1:  case Code.Conv_Ovf_I1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I2:  case Code.Conv_Ovf_I2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I4:  case Code.Conv_Ovf_I4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I8:  case Code.Conv_Ovf_I8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Conv_Ovf_U1:  case Code.Conv_Ovf_U1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Conv_Ovf_U2:  case Code.Conv_Ovf_U2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Conv_Ovf_U4:  case Code.Conv_Ovf_U4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_U8:  case Code.Conv_Ovf_U8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_I1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I8:  	valueStack.pop (2);  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_U1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldelem_U2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldelem_U4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem:  	valueStack.pop (2);  	valueStack.push (getUnknownValue (instr.Operand as ITypeDefOrRef));  	break;  case Code.Ldind_I1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I8:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldind_U1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldind_U2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldind_U4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldlen:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Sizeof:  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldfld:  	emulate_Ldfld (instr);  	break;  case Code.Ldsfld:  	emulate_Ldsfld (instr);  	break;  case Code.Ldftn:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldsflda:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldtoken:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldvirtftn:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Ldflda:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Unbox:  case Code.Conv_R_Un:  case Code.Conv_R4:  case Code.Conv_R8:  case Code.Arglist:  case Code.Beq:  case Code.Beq_S:  case Code.Bge:  case Code.Bge_S:  case Code.Bge_Un:  case Code.Bge_Un_S:  case Code.Bgt:  case Code.Bgt_S:  case Code.Bgt_Un:  case Code.Bgt_Un_S:  case Code.Ble:  case Code.Ble_S:  case Code.Ble_Un:  case Code.Ble_Un_S:  case Code.Blt:  case Code.Blt_S:  case Code.Blt_Un:  case Code.Blt_Un_S:  case Code.Bne_Un:  case Code.Bne_Un_S:  case Code.Brfalse:  case Code.Brfalse_S:  case Code.Brtrue:  case Code.Brtrue_S:  case Code.Br:  case Code.Br_S:  case Code.Break:  case Code.Calli:  case Code.Ckfinite:  case Code.Constrained:  case Code.Conv_I:  case Code.Conv_Ovf_I:  case Code.Conv_Ovf_I_Un:  case Code.Conv_Ovf_U:  case Code.Conv_Ovf_U_Un:  case Code.Conv_U:  case Code.Cpblk:  case Code.Cpobj:  case Code.Endfilter:  case Code.Endfinally:  case Code.Initblk:  case Code.Initobj:  case Code.Jmp:  case Code.Ldelema:  case Code.Ldelem_I:  case Code.Ldelem_R4:  case Code.Ldelem_R8:  case Code.Ldelem_Ref:  case Code.Ldind_I:  case Code.Ldind_R4:  case Code.Ldind_R8:  case Code.Ldind_Ref:  case Code.Ldobj:  case Code.Leave:  case Code.Leave_S:  case Code.Localloc:  case Code.Mkrefany:  case Code.Newarr:  case Code.Newobj:  case Code.Nop:  case Code.Pop:  case Code.Readonly:  case Code.Refanytype:  case Code.Refanyval:  case Code.Ret:  case Code.Rethrow:  case Code.Stelem:  case Code.Stelem_I:  case Code.Stelem_I1:  case Code.Stelem_I2:  case Code.Stelem_I4:  case Code.Stelem_I8:  case Code.Stelem_R4:  case Code.Stelem_R8:  case Code.Stelem_Ref:  case Code.Stfld:  case Code.Stind_I:  case Code.Stind_I1:  case Code.Stind_I2:  case Code.Stind_I4:  case Code.Stind_I8:  case Code.Stind_R4:  case Code.Stind_R8:  case Code.Stind_Ref:  case Code.Stobj:  case Code.Stsfld:  case Code.Switch:  case Code.Tailcall:  case Code.Throw:  case Code.Unaligned:  case Code.Volatile:  default:  	updateStack (instr);  	break;  }  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Starg:  case Code.Starg_S:  	emulate_Starg ((Parameter)instr.Operand);  	break;  case Code.Stloc:  case Code.Stloc_S:  	emulate_Stloc ((Local)instr.Operand);  	break;  case Code.Stloc_0:  	emulate_Stloc (0);  	break;  case Code.Stloc_1:  	emulate_Stloc (1);  	break;  case Code.Stloc_2:  	emulate_Stloc (2);  	break;  case Code.Stloc_3:  	emulate_Stloc (3);  	break;  case Code.Ldarg:  case Code.Ldarg_S:  	valueStack.push (getArg ((Parameter)instr.Operand));  	break;  case Code.Ldarg_0:  	valueStack.push (getArg (0));  	break;  case Code.Ldarg_1:  	valueStack.push (getArg (1));  	break;  case Code.Ldarg_2:  	valueStack.push (getArg (2));  	break;  case Code.Ldarg_3:  	valueStack.push (getArg (3));  	break;  case Code.Ldloc:  case Code.Ldloc_S:  	valueStack.push (getLocal ((Local)instr.Operand));  	break;  case Code.Ldloc_0:  	valueStack.push (getLocal (0));  	break;  case Code.Ldloc_1:  	valueStack.push (getLocal (1));  	break;  case Code.Ldloc_2:  	valueStack.push (getLocal (2));  	break;  case Code.Ldloc_3:  	valueStack.push (getLocal (3));  	break;  case Code.Ldarga:  case Code.Ldarga_S:  	emulate_Ldarga ((Parameter)instr.Operand);  	break;  case Code.Ldloca:  case Code.Ldloca_S:  	emulate_Ldloca ((Local)instr.Operand);  	break;  case Code.Dup:  	valueStack.copyTop ();  	break;  case Code.Ldc_I4:  	valueStack.push (new Int32Value ((int)instr.Operand));  	break;  case Code.Ldc_I4_S:  	valueStack.push (new Int32Value ((sbyte)instr.Operand));  	break;  case Code.Ldc_I8:  	valueStack.push (new Int64Value ((long)instr.Operand));  	break;  case Code.Ldc_R4:  	valueStack.push (new Real8Value ((float)instr.Operand));  	break;  case Code.Ldc_R8:  	valueStack.push (new Real8Value ((double)instr.Operand));  	break;  case Code.Ldc_I4_0:  	valueStack.push (Int32Value.zero);  	break;  case Code.Ldc_I4_1:  	valueStack.push (Int32Value.one);  	break;  case Code.Ldc_I4_2:  	valueStack.push (new Int32Value (2));  	break;  case Code.Ldc_I4_3:  	valueStack.push (new Int32Value (3));  	break;  case Code.Ldc_I4_4:  	valueStack.push (new Int32Value (4));  	break;  case Code.Ldc_I4_5:  	valueStack.push (new Int32Value (5));  	break;  case Code.Ldc_I4_6:  	valueStack.push (new Int32Value (6));  	break;  case Code.Ldc_I4_7:  	valueStack.push (new Int32Value (7));  	break;  case Code.Ldc_I4_8:  	valueStack.push (new Int32Value (8));  	break;  case Code.Ldc_I4_M1:  	valueStack.push (new Int32Value (-1));  	break;  case Code.Ldnull:  	valueStack.push (NullValue.Instance);  	break;  case Code.Ldstr:  	valueStack.push (new StringValue ((string)instr.Operand));  	break;  case Code.Box:  	valueStack.push (new BoxedValue (valueStack.pop ()));  	break;  case Code.Conv_U1:  	emulate_Conv_U1 (instr);  	break;  case Code.Conv_U2:  	emulate_Conv_U2 (instr);  	break;  case Code.Conv_U4:  	emulate_Conv_U4 (instr);  	break;  case Code.Conv_U8:  	emulate_Conv_U8 (instr);  	break;  case Code.Conv_I1:  	emulate_Conv_I1 (instr);  	break;  case Code.Conv_I2:  	emulate_Conv_I2 (instr);  	break;  case Code.Conv_I4:  	emulate_Conv_I4 (instr);  	break;  case Code.Conv_I8:  	emulate_Conv_I8 (instr);  	break;  case Code.Add:  	emulate_Add (instr);  	break;  case Code.Sub:  	emulate_Sub (instr);  	break;  case Code.Mul:  	emulate_Mul (instr);  	break;  case Code.Div:  	emulate_Div (instr);  	break;  case Code.Div_Un:  	emulate_Div_Un (instr);  	break;  case Code.Rem:  	emulate_Rem (instr);  	break;  case Code.Rem_Un:  	emulate_Rem_Un (instr);  	break;  case Code.Neg:  	emulate_Neg (instr);  	break;  case Code.And:  	emulate_And (instr);  	break;  case Code.Or:  	emulate_Or (instr);  	break;  case Code.Xor:  	emulate_Xor (instr);  	break;  case Code.Not:  	emulate_Not (instr);  	break;  case Code.Shl:  	emulate_Shl (instr);  	break;  case Code.Shr:  	emulate_Shr (instr);  	break;  case Code.Shr_Un:  	emulate_Shr_Un (instr);  	break;  case Code.Ceq:  	emulate_Ceq (instr);  	break;  case Code.Cgt:  	emulate_Cgt (instr);  	break;  case Code.Cgt_Un:  	emulate_Cgt_Un (instr);  	break;  case Code.Clt:  	emulate_Clt (instr);  	break;  case Code.Clt_Un:  	emulate_Clt_Un (instr);  	break;  case Code.Unbox_Any:  	emulate_Unbox_Any (instr);  	break;  case Code.Call:  	emulate_Call (instr);  	break;  case Code.Callvirt:  	emulate_Callvirt (instr);  	break;  case Code.Castclass:  	emulate_Castclass (instr);  	break;  case Code.Isinst:  	emulate_Isinst (instr);  	break;  case Code.Add_Ovf:  	emulateIntOps2 ();  	break;  case Code.Add_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Conv_Ovf_I1:  case Code.Conv_Ovf_I1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I2:  case Code.Conv_Ovf_I2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I4:  case Code.Conv_Ovf_I4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I8:  case Code.Conv_Ovf_I8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Conv_Ovf_U1:  case Code.Conv_Ovf_U1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Conv_Ovf_U2:  case Code.Conv_Ovf_U2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Conv_Ovf_U4:  case Code.Conv_Ovf_U4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_U8:  case Code.Conv_Ovf_U8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_I1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I8:  	valueStack.pop (2);  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_U1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldelem_U2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldelem_U4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem:  	valueStack.pop (2);  	valueStack.push (getUnknownValue (instr.Operand as ITypeDefOrRef));  	break;  case Code.Ldind_I1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I8:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldind_U1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldind_U2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldind_U4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldlen:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Sizeof:  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldfld:  	emulate_Ldfld (instr);  	break;  case Code.Ldsfld:  	emulate_Ldsfld (instr);  	break;  case Code.Ldftn:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldsflda:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldtoken:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldvirtftn:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Ldflda:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Unbox:  case Code.Conv_R_Un:  case Code.Conv_R4:  case Code.Conv_R8:  case Code.Arglist:  case Code.Beq:  case Code.Beq_S:  case Code.Bge:  case Code.Bge_S:  case Code.Bge_Un:  case Code.Bge_Un_S:  case Code.Bgt:  case Code.Bgt_S:  case Code.Bgt_Un:  case Code.Bgt_Un_S:  case Code.Ble:  case Code.Ble_S:  case Code.Ble_Un:  case Code.Ble_Un_S:  case Code.Blt:  case Code.Blt_S:  case Code.Blt_Un:  case Code.Blt_Un_S:  case Code.Bne_Un:  case Code.Bne_Un_S:  case Code.Brfalse:  case Code.Brfalse_S:  case Code.Brtrue:  case Code.Brtrue_S:  case Code.Br:  case Code.Br_S:  case Code.Break:  case Code.Calli:  case Code.Ckfinite:  case Code.Constrained:  case Code.Conv_I:  case Code.Conv_Ovf_I:  case Code.Conv_Ovf_I_Un:  case Code.Conv_Ovf_U:  case Code.Conv_Ovf_U_Un:  case Code.Conv_U:  case Code.Cpblk:  case Code.Cpobj:  case Code.Endfilter:  case Code.Endfinally:  case Code.Initblk:  case Code.Initobj:  case Code.Jmp:  case Code.Ldelema:  case Code.Ldelem_I:  case Code.Ldelem_R4:  case Code.Ldelem_R8:  case Code.Ldelem_Ref:  case Code.Ldind_I:  case Code.Ldind_R4:  case Code.Ldind_R8:  case Code.Ldind_Ref:  case Code.Ldobj:  case Code.Leave:  case Code.Leave_S:  case Code.Localloc:  case Code.Mkrefany:  case Code.Newarr:  case Code.Newobj:  case Code.Nop:  case Code.Pop:  case Code.Readonly:  case Code.Refanytype:  case Code.Refanyval:  case Code.Ret:  case Code.Rethrow:  case Code.Stelem:  case Code.Stelem_I:  case Code.Stelem_I1:  case Code.Stelem_I2:  case Code.Stelem_I4:  case Code.Stelem_I8:  case Code.Stelem_R4:  case Code.Stelem_R8:  case Code.Stelem_Ref:  case Code.Stfld:  case Code.Stind_I:  case Code.Stind_I1:  case Code.Stind_I2:  case Code.Stind_I4:  case Code.Stind_I8:  case Code.Stind_R4:  case Code.Stind_R8:  case Code.Stind_Ref:  case Code.Stobj:  case Code.Stsfld:  case Code.Switch:  case Code.Tailcall:  case Code.Throw:  case Code.Unaligned:  case Code.Volatile:  default:  	updateStack (instr);  	break;  }  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Starg:  case Code.Starg_S:  	emulate_Starg ((Parameter)instr.Operand);  	break;  case Code.Stloc:  case Code.Stloc_S:  	emulate_Stloc ((Local)instr.Operand);  	break;  case Code.Stloc_0:  	emulate_Stloc (0);  	break;  case Code.Stloc_1:  	emulate_Stloc (1);  	break;  case Code.Stloc_2:  	emulate_Stloc (2);  	break;  case Code.Stloc_3:  	emulate_Stloc (3);  	break;  case Code.Ldarg:  case Code.Ldarg_S:  	valueStack.push (getArg ((Parameter)instr.Operand));  	break;  case Code.Ldarg_0:  	valueStack.push (getArg (0));  	break;  case Code.Ldarg_1:  	valueStack.push (getArg (1));  	break;  case Code.Ldarg_2:  	valueStack.push (getArg (2));  	break;  case Code.Ldarg_3:  	valueStack.push (getArg (3));  	break;  case Code.Ldloc:  case Code.Ldloc_S:  	valueStack.push (getLocal ((Local)instr.Operand));  	break;  case Code.Ldloc_0:  	valueStack.push (getLocal (0));  	break;  case Code.Ldloc_1:  	valueStack.push (getLocal (1));  	break;  case Code.Ldloc_2:  	valueStack.push (getLocal (2));  	break;  case Code.Ldloc_3:  	valueStack.push (getLocal (3));  	break;  case Code.Ldarga:  case Code.Ldarga_S:  	emulate_Ldarga ((Parameter)instr.Operand);  	break;  case Code.Ldloca:  case Code.Ldloca_S:  	emulate_Ldloca ((Local)instr.Operand);  	break;  case Code.Dup:  	valueStack.copyTop ();  	break;  case Code.Ldc_I4:  	valueStack.push (new Int32Value ((int)instr.Operand));  	break;  case Code.Ldc_I4_S:  	valueStack.push (new Int32Value ((sbyte)instr.Operand));  	break;  case Code.Ldc_I8:  	valueStack.push (new Int64Value ((long)instr.Operand));  	break;  case Code.Ldc_R4:  	valueStack.push (new Real8Value ((float)instr.Operand));  	break;  case Code.Ldc_R8:  	valueStack.push (new Real8Value ((double)instr.Operand));  	break;  case Code.Ldc_I4_0:  	valueStack.push (Int32Value.zero);  	break;  case Code.Ldc_I4_1:  	valueStack.push (Int32Value.one);  	break;  case Code.Ldc_I4_2:  	valueStack.push (new Int32Value (2));  	break;  case Code.Ldc_I4_3:  	valueStack.push (new Int32Value (3));  	break;  case Code.Ldc_I4_4:  	valueStack.push (new Int32Value (4));  	break;  case Code.Ldc_I4_5:  	valueStack.push (new Int32Value (5));  	break;  case Code.Ldc_I4_6:  	valueStack.push (new Int32Value (6));  	break;  case Code.Ldc_I4_7:  	valueStack.push (new Int32Value (7));  	break;  case Code.Ldc_I4_8:  	valueStack.push (new Int32Value (8));  	break;  case Code.Ldc_I4_M1:  	valueStack.push (new Int32Value (-1));  	break;  case Code.Ldnull:  	valueStack.push (NullValue.Instance);  	break;  case Code.Ldstr:  	valueStack.push (new StringValue ((string)instr.Operand));  	break;  case Code.Box:  	valueStack.push (new BoxedValue (valueStack.pop ()));  	break;  case Code.Conv_U1:  	emulate_Conv_U1 (instr);  	break;  case Code.Conv_U2:  	emulate_Conv_U2 (instr);  	break;  case Code.Conv_U4:  	emulate_Conv_U4 (instr);  	break;  case Code.Conv_U8:  	emulate_Conv_U8 (instr);  	break;  case Code.Conv_I1:  	emulate_Conv_I1 (instr);  	break;  case Code.Conv_I2:  	emulate_Conv_I2 (instr);  	break;  case Code.Conv_I4:  	emulate_Conv_I4 (instr);  	break;  case Code.Conv_I8:  	emulate_Conv_I8 (instr);  	break;  case Code.Add:  	emulate_Add (instr);  	break;  case Code.Sub:  	emulate_Sub (instr);  	break;  case Code.Mul:  	emulate_Mul (instr);  	break;  case Code.Div:  	emulate_Div (instr);  	break;  case Code.Div_Un:  	emulate_Div_Un (instr);  	break;  case Code.Rem:  	emulate_Rem (instr);  	break;  case Code.Rem_Un:  	emulate_Rem_Un (instr);  	break;  case Code.Neg:  	emulate_Neg (instr);  	break;  case Code.And:  	emulate_And (instr);  	break;  case Code.Or:  	emulate_Or (instr);  	break;  case Code.Xor:  	emulate_Xor (instr);  	break;  case Code.Not:  	emulate_Not (instr);  	break;  case Code.Shl:  	emulate_Shl (instr);  	break;  case Code.Shr:  	emulate_Shr (instr);  	break;  case Code.Shr_Un:  	emulate_Shr_Un (instr);  	break;  case Code.Ceq:  	emulate_Ceq (instr);  	break;  case Code.Cgt:  	emulate_Cgt (instr);  	break;  case Code.Cgt_Un:  	emulate_Cgt_Un (instr);  	break;  case Code.Clt:  	emulate_Clt (instr);  	break;  case Code.Clt_Un:  	emulate_Clt_Un (instr);  	break;  case Code.Unbox_Any:  	emulate_Unbox_Any (instr);  	break;  case Code.Call:  	emulate_Call (instr);  	break;  case Code.Callvirt:  	emulate_Callvirt (instr);  	break;  case Code.Castclass:  	emulate_Castclass (instr);  	break;  case Code.Isinst:  	emulate_Isinst (instr);  	break;  case Code.Add_Ovf:  	emulateIntOps2 ();  	break;  case Code.Add_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Conv_Ovf_I1:  case Code.Conv_Ovf_I1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I2:  case Code.Conv_Ovf_I2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I4:  case Code.Conv_Ovf_I4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I8:  case Code.Conv_Ovf_I8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Conv_Ovf_U1:  case Code.Conv_Ovf_U1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Conv_Ovf_U2:  case Code.Conv_Ovf_U2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Conv_Ovf_U4:  case Code.Conv_Ovf_U4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_U8:  case Code.Conv_Ovf_U8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_I1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I8:  	valueStack.pop (2);  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_U1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldelem_U2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldelem_U4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem:  	valueStack.pop (2);  	valueStack.push (getUnknownValue (instr.Operand as ITypeDefOrRef));  	break;  case Code.Ldind_I1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I8:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldind_U1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldind_U2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldind_U4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldlen:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Sizeof:  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldfld:  	emulate_Ldfld (instr);  	break;  case Code.Ldsfld:  	emulate_Ldsfld (instr);  	break;  case Code.Ldftn:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldsflda:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldtoken:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldvirtftn:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Ldflda:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Unbox:  case Code.Conv_R_Un:  case Code.Conv_R4:  case Code.Conv_R8:  case Code.Arglist:  case Code.Beq:  case Code.Beq_S:  case Code.Bge:  case Code.Bge_S:  case Code.Bge_Un:  case Code.Bge_Un_S:  case Code.Bgt:  case Code.Bgt_S:  case Code.Bgt_Un:  case Code.Bgt_Un_S:  case Code.Ble:  case Code.Ble_S:  case Code.Ble_Un:  case Code.Ble_Un_S:  case Code.Blt:  case Code.Blt_S:  case Code.Blt_Un:  case Code.Blt_Un_S:  case Code.Bne_Un:  case Code.Bne_Un_S:  case Code.Brfalse:  case Code.Brfalse_S:  case Code.Brtrue:  case Code.Brtrue_S:  case Code.Br:  case Code.Br_S:  case Code.Break:  case Code.Calli:  case Code.Ckfinite:  case Code.Constrained:  case Code.Conv_I:  case Code.Conv_Ovf_I:  case Code.Conv_Ovf_I_Un:  case Code.Conv_Ovf_U:  case Code.Conv_Ovf_U_Un:  case Code.Conv_U:  case Code.Cpblk:  case Code.Cpobj:  case Code.Endfilter:  case Code.Endfinally:  case Code.Initblk:  case Code.Initobj:  case Code.Jmp:  case Code.Ldelema:  case Code.Ldelem_I:  case Code.Ldelem_R4:  case Code.Ldelem_R8:  case Code.Ldelem_Ref:  case Code.Ldind_I:  case Code.Ldind_R4:  case Code.Ldind_R8:  case Code.Ldind_Ref:  case Code.Ldobj:  case Code.Leave:  case Code.Leave_S:  case Code.Localloc:  case Code.Mkrefany:  case Code.Newarr:  case Code.Newobj:  case Code.Nop:  case Code.Pop:  case Code.Readonly:  case Code.Refanytype:  case Code.Refanyval:  case Code.Ret:  case Code.Rethrow:  case Code.Stelem:  case Code.Stelem_I:  case Code.Stelem_I1:  case Code.Stelem_I2:  case Code.Stelem_I4:  case Code.Stelem_I8:  case Code.Stelem_R4:  case Code.Stelem_R8:  case Code.Stelem_Ref:  case Code.Stfld:  case Code.Stind_I:  case Code.Stind_I1:  case Code.Stind_I2:  case Code.Stind_I4:  case Code.Stind_I8:  case Code.Stind_R4:  case Code.Stind_R8:  case Code.Stind_Ref:  case Code.Stobj:  case Code.Stsfld:  case Code.Switch:  case Code.Tailcall:  case Code.Throw:  case Code.Unaligned:  case Code.Volatile:  default:  	updateStack (instr);  	break;  }  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Starg:  case Code.Starg_S:  	emulate_Starg ((Parameter)instr.Operand);  	break;  case Code.Stloc:  case Code.Stloc_S:  	emulate_Stloc ((Local)instr.Operand);  	break;  case Code.Stloc_0:  	emulate_Stloc (0);  	break;  case Code.Stloc_1:  	emulate_Stloc (1);  	break;  case Code.Stloc_2:  	emulate_Stloc (2);  	break;  case Code.Stloc_3:  	emulate_Stloc (3);  	break;  case Code.Ldarg:  case Code.Ldarg_S:  	valueStack.push (getArg ((Parameter)instr.Operand));  	break;  case Code.Ldarg_0:  	valueStack.push (getArg (0));  	break;  case Code.Ldarg_1:  	valueStack.push (getArg (1));  	break;  case Code.Ldarg_2:  	valueStack.push (getArg (2));  	break;  case Code.Ldarg_3:  	valueStack.push (getArg (3));  	break;  case Code.Ldloc:  case Code.Ldloc_S:  	valueStack.push (getLocal ((Local)instr.Operand));  	break;  case Code.Ldloc_0:  	valueStack.push (getLocal (0));  	break;  case Code.Ldloc_1:  	valueStack.push (getLocal (1));  	break;  case Code.Ldloc_2:  	valueStack.push (getLocal (2));  	break;  case Code.Ldloc_3:  	valueStack.push (getLocal (3));  	break;  case Code.Ldarga:  case Code.Ldarga_S:  	emulate_Ldarga ((Parameter)instr.Operand);  	break;  case Code.Ldloca:  case Code.Ldloca_S:  	emulate_Ldloca ((Local)instr.Operand);  	break;  case Code.Dup:  	valueStack.copyTop ();  	break;  case Code.Ldc_I4:  	valueStack.push (new Int32Value ((int)instr.Operand));  	break;  case Code.Ldc_I4_S:  	valueStack.push (new Int32Value ((sbyte)instr.Operand));  	break;  case Code.Ldc_I8:  	valueStack.push (new Int64Value ((long)instr.Operand));  	break;  case Code.Ldc_R4:  	valueStack.push (new Real8Value ((float)instr.Operand));  	break;  case Code.Ldc_R8:  	valueStack.push (new Real8Value ((double)instr.Operand));  	break;  case Code.Ldc_I4_0:  	valueStack.push (Int32Value.zero);  	break;  case Code.Ldc_I4_1:  	valueStack.push (Int32Value.one);  	break;  case Code.Ldc_I4_2:  	valueStack.push (new Int32Value (2));  	break;  case Code.Ldc_I4_3:  	valueStack.push (new Int32Value (3));  	break;  case Code.Ldc_I4_4:  	valueStack.push (new Int32Value (4));  	break;  case Code.Ldc_I4_5:  	valueStack.push (new Int32Value (5));  	break;  case Code.Ldc_I4_6:  	valueStack.push (new Int32Value (6));  	break;  case Code.Ldc_I4_7:  	valueStack.push (new Int32Value (7));  	break;  case Code.Ldc_I4_8:  	valueStack.push (new Int32Value (8));  	break;  case Code.Ldc_I4_M1:  	valueStack.push (new Int32Value (-1));  	break;  case Code.Ldnull:  	valueStack.push (NullValue.Instance);  	break;  case Code.Ldstr:  	valueStack.push (new StringValue ((string)instr.Operand));  	break;  case Code.Box:  	valueStack.push (new BoxedValue (valueStack.pop ()));  	break;  case Code.Conv_U1:  	emulate_Conv_U1 (instr);  	break;  case Code.Conv_U2:  	emulate_Conv_U2 (instr);  	break;  case Code.Conv_U4:  	emulate_Conv_U4 (instr);  	break;  case Code.Conv_U8:  	emulate_Conv_U8 (instr);  	break;  case Code.Conv_I1:  	emulate_Conv_I1 (instr);  	break;  case Code.Conv_I2:  	emulate_Conv_I2 (instr);  	break;  case Code.Conv_I4:  	emulate_Conv_I4 (instr);  	break;  case Code.Conv_I8:  	emulate_Conv_I8 (instr);  	break;  case Code.Add:  	emulate_Add (instr);  	break;  case Code.Sub:  	emulate_Sub (instr);  	break;  case Code.Mul:  	emulate_Mul (instr);  	break;  case Code.Div:  	emulate_Div (instr);  	break;  case Code.Div_Un:  	emulate_Div_Un (instr);  	break;  case Code.Rem:  	emulate_Rem (instr);  	break;  case Code.Rem_Un:  	emulate_Rem_Un (instr);  	break;  case Code.Neg:  	emulate_Neg (instr);  	break;  case Code.And:  	emulate_And (instr);  	break;  case Code.Or:  	emulate_Or (instr);  	break;  case Code.Xor:  	emulate_Xor (instr);  	break;  case Code.Not:  	emulate_Not (instr);  	break;  case Code.Shl:  	emulate_Shl (instr);  	break;  case Code.Shr:  	emulate_Shr (instr);  	break;  case Code.Shr_Un:  	emulate_Shr_Un (instr);  	break;  case Code.Ceq:  	emulate_Ceq (instr);  	break;  case Code.Cgt:  	emulate_Cgt (instr);  	break;  case Code.Cgt_Un:  	emulate_Cgt_Un (instr);  	break;  case Code.Clt:  	emulate_Clt (instr);  	break;  case Code.Clt_Un:  	emulate_Clt_Un (instr);  	break;  case Code.Unbox_Any:  	emulate_Unbox_Any (instr);  	break;  case Code.Call:  	emulate_Call (instr);  	break;  case Code.Callvirt:  	emulate_Callvirt (instr);  	break;  case Code.Castclass:  	emulate_Castclass (instr);  	break;  case Code.Isinst:  	emulate_Isinst (instr);  	break;  case Code.Add_Ovf:  	emulateIntOps2 ();  	break;  case Code.Add_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Conv_Ovf_I1:  case Code.Conv_Ovf_I1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I2:  case Code.Conv_Ovf_I2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I4:  case Code.Conv_Ovf_I4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I8:  case Code.Conv_Ovf_I8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Conv_Ovf_U1:  case Code.Conv_Ovf_U1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Conv_Ovf_U2:  case Code.Conv_Ovf_U2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Conv_Ovf_U4:  case Code.Conv_Ovf_U4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_U8:  case Code.Conv_Ovf_U8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_I1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I8:  	valueStack.pop (2);  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_U1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldelem_U2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldelem_U4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem:  	valueStack.pop (2);  	valueStack.push (getUnknownValue (instr.Operand as ITypeDefOrRef));  	break;  case Code.Ldind_I1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I8:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldind_U1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldind_U2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldind_U4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldlen:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Sizeof:  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldfld:  	emulate_Ldfld (instr);  	break;  case Code.Ldsfld:  	emulate_Ldsfld (instr);  	break;  case Code.Ldftn:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldsflda:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldtoken:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldvirtftn:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Ldflda:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Unbox:  case Code.Conv_R_Un:  case Code.Conv_R4:  case Code.Conv_R8:  case Code.Arglist:  case Code.Beq:  case Code.Beq_S:  case Code.Bge:  case Code.Bge_S:  case Code.Bge_Un:  case Code.Bge_Un_S:  case Code.Bgt:  case Code.Bgt_S:  case Code.Bgt_Un:  case Code.Bgt_Un_S:  case Code.Ble:  case Code.Ble_S:  case Code.Ble_Un:  case Code.Ble_Un_S:  case Code.Blt:  case Code.Blt_S:  case Code.Blt_Un:  case Code.Blt_Un_S:  case Code.Bne_Un:  case Code.Bne_Un_S:  case Code.Brfalse:  case Code.Brfalse_S:  case Code.Brtrue:  case Code.Brtrue_S:  case Code.Br:  case Code.Br_S:  case Code.Break:  case Code.Calli:  case Code.Ckfinite:  case Code.Constrained:  case Code.Conv_I:  case Code.Conv_Ovf_I:  case Code.Conv_Ovf_I_Un:  case Code.Conv_Ovf_U:  case Code.Conv_Ovf_U_Un:  case Code.Conv_U:  case Code.Cpblk:  case Code.Cpobj:  case Code.Endfilter:  case Code.Endfinally:  case Code.Initblk:  case Code.Initobj:  case Code.Jmp:  case Code.Ldelema:  case Code.Ldelem_I:  case Code.Ldelem_R4:  case Code.Ldelem_R8:  case Code.Ldelem_Ref:  case Code.Ldind_I:  case Code.Ldind_R4:  case Code.Ldind_R8:  case Code.Ldind_Ref:  case Code.Ldobj:  case Code.Leave:  case Code.Leave_S:  case Code.Localloc:  case Code.Mkrefany:  case Code.Newarr:  case Code.Newobj:  case Code.Nop:  case Code.Pop:  case Code.Readonly:  case Code.Refanytype:  case Code.Refanyval:  case Code.Ret:  case Code.Rethrow:  case Code.Stelem:  case Code.Stelem_I:  case Code.Stelem_I1:  case Code.Stelem_I2:  case Code.Stelem_I4:  case Code.Stelem_I8:  case Code.Stelem_R4:  case Code.Stelem_R8:  case Code.Stelem_Ref:  case Code.Stfld:  case Code.Stind_I:  case Code.Stind_I1:  case Code.Stind_I2:  case Code.Stind_I4:  case Code.Stind_I8:  case Code.Stind_R4:  case Code.Stind_R8:  case Code.Stind_Ref:  case Code.Stobj:  case Code.Stsfld:  case Code.Switch:  case Code.Tailcall:  case Code.Throw:  case Code.Unaligned:  case Code.Volatile:  default:  	updateStack (instr);  	break;  }  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Starg:  case Code.Starg_S:  	emulate_Starg ((Parameter)instr.Operand);  	break;  case Code.Stloc:  case Code.Stloc_S:  	emulate_Stloc ((Local)instr.Operand);  	break;  case Code.Stloc_0:  	emulate_Stloc (0);  	break;  case Code.Stloc_1:  	emulate_Stloc (1);  	break;  case Code.Stloc_2:  	emulate_Stloc (2);  	break;  case Code.Stloc_3:  	emulate_Stloc (3);  	break;  case Code.Ldarg:  case Code.Ldarg_S:  	valueStack.push (getArg ((Parameter)instr.Operand));  	break;  case Code.Ldarg_0:  	valueStack.push (getArg (0));  	break;  case Code.Ldarg_1:  	valueStack.push (getArg (1));  	break;  case Code.Ldarg_2:  	valueStack.push (getArg (2));  	break;  case Code.Ldarg_3:  	valueStack.push (getArg (3));  	break;  case Code.Ldloc:  case Code.Ldloc_S:  	valueStack.push (getLocal ((Local)instr.Operand));  	break;  case Code.Ldloc_0:  	valueStack.push (getLocal (0));  	break;  case Code.Ldloc_1:  	valueStack.push (getLocal (1));  	break;  case Code.Ldloc_2:  	valueStack.push (getLocal (2));  	break;  case Code.Ldloc_3:  	valueStack.push (getLocal (3));  	break;  case Code.Ldarga:  case Code.Ldarga_S:  	emulate_Ldarga ((Parameter)instr.Operand);  	break;  case Code.Ldloca:  case Code.Ldloca_S:  	emulate_Ldloca ((Local)instr.Operand);  	break;  case Code.Dup:  	valueStack.copyTop ();  	break;  case Code.Ldc_I4:  	valueStack.push (new Int32Value ((int)instr.Operand));  	break;  case Code.Ldc_I4_S:  	valueStack.push (new Int32Value ((sbyte)instr.Operand));  	break;  case Code.Ldc_I8:  	valueStack.push (new Int64Value ((long)instr.Operand));  	break;  case Code.Ldc_R4:  	valueStack.push (new Real8Value ((float)instr.Operand));  	break;  case Code.Ldc_R8:  	valueStack.push (new Real8Value ((double)instr.Operand));  	break;  case Code.Ldc_I4_0:  	valueStack.push (Int32Value.zero);  	break;  case Code.Ldc_I4_1:  	valueStack.push (Int32Value.one);  	break;  case Code.Ldc_I4_2:  	valueStack.push (new Int32Value (2));  	break;  case Code.Ldc_I4_3:  	valueStack.push (new Int32Value (3));  	break;  case Code.Ldc_I4_4:  	valueStack.push (new Int32Value (4));  	break;  case Code.Ldc_I4_5:  	valueStack.push (new Int32Value (5));  	break;  case Code.Ldc_I4_6:  	valueStack.push (new Int32Value (6));  	break;  case Code.Ldc_I4_7:  	valueStack.push (new Int32Value (7));  	break;  case Code.Ldc_I4_8:  	valueStack.push (new Int32Value (8));  	break;  case Code.Ldc_I4_M1:  	valueStack.push (new Int32Value (-1));  	break;  case Code.Ldnull:  	valueStack.push (NullValue.Instance);  	break;  case Code.Ldstr:  	valueStack.push (new StringValue ((string)instr.Operand));  	break;  case Code.Box:  	valueStack.push (new BoxedValue (valueStack.pop ()));  	break;  case Code.Conv_U1:  	emulate_Conv_U1 (instr);  	break;  case Code.Conv_U2:  	emulate_Conv_U2 (instr);  	break;  case Code.Conv_U4:  	emulate_Conv_U4 (instr);  	break;  case Code.Conv_U8:  	emulate_Conv_U8 (instr);  	break;  case Code.Conv_I1:  	emulate_Conv_I1 (instr);  	break;  case Code.Conv_I2:  	emulate_Conv_I2 (instr);  	break;  case Code.Conv_I4:  	emulate_Conv_I4 (instr);  	break;  case Code.Conv_I8:  	emulate_Conv_I8 (instr);  	break;  case Code.Add:  	emulate_Add (instr);  	break;  case Code.Sub:  	emulate_Sub (instr);  	break;  case Code.Mul:  	emulate_Mul (instr);  	break;  case Code.Div:  	emulate_Div (instr);  	break;  case Code.Div_Un:  	emulate_Div_Un (instr);  	break;  case Code.Rem:  	emulate_Rem (instr);  	break;  case Code.Rem_Un:  	emulate_Rem_Un (instr);  	break;  case Code.Neg:  	emulate_Neg (instr);  	break;  case Code.And:  	emulate_And (instr);  	break;  case Code.Or:  	emulate_Or (instr);  	break;  case Code.Xor:  	emulate_Xor (instr);  	break;  case Code.Not:  	emulate_Not (instr);  	break;  case Code.Shl:  	emulate_Shl (instr);  	break;  case Code.Shr:  	emulate_Shr (instr);  	break;  case Code.Shr_Un:  	emulate_Shr_Un (instr);  	break;  case Code.Ceq:  	emulate_Ceq (instr);  	break;  case Code.Cgt:  	emulate_Cgt (instr);  	break;  case Code.Cgt_Un:  	emulate_Cgt_Un (instr);  	break;  case Code.Clt:  	emulate_Clt (instr);  	break;  case Code.Clt_Un:  	emulate_Clt_Un (instr);  	break;  case Code.Unbox_Any:  	emulate_Unbox_Any (instr);  	break;  case Code.Call:  	emulate_Call (instr);  	break;  case Code.Callvirt:  	emulate_Callvirt (instr);  	break;  case Code.Castclass:  	emulate_Castclass (instr);  	break;  case Code.Isinst:  	emulate_Isinst (instr);  	break;  case Code.Add_Ovf:  	emulateIntOps2 ();  	break;  case Code.Add_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Conv_Ovf_I1:  case Code.Conv_Ovf_I1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I2:  case Code.Conv_Ovf_I2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I4:  case Code.Conv_Ovf_I4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I8:  case Code.Conv_Ovf_I8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Conv_Ovf_U1:  case Code.Conv_Ovf_U1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Conv_Ovf_U2:  case Code.Conv_Ovf_U2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Conv_Ovf_U4:  case Code.Conv_Ovf_U4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_U8:  case Code.Conv_Ovf_U8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_I1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I8:  	valueStack.pop (2);  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_U1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldelem_U2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldelem_U4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem:  	valueStack.pop (2);  	valueStack.push (getUnknownValue (instr.Operand as ITypeDefOrRef));  	break;  case Code.Ldind_I1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I8:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldind_U1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldind_U2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldind_U4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldlen:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Sizeof:  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldfld:  	emulate_Ldfld (instr);  	break;  case Code.Ldsfld:  	emulate_Ldsfld (instr);  	break;  case Code.Ldftn:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldsflda:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldtoken:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldvirtftn:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Ldflda:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Unbox:  case Code.Conv_R_Un:  case Code.Conv_R4:  case Code.Conv_R8:  case Code.Arglist:  case Code.Beq:  case Code.Beq_S:  case Code.Bge:  case Code.Bge_S:  case Code.Bge_Un:  case Code.Bge_Un_S:  case Code.Bgt:  case Code.Bgt_S:  case Code.Bgt_Un:  case Code.Bgt_Un_S:  case Code.Ble:  case Code.Ble_S:  case Code.Ble_Un:  case Code.Ble_Un_S:  case Code.Blt:  case Code.Blt_S:  case Code.Blt_Un:  case Code.Blt_Un_S:  case Code.Bne_Un:  case Code.Bne_Un_S:  case Code.Brfalse:  case Code.Brfalse_S:  case Code.Brtrue:  case Code.Brtrue_S:  case Code.Br:  case Code.Br_S:  case Code.Break:  case Code.Calli:  case Code.Ckfinite:  case Code.Constrained:  case Code.Conv_I:  case Code.Conv_Ovf_I:  case Code.Conv_Ovf_I_Un:  case Code.Conv_Ovf_U:  case Code.Conv_Ovf_U_Un:  case Code.Conv_U:  case Code.Cpblk:  case Code.Cpobj:  case Code.Endfilter:  case Code.Endfinally:  case Code.Initblk:  case Code.Initobj:  case Code.Jmp:  case Code.Ldelema:  case Code.Ldelem_I:  case Code.Ldelem_R4:  case Code.Ldelem_R8:  case Code.Ldelem_Ref:  case Code.Ldind_I:  case Code.Ldind_R4:  case Code.Ldind_R8:  case Code.Ldind_Ref:  case Code.Ldobj:  case Code.Leave:  case Code.Leave_S:  case Code.Localloc:  case Code.Mkrefany:  case Code.Newarr:  case Code.Newobj:  case Code.Nop:  case Code.Pop:  case Code.Readonly:  case Code.Refanytype:  case Code.Refanyval:  case Code.Ret:  case Code.Rethrow:  case Code.Stelem:  case Code.Stelem_I:  case Code.Stelem_I1:  case Code.Stelem_I2:  case Code.Stelem_I4:  case Code.Stelem_I8:  case Code.Stelem_R4:  case Code.Stelem_R8:  case Code.Stelem_Ref:  case Code.Stfld:  case Code.Stind_I:  case Code.Stind_I1:  case Code.Stind_I2:  case Code.Stind_I4:  case Code.Stind_I8:  case Code.Stind_R4:  case Code.Stind_R8:  case Code.Stind_Ref:  case Code.Stobj:  case Code.Stsfld:  case Code.Switch:  case Code.Tailcall:  case Code.Throw:  case Code.Unaligned:  case Code.Volatile:  default:  	updateStack (instr);  	break;  }  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Starg:  case Code.Starg_S:  	emulate_Starg ((Parameter)instr.Operand);  	break;  case Code.Stloc:  case Code.Stloc_S:  	emulate_Stloc ((Local)instr.Operand);  	break;  case Code.Stloc_0:  	emulate_Stloc (0);  	break;  case Code.Stloc_1:  	emulate_Stloc (1);  	break;  case Code.Stloc_2:  	emulate_Stloc (2);  	break;  case Code.Stloc_3:  	emulate_Stloc (3);  	break;  case Code.Ldarg:  case Code.Ldarg_S:  	valueStack.push (getArg ((Parameter)instr.Operand));  	break;  case Code.Ldarg_0:  	valueStack.push (getArg (0));  	break;  case Code.Ldarg_1:  	valueStack.push (getArg (1));  	break;  case Code.Ldarg_2:  	valueStack.push (getArg (2));  	break;  case Code.Ldarg_3:  	valueStack.push (getArg (3));  	break;  case Code.Ldloc:  case Code.Ldloc_S:  	valueStack.push (getLocal ((Local)instr.Operand));  	break;  case Code.Ldloc_0:  	valueStack.push (getLocal (0));  	break;  case Code.Ldloc_1:  	valueStack.push (getLocal (1));  	break;  case Code.Ldloc_2:  	valueStack.push (getLocal (2));  	break;  case Code.Ldloc_3:  	valueStack.push (getLocal (3));  	break;  case Code.Ldarga:  case Code.Ldarga_S:  	emulate_Ldarga ((Parameter)instr.Operand);  	break;  case Code.Ldloca:  case Code.Ldloca_S:  	emulate_Ldloca ((Local)instr.Operand);  	break;  case Code.Dup:  	valueStack.copyTop ();  	break;  case Code.Ldc_I4:  	valueStack.push (new Int32Value ((int)instr.Operand));  	break;  case Code.Ldc_I4_S:  	valueStack.push (new Int32Value ((sbyte)instr.Operand));  	break;  case Code.Ldc_I8:  	valueStack.push (new Int64Value ((long)instr.Operand));  	break;  case Code.Ldc_R4:  	valueStack.push (new Real8Value ((float)instr.Operand));  	break;  case Code.Ldc_R8:  	valueStack.push (new Real8Value ((double)instr.Operand));  	break;  case Code.Ldc_I4_0:  	valueStack.push (Int32Value.zero);  	break;  case Code.Ldc_I4_1:  	valueStack.push (Int32Value.one);  	break;  case Code.Ldc_I4_2:  	valueStack.push (new Int32Value (2));  	break;  case Code.Ldc_I4_3:  	valueStack.push (new Int32Value (3));  	break;  case Code.Ldc_I4_4:  	valueStack.push (new Int32Value (4));  	break;  case Code.Ldc_I4_5:  	valueStack.push (new Int32Value (5));  	break;  case Code.Ldc_I4_6:  	valueStack.push (new Int32Value (6));  	break;  case Code.Ldc_I4_7:  	valueStack.push (new Int32Value (7));  	break;  case Code.Ldc_I4_8:  	valueStack.push (new Int32Value (8));  	break;  case Code.Ldc_I4_M1:  	valueStack.push (new Int32Value (-1));  	break;  case Code.Ldnull:  	valueStack.push (NullValue.Instance);  	break;  case Code.Ldstr:  	valueStack.push (new StringValue ((string)instr.Operand));  	break;  case Code.Box:  	valueStack.push (new BoxedValue (valueStack.pop ()));  	break;  case Code.Conv_U1:  	emulate_Conv_U1 (instr);  	break;  case Code.Conv_U2:  	emulate_Conv_U2 (instr);  	break;  case Code.Conv_U4:  	emulate_Conv_U4 (instr);  	break;  case Code.Conv_U8:  	emulate_Conv_U8 (instr);  	break;  case Code.Conv_I1:  	emulate_Conv_I1 (instr);  	break;  case Code.Conv_I2:  	emulate_Conv_I2 (instr);  	break;  case Code.Conv_I4:  	emulate_Conv_I4 (instr);  	break;  case Code.Conv_I8:  	emulate_Conv_I8 (instr);  	break;  case Code.Add:  	emulate_Add (instr);  	break;  case Code.Sub:  	emulate_Sub (instr);  	break;  case Code.Mul:  	emulate_Mul (instr);  	break;  case Code.Div:  	emulate_Div (instr);  	break;  case Code.Div_Un:  	emulate_Div_Un (instr);  	break;  case Code.Rem:  	emulate_Rem (instr);  	break;  case Code.Rem_Un:  	emulate_Rem_Un (instr);  	break;  case Code.Neg:  	emulate_Neg (instr);  	break;  case Code.And:  	emulate_And (instr);  	break;  case Code.Or:  	emulate_Or (instr);  	break;  case Code.Xor:  	emulate_Xor (instr);  	break;  case Code.Not:  	emulate_Not (instr);  	break;  case Code.Shl:  	emulate_Shl (instr);  	break;  case Code.Shr:  	emulate_Shr (instr);  	break;  case Code.Shr_Un:  	emulate_Shr_Un (instr);  	break;  case Code.Ceq:  	emulate_Ceq (instr);  	break;  case Code.Cgt:  	emulate_Cgt (instr);  	break;  case Code.Cgt_Un:  	emulate_Cgt_Un (instr);  	break;  case Code.Clt:  	emulate_Clt (instr);  	break;  case Code.Clt_Un:  	emulate_Clt_Un (instr);  	break;  case Code.Unbox_Any:  	emulate_Unbox_Any (instr);  	break;  case Code.Call:  	emulate_Call (instr);  	break;  case Code.Callvirt:  	emulate_Callvirt (instr);  	break;  case Code.Castclass:  	emulate_Castclass (instr);  	break;  case Code.Isinst:  	emulate_Isinst (instr);  	break;  case Code.Add_Ovf:  	emulateIntOps2 ();  	break;  case Code.Add_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Conv_Ovf_I1:  case Code.Conv_Ovf_I1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I2:  case Code.Conv_Ovf_I2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I4:  case Code.Conv_Ovf_I4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I8:  case Code.Conv_Ovf_I8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Conv_Ovf_U1:  case Code.Conv_Ovf_U1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Conv_Ovf_U2:  case Code.Conv_Ovf_U2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Conv_Ovf_U4:  case Code.Conv_Ovf_U4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_U8:  case Code.Conv_Ovf_U8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_I1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I8:  	valueStack.pop (2);  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_U1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldelem_U2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldelem_U4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem:  	valueStack.pop (2);  	valueStack.push (getUnknownValue (instr.Operand as ITypeDefOrRef));  	break;  case Code.Ldind_I1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I8:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldind_U1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldind_U2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldind_U4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldlen:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Sizeof:  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldfld:  	emulate_Ldfld (instr);  	break;  case Code.Ldsfld:  	emulate_Ldsfld (instr);  	break;  case Code.Ldftn:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldsflda:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldtoken:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldvirtftn:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Ldflda:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Unbox:  case Code.Conv_R_Un:  case Code.Conv_R4:  case Code.Conv_R8:  case Code.Arglist:  case Code.Beq:  case Code.Beq_S:  case Code.Bge:  case Code.Bge_S:  case Code.Bge_Un:  case Code.Bge_Un_S:  case Code.Bgt:  case Code.Bgt_S:  case Code.Bgt_Un:  case Code.Bgt_Un_S:  case Code.Ble:  case Code.Ble_S:  case Code.Ble_Un:  case Code.Ble_Un_S:  case Code.Blt:  case Code.Blt_S:  case Code.Blt_Un:  case Code.Blt_Un_S:  case Code.Bne_Un:  case Code.Bne_Un_S:  case Code.Brfalse:  case Code.Brfalse_S:  case Code.Brtrue:  case Code.Brtrue_S:  case Code.Br:  case Code.Br_S:  case Code.Break:  case Code.Calli:  case Code.Ckfinite:  case Code.Constrained:  case Code.Conv_I:  case Code.Conv_Ovf_I:  case Code.Conv_Ovf_I_Un:  case Code.Conv_Ovf_U:  case Code.Conv_Ovf_U_Un:  case Code.Conv_U:  case Code.Cpblk:  case Code.Cpobj:  case Code.Endfilter:  case Code.Endfinally:  case Code.Initblk:  case Code.Initobj:  case Code.Jmp:  case Code.Ldelema:  case Code.Ldelem_I:  case Code.Ldelem_R4:  case Code.Ldelem_R8:  case Code.Ldelem_Ref:  case Code.Ldind_I:  case Code.Ldind_R4:  case Code.Ldind_R8:  case Code.Ldind_Ref:  case Code.Ldobj:  case Code.Leave:  case Code.Leave_S:  case Code.Localloc:  case Code.Mkrefany:  case Code.Newarr:  case Code.Newobj:  case Code.Nop:  case Code.Pop:  case Code.Readonly:  case Code.Refanytype:  case Code.Refanyval:  case Code.Ret:  case Code.Rethrow:  case Code.Stelem:  case Code.Stelem_I:  case Code.Stelem_I1:  case Code.Stelem_I2:  case Code.Stelem_I4:  case Code.Stelem_I8:  case Code.Stelem_R4:  case Code.Stelem_R8:  case Code.Stelem_Ref:  case Code.Stfld:  case Code.Stind_I:  case Code.Stind_I1:  case Code.Stind_I2:  case Code.Stind_I4:  case Code.Stind_I8:  case Code.Stind_R4:  case Code.Stind_R8:  case Code.Stind_Ref:  case Code.Stobj:  case Code.Stsfld:  case Code.Switch:  case Code.Tailcall:  case Code.Throw:  case Code.Unaligned:  case Code.Volatile:  default:  	updateStack (instr);  	break;  }  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Starg:  case Code.Starg_S:  	emulate_Starg ((Parameter)instr.Operand);  	break;  case Code.Stloc:  case Code.Stloc_S:  	emulate_Stloc ((Local)instr.Operand);  	break;  case Code.Stloc_0:  	emulate_Stloc (0);  	break;  case Code.Stloc_1:  	emulate_Stloc (1);  	break;  case Code.Stloc_2:  	emulate_Stloc (2);  	break;  case Code.Stloc_3:  	emulate_Stloc (3);  	break;  case Code.Ldarg:  case Code.Ldarg_S:  	valueStack.push (getArg ((Parameter)instr.Operand));  	break;  case Code.Ldarg_0:  	valueStack.push (getArg (0));  	break;  case Code.Ldarg_1:  	valueStack.push (getArg (1));  	break;  case Code.Ldarg_2:  	valueStack.push (getArg (2));  	break;  case Code.Ldarg_3:  	valueStack.push (getArg (3));  	break;  case Code.Ldloc:  case Code.Ldloc_S:  	valueStack.push (getLocal ((Local)instr.Operand));  	break;  case Code.Ldloc_0:  	valueStack.push (getLocal (0));  	break;  case Code.Ldloc_1:  	valueStack.push (getLocal (1));  	break;  case Code.Ldloc_2:  	valueStack.push (getLocal (2));  	break;  case Code.Ldloc_3:  	valueStack.push (getLocal (3));  	break;  case Code.Ldarga:  case Code.Ldarga_S:  	emulate_Ldarga ((Parameter)instr.Operand);  	break;  case Code.Ldloca:  case Code.Ldloca_S:  	emulate_Ldloca ((Local)instr.Operand);  	break;  case Code.Dup:  	valueStack.copyTop ();  	break;  case Code.Ldc_I4:  	valueStack.push (new Int32Value ((int)instr.Operand));  	break;  case Code.Ldc_I4_S:  	valueStack.push (new Int32Value ((sbyte)instr.Operand));  	break;  case Code.Ldc_I8:  	valueStack.push (new Int64Value ((long)instr.Operand));  	break;  case Code.Ldc_R4:  	valueStack.push (new Real8Value ((float)instr.Operand));  	break;  case Code.Ldc_R8:  	valueStack.push (new Real8Value ((double)instr.Operand));  	break;  case Code.Ldc_I4_0:  	valueStack.push (Int32Value.zero);  	break;  case Code.Ldc_I4_1:  	valueStack.push (Int32Value.one);  	break;  case Code.Ldc_I4_2:  	valueStack.push (new Int32Value (2));  	break;  case Code.Ldc_I4_3:  	valueStack.push (new Int32Value (3));  	break;  case Code.Ldc_I4_4:  	valueStack.push (new Int32Value (4));  	break;  case Code.Ldc_I4_5:  	valueStack.push (new Int32Value (5));  	break;  case Code.Ldc_I4_6:  	valueStack.push (new Int32Value (6));  	break;  case Code.Ldc_I4_7:  	valueStack.push (new Int32Value (7));  	break;  case Code.Ldc_I4_8:  	valueStack.push (new Int32Value (8));  	break;  case Code.Ldc_I4_M1:  	valueStack.push (new Int32Value (-1));  	break;  case Code.Ldnull:  	valueStack.push (NullValue.Instance);  	break;  case Code.Ldstr:  	valueStack.push (new StringValue ((string)instr.Operand));  	break;  case Code.Box:  	valueStack.push (new BoxedValue (valueStack.pop ()));  	break;  case Code.Conv_U1:  	emulate_Conv_U1 (instr);  	break;  case Code.Conv_U2:  	emulate_Conv_U2 (instr);  	break;  case Code.Conv_U4:  	emulate_Conv_U4 (instr);  	break;  case Code.Conv_U8:  	emulate_Conv_U8 (instr);  	break;  case Code.Conv_I1:  	emulate_Conv_I1 (instr);  	break;  case Code.Conv_I2:  	emulate_Conv_I2 (instr);  	break;  case Code.Conv_I4:  	emulate_Conv_I4 (instr);  	break;  case Code.Conv_I8:  	emulate_Conv_I8 (instr);  	break;  case Code.Add:  	emulate_Add (instr);  	break;  case Code.Sub:  	emulate_Sub (instr);  	break;  case Code.Mul:  	emulate_Mul (instr);  	break;  case Code.Div:  	emulate_Div (instr);  	break;  case Code.Div_Un:  	emulate_Div_Un (instr);  	break;  case Code.Rem:  	emulate_Rem (instr);  	break;  case Code.Rem_Un:  	emulate_Rem_Un (instr);  	break;  case Code.Neg:  	emulate_Neg (instr);  	break;  case Code.And:  	emulate_And (instr);  	break;  case Code.Or:  	emulate_Or (instr);  	break;  case Code.Xor:  	emulate_Xor (instr);  	break;  case Code.Not:  	emulate_Not (instr);  	break;  case Code.Shl:  	emulate_Shl (instr);  	break;  case Code.Shr:  	emulate_Shr (instr);  	break;  case Code.Shr_Un:  	emulate_Shr_Un (instr);  	break;  case Code.Ceq:  	emulate_Ceq (instr);  	break;  case Code.Cgt:  	emulate_Cgt (instr);  	break;  case Code.Cgt_Un:  	emulate_Cgt_Un (instr);  	break;  case Code.Clt:  	emulate_Clt (instr);  	break;  case Code.Clt_Un:  	emulate_Clt_Un (instr);  	break;  case Code.Unbox_Any:  	emulate_Unbox_Any (instr);  	break;  case Code.Call:  	emulate_Call (instr);  	break;  case Code.Callvirt:  	emulate_Callvirt (instr);  	break;  case Code.Castclass:  	emulate_Castclass (instr);  	break;  case Code.Isinst:  	emulate_Isinst (instr);  	break;  case Code.Add_Ovf:  	emulateIntOps2 ();  	break;  case Code.Add_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Conv_Ovf_I1:  case Code.Conv_Ovf_I1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I2:  case Code.Conv_Ovf_I2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I4:  case Code.Conv_Ovf_I4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I8:  case Code.Conv_Ovf_I8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Conv_Ovf_U1:  case Code.Conv_Ovf_U1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Conv_Ovf_U2:  case Code.Conv_Ovf_U2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Conv_Ovf_U4:  case Code.Conv_Ovf_U4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_U8:  case Code.Conv_Ovf_U8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_I1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I8:  	valueStack.pop (2);  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_U1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldelem_U2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldelem_U4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem:  	valueStack.pop (2);  	valueStack.push (getUnknownValue (instr.Operand as ITypeDefOrRef));  	break;  case Code.Ldind_I1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I8:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldind_U1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldind_U2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldind_U4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldlen:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Sizeof:  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldfld:  	emulate_Ldfld (instr);  	break;  case Code.Ldsfld:  	emulate_Ldsfld (instr);  	break;  case Code.Ldftn:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldsflda:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldtoken:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldvirtftn:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Ldflda:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Unbox:  case Code.Conv_R_Un:  case Code.Conv_R4:  case Code.Conv_R8:  case Code.Arglist:  case Code.Beq:  case Code.Beq_S:  case Code.Bge:  case Code.Bge_S:  case Code.Bge_Un:  case Code.Bge_Un_S:  case Code.Bgt:  case Code.Bgt_S:  case Code.Bgt_Un:  case Code.Bgt_Un_S:  case Code.Ble:  case Code.Ble_S:  case Code.Ble_Un:  case Code.Ble_Un_S:  case Code.Blt:  case Code.Blt_S:  case Code.Blt_Un:  case Code.Blt_Un_S:  case Code.Bne_Un:  case Code.Bne_Un_S:  case Code.Brfalse:  case Code.Brfalse_S:  case Code.Brtrue:  case Code.Brtrue_S:  case Code.Br:  case Code.Br_S:  case Code.Break:  case Code.Calli:  case Code.Ckfinite:  case Code.Constrained:  case Code.Conv_I:  case Code.Conv_Ovf_I:  case Code.Conv_Ovf_I_Un:  case Code.Conv_Ovf_U:  case Code.Conv_Ovf_U_Un:  case Code.Conv_U:  case Code.Cpblk:  case Code.Cpobj:  case Code.Endfilter:  case Code.Endfinally:  case Code.Initblk:  case Code.Initobj:  case Code.Jmp:  case Code.Ldelema:  case Code.Ldelem_I:  case Code.Ldelem_R4:  case Code.Ldelem_R8:  case Code.Ldelem_Ref:  case Code.Ldind_I:  case Code.Ldind_R4:  case Code.Ldind_R8:  case Code.Ldind_Ref:  case Code.Ldobj:  case Code.Leave:  case Code.Leave_S:  case Code.Localloc:  case Code.Mkrefany:  case Code.Newarr:  case Code.Newobj:  case Code.Nop:  case Code.Pop:  case Code.Readonly:  case Code.Refanytype:  case Code.Refanyval:  case Code.Ret:  case Code.Rethrow:  case Code.Stelem:  case Code.Stelem_I:  case Code.Stelem_I1:  case Code.Stelem_I2:  case Code.Stelem_I4:  case Code.Stelem_I8:  case Code.Stelem_R4:  case Code.Stelem_R8:  case Code.Stelem_Ref:  case Code.Stfld:  case Code.Stind_I:  case Code.Stind_I1:  case Code.Stind_I2:  case Code.Stind_I4:  case Code.Stind_I8:  case Code.Stind_R4:  case Code.Stind_R8:  case Code.Stind_Ref:  case Code.Stobj:  case Code.Stsfld:  case Code.Switch:  case Code.Tailcall:  case Code.Throw:  case Code.Unaligned:  case Code.Volatile:  default:  	updateStack (instr);  	break;  }  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Starg:  case Code.Starg_S:  	emulate_Starg ((Parameter)instr.Operand);  	break;  case Code.Stloc:  case Code.Stloc_S:  	emulate_Stloc ((Local)instr.Operand);  	break;  case Code.Stloc_0:  	emulate_Stloc (0);  	break;  case Code.Stloc_1:  	emulate_Stloc (1);  	break;  case Code.Stloc_2:  	emulate_Stloc (2);  	break;  case Code.Stloc_3:  	emulate_Stloc (3);  	break;  case Code.Ldarg:  case Code.Ldarg_S:  	valueStack.push (getArg ((Parameter)instr.Operand));  	break;  case Code.Ldarg_0:  	valueStack.push (getArg (0));  	break;  case Code.Ldarg_1:  	valueStack.push (getArg (1));  	break;  case Code.Ldarg_2:  	valueStack.push (getArg (2));  	break;  case Code.Ldarg_3:  	valueStack.push (getArg (3));  	break;  case Code.Ldloc:  case Code.Ldloc_S:  	valueStack.push (getLocal ((Local)instr.Operand));  	break;  case Code.Ldloc_0:  	valueStack.push (getLocal (0));  	break;  case Code.Ldloc_1:  	valueStack.push (getLocal (1));  	break;  case Code.Ldloc_2:  	valueStack.push (getLocal (2));  	break;  case Code.Ldloc_3:  	valueStack.push (getLocal (3));  	break;  case Code.Ldarga:  case Code.Ldarga_S:  	emulate_Ldarga ((Parameter)instr.Operand);  	break;  case Code.Ldloca:  case Code.Ldloca_S:  	emulate_Ldloca ((Local)instr.Operand);  	break;  case Code.Dup:  	valueStack.copyTop ();  	break;  case Code.Ldc_I4:  	valueStack.push (new Int32Value ((int)instr.Operand));  	break;  case Code.Ldc_I4_S:  	valueStack.push (new Int32Value ((sbyte)instr.Operand));  	break;  case Code.Ldc_I8:  	valueStack.push (new Int64Value ((long)instr.Operand));  	break;  case Code.Ldc_R4:  	valueStack.push (new Real8Value ((float)instr.Operand));  	break;  case Code.Ldc_R8:  	valueStack.push (new Real8Value ((double)instr.Operand));  	break;  case Code.Ldc_I4_0:  	valueStack.push (Int32Value.zero);  	break;  case Code.Ldc_I4_1:  	valueStack.push (Int32Value.one);  	break;  case Code.Ldc_I4_2:  	valueStack.push (new Int32Value (2));  	break;  case Code.Ldc_I4_3:  	valueStack.push (new Int32Value (3));  	break;  case Code.Ldc_I4_4:  	valueStack.push (new Int32Value (4));  	break;  case Code.Ldc_I4_5:  	valueStack.push (new Int32Value (5));  	break;  case Code.Ldc_I4_6:  	valueStack.push (new Int32Value (6));  	break;  case Code.Ldc_I4_7:  	valueStack.push (new Int32Value (7));  	break;  case Code.Ldc_I4_8:  	valueStack.push (new Int32Value (8));  	break;  case Code.Ldc_I4_M1:  	valueStack.push (new Int32Value (-1));  	break;  case Code.Ldnull:  	valueStack.push (NullValue.Instance);  	break;  case Code.Ldstr:  	valueStack.push (new StringValue ((string)instr.Operand));  	break;  case Code.Box:  	valueStack.push (new BoxedValue (valueStack.pop ()));  	break;  case Code.Conv_U1:  	emulate_Conv_U1 (instr);  	break;  case Code.Conv_U2:  	emulate_Conv_U2 (instr);  	break;  case Code.Conv_U4:  	emulate_Conv_U4 (instr);  	break;  case Code.Conv_U8:  	emulate_Conv_U8 (instr);  	break;  case Code.Conv_I1:  	emulate_Conv_I1 (instr);  	break;  case Code.Conv_I2:  	emulate_Conv_I2 (instr);  	break;  case Code.Conv_I4:  	emulate_Conv_I4 (instr);  	break;  case Code.Conv_I8:  	emulate_Conv_I8 (instr);  	break;  case Code.Add:  	emulate_Add (instr);  	break;  case Code.Sub:  	emulate_Sub (instr);  	break;  case Code.Mul:  	emulate_Mul (instr);  	break;  case Code.Div:  	emulate_Div (instr);  	break;  case Code.Div_Un:  	emulate_Div_Un (instr);  	break;  case Code.Rem:  	emulate_Rem (instr);  	break;  case Code.Rem_Un:  	emulate_Rem_Un (instr);  	break;  case Code.Neg:  	emulate_Neg (instr);  	break;  case Code.And:  	emulate_And (instr);  	break;  case Code.Or:  	emulate_Or (instr);  	break;  case Code.Xor:  	emulate_Xor (instr);  	break;  case Code.Not:  	emulate_Not (instr);  	break;  case Code.Shl:  	emulate_Shl (instr);  	break;  case Code.Shr:  	emulate_Shr (instr);  	break;  case Code.Shr_Un:  	emulate_Shr_Un (instr);  	break;  case Code.Ceq:  	emulate_Ceq (instr);  	break;  case Code.Cgt:  	emulate_Cgt (instr);  	break;  case Code.Cgt_Un:  	emulate_Cgt_Un (instr);  	break;  case Code.Clt:  	emulate_Clt (instr);  	break;  case Code.Clt_Un:  	emulate_Clt_Un (instr);  	break;  case Code.Unbox_Any:  	emulate_Unbox_Any (instr);  	break;  case Code.Call:  	emulate_Call (instr);  	break;  case Code.Callvirt:  	emulate_Callvirt (instr);  	break;  case Code.Castclass:  	emulate_Castclass (instr);  	break;  case Code.Isinst:  	emulate_Isinst (instr);  	break;  case Code.Add_Ovf:  	emulateIntOps2 ();  	break;  case Code.Add_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Conv_Ovf_I1:  case Code.Conv_Ovf_I1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I2:  case Code.Conv_Ovf_I2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I4:  case Code.Conv_Ovf_I4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I8:  case Code.Conv_Ovf_I8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Conv_Ovf_U1:  case Code.Conv_Ovf_U1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Conv_Ovf_U2:  case Code.Conv_Ovf_U2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Conv_Ovf_U4:  case Code.Conv_Ovf_U4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_U8:  case Code.Conv_Ovf_U8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_I1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I8:  	valueStack.pop (2);  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_U1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldelem_U2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldelem_U4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem:  	valueStack.pop (2);  	valueStack.push (getUnknownValue (instr.Operand as ITypeDefOrRef));  	break;  case Code.Ldind_I1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I8:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldind_U1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldind_U2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldind_U4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldlen:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Sizeof:  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldfld:  	emulate_Ldfld (instr);  	break;  case Code.Ldsfld:  	emulate_Ldsfld (instr);  	break;  case Code.Ldftn:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldsflda:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldtoken:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldvirtftn:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Ldflda:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Unbox:  case Code.Conv_R_Un:  case Code.Conv_R4:  case Code.Conv_R8:  case Code.Arglist:  case Code.Beq:  case Code.Beq_S:  case Code.Bge:  case Code.Bge_S:  case Code.Bge_Un:  case Code.Bge_Un_S:  case Code.Bgt:  case Code.Bgt_S:  case Code.Bgt_Un:  case Code.Bgt_Un_S:  case Code.Ble:  case Code.Ble_S:  case Code.Ble_Un:  case Code.Ble_Un_S:  case Code.Blt:  case Code.Blt_S:  case Code.Blt_Un:  case Code.Blt_Un_S:  case Code.Bne_Un:  case Code.Bne_Un_S:  case Code.Brfalse:  case Code.Brfalse_S:  case Code.Brtrue:  case Code.Brtrue_S:  case Code.Br:  case Code.Br_S:  case Code.Break:  case Code.Calli:  case Code.Ckfinite:  case Code.Constrained:  case Code.Conv_I:  case Code.Conv_Ovf_I:  case Code.Conv_Ovf_I_Un:  case Code.Conv_Ovf_U:  case Code.Conv_Ovf_U_Un:  case Code.Conv_U:  case Code.Cpblk:  case Code.Cpobj:  case Code.Endfilter:  case Code.Endfinally:  case Code.Initblk:  case Code.Initobj:  case Code.Jmp:  case Code.Ldelema:  case Code.Ldelem_I:  case Code.Ldelem_R4:  case Code.Ldelem_R8:  case Code.Ldelem_Ref:  case Code.Ldind_I:  case Code.Ldind_R4:  case Code.Ldind_R8:  case Code.Ldind_Ref:  case Code.Ldobj:  case Code.Leave:  case Code.Leave_S:  case Code.Localloc:  case Code.Mkrefany:  case Code.Newarr:  case Code.Newobj:  case Code.Nop:  case Code.Pop:  case Code.Readonly:  case Code.Refanytype:  case Code.Refanyval:  case Code.Ret:  case Code.Rethrow:  case Code.Stelem:  case Code.Stelem_I:  case Code.Stelem_I1:  case Code.Stelem_I2:  case Code.Stelem_I4:  case Code.Stelem_I8:  case Code.Stelem_R4:  case Code.Stelem_R8:  case Code.Stelem_Ref:  case Code.Stfld:  case Code.Stind_I:  case Code.Stind_I1:  case Code.Stind_I2:  case Code.Stind_I4:  case Code.Stind_I8:  case Code.Stind_R4:  case Code.Stind_R8:  case Code.Stind_Ref:  case Code.Stobj:  case Code.Stsfld:  case Code.Switch:  case Code.Tailcall:  case Code.Throw:  case Code.Unaligned:  case Code.Volatile:  default:  	updateStack (instr);  	break;  }  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Starg:  case Code.Starg_S:  	emulate_Starg ((Parameter)instr.Operand);  	break;  case Code.Stloc:  case Code.Stloc_S:  	emulate_Stloc ((Local)instr.Operand);  	break;  case Code.Stloc_0:  	emulate_Stloc (0);  	break;  case Code.Stloc_1:  	emulate_Stloc (1);  	break;  case Code.Stloc_2:  	emulate_Stloc (2);  	break;  case Code.Stloc_3:  	emulate_Stloc (3);  	break;  case Code.Ldarg:  case Code.Ldarg_S:  	valueStack.push (getArg ((Parameter)instr.Operand));  	break;  case Code.Ldarg_0:  	valueStack.push (getArg (0));  	break;  case Code.Ldarg_1:  	valueStack.push (getArg (1));  	break;  case Code.Ldarg_2:  	valueStack.push (getArg (2));  	break;  case Code.Ldarg_3:  	valueStack.push (getArg (3));  	break;  case Code.Ldloc:  case Code.Ldloc_S:  	valueStack.push (getLocal ((Local)instr.Operand));  	break;  case Code.Ldloc_0:  	valueStack.push (getLocal (0));  	break;  case Code.Ldloc_1:  	valueStack.push (getLocal (1));  	break;  case Code.Ldloc_2:  	valueStack.push (getLocal (2));  	break;  case Code.Ldloc_3:  	valueStack.push (getLocal (3));  	break;  case Code.Ldarga:  case Code.Ldarga_S:  	emulate_Ldarga ((Parameter)instr.Operand);  	break;  case Code.Ldloca:  case Code.Ldloca_S:  	emulate_Ldloca ((Local)instr.Operand);  	break;  case Code.Dup:  	valueStack.copyTop ();  	break;  case Code.Ldc_I4:  	valueStack.push (new Int32Value ((int)instr.Operand));  	break;  case Code.Ldc_I4_S:  	valueStack.push (new Int32Value ((sbyte)instr.Operand));  	break;  case Code.Ldc_I8:  	valueStack.push (new Int64Value ((long)instr.Operand));  	break;  case Code.Ldc_R4:  	valueStack.push (new Real8Value ((float)instr.Operand));  	break;  case Code.Ldc_R8:  	valueStack.push (new Real8Value ((double)instr.Operand));  	break;  case Code.Ldc_I4_0:  	valueStack.push (Int32Value.zero);  	break;  case Code.Ldc_I4_1:  	valueStack.push (Int32Value.one);  	break;  case Code.Ldc_I4_2:  	valueStack.push (new Int32Value (2));  	break;  case Code.Ldc_I4_3:  	valueStack.push (new Int32Value (3));  	break;  case Code.Ldc_I4_4:  	valueStack.push (new Int32Value (4));  	break;  case Code.Ldc_I4_5:  	valueStack.push (new Int32Value (5));  	break;  case Code.Ldc_I4_6:  	valueStack.push (new Int32Value (6));  	break;  case Code.Ldc_I4_7:  	valueStack.push (new Int32Value (7));  	break;  case Code.Ldc_I4_8:  	valueStack.push (new Int32Value (8));  	break;  case Code.Ldc_I4_M1:  	valueStack.push (new Int32Value (-1));  	break;  case Code.Ldnull:  	valueStack.push (NullValue.Instance);  	break;  case Code.Ldstr:  	valueStack.push (new StringValue ((string)instr.Operand));  	break;  case Code.Box:  	valueStack.push (new BoxedValue (valueStack.pop ()));  	break;  case Code.Conv_U1:  	emulate_Conv_U1 (instr);  	break;  case Code.Conv_U2:  	emulate_Conv_U2 (instr);  	break;  case Code.Conv_U4:  	emulate_Conv_U4 (instr);  	break;  case Code.Conv_U8:  	emulate_Conv_U8 (instr);  	break;  case Code.Conv_I1:  	emulate_Conv_I1 (instr);  	break;  case Code.Conv_I2:  	emulate_Conv_I2 (instr);  	break;  case Code.Conv_I4:  	emulate_Conv_I4 (instr);  	break;  case Code.Conv_I8:  	emulate_Conv_I8 (instr);  	break;  case Code.Add:  	emulate_Add (instr);  	break;  case Code.Sub:  	emulate_Sub (instr);  	break;  case Code.Mul:  	emulate_Mul (instr);  	break;  case Code.Div:  	emulate_Div (instr);  	break;  case Code.Div_Un:  	emulate_Div_Un (instr);  	break;  case Code.Rem:  	emulate_Rem (instr);  	break;  case Code.Rem_Un:  	emulate_Rem_Un (instr);  	break;  case Code.Neg:  	emulate_Neg (instr);  	break;  case Code.And:  	emulate_And (instr);  	break;  case Code.Or:  	emulate_Or (instr);  	break;  case Code.Xor:  	emulate_Xor (instr);  	break;  case Code.Not:  	emulate_Not (instr);  	break;  case Code.Shl:  	emulate_Shl (instr);  	break;  case Code.Shr:  	emulate_Shr (instr);  	break;  case Code.Shr_Un:  	emulate_Shr_Un (instr);  	break;  case Code.Ceq:  	emulate_Ceq (instr);  	break;  case Code.Cgt:  	emulate_Cgt (instr);  	break;  case Code.Cgt_Un:  	emulate_Cgt_Un (instr);  	break;  case Code.Clt:  	emulate_Clt (instr);  	break;  case Code.Clt_Un:  	emulate_Clt_Un (instr);  	break;  case Code.Unbox_Any:  	emulate_Unbox_Any (instr);  	break;  case Code.Call:  	emulate_Call (instr);  	break;  case Code.Callvirt:  	emulate_Callvirt (instr);  	break;  case Code.Castclass:  	emulate_Castclass (instr);  	break;  case Code.Isinst:  	emulate_Isinst (instr);  	break;  case Code.Add_Ovf:  	emulateIntOps2 ();  	break;  case Code.Add_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Conv_Ovf_I1:  case Code.Conv_Ovf_I1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I2:  case Code.Conv_Ovf_I2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I4:  case Code.Conv_Ovf_I4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I8:  case Code.Conv_Ovf_I8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Conv_Ovf_U1:  case Code.Conv_Ovf_U1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Conv_Ovf_U2:  case Code.Conv_Ovf_U2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Conv_Ovf_U4:  case Code.Conv_Ovf_U4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_U8:  case Code.Conv_Ovf_U8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_I1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I8:  	valueStack.pop (2);  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_U1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldelem_U2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldelem_U4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem:  	valueStack.pop (2);  	valueStack.push (getUnknownValue (instr.Operand as ITypeDefOrRef));  	break;  case Code.Ldind_I1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I8:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldind_U1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldind_U2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldind_U4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldlen:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Sizeof:  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldfld:  	emulate_Ldfld (instr);  	break;  case Code.Ldsfld:  	emulate_Ldsfld (instr);  	break;  case Code.Ldftn:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldsflda:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldtoken:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldvirtftn:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Ldflda:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Unbox:  case Code.Conv_R_Un:  case Code.Conv_R4:  case Code.Conv_R8:  case Code.Arglist:  case Code.Beq:  case Code.Beq_S:  case Code.Bge:  case Code.Bge_S:  case Code.Bge_Un:  case Code.Bge_Un_S:  case Code.Bgt:  case Code.Bgt_S:  case Code.Bgt_Un:  case Code.Bgt_Un_S:  case Code.Ble:  case Code.Ble_S:  case Code.Ble_Un:  case Code.Ble_Un_S:  case Code.Blt:  case Code.Blt_S:  case Code.Blt_Un:  case Code.Blt_Un_S:  case Code.Bne_Un:  case Code.Bne_Un_S:  case Code.Brfalse:  case Code.Brfalse_S:  case Code.Brtrue:  case Code.Brtrue_S:  case Code.Br:  case Code.Br_S:  case Code.Break:  case Code.Calli:  case Code.Ckfinite:  case Code.Constrained:  case Code.Conv_I:  case Code.Conv_Ovf_I:  case Code.Conv_Ovf_I_Un:  case Code.Conv_Ovf_U:  case Code.Conv_Ovf_U_Un:  case Code.Conv_U:  case Code.Cpblk:  case Code.Cpobj:  case Code.Endfilter:  case Code.Endfinally:  case Code.Initblk:  case Code.Initobj:  case Code.Jmp:  case Code.Ldelema:  case Code.Ldelem_I:  case Code.Ldelem_R4:  case Code.Ldelem_R8:  case Code.Ldelem_Ref:  case Code.Ldind_I:  case Code.Ldind_R4:  case Code.Ldind_R8:  case Code.Ldind_Ref:  case Code.Ldobj:  case Code.Leave:  case Code.Leave_S:  case Code.Localloc:  case Code.Mkrefany:  case Code.Newarr:  case Code.Newobj:  case Code.Nop:  case Code.Pop:  case Code.Readonly:  case Code.Refanytype:  case Code.Refanyval:  case Code.Ret:  case Code.Rethrow:  case Code.Stelem:  case Code.Stelem_I:  case Code.Stelem_I1:  case Code.Stelem_I2:  case Code.Stelem_I4:  case Code.Stelem_I8:  case Code.Stelem_R4:  case Code.Stelem_R8:  case Code.Stelem_Ref:  case Code.Stfld:  case Code.Stind_I:  case Code.Stind_I1:  case Code.Stind_I2:  case Code.Stind_I4:  case Code.Stind_I8:  case Code.Stind_R4:  case Code.Stind_R8:  case Code.Stind_Ref:  case Code.Stobj:  case Code.Stsfld:  case Code.Switch:  case Code.Tailcall:  case Code.Throw:  case Code.Unaligned:  case Code.Volatile:  default:  	updateStack (instr);  	break;  }  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Starg:  case Code.Starg_S:  	emulate_Starg ((Parameter)instr.Operand);  	break;  case Code.Stloc:  case Code.Stloc_S:  	emulate_Stloc ((Local)instr.Operand);  	break;  case Code.Stloc_0:  	emulate_Stloc (0);  	break;  case Code.Stloc_1:  	emulate_Stloc (1);  	break;  case Code.Stloc_2:  	emulate_Stloc (2);  	break;  case Code.Stloc_3:  	emulate_Stloc (3);  	break;  case Code.Ldarg:  case Code.Ldarg_S:  	valueStack.push (getArg ((Parameter)instr.Operand));  	break;  case Code.Ldarg_0:  	valueStack.push (getArg (0));  	break;  case Code.Ldarg_1:  	valueStack.push (getArg (1));  	break;  case Code.Ldarg_2:  	valueStack.push (getArg (2));  	break;  case Code.Ldarg_3:  	valueStack.push (getArg (3));  	break;  case Code.Ldloc:  case Code.Ldloc_S:  	valueStack.push (getLocal ((Local)instr.Operand));  	break;  case Code.Ldloc_0:  	valueStack.push (getLocal (0));  	break;  case Code.Ldloc_1:  	valueStack.push (getLocal (1));  	break;  case Code.Ldloc_2:  	valueStack.push (getLocal (2));  	break;  case Code.Ldloc_3:  	valueStack.push (getLocal (3));  	break;  case Code.Ldarga:  case Code.Ldarga_S:  	emulate_Ldarga ((Parameter)instr.Operand);  	break;  case Code.Ldloca:  case Code.Ldloca_S:  	emulate_Ldloca ((Local)instr.Operand);  	break;  case Code.Dup:  	valueStack.copyTop ();  	break;  case Code.Ldc_I4:  	valueStack.push (new Int32Value ((int)instr.Operand));  	break;  case Code.Ldc_I4_S:  	valueStack.push (new Int32Value ((sbyte)instr.Operand));  	break;  case Code.Ldc_I8:  	valueStack.push (new Int64Value ((long)instr.Operand));  	break;  case Code.Ldc_R4:  	valueStack.push (new Real8Value ((float)instr.Operand));  	break;  case Code.Ldc_R8:  	valueStack.push (new Real8Value ((double)instr.Operand));  	break;  case Code.Ldc_I4_0:  	valueStack.push (Int32Value.zero);  	break;  case Code.Ldc_I4_1:  	valueStack.push (Int32Value.one);  	break;  case Code.Ldc_I4_2:  	valueStack.push (new Int32Value (2));  	break;  case Code.Ldc_I4_3:  	valueStack.push (new Int32Value (3));  	break;  case Code.Ldc_I4_4:  	valueStack.push (new Int32Value (4));  	break;  case Code.Ldc_I4_5:  	valueStack.push (new Int32Value (5));  	break;  case Code.Ldc_I4_6:  	valueStack.push (new Int32Value (6));  	break;  case Code.Ldc_I4_7:  	valueStack.push (new Int32Value (7));  	break;  case Code.Ldc_I4_8:  	valueStack.push (new Int32Value (8));  	break;  case Code.Ldc_I4_M1:  	valueStack.push (new Int32Value (-1));  	break;  case Code.Ldnull:  	valueStack.push (NullValue.Instance);  	break;  case Code.Ldstr:  	valueStack.push (new StringValue ((string)instr.Operand));  	break;  case Code.Box:  	valueStack.push (new BoxedValue (valueStack.pop ()));  	break;  case Code.Conv_U1:  	emulate_Conv_U1 (instr);  	break;  case Code.Conv_U2:  	emulate_Conv_U2 (instr);  	break;  case Code.Conv_U4:  	emulate_Conv_U4 (instr);  	break;  case Code.Conv_U8:  	emulate_Conv_U8 (instr);  	break;  case Code.Conv_I1:  	emulate_Conv_I1 (instr);  	break;  case Code.Conv_I2:  	emulate_Conv_I2 (instr);  	break;  case Code.Conv_I4:  	emulate_Conv_I4 (instr);  	break;  case Code.Conv_I8:  	emulate_Conv_I8 (instr);  	break;  case Code.Add:  	emulate_Add (instr);  	break;  case Code.Sub:  	emulate_Sub (instr);  	break;  case Code.Mul:  	emulate_Mul (instr);  	break;  case Code.Div:  	emulate_Div (instr);  	break;  case Code.Div_Un:  	emulate_Div_Un (instr);  	break;  case Code.Rem:  	emulate_Rem (instr);  	break;  case Code.Rem_Un:  	emulate_Rem_Un (instr);  	break;  case Code.Neg:  	emulate_Neg (instr);  	break;  case Code.And:  	emulate_And (instr);  	break;  case Code.Or:  	emulate_Or (instr);  	break;  case Code.Xor:  	emulate_Xor (instr);  	break;  case Code.Not:  	emulate_Not (instr);  	break;  case Code.Shl:  	emulate_Shl (instr);  	break;  case Code.Shr:  	emulate_Shr (instr);  	break;  case Code.Shr_Un:  	emulate_Shr_Un (instr);  	break;  case Code.Ceq:  	emulate_Ceq (instr);  	break;  case Code.Cgt:  	emulate_Cgt (instr);  	break;  case Code.Cgt_Un:  	emulate_Cgt_Un (instr);  	break;  case Code.Clt:  	emulate_Clt (instr);  	break;  case Code.Clt_Un:  	emulate_Clt_Un (instr);  	break;  case Code.Unbox_Any:  	emulate_Unbox_Any (instr);  	break;  case Code.Call:  	emulate_Call (instr);  	break;  case Code.Callvirt:  	emulate_Callvirt (instr);  	break;  case Code.Castclass:  	emulate_Castclass (instr);  	break;  case Code.Isinst:  	emulate_Isinst (instr);  	break;  case Code.Add_Ovf:  	emulateIntOps2 ();  	break;  case Code.Add_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Conv_Ovf_I1:  case Code.Conv_Ovf_I1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I2:  case Code.Conv_Ovf_I2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I4:  case Code.Conv_Ovf_I4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I8:  case Code.Conv_Ovf_I8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Conv_Ovf_U1:  case Code.Conv_Ovf_U1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Conv_Ovf_U2:  case Code.Conv_Ovf_U2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Conv_Ovf_U4:  case Code.Conv_Ovf_U4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_U8:  case Code.Conv_Ovf_U8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_I1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I8:  	valueStack.pop (2);  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_U1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldelem_U2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldelem_U4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem:  	valueStack.pop (2);  	valueStack.push (getUnknownValue (instr.Operand as ITypeDefOrRef));  	break;  case Code.Ldind_I1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I8:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldind_U1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldind_U2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldind_U4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldlen:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Sizeof:  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldfld:  	emulate_Ldfld (instr);  	break;  case Code.Ldsfld:  	emulate_Ldsfld (instr);  	break;  case Code.Ldftn:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldsflda:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldtoken:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldvirtftn:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Ldflda:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Unbox:  case Code.Conv_R_Un:  case Code.Conv_R4:  case Code.Conv_R8:  case Code.Arglist:  case Code.Beq:  case Code.Beq_S:  case Code.Bge:  case Code.Bge_S:  case Code.Bge_Un:  case Code.Bge_Un_S:  case Code.Bgt:  case Code.Bgt_S:  case Code.Bgt_Un:  case Code.Bgt_Un_S:  case Code.Ble:  case Code.Ble_S:  case Code.Ble_Un:  case Code.Ble_Un_S:  case Code.Blt:  case Code.Blt_S:  case Code.Blt_Un:  case Code.Blt_Un_S:  case Code.Bne_Un:  case Code.Bne_Un_S:  case Code.Brfalse:  case Code.Brfalse_S:  case Code.Brtrue:  case Code.Brtrue_S:  case Code.Br:  case Code.Br_S:  case Code.Break:  case Code.Calli:  case Code.Ckfinite:  case Code.Constrained:  case Code.Conv_I:  case Code.Conv_Ovf_I:  case Code.Conv_Ovf_I_Un:  case Code.Conv_Ovf_U:  case Code.Conv_Ovf_U_Un:  case Code.Conv_U:  case Code.Cpblk:  case Code.Cpobj:  case Code.Endfilter:  case Code.Endfinally:  case Code.Initblk:  case Code.Initobj:  case Code.Jmp:  case Code.Ldelema:  case Code.Ldelem_I:  case Code.Ldelem_R4:  case Code.Ldelem_R8:  case Code.Ldelem_Ref:  case Code.Ldind_I:  case Code.Ldind_R4:  case Code.Ldind_R8:  case Code.Ldind_Ref:  case Code.Ldobj:  case Code.Leave:  case Code.Leave_S:  case Code.Localloc:  case Code.Mkrefany:  case Code.Newarr:  case Code.Newobj:  case Code.Nop:  case Code.Pop:  case Code.Readonly:  case Code.Refanytype:  case Code.Refanyval:  case Code.Ret:  case Code.Rethrow:  case Code.Stelem:  case Code.Stelem_I:  case Code.Stelem_I1:  case Code.Stelem_I2:  case Code.Stelem_I4:  case Code.Stelem_I8:  case Code.Stelem_R4:  case Code.Stelem_R8:  case Code.Stelem_Ref:  case Code.Stfld:  case Code.Stind_I:  case Code.Stind_I1:  case Code.Stind_I2:  case Code.Stind_I4:  case Code.Stind_I8:  case Code.Stind_R4:  case Code.Stind_R8:  case Code.Stind_Ref:  case Code.Stobj:  case Code.Stsfld:  case Code.Switch:  case Code.Tailcall:  case Code.Throw:  case Code.Unaligned:  case Code.Volatile:  default:  	updateStack (instr);  	break;  }  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Starg:  case Code.Starg_S:  	emulate_Starg ((Parameter)instr.Operand);  	break;  case Code.Stloc:  case Code.Stloc_S:  	emulate_Stloc ((Local)instr.Operand);  	break;  case Code.Stloc_0:  	emulate_Stloc (0);  	break;  case Code.Stloc_1:  	emulate_Stloc (1);  	break;  case Code.Stloc_2:  	emulate_Stloc (2);  	break;  case Code.Stloc_3:  	emulate_Stloc (3);  	break;  case Code.Ldarg:  case Code.Ldarg_S:  	valueStack.push (getArg ((Parameter)instr.Operand));  	break;  case Code.Ldarg_0:  	valueStack.push (getArg (0));  	break;  case Code.Ldarg_1:  	valueStack.push (getArg (1));  	break;  case Code.Ldarg_2:  	valueStack.push (getArg (2));  	break;  case Code.Ldarg_3:  	valueStack.push (getArg (3));  	break;  case Code.Ldloc:  case Code.Ldloc_S:  	valueStack.push (getLocal ((Local)instr.Operand));  	break;  case Code.Ldloc_0:  	valueStack.push (getLocal (0));  	break;  case Code.Ldloc_1:  	valueStack.push (getLocal (1));  	break;  case Code.Ldloc_2:  	valueStack.push (getLocal (2));  	break;  case Code.Ldloc_3:  	valueStack.push (getLocal (3));  	break;  case Code.Ldarga:  case Code.Ldarga_S:  	emulate_Ldarga ((Parameter)instr.Operand);  	break;  case Code.Ldloca:  case Code.Ldloca_S:  	emulate_Ldloca ((Local)instr.Operand);  	break;  case Code.Dup:  	valueStack.copyTop ();  	break;  case Code.Ldc_I4:  	valueStack.push (new Int32Value ((int)instr.Operand));  	break;  case Code.Ldc_I4_S:  	valueStack.push (new Int32Value ((sbyte)instr.Operand));  	break;  case Code.Ldc_I8:  	valueStack.push (new Int64Value ((long)instr.Operand));  	break;  case Code.Ldc_R4:  	valueStack.push (new Real8Value ((float)instr.Operand));  	break;  case Code.Ldc_R8:  	valueStack.push (new Real8Value ((double)instr.Operand));  	break;  case Code.Ldc_I4_0:  	valueStack.push (Int32Value.zero);  	break;  case Code.Ldc_I4_1:  	valueStack.push (Int32Value.one);  	break;  case Code.Ldc_I4_2:  	valueStack.push (new Int32Value (2));  	break;  case Code.Ldc_I4_3:  	valueStack.push (new Int32Value (3));  	break;  case Code.Ldc_I4_4:  	valueStack.push (new Int32Value (4));  	break;  case Code.Ldc_I4_5:  	valueStack.push (new Int32Value (5));  	break;  case Code.Ldc_I4_6:  	valueStack.push (new Int32Value (6));  	break;  case Code.Ldc_I4_7:  	valueStack.push (new Int32Value (7));  	break;  case Code.Ldc_I4_8:  	valueStack.push (new Int32Value (8));  	break;  case Code.Ldc_I4_M1:  	valueStack.push (new Int32Value (-1));  	break;  case Code.Ldnull:  	valueStack.push (NullValue.Instance);  	break;  case Code.Ldstr:  	valueStack.push (new StringValue ((string)instr.Operand));  	break;  case Code.Box:  	valueStack.push (new BoxedValue (valueStack.pop ()));  	break;  case Code.Conv_U1:  	emulate_Conv_U1 (instr);  	break;  case Code.Conv_U2:  	emulate_Conv_U2 (instr);  	break;  case Code.Conv_U4:  	emulate_Conv_U4 (instr);  	break;  case Code.Conv_U8:  	emulate_Conv_U8 (instr);  	break;  case Code.Conv_I1:  	emulate_Conv_I1 (instr);  	break;  case Code.Conv_I2:  	emulate_Conv_I2 (instr);  	break;  case Code.Conv_I4:  	emulate_Conv_I4 (instr);  	break;  case Code.Conv_I8:  	emulate_Conv_I8 (instr);  	break;  case Code.Add:  	emulate_Add (instr);  	break;  case Code.Sub:  	emulate_Sub (instr);  	break;  case Code.Mul:  	emulate_Mul (instr);  	break;  case Code.Div:  	emulate_Div (instr);  	break;  case Code.Div_Un:  	emulate_Div_Un (instr);  	break;  case Code.Rem:  	emulate_Rem (instr);  	break;  case Code.Rem_Un:  	emulate_Rem_Un (instr);  	break;  case Code.Neg:  	emulate_Neg (instr);  	break;  case Code.And:  	emulate_And (instr);  	break;  case Code.Or:  	emulate_Or (instr);  	break;  case Code.Xor:  	emulate_Xor (instr);  	break;  case Code.Not:  	emulate_Not (instr);  	break;  case Code.Shl:  	emulate_Shl (instr);  	break;  case Code.Shr:  	emulate_Shr (instr);  	break;  case Code.Shr_Un:  	emulate_Shr_Un (instr);  	break;  case Code.Ceq:  	emulate_Ceq (instr);  	break;  case Code.Cgt:  	emulate_Cgt (instr);  	break;  case Code.Cgt_Un:  	emulate_Cgt_Un (instr);  	break;  case Code.Clt:  	emulate_Clt (instr);  	break;  case Code.Clt_Un:  	emulate_Clt_Un (instr);  	break;  case Code.Unbox_Any:  	emulate_Unbox_Any (instr);  	break;  case Code.Call:  	emulate_Call (instr);  	break;  case Code.Callvirt:  	emulate_Callvirt (instr);  	break;  case Code.Castclass:  	emulate_Castclass (instr);  	break;  case Code.Isinst:  	emulate_Isinst (instr);  	break;  case Code.Add_Ovf:  	emulateIntOps2 ();  	break;  case Code.Add_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Conv_Ovf_I1:  case Code.Conv_Ovf_I1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I2:  case Code.Conv_Ovf_I2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I4:  case Code.Conv_Ovf_I4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I8:  case Code.Conv_Ovf_I8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Conv_Ovf_U1:  case Code.Conv_Ovf_U1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Conv_Ovf_U2:  case Code.Conv_Ovf_U2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Conv_Ovf_U4:  case Code.Conv_Ovf_U4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_U8:  case Code.Conv_Ovf_U8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_I1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I8:  	valueStack.pop (2);  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_U1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldelem_U2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldelem_U4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem:  	valueStack.pop (2);  	valueStack.push (getUnknownValue (instr.Operand as ITypeDefOrRef));  	break;  case Code.Ldind_I1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I8:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldind_U1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldind_U2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldind_U4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldlen:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Sizeof:  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldfld:  	emulate_Ldfld (instr);  	break;  case Code.Ldsfld:  	emulate_Ldsfld (instr);  	break;  case Code.Ldftn:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldsflda:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldtoken:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldvirtftn:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Ldflda:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Unbox:  case Code.Conv_R_Un:  case Code.Conv_R4:  case Code.Conv_R8:  case Code.Arglist:  case Code.Beq:  case Code.Beq_S:  case Code.Bge:  case Code.Bge_S:  case Code.Bge_Un:  case Code.Bge_Un_S:  case Code.Bgt:  case Code.Bgt_S:  case Code.Bgt_Un:  case Code.Bgt_Un_S:  case Code.Ble:  case Code.Ble_S:  case Code.Ble_Un:  case Code.Ble_Un_S:  case Code.Blt:  case Code.Blt_S:  case Code.Blt_Un:  case Code.Blt_Un_S:  case Code.Bne_Un:  case Code.Bne_Un_S:  case Code.Brfalse:  case Code.Brfalse_S:  case Code.Brtrue:  case Code.Brtrue_S:  case Code.Br:  case Code.Br_S:  case Code.Break:  case Code.Calli:  case Code.Ckfinite:  case Code.Constrained:  case Code.Conv_I:  case Code.Conv_Ovf_I:  case Code.Conv_Ovf_I_Un:  case Code.Conv_Ovf_U:  case Code.Conv_Ovf_U_Un:  case Code.Conv_U:  case Code.Cpblk:  case Code.Cpobj:  case Code.Endfilter:  case Code.Endfinally:  case Code.Initblk:  case Code.Initobj:  case Code.Jmp:  case Code.Ldelema:  case Code.Ldelem_I:  case Code.Ldelem_R4:  case Code.Ldelem_R8:  case Code.Ldelem_Ref:  case Code.Ldind_I:  case Code.Ldind_R4:  case Code.Ldind_R8:  case Code.Ldind_Ref:  case Code.Ldobj:  case Code.Leave:  case Code.Leave_S:  case Code.Localloc:  case Code.Mkrefany:  case Code.Newarr:  case Code.Newobj:  case Code.Nop:  case Code.Pop:  case Code.Readonly:  case Code.Refanytype:  case Code.Refanyval:  case Code.Ret:  case Code.Rethrow:  case Code.Stelem:  case Code.Stelem_I:  case Code.Stelem_I1:  case Code.Stelem_I2:  case Code.Stelem_I4:  case Code.Stelem_I8:  case Code.Stelem_R4:  case Code.Stelem_R8:  case Code.Stelem_Ref:  case Code.Stfld:  case Code.Stind_I:  case Code.Stind_I1:  case Code.Stind_I2:  case Code.Stind_I4:  case Code.Stind_I8:  case Code.Stind_R4:  case Code.Stind_R8:  case Code.Stind_Ref:  case Code.Stobj:  case Code.Stsfld:  case Code.Switch:  case Code.Tailcall:  case Code.Throw:  case Code.Unaligned:  case Code.Volatile:  default:  	updateStack (instr);  	break;  }  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Starg:  case Code.Starg_S:  	emulate_Starg ((Parameter)instr.Operand);  	break;  case Code.Stloc:  case Code.Stloc_S:  	emulate_Stloc ((Local)instr.Operand);  	break;  case Code.Stloc_0:  	emulate_Stloc (0);  	break;  case Code.Stloc_1:  	emulate_Stloc (1);  	break;  case Code.Stloc_2:  	emulate_Stloc (2);  	break;  case Code.Stloc_3:  	emulate_Stloc (3);  	break;  case Code.Ldarg:  case Code.Ldarg_S:  	valueStack.push (getArg ((Parameter)instr.Operand));  	break;  case Code.Ldarg_0:  	valueStack.push (getArg (0));  	break;  case Code.Ldarg_1:  	valueStack.push (getArg (1));  	break;  case Code.Ldarg_2:  	valueStack.push (getArg (2));  	break;  case Code.Ldarg_3:  	valueStack.push (getArg (3));  	break;  case Code.Ldloc:  case Code.Ldloc_S:  	valueStack.push (getLocal ((Local)instr.Operand));  	break;  case Code.Ldloc_0:  	valueStack.push (getLocal (0));  	break;  case Code.Ldloc_1:  	valueStack.push (getLocal (1));  	break;  case Code.Ldloc_2:  	valueStack.push (getLocal (2));  	break;  case Code.Ldloc_3:  	valueStack.push (getLocal (3));  	break;  case Code.Ldarga:  case Code.Ldarga_S:  	emulate_Ldarga ((Parameter)instr.Operand);  	break;  case Code.Ldloca:  case Code.Ldloca_S:  	emulate_Ldloca ((Local)instr.Operand);  	break;  case Code.Dup:  	valueStack.copyTop ();  	break;  case Code.Ldc_I4:  	valueStack.push (new Int32Value ((int)instr.Operand));  	break;  case Code.Ldc_I4_S:  	valueStack.push (new Int32Value ((sbyte)instr.Operand));  	break;  case Code.Ldc_I8:  	valueStack.push (new Int64Value ((long)instr.Operand));  	break;  case Code.Ldc_R4:  	valueStack.push (new Real8Value ((float)instr.Operand));  	break;  case Code.Ldc_R8:  	valueStack.push (new Real8Value ((double)instr.Operand));  	break;  case Code.Ldc_I4_0:  	valueStack.push (Int32Value.zero);  	break;  case Code.Ldc_I4_1:  	valueStack.push (Int32Value.one);  	break;  case Code.Ldc_I4_2:  	valueStack.push (new Int32Value (2));  	break;  case Code.Ldc_I4_3:  	valueStack.push (new Int32Value (3));  	break;  case Code.Ldc_I4_4:  	valueStack.push (new Int32Value (4));  	break;  case Code.Ldc_I4_5:  	valueStack.push (new Int32Value (5));  	break;  case Code.Ldc_I4_6:  	valueStack.push (new Int32Value (6));  	break;  case Code.Ldc_I4_7:  	valueStack.push (new Int32Value (7));  	break;  case Code.Ldc_I4_8:  	valueStack.push (new Int32Value (8));  	break;  case Code.Ldc_I4_M1:  	valueStack.push (new Int32Value (-1));  	break;  case Code.Ldnull:  	valueStack.push (NullValue.Instance);  	break;  case Code.Ldstr:  	valueStack.push (new StringValue ((string)instr.Operand));  	break;  case Code.Box:  	valueStack.push (new BoxedValue (valueStack.pop ()));  	break;  case Code.Conv_U1:  	emulate_Conv_U1 (instr);  	break;  case Code.Conv_U2:  	emulate_Conv_U2 (instr);  	break;  case Code.Conv_U4:  	emulate_Conv_U4 (instr);  	break;  case Code.Conv_U8:  	emulate_Conv_U8 (instr);  	break;  case Code.Conv_I1:  	emulate_Conv_I1 (instr);  	break;  case Code.Conv_I2:  	emulate_Conv_I2 (instr);  	break;  case Code.Conv_I4:  	emulate_Conv_I4 (instr);  	break;  case Code.Conv_I8:  	emulate_Conv_I8 (instr);  	break;  case Code.Add:  	emulate_Add (instr);  	break;  case Code.Sub:  	emulate_Sub (instr);  	break;  case Code.Mul:  	emulate_Mul (instr);  	break;  case Code.Div:  	emulate_Div (instr);  	break;  case Code.Div_Un:  	emulate_Div_Un (instr);  	break;  case Code.Rem:  	emulate_Rem (instr);  	break;  case Code.Rem_Un:  	emulate_Rem_Un (instr);  	break;  case Code.Neg:  	emulate_Neg (instr);  	break;  case Code.And:  	emulate_And (instr);  	break;  case Code.Or:  	emulate_Or (instr);  	break;  case Code.Xor:  	emulate_Xor (instr);  	break;  case Code.Not:  	emulate_Not (instr);  	break;  case Code.Shl:  	emulate_Shl (instr);  	break;  case Code.Shr:  	emulate_Shr (instr);  	break;  case Code.Shr_Un:  	emulate_Shr_Un (instr);  	break;  case Code.Ceq:  	emulate_Ceq (instr);  	break;  case Code.Cgt:  	emulate_Cgt (instr);  	break;  case Code.Cgt_Un:  	emulate_Cgt_Un (instr);  	break;  case Code.Clt:  	emulate_Clt (instr);  	break;  case Code.Clt_Un:  	emulate_Clt_Un (instr);  	break;  case Code.Unbox_Any:  	emulate_Unbox_Any (instr);  	break;  case Code.Call:  	emulate_Call (instr);  	break;  case Code.Callvirt:  	emulate_Callvirt (instr);  	break;  case Code.Castclass:  	emulate_Castclass (instr);  	break;  case Code.Isinst:  	emulate_Isinst (instr);  	break;  case Code.Add_Ovf:  	emulateIntOps2 ();  	break;  case Code.Add_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Conv_Ovf_I1:  case Code.Conv_Ovf_I1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I2:  case Code.Conv_Ovf_I2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I4:  case Code.Conv_Ovf_I4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I8:  case Code.Conv_Ovf_I8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Conv_Ovf_U1:  case Code.Conv_Ovf_U1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Conv_Ovf_U2:  case Code.Conv_Ovf_U2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Conv_Ovf_U4:  case Code.Conv_Ovf_U4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_U8:  case Code.Conv_Ovf_U8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_I1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I8:  	valueStack.pop (2);  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_U1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldelem_U2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldelem_U4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem:  	valueStack.pop (2);  	valueStack.push (getUnknownValue (instr.Operand as ITypeDefOrRef));  	break;  case Code.Ldind_I1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I8:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldind_U1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldind_U2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldind_U4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldlen:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Sizeof:  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldfld:  	emulate_Ldfld (instr);  	break;  case Code.Ldsfld:  	emulate_Ldsfld (instr);  	break;  case Code.Ldftn:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldsflda:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldtoken:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldvirtftn:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Ldflda:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Unbox:  case Code.Conv_R_Un:  case Code.Conv_R4:  case Code.Conv_R8:  case Code.Arglist:  case Code.Beq:  case Code.Beq_S:  case Code.Bge:  case Code.Bge_S:  case Code.Bge_Un:  case Code.Bge_Un_S:  case Code.Bgt:  case Code.Bgt_S:  case Code.Bgt_Un:  case Code.Bgt_Un_S:  case Code.Ble:  case Code.Ble_S:  case Code.Ble_Un:  case Code.Ble_Un_S:  case Code.Blt:  case Code.Blt_S:  case Code.Blt_Un:  case Code.Blt_Un_S:  case Code.Bne_Un:  case Code.Bne_Un_S:  case Code.Brfalse:  case Code.Brfalse_S:  case Code.Brtrue:  case Code.Brtrue_S:  case Code.Br:  case Code.Br_S:  case Code.Break:  case Code.Calli:  case Code.Ckfinite:  case Code.Constrained:  case Code.Conv_I:  case Code.Conv_Ovf_I:  case Code.Conv_Ovf_I_Un:  case Code.Conv_Ovf_U:  case Code.Conv_Ovf_U_Un:  case Code.Conv_U:  case Code.Cpblk:  case Code.Cpobj:  case Code.Endfilter:  case Code.Endfinally:  case Code.Initblk:  case Code.Initobj:  case Code.Jmp:  case Code.Ldelema:  case Code.Ldelem_I:  case Code.Ldelem_R4:  case Code.Ldelem_R8:  case Code.Ldelem_Ref:  case Code.Ldind_I:  case Code.Ldind_R4:  case Code.Ldind_R8:  case Code.Ldind_Ref:  case Code.Ldobj:  case Code.Leave:  case Code.Leave_S:  case Code.Localloc:  case Code.Mkrefany:  case Code.Newarr:  case Code.Newobj:  case Code.Nop:  case Code.Pop:  case Code.Readonly:  case Code.Refanytype:  case Code.Refanyval:  case Code.Ret:  case Code.Rethrow:  case Code.Stelem:  case Code.Stelem_I:  case Code.Stelem_I1:  case Code.Stelem_I2:  case Code.Stelem_I4:  case Code.Stelem_I8:  case Code.Stelem_R4:  case Code.Stelem_R8:  case Code.Stelem_Ref:  case Code.Stfld:  case Code.Stind_I:  case Code.Stind_I1:  case Code.Stind_I2:  case Code.Stind_I4:  case Code.Stind_I8:  case Code.Stind_R4:  case Code.Stind_R8:  case Code.Stind_Ref:  case Code.Stobj:  case Code.Stsfld:  case Code.Switch:  case Code.Tailcall:  case Code.Throw:  case Code.Unaligned:  case Code.Volatile:  default:  	updateStack (instr);  	break;  }  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Starg:  case Code.Starg_S:  	emulate_Starg ((Parameter)instr.Operand);  	break;  case Code.Stloc:  case Code.Stloc_S:  	emulate_Stloc ((Local)instr.Operand);  	break;  case Code.Stloc_0:  	emulate_Stloc (0);  	break;  case Code.Stloc_1:  	emulate_Stloc (1);  	break;  case Code.Stloc_2:  	emulate_Stloc (2);  	break;  case Code.Stloc_3:  	emulate_Stloc (3);  	break;  case Code.Ldarg:  case Code.Ldarg_S:  	valueStack.push (getArg ((Parameter)instr.Operand));  	break;  case Code.Ldarg_0:  	valueStack.push (getArg (0));  	break;  case Code.Ldarg_1:  	valueStack.push (getArg (1));  	break;  case Code.Ldarg_2:  	valueStack.push (getArg (2));  	break;  case Code.Ldarg_3:  	valueStack.push (getArg (3));  	break;  case Code.Ldloc:  case Code.Ldloc_S:  	valueStack.push (getLocal ((Local)instr.Operand));  	break;  case Code.Ldloc_0:  	valueStack.push (getLocal (0));  	break;  case Code.Ldloc_1:  	valueStack.push (getLocal (1));  	break;  case Code.Ldloc_2:  	valueStack.push (getLocal (2));  	break;  case Code.Ldloc_3:  	valueStack.push (getLocal (3));  	break;  case Code.Ldarga:  case Code.Ldarga_S:  	emulate_Ldarga ((Parameter)instr.Operand);  	break;  case Code.Ldloca:  case Code.Ldloca_S:  	emulate_Ldloca ((Local)instr.Operand);  	break;  case Code.Dup:  	valueStack.copyTop ();  	break;  case Code.Ldc_I4:  	valueStack.push (new Int32Value ((int)instr.Operand));  	break;  case Code.Ldc_I4_S:  	valueStack.push (new Int32Value ((sbyte)instr.Operand));  	break;  case Code.Ldc_I8:  	valueStack.push (new Int64Value ((long)instr.Operand));  	break;  case Code.Ldc_R4:  	valueStack.push (new Real8Value ((float)instr.Operand));  	break;  case Code.Ldc_R8:  	valueStack.push (new Real8Value ((double)instr.Operand));  	break;  case Code.Ldc_I4_0:  	valueStack.push (Int32Value.zero);  	break;  case Code.Ldc_I4_1:  	valueStack.push (Int32Value.one);  	break;  case Code.Ldc_I4_2:  	valueStack.push (new Int32Value (2));  	break;  case Code.Ldc_I4_3:  	valueStack.push (new Int32Value (3));  	break;  case Code.Ldc_I4_4:  	valueStack.push (new Int32Value (4));  	break;  case Code.Ldc_I4_5:  	valueStack.push (new Int32Value (5));  	break;  case Code.Ldc_I4_6:  	valueStack.push (new Int32Value (6));  	break;  case Code.Ldc_I4_7:  	valueStack.push (new Int32Value (7));  	break;  case Code.Ldc_I4_8:  	valueStack.push (new Int32Value (8));  	break;  case Code.Ldc_I4_M1:  	valueStack.push (new Int32Value (-1));  	break;  case Code.Ldnull:  	valueStack.push (NullValue.Instance);  	break;  case Code.Ldstr:  	valueStack.push (new StringValue ((string)instr.Operand));  	break;  case Code.Box:  	valueStack.push (new BoxedValue (valueStack.pop ()));  	break;  case Code.Conv_U1:  	emulate_Conv_U1 (instr);  	break;  case Code.Conv_U2:  	emulate_Conv_U2 (instr);  	break;  case Code.Conv_U4:  	emulate_Conv_U4 (instr);  	break;  case Code.Conv_U8:  	emulate_Conv_U8 (instr);  	break;  case Code.Conv_I1:  	emulate_Conv_I1 (instr);  	break;  case Code.Conv_I2:  	emulate_Conv_I2 (instr);  	break;  case Code.Conv_I4:  	emulate_Conv_I4 (instr);  	break;  case Code.Conv_I8:  	emulate_Conv_I8 (instr);  	break;  case Code.Add:  	emulate_Add (instr);  	break;  case Code.Sub:  	emulate_Sub (instr);  	break;  case Code.Mul:  	emulate_Mul (instr);  	break;  case Code.Div:  	emulate_Div (instr);  	break;  case Code.Div_Un:  	emulate_Div_Un (instr);  	break;  case Code.Rem:  	emulate_Rem (instr);  	break;  case Code.Rem_Un:  	emulate_Rem_Un (instr);  	break;  case Code.Neg:  	emulate_Neg (instr);  	break;  case Code.And:  	emulate_And (instr);  	break;  case Code.Or:  	emulate_Or (instr);  	break;  case Code.Xor:  	emulate_Xor (instr);  	break;  case Code.Not:  	emulate_Not (instr);  	break;  case Code.Shl:  	emulate_Shl (instr);  	break;  case Code.Shr:  	emulate_Shr (instr);  	break;  case Code.Shr_Un:  	emulate_Shr_Un (instr);  	break;  case Code.Ceq:  	emulate_Ceq (instr);  	break;  case Code.Cgt:  	emulate_Cgt (instr);  	break;  case Code.Cgt_Un:  	emulate_Cgt_Un (instr);  	break;  case Code.Clt:  	emulate_Clt (instr);  	break;  case Code.Clt_Un:  	emulate_Clt_Un (instr);  	break;  case Code.Unbox_Any:  	emulate_Unbox_Any (instr);  	break;  case Code.Call:  	emulate_Call (instr);  	break;  case Code.Callvirt:  	emulate_Callvirt (instr);  	break;  case Code.Castclass:  	emulate_Castclass (instr);  	break;  case Code.Isinst:  	emulate_Isinst (instr);  	break;  case Code.Add_Ovf:  	emulateIntOps2 ();  	break;  case Code.Add_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Conv_Ovf_I1:  case Code.Conv_Ovf_I1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I2:  case Code.Conv_Ovf_I2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I4:  case Code.Conv_Ovf_I4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I8:  case Code.Conv_Ovf_I8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Conv_Ovf_U1:  case Code.Conv_Ovf_U1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Conv_Ovf_U2:  case Code.Conv_Ovf_U2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Conv_Ovf_U4:  case Code.Conv_Ovf_U4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_U8:  case Code.Conv_Ovf_U8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_I1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I8:  	valueStack.pop (2);  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_U1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldelem_U2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldelem_U4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem:  	valueStack.pop (2);  	valueStack.push (getUnknownValue (instr.Operand as ITypeDefOrRef));  	break;  case Code.Ldind_I1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I8:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldind_U1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldind_U2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldind_U4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldlen:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Sizeof:  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldfld:  	emulate_Ldfld (instr);  	break;  case Code.Ldsfld:  	emulate_Ldsfld (instr);  	break;  case Code.Ldftn:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldsflda:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldtoken:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldvirtftn:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Ldflda:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Unbox:  case Code.Conv_R_Un:  case Code.Conv_R4:  case Code.Conv_R8:  case Code.Arglist:  case Code.Beq:  case Code.Beq_S:  case Code.Bge:  case Code.Bge_S:  case Code.Bge_Un:  case Code.Bge_Un_S:  case Code.Bgt:  case Code.Bgt_S:  case Code.Bgt_Un:  case Code.Bgt_Un_S:  case Code.Ble:  case Code.Ble_S:  case Code.Ble_Un:  case Code.Ble_Un_S:  case Code.Blt:  case Code.Blt_S:  case Code.Blt_Un:  case Code.Blt_Un_S:  case Code.Bne_Un:  case Code.Bne_Un_S:  case Code.Brfalse:  case Code.Brfalse_S:  case Code.Brtrue:  case Code.Brtrue_S:  case Code.Br:  case Code.Br_S:  case Code.Break:  case Code.Calli:  case Code.Ckfinite:  case Code.Constrained:  case Code.Conv_I:  case Code.Conv_Ovf_I:  case Code.Conv_Ovf_I_Un:  case Code.Conv_Ovf_U:  case Code.Conv_Ovf_U_Un:  case Code.Conv_U:  case Code.Cpblk:  case Code.Cpobj:  case Code.Endfilter:  case Code.Endfinally:  case Code.Initblk:  case Code.Initobj:  case Code.Jmp:  case Code.Ldelema:  case Code.Ldelem_I:  case Code.Ldelem_R4:  case Code.Ldelem_R8:  case Code.Ldelem_Ref:  case Code.Ldind_I:  case Code.Ldind_R4:  case Code.Ldind_R8:  case Code.Ldind_Ref:  case Code.Ldobj:  case Code.Leave:  case Code.Leave_S:  case Code.Localloc:  case Code.Mkrefany:  case Code.Newarr:  case Code.Newobj:  case Code.Nop:  case Code.Pop:  case Code.Readonly:  case Code.Refanytype:  case Code.Refanyval:  case Code.Ret:  case Code.Rethrow:  case Code.Stelem:  case Code.Stelem_I:  case Code.Stelem_I1:  case Code.Stelem_I2:  case Code.Stelem_I4:  case Code.Stelem_I8:  case Code.Stelem_R4:  case Code.Stelem_R8:  case Code.Stelem_Ref:  case Code.Stfld:  case Code.Stind_I:  case Code.Stind_I1:  case Code.Stind_I2:  case Code.Stind_I4:  case Code.Stind_I8:  case Code.Stind_R4:  case Code.Stind_R8:  case Code.Stind_Ref:  case Code.Stobj:  case Code.Stsfld:  case Code.Switch:  case Code.Tailcall:  case Code.Throw:  case Code.Unaligned:  case Code.Volatile:  default:  	updateStack (instr);  	break;  }  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Starg:  case Code.Starg_S:  	emulate_Starg ((Parameter)instr.Operand);  	break;  case Code.Stloc:  case Code.Stloc_S:  	emulate_Stloc ((Local)instr.Operand);  	break;  case Code.Stloc_0:  	emulate_Stloc (0);  	break;  case Code.Stloc_1:  	emulate_Stloc (1);  	break;  case Code.Stloc_2:  	emulate_Stloc (2);  	break;  case Code.Stloc_3:  	emulate_Stloc (3);  	break;  case Code.Ldarg:  case Code.Ldarg_S:  	valueStack.push (getArg ((Parameter)instr.Operand));  	break;  case Code.Ldarg_0:  	valueStack.push (getArg (0));  	break;  case Code.Ldarg_1:  	valueStack.push (getArg (1));  	break;  case Code.Ldarg_2:  	valueStack.push (getArg (2));  	break;  case Code.Ldarg_3:  	valueStack.push (getArg (3));  	break;  case Code.Ldloc:  case Code.Ldloc_S:  	valueStack.push (getLocal ((Local)instr.Operand));  	break;  case Code.Ldloc_0:  	valueStack.push (getLocal (0));  	break;  case Code.Ldloc_1:  	valueStack.push (getLocal (1));  	break;  case Code.Ldloc_2:  	valueStack.push (getLocal (2));  	break;  case Code.Ldloc_3:  	valueStack.push (getLocal (3));  	break;  case Code.Ldarga:  case Code.Ldarga_S:  	emulate_Ldarga ((Parameter)instr.Operand);  	break;  case Code.Ldloca:  case Code.Ldloca_S:  	emulate_Ldloca ((Local)instr.Operand);  	break;  case Code.Dup:  	valueStack.copyTop ();  	break;  case Code.Ldc_I4:  	valueStack.push (new Int32Value ((int)instr.Operand));  	break;  case Code.Ldc_I4_S:  	valueStack.push (new Int32Value ((sbyte)instr.Operand));  	break;  case Code.Ldc_I8:  	valueStack.push (new Int64Value ((long)instr.Operand));  	break;  case Code.Ldc_R4:  	valueStack.push (new Real8Value ((float)instr.Operand));  	break;  case Code.Ldc_R8:  	valueStack.push (new Real8Value ((double)instr.Operand));  	break;  case Code.Ldc_I4_0:  	valueStack.push (Int32Value.zero);  	break;  case Code.Ldc_I4_1:  	valueStack.push (Int32Value.one);  	break;  case Code.Ldc_I4_2:  	valueStack.push (new Int32Value (2));  	break;  case Code.Ldc_I4_3:  	valueStack.push (new Int32Value (3));  	break;  case Code.Ldc_I4_4:  	valueStack.push (new Int32Value (4));  	break;  case Code.Ldc_I4_5:  	valueStack.push (new Int32Value (5));  	break;  case Code.Ldc_I4_6:  	valueStack.push (new Int32Value (6));  	break;  case Code.Ldc_I4_7:  	valueStack.push (new Int32Value (7));  	break;  case Code.Ldc_I4_8:  	valueStack.push (new Int32Value (8));  	break;  case Code.Ldc_I4_M1:  	valueStack.push (new Int32Value (-1));  	break;  case Code.Ldnull:  	valueStack.push (NullValue.Instance);  	break;  case Code.Ldstr:  	valueStack.push (new StringValue ((string)instr.Operand));  	break;  case Code.Box:  	valueStack.push (new BoxedValue (valueStack.pop ()));  	break;  case Code.Conv_U1:  	emulate_Conv_U1 (instr);  	break;  case Code.Conv_U2:  	emulate_Conv_U2 (instr);  	break;  case Code.Conv_U4:  	emulate_Conv_U4 (instr);  	break;  case Code.Conv_U8:  	emulate_Conv_U8 (instr);  	break;  case Code.Conv_I1:  	emulate_Conv_I1 (instr);  	break;  case Code.Conv_I2:  	emulate_Conv_I2 (instr);  	break;  case Code.Conv_I4:  	emulate_Conv_I4 (instr);  	break;  case Code.Conv_I8:  	emulate_Conv_I8 (instr);  	break;  case Code.Add:  	emulate_Add (instr);  	break;  case Code.Sub:  	emulate_Sub (instr);  	break;  case Code.Mul:  	emulate_Mul (instr);  	break;  case Code.Div:  	emulate_Div (instr);  	break;  case Code.Div_Un:  	emulate_Div_Un (instr);  	break;  case Code.Rem:  	emulate_Rem (instr);  	break;  case Code.Rem_Un:  	emulate_Rem_Un (instr);  	break;  case Code.Neg:  	emulate_Neg (instr);  	break;  case Code.And:  	emulate_And (instr);  	break;  case Code.Or:  	emulate_Or (instr);  	break;  case Code.Xor:  	emulate_Xor (instr);  	break;  case Code.Not:  	emulate_Not (instr);  	break;  case Code.Shl:  	emulate_Shl (instr);  	break;  case Code.Shr:  	emulate_Shr (instr);  	break;  case Code.Shr_Un:  	emulate_Shr_Un (instr);  	break;  case Code.Ceq:  	emulate_Ceq (instr);  	break;  case Code.Cgt:  	emulate_Cgt (instr);  	break;  case Code.Cgt_Un:  	emulate_Cgt_Un (instr);  	break;  case Code.Clt:  	emulate_Clt (instr);  	break;  case Code.Clt_Un:  	emulate_Clt_Un (instr);  	break;  case Code.Unbox_Any:  	emulate_Unbox_Any (instr);  	break;  case Code.Call:  	emulate_Call (instr);  	break;  case Code.Callvirt:  	emulate_Callvirt (instr);  	break;  case Code.Castclass:  	emulate_Castclass (instr);  	break;  case Code.Isinst:  	emulate_Isinst (instr);  	break;  case Code.Add_Ovf:  	emulateIntOps2 ();  	break;  case Code.Add_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Conv_Ovf_I1:  case Code.Conv_Ovf_I1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I2:  case Code.Conv_Ovf_I2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I4:  case Code.Conv_Ovf_I4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I8:  case Code.Conv_Ovf_I8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Conv_Ovf_U1:  case Code.Conv_Ovf_U1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Conv_Ovf_U2:  case Code.Conv_Ovf_U2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Conv_Ovf_U4:  case Code.Conv_Ovf_U4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_U8:  case Code.Conv_Ovf_U8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_I1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I8:  	valueStack.pop (2);  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_U1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldelem_U2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldelem_U4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem:  	valueStack.pop (2);  	valueStack.push (getUnknownValue (instr.Operand as ITypeDefOrRef));  	break;  case Code.Ldind_I1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I8:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldind_U1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldind_U2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldind_U4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldlen:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Sizeof:  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldfld:  	emulate_Ldfld (instr);  	break;  case Code.Ldsfld:  	emulate_Ldsfld (instr);  	break;  case Code.Ldftn:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldsflda:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldtoken:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldvirtftn:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Ldflda:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Unbox:  case Code.Conv_R_Un:  case Code.Conv_R4:  case Code.Conv_R8:  case Code.Arglist:  case Code.Beq:  case Code.Beq_S:  case Code.Bge:  case Code.Bge_S:  case Code.Bge_Un:  case Code.Bge_Un_S:  case Code.Bgt:  case Code.Bgt_S:  case Code.Bgt_Un:  case Code.Bgt_Un_S:  case Code.Ble:  case Code.Ble_S:  case Code.Ble_Un:  case Code.Ble_Un_S:  case Code.Blt:  case Code.Blt_S:  case Code.Blt_Un:  case Code.Blt_Un_S:  case Code.Bne_Un:  case Code.Bne_Un_S:  case Code.Brfalse:  case Code.Brfalse_S:  case Code.Brtrue:  case Code.Brtrue_S:  case Code.Br:  case Code.Br_S:  case Code.Break:  case Code.Calli:  case Code.Ckfinite:  case Code.Constrained:  case Code.Conv_I:  case Code.Conv_Ovf_I:  case Code.Conv_Ovf_I_Un:  case Code.Conv_Ovf_U:  case Code.Conv_Ovf_U_Un:  case Code.Conv_U:  case Code.Cpblk:  case Code.Cpobj:  case Code.Endfilter:  case Code.Endfinally:  case Code.Initblk:  case Code.Initobj:  case Code.Jmp:  case Code.Ldelema:  case Code.Ldelem_I:  case Code.Ldelem_R4:  case Code.Ldelem_R8:  case Code.Ldelem_Ref:  case Code.Ldind_I:  case Code.Ldind_R4:  case Code.Ldind_R8:  case Code.Ldind_Ref:  case Code.Ldobj:  case Code.Leave:  case Code.Leave_S:  case Code.Localloc:  case Code.Mkrefany:  case Code.Newarr:  case Code.Newobj:  case Code.Nop:  case Code.Pop:  case Code.Readonly:  case Code.Refanytype:  case Code.Refanyval:  case Code.Ret:  case Code.Rethrow:  case Code.Stelem:  case Code.Stelem_I:  case Code.Stelem_I1:  case Code.Stelem_I2:  case Code.Stelem_I4:  case Code.Stelem_I8:  case Code.Stelem_R4:  case Code.Stelem_R8:  case Code.Stelem_Ref:  case Code.Stfld:  case Code.Stind_I:  case Code.Stind_I1:  case Code.Stind_I2:  case Code.Stind_I4:  case Code.Stind_I8:  case Code.Stind_R4:  case Code.Stind_R8:  case Code.Stind_Ref:  case Code.Stobj:  case Code.Stsfld:  case Code.Switch:  case Code.Tailcall:  case Code.Throw:  case Code.Unaligned:  case Code.Volatile:  default:  	updateStack (instr);  	break;  }  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Starg:  case Code.Starg_S:  	emulate_Starg ((Parameter)instr.Operand);  	break;  case Code.Stloc:  case Code.Stloc_S:  	emulate_Stloc ((Local)instr.Operand);  	break;  case Code.Stloc_0:  	emulate_Stloc (0);  	break;  case Code.Stloc_1:  	emulate_Stloc (1);  	break;  case Code.Stloc_2:  	emulate_Stloc (2);  	break;  case Code.Stloc_3:  	emulate_Stloc (3);  	break;  case Code.Ldarg:  case Code.Ldarg_S:  	valueStack.push (getArg ((Parameter)instr.Operand));  	break;  case Code.Ldarg_0:  	valueStack.push (getArg (0));  	break;  case Code.Ldarg_1:  	valueStack.push (getArg (1));  	break;  case Code.Ldarg_2:  	valueStack.push (getArg (2));  	break;  case Code.Ldarg_3:  	valueStack.push (getArg (3));  	break;  case Code.Ldloc:  case Code.Ldloc_S:  	valueStack.push (getLocal ((Local)instr.Operand));  	break;  case Code.Ldloc_0:  	valueStack.push (getLocal (0));  	break;  case Code.Ldloc_1:  	valueStack.push (getLocal (1));  	break;  case Code.Ldloc_2:  	valueStack.push (getLocal (2));  	break;  case Code.Ldloc_3:  	valueStack.push (getLocal (3));  	break;  case Code.Ldarga:  case Code.Ldarga_S:  	emulate_Ldarga ((Parameter)instr.Operand);  	break;  case Code.Ldloca:  case Code.Ldloca_S:  	emulate_Ldloca ((Local)instr.Operand);  	break;  case Code.Dup:  	valueStack.copyTop ();  	break;  case Code.Ldc_I4:  	valueStack.push (new Int32Value ((int)instr.Operand));  	break;  case Code.Ldc_I4_S:  	valueStack.push (new Int32Value ((sbyte)instr.Operand));  	break;  case Code.Ldc_I8:  	valueStack.push (new Int64Value ((long)instr.Operand));  	break;  case Code.Ldc_R4:  	valueStack.push (new Real8Value ((float)instr.Operand));  	break;  case Code.Ldc_R8:  	valueStack.push (new Real8Value ((double)instr.Operand));  	break;  case Code.Ldc_I4_0:  	valueStack.push (Int32Value.zero);  	break;  case Code.Ldc_I4_1:  	valueStack.push (Int32Value.one);  	break;  case Code.Ldc_I4_2:  	valueStack.push (new Int32Value (2));  	break;  case Code.Ldc_I4_3:  	valueStack.push (new Int32Value (3));  	break;  case Code.Ldc_I4_4:  	valueStack.push (new Int32Value (4));  	break;  case Code.Ldc_I4_5:  	valueStack.push (new Int32Value (5));  	break;  case Code.Ldc_I4_6:  	valueStack.push (new Int32Value (6));  	break;  case Code.Ldc_I4_7:  	valueStack.push (new Int32Value (7));  	break;  case Code.Ldc_I4_8:  	valueStack.push (new Int32Value (8));  	break;  case Code.Ldc_I4_M1:  	valueStack.push (new Int32Value (-1));  	break;  case Code.Ldnull:  	valueStack.push (NullValue.Instance);  	break;  case Code.Ldstr:  	valueStack.push (new StringValue ((string)instr.Operand));  	break;  case Code.Box:  	valueStack.push (new BoxedValue (valueStack.pop ()));  	break;  case Code.Conv_U1:  	emulate_Conv_U1 (instr);  	break;  case Code.Conv_U2:  	emulate_Conv_U2 (instr);  	break;  case Code.Conv_U4:  	emulate_Conv_U4 (instr);  	break;  case Code.Conv_U8:  	emulate_Conv_U8 (instr);  	break;  case Code.Conv_I1:  	emulate_Conv_I1 (instr);  	break;  case Code.Conv_I2:  	emulate_Conv_I2 (instr);  	break;  case Code.Conv_I4:  	emulate_Conv_I4 (instr);  	break;  case Code.Conv_I8:  	emulate_Conv_I8 (instr);  	break;  case Code.Add:  	emulate_Add (instr);  	break;  case Code.Sub:  	emulate_Sub (instr);  	break;  case Code.Mul:  	emulate_Mul (instr);  	break;  case Code.Div:  	emulate_Div (instr);  	break;  case Code.Div_Un:  	emulate_Div_Un (instr);  	break;  case Code.Rem:  	emulate_Rem (instr);  	break;  case Code.Rem_Un:  	emulate_Rem_Un (instr);  	break;  case Code.Neg:  	emulate_Neg (instr);  	break;  case Code.And:  	emulate_And (instr);  	break;  case Code.Or:  	emulate_Or (instr);  	break;  case Code.Xor:  	emulate_Xor (instr);  	break;  case Code.Not:  	emulate_Not (instr);  	break;  case Code.Shl:  	emulate_Shl (instr);  	break;  case Code.Shr:  	emulate_Shr (instr);  	break;  case Code.Shr_Un:  	emulate_Shr_Un (instr);  	break;  case Code.Ceq:  	emulate_Ceq (instr);  	break;  case Code.Cgt:  	emulate_Cgt (instr);  	break;  case Code.Cgt_Un:  	emulate_Cgt_Un (instr);  	break;  case Code.Clt:  	emulate_Clt (instr);  	break;  case Code.Clt_Un:  	emulate_Clt_Un (instr);  	break;  case Code.Unbox_Any:  	emulate_Unbox_Any (instr);  	break;  case Code.Call:  	emulate_Call (instr);  	break;  case Code.Callvirt:  	emulate_Callvirt (instr);  	break;  case Code.Castclass:  	emulate_Castclass (instr);  	break;  case Code.Isinst:  	emulate_Isinst (instr);  	break;  case Code.Add_Ovf:  	emulateIntOps2 ();  	break;  case Code.Add_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Conv_Ovf_I1:  case Code.Conv_Ovf_I1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I2:  case Code.Conv_Ovf_I2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I4:  case Code.Conv_Ovf_I4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I8:  case Code.Conv_Ovf_I8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Conv_Ovf_U1:  case Code.Conv_Ovf_U1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Conv_Ovf_U2:  case Code.Conv_Ovf_U2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Conv_Ovf_U4:  case Code.Conv_Ovf_U4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_U8:  case Code.Conv_Ovf_U8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_I1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I8:  	valueStack.pop (2);  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_U1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldelem_U2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldelem_U4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem:  	valueStack.pop (2);  	valueStack.push (getUnknownValue (instr.Operand as ITypeDefOrRef));  	break;  case Code.Ldind_I1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I8:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldind_U1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldind_U2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldind_U4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldlen:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Sizeof:  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldfld:  	emulate_Ldfld (instr);  	break;  case Code.Ldsfld:  	emulate_Ldsfld (instr);  	break;  case Code.Ldftn:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldsflda:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldtoken:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldvirtftn:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Ldflda:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Unbox:  case Code.Conv_R_Un:  case Code.Conv_R4:  case Code.Conv_R8:  case Code.Arglist:  case Code.Beq:  case Code.Beq_S:  case Code.Bge:  case Code.Bge_S:  case Code.Bge_Un:  case Code.Bge_Un_S:  case Code.Bgt:  case Code.Bgt_S:  case Code.Bgt_Un:  case Code.Bgt_Un_S:  case Code.Ble:  case Code.Ble_S:  case Code.Ble_Un:  case Code.Ble_Un_S:  case Code.Blt:  case Code.Blt_S:  case Code.Blt_Un:  case Code.Blt_Un_S:  case Code.Bne_Un:  case Code.Bne_Un_S:  case Code.Brfalse:  case Code.Brfalse_S:  case Code.Brtrue:  case Code.Brtrue_S:  case Code.Br:  case Code.Br_S:  case Code.Break:  case Code.Calli:  case Code.Ckfinite:  case Code.Constrained:  case Code.Conv_I:  case Code.Conv_Ovf_I:  case Code.Conv_Ovf_I_Un:  case Code.Conv_Ovf_U:  case Code.Conv_Ovf_U_Un:  case Code.Conv_U:  case Code.Cpblk:  case Code.Cpobj:  case Code.Endfilter:  case Code.Endfinally:  case Code.Initblk:  case Code.Initobj:  case Code.Jmp:  case Code.Ldelema:  case Code.Ldelem_I:  case Code.Ldelem_R4:  case Code.Ldelem_R8:  case Code.Ldelem_Ref:  case Code.Ldind_I:  case Code.Ldind_R4:  case Code.Ldind_R8:  case Code.Ldind_Ref:  case Code.Ldobj:  case Code.Leave:  case Code.Leave_S:  case Code.Localloc:  case Code.Mkrefany:  case Code.Newarr:  case Code.Newobj:  case Code.Nop:  case Code.Pop:  case Code.Readonly:  case Code.Refanytype:  case Code.Refanyval:  case Code.Ret:  case Code.Rethrow:  case Code.Stelem:  case Code.Stelem_I:  case Code.Stelem_I1:  case Code.Stelem_I2:  case Code.Stelem_I4:  case Code.Stelem_I8:  case Code.Stelem_R4:  case Code.Stelem_R8:  case Code.Stelem_Ref:  case Code.Stfld:  case Code.Stind_I:  case Code.Stind_I1:  case Code.Stind_I2:  case Code.Stind_I4:  case Code.Stind_I8:  case Code.Stind_R4:  case Code.Stind_R8:  case Code.Stind_Ref:  case Code.Stobj:  case Code.Stsfld:  case Code.Switch:  case Code.Tailcall:  case Code.Throw:  case Code.Unaligned:  case Code.Volatile:  default:  	updateStack (instr);  	break;  }  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Starg:  case Code.Starg_S:  	emulate_Starg ((Parameter)instr.Operand);  	break;  case Code.Stloc:  case Code.Stloc_S:  	emulate_Stloc ((Local)instr.Operand);  	break;  case Code.Stloc_0:  	emulate_Stloc (0);  	break;  case Code.Stloc_1:  	emulate_Stloc (1);  	break;  case Code.Stloc_2:  	emulate_Stloc (2);  	break;  case Code.Stloc_3:  	emulate_Stloc (3);  	break;  case Code.Ldarg:  case Code.Ldarg_S:  	valueStack.push (getArg ((Parameter)instr.Operand));  	break;  case Code.Ldarg_0:  	valueStack.push (getArg (0));  	break;  case Code.Ldarg_1:  	valueStack.push (getArg (1));  	break;  case Code.Ldarg_2:  	valueStack.push (getArg (2));  	break;  case Code.Ldarg_3:  	valueStack.push (getArg (3));  	break;  case Code.Ldloc:  case Code.Ldloc_S:  	valueStack.push (getLocal ((Local)instr.Operand));  	break;  case Code.Ldloc_0:  	valueStack.push (getLocal (0));  	break;  case Code.Ldloc_1:  	valueStack.push (getLocal (1));  	break;  case Code.Ldloc_2:  	valueStack.push (getLocal (2));  	break;  case Code.Ldloc_3:  	valueStack.push (getLocal (3));  	break;  case Code.Ldarga:  case Code.Ldarga_S:  	emulate_Ldarga ((Parameter)instr.Operand);  	break;  case Code.Ldloca:  case Code.Ldloca_S:  	emulate_Ldloca ((Local)instr.Operand);  	break;  case Code.Dup:  	valueStack.copyTop ();  	break;  case Code.Ldc_I4:  	valueStack.push (new Int32Value ((int)instr.Operand));  	break;  case Code.Ldc_I4_S:  	valueStack.push (new Int32Value ((sbyte)instr.Operand));  	break;  case Code.Ldc_I8:  	valueStack.push (new Int64Value ((long)instr.Operand));  	break;  case Code.Ldc_R4:  	valueStack.push (new Real8Value ((float)instr.Operand));  	break;  case Code.Ldc_R8:  	valueStack.push (new Real8Value ((double)instr.Operand));  	break;  case Code.Ldc_I4_0:  	valueStack.push (Int32Value.zero);  	break;  case Code.Ldc_I4_1:  	valueStack.push (Int32Value.one);  	break;  case Code.Ldc_I4_2:  	valueStack.push (new Int32Value (2));  	break;  case Code.Ldc_I4_3:  	valueStack.push (new Int32Value (3));  	break;  case Code.Ldc_I4_4:  	valueStack.push (new Int32Value (4));  	break;  case Code.Ldc_I4_5:  	valueStack.push (new Int32Value (5));  	break;  case Code.Ldc_I4_6:  	valueStack.push (new Int32Value (6));  	break;  case Code.Ldc_I4_7:  	valueStack.push (new Int32Value (7));  	break;  case Code.Ldc_I4_8:  	valueStack.push (new Int32Value (8));  	break;  case Code.Ldc_I4_M1:  	valueStack.push (new Int32Value (-1));  	break;  case Code.Ldnull:  	valueStack.push (NullValue.Instance);  	break;  case Code.Ldstr:  	valueStack.push (new StringValue ((string)instr.Operand));  	break;  case Code.Box:  	valueStack.push (new BoxedValue (valueStack.pop ()));  	break;  case Code.Conv_U1:  	emulate_Conv_U1 (instr);  	break;  case Code.Conv_U2:  	emulate_Conv_U2 (instr);  	break;  case Code.Conv_U4:  	emulate_Conv_U4 (instr);  	break;  case Code.Conv_U8:  	emulate_Conv_U8 (instr);  	break;  case Code.Conv_I1:  	emulate_Conv_I1 (instr);  	break;  case Code.Conv_I2:  	emulate_Conv_I2 (instr);  	break;  case Code.Conv_I4:  	emulate_Conv_I4 (instr);  	break;  case Code.Conv_I8:  	emulate_Conv_I8 (instr);  	break;  case Code.Add:  	emulate_Add (instr);  	break;  case Code.Sub:  	emulate_Sub (instr);  	break;  case Code.Mul:  	emulate_Mul (instr);  	break;  case Code.Div:  	emulate_Div (instr);  	break;  case Code.Div_Un:  	emulate_Div_Un (instr);  	break;  case Code.Rem:  	emulate_Rem (instr);  	break;  case Code.Rem_Un:  	emulate_Rem_Un (instr);  	break;  case Code.Neg:  	emulate_Neg (instr);  	break;  case Code.And:  	emulate_And (instr);  	break;  case Code.Or:  	emulate_Or (instr);  	break;  case Code.Xor:  	emulate_Xor (instr);  	break;  case Code.Not:  	emulate_Not (instr);  	break;  case Code.Shl:  	emulate_Shl (instr);  	break;  case Code.Shr:  	emulate_Shr (instr);  	break;  case Code.Shr_Un:  	emulate_Shr_Un (instr);  	break;  case Code.Ceq:  	emulate_Ceq (instr);  	break;  case Code.Cgt:  	emulate_Cgt (instr);  	break;  case Code.Cgt_Un:  	emulate_Cgt_Un (instr);  	break;  case Code.Clt:  	emulate_Clt (instr);  	break;  case Code.Clt_Un:  	emulate_Clt_Un (instr);  	break;  case Code.Unbox_Any:  	emulate_Unbox_Any (instr);  	break;  case Code.Call:  	emulate_Call (instr);  	break;  case Code.Callvirt:  	emulate_Callvirt (instr);  	break;  case Code.Castclass:  	emulate_Castclass (instr);  	break;  case Code.Isinst:  	emulate_Isinst (instr);  	break;  case Code.Add_Ovf:  	emulateIntOps2 ();  	break;  case Code.Add_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Conv_Ovf_I1:  case Code.Conv_Ovf_I1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I2:  case Code.Conv_Ovf_I2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I4:  case Code.Conv_Ovf_I4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I8:  case Code.Conv_Ovf_I8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Conv_Ovf_U1:  case Code.Conv_Ovf_U1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Conv_Ovf_U2:  case Code.Conv_Ovf_U2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Conv_Ovf_U4:  case Code.Conv_Ovf_U4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_U8:  case Code.Conv_Ovf_U8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_I1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I8:  	valueStack.pop (2);  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_U1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldelem_U2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldelem_U4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem:  	valueStack.pop (2);  	valueStack.push (getUnknownValue (instr.Operand as ITypeDefOrRef));  	break;  case Code.Ldind_I1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I8:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldind_U1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldind_U2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldind_U4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldlen:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Sizeof:  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldfld:  	emulate_Ldfld (instr);  	break;  case Code.Ldsfld:  	emulate_Ldsfld (instr);  	break;  case Code.Ldftn:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldsflda:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldtoken:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldvirtftn:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Ldflda:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Unbox:  case Code.Conv_R_Un:  case Code.Conv_R4:  case Code.Conv_R8:  case Code.Arglist:  case Code.Beq:  case Code.Beq_S:  case Code.Bge:  case Code.Bge_S:  case Code.Bge_Un:  case Code.Bge_Un_S:  case Code.Bgt:  case Code.Bgt_S:  case Code.Bgt_Un:  case Code.Bgt_Un_S:  case Code.Ble:  case Code.Ble_S:  case Code.Ble_Un:  case Code.Ble_Un_S:  case Code.Blt:  case Code.Blt_S:  case Code.Blt_Un:  case Code.Blt_Un_S:  case Code.Bne_Un:  case Code.Bne_Un_S:  case Code.Brfalse:  case Code.Brfalse_S:  case Code.Brtrue:  case Code.Brtrue_S:  case Code.Br:  case Code.Br_S:  case Code.Break:  case Code.Calli:  case Code.Ckfinite:  case Code.Constrained:  case Code.Conv_I:  case Code.Conv_Ovf_I:  case Code.Conv_Ovf_I_Un:  case Code.Conv_Ovf_U:  case Code.Conv_Ovf_U_Un:  case Code.Conv_U:  case Code.Cpblk:  case Code.Cpobj:  case Code.Endfilter:  case Code.Endfinally:  case Code.Initblk:  case Code.Initobj:  case Code.Jmp:  case Code.Ldelema:  case Code.Ldelem_I:  case Code.Ldelem_R4:  case Code.Ldelem_R8:  case Code.Ldelem_Ref:  case Code.Ldind_I:  case Code.Ldind_R4:  case Code.Ldind_R8:  case Code.Ldind_Ref:  case Code.Ldobj:  case Code.Leave:  case Code.Leave_S:  case Code.Localloc:  case Code.Mkrefany:  case Code.Newarr:  case Code.Newobj:  case Code.Nop:  case Code.Pop:  case Code.Readonly:  case Code.Refanytype:  case Code.Refanyval:  case Code.Ret:  case Code.Rethrow:  case Code.Stelem:  case Code.Stelem_I:  case Code.Stelem_I1:  case Code.Stelem_I2:  case Code.Stelem_I4:  case Code.Stelem_I8:  case Code.Stelem_R4:  case Code.Stelem_R8:  case Code.Stelem_Ref:  case Code.Stfld:  case Code.Stind_I:  case Code.Stind_I1:  case Code.Stind_I2:  case Code.Stind_I4:  case Code.Stind_I8:  case Code.Stind_R4:  case Code.Stind_R8:  case Code.Stind_Ref:  case Code.Stobj:  case Code.Stsfld:  case Code.Switch:  case Code.Tailcall:  case Code.Throw:  case Code.Unaligned:  case Code.Volatile:  default:  	updateStack (instr);  	break;  }  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Starg:  case Code.Starg_S:  	emulate_Starg ((Parameter)instr.Operand);  	break;  case Code.Stloc:  case Code.Stloc_S:  	emulate_Stloc ((Local)instr.Operand);  	break;  case Code.Stloc_0:  	emulate_Stloc (0);  	break;  case Code.Stloc_1:  	emulate_Stloc (1);  	break;  case Code.Stloc_2:  	emulate_Stloc (2);  	break;  case Code.Stloc_3:  	emulate_Stloc (3);  	break;  case Code.Ldarg:  case Code.Ldarg_S:  	valueStack.push (getArg ((Parameter)instr.Operand));  	break;  case Code.Ldarg_0:  	valueStack.push (getArg (0));  	break;  case Code.Ldarg_1:  	valueStack.push (getArg (1));  	break;  case Code.Ldarg_2:  	valueStack.push (getArg (2));  	break;  case Code.Ldarg_3:  	valueStack.push (getArg (3));  	break;  case Code.Ldloc:  case Code.Ldloc_S:  	valueStack.push (getLocal ((Local)instr.Operand));  	break;  case Code.Ldloc_0:  	valueStack.push (getLocal (0));  	break;  case Code.Ldloc_1:  	valueStack.push (getLocal (1));  	break;  case Code.Ldloc_2:  	valueStack.push (getLocal (2));  	break;  case Code.Ldloc_3:  	valueStack.push (getLocal (3));  	break;  case Code.Ldarga:  case Code.Ldarga_S:  	emulate_Ldarga ((Parameter)instr.Operand);  	break;  case Code.Ldloca:  case Code.Ldloca_S:  	emulate_Ldloca ((Local)instr.Operand);  	break;  case Code.Dup:  	valueStack.copyTop ();  	break;  case Code.Ldc_I4:  	valueStack.push (new Int32Value ((int)instr.Operand));  	break;  case Code.Ldc_I4_S:  	valueStack.push (new Int32Value ((sbyte)instr.Operand));  	break;  case Code.Ldc_I8:  	valueStack.push (new Int64Value ((long)instr.Operand));  	break;  case Code.Ldc_R4:  	valueStack.push (new Real8Value ((float)instr.Operand));  	break;  case Code.Ldc_R8:  	valueStack.push (new Real8Value ((double)instr.Operand));  	break;  case Code.Ldc_I4_0:  	valueStack.push (Int32Value.zero);  	break;  case Code.Ldc_I4_1:  	valueStack.push (Int32Value.one);  	break;  case Code.Ldc_I4_2:  	valueStack.push (new Int32Value (2));  	break;  case Code.Ldc_I4_3:  	valueStack.push (new Int32Value (3));  	break;  case Code.Ldc_I4_4:  	valueStack.push (new Int32Value (4));  	break;  case Code.Ldc_I4_5:  	valueStack.push (new Int32Value (5));  	break;  case Code.Ldc_I4_6:  	valueStack.push (new Int32Value (6));  	break;  case Code.Ldc_I4_7:  	valueStack.push (new Int32Value (7));  	break;  case Code.Ldc_I4_8:  	valueStack.push (new Int32Value (8));  	break;  case Code.Ldc_I4_M1:  	valueStack.push (new Int32Value (-1));  	break;  case Code.Ldnull:  	valueStack.push (NullValue.Instance);  	break;  case Code.Ldstr:  	valueStack.push (new StringValue ((string)instr.Operand));  	break;  case Code.Box:  	valueStack.push (new BoxedValue (valueStack.pop ()));  	break;  case Code.Conv_U1:  	emulate_Conv_U1 (instr);  	break;  case Code.Conv_U2:  	emulate_Conv_U2 (instr);  	break;  case Code.Conv_U4:  	emulate_Conv_U4 (instr);  	break;  case Code.Conv_U8:  	emulate_Conv_U8 (instr);  	break;  case Code.Conv_I1:  	emulate_Conv_I1 (instr);  	break;  case Code.Conv_I2:  	emulate_Conv_I2 (instr);  	break;  case Code.Conv_I4:  	emulate_Conv_I4 (instr);  	break;  case Code.Conv_I8:  	emulate_Conv_I8 (instr);  	break;  case Code.Add:  	emulate_Add (instr);  	break;  case Code.Sub:  	emulate_Sub (instr);  	break;  case Code.Mul:  	emulate_Mul (instr);  	break;  case Code.Div:  	emulate_Div (instr);  	break;  case Code.Div_Un:  	emulate_Div_Un (instr);  	break;  case Code.Rem:  	emulate_Rem (instr);  	break;  case Code.Rem_Un:  	emulate_Rem_Un (instr);  	break;  case Code.Neg:  	emulate_Neg (instr);  	break;  case Code.And:  	emulate_And (instr);  	break;  case Code.Or:  	emulate_Or (instr);  	break;  case Code.Xor:  	emulate_Xor (instr);  	break;  case Code.Not:  	emulate_Not (instr);  	break;  case Code.Shl:  	emulate_Shl (instr);  	break;  case Code.Shr:  	emulate_Shr (instr);  	break;  case Code.Shr_Un:  	emulate_Shr_Un (instr);  	break;  case Code.Ceq:  	emulate_Ceq (instr);  	break;  case Code.Cgt:  	emulate_Cgt (instr);  	break;  case Code.Cgt_Un:  	emulate_Cgt_Un (instr);  	break;  case Code.Clt:  	emulate_Clt (instr);  	break;  case Code.Clt_Un:  	emulate_Clt_Un (instr);  	break;  case Code.Unbox_Any:  	emulate_Unbox_Any (instr);  	break;  case Code.Call:  	emulate_Call (instr);  	break;  case Code.Callvirt:  	emulate_Callvirt (instr);  	break;  case Code.Castclass:  	emulate_Castclass (instr);  	break;  case Code.Isinst:  	emulate_Isinst (instr);  	break;  case Code.Add_Ovf:  	emulateIntOps2 ();  	break;  case Code.Add_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Conv_Ovf_I1:  case Code.Conv_Ovf_I1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I2:  case Code.Conv_Ovf_I2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I4:  case Code.Conv_Ovf_I4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I8:  case Code.Conv_Ovf_I8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Conv_Ovf_U1:  case Code.Conv_Ovf_U1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Conv_Ovf_U2:  case Code.Conv_Ovf_U2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Conv_Ovf_U4:  case Code.Conv_Ovf_U4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_U8:  case Code.Conv_Ovf_U8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_I1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I8:  	valueStack.pop (2);  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_U1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldelem_U2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldelem_U4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem:  	valueStack.pop (2);  	valueStack.push (getUnknownValue (instr.Operand as ITypeDefOrRef));  	break;  case Code.Ldind_I1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I8:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldind_U1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldind_U2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldind_U4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldlen:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Sizeof:  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldfld:  	emulate_Ldfld (instr);  	break;  case Code.Ldsfld:  	emulate_Ldsfld (instr);  	break;  case Code.Ldftn:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldsflda:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldtoken:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldvirtftn:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Ldflda:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Unbox:  case Code.Conv_R_Un:  case Code.Conv_R4:  case Code.Conv_R8:  case Code.Arglist:  case Code.Beq:  case Code.Beq_S:  case Code.Bge:  case Code.Bge_S:  case Code.Bge_Un:  case Code.Bge_Un_S:  case Code.Bgt:  case Code.Bgt_S:  case Code.Bgt_Un:  case Code.Bgt_Un_S:  case Code.Ble:  case Code.Ble_S:  case Code.Ble_Un:  case Code.Ble_Un_S:  case Code.Blt:  case Code.Blt_S:  case Code.Blt_Un:  case Code.Blt_Un_S:  case Code.Bne_Un:  case Code.Bne_Un_S:  case Code.Brfalse:  case Code.Brfalse_S:  case Code.Brtrue:  case Code.Brtrue_S:  case Code.Br:  case Code.Br_S:  case Code.Break:  case Code.Calli:  case Code.Ckfinite:  case Code.Constrained:  case Code.Conv_I:  case Code.Conv_Ovf_I:  case Code.Conv_Ovf_I_Un:  case Code.Conv_Ovf_U:  case Code.Conv_Ovf_U_Un:  case Code.Conv_U:  case Code.Cpblk:  case Code.Cpobj:  case Code.Endfilter:  case Code.Endfinally:  case Code.Initblk:  case Code.Initobj:  case Code.Jmp:  case Code.Ldelema:  case Code.Ldelem_I:  case Code.Ldelem_R4:  case Code.Ldelem_R8:  case Code.Ldelem_Ref:  case Code.Ldind_I:  case Code.Ldind_R4:  case Code.Ldind_R8:  case Code.Ldind_Ref:  case Code.Ldobj:  case Code.Leave:  case Code.Leave_S:  case Code.Localloc:  case Code.Mkrefany:  case Code.Newarr:  case Code.Newobj:  case Code.Nop:  case Code.Pop:  case Code.Readonly:  case Code.Refanytype:  case Code.Refanyval:  case Code.Ret:  case Code.Rethrow:  case Code.Stelem:  case Code.Stelem_I:  case Code.Stelem_I1:  case Code.Stelem_I2:  case Code.Stelem_I4:  case Code.Stelem_I8:  case Code.Stelem_R4:  case Code.Stelem_R8:  case Code.Stelem_Ref:  case Code.Stfld:  case Code.Stind_I:  case Code.Stind_I1:  case Code.Stind_I2:  case Code.Stind_I4:  case Code.Stind_I8:  case Code.Stind_R4:  case Code.Stind_R8:  case Code.Stind_Ref:  case Code.Stobj:  case Code.Stsfld:  case Code.Switch:  case Code.Tailcall:  case Code.Throw:  case Code.Unaligned:  case Code.Volatile:  default:  	updateStack (instr);  	break;  }  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  case Code.Starg:  case Code.Starg_S:  	emulate_Starg ((Parameter)instr.Operand);  	break;  case Code.Stloc:  case Code.Stloc_S:  	emulate_Stloc ((Local)instr.Operand);  	break;  case Code.Stloc_0:  	emulate_Stloc (0);  	break;  case Code.Stloc_1:  	emulate_Stloc (1);  	break;  case Code.Stloc_2:  	emulate_Stloc (2);  	break;  case Code.Stloc_3:  	emulate_Stloc (3);  	break;  case Code.Ldarg:  case Code.Ldarg_S:  	valueStack.push (getArg ((Parameter)instr.Operand));  	break;  case Code.Ldarg_0:  	valueStack.push (getArg (0));  	break;  case Code.Ldarg_1:  	valueStack.push (getArg (1));  	break;  case Code.Ldarg_2:  	valueStack.push (getArg (2));  	break;  case Code.Ldarg_3:  	valueStack.push (getArg (3));  	break;  case Code.Ldloc:  case Code.Ldloc_S:  	valueStack.push (getLocal ((Local)instr.Operand));  	break;  case Code.Ldloc_0:  	valueStack.push (getLocal (0));  	break;  case Code.Ldloc_1:  	valueStack.push (getLocal (1));  	break;  case Code.Ldloc_2:  	valueStack.push (getLocal (2));  	break;  case Code.Ldloc_3:  	valueStack.push (getLocal (3));  	break;  case Code.Ldarga:  case Code.Ldarga_S:  	emulate_Ldarga ((Parameter)instr.Operand);  	break;  case Code.Ldloca:  case Code.Ldloca_S:  	emulate_Ldloca ((Local)instr.Operand);  	break;  case Code.Dup:  	valueStack.copyTop ();  	break;  case Code.Ldc_I4:  	valueStack.push (new Int32Value ((int)instr.Operand));  	break;  case Code.Ldc_I4_S:  	valueStack.push (new Int32Value ((sbyte)instr.Operand));  	break;  case Code.Ldc_I8:  	valueStack.push (new Int64Value ((long)instr.Operand));  	break;  case Code.Ldc_R4:  	valueStack.push (new Real8Value ((float)instr.Operand));  	break;  case Code.Ldc_R8:  	valueStack.push (new Real8Value ((double)instr.Operand));  	break;  case Code.Ldc_I4_0:  	valueStack.push (Int32Value.zero);  	break;  case Code.Ldc_I4_1:  	valueStack.push (Int32Value.one);  	break;  case Code.Ldc_I4_2:  	valueStack.push (new Int32Value (2));  	break;  case Code.Ldc_I4_3:  	valueStack.push (new Int32Value (3));  	break;  case Code.Ldc_I4_4:  	valueStack.push (new Int32Value (4));  	break;  case Code.Ldc_I4_5:  	valueStack.push (new Int32Value (5));  	break;  case Code.Ldc_I4_6:  	valueStack.push (new Int32Value (6));  	break;  case Code.Ldc_I4_7:  	valueStack.push (new Int32Value (7));  	break;  case Code.Ldc_I4_8:  	valueStack.push (new Int32Value (8));  	break;  case Code.Ldc_I4_M1:  	valueStack.push (new Int32Value (-1));  	break;  case Code.Ldnull:  	valueStack.push (NullValue.Instance);  	break;  case Code.Ldstr:  	valueStack.push (new StringValue ((string)instr.Operand));  	break;  case Code.Box:  	valueStack.push (new BoxedValue (valueStack.pop ()));  	break;  case Code.Conv_U1:  	emulate_Conv_U1 (instr);  	break;  case Code.Conv_U2:  	emulate_Conv_U2 (instr);  	break;  case Code.Conv_U4:  	emulate_Conv_U4 (instr);  	break;  case Code.Conv_U8:  	emulate_Conv_U8 (instr);  	break;  case Code.Conv_I1:  	emulate_Conv_I1 (instr);  	break;  case Code.Conv_I2:  	emulate_Conv_I2 (instr);  	break;  case Code.Conv_I4:  	emulate_Conv_I4 (instr);  	break;  case Code.Conv_I8:  	emulate_Conv_I8 (instr);  	break;  case Code.Add:  	emulate_Add (instr);  	break;  case Code.Sub:  	emulate_Sub (instr);  	break;  case Code.Mul:  	emulate_Mul (instr);  	break;  case Code.Div:  	emulate_Div (instr);  	break;  case Code.Div_Un:  	emulate_Div_Un (instr);  	break;  case Code.Rem:  	emulate_Rem (instr);  	break;  case Code.Rem_Un:  	emulate_Rem_Un (instr);  	break;  case Code.Neg:  	emulate_Neg (instr);  	break;  case Code.And:  	emulate_And (instr);  	break;  case Code.Or:  	emulate_Or (instr);  	break;  case Code.Xor:  	emulate_Xor (instr);  	break;  case Code.Not:  	emulate_Not (instr);  	break;  case Code.Shl:  	emulate_Shl (instr);  	break;  case Code.Shr:  	emulate_Shr (instr);  	break;  case Code.Shr_Un:  	emulate_Shr_Un (instr);  	break;  case Code.Ceq:  	emulate_Ceq (instr);  	break;  case Code.Cgt:  	emulate_Cgt (instr);  	break;  case Code.Cgt_Un:  	emulate_Cgt_Un (instr);  	break;  case Code.Clt:  	emulate_Clt (instr);  	break;  case Code.Clt_Un:  	emulate_Clt_Un (instr);  	break;  case Code.Unbox_Any:  	emulate_Unbox_Any (instr);  	break;  case Code.Call:  	emulate_Call (instr);  	break;  case Code.Callvirt:  	emulate_Callvirt (instr);  	break;  case Code.Castclass:  	emulate_Castclass (instr);  	break;  case Code.Isinst:  	emulate_Isinst (instr);  	break;  case Code.Add_Ovf:  	emulateIntOps2 ();  	break;  case Code.Add_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf:  	emulateIntOps2 ();  	break;  case Code.Sub_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf:  	emulateIntOps2 ();  	break;  case Code.Mul_Ovf_Un:  	emulateIntOps2 ();  	break;  case Code.Conv_Ovf_I1:  case Code.Conv_Ovf_I1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I2:  case Code.Conv_Ovf_I2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I4:  case Code.Conv_Ovf_I4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_I8:  case Code.Conv_Ovf_I8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Conv_Ovf_U1:  case Code.Conv_Ovf_U1_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Conv_Ovf_U2:  case Code.Conv_Ovf_U2_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Conv_Ovf_U4:  case Code.Conv_Ovf_U4_Un:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Conv_Ovf_U8:  case Code.Conv_Ovf_U8_Un:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_I1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem_I8:  	valueStack.pop (2);  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldelem_U1:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldelem_U2:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldelem_U4:  	valueStack.pop (2);  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldelem:  	valueStack.pop (2);  	valueStack.push (getUnknownValue (instr.Operand as ITypeDefOrRef));  	break;  case Code.Ldind_I1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldind_I8:  	valueStack.pop ();  	valueStack.push (Int64Value.createUnknown ());  	break;  case Code.Ldind_U1:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt8 ());  	break;  case Code.Ldind_U2:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknownUInt16 ());  	break;  case Code.Ldind_U4:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldlen:  	valueStack.pop ();  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Sizeof:  	valueStack.push (Int32Value.createUnknown ());  	break;  case Code.Ldfld:  	emulate_Ldfld (instr);  	break;  case Code.Ldsfld:  	emulate_Ldsfld (instr);  	break;  case Code.Ldftn:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldsflda:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldtoken:  	valueStack.push (new ObjectValue (instr.Operand));  	break;  case Code.Ldvirtftn:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Ldflda:  	valueStack.pop ();  	valueStack.push (new ObjectValue ());  	break;  case Code.Unbox:  case Code.Conv_R_Un:  case Code.Conv_R4:  case Code.Conv_R8:  case Code.Arglist:  case Code.Beq:  case Code.Beq_S:  case Code.Bge:  case Code.Bge_S:  case Code.Bge_Un:  case Code.Bge_Un_S:  case Code.Bgt:  case Code.Bgt_S:  case Code.Bgt_Un:  case Code.Bgt_Un_S:  case Code.Ble:  case Code.Ble_S:  case Code.Ble_Un:  case Code.Ble_Un_S:  case Code.Blt:  case Code.Blt_S:  case Code.Blt_Un:  case Code.Blt_Un_S:  case Code.Bne_Un:  case Code.Bne_Un_S:  case Code.Brfalse:  case Code.Brfalse_S:  case Code.Brtrue:  case Code.Brtrue_S:  case Code.Br:  case Code.Br_S:  case Code.Break:  case Code.Calli:  case Code.Ckfinite:  case Code.Constrained:  case Code.Conv_I:  case Code.Conv_Ovf_I:  case Code.Conv_Ovf_I_Un:  case Code.Conv_Ovf_U:  case Code.Conv_Ovf_U_Un:  case Code.Conv_U:  case Code.Cpblk:  case Code.Cpobj:  case Code.Endfilter:  case Code.Endfinally:  case Code.Initblk:  case Code.Initobj:  case Code.Jmp:  case Code.Ldelema:  case Code.Ldelem_I:  case Code.Ldelem_R4:  case Code.Ldelem_R8:  case Code.Ldelem_Ref:  case Code.Ldind_I:  case Code.Ldind_R4:  case Code.Ldind_R8:  case Code.Ldind_Ref:  case Code.Ldobj:  case Code.Leave:  case Code.Leave_S:  case Code.Localloc:  case Code.Mkrefany:  case Code.Newarr:  case Code.Newobj:  case Code.Nop:  case Code.Pop:  case Code.Readonly:  case Code.Refanytype:  case Code.Refanyval:  case Code.Ret:  case Code.Rethrow:  case Code.Stelem:  case Code.Stelem_I:  case Code.Stelem_I1:  case Code.Stelem_I2:  case Code.Stelem_I4:  case Code.Stelem_I8:  case Code.Stelem_R4:  case Code.Stelem_R8:  case Code.Stelem_Ref:  case Code.Stfld:  case Code.Stind_I:  case Code.Stind_I1:  case Code.Stind_I2:  case Code.Stind_I4:  case Code.Stind_I8:  case Code.Stind_R4:  case Code.Stind_R8:  case Code.Stind_Ref:  case Code.Stobj:  case Code.Stsfld:  case Code.Switch:  case Code.Tailcall:  case Code.Throw:  case Code.Unaligned:  case Code.Volatile:  default:  	updateStack (instr);  	break;  }  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: emulate_Stloc (2);  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: emulate_Stloc (3);  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: valueStack.push (getArg (2));  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: valueStack.push (getArg (3));  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: valueStack.push (getLocal (2));  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: valueStack.push (getLocal (3));  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: valueStack.push (new Int32Value (2));  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: valueStack.push (new Int32Value (3));  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: valueStack.push (new Int32Value (4));  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: valueStack.push (new Int32Value (5));  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: valueStack.push (new Int32Value (6));  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: valueStack.push (new Int32Value (7));  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: valueStack.push (new Int32Value (8));  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: valueStack.pop (2);  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: valueStack.pop (2);  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: valueStack.pop (2);  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: valueStack.pop (2);  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: valueStack.pop (2);  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: valueStack.pop (2);  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: valueStack.pop (2);  
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: valueStack.pop (2);  
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int32Value.cs,createUnknownUInt8,The following statement contains a magic number: return new Int32Value (0' NO_UNKNOWN_BITS << 8);  
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int32Value.cs,createUnknownUInt16,The following statement contains a magic number: return new Int32Value (0' NO_UNKNOWN_BITS << 16);  
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int32Value.cs,Conv_U1,The following statement contains a magic number: validMask |= NO_UNKNOWN_BITS << 8;  
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int32Value.cs,Conv_I1,The following statement contains a magic number: if (isBitValid (validMask' 7))  	validMask |= NO_UNKNOWN_BITS << 8;  else  	validMask &= ~(NO_UNKNOWN_BITS << 8);  
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int32Value.cs,Conv_I1,The following statement contains a magic number: if (isBitValid (validMask' 7))  	validMask |= NO_UNKNOWN_BITS << 8;  else  	validMask &= ~(NO_UNKNOWN_BITS << 8);  
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int32Value.cs,Conv_I1,The following statement contains a magic number: if (isBitValid (validMask' 7))  	validMask |= NO_UNKNOWN_BITS << 8;  else  	validMask &= ~(NO_UNKNOWN_BITS << 8);  
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int32Value.cs,Conv_I1,The following statement contains a magic number: validMask |= NO_UNKNOWN_BITS << 8;  
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int32Value.cs,Conv_I1,The following statement contains a magic number: validMask &= ~(NO_UNKNOWN_BITS << 8);  
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int32Value.cs,Conv_U2,The following statement contains a magic number: validMask |= NO_UNKNOWN_BITS << 16;  
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int32Value.cs,Conv_I2,The following statement contains a magic number: if (isBitValid (validMask' 15))  	validMask |= NO_UNKNOWN_BITS << 16;  else  	validMask &= ~(NO_UNKNOWN_BITS << 16);  
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int32Value.cs,Conv_I2,The following statement contains a magic number: if (isBitValid (validMask' 15))  	validMask |= NO_UNKNOWN_BITS << 16;  else  	validMask &= ~(NO_UNKNOWN_BITS << 16);  
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int32Value.cs,Conv_I2,The following statement contains a magic number: if (isBitValid (validMask' 15))  	validMask |= NO_UNKNOWN_BITS << 16;  else  	validMask &= ~(NO_UNKNOWN_BITS << 16);  
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int32Value.cs,Conv_I2,The following statement contains a magic number: validMask |= NO_UNKNOWN_BITS << 16;  
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int32Value.cs,Conv_I2,The following statement contains a magic number: validMask &= ~(NO_UNKNOWN_BITS << 16);  
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int32Value.cs,Shl,The following statement contains a magic number: if (b.value < 0 || b.value >= sizeof(int) * 8)  	return createUnknown ();  
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int32Value.cs,Shr,The following statement contains a magic number: if (b.value < 0 || b.value >= sizeof(int) * 8)  	return createUnknown ();  
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int32Value.cs,Shr,The following statement contains a magic number: if (a.isBitValid (sizeof(int) * 8 - 1))  	validMask |= (uint.MaxValue << (sizeof(int) * 8 - shift));  
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int32Value.cs,Shr,The following statement contains a magic number: if (a.isBitValid (sizeof(int) * 8 - 1))  	validMask |= (uint.MaxValue << (sizeof(int) * 8 - shift));  
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int32Value.cs,Shr,The following statement contains a magic number: validMask |= (uint.MaxValue << (sizeof(int) * 8 - shift));  
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int32Value.cs,Shr_Un,The following statement contains a magic number: if (b.value < 0 || b.value >= sizeof(int) * 8)  	return createUnknown ();  
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int64Value.cs,Conv_I8,The following statement contains a magic number: if (isBitValid (validMask' 31))  	validMask |= NO_UNKNOWN_BITS << 32;  else  	validMask &= ~(NO_UNKNOWN_BITS << 32);  
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int64Value.cs,Conv_I8,The following statement contains a magic number: if (isBitValid (validMask' 31))  	validMask |= NO_UNKNOWN_BITS << 32;  else  	validMask &= ~(NO_UNKNOWN_BITS << 32);  
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int64Value.cs,Conv_I8,The following statement contains a magic number: if (isBitValid (validMask' 31))  	validMask |= NO_UNKNOWN_BITS << 32;  else  	validMask &= ~(NO_UNKNOWN_BITS << 32);  
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int64Value.cs,Conv_I8,The following statement contains a magic number: validMask |= NO_UNKNOWN_BITS << 32;  
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int64Value.cs,Conv_I8,The following statement contains a magic number: validMask &= ~(NO_UNKNOWN_BITS << 32);  
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int64Value.cs,Shl,The following statement contains a magic number: if (b.value < 0 || b.value >= sizeof(long) * 8)  	return createUnknown ();  
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int64Value.cs,Shr,The following statement contains a magic number: if (b.value < 0 || b.value >= sizeof(long) * 8)  	return createUnknown ();  
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int64Value.cs,Shr,The following statement contains a magic number: if (a.isBitValid (sizeof(long) * 8 - 1))  	validMask |= (ulong.MaxValue << (sizeof(long) * 8 - shift));  
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int64Value.cs,Shr,The following statement contains a magic number: if (a.isBitValid (sizeof(long) * 8 - 1))  	validMask |= (ulong.MaxValue << (sizeof(long) * 8 - shift));  
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int64Value.cs,Shr,The following statement contains a magic number: validMask |= (ulong.MaxValue << (sizeof(long) * 8 - shift));  
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\Int64Value.cs,Shr_Un,The following statement contains a magic number: if (b.value < 0 || b.value >= sizeof(long) * 8)  	return createUnknown ();  
Missing Default,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\DotNetUtils.cs,getFrameworkType,The following switch statement is missing a default case: switch (BitConverter.ToString (modRef.PublicKeyOrToken.Data).Replace ("-"' "").ToLowerInvariant ()) {  case "b77a5c561934e089":  	return FrameworkType.Desktop;  case "7cec85d7bea7798e":  	return FrameworkType.Silverlight;  case "969db8053d3322ac":  	return FrameworkType.CompactFramework;  case "1c9e259686f921e0":  	return FrameworkType.XNA;  case "e92a8b81eba7ceb7":  	return FrameworkType.Zune;  }  
Missing Default,de4dot.blocks,InstructionListParser,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\InstructionListParser.cs,createBranches,The following switch statement is missing a default case: switch (instr.OpCode.Code) {  case Code.Endfilter:  case Code.Endfinally:  case Code.Jmp:  case Code.Ret:  case Code.Rethrow:  case Code.Throw:  	targets = new List<int> ();  	break;  }  
Missing Default,de4dot.blocks,InstructionListParser,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\InstructionListParser.cs,fixBranchTargets,The following switch statement is missing a default case: switch (lastInstr.OpCode.OperandType) {  case OperandType.ShortInlineBrTarget:  case OperandType.InlineBrTarget:  	var targetInstr = lastInstr.Operand as Instruction;  	if (targetInstr != null)  		block.Targets = new List<Block> {  			instrToBlock [instrToIndex [targetInstr]]  		};  	break;  case OperandType.InlineSwitch:  	var switchTargets = (Instruction[])lastInstr.Operand;  	var newSwitchTargets = new List<Block> ();  	block.Targets = newSwitchTargets;  	foreach (var target in switchTargets) {  		if (target != null)  			newSwitchTargets.Add (instrToBlock [instrToIndex [target]]);  	}  	break;  }  
Missing Default,de4dot.blocks,ScopeAndTokenKey,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\MemberDefDict.cs,getAssemblyName,The following switch statement is missing a default case: switch (a.ScopeType) {  case ScopeType.AssemblyRef:  	return ((AssemblyRef)a).Name.String;  case ScopeType.ModuleDef:  	var asm = ((ModuleDef)a).Assembly;  	if (asm != null)  		return asm.Name.String;  	break;  }  
Missing Default,de4dot.blocks.cflow,ConstantsFolder,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\ConstantsFolder.cs,deobfuscate,The following switch statement is missing a default case: switch (instr.OpCode.Code) {  case Code.Ldarg:  case Code.Ldarg_0:  case Code.Ldarg_1:  case Code.Ldarg_2:  case Code.Ldarg_3:  case Code.Ldarg_S:  	changed |= fixLoadInstruction (block' i' instructionEmulator.getArg (instr.Instruction.GetParameter (args)));  	break;  case Code.Ldloc:  case Code.Ldloc_0:  case Code.Ldloc_1:  case Code.Ldloc_2:  case Code.Ldloc_3:  case Code.Ldloc_S:  	changed |= fixLoadInstruction (block' i' instructionEmulator.getLocal (instr.Instruction.GetLocal (blocks.Locals)));  	break;  case Code.Ldarga:  case Code.Ldarga_S:  	instructionEmulator.makeArgUnknown ((Parameter)instr.Operand);  	break;  case Code.Ldloca:  case Code.Ldloca_S:  	instructionEmulator.makeLocalUnknown ((Local)instr.Operand);  	break;  }  
Missing Default,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,getUnknownValue,The following switch statement is missing a default case: switch (type.ElementType) {  case ElementType.Boolean:  	return Int32Value.createUnknownBool ();  case ElementType.I1:  	return Int32Value.createUnknown ();  case ElementType.U1:  	return Int32Value.createUnknownUInt8 ();  case ElementType.I2:  	return Int32Value.createUnknown ();  case ElementType.U2:  	return Int32Value.createUnknownUInt16 ();  case ElementType.I4:  	return Int32Value.createUnknown ();  case ElementType.U4:  	return Int32Value.createUnknown ();  case ElementType.I8:  	return Int64Value.createUnknown ();  case ElementType.U8:  	return Int64Value.createUnknown ();  }  
Missing Default,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\blocks\cflow\InstructionEmulator.cs,truncateValue,The following switch statement is missing a default case: switch (type.ElementType) {  case ElementType.Boolean:  	if (value.isInt32 ())  		return ((Int32Value)value).toBoolean ();  	return Int32Value.createUnknownBool ();  case ElementType.I1:  	if (value.isInt32 ())  		return ((Int32Value)value).toInt8 ();  	return Int32Value.createUnknown ();  case ElementType.U1:  	if (value.isInt32 ())  		return ((Int32Value)value).toUInt8 ();  	return Int32Value.createUnknownUInt8 ();  case ElementType.I2:  	if (value.isInt32 ())  		return ((Int32Value)value).toInt16 ();  	return Int32Value.createUnknown ();  case ElementType.U2:  	if (value.isInt32 ())  		return ((Int32Value)value).toUInt16 ();  	return Int32Value.createUnknownUInt16 ();  case ElementType.I4:  case ElementType.U4:  	if (value.isInt32 ())  		return value;  	return Int32Value.createUnknown ();  case ElementType.I8:  case ElementType.U8:  	if (value.isInt64 ())  		return value;  	return Int64Value.createUnknown ();  case ElementType.R4:  	if (value.isReal8 ())  		return new Real8Value ((float)((Real8Value)value).value);  	return new UnknownValue ();  case ElementType.R8:  	if (value.isReal8 ())  		return value;  	return new UnknownValue ();  }  
