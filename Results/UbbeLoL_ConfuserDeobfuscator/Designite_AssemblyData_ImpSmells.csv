Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AssemblyData,Utils,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\Utils.cs,getDelegateType,Cyclomatic complexity of the method is 42
Complex Method,AssemblyData.methodsrewriter,AssemblyResolver,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\AssemblyResolver.cs,getTypeResolver,Cyclomatic complexity of the method is 8
Complex Method,AssemblyData.methodsrewriter,CodeGenerator,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\CodeGenerator.cs,updateExceptionHandlers,Cyclomatic complexity of the method is 8
Complex Method,AssemblyData.methodsrewriter,CodeGenerator,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\CodeGenerator.cs,writeSpecialInstr,Cyclomatic complexity of the method is 8
Complex Method,AssemblyData.methodsrewriter,CodeGenerator,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\CodeGenerator.cs,writeInstr,Cyclomatic complexity of the method is 18
Complex Method,AssemblyData.methodsrewriter,MethodsRewriter,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\MethodsRewriter.cs,update,Cyclomatic complexity of the method is 16
Complex Method,AssemblyData.methodsrewriter,Resolver,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\Resolver.cs,fixType,Cyclomatic complexity of the method is 12
Long Statement,AssemblyData,AssemblyService,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\AssemblyService.cs,loadAssembly,The length of the statement  "				throw new ApplicationException(string.Format("Could not load assembly {0}. Maybe it's 32-bit or 64-bit only?"' filename)); " is 122.
Long Statement,AssemblyData.methodsrewriter,AssemblyResolver,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\AssemblyResolver.cs,initGlobalFields,The length of the statement  "			var flags = BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance; " is 131.
Long Statement,AssemblyData.methodsrewriter,AssemblyResolver,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\AssemblyResolver.cs,initGlobalMethods,The length of the statement  "			var flags = BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance; " is 131.
Long Statement,AssemblyData.methodsrewriter,CodeGenerator,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\CodeGenerator.cs,writeSpecialInstr,The length of the statement  "				flags = BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public; " is 127.
Long Statement,AssemblyData.methodsrewriter,MethodsRewriter,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\MethodsRewriter.cs,createDelegate,The length of the statement  "			var dm = new DynamicMethod(newMethodInfo.rewrittenMethodName' typeof(object)' new Type[] { GetType()' typeof(object[]) }' newMethodInfo.oldMethod.Module' true); " is 160.
Long Statement,AssemblyData.methodsrewriter,MethodsRewriter,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\MethodsRewriter.cs,createDelegate,The length of the statement  "			ilg.Emit(ROpCodes.Call' GetType().GetMethod("rtGetDelegateInstance"' BindingFlags.DeclaredOnly | BindingFlags.NonPublic | BindingFlags.Instance)); " is 146.
Long Statement,AssemblyData.methodsrewriter,MethodsRewriter,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\MethodsRewriter.cs,createMethod,The length of the statement  "			var newMethodInfo = new NewMethodInfo(realMethod' newMethodInfos.Count' getDelegateMethodName(realMethod)' getDelegateMethodName(realMethod)); " is 142.
Long Statement,AssemblyData.methodsrewriter,MethodsRewriter,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\MethodsRewriter.cs,createMethod,The length of the statement  "				throw new ApplicationException(string.Format("Method {0} ({1:X8}) has no body"' methodInfo.methodDef' methodInfo.methodDef.MDToken.Raw)); " is 137.
Long Statement,AssemblyData.methodsrewriter,MethodsRewriter,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\MethodsRewriter.cs,getStackTraceStackFramesField,The length of the statement  "			return ResolverUtils.getFieldThrow(typeof(StackTrace)' typeof(StackFrame[])' flags' "Could not find StackTrace's frames (StackFrame[]) field"); " is 143.
Long Statement,AssemblyData.methodsrewriter,MethodsRewriter,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\MethodsRewriter.cs,getStackFrameMethodField,The length of the statement  "			return ResolverUtils.getFieldThrow(typeof(StackFrame)' typeof(MethodBase)' flags' "Could not find StackFrame's method (MethodBase) field"); " is 139.
Long Statement,AssemblyData.methodsrewriter,MModule,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\MModule.cs,initGlobalMethods,The length of the statement  "			var flags = BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic; " is 131.
Long Statement,AssemblyData.methodsrewriter,MModule,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\MModule.cs,initGlobalFields,The length of the statement  "			var flags = BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic; " is 131.
Long Statement,AssemblyData.methodsrewriter,MType,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\MType.cs,initMethods,The length of the statement  "			var flags = BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic; " is 131.
Long Statement,AssemblyData.methodsrewriter,MType,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\MType.cs,initFields,The length of the statement  "			var flags = BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic; " is 131.
Long Statement,AssemblyData.methodsrewriter,Resolver,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\Resolver.cs,resolve,The length of the statement  "			throw new ApplicationException(string.Format("Could not resolve type {0} ({1:X8}) in assembly {2}"' typeRef' typeRef.MDToken.Raw' resolver)); " is 141.
Long Statement,AssemblyData.methodsrewriter,Resolver,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\Resolver.cs,resolve,The length of the statement  "			throw new ApplicationException(string.Format("Could not resolve field {0} ({1:X8}) in assembly {2}"' fieldRef' fieldRef.MDToken.Raw' resolver)); " is 144.
Long Statement,AssemblyData.methodsrewriter,Resolver,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\Resolver.cs,resolve,The length of the statement  "			throw new ApplicationException(string.Format("Could not resolve method {0} ({1:X8}) in assembly {2}"' methodRef' methodRef.MDToken.Raw' resolver)); " is 147.
Long Statement,AssemblyData.methodsrewriter,ResolverUtils,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\ResolverUtils.cs,getReturnType,The length of the statement  "			throw new ApplicationException(string.Format("Could not figure out return type: {0} ({1:X8})"' methodBase' methodBase.MetadataToken)); " is 134.
Long Statement,AssemblyData.methodsrewriter,TypeInstanceResolver,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\TypeInstanceResolver.cs,initFields,The length of the statement  "			var flags = BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance; " is 131.
Long Statement,AssemblyData.methodsrewriter,TypeInstanceResolver,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\TypeInstanceResolver.cs,initMethods,The length of the statement  "			var flags = BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance; " is 131.
Empty Catch Block,AssemblyData,AssemblyResolver,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\AssemblyResolver.cs,assemblyResolve,The method has an empty catch block.
Empty Catch Block,AssemblyData,AssemblyResolver,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\AssemblyResolver.cs,assemblyResolve,The method has an empty catch block.
Empty Catch Block,AssemblyData,AssemblyResolver,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\AssemblyResolver.cs,assemblyResolve,The method has an empty catch block.
Empty Catch Block,AssemblyData,AssemblyResolver,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\AssemblyResolver.cs,assemblyResolve,The method has an empty catch block.
Empty Catch Block,AssemblyData,AssemblyResolver,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\AssemblyResolver.cs,assemblyResolve,The method has an empty catch block.
Empty Catch Block,AssemblyData,AssemblyResolver,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\AssemblyResolver.cs,assemblyResolve,The method has an empty catch block.
Empty Catch Block,AssemblyData,AssemblyResolver,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\AssemblyResolver.cs,addConfigFile,The method has an empty catch block.
Empty Catch Block,AssemblyData,AssemblyResolver,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\AssemblyResolver.cs,addConfigFile,The method has an empty catch block.
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\Utils.cs,getDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException(string.Format("Too many delegate type arguments: {0}"' types.Length));  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\Utils.cs,getDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException(string.Format("Too many delegate type arguments: {0}"' types.Length));  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\Utils.cs,getDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException(string.Format("Too many delegate type arguments: {0}"' types.Length));  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\Utils.cs,getDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException(string.Format("Too many delegate type arguments: {0}"' types.Length));  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\Utils.cs,getDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException(string.Format("Too many delegate type arguments: {0}"' types.Length));  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\Utils.cs,getDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException(string.Format("Too many delegate type arguments: {0}"' types.Length));  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\Utils.cs,getDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException(string.Format("Too many delegate type arguments: {0}"' types.Length));  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\Utils.cs,getDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException(string.Format("Too many delegate type arguments: {0}"' types.Length));  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\Utils.cs,getDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException(string.Format("Too many delegate type arguments: {0}"' types.Length));  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\Utils.cs,getDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException(string.Format("Too many delegate type arguments: {0}"' types.Length));  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\Utils.cs,getDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException(string.Format("Too many delegate type arguments: {0}"' types.Length));  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\Utils.cs,getDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException(string.Format("Too many delegate type arguments: {0}"' types.Length));  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\Utils.cs,getDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException(string.Format("Too many delegate type arguments: {0}"' types.Length));  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\Utils.cs,getDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException(string.Format("Too many delegate type arguments: {0}"' types.Length));  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\Utils.cs,getDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException(string.Format("Too many delegate type arguments: {0}"' types.Length));  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\Utils.cs,getDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException(string.Format("Too many delegate type arguments: {0}"' types.Length));  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\Utils.cs,getDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException(string.Format("Too many delegate type arguments: {0}"' types.Length));  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\Utils.cs,getDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException(string.Format("Too many delegate type arguments: {0}"' types.Length));  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\Utils.cs,randomName,The following statement contains a magic number: sb.Append((char)((int)'A' + random.Next(26)));
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\Utils.cs,randomName,The following statement contains a magic number: numLower = random.Next(1' 5);
Magic Number,AssemblyServer,Start,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\AssemblyServer.cs,main,The following statement contains a magic number: args.Length != 2
Magic Number,AssemblyData.methodsrewriter,MethodsRewriter,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\MethodsRewriter.cs,update,The following statement contains a magic number: insertCallOurMethod(block' i + 2' "static_rtFixStackTrace");
Magic Number,AssemblyData.methodsrewriter,MethodsRewriter,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\MethodsRewriter.cs,update,The following statement contains a magic number: i += 2;
Magic Number,AssemblyData.methodsrewriter,MethodsRewriter,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\MethodsRewriter.cs,update,The following statement contains a magic number: insertCallOurMethod(block' i + 2' "static_rtGetAssembly_TypeArg");
Magic Number,AssemblyData.methodsrewriter,MethodsRewriter,D:\research\architectureSmells\repos\UbbeLoL_ConfuserDeobfuscator\ConfuserDeobfuscator\de4dot\AssemblyData\methodsrewriter\MethodsRewriter.cs,update,The following statement contains a magic number: i += 2;
