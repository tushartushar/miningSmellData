Implementation smell,Namespace,Class,File,Method,Description
Long Method,Samples,MainWindow,C:\repos\mono_xwt\TestApps\Samples\MainWindow.cs,MainWindow,The method has 131 lines of code.
Long Method,Samples,ComboBoxes,C:\repos\mono_xwt\TestApps\Samples\Samples\ComboBoxes.cs,ComboBoxes,The method has 129 lines of code.
Long Method,Samples,Windows,C:\repos\mono_xwt\TestApps\Samples\Samples\Windows.cs,Windows,The method has 167 lines of code.
Long Method,Samples,TreeViews,C:\repos\mono_xwt\TestApps\Samples\Samples\TreeViews.cs,TreeViews,The method has 183 lines of code.
Long Method,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The method has 139 lines of code.
Long Method,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The method has 116 lines of code.
Long Method,Samples,MultithreadingSample,C:\repos\mono_xwt\TestApps\Samples\Samples\MultithreadingSample.cs,MultithreadingSample,The method has 105 lines of code.
Long Method,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,OnDraw,The method has 127 lines of code.
Long Method,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,The method has 121 lines of code.
Complex Method,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,OnDraw,Cyclomatic complexity of the method is 29
Complex Method,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,Cyclomatic complexity of the method is 12
Long Parameter List,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,The method has 6 parameters. Parameters: ctx' e' pos' ad' tickSize' showLabels
Long Statement,Samples,Mnemonics,C:\repos\mono_xwt\TestApps\Samples\Samples\Mnemonics.cs,GenerateFrameContents,The length of the statement  "			toggleButton.Clicked += (sender' e) => MessageDialog.ShowMessage (string.Format ("Toggle Button {0} clicked."' statusText)); " is 124.
Long Statement,Samples,Mnemonics,C:\repos\mono_xwt\TestApps\Samples\Samples\Mnemonics.cs,GenerateFrameContents,The length of the statement  "			firstMenuItem.Clicked += (sender' e) => MessageDialog.ShowMessage (string.Format ("First Menu Item {0} clicked."' statusText)); " is 127.
Long Statement,Samples,Mnemonics,C:\repos\mono_xwt\TestApps\Samples\Samples\Mnemonics.cs,GenerateFrameContents,The length of the statement  "			secondMenuItem.Clicked += (sender' e) => MessageDialog.ShowMessage (string.Format ("Second Menu Item {0} clicked."' statusText)); " is 129.
Long Statement,Samples,SimpleBox,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,OnDraw,The length of the statement  "			ctx.Rectangle (Bounds.Width / 2 - coreSize.Width / 2' Bounds.Height / 2 - coreSize.Height / 2' coreSize.Width' coreSize.Height); " is 128.
Long Statement,Samples,MainWindow,C:\repos\mono_xwt\TestApps\Samples\MainWindow.cs,AddSample,The length of the statement  "			return store.AddNode (pos).SetValue (nameCol' name).SetValue (iconCol' icon).SetValue (widgetCol' new Sample (sampleType)).CurrentPosition; " is 139.
Long Statement,Samples,MyCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\CanvasWithWidget.cs,OnDraw,The length of the statement  "				g = new RadialGradient (Bounds.Width / 2' Bounds.Height / 2' Bounds.Width / 2' Bounds.Width / 2' Bounds.Height / 2' xStart/4 + Bounds.Width / 8); " is 145.
Long Statement,Samples,ScreensCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\ScreensSample.cs,OnDraw,The length of the statement  "					var vr = new Rectangle ((int)(s.Bounds.X * fx)' (int)(s.Bounds.Y * fx)' (int)(s.Bounds.Width * fx)' (int)(s.Bounds.Height * fx)); " is 129.
Long Statement,Samples,ScreensCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\ScreensSample.cs,OnDraw,The length of the statement  "				var r = new Rectangle ((int)(s.VisibleBounds.X * fx)' (int)(s.VisibleBounds.Y * fx)' (int)(s.VisibleBounds.Width * fx)' (int)(s.VisibleBounds.Height * fx)); " is 156.
Empty Catch Block,Samples,Images,C:\repos\mono_xwt\TestApps\Samples\Samples\Images.cs,Images,The method has an empty catch block.
Magic Number,Samples,ChartSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ChartSample.cs,ChartSample,The following statement contains a magic number: s.AddData (10' 10);
Magic Number,Samples,ChartSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ChartSample.cs,ChartSample,The following statement contains a magic number: s.AddData (10' 10);
Magic Number,Samples,ChartSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ChartSample.cs,ChartSample,The following statement contains a magic number: s.AddData (20' 11);
Magic Number,Samples,ChartSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ChartSample.cs,ChartSample,The following statement contains a magic number: s.AddData (20' 11);
Magic Number,Samples,ChartSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ChartSample.cs,ChartSample,The following statement contains a magic number: s.AddData (30' 15);
Magic Number,Samples,ChartSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ChartSample.cs,ChartSample,The following statement contains a magic number: s.AddData (30' 15);
Magic Number,Samples,ChartSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ChartSample.cs,ChartSample,The following statement contains a magic number: s.AddData (40' 9);
Magic Number,Samples,ChartSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ChartSample.cs,ChartSample,The following statement contains a magic number: s.AddData (40' 9);
Magic Number,Samples,ChartSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ChartSample.cs,ChartSample,The following statement contains a magic number: s.AddData (10' 20);
Magic Number,Samples,ChartSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ChartSample.cs,ChartSample,The following statement contains a magic number: s.AddData (10' 20);
Magic Number,Samples,ChartSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ChartSample.cs,ChartSample,The following statement contains a magic number: s.AddData (20' 19);
Magic Number,Samples,ChartSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ChartSample.cs,ChartSample,The following statement contains a magic number: s.AddData (20' 19);
Magic Number,Samples,ChartSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ChartSample.cs,ChartSample,The following statement contains a magic number: s.AddData (30' 25);
Magic Number,Samples,ChartSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ChartSample.cs,ChartSample,The following statement contains a magic number: s.AddData (30' 25);
Magic Number,Samples,ChartSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ChartSample.cs,ChartSample,The following statement contains a magic number: s.AddData (40' 26);
Magic Number,Samples,ChartSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ChartSample.cs,ChartSample,The following statement contains a magic number: s.AddData (40' 26);
Magic Number,Samples,MyWidget,C:\repos\mono_xwt\TestApps\Samples\Samples\Mnemonics.cs,MyWidget,The following statement contains a magic number: MinWidth = 210;
Magic Number,Samples,MyWidget,C:\repos\mono_xwt\TestApps\Samples\Samples\Mnemonics.cs,MyWidget,The following statement contains a magic number: MinHeight = 110;
Magic Number,Samples,MyWidget,C:\repos\mono_xwt\TestApps\Samples\Samples\Mnemonics.cs,OnDraw,The following statement contains a magic number: ctx.SetLineWidth (5);
Magic Number,Samples,MyWidget,C:\repos\mono_xwt\TestApps\Samples\Samples\Mnemonics.cs,OnDraw,The following statement contains a magic number: ctx.Rectangle (5' 5' 200' 100);
Magic Number,Samples,MyWidget,C:\repos\mono_xwt\TestApps\Samples\Samples\Mnemonics.cs,OnDraw,The following statement contains a magic number: ctx.Rectangle (5' 5' 200' 100);
Magic Number,Samples,MyWidget,C:\repos\mono_xwt\TestApps\Samples\Samples\Mnemonics.cs,OnDraw,The following statement contains a magic number: ctx.Rectangle (5' 5' 200' 100);
Magic Number,Samples,MyWidget,C:\repos\mono_xwt\TestApps\Samples\Samples\Mnemonics.cs,OnDraw,The following statement contains a magic number: ctx.Rectangle (5' 5' 200' 100);
Magic Number,Samples,Spinners,C:\repos\mono_xwt\TestApps\Samples\Samples\Spinners.cs,Spinners,The following statement contains a magic number: PackStart (new Spinner () { MinHeight = 50 });
Magic Number,Samples,Spinners,C:\repos\mono_xwt\TestApps\Samples\Samples\Spinners.cs,Spinners,The following statement contains a magic number: var clickable = new Spinner () { MinHeight = 30' Animate = true };
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box2.PackStart (new SimpleBox (30));
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box2.PackStart (new SimpleBox (30));
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box2.PackStart (new SimpleBox (30)' true);
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box1.PackStart (new SimpleBox (30));
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box1.PackStart (new SimpleBox (30)' expand:true' fill:false);
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box3.PackEnd (new SimpleBox (30));
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box3.PackStart (new SimpleBox (20) {Color = new Color (1' 0.5' 0.5)});
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box3.PackStart (new SimpleBox (20) {Color = new Color (1' 0.5' 0.5)});
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box3.PackStart (new SimpleBox (20) {Color = new Color (1' 0.5' 0.5)});
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box3.PackEnd (new SimpleBox (40));
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box3.PackStart (new SimpleBox (10) {Color = new Color (1' 0.5' 0.5)});
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box3.PackStart (new SimpleBox (10) {Color = new Color (1' 0.5' 0.5)});
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box3.PackStart (new SimpleBox (10) {Color = new Color (1' 0.5' 0.5)});
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box3.PackEnd (new SimpleBox (30));
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box3.PackStart (new SimpleBox (10) {Color = new Color (1' 0.5' 0.5)}' true);
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box3.PackStart (new SimpleBox (10) {Color = new Color (1' 0.5' 0.5)}' true);
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box3.PackStart (new SimpleBox (10) {Color = new Color (1' 0.5' 0.5)}' true);
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box4.PackStart (new SimpleBox (30)' true);
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box4.PackStart (new SimpleBox (30)' true);
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box5.PackStart (new SimpleBox (30)' true);
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: var hsb = new SimpleBox (20);
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box5.PackStart (new SimpleBox (30)' true);
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: for (int n=0; n<15; n++) {  				var w = new Label ("TestLabel" + n);  				w.WidthRequest = 10;  				box6.PackStart (w);  			}
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: for (int n=0; n<15; n++) {  				var w = new Label ("TestLabel" + n);  				w.WidthRequest = 10;  				box6.PackStart (w);  			}
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box7.PackStart (new Label("Hi there") { Margin = new WidgetSpacing (10' 10' 0' 0) });
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box7.PackStart (new Label("Hi there") { Margin = new WidgetSpacing (10' 10' 0' 0) });
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box7.PackStart (new SpecialWidget() { MarginTop = 15 });
Magic Number,Samples,Boxes,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,Boxes,The following statement contains a magic number: box7.PackStart (new SpecialWidget() { Margin = 5 });
Magic Number,Samples,SimpleBox,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,SimpleBox,The following statement contains a magic number: Color = new Color (0.5' 0.5' 1);
Magic Number,Samples,SimpleBox,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,SimpleBox,The following statement contains a magic number: Color = new Color (0.5' 0.5' 1);
Magic Number,Samples,SimpleBox,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,SimpleBox,The following statement contains a magic number: MinWidth = MinHeight = coreSize + margin * 2;
Magic Number,Samples,SimpleBox,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,SimpleBox,The following statement contains a magic number: Color = new Color (0.5' 0.5' 1);
Magic Number,Samples,SimpleBox,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,SimpleBox,The following statement contains a magic number: Color = new Color (0.5' 0.5' 1);
Magic Number,Samples,SimpleBox,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,SimpleBox,The following statement contains a magic number: MinWidth = coreSize.Width + margin * 2;
Magic Number,Samples,SimpleBox,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,SimpleBox,The following statement contains a magic number: MinHeight = coreSize.Height + margin * 2;
Magic Number,Samples,SimpleBox,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,OnDraw,The following statement contains a magic number: ctx.SetColor (new Color (0.5' 0.5' 0.5));
Magic Number,Samples,SimpleBox,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,OnDraw,The following statement contains a magic number: ctx.SetColor (new Color (0.5' 0.5' 0.5));
Magic Number,Samples,SimpleBox,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,OnDraw,The following statement contains a magic number: ctx.SetColor (new Color (0.5' 0.5' 0.5));
Magic Number,Samples,SimpleBox,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,OnDraw,The following statement contains a magic number: ctx.SetColor (new Color (0.8' 0.8' 0.8));
Magic Number,Samples,SimpleBox,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,OnDraw,The following statement contains a magic number: ctx.SetColor (new Color (0.8' 0.8' 0.8));
Magic Number,Samples,SimpleBox,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,OnDraw,The following statement contains a magic number: ctx.SetColor (new Color (0.8' 0.8' 0.8));
Magic Number,Samples,SimpleBox,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,OnDraw,The following statement contains a magic number: ctx.SetColor (highlight ? Color.BlendWith (Xwt.Drawing.Colors.White' 0.5) : Color);
Magic Number,Samples,SimpleBox,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,OnDraw,The following statement contains a magic number: ctx.Rectangle (Bounds.Width / 2 - coreSize.Width / 2' Bounds.Height / 2 - coreSize.Height / 2' coreSize.Width' coreSize.Height);
Magic Number,Samples,SimpleBox,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,OnDraw,The following statement contains a magic number: ctx.Rectangle (Bounds.Width / 2 - coreSize.Width / 2' Bounds.Height / 2 - coreSize.Height / 2' coreSize.Width' coreSize.Height);
Magic Number,Samples,SimpleBox,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,OnDraw,The following statement contains a magic number: ctx.Rectangle (Bounds.Width / 2 - coreSize.Width / 2' Bounds.Height / 2 - coreSize.Height / 2' coreSize.Width' coreSize.Height);
Magic Number,Samples,SimpleBox,C:\repos\mono_xwt\TestApps\Samples\Samples\Boxes.cs,OnDraw,The following statement contains a magic number: ctx.Rectangle (Bounds.Width / 2 - coreSize.Width / 2' Bounds.Height / 2 - coreSize.Height / 2' coreSize.Width' coreSize.Height);
Magic Number,Samples,ListView1,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView1.cs,ListView1,The following statement contains a magic number: for (int n=0; n<100; n++) {  				var r = store.AddRow ();  				store.SetValue (r' icon' png);  				store.SetValue (r' name' "Value " + n);  				store.SetValue (r' icon2' png);  				store.SetValue (r' text' "Text " + n);  				store.SetValue (r' progress' new CellData { Value = rand.Next () % 100 });  			}
Magic Number,Samples,ListView1,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView1.cs,ListView1,The following statement contains a magic number: for (int n=0; n<100; n++) {  				var r = store.AddRow ();  				store.SetValue (r' icon' png);  				store.SetValue (r' name' "Value " + n);  				store.SetValue (r' icon2' png);  				store.SetValue (r' text' "Text " + n);  				store.SetValue (r' progress' new CellData { Value = rand.Next () % 100 });  			}
Magic Number,Samples,ListView1,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView1.cs,ListView1,The following statement contains a magic number: list.KeyPressed += (sender' e) => {  				if (e.Key == Key.Insert) {  					var r = store.InsertRowAfter(list.SelectedRow < 0 ? 0 : list.SelectedRow);  					store.SetValue (r' icon' png);  					store.SetValue (r' name' "Value " + (store.RowCount + 1));  					store.SetValue (r' icon2' png);  					store.SetValue (r' text' "New Text " + (store.RowCount + 1));  					store.SetValue (r' progress' new CellData { Value = rand.Next () % 100 });  					list.ScrollToRow (r);  					list.SelectRow (r);  					list.FocusedRow = r;  				}  			};
Magic Number,Samples,ListView1,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView1.cs,ListView1,The following statement contains a magic number: btnAddItem.Clicked += delegate {  				var r = store.InsertRowAfter(list.SelectedRow < 0 ? 0 : list.SelectedRow);  				store.SetValue (r' icon' png);  				store.SetValue (r' name' "Value " + (store.RowCount + 1));  				store.SetValue (r' icon2' png);  				store.SetValue (r' text' "New Text " + (store.RowCount + 1));  				store.SetValue (r' progress' new CellData { Value = rand.Next () % 100 });  				list.ScrollToRow (r);  				list.SelectRow (r);  			};
Magic Number,Samples,ListView1,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView1.cs,ListView1,The following statement contains a magic number: spnValue.MaximumValue = 99;
Magic Number,Samples,CustomCell,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView1.cs,CustomCell,The following statement contains a magic number: Size = new Size (200' 10);
Magic Number,Samples,CustomCell,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView1.cs,CustomCell,The following statement contains a magic number: Size = new Size (200' 10);
Magic Number,Samples,CustomCell,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView1.cs,OnDraw,The following statement contains a magic number: ctx.SetColor (new Color (0.9' 0.9' 0.9));
Magic Number,Samples,CustomCell,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView1.cs,OnDraw,The following statement contains a magic number: ctx.SetColor (new Color (0.9' 0.9' 0.9));
Magic Number,Samples,CustomCell,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView1.cs,OnDraw,The following statement contains a magic number: ctx.SetColor (new Color (0.9' 0.9' 0.9));
Magic Number,Samples,CustomCell,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView1.cs,OnDraw,The following statement contains a magic number: ctx.SetColor (new Color (0.7' 0.7' 0.7));
Magic Number,Samples,CustomCell,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView1.cs,OnDraw,The following statement contains a magic number: ctx.SetColor (new Color (0.7' 0.7' 0.7));
Magic Number,Samples,CustomCell,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView1.cs,OnDraw,The following statement contains a magic number: ctx.SetColor (new Color (0.7' 0.7' 0.7));
Magic Number,Samples,CustomCell,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView1.cs,OnDraw,The following statement contains a magic number: ctx.Rectangle (cellArea.Inflate (-0.5' -0.5));
Magic Number,Samples,CustomCell,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView1.cs,OnDraw,The following statement contains a magic number: ctx.Rectangle (cellArea.Inflate (-0.5' -0.5));
Magic Number,Samples,CustomCell,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView1.cs,OnDraw,The following statement contains a magic number: if (pct.YPos != -1) {  				ctx.MoveTo (cellArea.Right' Bounds.Y + pct.YPos);  				ctx.Arc (cellArea.Right' Bounds.Y + pct.YPos' 2.5' 0' 360);  				ctx.SetColor (Colors.Red);  				ctx.Fill ();  			}
Magic Number,Samples,CustomCell,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView1.cs,OnDraw,The following statement contains a magic number: if (pct.YPos != -1) {  				ctx.MoveTo (cellArea.Right' Bounds.Y + pct.YPos);  				ctx.Arc (cellArea.Right' Bounds.Y + pct.YPos' 2.5' 0' 360);  				ctx.SetColor (Colors.Red);  				ctx.Fill ();  			}
Magic Number,Samples,CustomCell,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView1.cs,OnMouseMoved,The following statement contains a magic number: data.Value = (int) (100 * ((args.X - Bounds.X) / Bounds.Width));
Magic Number,Samples,DragDrop,C:\repos\mono_xwt\TestApps\Samples\Samples\DragDrop.cs,DragDrop,The following statement contains a magic number: SimpleBox b1 = new SimpleBox (30);
Magic Number,Samples,MainWindow,C:\repos\mono_xwt\TestApps\Samples\MainWindow.cs,MainWindow,The following statement contains a magic number: Width = 500;
Magic Number,Samples,MainWindow,C:\repos\mono_xwt\TestApps\Samples\MainWindow.cs,MainWindow,The following statement contains a magic number: Height = 400;
Magic Number,Samples,MainWindow,C:\repos\mono_xwt\TestApps\Samples\MainWindow.cs,MainWindow,The following statement contains a magic number: box.Position = 160;
Magic Number,Samples,MainWindow,C:\repos\mono_xwt\TestApps\Samples\MainWindow.cs,Dump,The following statement contains a magic number: Console.WriteLine (new string (' '' ind * 2) + " " + w.GetType ().Name + " " + s.Width + " " + s.Height);
Magic Number,Samples,PartialImageCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\PartialImages.cs,OnDraw,The following statement contains a magic number: for (int y = 0; y < img.Size.Height / 50; ++y) {  				for (int x = 0; x < img.Size.Width / 50; ++x) {  					ctx.DrawImage (img' new Rectangle (x*50' y*50' 50' 50)' new Rectangle (x*55' y*55' 50' 50));  				}  			}
Magic Number,Samples,PartialImageCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\PartialImages.cs,OnDraw,The following statement contains a magic number: for (int y = 0; y < img.Size.Height / 50; ++y) {  				for (int x = 0; x < img.Size.Width / 50; ++x) {  					ctx.DrawImage (img' new Rectangle (x*50' y*50' 50' 50)' new Rectangle (x*55' y*55' 50' 50));  				}  			}
Magic Number,Samples,PartialImageCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\PartialImages.cs,OnDraw,The following statement contains a magic number: for (int y = 0; y < img.Size.Height / 50; ++y) {  				for (int x = 0; x < img.Size.Width / 50; ++x) {  					ctx.DrawImage (img' new Rectangle (x*50' y*50' 50' 50)' new Rectangle (x*55' y*55' 50' 50));  				}  			}
Magic Number,Samples,PartialImageCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\PartialImages.cs,OnDraw,The following statement contains a magic number: for (int y = 0; y < img.Size.Height / 50; ++y) {  				for (int x = 0; x < img.Size.Width / 50; ++x) {  					ctx.DrawImage (img' new Rectangle (x*50' y*50' 50' 50)' new Rectangle (x*55' y*55' 50' 50));  				}  			}
Magic Number,Samples,PartialImageCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\PartialImages.cs,OnDraw,The following statement contains a magic number: for (int y = 0; y < img.Size.Height / 50; ++y) {  				for (int x = 0; x < img.Size.Width / 50; ++x) {  					ctx.DrawImage (img' new Rectangle (x*50' y*50' 50' 50)' new Rectangle (x*55' y*55' 50' 50));  				}  			}
Magic Number,Samples,PartialImageCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\PartialImages.cs,OnDraw,The following statement contains a magic number: for (int y = 0; y < img.Size.Height / 50; ++y) {  				for (int x = 0; x < img.Size.Width / 50; ++x) {  					ctx.DrawImage (img' new Rectangle (x*50' y*50' 50' 50)' new Rectangle (x*55' y*55' 50' 50));  				}  			}
Magic Number,Samples,PartialImageCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\PartialImages.cs,OnDraw,The following statement contains a magic number: for (int y = 0; y < img.Size.Height / 50; ++y) {  				for (int x = 0; x < img.Size.Width / 50; ++x) {  					ctx.DrawImage (img' new Rectangle (x*50' y*50' 50' 50)' new Rectangle (x*55' y*55' 50' 50));  				}  			}
Magic Number,Samples,PartialImageCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\PartialImages.cs,OnDraw,The following statement contains a magic number: for (int y = 0; y < img.Size.Height / 50; ++y) {  				for (int x = 0; x < img.Size.Width / 50; ++x) {  					ctx.DrawImage (img' new Rectangle (x*50' y*50' 50' 50)' new Rectangle (x*55' y*55' 50' 50));  				}  			}
Magic Number,Samples,PartialImageCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\PartialImages.cs,OnDraw,The following statement contains a magic number: for (int y = 0; y < img.Size.Height / 50; ++y) {  				for (int x = 0; x < img.Size.Width / 50; ++x) {  					ctx.DrawImage (img' new Rectangle (x*50' y*50' 50' 50)' new Rectangle (x*55' y*55' 50' 50));  				}  			}
Magic Number,Samples,PartialImageCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\PartialImages.cs,OnDraw,The following statement contains a magic number: for (int y = 0; y < img.Size.Height / 50; ++y) {  				for (int x = 0; x < img.Size.Width / 50; ++x) {  					ctx.DrawImage (img' new Rectangle (x*50' y*50' 50' 50)' new Rectangle (x*55' y*55' 50' 50));  				}  			}
Magic Number,Samples,ScrollWindowSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ScrollWindowSample.cs,ScrollWindowSample,The following statement contains a magic number: for (int n=0; n<30; n++)  				b1.PackStart (new Label ("Line " + n));
Magic Number,Samples,ScrollWindowSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ScrollWindowSample.cs,ScrollWindowSample,The following statement contains a magic number: for (int n=0; n<10; n++)  				b2.PackStart (new Label ("Line " + n));
Magic Number,Samples,ScrollWindowSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ScrollWindowSample.cs,ScrollWindowSample,The following statement contains a magic number: b.Clicked += delegate {  				for (int n=0; n<10; n++)  					b3.PackStart (new Label ("Line " + n));  			};
Magic Number,Samples,ScrollableCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\ScrollWindowSample.cs,ScrollableCanvas,The following statement contains a magic number: MinWidth = 100;
Magic Number,Samples,ScrollableCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\ScrollWindowSample.cs,ScrollableCanvas,The following statement contains a magic number: MinHeight = 100;
Magic Number,Samples,ScrollableCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\ScrollWindowSample.cs,OnDraw,The following statement contains a magic number: ctx.Arc (imageSize / 2' imageSize / 2' imageSize / 2 - 20' 0' 360);
Magic Number,Samples,ScrollableCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\ScrollWindowSample.cs,OnDraw,The following statement contains a magic number: ctx.Arc (imageSize / 2' imageSize / 2' imageSize / 2 - 20' 0' 360);
Magic Number,Samples,ScrollableCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\ScrollWindowSample.cs,OnDraw,The following statement contains a magic number: ctx.Arc (imageSize / 2' imageSize / 2' imageSize / 2 - 20' 0' 360);
Magic Number,Samples,ScrollableCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\ScrollWindowSample.cs,OnDraw,The following statement contains a magic number: ctx.Arc (imageSize / 2' imageSize / 2' imageSize / 2 - 20' 0' 360);
Magic Number,Samples,ScrollableCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\ScrollWindowSample.cs,OnDraw,The following statement contains a magic number: ctx.Arc (imageSize / 2' imageSize / 2' imageSize / 2 - 20' 0' 360);
Magic Number,Samples,ScrollableCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\ScrollWindowSample.cs,OnDraw,The following statement contains a magic number: ctx.Rectangle (0' 0' Bounds.Width' 30);
Magic Number,Samples,ScrollableCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\ScrollWindowSample.cs,OnDraw,The following statement contains a magic number: ctx.SetColor (new Color (1' 0' 0' 0.5));
Magic Number,Samples,ButtonSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ButtonSample.cs,ButtonSample,The following statement contains a magic number: PackStart (new Button (StockIcons.ZoomIn.WithSize (22)));
Magic Number,Samples,ButtonSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ButtonSample.cs,ButtonSample,The following statement contains a magic number: PackStart (new Button (StockIcons.ZoomIn.WithSize (32)' "Custom Size") { WidthRequest = 110' MinHeight = 50 });
Magic Number,Samples,ButtonSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ButtonSample.cs,ButtonSample,The following statement contains a magic number: PackStart (new Button (StockIcons.ZoomIn.WithSize (32)' "Custom Size") { WidthRequest = 110' MinHeight = 50 });
Magic Number,Samples,ButtonSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ButtonSample.cs,ButtonSample,The following statement contains a magic number: PackStart (new Button (StockIcons.ZoomIn.WithSize (32)' "Custom Size") { WidthRequest = 110' MinHeight = 50 });
Magic Number,Samples,ButtonSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ButtonSample.cs,ButtonSample,The following statement contains a magic number: hbox.PackStart (new Button (StockIcons.ZoomIn.WithSize (22)' "Zoom In") { ImagePosition = ContentPosition.Top });
Magic Number,Samples,ButtonSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ButtonSample.cs,ButtonSample,The following statement contains a magic number: hbox.PackStart (new Button (StockIcons.ZoomOut.WithSize (22)' "Zoom Out") { ImagePosition = ContentPosition.Bottom });
Magic Number,Samples,ButtonSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ButtonSample.cs,ButtonSample,The following statement contains a magic number: hbox.PackStart (new Button (StockIcons.Information.WithSize (48)' "Info") { ImagePosition = ContentPosition.Top }' true);
Magic Number,Samples,ButtonSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ButtonSample.cs,ButtonSample,The following statement contains a magic number: hbox.PackEnd (new Button ("Custom" + Environment.NewLine + "Width") { MinWidth = 110 });
Magic Number,Samples,ButtonSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ButtonSample.cs,ButtonSample,The following statement contains a magic number: PackStart (new Button (new CustomImage ().WithSize (22)' "with red background") { BackgroundColor = Colors.Red });
Magic Number,Samples,DrawingTransforms,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingTransforms.cs,OnDraw,The following statement contains a magic number: Transforms (ctx' 5' 5);
Magic Number,Samples,DrawingTransforms,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingTransforms.cs,OnDraw,The following statement contains a magic number: Transforms (ctx' 5' 5);
Magic Number,Samples,DrawingTransforms,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingTransforms.cs,Transforms,The following statement contains a magic number: Scale (ctx' x + 140' y);
Magic Number,Samples,DrawingTransforms,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingTransforms.cs,Transforms,The following statement contains a magic number: Reflect (ctx' x+20' y + 100);
Magic Number,Samples,DrawingTransforms,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingTransforms.cs,Transforms,The following statement contains a magic number: Reflect (ctx' x+20' y + 100);
Magic Number,Samples,DrawingTransforms,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingTransforms.cs,Rotate,The following statement contains a magic number: ctx.SetLineWidth (3);
Magic Number,Samples,DrawingTransforms,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingTransforms.cs,Rotate,The following statement contains a magic number: double r = 30;
Magic Number,Samples,DrawingTransforms,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingTransforms.cs,Rotate,The following statement contains a magic number: double end = 270;
Magic Number,Samples,DrawingTransforms,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingTransforms.cs,Rotate,The following statement contains a magic number: for (double n = 0; n<=end; n += 5) {  				ctx.Save ();	// save context and identity CTM for each line    				// Set up translation to centre point of first figure' ensuring pixel alignment  				ctx.Translate (x + 30.5' y + 30.5);  				ctx.Rotate (n);  				ctx.MoveTo (0' 0);  				ctx.RelLineTo (r' 0);  				double c = n / end;  				ctx.SetColor (new Color (c' c' c));  				ctx.Stroke ();	// stroke first figure with composite Translation and Rotation CTM    				// Generate mirror image figure as a visual test of TransformPoints  				Point p0 = new Point (0'0);  				Point p1 = new Point (0' -r);  				Point[] p = new Point[] {p0' p1};  				ctx.TransformPoints (p);	// using composite transformation    				ctx.Restore ();	// restore identity CTM   				ctx.Save ();	// save again (to restore after additional Translation)    				ctx.Translate (2 * r + 1' 0);	// extra x-offset to clear first figure  				ctx.MoveTo (p[0]);  				ctx.LineTo (p[1]);  				c = 1-c;  				ctx.SetColor (new Color (c' c' c));  				ctx.Stroke();		// stroke transformed points with offset in CTM    				ctx.Restore ();		// restore identity CTM for next line  			}
Magic Number,Samples,DrawingTransforms,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingTransforms.cs,Rotate,The following statement contains a magic number: for (double n = 0; n<=end; n += 5) {  				ctx.Save ();	// save context and identity CTM for each line    				// Set up translation to centre point of first figure' ensuring pixel alignment  				ctx.Translate (x + 30.5' y + 30.5);  				ctx.Rotate (n);  				ctx.MoveTo (0' 0);  				ctx.RelLineTo (r' 0);  				double c = n / end;  				ctx.SetColor (new Color (c' c' c));  				ctx.Stroke ();	// stroke first figure with composite Translation and Rotation CTM    				// Generate mirror image figure as a visual test of TransformPoints  				Point p0 = new Point (0'0);  				Point p1 = new Point (0' -r);  				Point[] p = new Point[] {p0' p1};  				ctx.TransformPoints (p);	// using composite transformation    				ctx.Restore ();	// restore identity CTM   				ctx.Save ();	// save again (to restore after additional Translation)    				ctx.Translate (2 * r + 1' 0);	// extra x-offset to clear first figure  				ctx.MoveTo (p[0]);  				ctx.LineTo (p[1]);  				c = 1-c;  				ctx.SetColor (new Color (c' c' c));  				ctx.Stroke();		// stroke transformed points with offset in CTM    				ctx.Restore ();		// restore identity CTM for next line  			}
Magic Number,Samples,DrawingTransforms,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingTransforms.cs,Rotate,The following statement contains a magic number: for (double n = 0; n<=end; n += 5) {  				ctx.Save ();	// save context and identity CTM for each line    				// Set up translation to centre point of first figure' ensuring pixel alignment  				ctx.Translate (x + 30.5' y + 30.5);  				ctx.Rotate (n);  				ctx.MoveTo (0' 0);  				ctx.RelLineTo (r' 0);  				double c = n / end;  				ctx.SetColor (new Color (c' c' c));  				ctx.Stroke ();	// stroke first figure with composite Translation and Rotation CTM    				// Generate mirror image figure as a visual test of TransformPoints  				Point p0 = new Point (0'0);  				Point p1 = new Point (0' -r);  				Point[] p = new Point[] {p0' p1};  				ctx.TransformPoints (p);	// using composite transformation    				ctx.Restore ();	// restore identity CTM   				ctx.Save ();	// save again (to restore after additional Translation)    				ctx.Translate (2 * r + 1' 0);	// extra x-offset to clear first figure  				ctx.MoveTo (p[0]);  				ctx.LineTo (p[1]);  				c = 1-c;  				ctx.SetColor (new Color (c' c' c));  				ctx.Stroke();		// stroke transformed points with offset in CTM    				ctx.Restore ();		// restore identity CTM for next line  			}
Magic Number,Samples,DrawingTransforms,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingTransforms.cs,Rotate,The following statement contains a magic number: for (double n = 0; n<=end; n += 5) {  				ctx.Save ();	// save context and identity CTM for each line    				// Set up translation to centre point of first figure' ensuring pixel alignment  				ctx.Translate (x + 30.5' y + 30.5);  				ctx.Rotate (n);  				ctx.MoveTo (0' 0);  				ctx.RelLineTo (r' 0);  				double c = n / end;  				ctx.SetColor (new Color (c' c' c));  				ctx.Stroke ();	// stroke first figure with composite Translation and Rotation CTM    				// Generate mirror image figure as a visual test of TransformPoints  				Point p0 = new Point (0'0);  				Point p1 = new Point (0' -r);  				Point[] p = new Point[] {p0' p1};  				ctx.TransformPoints (p);	// using composite transformation    				ctx.Restore ();	// restore identity CTM   				ctx.Save ();	// save again (to restore after additional Translation)    				ctx.Translate (2 * r + 1' 0);	// extra x-offset to clear first figure  				ctx.MoveTo (p[0]);  				ctx.LineTo (p[1]);  				c = 1-c;  				ctx.SetColor (new Color (c' c' c));  				ctx.Stroke();		// stroke transformed points with offset in CTM    				ctx.Restore ();		// restore identity CTM for next line  			}
Magic Number,Samples,DrawingTransforms,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingTransforms.cs,Scale,The following statement contains a magic number: for (var i = inc; i < 3.5d; i +=inc) {  				ctx.Save ();  				ctx.Scale (i' i);  				ctx.Rectangle (x' y' w' w);  				ctx.SetColor (Colors.Yellow.WithAlpha (1 / i));  				ctx.FillPreserve ();  				ctx.SetColor (Colors.Red.WithAlpha (1 / i));  				ctx.Stroke ();  				ctx.MoveTo (x += w * inc' y += w * inc / 3);  				ctx.Restore ();  				  			}
Magic Number,Samples,DrawingTransforms,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingTransforms.cs,Reflect,The following statement contains a magic number: layout.Font = Font.WithSize (16);
Magic Number,Samples,DrawingTransforms,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingTransforms.cs,Reflect,The following statement contains a magic number: ctx.Translate (x+0.5' y+0.5);
Magic Number,Samples,DrawingTransforms,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingTransforms.cs,Reflect,The following statement contains a magic number: ctx.Translate (x+0.5' y+0.5);
Magic Number,Samples,DrawingTransforms,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingTransforms.cs,Reflect,The following statement contains a magic number: Matrix s = new Matrix (1.0' 0.0'		// new skew matrix  			                      -0.5' 1.0'  			                       0.0' 0.0);
Magic Number,Samples,ComboBoxes,C:\repos\mono_xwt\TestApps\Samples\Samples\ComboBoxes.cs,ComboBoxes,The following statement contains a magic number: b.Clicked += delegate {  				for (int n=0; n<10; n++) {  					c2.Items.Add ("Item " + new string ('#'' n));  				}  			};
Magic Number,Samples,ComboBoxes,C:\repos\mono_xwt\TestApps\Samples\Samples\ComboBoxes.cs,ComboBoxes,The following statement contains a magic number: c3.Items.Add (2' "Two");
Magic Number,Samples,ComboBoxes,C:\repos\mono_xwt\TestApps\Samples\Samples\ComboBoxes.cs,ComboBoxes,The following statement contains a magic number: c3.Items.Add (3' "Three");
Magic Number,Samples,ComboBoxes,C:\repos\mono_xwt\TestApps\Samples\Samples\ComboBoxes.cs,ComboBoxes,The following statement contains a magic number: c3.Items.Add (4' "Maybe more");
Magic Number,Samples,ComboBoxes,C:\repos\mono_xwt\TestApps\Samples\Samples\ComboBoxes.cs,ComboBoxes,The following statement contains a magic number: c4.Items.Add (2' "Two");
Magic Number,Samples,ComboBoxes,C:\repos\mono_xwt\TestApps\Samples\Samples\ComboBoxes.cs,ComboBoxes,The following statement contains a magic number: c4.Items.Add (3' "Three");
Magic Number,Samples,ComboBoxes,C:\repos\mono_xwt\TestApps\Samples\Samples\ComboBoxes.cs,ComboBoxes,The following statement contains a magic number: c5.Items.Add (2' "Two");
Magic Number,Samples,ComboBoxes,C:\repos\mono_xwt\TestApps\Samples\Samples\ComboBoxes.cs,ComboBoxes,The following statement contains a magic number: c5.Items.Add (3' "Three");
Magic Number,Samples,TextEditor,C:\repos\mono_xwt\TestApps\Samples\Samples\TextInput.cs,TextEditor,The following statement contains a magic number: WidthRequest = 300;
Magic Number,Samples,TextEditor,C:\repos\mono_xwt\TestApps\Samples\Samples\TextInput.cs,TextEditor,The following statement contains a magic number: HeightRequest = 300;
Magic Number,Samples,TextEditor,C:\repos\mono_xwt\TestApps\Samples\Samples\TextInput.cs,OnDraw,The following statement contains a magic number: using (var layout = new TextLayout (this))  				{  					layout.Text = text;  					ctx.DrawTextLayout (layout' new Point (0' 20));  				}
Magic Number,Samples,Windows,C:\repos\mono_xwt\TestApps\Samples\Samples\Windows.cs,Windows,The following statement contains a magic number: b.Clicked += delegate  			{  				var dialog = new Dialog ();  				dialog.Content = new Label ("Hello World");  				Xwt.Application.TimeoutInvoke (TimeSpan.FromSeconds (2)' () => {  					dialog.Content = new Label ("Goodbye World");  					return false;  				});  				dialog.Run ();  			};
Magic Number,Samples,TextEntries,C:\repos\mono_xwt\TestApps\Samples\Samples\TextEntries.cs,TextEntries,The following statement contains a magic number: te2.Font = te2.Font.WithScaledSize (0.5);
Magic Number,Samples,TextEntries,C:\repos\mono_xwt\TestApps\Samples\Samples\TextEntries.cs,TextEntries,The following statement contains a magic number: PackStart (new TextEntry { Text = "Entry with custom height"' MinHeight = 50 });
Magic Number,Samples,TextEntries,C:\repos\mono_xwt\TestApps\Samples\Samples\TextEntries.cs,TextEntries,The following statement contains a magic number: te6.MinHeight = 40;
Magic Number,Samples,Images,C:\repos\mono_xwt\TestApps\Samples\Samples\Images.cs,Images,The following statement contains a magic number: var perRow = 6;
Magic Number,Samples,MyCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\CanvasWithWidget.cs,MyCanvas,The following statement contains a magic number: AddChild (box' new Rectangle (30' 70' box.Surface.GetPreferredSize().Width' 30));
Magic Number,Samples,MyCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\CanvasWithWidget.cs,MyCanvas,The following statement contains a magic number: AddChild (box' new Rectangle (30' 70' box.Surface.GetPreferredSize().Width' 30));
Magic Number,Samples,MyCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\CanvasWithWidget.cs,MyCanvas,The following statement contains a magic number: AddChild (box' new Rectangle (30' 70' box.Surface.GetPreferredSize().Width' 30));
Magic Number,Samples,MyCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\CanvasWithWidget.cs,OnDraw,The following statement contains a magic number: if (Linear)  				g = new LinearGradient (xStart' 0' xEnd' Bounds.Height);  			else  				g = new RadialGradient (Bounds.Width / 2' Bounds.Height / 2' Bounds.Width / 2' Bounds.Width / 2' Bounds.Height / 2' xStart/4 + Bounds.Width / 8);
Magic Number,Samples,MyCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\CanvasWithWidget.cs,OnDraw,The following statement contains a magic number: if (Linear)  				g = new LinearGradient (xStart' 0' xEnd' Bounds.Height);  			else  				g = new RadialGradient (Bounds.Width / 2' Bounds.Height / 2' Bounds.Width / 2' Bounds.Width / 2' Bounds.Height / 2' xStart/4 + Bounds.Width / 8);
Magic Number,Samples,MyCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\CanvasWithWidget.cs,OnDraw,The following statement contains a magic number: if (Linear)  				g = new LinearGradient (xStart' 0' xEnd' Bounds.Height);  			else  				g = new RadialGradient (Bounds.Width / 2' Bounds.Height / 2' Bounds.Width / 2' Bounds.Width / 2' Bounds.Height / 2' xStart/4 + Bounds.Width / 8);
Magic Number,Samples,MyCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\CanvasWithWidget.cs,OnDraw,The following statement contains a magic number: if (Linear)  				g = new LinearGradient (xStart' 0' xEnd' Bounds.Height);  			else  				g = new RadialGradient (Bounds.Width / 2' Bounds.Height / 2' Bounds.Width / 2' Bounds.Width / 2' Bounds.Height / 2' xStart/4 + Bounds.Width / 8);
Magic Number,Samples,MyCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\CanvasWithWidget.cs,OnDraw,The following statement contains a magic number: if (Linear)  				g = new LinearGradient (xStart' 0' xEnd' Bounds.Height);  			else  				g = new RadialGradient (Bounds.Width / 2' Bounds.Height / 2' Bounds.Width / 2' Bounds.Width / 2' Bounds.Height / 2' xStart/4 + Bounds.Width / 8);
Magic Number,Samples,MyCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\CanvasWithWidget.cs,OnDraw,The following statement contains a magic number: if (Linear)  				g = new LinearGradient (xStart' 0' xEnd' Bounds.Height);  			else  				g = new RadialGradient (Bounds.Width / 2' Bounds.Height / 2' Bounds.Width / 2' Bounds.Width / 2' Bounds.Height / 2' xStart/4 + Bounds.Width / 8);
Magic Number,Samples,MyCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\CanvasWithWidget.cs,OnDraw,The following statement contains a magic number: if (Linear)  				g = new LinearGradient (xStart' 0' xEnd' Bounds.Height);  			else  				g = new RadialGradient (Bounds.Width / 2' Bounds.Height / 2' Bounds.Width / 2' Bounds.Width / 2' Bounds.Height / 2' xStart/4 + Bounds.Width / 8);
Magic Number,Samples,MyCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\CanvasWithWidget.cs,OnDraw,The following statement contains a magic number: Rectangle r = rect.Inflate (5' 5);
Magic Number,Samples,MyCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\CanvasWithWidget.cs,OnDraw,The following statement contains a magic number: Rectangle r = rect.Inflate (5' 5);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: SimpleBox b = new SimpleBox (200' 20);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: SimpleBox b = new SimpleBox (200' 20);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: b = new SimpleBox (5' 20);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: b = new SimpleBox (5' 20);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: b = new SimpleBox (250' 20);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: b = new SimpleBox (250' 20);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: t.Add (b' 0' 1' colspan:2' hexpand:true' vexpand:true);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: b = new SimpleBox (300' 20);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: b = new SimpleBox (300' 20);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: t.Add (b' 1' 2' colspan:2);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: t.Add (b' 1' 2' colspan:2);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: b = new SimpleBox (100' 20);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: b = new SimpleBox (100' 20);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: t.Add (b' 2' 3);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: t.Add (b' 2' 3);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: b = new SimpleBox (450' 20);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: b = new SimpleBox (450' 20);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: t.Add (b' 0' 4' colspan:3);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: t.Add (b' 0' 4' colspan:3);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: t.Add (new Label ("Three:")' 0' 2);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: t.Add (new TextEntry ()' 1' 2);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: t.InsertRow (1' 2);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: t.InsertRow (1' 2);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: t.Add (new SimpleBox (300' 20)' 0' 1' colspan:2);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: t.Add (new SimpleBox (300' 20)' 0' 1' colspan:2);
Magic Number,Samples,Tables,C:\repos\mono_xwt\TestApps\Samples\Samples\Tables.cs,Tables,The following statement contains a magic number: t.Add (new SimpleBox (300' 20)' 0' 1' colspan:2);
Magic Number,Samples,Labels,C:\repos\mono_xwt\TestApps\Samples\Samples\Labels.cs,Labels,The following statement contains a magic number: la = new Label ("Label with red background") {  				BackgroundColor = new Xwt.Drawing.Color (1' 0' 0)'  				HeightRequest = 40  			};
Magic Number,Samples,Frames,C:\repos\mono_xwt\TestApps\Samples\Samples\Frames.cs,Frames,The following statement contains a magic number: f.Content = new SimpleBox (50);
Magic Number,Samples,Frames,C:\repos\mono_xwt\TestApps\Samples\Samples\Frames.cs,Frames,The following statement contains a magic number: fb.BorderWidthTop = 2;
Magic Number,Samples,Frames,C:\repos\mono_xwt\TestApps\Samples\Samples\Frames.cs,Frames,The following statement contains a magic number: fb.BorderWidthRight = 3;
Magic Number,Samples,Frames,C:\repos\mono_xwt\TestApps\Samples\Samples\Frames.cs,Frames,The following statement contains a magic number: fb.BorderWidthBottom = 4;
Magic Number,Samples,Frames,C:\repos\mono_xwt\TestApps\Samples\Samples\Frames.cs,Frames,The following statement contains a magic number: fb.BorderWidth = 2;
Magic Number,Samples,Frames,C:\repos\mono_xwt\TestApps\Samples\Samples\Frames.cs,Frames,The following statement contains a magic number: fb.PaddingLeft = 10;
Magic Number,Samples,Frames,C:\repos\mono_xwt\TestApps\Samples\Samples\Frames.cs,Frames,The following statement contains a magic number: fb.PaddingTop = 20;
Magic Number,Samples,Frames,C:\repos\mono_xwt\TestApps\Samples\Samples\Frames.cs,Frames,The following statement contains a magic number: fb.PaddingRight = 30;
Magic Number,Samples,Frames,C:\repos\mono_xwt\TestApps\Samples\Samples\Frames.cs,Frames,The following statement contains a magic number: fb.PaddingBottom = 40;
Magic Number,Samples,Frames,C:\repos\mono_xwt\TestApps\Samples\Samples\Frames.cs,Frames,The following statement contains a magic number: fb.Content = new SimpleBox (50);
Magic Number,Samples,Frames,C:\repos\mono_xwt\TestApps\Samples\Samples\Frames.cs,Frames,The following statement contains a magic number: fb.BorderWidth = 2;
Magic Number,Samples,Frames,C:\repos\mono_xwt\TestApps\Samples\Samples\Frames.cs,Frames,The following statement contains a magic number: fb.Padding = 10;
Magic Number,Samples,WidgetEvents,C:\repos\mono_xwt\TestApps\Samples\Samples\WidgetEvents.cs,WidgetEvents,The following statement contains a magic number: la.MouseEntered += (sender' e) => {  				insideLabel = true;  				Application.TimeoutInvoke (100' CheckMouseOverLabel);  				Console.WriteLine ("[" + sender + "] Mouse Entered");  			};
Magic Number,Samples,WidgetEvents,C:\repos\mono_xwt\TestApps\Samples\Samples\WidgetEvents.cs,WidgetEvents,The following statement contains a magic number: te.MouseEntered += (sender' e) => {  				insideTe = true;  				Application.TimeoutInvoke (100' CheckMouseOverTe);  				Console.WriteLine ("[" + sender + "] Mouse Entered");  				resTe.Text = "Mouse has Entered Text Entry";  			};
Magic Number,Samples,WidgetEvents,C:\repos\mono_xwt\TestApps\Samples\Samples\WidgetEvents.cs,WidgetEvents,The following statement contains a magic number: spn.MouseEntered += (sender' e) => {  				insideSpn = true;  				Application.TimeoutInvoke (100' CheckMouseOverSpn);  				Console.WriteLine ("[" + sender + "] Mouse Entered");  			};
Magic Number,Samples,WidgetEvents,C:\repos\mono_xwt\TestApps\Samples\Samples\WidgetEvents.cs,WidgetEvents,The following statement contains a magic number: btn.MouseEntered += (sender' e) =>  {  				insideButton = true;  				Application.TimeoutInvoke (100' CheckMouseOverButton);  				Console.WriteLine ("[" + sender + "] Mouse Entered");  			};
Magic Number,Samples,WidgetEvents,C:\repos\mono_xwt\TestApps\Samples\Samples\WidgetEvents.cs,WidgetEvents,The following statement contains a magic number: canvas.MouseEntered += (sender' e) =>  {  				insideCanvas = true;  				Application.TimeoutInvoke (100' CheckMouseOverCanvas);  				Console.WriteLine ("[" + sender + "] Mouse Entered");  			};
Magic Number,Samples,MenuSamples,C:\repos\mono_xwt\TestApps\Samples\Samples\MenuSamples.cs,MenuSamples,The following statement contains a magic number: subMenu.SubMenu.Font = subMenu.SubMenu.Font.WithSize (20).WithWeight (Xwt.Drawing.FontWeight.Bold);
Magic Number,Samples,TreeViews,C:\repos\mono_xwt\TestApps\Samples\Samples\TreeViews.cs,TreeViews,The following statement contains a magic number: view.Columns[2].Expands = true;
Magic Number,Samples,TreeViews,C:\repos\mono_xwt\TestApps\Samples\Samples\TreeViews.cs,TreeViews,The following statement contains a magic number: view.Columns[2].CanResize = true;
Magic Number,Samples,TreeViews,C:\repos\mono_xwt\TestApps\Samples\Samples\TreeViews.cs,TreeViews,The following statement contains a magic number: view.Columns[3].CanResize = true;
Magic Number,Samples,PanedViews,C:\repos\mono_xwt\TestApps\Samples\Samples\PanedViews.cs,CreateFrame,The following statement contains a magic number: f.Margin = 10;
Magic Number,Samples,PanedViews,C:\repos\mono_xwt\TestApps\Samples\Samples\PanedViews.cs,CreateFrame,The following statement contains a magic number: f.Content.Margin = 10;
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,OnDraw,The following statement contains a magic number: Texts (ctx' 5' 5);
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,OnDraw,The following statement contains a magic number: Texts (ctx' 5' 5);
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: text.Font = this.Font.WithSize (24);
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: col1.Height += size1.Height + 10;
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: col1.Height += size2.Height + 10;
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: col2.Left = col1.Right + 10;
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: var scale = 1.2;
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: col2.Width = size3.Width * scale + 5;
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: text.Height = size4.Height / 2;
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: ctx.DrawTextLayout (text' col2.Left' col2.Bottom + 5);
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: ctx.Rectangle (new Rectangle (col2.Left' col2.Bottom + 5' text.Width' text.Height));
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: ctx.SetColor (Colors.Black.WithAlpha (.5));
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: ctx.MoveTo (col1.Right + 5' col1.Top);
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: ctx.LineTo (col1.Right + 5' col1.Bottom);
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: ctx.MoveTo (col2.Right + 5' col2.Top);
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: ctx.LineTo (col2.Right + 5' col2.Bottom);
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: text.Font = this.Font.WithSize (10);
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: ctx.Rotate (5);
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: var ty = 30;
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: ctx.DrawTextLayout (text' ty' col1.Bottom + 10);
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: tl0.Font = this.Font.WithSize (10);
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: ctx.DrawTextLayout (tl0' col2.Left' col2.Bottom + 100);
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: x = 10;
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: y = 180;
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: tl.Width = 100;
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: tl.Width = 200;
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: tl.Width = 100;
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,Texts,The following statement contains a magic number: tl.Width = 50;
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,DrawText,The following statement contains a magic number: switch (tl.TextAlignment) {  			case Alignment.Center:  				dx = Math.Round ((tl.Width - s.Width) / 2);  				break;  			case Alignment.End:  				dx = tl.Width - s.Width;  				break;  			}
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,DrawText,The following statement contains a magic number: var rect = new Rectangle (x + dx' y' s.Width' s.Height).Inflate (0.5' 0.5);
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,DrawText,The following statement contains a magic number: var rect = new Rectangle (x + dx' y' s.Width' s.Height).Inflate (0.5' 0.5);
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,DrawText,The following statement contains a magic number: y += s.Height + 20;
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,DrawText,The following statement contains a magic number: if (y > 400) {  				y = 180;  				x += 150;  			}
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,DrawText,The following statement contains a magic number: if (y > 400) {  				y = 180;  				x += 150;  			}
Magic Number,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,DrawText,The following statement contains a magic number: if (y > 400) {  				y = 180;  				x += 150;  			}
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,OnDraw,The following statement contains a magic number: Figures (ctx' 5' 25);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,OnDraw,The following statement contains a magic number: Figures (ctx' 5' 25);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Figures,The following statement contains a magic number: Rectangles (ctx' x' y + 20);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Figures,The following statement contains a magic number: Curves1 (ctx' x' y + 80);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Figures,The following statement contains a magic number: Curves2 (ctx' x + 100' y + 80);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Figures,The following statement contains a magic number: Curves2 (ctx' x + 100' y + 80);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Figures,The following statement contains a magic number: Path (ctx' x + 210' y + 20);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Figures,The following statement contains a magic number: Path (ctx' x + 210' y + 20);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Lines,The following statement contains a magic number: int nPairs = 4;
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Lines,The following statement contains a magic number: double length = 90;
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Lines,The following statement contains a magic number: double gap = 2;
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Lines,The following statement contains a magic number: double y = 0.5;
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Lines,The following statement contains a magic number: double end = x + 2*(length - 1) + gap;
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Lines,The following statement contains a magic number: y = 4.5;
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Lines,The following statement contains a magic number: for (int w = 1; w <= nPairs; ++w) {  				x = 0;  				ctx.SetLineWidth (w);  				ctx.MoveTo (x' y);  				ctx.RelLineTo (length-1' 0);  				ctx.Stroke ();    				ctx.SetLineWidth (w + 1);  				x += (gap + length - 1);  				ctx.MoveTo (x' y);  				ctx.RelLineTo (length-1' 0);  				ctx.Stroke ();  				y += w * 2 + gap;  			}
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.Rectangle (0' 0' 10' 10);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.Rectangle (0' 0' 10' 10);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.Rectangle (15' 0' 10' 10);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.Rectangle (15' 0' 10' 10);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.Rectangle (15' 0' 10' 10);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.SetLineWidth (3);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.Rectangle (0' 15' 10' 10);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.Rectangle (0' 15' 10' 10);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.Rectangle (0' 15' 10' 10);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.Rectangle (15' 15' 10' 10);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.Rectangle (15' 15' 10' 10);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.Rectangle (15' 15' 10' 10);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.Rectangle (15' 15' 10' 10);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.Translate (x + 50' y);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.Rectangle (0' 0' 40' 40);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.Rectangle (0' 0' 40' 40);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.MoveTo (35' 35);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.MoveTo (35' 35);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.RelLineTo (0' -20);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.RelLineTo (-20' 0);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.RelLineTo (0' 20);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.Translate (x + 120' y);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: var r = 5;
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: var w = 50;
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: var h = 30;
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.Arc (l + r' t + r' r' 180' 270);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.Arc (l + r' t + r' r' 180' 270);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.Arc (l + w - r' t + r' r' 270' 0);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.Arc (l + w - r' t + h - r' r' 0' 90);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.Arc (l + r' t + h - r' r' 90' 180);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Rectangles,The following statement contains a magic number: ctx.Arc (l + r' t + h - r' r' 90' 180);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves1,The following statement contains a magic number: Action curve1 = () => {  				ctx.MoveTo (0' 30);  				ctx.CurveTo (20' 0' 50' 0' 60' 25);  			};
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves1,The following statement contains a magic number: Action curve1 = () => {  				ctx.MoveTo (0' 30);  				ctx.CurveTo (20' 0' 50' 0' 60' 25);  			};
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves1,The following statement contains a magic number: Action curve1 = () => {  				ctx.MoveTo (0' 30);  				ctx.CurveTo (20' 0' 50' 0' 60' 25);  			};
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves1,The following statement contains a magic number: Action curve1 = () => {  				ctx.MoveTo (0' 30);  				ctx.CurveTo (20' 0' 50' 0' 60' 25);  			};
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves1,The following statement contains a magic number: Action curve1 = () => {  				ctx.MoveTo (0' 30);  				ctx.CurveTo (20' 0' 50' 0' 60' 25);  			};
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves1,The following statement contains a magic number: Action curve2 = () => {  				ctx.LineTo (0' 0);  				ctx.CurveTo (20' 30' 50' 30' 60' 5);  			};
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves1,The following statement contains a magic number: Action curve2 = () => {  				ctx.LineTo (0' 0);  				ctx.CurveTo (20' 30' 50' 30' 60' 5);  			};
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves1,The following statement contains a magic number: Action curve2 = () => {  				ctx.LineTo (0' 0);  				ctx.CurveTo (20' 30' 50' 30' 60' 5);  			};
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves1,The following statement contains a magic number: Action curve2 = () => {  				ctx.LineTo (0' 0);  				ctx.CurveTo (20' 30' 50' 30' 60' 5);  			};
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves1,The following statement contains a magic number: Action curve2 = () => {  				ctx.LineTo (0' 0);  				ctx.CurveTo (20' 30' 50' 30' 60' 5);  			};
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves1,The following statement contains a magic number: Action curve2 = () => {  				ctx.LineTo (0' 0);  				ctx.CurveTo (20' 30' 50' 30' 60' 5);  			};
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves1,The following statement contains a magic number: Action paint = () => {  				curve1 ();  				curve2 ();  				ctx.ClosePath ();  				ctx.SetColor (new Color (0' 0' 0' .5));  				ctx.StrokePreserve ();  				ctx.SetColor (new Color (1' 0' 1' .5));  				ctx.Fill ();  			};
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves1,The following statement contains a magic number: Action paint = () => {  				curve1 ();  				curve2 ();  				ctx.ClosePath ();  				ctx.SetColor (new Color (0' 0' 0' .5));  				ctx.StrokePreserve ();  				ctx.SetColor (new Color (1' 0' 1' .5));  				ctx.Fill ();  			};
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves1,The following statement contains a magic number: ctx.Translate (0' 40);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves1,The following statement contains a magic number: curve2 = () => {  				ctx.MoveTo (0' 0);  				ctx.CurveTo (20' 30' 50' 30' 60' 5);  			};
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves1,The following statement contains a magic number: curve2 = () => {  				ctx.MoveTo (0' 0);  				ctx.CurveTo (20' 30' 50' 30' 60' 5);  			};
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves1,The following statement contains a magic number: curve2 = () => {  				ctx.MoveTo (0' 0);  				ctx.CurveTo (20' 30' 50' 30' 60' 5);  			};
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves1,The following statement contains a magic number: curve2 = () => {  				ctx.MoveTo (0' 0);  				ctx.CurveTo (20' 30' 50' 30' 60' 5);  			};
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves1,The following statement contains a magic number: curve2 = () => {  				ctx.MoveTo (0' 0);  				ctx.CurveTo (20' 30' 50' 30' 60' 5);  			};
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves1,The following statement contains a magic number: curve2 = () => {  				ctx.MoveTo (0' 0);  				ctx.CurveTo (20' 30' 50' 30' 60' 5);  			};
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves2,The following statement contains a magic number: double x = 0' y = 40;
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves2,The following statement contains a magic number: ctx.SetLineWidth (2.0);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves2,The following statement contains a magic number: ctx.SetColor (new Color (1' 0.2' 0.2' 0.6));
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves2,The following statement contains a magic number: ctx.SetColor (new Color (1' 0.2' 0.2' 0.6));
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Curves2,The following statement contains a magic number: ctx.SetColor (new Color (1' 0.2' 0.2' 0.6));
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Path,The following statement contains a magic number: path.MoveTo (0.44' 18);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Path,The following statement contains a magic number: path.MoveTo (0.44' 18);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Path,The following statement contains a magic number: path.LineTo (-1' 18);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Path,The following statement contains a magic number: path.LineTo (-1' 26);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Path,The following statement contains a magic number: path.LineTo (0.44' 26);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Path,The following statement contains a magic number: path.LineTo (0.44' 26);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Path,The following statement contains a magic number: path.LineTo (0' 42);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Path,The following statement contains a magic number: path.LineTo (29' 21.98);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Path,The following statement contains a magic number: path.LineTo (29' 21.98);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Path,The following statement contains a magic number: path.LineTo (29' 21.98);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Path,The following statement contains a magic number: path.LineTo (29' 21.98);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Path,The following statement contains a magic number: path.LineTo (0' 2);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Path,The following statement contains a magic number: path.LineTo (0.44' 18);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Path,The following statement contains a magic number: path.LineTo (0.44' 18);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Path,The following statement contains a magic number: ctx.SetLineWidth (2);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Path,The following statement contains a magic number: path2.LineTo (15' 8);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Path,The following statement contains a magic number: path2.LineTo (15' 8);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Path,The following statement contains a magic number: ctx.Rotate (180);
Magic Number,Samples,DrawingFigures,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingFigures.cs,Path,The following statement contains a magic number: ctx.SetLineDash (0' 5);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,OnDraw,The following statement contains a magic number: PatternsAndImages (ctx' 5' 5);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,OnDraw,The following statement contains a magic number: PatternsAndImages (ctx' 5' 5);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ctx.SetLineWidth (2);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ctx.SetLineDash (15' 10' 10' 5' 5);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ctx.SetLineDash (15' 10' 10' 5' 5);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ctx.SetLineDash (15' 10' 10' 5' 5);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ctx.SetLineDash (15' 10' 10' 5' 5);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ctx.SetLineDash (15' 10' 10' 5' 5);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ctx.Rectangle (10' 10' 100' 100);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ctx.Rectangle (10' 10' 100' 100);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ctx.Rectangle (10' 10' 100' 100);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ctx.Rectangle (10' 10' 100' 100);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ImageBuilder ib = new ImageBuilder (30' 30);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ImageBuilder ib = new ImageBuilder (30' 30);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ib.Context.Arc (15' 15' 15' 0' 360);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ib.Context.Arc (15' 15' 15' 0' 360);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ib.Context.Arc (15' 15' 15' 0' 360);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ib.Context.Arc (15' 15' 15' 0' 360);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ib.Context.Rectangle (0' 0' 5' 5);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ib.Context.Rectangle (0' 0' 5' 5);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ctx.DrawImage (img' 0' 50' 50' 10);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ctx.DrawImage (img' 0' 50' 50' 10);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ctx.DrawImage (img' 0' 50' 50' 10);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ctx.Arc (100' 100' 15' 0' 360);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ctx.Arc (100' 100' 15' 0' 360);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ctx.Arc (100' 100' 15' 0' 360);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ctx.Arc (100' 100' 15' 0' 360);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: arcColor.Alpha = 0.4;
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ctx.Translate (x + 130' y);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ctx.Rectangle (0' 0' 100' 100);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: ctx.Rectangle (0' 0' 100' 100);
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: for (int i=0; i<50;i++) {  				for (var j=0; j<50;j++) {  					Color c = Color.FromHsl (0.5' (double)i / 50d' (double)j / 50d);  					ctx.Rectangle (i' j' 1' 1);  					ctx.SetColor (c);  					ctx.Fill ();  				}  			}
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: for (int i=0; i<50;i++) {  				for (var j=0; j<50;j++) {  					Color c = Color.FromHsl (0.5' (double)i / 50d' (double)j / 50d);  					ctx.Rectangle (i' j' 1' 1);  					ctx.SetColor (c);  					ctx.Fill ();  				}  			}
Magic Number,Samples,DrawingPatternsAndImages,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingPatternsAndImages.cs,PatternsAndImages,The following statement contains a magic number: for (int i=0; i<50;i++) {  				for (var j=0; j<50;j++) {  					Color c = Color.FromHsl (0.5' (double)i / 50d' (double)j / 50d);  					ctx.Rectangle (i' j' 1' 1);  					ctx.SetColor (c);  					ctx.Fill ();  				}  			}
Magic Number,Samples,ListBoxSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ListBoxSample.cs,ListBoxSample,The following statement contains a magic number: for (int n=0; n<100; n++)  				list.Items.Add ("Value " + n);
Magic Number,Samples,ListBoxSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ListBoxSample.cs,ListBoxSample,The following statement contains a magic number: for (int n=0; n<100; n++) {  				var r = store.AddRow ();  				store.SetValue (r' icon' png);  				store.SetValue (r' name' "Value " + n);  			}
Magic Number,Samples,ListBoxSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ListBoxSample.cs,ListBoxSample,The following statement contains a magic number: spnValue.MaximumValue = 99;
Magic Number,Samples,ProgressBarSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ProgressBarSample.cs,ProgressBarSample,The following statement contains a magic number: PackStart (new ProgressBar { Fraction = 0.5d' MinHeight = 20 });
Magic Number,Samples,ProgressBarSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ProgressBarSample.cs,Increase,The following statement contains a magic number: if (currentFraction != null && currentFraction.Value >= 0.0 && currentFraction.Value <= 0.9) { 				nextFraction = currentFraction.Value + 0.1; 			} else { 				nextFraction = 0.0; 			}
Magic Number,Samples,ProgressBarSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ProgressBarSample.cs,Increase,The following statement contains a magic number: if (currentFraction != null && currentFraction.Value >= 0.0 && currentFraction.Value <= 0.9) { 				nextFraction = currentFraction.Value + 0.1; 			} else { 				nextFraction = 0.0; 			}
Magic Number,Samples,MarkDownSample,C:\repos\mono_xwt\TestApps\Samples\Samples\Markdown.cs,MarkDownSample,The following statement contains a magic number: var markdown = new MarkdownView() {  				Markdown = MarkDownText'  				LineSpacing = 3'  			};
Magic Number,Samples,MarkDownSample,C:\repos\mono_xwt\TestApps\Samples\Samples\Markdown.cs,MarkDownSample,The following statement contains a magic number: var scrolled = new ScrollView (markdown) {  				MinHeight = 400  			};
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked,The following statement contains a magic number: if (popover == null) {  				popover = new Popover ();  				popover.Padding = 20;    				var table = new Table () { DefaultColumnSpacing = 20' DefaultRowSpacing = 10 };  //					table.Margin.SetAll (60);  				table.Add (new Label ("Font") { TextAlignment = Alignment.End }' 0' 0);  				table.Add (new ComboBox ()' 1' 0' vexpand:true);    				table.Add (new Label ("Family")  { TextAlignment = Alignment.End }' 0' 1);  				table.Add (new ComboBox ()' 1' 1' vexpand:true);    				var cmbStyle = new ComboBox ();  				cmbStyle.Items.Add ("Normal");  				cmbStyle.Items.Add ("Bold");  				cmbStyle.Items.Add ("Italic");    				table.Add (new Label ("Style")  { TextAlignment = Alignment.End }' 0' 2);  				table.Add (cmbStyle' 1' 2' vexpand:true);    				table.Add (new Label ("Size")  { TextAlignment = Alignment.End }' 0' 3);  				table.Add (new SpinButton ()' 1' 3' vexpand:true);    				var b = new Button ("Add more");  				table.Add (b' 0' 4);  				int next = 5;  				b.Clicked += delegate {  					table.Add (new Label ("Row " + next)' 0' next++);  				};    				table.Margin = 20;  				popover.Content = table;  			}
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked,The following statement contains a magic number: if (popover == null) {  				popover = new Popover ();  				popover.Padding = 20;    				var table = new Table () { DefaultColumnSpacing = 20' DefaultRowSpacing = 10 };  //					table.Margin.SetAll (60);  				table.Add (new Label ("Font") { TextAlignment = Alignment.End }' 0' 0);  				table.Add (new ComboBox ()' 1' 0' vexpand:true);    				table.Add (new Label ("Family")  { TextAlignment = Alignment.End }' 0' 1);  				table.Add (new ComboBox ()' 1' 1' vexpand:true);    				var cmbStyle = new ComboBox ();  				cmbStyle.Items.Add ("Normal");  				cmbStyle.Items.Add ("Bold");  				cmbStyle.Items.Add ("Italic");    				table.Add (new Label ("Style")  { TextAlignment = Alignment.End }' 0' 2);  				table.Add (cmbStyle' 1' 2' vexpand:true);    				table.Add (new Label ("Size")  { TextAlignment = Alignment.End }' 0' 3);  				table.Add (new SpinButton ()' 1' 3' vexpand:true);    				var b = new Button ("Add more");  				table.Add (b' 0' 4);  				int next = 5;  				b.Clicked += delegate {  					table.Add (new Label ("Row " + next)' 0' next++);  				};    				table.Margin = 20;  				popover.Content = table;  			}
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked,The following statement contains a magic number: if (popover == null) {  				popover = new Popover ();  				popover.Padding = 20;    				var table = new Table () { DefaultColumnSpacing = 20' DefaultRowSpacing = 10 };  //					table.Margin.SetAll (60);  				table.Add (new Label ("Font") { TextAlignment = Alignment.End }' 0' 0);  				table.Add (new ComboBox ()' 1' 0' vexpand:true);    				table.Add (new Label ("Family")  { TextAlignment = Alignment.End }' 0' 1);  				table.Add (new ComboBox ()' 1' 1' vexpand:true);    				var cmbStyle = new ComboBox ();  				cmbStyle.Items.Add ("Normal");  				cmbStyle.Items.Add ("Bold");  				cmbStyle.Items.Add ("Italic");    				table.Add (new Label ("Style")  { TextAlignment = Alignment.End }' 0' 2);  				table.Add (cmbStyle' 1' 2' vexpand:true);    				table.Add (new Label ("Size")  { TextAlignment = Alignment.End }' 0' 3);  				table.Add (new SpinButton ()' 1' 3' vexpand:true);    				var b = new Button ("Add more");  				table.Add (b' 0' 4);  				int next = 5;  				b.Clicked += delegate {  					table.Add (new Label ("Row " + next)' 0' next++);  				};    				table.Margin = 20;  				popover.Content = table;  			}
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked,The following statement contains a magic number: if (popover == null) {  				popover = new Popover ();  				popover.Padding = 20;    				var table = new Table () { DefaultColumnSpacing = 20' DefaultRowSpacing = 10 };  //					table.Margin.SetAll (60);  				table.Add (new Label ("Font") { TextAlignment = Alignment.End }' 0' 0);  				table.Add (new ComboBox ()' 1' 0' vexpand:true);    				table.Add (new Label ("Family")  { TextAlignment = Alignment.End }' 0' 1);  				table.Add (new ComboBox ()' 1' 1' vexpand:true);    				var cmbStyle = new ComboBox ();  				cmbStyle.Items.Add ("Normal");  				cmbStyle.Items.Add ("Bold");  				cmbStyle.Items.Add ("Italic");    				table.Add (new Label ("Style")  { TextAlignment = Alignment.End }' 0' 2);  				table.Add (cmbStyle' 1' 2' vexpand:true);    				table.Add (new Label ("Size")  { TextAlignment = Alignment.End }' 0' 3);  				table.Add (new SpinButton ()' 1' 3' vexpand:true);    				var b = new Button ("Add more");  				table.Add (b' 0' 4);  				int next = 5;  				b.Clicked += delegate {  					table.Add (new Label ("Row " + next)' 0' next++);  				};    				table.Margin = 20;  				popover.Content = table;  			}
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked,The following statement contains a magic number: if (popover == null) {  				popover = new Popover ();  				popover.Padding = 20;    				var table = new Table () { DefaultColumnSpacing = 20' DefaultRowSpacing = 10 };  //					table.Margin.SetAll (60);  				table.Add (new Label ("Font") { TextAlignment = Alignment.End }' 0' 0);  				table.Add (new ComboBox ()' 1' 0' vexpand:true);    				table.Add (new Label ("Family")  { TextAlignment = Alignment.End }' 0' 1);  				table.Add (new ComboBox ()' 1' 1' vexpand:true);    				var cmbStyle = new ComboBox ();  				cmbStyle.Items.Add ("Normal");  				cmbStyle.Items.Add ("Bold");  				cmbStyle.Items.Add ("Italic");    				table.Add (new Label ("Style")  { TextAlignment = Alignment.End }' 0' 2);  				table.Add (cmbStyle' 1' 2' vexpand:true);    				table.Add (new Label ("Size")  { TextAlignment = Alignment.End }' 0' 3);  				table.Add (new SpinButton ()' 1' 3' vexpand:true);    				var b = new Button ("Add more");  				table.Add (b' 0' 4);  				int next = 5;  				b.Clicked += delegate {  					table.Add (new Label ("Row " + next)' 0' next++);  				};    				table.Margin = 20;  				popover.Content = table;  			}
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked,The following statement contains a magic number: if (popover == null) {  				popover = new Popover ();  				popover.Padding = 20;    				var table = new Table () { DefaultColumnSpacing = 20' DefaultRowSpacing = 10 };  //					table.Margin.SetAll (60);  				table.Add (new Label ("Font") { TextAlignment = Alignment.End }' 0' 0);  				table.Add (new ComboBox ()' 1' 0' vexpand:true);    				table.Add (new Label ("Family")  { TextAlignment = Alignment.End }' 0' 1);  				table.Add (new ComboBox ()' 1' 1' vexpand:true);    				var cmbStyle = new ComboBox ();  				cmbStyle.Items.Add ("Normal");  				cmbStyle.Items.Add ("Bold");  				cmbStyle.Items.Add ("Italic");    				table.Add (new Label ("Style")  { TextAlignment = Alignment.End }' 0' 2);  				table.Add (cmbStyle' 1' 2' vexpand:true);    				table.Add (new Label ("Size")  { TextAlignment = Alignment.End }' 0' 3);  				table.Add (new SpinButton ()' 1' 3' vexpand:true);    				var b = new Button ("Add more");  				table.Add (b' 0' 4);  				int next = 5;  				b.Clicked += delegate {  					table.Add (new Label ("Row " + next)' 0' next++);  				};    				table.Margin = 20;  				popover.Content = table;  			}
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked,The following statement contains a magic number: if (popover == null) {  				popover = new Popover ();  				popover.Padding = 20;    				var table = new Table () { DefaultColumnSpacing = 20' DefaultRowSpacing = 10 };  //					table.Margin.SetAll (60);  				table.Add (new Label ("Font") { TextAlignment = Alignment.End }' 0' 0);  				table.Add (new ComboBox ()' 1' 0' vexpand:true);    				table.Add (new Label ("Family")  { TextAlignment = Alignment.End }' 0' 1);  				table.Add (new ComboBox ()' 1' 1' vexpand:true);    				var cmbStyle = new ComboBox ();  				cmbStyle.Items.Add ("Normal");  				cmbStyle.Items.Add ("Bold");  				cmbStyle.Items.Add ("Italic");    				table.Add (new Label ("Style")  { TextAlignment = Alignment.End }' 0' 2);  				table.Add (cmbStyle' 1' 2' vexpand:true);    				table.Add (new Label ("Size")  { TextAlignment = Alignment.End }' 0' 3);  				table.Add (new SpinButton ()' 1' 3' vexpand:true);    				var b = new Button ("Add more");  				table.Add (b' 0' 4);  				int next = 5;  				b.Clicked += delegate {  					table.Add (new Label ("Row " + next)' 0' next++);  				};    				table.Margin = 20;  				popover.Content = table;  			}
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked,The following statement contains a magic number: if (popover == null) {  				popover = new Popover ();  				popover.Padding = 20;    				var table = new Table () { DefaultColumnSpacing = 20' DefaultRowSpacing = 10 };  //					table.Margin.SetAll (60);  				table.Add (new Label ("Font") { TextAlignment = Alignment.End }' 0' 0);  				table.Add (new ComboBox ()' 1' 0' vexpand:true);    				table.Add (new Label ("Family")  { TextAlignment = Alignment.End }' 0' 1);  				table.Add (new ComboBox ()' 1' 1' vexpand:true);    				var cmbStyle = new ComboBox ();  				cmbStyle.Items.Add ("Normal");  				cmbStyle.Items.Add ("Bold");  				cmbStyle.Items.Add ("Italic");    				table.Add (new Label ("Style")  { TextAlignment = Alignment.End }' 0' 2);  				table.Add (cmbStyle' 1' 2' vexpand:true);    				table.Add (new Label ("Size")  { TextAlignment = Alignment.End }' 0' 3);  				table.Add (new SpinButton ()' 1' 3' vexpand:true);    				var b = new Button ("Add more");  				table.Add (b' 0' 4);  				int next = 5;  				b.Clicked += delegate {  					table.Add (new Label ("Row " + next)' 0' next++);  				};    				table.Margin = 20;  				popover.Content = table;  			}
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked,The following statement contains a magic number: if (popover == null) {  				popover = new Popover ();  				popover.Padding = 20;    				var table = new Table () { DefaultColumnSpacing = 20' DefaultRowSpacing = 10 };  //					table.Margin.SetAll (60);  				table.Add (new Label ("Font") { TextAlignment = Alignment.End }' 0' 0);  				table.Add (new ComboBox ()' 1' 0' vexpand:true);    				table.Add (new Label ("Family")  { TextAlignment = Alignment.End }' 0' 1);  				table.Add (new ComboBox ()' 1' 1' vexpand:true);    				var cmbStyle = new ComboBox ();  				cmbStyle.Items.Add ("Normal");  				cmbStyle.Items.Add ("Bold");  				cmbStyle.Items.Add ("Italic");    				table.Add (new Label ("Style")  { TextAlignment = Alignment.End }' 0' 2);  				table.Add (cmbStyle' 1' 2' vexpand:true);    				table.Add (new Label ("Size")  { TextAlignment = Alignment.End }' 0' 3);  				table.Add (new SpinButton ()' 1' 3' vexpand:true);    				var b = new Button ("Add more");  				table.Add (b' 0' 4);  				int next = 5;  				b.Clicked += delegate {  					table.Add (new Label ("Row " + next)' 0' next++);  				};    				table.Margin = 20;  				popover.Content = table;  			}
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked,The following statement contains a magic number: if (popover == null) {  				popover = new Popover ();  				popover.Padding = 20;    				var table = new Table () { DefaultColumnSpacing = 20' DefaultRowSpacing = 10 };  //					table.Margin.SetAll (60);  				table.Add (new Label ("Font") { TextAlignment = Alignment.End }' 0' 0);  				table.Add (new ComboBox ()' 1' 0' vexpand:true);    				table.Add (new Label ("Family")  { TextAlignment = Alignment.End }' 0' 1);  				table.Add (new ComboBox ()' 1' 1' vexpand:true);    				var cmbStyle = new ComboBox ();  				cmbStyle.Items.Add ("Normal");  				cmbStyle.Items.Add ("Bold");  				cmbStyle.Items.Add ("Italic");    				table.Add (new Label ("Style")  { TextAlignment = Alignment.End }' 0' 2);  				table.Add (cmbStyle' 1' 2' vexpand:true);    				table.Add (new Label ("Size")  { TextAlignment = Alignment.End }' 0' 3);  				table.Add (new SpinButton ()' 1' 3' vexpand:true);    				var b = new Button ("Add more");  				table.Add (b' 0' 4);  				int next = 5;  				b.Clicked += delegate {  					table.Add (new Label ("Row " + next)' 0' next++);  				};    				table.Margin = 20;  				popover.Content = table;  			}
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked,The following statement contains a magic number: popover.BackgroundColor = Xwt.Drawing.Colors.Yellow.WithAlpha(0.9);
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked,The following statement contains a magic number: popover.Show (Popover.Position.Top' (Button)sender' new Rectangle (50' 10' 5' 5));
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked,The following statement contains a magic number: popover.Show (Popover.Position.Top' (Button)sender' new Rectangle (50' 10' 5' 5));
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked,The following statement contains a magic number: popover.Show (Popover.Position.Top' (Button)sender' new Rectangle (50' 10' 5' 5));
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked,The following statement contains a magic number: popover.Show (Popover.Position.Top' (Button)sender' new Rectangle (50' 10' 5' 5));
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked2,The following statement contains a magic number: if (popover2 == null) {  				popover2 = new Popover ();    				var table = new Table () { DefaultColumnSpacing = 20' DefaultRowSpacing = 10 };  				table.Add (new Label ("Font") { TextAlignment = Alignment.End }' 0' 0);  				table.Add (new ComboBox ()' 1' 0' vexpand:true);    				table.Add (new Label ("Family")  { TextAlignment = Alignment.End }' 0' 1);  				table.Add (new ComboBox ()' 1' 1' vexpand:true);    				table.Add (new Label ("Style")  { TextAlignment = Alignment.End }' 0' 2);  				table.Add (new ComboBox ()' 1' 2' vexpand:true);    				table.Add (new Label ("Size")  { TextAlignment = Alignment.End }' 0' 3);  				table.Add (new SpinButton ()' 1' 3' vexpand:true);    				var b = new Button ("Add more");  				table.Add (b' 0' 4);  				int next = 5;  				b.Clicked += delegate {  					table.Add (new Label ("Row " + next)' 0' next++);  				};    				table.Margin = 6;  				popover2.Content = table;  			}
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked2,The following statement contains a magic number: if (popover2 == null) {  				popover2 = new Popover ();    				var table = new Table () { DefaultColumnSpacing = 20' DefaultRowSpacing = 10 };  				table.Add (new Label ("Font") { TextAlignment = Alignment.End }' 0' 0);  				table.Add (new ComboBox ()' 1' 0' vexpand:true);    				table.Add (new Label ("Family")  { TextAlignment = Alignment.End }' 0' 1);  				table.Add (new ComboBox ()' 1' 1' vexpand:true);    				table.Add (new Label ("Style")  { TextAlignment = Alignment.End }' 0' 2);  				table.Add (new ComboBox ()' 1' 2' vexpand:true);    				table.Add (new Label ("Size")  { TextAlignment = Alignment.End }' 0' 3);  				table.Add (new SpinButton ()' 1' 3' vexpand:true);    				var b = new Button ("Add more");  				table.Add (b' 0' 4);  				int next = 5;  				b.Clicked += delegate {  					table.Add (new Label ("Row " + next)' 0' next++);  				};    				table.Margin = 6;  				popover2.Content = table;  			}
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked2,The following statement contains a magic number: if (popover2 == null) {  				popover2 = new Popover ();    				var table = new Table () { DefaultColumnSpacing = 20' DefaultRowSpacing = 10 };  				table.Add (new Label ("Font") { TextAlignment = Alignment.End }' 0' 0);  				table.Add (new ComboBox ()' 1' 0' vexpand:true);    				table.Add (new Label ("Family")  { TextAlignment = Alignment.End }' 0' 1);  				table.Add (new ComboBox ()' 1' 1' vexpand:true);    				table.Add (new Label ("Style")  { TextAlignment = Alignment.End }' 0' 2);  				table.Add (new ComboBox ()' 1' 2' vexpand:true);    				table.Add (new Label ("Size")  { TextAlignment = Alignment.End }' 0' 3);  				table.Add (new SpinButton ()' 1' 3' vexpand:true);    				var b = new Button ("Add more");  				table.Add (b' 0' 4);  				int next = 5;  				b.Clicked += delegate {  					table.Add (new Label ("Row " + next)' 0' next++);  				};    				table.Margin = 6;  				popover2.Content = table;  			}
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked2,The following statement contains a magic number: if (popover2 == null) {  				popover2 = new Popover ();    				var table = new Table () { DefaultColumnSpacing = 20' DefaultRowSpacing = 10 };  				table.Add (new Label ("Font") { TextAlignment = Alignment.End }' 0' 0);  				table.Add (new ComboBox ()' 1' 0' vexpand:true);    				table.Add (new Label ("Family")  { TextAlignment = Alignment.End }' 0' 1);  				table.Add (new ComboBox ()' 1' 1' vexpand:true);    				table.Add (new Label ("Style")  { TextAlignment = Alignment.End }' 0' 2);  				table.Add (new ComboBox ()' 1' 2' vexpand:true);    				table.Add (new Label ("Size")  { TextAlignment = Alignment.End }' 0' 3);  				table.Add (new SpinButton ()' 1' 3' vexpand:true);    				var b = new Button ("Add more");  				table.Add (b' 0' 4);  				int next = 5;  				b.Clicked += delegate {  					table.Add (new Label ("Row " + next)' 0' next++);  				};    				table.Margin = 6;  				popover2.Content = table;  			}
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked2,The following statement contains a magic number: if (popover2 == null) {  				popover2 = new Popover ();    				var table = new Table () { DefaultColumnSpacing = 20' DefaultRowSpacing = 10 };  				table.Add (new Label ("Font") { TextAlignment = Alignment.End }' 0' 0);  				table.Add (new ComboBox ()' 1' 0' vexpand:true);    				table.Add (new Label ("Family")  { TextAlignment = Alignment.End }' 0' 1);  				table.Add (new ComboBox ()' 1' 1' vexpand:true);    				table.Add (new Label ("Style")  { TextAlignment = Alignment.End }' 0' 2);  				table.Add (new ComboBox ()' 1' 2' vexpand:true);    				table.Add (new Label ("Size")  { TextAlignment = Alignment.End }' 0' 3);  				table.Add (new SpinButton ()' 1' 3' vexpand:true);    				var b = new Button ("Add more");  				table.Add (b' 0' 4);  				int next = 5;  				b.Clicked += delegate {  					table.Add (new Label ("Row " + next)' 0' next++);  				};    				table.Margin = 6;  				popover2.Content = table;  			}
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked2,The following statement contains a magic number: if (popover2 == null) {  				popover2 = new Popover ();    				var table = new Table () { DefaultColumnSpacing = 20' DefaultRowSpacing = 10 };  				table.Add (new Label ("Font") { TextAlignment = Alignment.End }' 0' 0);  				table.Add (new ComboBox ()' 1' 0' vexpand:true);    				table.Add (new Label ("Family")  { TextAlignment = Alignment.End }' 0' 1);  				table.Add (new ComboBox ()' 1' 1' vexpand:true);    				table.Add (new Label ("Style")  { TextAlignment = Alignment.End }' 0' 2);  				table.Add (new ComboBox ()' 1' 2' vexpand:true);    				table.Add (new Label ("Size")  { TextAlignment = Alignment.End }' 0' 3);  				table.Add (new SpinButton ()' 1' 3' vexpand:true);    				var b = new Button ("Add more");  				table.Add (b' 0' 4);  				int next = 5;  				b.Clicked += delegate {  					table.Add (new Label ("Row " + next)' 0' next++);  				};    				table.Margin = 6;  				popover2.Content = table;  			}
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked2,The following statement contains a magic number: if (popover2 == null) {  				popover2 = new Popover ();    				var table = new Table () { DefaultColumnSpacing = 20' DefaultRowSpacing = 10 };  				table.Add (new Label ("Font") { TextAlignment = Alignment.End }' 0' 0);  				table.Add (new ComboBox ()' 1' 0' vexpand:true);    				table.Add (new Label ("Family")  { TextAlignment = Alignment.End }' 0' 1);  				table.Add (new ComboBox ()' 1' 1' vexpand:true);    				table.Add (new Label ("Style")  { TextAlignment = Alignment.End }' 0' 2);  				table.Add (new ComboBox ()' 1' 2' vexpand:true);    				table.Add (new Label ("Size")  { TextAlignment = Alignment.End }' 0' 3);  				table.Add (new SpinButton ()' 1' 3' vexpand:true);    				var b = new Button ("Add more");  				table.Add (b' 0' 4);  				int next = 5;  				b.Clicked += delegate {  					table.Add (new Label ("Row " + next)' 0' next++);  				};    				table.Margin = 6;  				popover2.Content = table;  			}
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked2,The following statement contains a magic number: if (popover2 == null) {  				popover2 = new Popover ();    				var table = new Table () { DefaultColumnSpacing = 20' DefaultRowSpacing = 10 };  				table.Add (new Label ("Font") { TextAlignment = Alignment.End }' 0' 0);  				table.Add (new ComboBox ()' 1' 0' vexpand:true);    				table.Add (new Label ("Family")  { TextAlignment = Alignment.End }' 0' 1);  				table.Add (new ComboBox ()' 1' 1' vexpand:true);    				table.Add (new Label ("Style")  { TextAlignment = Alignment.End }' 0' 2);  				table.Add (new ComboBox ()' 1' 2' vexpand:true);    				table.Add (new Label ("Size")  { TextAlignment = Alignment.End }' 0' 3);  				table.Add (new SpinButton ()' 1' 3' vexpand:true);    				var b = new Button ("Add more");  				table.Add (b' 0' 4);  				int next = 5;  				b.Clicked += delegate {  					table.Add (new Label ("Row " + next)' 0' next++);  				};    				table.Margin = 6;  				popover2.Content = table;  			}
Magic Number,Samples,PopoverSample,C:\repos\mono_xwt\TestApps\Samples\Samples\PopoverSample.cs,HandleClicked2,The following statement contains a magic number: if (popover2 == null) {  				popover2 = new Popover ();    				var table = new Table () { DefaultColumnSpacing = 20' DefaultRowSpacing = 10 };  				table.Add (new Label ("Font") { TextAlignment = Alignment.End }' 0' 0);  				table.Add (new ComboBox ()' 1' 0' vexpand:true);    				table.Add (new Label ("Family")  { TextAlignment = Alignment.End }' 0' 1);  				table.Add (new ComboBox ()' 1' 1' vexpand:true);    				table.Add (new Label ("Style")  { TextAlignment = Alignment.End }' 0' 2);  				table.Add (new ComboBox ()' 1' 2' vexpand:true);    				table.Add (new Label ("Size")  { TextAlignment = Alignment.End }' 0' 3);  				table.Add (new SpinButton ()' 1' 3' vexpand:true);    				var b = new Button ("Add more");  				table.Add (b' 0' 4);  				int next = 5;  				b.Clicked += delegate {  					table.Add (new Label ("Row " + next)' 0' next++);  				};    				table.Margin = 6;  				popover2.Content = table;  			}
Magic Number,Samples,ScreensSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ScreensSample.cs,ScreensSample,The following statement contains a magic number: c.Margin = 30;
Magic Number,Samples,ScreensCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\ScreensSample.cs,OnDraw,The following statement contains a magic number: foreach (var s in Desktop.Screens) {  				if (s.Bounds != s.VisibleBounds) {  					var vr = new Rectangle ((int)(s.Bounds.X * fx)' (int)(s.Bounds.Y * fx)' (int)(s.Bounds.Width * fx)' (int)(s.Bounds.Height * fx));  					vr = vr.Offset (0.5' 0.5);  					ctx.Rectangle (vr);  					ctx.SetColor (Colors.White);  					ctx.FillPreserve ();  					ctx.SetColor (Colors.Black);  					ctx.Stroke ();  				}  				var r = new Rectangle ((int)(s.VisibleBounds.X * fx)' (int)(s.VisibleBounds.Y * fx)' (int)(s.VisibleBounds.Width * fx)' (int)(s.VisibleBounds.Height * fx));  				r = r.Offset (0.5' 0.5);  				ctx.Rectangle (r);  				ctx.SetColor (new Color (0.4' 0.62' 0.83));  				ctx.FillPreserve ();  				ctx.SetColor (Colors.Black);  				ctx.Stroke ();    				TextLayout tl = new TextLayout (this);  				tl.Text = s.DeviceName;  				tl.Font = Font;  				ctx.DrawTextLayout (tl' r.Center.X - tl.Width / 2' r.Center.Y - tl.Height / 2);  			}
Magic Number,Samples,ScreensCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\ScreensSample.cs,OnDraw,The following statement contains a magic number: foreach (var s in Desktop.Screens) {  				if (s.Bounds != s.VisibleBounds) {  					var vr = new Rectangle ((int)(s.Bounds.X * fx)' (int)(s.Bounds.Y * fx)' (int)(s.Bounds.Width * fx)' (int)(s.Bounds.Height * fx));  					vr = vr.Offset (0.5' 0.5);  					ctx.Rectangle (vr);  					ctx.SetColor (Colors.White);  					ctx.FillPreserve ();  					ctx.SetColor (Colors.Black);  					ctx.Stroke ();  				}  				var r = new Rectangle ((int)(s.VisibleBounds.X * fx)' (int)(s.VisibleBounds.Y * fx)' (int)(s.VisibleBounds.Width * fx)' (int)(s.VisibleBounds.Height * fx));  				r = r.Offset (0.5' 0.5);  				ctx.Rectangle (r);  				ctx.SetColor (new Color (0.4' 0.62' 0.83));  				ctx.FillPreserve ();  				ctx.SetColor (Colors.Black);  				ctx.Stroke ();    				TextLayout tl = new TextLayout (this);  				tl.Text = s.DeviceName;  				tl.Font = Font;  				ctx.DrawTextLayout (tl' r.Center.X - tl.Width / 2' r.Center.Y - tl.Height / 2);  			}
Magic Number,Samples,ScreensCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\ScreensSample.cs,OnDraw,The following statement contains a magic number: foreach (var s in Desktop.Screens) {  				if (s.Bounds != s.VisibleBounds) {  					var vr = new Rectangle ((int)(s.Bounds.X * fx)' (int)(s.Bounds.Y * fx)' (int)(s.Bounds.Width * fx)' (int)(s.Bounds.Height * fx));  					vr = vr.Offset (0.5' 0.5);  					ctx.Rectangle (vr);  					ctx.SetColor (Colors.White);  					ctx.FillPreserve ();  					ctx.SetColor (Colors.Black);  					ctx.Stroke ();  				}  				var r = new Rectangle ((int)(s.VisibleBounds.X * fx)' (int)(s.VisibleBounds.Y * fx)' (int)(s.VisibleBounds.Width * fx)' (int)(s.VisibleBounds.Height * fx));  				r = r.Offset (0.5' 0.5);  				ctx.Rectangle (r);  				ctx.SetColor (new Color (0.4' 0.62' 0.83));  				ctx.FillPreserve ();  				ctx.SetColor (Colors.Black);  				ctx.Stroke ();    				TextLayout tl = new TextLayout (this);  				tl.Text = s.DeviceName;  				tl.Font = Font;  				ctx.DrawTextLayout (tl' r.Center.X - tl.Width / 2' r.Center.Y - tl.Height / 2);  			}
Magic Number,Samples,ScreensCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\ScreensSample.cs,OnDraw,The following statement contains a magic number: foreach (var s in Desktop.Screens) {  				if (s.Bounds != s.VisibleBounds) {  					var vr = new Rectangle ((int)(s.Bounds.X * fx)' (int)(s.Bounds.Y * fx)' (int)(s.Bounds.Width * fx)' (int)(s.Bounds.Height * fx));  					vr = vr.Offset (0.5' 0.5);  					ctx.Rectangle (vr);  					ctx.SetColor (Colors.White);  					ctx.FillPreserve ();  					ctx.SetColor (Colors.Black);  					ctx.Stroke ();  				}  				var r = new Rectangle ((int)(s.VisibleBounds.X * fx)' (int)(s.VisibleBounds.Y * fx)' (int)(s.VisibleBounds.Width * fx)' (int)(s.VisibleBounds.Height * fx));  				r = r.Offset (0.5' 0.5);  				ctx.Rectangle (r);  				ctx.SetColor (new Color (0.4' 0.62' 0.83));  				ctx.FillPreserve ();  				ctx.SetColor (Colors.Black);  				ctx.Stroke ();    				TextLayout tl = new TextLayout (this);  				tl.Text = s.DeviceName;  				tl.Font = Font;  				ctx.DrawTextLayout (tl' r.Center.X - tl.Width / 2' r.Center.Y - tl.Height / 2);  			}
Magic Number,Samples,ScreensCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\ScreensSample.cs,OnDraw,The following statement contains a magic number: foreach (var s in Desktop.Screens) {  				if (s.Bounds != s.VisibleBounds) {  					var vr = new Rectangle ((int)(s.Bounds.X * fx)' (int)(s.Bounds.Y * fx)' (int)(s.Bounds.Width * fx)' (int)(s.Bounds.Height * fx));  					vr = vr.Offset (0.5' 0.5);  					ctx.Rectangle (vr);  					ctx.SetColor (Colors.White);  					ctx.FillPreserve ();  					ctx.SetColor (Colors.Black);  					ctx.Stroke ();  				}  				var r = new Rectangle ((int)(s.VisibleBounds.X * fx)' (int)(s.VisibleBounds.Y * fx)' (int)(s.VisibleBounds.Width * fx)' (int)(s.VisibleBounds.Height * fx));  				r = r.Offset (0.5' 0.5);  				ctx.Rectangle (r);  				ctx.SetColor (new Color (0.4' 0.62' 0.83));  				ctx.FillPreserve ();  				ctx.SetColor (Colors.Black);  				ctx.Stroke ();    				TextLayout tl = new TextLayout (this);  				tl.Text = s.DeviceName;  				tl.Font = Font;  				ctx.DrawTextLayout (tl' r.Center.X - tl.Width / 2' r.Center.Y - tl.Height / 2);  			}
Magic Number,Samples,ScreensCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\ScreensSample.cs,OnDraw,The following statement contains a magic number: foreach (var s in Desktop.Screens) {  				if (s.Bounds != s.VisibleBounds) {  					var vr = new Rectangle ((int)(s.Bounds.X * fx)' (int)(s.Bounds.Y * fx)' (int)(s.Bounds.Width * fx)' (int)(s.Bounds.Height * fx));  					vr = vr.Offset (0.5' 0.5);  					ctx.Rectangle (vr);  					ctx.SetColor (Colors.White);  					ctx.FillPreserve ();  					ctx.SetColor (Colors.Black);  					ctx.Stroke ();  				}  				var r = new Rectangle ((int)(s.VisibleBounds.X * fx)' (int)(s.VisibleBounds.Y * fx)' (int)(s.VisibleBounds.Width * fx)' (int)(s.VisibleBounds.Height * fx));  				r = r.Offset (0.5' 0.5);  				ctx.Rectangle (r);  				ctx.SetColor (new Color (0.4' 0.62' 0.83));  				ctx.FillPreserve ();  				ctx.SetColor (Colors.Black);  				ctx.Stroke ();    				TextLayout tl = new TextLayout (this);  				tl.Text = s.DeviceName;  				tl.Font = Font;  				ctx.DrawTextLayout (tl' r.Center.X - tl.Width / 2' r.Center.Y - tl.Height / 2);  			}
Magic Number,Samples,ScreensCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\ScreensSample.cs,OnDraw,The following statement contains a magic number: foreach (var s in Desktop.Screens) {  				if (s.Bounds != s.VisibleBounds) {  					var vr = new Rectangle ((int)(s.Bounds.X * fx)' (int)(s.Bounds.Y * fx)' (int)(s.Bounds.Width * fx)' (int)(s.Bounds.Height * fx));  					vr = vr.Offset (0.5' 0.5);  					ctx.Rectangle (vr);  					ctx.SetColor (Colors.White);  					ctx.FillPreserve ();  					ctx.SetColor (Colors.Black);  					ctx.Stroke ();  				}  				var r = new Rectangle ((int)(s.VisibleBounds.X * fx)' (int)(s.VisibleBounds.Y * fx)' (int)(s.VisibleBounds.Width * fx)' (int)(s.VisibleBounds.Height * fx));  				r = r.Offset (0.5' 0.5);  				ctx.Rectangle (r);  				ctx.SetColor (new Color (0.4' 0.62' 0.83));  				ctx.FillPreserve ();  				ctx.SetColor (Colors.Black);  				ctx.Stroke ();    				TextLayout tl = new TextLayout (this);  				tl.Text = s.DeviceName;  				tl.Font = Font;  				ctx.DrawTextLayout (tl' r.Center.X - tl.Width / 2' r.Center.Y - tl.Height / 2);  			}
Magic Number,Samples,ScreensCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\ScreensSample.cs,OnDraw,The following statement contains a magic number: foreach (var s in Desktop.Screens) {  				if (s.Bounds != s.VisibleBounds) {  					var vr = new Rectangle ((int)(s.Bounds.X * fx)' (int)(s.Bounds.Y * fx)' (int)(s.Bounds.Width * fx)' (int)(s.Bounds.Height * fx));  					vr = vr.Offset (0.5' 0.5);  					ctx.Rectangle (vr);  					ctx.SetColor (Colors.White);  					ctx.FillPreserve ();  					ctx.SetColor (Colors.Black);  					ctx.Stroke ();  				}  				var r = new Rectangle ((int)(s.VisibleBounds.X * fx)' (int)(s.VisibleBounds.Y * fx)' (int)(s.VisibleBounds.Width * fx)' (int)(s.VisibleBounds.Height * fx));  				r = r.Offset (0.5' 0.5);  				ctx.Rectangle (r);  				ctx.SetColor (new Color (0.4' 0.62' 0.83));  				ctx.FillPreserve ();  				ctx.SetColor (Colors.Black);  				ctx.Stroke ();    				TextLayout tl = new TextLayout (this);  				tl.Text = s.DeviceName;  				tl.Font = Font;  				ctx.DrawTextLayout (tl' r.Center.X - tl.Width / 2' r.Center.Y - tl.Height / 2);  			}
Magic Number,Samples,ScreensCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\ScreensSample.cs,OnDraw,The following statement contains a magic number: foreach (var s in Desktop.Screens) {  				if (s.Bounds != s.VisibleBounds) {  					var vr = new Rectangle ((int)(s.Bounds.X * fx)' (int)(s.Bounds.Y * fx)' (int)(s.Bounds.Width * fx)' (int)(s.Bounds.Height * fx));  					vr = vr.Offset (0.5' 0.5);  					ctx.Rectangle (vr);  					ctx.SetColor (Colors.White);  					ctx.FillPreserve ();  					ctx.SetColor (Colors.Black);  					ctx.Stroke ();  				}  				var r = new Rectangle ((int)(s.VisibleBounds.X * fx)' (int)(s.VisibleBounds.Y * fx)' (int)(s.VisibleBounds.Width * fx)' (int)(s.VisibleBounds.Height * fx));  				r = r.Offset (0.5' 0.5);  				ctx.Rectangle (r);  				ctx.SetColor (new Color (0.4' 0.62' 0.83));  				ctx.FillPreserve ();  				ctx.SetColor (Colors.Black);  				ctx.Stroke ();    				TextLayout tl = new TextLayout (this);  				tl.Text = s.DeviceName;  				tl.Font = Font;  				ctx.DrawTextLayout (tl' r.Center.X - tl.Width / 2' r.Center.Y - tl.Height / 2);  			}
Magic Number,Samples,ScreensCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\ScreensSample.cs,OnDraw,The following statement contains a magic number: ctx.SetColor (Colors.Azure.WithAlpha (0.5));
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: for (int n=4; n < 50; n += 4) {  				ctx.DrawImage (image.WithSize (n' n)' x' 0);  				x += n;  			}
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: for (int n=4; n < 50; n += 4) {  				ctx.DrawImage (image.WithSize (n' n)' x' 0);  				x += n;  			}
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: for (int n=4; n < 50; n += 4) {  				ctx.DrawImage (image.WithSize (n' n)' x' 0);  				x += n;  			}
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: int maxSize = 48;
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: for (int n=8; n <= maxSize; n += 2) {  				ctx.DrawImage (warn' x' 50' n' n);  				x += n;  			}
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: for (int n=8; n <= maxSize; n += 2) {  				ctx.DrawImage (warn' x' 50' n' n);  				x += n;  			}
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: for (int n=8; n <= maxSize; n += 2) {  				ctx.DrawImage (warn' x' 50' n' n);  				x += n;  			}
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: for (int n=8; n <= maxSize; n += 2) {  				ctx.DrawImage (warn' x' 100' n' n);  				x += n;  			}
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: for (int n=8; n <= maxSize; n += 2) {  				ctx.DrawImage (warn' x' 100' n' n);  				x += n;  			}
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: for (int n=8; n <= maxSize; n += 2) {  				ctx.DrawImage (warn' x' 100' n' n);  				x += n;  			}
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (image.WithSize (1000)' new Rectangle (400' 0' 200' 1000)' new Rectangle (0' 200' 200' 200));
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (image.WithSize (1000)' new Rectangle (400' 0' 200' 1000)' new Rectangle (0' 200' 200' 200));
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (image.WithSize (1000)' new Rectangle (400' 0' 200' 1000)' new Rectangle (0' 200' 200' 200));
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (image.WithSize (1000)' new Rectangle (400' 0' 200' 1000)' new Rectangle (0' 200' 200' 200));
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (image.WithSize (1000)' new Rectangle (400' 0' 200' 1000)' new Rectangle (0' 200' 200' 200));
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (image.WithSize (1000)' new Rectangle (400' 0' 200' 1000)' new Rectangle (0' 200' 200' 200));
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (image.WithSize (1000)' new Rectangle (400' 0' 200' 1000)' new Rectangle (0' 200' 200' 200));
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (image.WithSize (1000)' new Rectangle (400' 0' 200' 50)' new Rectangle (210' 200' 200' 200));
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (image.WithSize (1000)' new Rectangle (400' 0' 200' 50)' new Rectangle (210' 200' 200' 200));
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (image.WithSize (1000)' new Rectangle (400' 0' 200' 50)' new Rectangle (210' 200' 200' 200));
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (image.WithSize (1000)' new Rectangle (400' 0' 200' 50)' new Rectangle (210' 200' 200' 200));
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (image.WithSize (1000)' new Rectangle (400' 0' 200' 50)' new Rectangle (210' 200' 200' 200));
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (image.WithSize (1000)' new Rectangle (400' 0' 200' 50)' new Rectangle (210' 200' 200' 200));
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (image.WithSize (1000)' new Rectangle (400' 0' 200' 50)' new Rectangle (210' 200' 200' 200));
Magic Number,Samples,ImageScaling,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (image.WithSize (1000)' new Rectangle (400' 0' 200' 50)' new Rectangle (210' 200' 200' 200));
Magic Number,Samples,CustomImage,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: var section = ((bounds.Width / 2) - lineWidth / 2) / 3;
Magic Number,Samples,CustomImage,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: var section = ((bounds.Width / 2) - lineWidth / 2) / 3;
Magic Number,Samples,CustomImage,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: var section = ((bounds.Width / 2) - lineWidth / 2) / 3;
Magic Number,Samples,CustomImage,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: ctx.Arc (bounds.Center.X' bounds.Center.Y' 1' 0' 360);
Magic Number,Samples,CustomImage,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: ctx.Arc (bounds.Center.X' bounds.Center.Y' section' 0' 360);
Magic Number,Samples,CustomImage,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: ctx.Arc (bounds.Center.X' bounds.Center.Y' section * 2' 0' 360);
Magic Number,Samples,CustomImage,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: ctx.Arc (bounds.Center.X' bounds.Center.Y' section * 2' 0' 360);
Magic Number,Samples,CustomImage,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: ctx.Arc (bounds.Center.X' bounds.Center.Y' section * 3' 0' 360);
Magic Number,Samples,CustomImage,C:\repos\mono_xwt\TestApps\Samples\Samples\ImageScaling.cs,OnDraw,The following statement contains a magic number: ctx.Arc (bounds.Center.X' bounds.Center.Y' section * 3' 0' 360);
Magic Number,Samples,ScrollbarSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ScrollbarSample.cs,ScrollbarSample,The following statement contains a magic number: WidthRequest = 300;
Magic Number,Samples,ScrollbarSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ScrollbarSample.cs,ScrollbarSample,The following statement contains a magic number: HeightRequest = 300;
Magic Number,Samples,ScrollbarSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ScrollbarSample.cs,ScrollbarSample,The following statement contains a magic number: vscroll = new VScrollbar () {  				LowerValue = 0'  				UpperValue = 300'  				PageIncrement = 10'  				PageSize = 50'  				StepIncrement = 1  			};
Magic Number,Samples,ScrollbarSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ScrollbarSample.cs,ScrollbarSample,The following statement contains a magic number: vscroll = new VScrollbar () {  				LowerValue = 0'  				UpperValue = 300'  				PageIncrement = 10'  				PageSize = 50'  				StepIncrement = 1  			};
Magic Number,Samples,ScrollbarSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ScrollbarSample.cs,ScrollbarSample,The following statement contains a magic number: vscroll = new VScrollbar () {  				LowerValue = 0'  				UpperValue = 300'  				PageIncrement = 10'  				PageSize = 50'  				StepIncrement = 1  			};
Magic Number,Samples,ScrollbarSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ScrollbarSample.cs,ScrollbarSample,The following statement contains a magic number: hscroll = new HScrollbar () {  				LowerValue = 0'  				UpperValue = 300'  				PageIncrement = 10'  				PageSize = 50'  				StepIncrement = 1  			};
Magic Number,Samples,ScrollbarSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ScrollbarSample.cs,ScrollbarSample,The following statement contains a magic number: hscroll = new HScrollbar () {  				LowerValue = 0'  				UpperValue = 300'  				PageIncrement = 10'  				PageSize = 50'  				StepIncrement = 1  			};
Magic Number,Samples,ScrollbarSample,C:\repos\mono_xwt\TestApps\Samples\Samples\ScrollbarSample.cs,ScrollbarSample,The following statement contains a magic number: hscroll = new HScrollbar () {  				LowerValue = 0'  				UpperValue = 300'  				PageIncrement = 10'  				PageSize = 50'  				StepIncrement = 1  			};
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: var sl1 = new HSlider {  				MinimumValue = 0'  				MaximumValue = 2'  				StepIncrement = 0.05'  				SnapToTicks = true'  			};
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: var sl1 = new HSlider {  				MinimumValue = 0'  				MaximumValue = 2'  				StepIncrement = 0.05'  				SnapToTicks = true'  			};
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: var sl2 = new HSlider {   				MinimumValue = -9'   				MaximumValue = 0'  				StepIncrement = 2'  				SnapToTicks = true'  			};
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: var sl2 = new HSlider {   				MinimumValue = -9'   				MaximumValue = 0'  				StepIncrement = 2'  				SnapToTicks = true'  			};
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: var sl21 = new HSlider {   				MinimumValue = 0'   				MaximumValue = 9'  				StepIncrement = 2'  				SnapToTicks = true'  			};
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: var sl21 = new HSlider {   				MinimumValue = 0'   				MaximumValue = 9'  				StepIncrement = 2'  				SnapToTicks = true'  			};
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: var sl22 = new HSlider {   				MinimumValue = -9'   				MaximumValue = 9'  				StepIncrement = 2'  				SnapToTicks = true'  			};
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: var sl22 = new HSlider {   				MinimumValue = -9'   				MaximumValue = 9'  				StepIncrement = 2'  				SnapToTicks = true'  			};
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: var sl22 = new HSlider {   				MinimumValue = -9'   				MaximumValue = 9'  				StepIncrement = 2'  				SnapToTicks = true'  			};
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: var sl23 = new HSlider {   				MinimumValue = -9'   				MaximumValue = 9'  				StepIncrement = 1'  				SnapToTicks = true'  			};
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: var sl23 = new HSlider {   				MinimumValue = -9'   				MaximumValue = 9'  				StepIncrement = 1'  				SnapToTicks = true'  			};
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: var sl3 = new HSlider {   				MinimumValue = -9'   				MaximumValue = 9'  				StepIncrement = 2'  				SnapToTicks = false'  			};
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: var sl3 = new HSlider {   				MinimumValue = -9'   				MaximumValue = 9'  				StepIncrement = 2'  				SnapToTicks = false'  			};
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: var sl3 = new HSlider {   				MinimumValue = -9'   				MaximumValue = 9'  				StepIncrement = 2'  				SnapToTicks = false'  			};
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: var sl4 = new HSlider {  				MinimumValue = -1'  				MaximumValue = 1'  				StepIncrement = 0.05  			};
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: sl4.ValueChanged += (sender' e) => {    				var offset = Math.Abs (sl4.Value) % sl4.StepIncrement;  				if (Math.Abs (offset) > double.Epsilon) {  					if (offset > sl4.StepIncrement / 2) {  						if (sl4.Value >= 0)  							sl4.Value += -offset + sl4.StepIncrement;  						else  							sl4.Value += offset - sl4.StepIncrement;  					}  					else  						if (sl4.Value >= 0)  							sl4.Value -= offset;  						else  							sl4.Value += offset;  				}    				lbl4.MarginLeft = sl4.SliderPosition - (lbl4.Size.Width / 2);  				if (lbl4.MarginLeft + lbl4.Size.Width > sl4.Size.Width)  					lbl4.MarginLeft = sl4.Size.Width - lbl4.Size.Width;  				if (lbl4.MarginLeft < 0)  					lbl4.MarginLeft = 0;    				lbl4.Text = (sl4.Value).ToString ("F2");  			};
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: sl4.ValueChanged += (sender' e) => {    				var offset = Math.Abs (sl4.Value) % sl4.StepIncrement;  				if (Math.Abs (offset) > double.Epsilon) {  					if (offset > sl4.StepIncrement / 2) {  						if (sl4.Value >= 0)  							sl4.Value += -offset + sl4.StepIncrement;  						else  							sl4.Value += offset - sl4.StepIncrement;  					}  					else  						if (sl4.Value >= 0)  							sl4.Value -= offset;  						else  							sl4.Value += offset;  				}    				lbl4.MarginLeft = sl4.SliderPosition - (lbl4.Size.Width / 2);  				if (lbl4.MarginLeft + lbl4.Size.Width > sl4.Size.Width)  					lbl4.MarginLeft = sl4.Size.Width - lbl4.Size.Width;  				if (lbl4.MarginLeft < 0)  					lbl4.MarginLeft = 0;    				lbl4.Text = (sl4.Value).ToString ("F2");  			};
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: Add (sl21' 0' 2' hexpand: true);
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: Add (lbl21' 1' 2);
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: Add (sl22' 0' 3' hexpand: true);
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: Add (lbl22' 1' 3);
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: Add (sl23' 0' 4' hexpand: true);
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: Add (lbl23' 1' 4);
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: Add (sl3' 0' 5' hexpand: true);
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: Add (lbl3' 1' 5);
Magic Number,Samples,HorizontalSliderSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,HorizontalSliderSample,The following statement contains a magic number: Add (sl4box' 0' 6' hexpand: true);
Magic Number,Samples,VerticalSliderSamples,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,VerticalSliderSamples,The following statement contains a magic number: var slv1 = new VSlider { MinimumValue = 50' MaximumValue = 100 };
Magic Number,Samples,VerticalSliderSamples,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,VerticalSliderSamples,The following statement contains a magic number: var slv1 = new VSlider { MinimumValue = 50' MaximumValue = 100 };
Magic Number,Samples,VerticalSliderSamples,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,VerticalSliderSamples,The following statement contains a magic number: var slv2 = new VSlider {   				MinimumValue = -9'   				MaximumValue = 0'  				StepIncrement = 2'  				SnapToTicks = true'  			};
Magic Number,Samples,VerticalSliderSamples,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,VerticalSliderSamples,The following statement contains a magic number: var slv2 = new VSlider {   				MinimumValue = -9'   				MaximumValue = 0'  				StepIncrement = 2'  				SnapToTicks = true'  			};
Magic Number,Samples,VerticalSliderSamples,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,VerticalSliderSamples,The following statement contains a magic number: var slv3 = new VSlider {   				MinimumValue = -9'   				MaximumValue = 9'  				StepIncrement = 2'  				SnapToTicks = false'  			};
Magic Number,Samples,VerticalSliderSamples,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,VerticalSliderSamples,The following statement contains a magic number: var slv3 = new VSlider {   				MinimumValue = -9'   				MaximumValue = 9'  				StepIncrement = 2'  				SnapToTicks = false'  			};
Magic Number,Samples,VerticalSliderSamples,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,VerticalSliderSamples,The following statement contains a magic number: var slv3 = new VSlider {   				MinimumValue = -9'   				MaximumValue = 9'  				StepIncrement = 2'  				SnapToTicks = false'  			};
Magic Number,Samples,VerticalSliderSamples,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,VerticalSliderSamples,The following statement contains a magic number: var slv4 = new VSlider {  				MinimumValue = 0'  				MaximumValue = 20'  				StepIncrement = 0.05  			};
Magic Number,Samples,VerticalSliderSamples,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,VerticalSliderSamples,The following statement contains a magic number: var slv4 = new VSlider {  				MinimumValue = 0'  				MaximumValue = 20'  				StepIncrement = 0.05  			};
Magic Number,Samples,VerticalSliderSamples,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,VerticalSliderSamples,The following statement contains a magic number: slv4.ValueChanged += (sender' e) => {    				var offset = Math.Abs (slv4.Value) % slv4.StepIncrement;  				if (Math.Abs (offset) > double.Epsilon) {  					if (offset > slv4.StepIncrement / 2) {  						if (slv4.Value >= 0)  							slv4.Value += -offset + slv4.StepIncrement;  						else  							slv4.Value += offset - slv4.StepIncrement;  					}  					else  						if (slv4.Value >= 0)  							slv4.Value -= offset;  						else  							slv4.Value += offset;  				}    				lblv4.MarginTop = slv4.SliderPosition - (lblv4.Size.Height / 2);  				if (lblv4.MarginTop + lblv4.Size.Height > slv4.Size.Height)  					lblv4.MarginTop = slv4.Size.Height - lblv4.Size.Height;  				if (lblv4.MarginTop < 0)  					lblv4.MarginTop = 0;    				lblv4.Text = (slv4.Value).ToString ("F2");  			};
Magic Number,Samples,VerticalSliderSamples,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,VerticalSliderSamples,The following statement contains a magic number: slv4.ValueChanged += (sender' e) => {    				var offset = Math.Abs (slv4.Value) % slv4.StepIncrement;  				if (Math.Abs (offset) > double.Epsilon) {  					if (offset > slv4.StepIncrement / 2) {  						if (slv4.Value >= 0)  							slv4.Value += -offset + slv4.StepIncrement;  						else  							slv4.Value += offset - slv4.StepIncrement;  					}  					else  						if (slv4.Value >= 0)  							slv4.Value -= offset;  						else  							slv4.Value += offset;  				}    				lblv4.MarginTop = slv4.SliderPosition - (lblv4.Size.Height / 2);  				if (lblv4.MarginTop + lblv4.Size.Height > slv4.Size.Height)  					lblv4.MarginTop = slv4.Size.Height - lblv4.Size.Height;  				if (lblv4.MarginTop < 0)  					lblv4.MarginTop = 0;    				lblv4.Text = (slv4.Value).ToString ("F2");  			};
Magic Number,Samples,VerticalSliderSamples,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,VerticalSliderSamples,The following statement contains a magic number: Add (slv3' 2' 1' vexpand: true' hexpand: true' hpos: WidgetPlacement.Center);
Magic Number,Samples,VerticalSliderSamples,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,VerticalSliderSamples,The following statement contains a magic number: Add (lblv3' 2' 0' hpos: WidgetPlacement.Center);
Magic Number,Samples,VerticalSliderSamples,C:\repos\mono_xwt\TestApps\Samples\Samples\SliderSample.cs,VerticalSliderSamples,The following statement contains a magic number: Add (slv4box' 3' 1' vexpand: true' hexpand: true' hpos: WidgetPlacement.Center);
Magic Number,Samples,ListView2,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView2.cs,ListView2,The following statement contains a magic number: for (int n=0; n<100; n++) {  				var r = store.AddRow ();  				store.SetValue (r' editableActiveField' rand.Next(0' 2) == 0);  				store.SetValue (r' nonEditableActiveField' rand.Next(0' 2) == 0);  				store.SetValue(r' somewhatEditableData' rand.Next(0' 2) == 0);  				store.SetValue (r' textField' n.ToString ());  				var edit = (n % 2) == 0;  				store.SetValue (r' editableField' edit);  				store.SetValue (r' textField2' edit ? "editable" : "not editable");  			}
Magic Number,Samples,ListView2,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView2.cs,ListView2,The following statement contains a magic number: for (int n=0; n<100; n++) {  				var r = store.AddRow ();  				store.SetValue (r' editableActiveField' rand.Next(0' 2) == 0);  				store.SetValue (r' nonEditableActiveField' rand.Next(0' 2) == 0);  				store.SetValue(r' somewhatEditableData' rand.Next(0' 2) == 0);  				store.SetValue (r' textField' n.ToString ());  				var edit = (n % 2) == 0;  				store.SetValue (r' editableField' edit);  				store.SetValue (r' textField2' edit ? "editable" : "not editable");  			}
Magic Number,Samples,ListView2,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView2.cs,ListView2,The following statement contains a magic number: for (int n=0; n<100; n++) {  				var r = store.AddRow ();  				store.SetValue (r' editableActiveField' rand.Next(0' 2) == 0);  				store.SetValue (r' nonEditableActiveField' rand.Next(0' 2) == 0);  				store.SetValue(r' somewhatEditableData' rand.Next(0' 2) == 0);  				store.SetValue (r' textField' n.ToString ());  				var edit = (n % 2) == 0;  				store.SetValue (r' editableField' edit);  				store.SetValue (r' textField2' edit ? "editable" : "not editable");  			}
Magic Number,Samples,ListView2,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView2.cs,ListView2,The following statement contains a magic number: for (int n=0; n<100; n++) {  				var r = store.AddRow ();  				store.SetValue (r' editableActiveField' rand.Next(0' 2) == 0);  				store.SetValue (r' nonEditableActiveField' rand.Next(0' 2) == 0);  				store.SetValue(r' somewhatEditableData' rand.Next(0' 2) == 0);  				store.SetValue (r' textField' n.ToString ());  				var edit = (n % 2) == 0;  				store.SetValue (r' editableField' edit);  				store.SetValue (r' textField2' edit ? "editable" : "not editable");  			}
Magic Number,Samples,ListView2,C:\repos\mono_xwt\TestApps\Samples\Samples\ListView2.cs,ListView2,The following statement contains a magic number: for (int n=0; n<100; n++) {  				var r = store.AddRow ();  				store.SetValue (r' editableActiveField' rand.Next(0' 2) == 0);  				store.SetValue (r' nonEditableActiveField' rand.Next(0' 2) == 0);  				store.SetValue(r' somewhatEditableData' rand.Next(0' 2) == 0);  				store.SetValue (r' textField' n.ToString ());  				var edit = (n % 2) == 0;  				store.SetValue (r' editableField' edit);  				store.SetValue (r' textField2' edit ? "editable" : "not editable");  			}
Magic Number,Samples,OpacitySample,C:\repos\mono_xwt\TestApps\Samples\Samples\OpacitySample.cs,OpacitySample,The following statement contains a magic number: b.Clicked += delegate {  				if (transparent) {  					b.Opacity = 1;  				}  				else {  					b.Opacity = 0.5;  				}  				transparent = !transparent;  			};
Magic Number,Samples,OpacitySample,C:\repos\mono_xwt\TestApps\Samples\Samples\OpacitySample.cs,OpacitySample,The following statement contains a magic number: bw.Clicked += delegate {  				if (winTransparent) {  					ParentWindow.Opacity = 1;  				}  				else {  					ParentWindow.Opacity = 0.5;  				}  				winTransparent = !winTransparent;  			};
Magic Number,Samples,Image9Patch,C:\repos\mono_xwt\TestApps\Samples\Samples\Image9Patch.cs,Image9Patch,The following statement contains a magic number: Margin = 30;
Magic Number,Samples,Image9Patch,C:\repos\mono_xwt\TestApps\Samples\Samples\Image9Patch.cs,OnDraw,The following statement contains a magic number: var w = Math.Truncate (Bounds.Width / 2);
Magic Number,Samples,Image9Patch,C:\repos\mono_xwt\TestApps\Samples\Samples\Image9Patch.cs,OnDraw,The following statement contains a magic number: var h = Math.Truncate (Bounds.Height / 2);
Magic Number,Samples,Image9Patch,C:\repos\mono_xwt\TestApps\Samples\Samples\Image9Patch.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (img_ss' new Rectangle (0' 0' w' h).Inflate (-10' -10));
Magic Number,Samples,Image9Patch,C:\repos\mono_xwt\TestApps\Samples\Samples\Image9Patch.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (img_ss' new Rectangle (0' 0' w' h).Inflate (-10' -10));
Magic Number,Samples,Image9Patch,C:\repos\mono_xwt\TestApps\Samples\Samples\Image9Patch.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (img_tt' new Rectangle (w' 0' w' h).Inflate (-10' -10));
Magic Number,Samples,Image9Patch,C:\repos\mono_xwt\TestApps\Samples\Samples\Image9Patch.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (img_tt' new Rectangle (w' 0' w' h).Inflate (-10' -10));
Magic Number,Samples,Image9Patch,C:\repos\mono_xwt\TestApps\Samples\Samples\Image9Patch.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (img_st' new Rectangle (0' h' w' h).Inflate (-10' -10));
Magic Number,Samples,Image9Patch,C:\repos\mono_xwt\TestApps\Samples\Samples\Image9Patch.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (img_st' new Rectangle (0' h' w' h).Inflate (-10' -10));
Magic Number,Samples,Image9Patch,C:\repos\mono_xwt\TestApps\Samples\Samples\Image9Patch.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (img_ts' new Rectangle (w' h' w' h).Inflate (-10' -10));
Magic Number,Samples,Image9Patch,C:\repos\mono_xwt\TestApps\Samples\Samples\Image9Patch.cs,OnDraw,The following statement contains a magic number: ctx.DrawImage (img_ts' new Rectangle (w' h' w' h).Inflate (-10' -10));
Magic Number,Samples,WebViewSample,C:\repos\mono_xwt\TestApps\Samples\Samples\WebViewSample.cs,WebViewSample,The following statement contains a magic number: var timer = new Timer (100);
Magic Number,Samples,SpinButtonSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SpinButtonSample.cs,SpinButtonSample,The following statement contains a magic number: spn1.MinimumValue = -100;
Magic Number,Samples,SpinButtonSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SpinButtonSample.cs,SpinButtonSample,The following statement contains a magic number: spn1.MaximumValue = 100;
Magic Number,Samples,SpinButtonSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SpinButtonSample.cs,SpinButtonSample,The following statement contains a magic number: spn2.Digits = 3;
Magic Number,Samples,SpinButtonSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SpinButtonSample.cs,SpinButtonSample,The following statement contains a magic number: spn2.IncrementValue = 0.01;
Magic Number,Samples,SpinButtonSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SpinButtonSample.cs,SpinButtonSample,The following statement contains a magic number: spn3.MinimumValue = -10;
Magic Number,Samples,SpinButtonSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SpinButtonSample.cs,SpinButtonSample,The following statement contains a magic number: spn3.MaximumValue = 20;
Magic Number,Samples,SpinButtonSample,C:\repos\mono_xwt\TestApps\Samples\Samples\SpinButtonSample.cs,SpinButtonSample,The following statement contains a magic number: spn3.IncrementValue = 0.1;
Magic Number,Samples,MouseCursors,C:\repos\mono_xwt\TestApps\Samples\Samples\MouseCursors.cs,MouseCursors,The following statement contains a magic number: var perRow = 6;
Magic Number,Samples,MessageDialogs,C:\repos\mono_xwt\TestApps\Samples\Samples\MessageDialogs.cs,MessageDialogs,The following statement contains a magic number: table.Add (new Label ("Message Type:")' 0' 2);
Magic Number,Samples,MessageDialogs,C:\repos\mono_xwt\TestApps\Samples\Samples\MessageDialogs.cs,MessageDialogs,The following statement contains a magic number: table.Add (cmbType' 1' 2' hexpand: true);
Magic Number,Samples,MessageDialogs,C:\repos\mono_xwt\TestApps\Samples\Samples\MessageDialogs.cs,MessageDialogs,The following statement contains a magic number: table.Add (btnShowMessage' 1' 3' hexpand: true);
Magic Number,Samples,MessageDialogs,C:\repos\mono_xwt\TestApps\Samples\Samples\MessageDialogs.cs,MessageDialogs,The following statement contains a magic number: table.Add (lblResult' 1' 4' hexpand: true);
Magic Number,Samples,MultithreadingSample,C:\repos\mono_xwt\TestApps\Samples\Samples\MultithreadingSample.cs,MultithreadingSample,The following statement contains a magic number: tbl.Add (btn1 = new ToggleButton("Run")' 2' r++);
Magic Number,Samples,MultithreadingSample,C:\repos\mono_xwt\TestApps\Samples\Samples\MultithreadingSample.cs,MultithreadingSample,The following statement contains a magic number: btn1.Toggled += delegate {  				if (btn1.Active) {    					worker1cancel = new CancellationTokenSource ();  					worker1 = Task.Factory.StartNew (delegate {    						int cnt = 0;  						while (!worker1cancel.Token.IsCancellationRequested) {  							Thread.Sleep (50);  							cnt++;  							string txt = cnt.ToString ();  							Application.Invoke (() => l1.Text = txt);  						}  					}' worker1cancel.Token' TaskCreationOptions.LongRunning);  				}  				else  					worker1cancel.Cancel();  			};
Magic Number,Samples,MultithreadingSample,C:\repos\mono_xwt\TestApps\Samples\Samples\MultithreadingSample.cs,MultithreadingSample,The following statement contains a magic number: tbl.Add (btn2 = new ToggleButton("Run")' 2' r++);
Magic Number,Samples,MultithreadingSample,C:\repos\mono_xwt\TestApps\Samples\Samples\MultithreadingSample.cs,MultithreadingSample,The following statement contains a magic number: btn2.Toggled += delegate {  				if (btn2.Active) {    					worker2cancel = new CancellationTokenSource ();  					worker2 = Task.Factory.StartNew (delegate {    						int cnt = 0;  						while (!worker2cancel.Token.IsCancellationRequested) {  							Thread.Sleep (50);  							cnt++;  							var txt = cnt.ToString ();  							Task.Factory.StartNew(delegate {  								l2.Text = txt;  							}' worker2cancel.Token' TaskCreationOptions.None' Application.UITaskScheduler);  						}  					}' worker2cancel.Token' TaskCreationOptions.LongRunning);  				}  				else  					worker2cancel.Cancel();  			};
Magic Number,Samples,MultithreadingSample,C:\repos\mono_xwt\TestApps\Samples\Samples\MultithreadingSample.cs,MultithreadingSample,The following statement contains a magic number: tbl.Add (btn3 = new ToggleButton("Run")' 2' r++);
Magic Number,Samples,MultithreadingSample,C:\repos\mono_xwt\TestApps\Samples\Samples\MultithreadingSample.cs,MultithreadingSample,The following statement contains a magic number: tbl.Add (btn4 = new ToggleButton("Run")' 2' r++);
Magic Number,Samples,MultithreadingSample,C:\repos\mono_xwt\TestApps\Samples\Samples\MultithreadingSample.cs,MultithreadingSample,The following statement contains a magic number: tbl.Add (btn5 = new ToggleButton("Run")' 2' r++);
Magic Number,Samples,MultithreadingSample,C:\repos\mono_xwt\TestApps\Samples\Samples\MultithreadingSample.cs,MultithreadingSample,The following statement contains a magic number: tbl.Add (btn6 = new ToggleButton("Run")' 2' r++);
Magic Number,Samples,MultithreadingSample,C:\repos\mono_xwt\TestApps\Samples\Samples\MultithreadingSample.cs,BackgroundWorkerDoWork,The following statement contains a magic number: while (!worker.CancellationPending) {  				Thread.Sleep (50);  				worker.ReportProgress(cnt2++);  			}
Magic Number,Samples,SampleBGWorker,C:\repos\mono_xwt\TestApps\Samples\Samples\MultithreadingSample.cs,CounterThread,The following statement contains a magic number: while (!stopReq.Token.IsCancellationRequested) {  				Thread.Sleep (50);  				cnt++;  				if (Count != null) {  					if (SynchronizationContext == null) {  						foreach (var del in Count.GetInvocationList()) {  							var target = del.Target as ISynchronizeInvoke;  							if (target != null) {  								if (InvokeSynchronized)  									target.Invoke (del' new object[] { this' new CounterEventArgs (cnt) });  								else  									target.BeginInvoke (del' new object[] { this' new CounterEventArgs (cnt) });  							}  						}  					} else {  						var args = new CounterEventArgs (cnt);  						if (InvokeSynchronized) {  							SynchronizationContext.Send (delegate {  								Count (this' args);  							}' null);  						} else {  							SynchronizationContext.Post (delegate {  								Count (this' args);  							}' null);  						}  					}  				}  			}
Magic Number,Samples,WidgetFocus,C:\repos\mono_xwt\TestApps\Samples\Samples\WidgetFocus.cs,WidgetFocus,The following statement contains a magic number: for (int n=0; n<10; n++) {  				var r = store.AddRow ();  				store.SetValue (r' value' "Value " + n);  			}
Magic Number,Samples,ListViewCellBounds,C:\repos\mono_xwt\TestApps\Samples\Samples\ListViewCellBounds.cs,ListViewCellBounds,The following statement contains a magic number: MinHeight = 120;
Magic Number,Samples,ListViewCellBounds,C:\repos\mono_xwt\TestApps\Samples\Samples\ListViewCellBounds.cs,ListViewCellBounds,The following statement contains a magic number: MinWidth = 100;
Magic Number,Samples,ListViewCellBounds,C:\repos\mono_xwt\TestApps\Samples\Samples\ListViewCellBounds.cs,ListViewCellBounds,The following statement contains a magic number: ListView.Columns.Add ("Check"' new TextCellView () { TextField = text }' new CustomCell () { ValueField = progress' Size = new Size(20' 20) }' new CheckBoxCellView() { ActiveField = check });
Magic Number,Samples,ListViewCellBounds,C:\repos\mono_xwt\TestApps\Samples\Samples\ListViewCellBounds.cs,ListViewCellBounds,The following statement contains a magic number: ListView.Columns.Add ("Check"' new TextCellView () { TextField = text }' new CustomCell () { ValueField = progress' Size = new Size(20' 20) }' new CheckBoxCellView() { ActiveField = check });
Magic Number,Samples,ListViewCellBounds,C:\repos\mono_xwt\TestApps\Samples\Samples\ListViewCellBounds.cs,ListViewCellBounds,The following statement contains a magic number: for (int n=0; n<100; n++) {  				var r = ListStore.AddRow ();  				ListStore.SetValue (r' icon' png);  				if (rand.Next (50) > 25) {  					ListStore.SetValue (r' name' "Value \n" + n);  					ListStore.SetValue (r' check' false);  				} else {  					ListStore.SetValue (r' name' "Value " + n);  					ListStore.SetValue (r' check' true);  				}  				ListStore.SetValue (r' text' "Text " + n);  				ListStore.SetValue (r' progress' new CellData { Value = rand.Next () % 100 });  			}
Magic Number,Samples,ListViewCellBounds,C:\repos\mono_xwt\TestApps\Samples\Samples\ListViewCellBounds.cs,ListViewCellBounds,The following statement contains a magic number: for (int n=0; n<100; n++) {  				var r = ListStore.AddRow ();  				ListStore.SetValue (r' icon' png);  				if (rand.Next (50) > 25) {  					ListStore.SetValue (r' name' "Value \n" + n);  					ListStore.SetValue (r' check' false);  				} else {  					ListStore.SetValue (r' name' "Value " + n);  					ListStore.SetValue (r' check' true);  				}  				ListStore.SetValue (r' text' "Text " + n);  				ListStore.SetValue (r' progress' new CellData { Value = rand.Next () % 100 });  			}
Magic Number,Samples,ListViewCellBounds,C:\repos\mono_xwt\TestApps\Samples\Samples\ListViewCellBounds.cs,ListViewCellBounds,The following statement contains a magic number: for (int n=0; n<100; n++) {  				var r = ListStore.AddRow ();  				ListStore.SetValue (r' icon' png);  				if (rand.Next (50) > 25) {  					ListStore.SetValue (r' name' "Value \n" + n);  					ListStore.SetValue (r' check' false);  				} else {  					ListStore.SetValue (r' name' "Value " + n);  					ListStore.SetValue (r' check' true);  				}  				ListStore.SetValue (r' text' "Text " + n);  				ListStore.SetValue (r' progress' new CellData { Value = rand.Next () % 100 });  			}
Magic Number,Samples,ListViewCellBounds,C:\repos\mono_xwt\TestApps\Samples\Samples\ListViewCellBounds.cs,ListViewCellBounds,The following statement contains a magic number: for (int n=0; n<100; n++) {  				var r = ListStore.AddRow ();  				ListStore.SetValue (r' icon' png);  				if (rand.Next (50) > 25) {  					ListStore.SetValue (r' name' "Value \n" + n);  					ListStore.SetValue (r' check' false);  				} else {  					ListStore.SetValue (r' name' "Value " + n);  					ListStore.SetValue (r' check' true);  				}  				ListStore.SetValue (r' text' "Text " + n);  				ListStore.SetValue (r' progress' new CellData { Value = rand.Next () % 100 });  			}
Magic Number,Samples,TreeViewCellBounds,C:\repos\mono_xwt\TestApps\Samples\Samples\TreeViewCellBounds.cs,TreeViewCellBounds,The following statement contains a magic number: MinHeight = 120;
Magic Number,Samples,TreeViewCellBounds,C:\repos\mono_xwt\TestApps\Samples\Samples\TreeViewCellBounds.cs,TreeViewCellBounds,The following statement contains a magic number: MinWidth = 100;
Magic Number,Samples,TreeTrackingCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\TreeViewCellBounds.cs,OnGetPreferredSize,The following statement contains a magic number: if (parent.CurrentRow == null)  				return new Size (20' 100);
Magic Number,Samples,TreeTrackingCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\TreeViewCellBounds.cs,OnGetPreferredSize,The following statement contains a magic number: if (parent.CurrentRow == null)  				return new Size (20' 100);
Magic Number,Samples,TreeTrackingCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\TreeViewCellBounds.cs,OnGetPreferredSize,The following statement contains a magic number: if (row_bg_bounds == Rectangle.Zero)  				return new Size (20' 100);
Magic Number,Samples,TreeTrackingCanvas,C:\repos\mono_xwt\TestApps\Samples\Samples\TreeViewCellBounds.cs,OnGetPreferredSize,The following statement contains a magic number: if (row_bg_bounds == Rectangle.Zero)  				return new Size (20' 100);
Magic Number,Samples,FontSelectorSample,C:\repos\mono_xwt\TestApps\Samples\Samples\FontSelectorSample.cs,FontSelectorSample,The following statement contains a magic number: tblSystemFonts.Add (selectSystemFont' 2' 0);
Magic Number,Samples,FontSelectorSample,C:\repos\mono_xwt\TestApps\Samples\Samples\FontSelectorSample.cs,FontSelectorSample,The following statement contains a magic number: tblSystemFonts.Add (selectSystemMonospaceFont' 2' 1);
Magic Number,Samples,FontSelectorSample,C:\repos\mono_xwt\TestApps\Samples\Samples\FontSelectorSample.cs,FontSelectorSample,The following statement contains a magic number: tblSystemFonts.Add (new Label ("System Serif Font:")' 0' 2);
Magic Number,Samples,FontSelectorSample,C:\repos\mono_xwt\TestApps\Samples\Samples\FontSelectorSample.cs,FontSelectorSample,The following statement contains a magic number: tblSystemFonts.Add (lblSystemSerifFont' 1' 2);
Magic Number,Samples,FontSelectorSample,C:\repos\mono_xwt\TestApps\Samples\Samples\FontSelectorSample.cs,FontSelectorSample,The following statement contains a magic number: tblSystemFonts.Add (selectSystemSerifFont' 2' 2);
Magic Number,Samples,FontSelectorSample,C:\repos\mono_xwt\TestApps\Samples\Samples\FontSelectorSample.cs,FontSelectorSample,The following statement contains a magic number: tblSystemFonts.Add (selectSystemSerifFont' 2' 2);
Magic Number,Samples,FontSelectorSample,C:\repos\mono_xwt\TestApps\Samples\Samples\FontSelectorSample.cs,FontSelectorSample,The following statement contains a magic number: tblSystemFonts.Add (new Label ("System SansSerif Font:")' 0' 3);
Magic Number,Samples,FontSelectorSample,C:\repos\mono_xwt\TestApps\Samples\Samples\FontSelectorSample.cs,FontSelectorSample,The following statement contains a magic number: tblSystemFonts.Add (lblSystemSansSerifFont' 1' 3);
Magic Number,Samples,FontSelectorSample,C:\repos\mono_xwt\TestApps\Samples\Samples\FontSelectorSample.cs,FontSelectorSample,The following statement contains a magic number: tblSystemFonts.Add (selectSystemSansSerifFont' 2' 3);
Magic Number,Samples,FontSelectorSample,C:\repos\mono_xwt\TestApps\Samples\Samples\FontSelectorSample.cs,FontSelectorSample,The following statement contains a magic number: tblSystemFonts.Add (selectSystemSansSerifFont' 2' 3);
Magic Number,Samples,ListViewEntries,C:\repos\mono_xwt\TestApps\Samples\Samples\ListViewEntries.cs,ListViewEntries,The following statement contains a magic number: for (int n = 0; n < 10; n++) {  				var r = store.AddRow ();  				store.SetValue (r' editableTextField' "Editable value " + n);  				store.SetValue (r' nonEditableTextField' "Non-editable value " + n);  			}
Magic Number,Samples,FileSelectorSample,C:\repos\mono_xwt\TestApps\Samples\Samples\FileSelectorSample.cs,FileSelectorSample,The following statement contains a magic number: PackStart (new Label ("An save file selector:") { MarginTop = 12 });
Magic Number,Samples,ListViewCombos,C:\repos\mono_xwt\TestApps\Samples\Samples\ListViewCombos.cs,ListViewCombos,The following statement contains a magic number: comboCellView.Items.Add (2' "two");
Magic Number,Samples,ListViewCombos,C:\repos\mono_xwt\TestApps\Samples\Samples\ListViewCombos.cs,ListViewCombos,The following statement contains a magic number: comboCellView.Items.Add (3' "three");
Magic Number,Samples,ListViewCombos,C:\repos\mono_xwt\TestApps\Samples\Samples\ListViewCombos.cs,ListViewCombos,The following statement contains a magic number: for (int n = 0; n < 10; n++) {  				var r = store.AddRow ();  				store.SetValue (r' indexField' n % 3);  				var col = new ItemCollection ();  				for (int i = 0; i < 3; i++) {  					col.Add (p' "p" + p);  					p++;  				}  				store.SetValues (r' indexField2' n % 3' itemsField' col);  			}
Magic Number,Samples,ListViewCombos,C:\repos\mono_xwt\TestApps\Samples\Samples\ListViewCombos.cs,ListViewCombos,The following statement contains a magic number: for (int n = 0; n < 10; n++) {  				var r = store.AddRow ();  				store.SetValue (r' indexField' n % 3);  				var col = new ItemCollection ();  				for (int i = 0; i < 3; i++) {  					col.Add (p' "p" + p);  					p++;  				}  				store.SetValues (r' indexField2' n % 3' itemsField' col);  			}
Magic Number,Samples,ListViewCombos,C:\repos\mono_xwt\TestApps\Samples\Samples\ListViewCombos.cs,ListViewCombos,The following statement contains a magic number: for (int n = 0; n < 10; n++) {  				var r = store.AddRow ();  				store.SetValue (r' indexField' n % 3);  				var col = new ItemCollection ();  				for (int i = 0; i < 3; i++) {  					col.Add (p' "p" + p);  					p++;  				}  				store.SetValues (r' indexField2' n % 3' itemsField' col);  			}
Magic Number,Samples,ListViewCombos,C:\repos\mono_xwt\TestApps\Samples\Samples\ListViewCombos.cs,ListViewCombos,The following statement contains a magic number: for (int n = 0; n < 10; n++) {  				var r = store.AddRow ();  				store.SetValue (r' indexField' n % 3);  				var col = new ItemCollection ();  				for (int i = 0; i < 3; i++) {  					col.Add (p' "p" + p);  					p++;  				}  				store.SetValues (r' indexField2' n % 3' itemsField' col);  			}
Magic Number,Samples,PopupWindows,C:\repos\mono_xwt\TestApps\Samples\Samples\PopupWindows.cs,PopupWindows,The following statement contains a magic number: btn2.Clicked += (sender' e) => {  				if (popup2 == null) {  					popup2 = new PopupWindow (PopupWindow.PopupType.Tooltip);  					popup2.TransientFor = ParentWindow;  					popup2.Decorated = false;  					popup2.Title = "Tooltip";  					popup2.BackgroundColor = Colors.Blue.WithAlpha (0.7);  					var l = new Label ("Tooltip Window");  					l.Margin = 5;  					l.TextColor = Colors.White;  					l.MouseExited += (sl' el) => popup2.Hide ();  					l.VerticalPlacement = l.HorizontalPlacement = WidgetPlacement.Center;  					l.Margin = new WidgetSpacing (5' 4' 5' 4);    					popup2.Content = l;  				}  				if (!popup2.Visible) {  					btn2.Label = "Hide custom Tooltip Window";  					popup2.Show ();  				} else {  					btn2.Label = "Show custom Tooltip Window";  					popup2.Hide ();  				}  			};
Magic Number,Samples,PopupWindows,C:\repos\mono_xwt\TestApps\Samples\Samples\PopupWindows.cs,PopupWindows,The following statement contains a magic number: btn2.Clicked += (sender' e) => {  				if (popup2 == null) {  					popup2 = new PopupWindow (PopupWindow.PopupType.Tooltip);  					popup2.TransientFor = ParentWindow;  					popup2.Decorated = false;  					popup2.Title = "Tooltip";  					popup2.BackgroundColor = Colors.Blue.WithAlpha (0.7);  					var l = new Label ("Tooltip Window");  					l.Margin = 5;  					l.TextColor = Colors.White;  					l.MouseExited += (sl' el) => popup2.Hide ();  					l.VerticalPlacement = l.HorizontalPlacement = WidgetPlacement.Center;  					l.Margin = new WidgetSpacing (5' 4' 5' 4);    					popup2.Content = l;  				}  				if (!popup2.Visible) {  					btn2.Label = "Hide custom Tooltip Window";  					popup2.Show ();  				} else {  					btn2.Label = "Show custom Tooltip Window";  					popup2.Hide ();  				}  			};
Magic Number,Samples,PopupWindows,C:\repos\mono_xwt\TestApps\Samples\Samples\PopupWindows.cs,PopupWindows,The following statement contains a magic number: btn2.Clicked += (sender' e) => {  				if (popup2 == null) {  					popup2 = new PopupWindow (PopupWindow.PopupType.Tooltip);  					popup2.TransientFor = ParentWindow;  					popup2.Decorated = false;  					popup2.Title = "Tooltip";  					popup2.BackgroundColor = Colors.Blue.WithAlpha (0.7);  					var l = new Label ("Tooltip Window");  					l.Margin = 5;  					l.TextColor = Colors.White;  					l.MouseExited += (sl' el) => popup2.Hide ();  					l.VerticalPlacement = l.HorizontalPlacement = WidgetPlacement.Center;  					l.Margin = new WidgetSpacing (5' 4' 5' 4);    					popup2.Content = l;  				}  				if (!popup2.Visible) {  					btn2.Label = "Hide custom Tooltip Window";  					popup2.Show ();  				} else {  					btn2.Label = "Show custom Tooltip Window";  					popup2.Hide ();  				}  			};
Magic Number,Samples,PopupWindows,C:\repos\mono_xwt\TestApps\Samples\Samples\PopupWindows.cs,PopupWindows,The following statement contains a magic number: btn2.Clicked += (sender' e) => {  				if (popup2 == null) {  					popup2 = new PopupWindow (PopupWindow.PopupType.Tooltip);  					popup2.TransientFor = ParentWindow;  					popup2.Decorated = false;  					popup2.Title = "Tooltip";  					popup2.BackgroundColor = Colors.Blue.WithAlpha (0.7);  					var l = new Label ("Tooltip Window");  					l.Margin = 5;  					l.TextColor = Colors.White;  					l.MouseExited += (sl' el) => popup2.Hide ();  					l.VerticalPlacement = l.HorizontalPlacement = WidgetPlacement.Center;  					l.Margin = new WidgetSpacing (5' 4' 5' 4);    					popup2.Content = l;  				}  				if (!popup2.Visible) {  					btn2.Label = "Hide custom Tooltip Window";  					popup2.Show ();  				} else {  					btn2.Label = "Show custom Tooltip Window";  					popup2.Hide ();  				}  			};
Magic Number,Samples,PopupWindows,C:\repos\mono_xwt\TestApps\Samples\Samples\PopupWindows.cs,PopupWindows,The following statement contains a magic number: btn2.Clicked += (sender' e) => {  				if (popup2 == null) {  					popup2 = new PopupWindow (PopupWindow.PopupType.Tooltip);  					popup2.TransientFor = ParentWindow;  					popup2.Decorated = false;  					popup2.Title = "Tooltip";  					popup2.BackgroundColor = Colors.Blue.WithAlpha (0.7);  					var l = new Label ("Tooltip Window");  					l.Margin = 5;  					l.TextColor = Colors.White;  					l.MouseExited += (sl' el) => popup2.Hide ();  					l.VerticalPlacement = l.HorizontalPlacement = WidgetPlacement.Center;  					l.Margin = new WidgetSpacing (5' 4' 5' 4);    					popup2.Content = l;  				}  				if (!popup2.Visible) {  					btn2.Label = "Hide custom Tooltip Window";  					popup2.Show ();  				} else {  					btn2.Label = "Show custom Tooltip Window";  					popup2.Hide ();  				}  			};
Magic Number,Samples,PopupWindows,C:\repos\mono_xwt\TestApps\Samples\Samples\PopupWindows.cs,PopupWindows,The following statement contains a magic number: btn2.Clicked += (sender' e) => {  				if (popup2 == null) {  					popup2 = new PopupWindow (PopupWindow.PopupType.Tooltip);  					popup2.TransientFor = ParentWindow;  					popup2.Decorated = false;  					popup2.Title = "Tooltip";  					popup2.BackgroundColor = Colors.Blue.WithAlpha (0.7);  					var l = new Label ("Tooltip Window");  					l.Margin = 5;  					l.TextColor = Colors.White;  					l.MouseExited += (sl' el) => popup2.Hide ();  					l.VerticalPlacement = l.HorizontalPlacement = WidgetPlacement.Center;  					l.Margin = new WidgetSpacing (5' 4' 5' 4);    					popup2.Content = l;  				}  				if (!popup2.Visible) {  					btn2.Label = "Hide custom Tooltip Window";  					popup2.Show ();  				} else {  					btn2.Label = "Show custom Tooltip Window";  					popup2.Hide ();  				}  			};
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,OnDraw,The following statement contains a magic number: if (yrangeChanged) { 				FixOrigins (); 				double right = rwidth - 2 - AreaBorderWidth; 				left = AreaBorderWidth; 				left += MeasureAxisSize (ctx' AxisPosition.Left) + 1; 				right -= MeasureAxisSize (ctx' AxisPosition.Right) + 1; 				yrangeChanged = false; 				width = right - left + 1; 				if (width <= 0) width = 1; 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,OnDraw,The following statement contains a magic number: if (xrangeChanged) { 				FixOrigins (); 				double bottom = rheight - 2 - AreaBorderWidth; 				top = AreaBorderWidth; 				bottom -= MeasureAxisSize (ctx' AxisPosition.Bottom); 				top += MeasureAxisSize (ctx' AxisPosition.Top); 				 				// Make room for cursor handles 				foreach (ChartCursor cursor in cursors) { 					if (cursor.Dimension == AxisDimension.X && top - AreaBorderWidth < cursor.HandleSize) 						top = cursor.HandleSize + AreaBorderWidth; 				} 				 				xrangeChanged = false; 				height = bottom - top + 1; 				if (height <= 0) height = 1; 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,OnDraw,The following statement contains a magic number: if (backgroundDisplay == BackgroundDisplay.Gradient) { 				ctx.Rectangle (left - 1' top - 1' width + 2' height + 2); 				Gradient pat = new LinearGradient (left - 1' top - 1' left - 1' height + 2); 				pat.AddColorStop (0' backroundColor); 				Color endc = new Color (1'1'1); 				pat.AddColorStop (1' endc); 				ctx.Pattern = pat; 				ctx.Fill (); 			} else { 				ctx.Rectangle (left - 1' top - 1' width + 2' height + 2); 				ctx.SetColor (backroundColor); 				ctx.Fill (); 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,OnDraw,The following statement contains a magic number: if (backgroundDisplay == BackgroundDisplay.Gradient) { 				ctx.Rectangle (left - 1' top - 1' width + 2' height + 2); 				Gradient pat = new LinearGradient (left - 1' top - 1' left - 1' height + 2); 				pat.AddColorStop (0' backroundColor); 				Color endc = new Color (1'1'1); 				pat.AddColorStop (1' endc); 				ctx.Pattern = pat; 				ctx.Fill (); 			} else { 				ctx.Rectangle (left - 1' top - 1' width + 2' height + 2); 				ctx.SetColor (backroundColor); 				ctx.Fill (); 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,OnDraw,The following statement contains a magic number: if (backgroundDisplay == BackgroundDisplay.Gradient) { 				ctx.Rectangle (left - 1' top - 1' width + 2' height + 2); 				Gradient pat = new LinearGradient (left - 1' top - 1' left - 1' height + 2); 				pat.AddColorStop (0' backroundColor); 				Color endc = new Color (1'1'1); 				pat.AddColorStop (1' endc); 				ctx.Pattern = pat; 				ctx.Fill (); 			} else { 				ctx.Rectangle (left - 1' top - 1' width + 2' height + 2); 				ctx.SetColor (backroundColor); 				ctx.Fill (); 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,OnDraw,The following statement contains a magic number: if (backgroundDisplay == BackgroundDisplay.Gradient) { 				ctx.Rectangle (left - 1' top - 1' width + 2' height + 2); 				Gradient pat = new LinearGradient (left - 1' top - 1' left - 1' height + 2); 				pat.AddColorStop (0' backroundColor); 				Color endc = new Color (1'1'1); 				pat.AddColorStop (1' endc); 				ctx.Pattern = pat; 				ctx.Fill (); 			} else { 				ctx.Rectangle (left - 1' top - 1' width + 2' height + 2); 				ctx.SetColor (backroundColor); 				ctx.Fill (); 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,OnDraw,The following statement contains a magic number: if (backgroundDisplay == BackgroundDisplay.Gradient) { 				ctx.Rectangle (left - 1' top - 1' width + 2' height + 2); 				Gradient pat = new LinearGradient (left - 1' top - 1' left - 1' height + 2); 				pat.AddColorStop (0' backroundColor); 				Color endc = new Color (1'1'1); 				pat.AddColorStop (1' endc); 				ctx.Pattern = pat; 				ctx.Fill (); 			} else { 				ctx.Rectangle (left - 1' top - 1' width + 2' height + 2); 				ctx.SetColor (backroundColor); 				ctx.Fill (); 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,OnDraw,The following statement contains a magic number: ctx.Rectangle (left - AreaBorderWidth' top - AreaBorderWidth' width + AreaBorderWidth*2' height + AreaBorderWidth*2);
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,OnDraw,The following statement contains a magic number: ctx.Rectangle (left - AreaBorderWidth' top - AreaBorderWidth' width + AreaBorderWidth*2' height + AreaBorderWidth*2);
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawAxis,The following statement contains a magic number: TickEnumerator enumBig = ax.GetTickEnumerator (minStep * 2);
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawAxis,The following statement contains a magic number: if (enumBig == null) { 				DrawTicks (ctx' enumSmall' ax.Position' ax.Dimension' ax.TickSize' ax.ShowLabels); 			} else { 				DrawTicks (ctx' enumSmall' ax.Position' ax.Dimension' ax.TickSize / 2' false); 				DrawTicks (ctx' enumBig' ax.Position' ax.Dimension' ax.TickSize' ax.ShowLabels); 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,The following statement contains a magic number: if (isX) { 				lastPosLabel = reverseXAxis ? left + width + MinLabelGapX : left - MinLabelGapX; 				lastPos = left - minTickStep*2; 			} 			else { 				lastPosLabel = reverseYAxis ? top - MinLabelGapY : rheight + MinLabelGapY; 				lastPos = top + height + minTickStep*2; 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,The following statement contains a magic number: if (isX) { 				lastPosLabel = reverseXAxis ? left + width + MinLabelGapX : left - MinLabelGapX; 				lastPos = left - minTickStep*2; 			} 			else { 				lastPosLabel = reverseYAxis ? top - MinLabelGapY : rheight + MinLabelGapY; 				lastPos = top + height + minTickStep*2; 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,The following statement contains a magic number: for ( ; e.CurrentValue <= end; e.MoveNext ()) 			{ 				double px' py; 				double tw = 0' th = 0; 				int tick = tickSize; 				 				GetPoint (e.CurrentValue' e.CurrentValue' out px' out py); 				 				if (showLabels) { 					layout.Text = e.CurrentLabel; 					var ts = layout.GetSize (); 					tw = ts.Width; 					th = ts.Height; 				}  				if (isX) { 					if (Math.Abs ((long)px - (long)lastPos) < minTickStep || px < left || px > left + width) 						continue; 					lastPos = px; 					 					bool labelFits = false; 					if ((Math.Abs (px - lastPosLabel) - (tw/2) - (lastTw/2)) >= MinLabelGapX) { 						lastPosLabel = px; 						lastTw = tw; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top - AreaBorderWidth - th); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top); 						ctx.LineTo (px' top + tick); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top + height + AreaBorderWidth); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top + height); 						ctx.LineTo (px' top + height - tick); 						ctx.Stroke (); 					} 				} 				else {  					if (Math.Abs ((long)lastPos - (long)py) < minTickStep || py < top || py > top + height)  						continue;  					lastPos = py; 					 					bool labelFits = false; 					if ((Math.Abs (py - lastPosLabel) - (th/2) - (lastTw/2)) >= MinLabelGapY) { 						lastPosLabel = py; 						lastTw = th; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left + width + AreaBorderWidth + 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left + width' py); 						ctx.LineTo (left + width - tick' py); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left - AreaBorderWidth - tw - 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left' py); 						ctx.LineTo (left + tick' py); 						ctx.Stroke (); 					} 				} 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,The following statement contains a magic number: for ( ; e.CurrentValue <= end; e.MoveNext ()) 			{ 				double px' py; 				double tw = 0' th = 0; 				int tick = tickSize; 				 				GetPoint (e.CurrentValue' e.CurrentValue' out px' out py); 				 				if (showLabels) { 					layout.Text = e.CurrentLabel; 					var ts = layout.GetSize (); 					tw = ts.Width; 					th = ts.Height; 				}  				if (isX) { 					if (Math.Abs ((long)px - (long)lastPos) < minTickStep || px < left || px > left + width) 						continue; 					lastPos = px; 					 					bool labelFits = false; 					if ((Math.Abs (px - lastPosLabel) - (tw/2) - (lastTw/2)) >= MinLabelGapX) { 						lastPosLabel = px; 						lastTw = tw; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top - AreaBorderWidth - th); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top); 						ctx.LineTo (px' top + tick); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top + height + AreaBorderWidth); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top + height); 						ctx.LineTo (px' top + height - tick); 						ctx.Stroke (); 					} 				} 				else {  					if (Math.Abs ((long)lastPos - (long)py) < minTickStep || py < top || py > top + height)  						continue;  					lastPos = py; 					 					bool labelFits = false; 					if ((Math.Abs (py - lastPosLabel) - (th/2) - (lastTw/2)) >= MinLabelGapY) { 						lastPosLabel = py; 						lastTw = th; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left + width + AreaBorderWidth + 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left + width' py); 						ctx.LineTo (left + width - tick' py); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left - AreaBorderWidth - tw - 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left' py); 						ctx.LineTo (left + tick' py); 						ctx.Stroke (); 					} 				} 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,The following statement contains a magic number: for ( ; e.CurrentValue <= end; e.MoveNext ()) 			{ 				double px' py; 				double tw = 0' th = 0; 				int tick = tickSize; 				 				GetPoint (e.CurrentValue' e.CurrentValue' out px' out py); 				 				if (showLabels) { 					layout.Text = e.CurrentLabel; 					var ts = layout.GetSize (); 					tw = ts.Width; 					th = ts.Height; 				}  				if (isX) { 					if (Math.Abs ((long)px - (long)lastPos) < minTickStep || px < left || px > left + width) 						continue; 					lastPos = px; 					 					bool labelFits = false; 					if ((Math.Abs (px - lastPosLabel) - (tw/2) - (lastTw/2)) >= MinLabelGapX) { 						lastPosLabel = px; 						lastTw = tw; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top - AreaBorderWidth - th); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top); 						ctx.LineTo (px' top + tick); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top + height + AreaBorderWidth); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top + height); 						ctx.LineTo (px' top + height - tick); 						ctx.Stroke (); 					} 				} 				else {  					if (Math.Abs ((long)lastPos - (long)py) < minTickStep || py < top || py > top + height)  						continue;  					lastPos = py; 					 					bool labelFits = false; 					if ((Math.Abs (py - lastPosLabel) - (th/2) - (lastTw/2)) >= MinLabelGapY) { 						lastPosLabel = py; 						lastTw = th; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left + width + AreaBorderWidth + 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left + width' py); 						ctx.LineTo (left + width - tick' py); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left - AreaBorderWidth - tw - 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left' py); 						ctx.LineTo (left + tick' py); 						ctx.Stroke (); 					} 				} 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,The following statement contains a magic number: for ( ; e.CurrentValue <= end; e.MoveNext ()) 			{ 				double px' py; 				double tw = 0' th = 0; 				int tick = tickSize; 				 				GetPoint (e.CurrentValue' e.CurrentValue' out px' out py); 				 				if (showLabels) { 					layout.Text = e.CurrentLabel; 					var ts = layout.GetSize (); 					tw = ts.Width; 					th = ts.Height; 				}  				if (isX) { 					if (Math.Abs ((long)px - (long)lastPos) < minTickStep || px < left || px > left + width) 						continue; 					lastPos = px; 					 					bool labelFits = false; 					if ((Math.Abs (px - lastPosLabel) - (tw/2) - (lastTw/2)) >= MinLabelGapX) { 						lastPosLabel = px; 						lastTw = tw; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top - AreaBorderWidth - th); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top); 						ctx.LineTo (px' top + tick); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top + height + AreaBorderWidth); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top + height); 						ctx.LineTo (px' top + height - tick); 						ctx.Stroke (); 					} 				} 				else {  					if (Math.Abs ((long)lastPos - (long)py) < minTickStep || py < top || py > top + height)  						continue;  					lastPos = py; 					 					bool labelFits = false; 					if ((Math.Abs (py - lastPosLabel) - (th/2) - (lastTw/2)) >= MinLabelGapY) { 						lastPosLabel = py; 						lastTw = th; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left + width + AreaBorderWidth + 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left + width' py); 						ctx.LineTo (left + width - tick' py); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left - AreaBorderWidth - tw - 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left' py); 						ctx.LineTo (left + tick' py); 						ctx.Stroke (); 					} 				} 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,The following statement contains a magic number: for ( ; e.CurrentValue <= end; e.MoveNext ()) 			{ 				double px' py; 				double tw = 0' th = 0; 				int tick = tickSize; 				 				GetPoint (e.CurrentValue' e.CurrentValue' out px' out py); 				 				if (showLabels) { 					layout.Text = e.CurrentLabel; 					var ts = layout.GetSize (); 					tw = ts.Width; 					th = ts.Height; 				}  				if (isX) { 					if (Math.Abs ((long)px - (long)lastPos) < minTickStep || px < left || px > left + width) 						continue; 					lastPos = px; 					 					bool labelFits = false; 					if ((Math.Abs (px - lastPosLabel) - (tw/2) - (lastTw/2)) >= MinLabelGapX) { 						lastPosLabel = px; 						lastTw = tw; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top - AreaBorderWidth - th); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top); 						ctx.LineTo (px' top + tick); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top + height + AreaBorderWidth); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top + height); 						ctx.LineTo (px' top + height - tick); 						ctx.Stroke (); 					} 				} 				else {  					if (Math.Abs ((long)lastPos - (long)py) < minTickStep || py < top || py > top + height)  						continue;  					lastPos = py; 					 					bool labelFits = false; 					if ((Math.Abs (py - lastPosLabel) - (th/2) - (lastTw/2)) >= MinLabelGapY) { 						lastPosLabel = py; 						lastTw = th; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left + width + AreaBorderWidth + 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left + width' py); 						ctx.LineTo (left + width - tick' py); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left - AreaBorderWidth - tw - 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left' py); 						ctx.LineTo (left + tick' py); 						ctx.Stroke (); 					} 				} 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,The following statement contains a magic number: for ( ; e.CurrentValue <= end; e.MoveNext ()) 			{ 				double px' py; 				double tw = 0' th = 0; 				int tick = tickSize; 				 				GetPoint (e.CurrentValue' e.CurrentValue' out px' out py); 				 				if (showLabels) { 					layout.Text = e.CurrentLabel; 					var ts = layout.GetSize (); 					tw = ts.Width; 					th = ts.Height; 				}  				if (isX) { 					if (Math.Abs ((long)px - (long)lastPos) < minTickStep || px < left || px > left + width) 						continue; 					lastPos = px; 					 					bool labelFits = false; 					if ((Math.Abs (px - lastPosLabel) - (tw/2) - (lastTw/2)) >= MinLabelGapX) { 						lastPosLabel = px; 						lastTw = tw; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top - AreaBorderWidth - th); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top); 						ctx.LineTo (px' top + tick); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top + height + AreaBorderWidth); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top + height); 						ctx.LineTo (px' top + height - tick); 						ctx.Stroke (); 					} 				} 				else {  					if (Math.Abs ((long)lastPos - (long)py) < minTickStep || py < top || py > top + height)  						continue;  					lastPos = py; 					 					bool labelFits = false; 					if ((Math.Abs (py - lastPosLabel) - (th/2) - (lastTw/2)) >= MinLabelGapY) { 						lastPosLabel = py; 						lastTw = th; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left + width + AreaBorderWidth + 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left + width' py); 						ctx.LineTo (left + width - tick' py); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left - AreaBorderWidth - tw - 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left' py); 						ctx.LineTo (left + tick' py); 						ctx.Stroke (); 					} 				} 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,The following statement contains a magic number: for ( ; e.CurrentValue <= end; e.MoveNext ()) 			{ 				double px' py; 				double tw = 0' th = 0; 				int tick = tickSize; 				 				GetPoint (e.CurrentValue' e.CurrentValue' out px' out py); 				 				if (showLabels) { 					layout.Text = e.CurrentLabel; 					var ts = layout.GetSize (); 					tw = ts.Width; 					th = ts.Height; 				}  				if (isX) { 					if (Math.Abs ((long)px - (long)lastPos) < minTickStep || px < left || px > left + width) 						continue; 					lastPos = px; 					 					bool labelFits = false; 					if ((Math.Abs (px - lastPosLabel) - (tw/2) - (lastTw/2)) >= MinLabelGapX) { 						lastPosLabel = px; 						lastTw = tw; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top - AreaBorderWidth - th); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top); 						ctx.LineTo (px' top + tick); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top + height + AreaBorderWidth); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top + height); 						ctx.LineTo (px' top + height - tick); 						ctx.Stroke (); 					} 				} 				else {  					if (Math.Abs ((long)lastPos - (long)py) < minTickStep || py < top || py > top + height)  						continue;  					lastPos = py; 					 					bool labelFits = false; 					if ((Math.Abs (py - lastPosLabel) - (th/2) - (lastTw/2)) >= MinLabelGapY) { 						lastPosLabel = py; 						lastTw = th; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left + width + AreaBorderWidth + 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left + width' py); 						ctx.LineTo (left + width - tick' py); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left - AreaBorderWidth - tw - 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left' py); 						ctx.LineTo (left + tick' py); 						ctx.Stroke (); 					} 				} 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,The following statement contains a magic number: for ( ; e.CurrentValue <= end; e.MoveNext ()) 			{ 				double px' py; 				double tw = 0' th = 0; 				int tick = tickSize; 				 				GetPoint (e.CurrentValue' e.CurrentValue' out px' out py); 				 				if (showLabels) { 					layout.Text = e.CurrentLabel; 					var ts = layout.GetSize (); 					tw = ts.Width; 					th = ts.Height; 				}  				if (isX) { 					if (Math.Abs ((long)px - (long)lastPos) < minTickStep || px < left || px > left + width) 						continue; 					lastPos = px; 					 					bool labelFits = false; 					if ((Math.Abs (px - lastPosLabel) - (tw/2) - (lastTw/2)) >= MinLabelGapX) { 						lastPosLabel = px; 						lastTw = tw; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top - AreaBorderWidth - th); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top); 						ctx.LineTo (px' top + tick); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top + height + AreaBorderWidth); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top + height); 						ctx.LineTo (px' top + height - tick); 						ctx.Stroke (); 					} 				} 				else {  					if (Math.Abs ((long)lastPos - (long)py) < minTickStep || py < top || py > top + height)  						continue;  					lastPos = py; 					 					bool labelFits = false; 					if ((Math.Abs (py - lastPosLabel) - (th/2) - (lastTw/2)) >= MinLabelGapY) { 						lastPosLabel = py; 						lastTw = th; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left + width + AreaBorderWidth + 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left + width' py); 						ctx.LineTo (left + width - tick' py); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left - AreaBorderWidth - tw - 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left' py); 						ctx.LineTo (left + tick' py); 						ctx.Stroke (); 					} 				} 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,The following statement contains a magic number: for ( ; e.CurrentValue <= end; e.MoveNext ()) 			{ 				double px' py; 				double tw = 0' th = 0; 				int tick = tickSize; 				 				GetPoint (e.CurrentValue' e.CurrentValue' out px' out py); 				 				if (showLabels) { 					layout.Text = e.CurrentLabel; 					var ts = layout.GetSize (); 					tw = ts.Width; 					th = ts.Height; 				}  				if (isX) { 					if (Math.Abs ((long)px - (long)lastPos) < minTickStep || px < left || px > left + width) 						continue; 					lastPos = px; 					 					bool labelFits = false; 					if ((Math.Abs (px - lastPosLabel) - (tw/2) - (lastTw/2)) >= MinLabelGapX) { 						lastPosLabel = px; 						lastTw = tw; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top - AreaBorderWidth - th); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top); 						ctx.LineTo (px' top + tick); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top + height + AreaBorderWidth); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top + height); 						ctx.LineTo (px' top + height - tick); 						ctx.Stroke (); 					} 				} 				else {  					if (Math.Abs ((long)lastPos - (long)py) < minTickStep || py < top || py > top + height)  						continue;  					lastPos = py; 					 					bool labelFits = false; 					if ((Math.Abs (py - lastPosLabel) - (th/2) - (lastTw/2)) >= MinLabelGapY) { 						lastPosLabel = py; 						lastTw = th; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left + width + AreaBorderWidth + 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left + width' py); 						ctx.LineTo (left + width - tick' py); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left - AreaBorderWidth - tw - 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left' py); 						ctx.LineTo (left + tick' py); 						ctx.Stroke (); 					} 				} 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,The following statement contains a magic number: for ( ; e.CurrentValue <= end; e.MoveNext ()) 			{ 				double px' py; 				double tw = 0' th = 0; 				int tick = tickSize; 				 				GetPoint (e.CurrentValue' e.CurrentValue' out px' out py); 				 				if (showLabels) { 					layout.Text = e.CurrentLabel; 					var ts = layout.GetSize (); 					tw = ts.Width; 					th = ts.Height; 				}  				if (isX) { 					if (Math.Abs ((long)px - (long)lastPos) < minTickStep || px < left || px > left + width) 						continue; 					lastPos = px; 					 					bool labelFits = false; 					if ((Math.Abs (px - lastPosLabel) - (tw/2) - (lastTw/2)) >= MinLabelGapX) { 						lastPosLabel = px; 						lastTw = tw; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top - AreaBorderWidth - th); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top); 						ctx.LineTo (px' top + tick); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top + height + AreaBorderWidth); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top + height); 						ctx.LineTo (px' top + height - tick); 						ctx.Stroke (); 					} 				} 				else {  					if (Math.Abs ((long)lastPos - (long)py) < minTickStep || py < top || py > top + height)  						continue;  					lastPos = py; 					 					bool labelFits = false; 					if ((Math.Abs (py - lastPosLabel) - (th/2) - (lastTw/2)) >= MinLabelGapY) { 						lastPosLabel = py; 						lastTw = th; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left + width + AreaBorderWidth + 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left + width' py); 						ctx.LineTo (left + width - tick' py); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left - AreaBorderWidth - tw - 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left' py); 						ctx.LineTo (left + tick' py); 						ctx.Stroke (); 					} 				} 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,The following statement contains a magic number: for ( ; e.CurrentValue <= end; e.MoveNext ()) 			{ 				double px' py; 				double tw = 0' th = 0; 				int tick = tickSize; 				 				GetPoint (e.CurrentValue' e.CurrentValue' out px' out py); 				 				if (showLabels) { 					layout.Text = e.CurrentLabel; 					var ts = layout.GetSize (); 					tw = ts.Width; 					th = ts.Height; 				}  				if (isX) { 					if (Math.Abs ((long)px - (long)lastPos) < minTickStep || px < left || px > left + width) 						continue; 					lastPos = px; 					 					bool labelFits = false; 					if ((Math.Abs (px - lastPosLabel) - (tw/2) - (lastTw/2)) >= MinLabelGapX) { 						lastPosLabel = px; 						lastTw = tw; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top - AreaBorderWidth - th); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top); 						ctx.LineTo (px' top + tick); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top + height + AreaBorderWidth); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top + height); 						ctx.LineTo (px' top + height - tick); 						ctx.Stroke (); 					} 				} 				else {  					if (Math.Abs ((long)lastPos - (long)py) < minTickStep || py < top || py > top + height)  						continue;  					lastPos = py; 					 					bool labelFits = false; 					if ((Math.Abs (py - lastPosLabel) - (th/2) - (lastTw/2)) >= MinLabelGapY) { 						lastPosLabel = py; 						lastTw = th; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left + width + AreaBorderWidth + 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left + width' py); 						ctx.LineTo (left + width - tick' py); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left - AreaBorderWidth - tw - 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left' py); 						ctx.LineTo (left + tick' py); 						ctx.Stroke (); 					} 				} 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,The following statement contains a magic number: for ( ; e.CurrentValue <= end; e.MoveNext ()) 			{ 				double px' py; 				double tw = 0' th = 0; 				int tick = tickSize; 				 				GetPoint (e.CurrentValue' e.CurrentValue' out px' out py); 				 				if (showLabels) { 					layout.Text = e.CurrentLabel; 					var ts = layout.GetSize (); 					tw = ts.Width; 					th = ts.Height; 				}  				if (isX) { 					if (Math.Abs ((long)px - (long)lastPos) < minTickStep || px < left || px > left + width) 						continue; 					lastPos = px; 					 					bool labelFits = false; 					if ((Math.Abs (px - lastPosLabel) - (tw/2) - (lastTw/2)) >= MinLabelGapX) { 						lastPosLabel = px; 						lastTw = tw; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top - AreaBorderWidth - th); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top); 						ctx.LineTo (px' top + tick); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' px - (tw/2)' top + height + AreaBorderWidth); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (px' top + height); 						ctx.LineTo (px' top + height - tick); 						ctx.Stroke (); 					} 				} 				else {  					if (Math.Abs ((long)lastPos - (long)py) < minTickStep || py < top || py > top + height)  						continue;  					lastPos = py; 					 					bool labelFits = false; 					if ((Math.Abs (py - lastPosLabel) - (th/2) - (lastTw/2)) >= MinLabelGapY) { 						lastPosLabel = py; 						lastTw = th; 						labelFits = true; 					} 					 					if (isTop) { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left + width + AreaBorderWidth + 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left + width' py); 						ctx.LineTo (left + width - tick' py); 						ctx.Stroke (); 					} 					else { 						if (showLabels) { 							if (labelFits) 								ctx.DrawTextLayout (layout' left - AreaBorderWidth - tw - 1' py - (th/2)); 							else 								tick = tick / 2; 						} 						ctx.MoveTo (left' py); 						ctx.LineTo (left + tick' py); 						ctx.Stroke (); 					} 				} 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,MeasureAxisSize,The following statement contains a magic number: TickEnumerator enumBig = ax.GetTickEnumerator (minStep * 2);
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursor,The following statement contains a magic number: if (cursor.Dimension == AxisDimension.X) { 				double cy = top - AreaBorderWidth - 1; 				ctx.MoveTo (x' cy); 				ctx.LineTo (x + (cursor.HandleSize/2)' cy - cursor.HandleSize + 1); 				ctx.LineTo (x - (cursor.HandleSize/2)' cy - cursor.HandleSize + 1); 				ctx.ClosePath (); 				if (activeCursor == cursor) 					ctx.FillPreserve (); 				ctx.Stroke (); 				ctx.MoveTo (x' top); 				ctx.RelLineTo (0' height); 				ctx.Stroke (); 			} else { 				throw new NotSupportedException (); 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursor,The following statement contains a magic number: if (cursor.Dimension == AxisDimension.X) { 				double cy = top - AreaBorderWidth - 1; 				ctx.MoveTo (x' cy); 				ctx.LineTo (x + (cursor.HandleSize/2)' cy - cursor.HandleSize + 1); 				ctx.LineTo (x - (cursor.HandleSize/2)' cy - cursor.HandleSize + 1); 				ctx.ClosePath (); 				if (activeCursor == cursor) 					ctx.FillPreserve (); 				ctx.Stroke (); 				ctx.MoveTo (x' top); 				ctx.RelLineTo (0' height); 				ctx.Stroke (); 			} else { 				throw new NotSupportedException (); 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursorLabel,The following statement contains a magic number: if (cursor.Dimension == AxisDimension.X) { 			 				string text; 				 				if (cursor.LabelAxis != null) { 					double minStep = GetMinTickStep (cursor.Dimension); 					TickEnumerator tenum = cursor.LabelAxis.GetTickEnumerator (minStep); 					tenum.Init (cursor.Value); 					text = tenum.CurrentLabel; 				} else { 					text = GetValueLabel (cursor.Dimension' cursor.Value); 				} 				 				if (text != null && text.Length > 0) { 					TextLayout layout = new TextLayout (); 					layout.Font = chartFont; 					layout.Text = text; 					 					Size ts = layout.GetSize (); 					double tl = x - ts.Width/2; 					double tt = top + 4; 					if (tl + ts.Width + 2 >= left + width) tl = left + width - ts.Width - 1; 					if (tl < left + 1) tl = left + 1; 					ctx.SetColor (Colors.White); 					ctx.Rectangle (tl - 1' tt - 1' ts.Width + 2' ts.Height + 2); 					ctx.Fill (); 					ctx.Rectangle (tl - 2' tt - 2' ts.Width + 3' ts.Height + 3); 					ctx.SetColor (Colors.Black); 					ctx.DrawTextLayout (layout' tl' tt); 				} 			} else { 				throw new NotSupportedException (); 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursorLabel,The following statement contains a magic number: if (cursor.Dimension == AxisDimension.X) { 			 				string text; 				 				if (cursor.LabelAxis != null) { 					double minStep = GetMinTickStep (cursor.Dimension); 					TickEnumerator tenum = cursor.LabelAxis.GetTickEnumerator (minStep); 					tenum.Init (cursor.Value); 					text = tenum.CurrentLabel; 				} else { 					text = GetValueLabel (cursor.Dimension' cursor.Value); 				} 				 				if (text != null && text.Length > 0) { 					TextLayout layout = new TextLayout (); 					layout.Font = chartFont; 					layout.Text = text; 					 					Size ts = layout.GetSize (); 					double tl = x - ts.Width/2; 					double tt = top + 4; 					if (tl + ts.Width + 2 >= left + width) tl = left + width - ts.Width - 1; 					if (tl < left + 1) tl = left + 1; 					ctx.SetColor (Colors.White); 					ctx.Rectangle (tl - 1' tt - 1' ts.Width + 2' ts.Height + 2); 					ctx.Fill (); 					ctx.Rectangle (tl - 2' tt - 2' ts.Width + 3' ts.Height + 3); 					ctx.SetColor (Colors.Black); 					ctx.DrawTextLayout (layout' tl' tt); 				} 			} else { 				throw new NotSupportedException (); 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursorLabel,The following statement contains a magic number: if (cursor.Dimension == AxisDimension.X) { 			 				string text; 				 				if (cursor.LabelAxis != null) { 					double minStep = GetMinTickStep (cursor.Dimension); 					TickEnumerator tenum = cursor.LabelAxis.GetTickEnumerator (minStep); 					tenum.Init (cursor.Value); 					text = tenum.CurrentLabel; 				} else { 					text = GetValueLabel (cursor.Dimension' cursor.Value); 				} 				 				if (text != null && text.Length > 0) { 					TextLayout layout = new TextLayout (); 					layout.Font = chartFont; 					layout.Text = text; 					 					Size ts = layout.GetSize (); 					double tl = x - ts.Width/2; 					double tt = top + 4; 					if (tl + ts.Width + 2 >= left + width) tl = left + width - ts.Width - 1; 					if (tl < left + 1) tl = left + 1; 					ctx.SetColor (Colors.White); 					ctx.Rectangle (tl - 1' tt - 1' ts.Width + 2' ts.Height + 2); 					ctx.Fill (); 					ctx.Rectangle (tl - 2' tt - 2' ts.Width + 3' ts.Height + 3); 					ctx.SetColor (Colors.Black); 					ctx.DrawTextLayout (layout' tl' tt); 				} 			} else { 				throw new NotSupportedException (); 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursorLabel,The following statement contains a magic number: if (cursor.Dimension == AxisDimension.X) { 			 				string text; 				 				if (cursor.LabelAxis != null) { 					double minStep = GetMinTickStep (cursor.Dimension); 					TickEnumerator tenum = cursor.LabelAxis.GetTickEnumerator (minStep); 					tenum.Init (cursor.Value); 					text = tenum.CurrentLabel; 				} else { 					text = GetValueLabel (cursor.Dimension' cursor.Value); 				} 				 				if (text != null && text.Length > 0) { 					TextLayout layout = new TextLayout (); 					layout.Font = chartFont; 					layout.Text = text; 					 					Size ts = layout.GetSize (); 					double tl = x - ts.Width/2; 					double tt = top + 4; 					if (tl + ts.Width + 2 >= left + width) tl = left + width - ts.Width - 1; 					if (tl < left + 1) tl = left + 1; 					ctx.SetColor (Colors.White); 					ctx.Rectangle (tl - 1' tt - 1' ts.Width + 2' ts.Height + 2); 					ctx.Fill (); 					ctx.Rectangle (tl - 2' tt - 2' ts.Width + 3' ts.Height + 3); 					ctx.SetColor (Colors.Black); 					ctx.DrawTextLayout (layout' tl' tt); 				} 			} else { 				throw new NotSupportedException (); 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursorLabel,The following statement contains a magic number: if (cursor.Dimension == AxisDimension.X) { 			 				string text; 				 				if (cursor.LabelAxis != null) { 					double minStep = GetMinTickStep (cursor.Dimension); 					TickEnumerator tenum = cursor.LabelAxis.GetTickEnumerator (minStep); 					tenum.Init (cursor.Value); 					text = tenum.CurrentLabel; 				} else { 					text = GetValueLabel (cursor.Dimension' cursor.Value); 				} 				 				if (text != null && text.Length > 0) { 					TextLayout layout = new TextLayout (); 					layout.Font = chartFont; 					layout.Text = text; 					 					Size ts = layout.GetSize (); 					double tl = x - ts.Width/2; 					double tt = top + 4; 					if (tl + ts.Width + 2 >= left + width) tl = left + width - ts.Width - 1; 					if (tl < left + 1) tl = left + 1; 					ctx.SetColor (Colors.White); 					ctx.Rectangle (tl - 1' tt - 1' ts.Width + 2' ts.Height + 2); 					ctx.Fill (); 					ctx.Rectangle (tl - 2' tt - 2' ts.Width + 3' ts.Height + 3); 					ctx.SetColor (Colors.Black); 					ctx.DrawTextLayout (layout' tl' tt); 				} 			} else { 				throw new NotSupportedException (); 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursorLabel,The following statement contains a magic number: if (cursor.Dimension == AxisDimension.X) { 			 				string text; 				 				if (cursor.LabelAxis != null) { 					double minStep = GetMinTickStep (cursor.Dimension); 					TickEnumerator tenum = cursor.LabelAxis.GetTickEnumerator (minStep); 					tenum.Init (cursor.Value); 					text = tenum.CurrentLabel; 				} else { 					text = GetValueLabel (cursor.Dimension' cursor.Value); 				} 				 				if (text != null && text.Length > 0) { 					TextLayout layout = new TextLayout (); 					layout.Font = chartFont; 					layout.Text = text; 					 					Size ts = layout.GetSize (); 					double tl = x - ts.Width/2; 					double tt = top + 4; 					if (tl + ts.Width + 2 >= left + width) tl = left + width - ts.Width - 1; 					if (tl < left + 1) tl = left + 1; 					ctx.SetColor (Colors.White); 					ctx.Rectangle (tl - 1' tt - 1' ts.Width + 2' ts.Height + 2); 					ctx.Fill (); 					ctx.Rectangle (tl - 2' tt - 2' ts.Width + 3' ts.Height + 3); 					ctx.SetColor (Colors.Black); 					ctx.DrawTextLayout (layout' tl' tt); 				} 			} else { 				throw new NotSupportedException (); 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursorLabel,The following statement contains a magic number: if (cursor.Dimension == AxisDimension.X) { 			 				string text; 				 				if (cursor.LabelAxis != null) { 					double minStep = GetMinTickStep (cursor.Dimension); 					TickEnumerator tenum = cursor.LabelAxis.GetTickEnumerator (minStep); 					tenum.Init (cursor.Value); 					text = tenum.CurrentLabel; 				} else { 					text = GetValueLabel (cursor.Dimension' cursor.Value); 				} 				 				if (text != null && text.Length > 0) { 					TextLayout layout = new TextLayout (); 					layout.Font = chartFont; 					layout.Text = text; 					 					Size ts = layout.GetSize (); 					double tl = x - ts.Width/2; 					double tt = top + 4; 					if (tl + ts.Width + 2 >= left + width) tl = left + width - ts.Width - 1; 					if (tl < left + 1) tl = left + 1; 					ctx.SetColor (Colors.White); 					ctx.Rectangle (tl - 1' tt - 1' ts.Width + 2' ts.Height + 2); 					ctx.Fill (); 					ctx.Rectangle (tl - 2' tt - 2' ts.Width + 3' ts.Height + 3); 					ctx.SetColor (Colors.Black); 					ctx.DrawTextLayout (layout' tl' tt); 				} 			} else { 				throw new NotSupportedException (); 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursorLabel,The following statement contains a magic number: if (cursor.Dimension == AxisDimension.X) { 			 				string text; 				 				if (cursor.LabelAxis != null) { 					double minStep = GetMinTickStep (cursor.Dimension); 					TickEnumerator tenum = cursor.LabelAxis.GetTickEnumerator (minStep); 					tenum.Init (cursor.Value); 					text = tenum.CurrentLabel; 				} else { 					text = GetValueLabel (cursor.Dimension' cursor.Value); 				} 				 				if (text != null && text.Length > 0) { 					TextLayout layout = new TextLayout (); 					layout.Font = chartFont; 					layout.Text = text; 					 					Size ts = layout.GetSize (); 					double tl = x - ts.Width/2; 					double tt = top + 4; 					if (tl + ts.Width + 2 >= left + width) tl = left + width - ts.Width - 1; 					if (tl < left + 1) tl = left + 1; 					ctx.SetColor (Colors.White); 					ctx.Rectangle (tl - 1' tt - 1' ts.Width + 2' ts.Height + 2); 					ctx.Fill (); 					ctx.Rectangle (tl - 2' tt - 2' ts.Width + 3' ts.Height + 3); 					ctx.SetColor (Colors.Black); 					ctx.DrawTextLayout (layout' tl' tt); 				} 			} else { 				throw new NotSupportedException (); 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursorLabel,The following statement contains a magic number: if (cursor.Dimension == AxisDimension.X) { 			 				string text; 				 				if (cursor.LabelAxis != null) { 					double minStep = GetMinTickStep (cursor.Dimension); 					TickEnumerator tenum = cursor.LabelAxis.GetTickEnumerator (minStep); 					tenum.Init (cursor.Value); 					text = tenum.CurrentLabel; 				} else { 					text = GetValueLabel (cursor.Dimension' cursor.Value); 				} 				 				if (text != null && text.Length > 0) { 					TextLayout layout = new TextLayout (); 					layout.Font = chartFont; 					layout.Text = text; 					 					Size ts = layout.GetSize (); 					double tl = x - ts.Width/2; 					double tt = top + 4; 					if (tl + ts.Width + 2 >= left + width) tl = left + width - ts.Width - 1; 					if (tl < left + 1) tl = left + 1; 					ctx.SetColor (Colors.White); 					ctx.Rectangle (tl - 1' tt - 1' ts.Width + 2' ts.Height + 2); 					ctx.Fill (); 					ctx.Rectangle (tl - 2' tt - 2' ts.Width + 3' ts.Height + 3); 					ctx.SetColor (Colors.Black); 					ctx.DrawTextLayout (layout' tl' tt); 				} 			} else { 				throw new NotSupportedException (); 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,OnButtonPressed,The following statement contains a magic number: if (ev.Button == PointerButton.Left) { 				foreach (ChartCursor cursor in cursors) { 					int cx' cy; 					GetPoint (cursor.Value' cursor.Value' out cx' out cy); 					if (cursor.Dimension == AxisDimension.X) { 						if (Math.Abs (ev.X - cx) <= 2 || (ev.Y < top && (Math.Abs (ev.X - cx) <= cursor.HandleSize/2))) { 							activeCursor = cursor; 							draggingCursor = true; 							activeCursor.ShowValueLabel = true; 							QueueDraw (); 							break; 						} 					} else { 						// Implement 					} 				} 				 				if (enableSelection && !draggingCursor) { 					selectionStart.Visible = true; 					selectionEnd.Visible = true; 					 					double x' y; 					GetValue ((int)ev.X' (int)ev.Y' out x' out y); 					// avoid cursor swaping 					ChartCursor c1 = selectionStart; 					ChartCursor c2 = selectionEnd; 					c1.Value = x; 					c2.Value = x; 					activeCursor = selectionEnd; 					activeCursor.ShowValueLabel = true; 					draggingCursor = true; 					QueueDraw (); 				} 				 				if (draggingCursor) 					return; 			}
Magic Number,MonoDevelop.Components.Chart,BasicChart,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\BasicChart.cs,OnButtonPressed,The following statement contains a magic number: if (ev.Button == PointerButton.Left) { 				foreach (ChartCursor cursor in cursors) { 					int cx' cy; 					GetPoint (cursor.Value' cursor.Value' out cx' out cy); 					if (cursor.Dimension == AxisDimension.X) { 						if (Math.Abs (ev.X - cx) <= 2 || (ev.Y < top && (Math.Abs (ev.X - cx) <= cursor.HandleSize/2))) { 							activeCursor = cursor; 							draggingCursor = true; 							activeCursor.ShowValueLabel = true; 							QueueDraw (); 							break; 						} 					} else { 						// Implement 					} 				} 				 				if (enableSelection && !draggingCursor) { 					selectionStart.Visible = true; 					selectionEnd.Visible = true; 					 					double x' y; 					GetValue ((int)ev.X' (int)ev.Y' out x' out y); 					// avoid cursor swaping 					ChartCursor c1 = selectionStart; 					ChartCursor c2 = selectionEnd; 					c1.Value = x; 					c2.Value = x; 					activeCursor = selectionEnd; 					activeCursor.ShowValueLabel = true; 					draggingCursor = true; 					QueueDraw (); 				} 				 				if (draggingCursor) 					return; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeAxis,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,CreateTickEnumerator,The following statement contains a magic number: if (val > TimeSpan.TicksPerDay * 30 * 365)  				return null;  			else if (val > TimeSpan.TicksPerDay * 30)  				scale = 7;  			else if (val > TimeSpan.TicksPerDay)  				scale = 6;  			else if (val > TimeSpan.TicksPerHour)  				scale = 5;  			else if (val > TimeSpan.TicksPerMinute * 15)  				scale = 4;  			else if (val > TimeSpan.TicksPerMinute)  				scale = 3;  			else if (val > TimeSpan.TicksPerSecond * 15)  				scale = 2;  			else if (val > TimeSpan.TicksPerSecond)  				scale = 1;  			else  				scale = 0;
Magic Number,MonoDevelop.Components.Chart,DateTimeAxis,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,CreateTickEnumerator,The following statement contains a magic number: if (val > TimeSpan.TicksPerDay * 30 * 365)  				return null;  			else if (val > TimeSpan.TicksPerDay * 30)  				scale = 7;  			else if (val > TimeSpan.TicksPerDay)  				scale = 6;  			else if (val > TimeSpan.TicksPerHour)  				scale = 5;  			else if (val > TimeSpan.TicksPerMinute * 15)  				scale = 4;  			else if (val > TimeSpan.TicksPerMinute)  				scale = 3;  			else if (val > TimeSpan.TicksPerSecond * 15)  				scale = 2;  			else if (val > TimeSpan.TicksPerSecond)  				scale = 1;  			else  				scale = 0;
Magic Number,MonoDevelop.Components.Chart,DateTimeAxis,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,CreateTickEnumerator,The following statement contains a magic number: if (val > TimeSpan.TicksPerDay * 30 * 365)  				return null;  			else if (val > TimeSpan.TicksPerDay * 30)  				scale = 7;  			else if (val > TimeSpan.TicksPerDay)  				scale = 6;  			else if (val > TimeSpan.TicksPerHour)  				scale = 5;  			else if (val > TimeSpan.TicksPerMinute * 15)  				scale = 4;  			else if (val > TimeSpan.TicksPerMinute)  				scale = 3;  			else if (val > TimeSpan.TicksPerSecond * 15)  				scale = 2;  			else if (val > TimeSpan.TicksPerSecond)  				scale = 1;  			else  				scale = 0;
Magic Number,MonoDevelop.Components.Chart,DateTimeAxis,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,CreateTickEnumerator,The following statement contains a magic number: if (val > TimeSpan.TicksPerDay * 30 * 365)  				return null;  			else if (val > TimeSpan.TicksPerDay * 30)  				scale = 7;  			else if (val > TimeSpan.TicksPerDay)  				scale = 6;  			else if (val > TimeSpan.TicksPerHour)  				scale = 5;  			else if (val > TimeSpan.TicksPerMinute * 15)  				scale = 4;  			else if (val > TimeSpan.TicksPerMinute)  				scale = 3;  			else if (val > TimeSpan.TicksPerSecond * 15)  				scale = 2;  			else if (val > TimeSpan.TicksPerSecond)  				scale = 1;  			else  				scale = 0;
Magic Number,MonoDevelop.Components.Chart,DateTimeAxis,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,CreateTickEnumerator,The following statement contains a magic number: if (val > TimeSpan.TicksPerDay * 30 * 365)  				return null;  			else if (val > TimeSpan.TicksPerDay * 30)  				scale = 7;  			else if (val > TimeSpan.TicksPerDay)  				scale = 6;  			else if (val > TimeSpan.TicksPerHour)  				scale = 5;  			else if (val > TimeSpan.TicksPerMinute * 15)  				scale = 4;  			else if (val > TimeSpan.TicksPerMinute)  				scale = 3;  			else if (val > TimeSpan.TicksPerSecond * 15)  				scale = 2;  			else if (val > TimeSpan.TicksPerSecond)  				scale = 1;  			else  				scale = 0;
Magic Number,MonoDevelop.Components.Chart,DateTimeAxis,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,CreateTickEnumerator,The following statement contains a magic number: if (val > TimeSpan.TicksPerDay * 30 * 365)  				return null;  			else if (val > TimeSpan.TicksPerDay * 30)  				scale = 7;  			else if (val > TimeSpan.TicksPerDay)  				scale = 6;  			else if (val > TimeSpan.TicksPerHour)  				scale = 5;  			else if (val > TimeSpan.TicksPerMinute * 15)  				scale = 4;  			else if (val > TimeSpan.TicksPerMinute)  				scale = 3;  			else if (val > TimeSpan.TicksPerSecond * 15)  				scale = 2;  			else if (val > TimeSpan.TicksPerSecond)  				scale = 1;  			else  				scale = 0;
Magic Number,MonoDevelop.Components.Chart,DateTimeAxis,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,CreateTickEnumerator,The following statement contains a magic number: if (val > TimeSpan.TicksPerDay * 30 * 365)  				return null;  			else if (val > TimeSpan.TicksPerDay * 30)  				scale = 7;  			else if (val > TimeSpan.TicksPerDay)  				scale = 6;  			else if (val > TimeSpan.TicksPerHour)  				scale = 5;  			else if (val > TimeSpan.TicksPerMinute * 15)  				scale = 4;  			else if (val > TimeSpan.TicksPerMinute)  				scale = 3;  			else if (val > TimeSpan.TicksPerSecond * 15)  				scale = 2;  			else if (val > TimeSpan.TicksPerSecond)  				scale = 1;  			else  				scale = 0;
Magic Number,MonoDevelop.Components.Chart,DateTimeAxis,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,CreateTickEnumerator,The following statement contains a magic number: if (val > TimeSpan.TicksPerDay * 30 * 365)  				return null;  			else if (val > TimeSpan.TicksPerDay * 30)  				scale = 7;  			else if (val > TimeSpan.TicksPerDay)  				scale = 6;  			else if (val > TimeSpan.TicksPerHour)  				scale = 5;  			else if (val > TimeSpan.TicksPerMinute * 15)  				scale = 4;  			else if (val > TimeSpan.TicksPerMinute)  				scale = 3;  			else if (val > TimeSpan.TicksPerSecond * 15)  				scale = 2;  			else if (val > TimeSpan.TicksPerSecond)  				scale = 1;  			else  				scale = 0;
Magic Number,MonoDevelop.Components.Chart,DateTimeAxis,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,CreateTickEnumerator,The following statement contains a magic number: if (val > TimeSpan.TicksPerDay * 30 * 365)  				return null;  			else if (val > TimeSpan.TicksPerDay * 30)  				scale = 7;  			else if (val > TimeSpan.TicksPerDay)  				scale = 6;  			else if (val > TimeSpan.TicksPerHour)  				scale = 5;  			else if (val > TimeSpan.TicksPerMinute * 15)  				scale = 4;  			else if (val > TimeSpan.TicksPerMinute)  				scale = 3;  			else if (val > TimeSpan.TicksPerSecond * 15)  				scale = 2;  			else if (val > TimeSpan.TicksPerSecond)  				scale = 1;  			else  				scale = 0;
Magic Number,MonoDevelop.Components.Chart,DateTimeAxis,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,CreateTickEnumerator,The following statement contains a magic number: if (val > TimeSpan.TicksPerDay * 30 * 365)  				return null;  			else if (val > TimeSpan.TicksPerDay * 30)  				scale = 7;  			else if (val > TimeSpan.TicksPerDay)  				scale = 6;  			else if (val > TimeSpan.TicksPerHour)  				scale = 5;  			else if (val > TimeSpan.TicksPerMinute * 15)  				scale = 4;  			else if (val > TimeSpan.TicksPerMinute)  				scale = 3;  			else if (val > TimeSpan.TicksPerSecond * 15)  				scale = 2;  			else if (val > TimeSpan.TicksPerSecond)  				scale = 1;  			else  				scale = 0;
Magic Number,MonoDevelop.Components.Chart,DateTimeAxis,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,CreateTickEnumerator,The following statement contains a magic number: if (val > TimeSpan.TicksPerDay * 30 * 365)  				return null;  			else if (val > TimeSpan.TicksPerDay * 30)  				scale = 7;  			else if (val > TimeSpan.TicksPerDay)  				scale = 6;  			else if (val > TimeSpan.TicksPerHour)  				scale = 5;  			else if (val > TimeSpan.TicksPerMinute * 15)  				scale = 4;  			else if (val > TimeSpan.TicksPerMinute)  				scale = 3;  			else if (val > TimeSpan.TicksPerSecond * 15)  				scale = 2;  			else if (val > TimeSpan.TicksPerSecond)  				scale = 1;  			else  				scale = 0;
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,Init,The following statement contains a magic number: switch (scale) {  				case 0: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' t.Second); break;  				case 1: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' (t.Second / 15) * 15); break;  				case 2: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' 0); break;  				case 3: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' (t.Minute / 15) * 15' 0); break;  				case 4: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' 0' 0); break;  				case 5: nt = new DateTime (t.Year' t.Month' t.Day); break;  				case 6: nt = new DateTime (t.Year' t.Month' 1); break;  				default: nt = new DateTime (t.Year' 1' 1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,Init,The following statement contains a magic number: switch (scale) {  				case 0: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' t.Second); break;  				case 1: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' (t.Second / 15) * 15); break;  				case 2: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' 0); break;  				case 3: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' (t.Minute / 15) * 15' 0); break;  				case 4: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' 0' 0); break;  				case 5: nt = new DateTime (t.Year' t.Month' t.Day); break;  				case 6: nt = new DateTime (t.Year' t.Month' 1); break;  				default: nt = new DateTime (t.Year' 1' 1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,Init,The following statement contains a magic number: switch (scale) {  				case 0: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' t.Second); break;  				case 1: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' (t.Second / 15) * 15); break;  				case 2: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' 0); break;  				case 3: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' (t.Minute / 15) * 15' 0); break;  				case 4: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' 0' 0); break;  				case 5: nt = new DateTime (t.Year' t.Month' t.Day); break;  				case 6: nt = new DateTime (t.Year' t.Month' 1); break;  				default: nt = new DateTime (t.Year' 1' 1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,Init,The following statement contains a magic number: switch (scale) {  				case 0: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' t.Second); break;  				case 1: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' (t.Second / 15) * 15); break;  				case 2: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' 0); break;  				case 3: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' (t.Minute / 15) * 15' 0); break;  				case 4: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' 0' 0); break;  				case 5: nt = new DateTime (t.Year' t.Month' t.Day); break;  				case 6: nt = new DateTime (t.Year' t.Month' 1); break;  				default: nt = new DateTime (t.Year' 1' 1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,Init,The following statement contains a magic number: switch (scale) {  				case 0: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' t.Second); break;  				case 1: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' (t.Second / 15) * 15); break;  				case 2: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' 0); break;  				case 3: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' (t.Minute / 15) * 15' 0); break;  				case 4: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' 0' 0); break;  				case 5: nt = new DateTime (t.Year' t.Month' t.Day); break;  				case 6: nt = new DateTime (t.Year' t.Month' 1); break;  				default: nt = new DateTime (t.Year' 1' 1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,Init,The following statement contains a magic number: switch (scale) {  				case 0: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' t.Second); break;  				case 1: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' (t.Second / 15) * 15); break;  				case 2: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' 0); break;  				case 3: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' (t.Minute / 15) * 15' 0); break;  				case 4: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' 0' 0); break;  				case 5: nt = new DateTime (t.Year' t.Month' t.Day); break;  				case 6: nt = new DateTime (t.Year' t.Month' 1); break;  				default: nt = new DateTime (t.Year' 1' 1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,Init,The following statement contains a magic number: switch (scale) {  				case 0: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' t.Second); break;  				case 1: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' (t.Second / 15) * 15); break;  				case 2: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' 0); break;  				case 3: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' (t.Minute / 15) * 15' 0); break;  				case 4: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' 0' 0); break;  				case 5: nt = new DateTime (t.Year' t.Month' t.Day); break;  				case 6: nt = new DateTime (t.Year' t.Month' 1); break;  				default: nt = new DateTime (t.Year' 1' 1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,Init,The following statement contains a magic number: switch (scale) {  				case 0: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' t.Second); break;  				case 1: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' (t.Second / 15) * 15); break;  				case 2: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' 0); break;  				case 3: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' (t.Minute / 15) * 15' 0); break;  				case 4: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' 0' 0); break;  				case 5: nt = new DateTime (t.Year' t.Month' t.Day); break;  				case 6: nt = new DateTime (t.Year' t.Month' 1); break;  				default: nt = new DateTime (t.Year' 1' 1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,Init,The following statement contains a magic number: switch (scale) {  				case 0: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' t.Second); break;  				case 1: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' (t.Second / 15) * 15); break;  				case 2: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' 0); break;  				case 3: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' (t.Minute / 15) * 15' 0); break;  				case 4: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' 0' 0); break;  				case 5: nt = new DateTime (t.Year' t.Month' t.Day); break;  				case 6: nt = new DateTime (t.Year' t.Month' 1); break;  				default: nt = new DateTime (t.Year' 1' 1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,MoveNext,The following statement contains a magic number: switch (scale) {  				case 0: current = current.AddSeconds (1); break;  				case 1: current = current.AddSeconds (15); break;  				case 2: current = current.AddMinutes (1); break;  				case 3: current = current.AddMinutes (15); break;  				case 4: current = current.AddHours (1); break;  				case 5: current = current.AddDays (1); break;  				case 6: current = current.AddMonths (1); break;  				case 7: current = current.AddYears (1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,MoveNext,The following statement contains a magic number: switch (scale) {  				case 0: current = current.AddSeconds (1); break;  				case 1: current = current.AddSeconds (15); break;  				case 2: current = current.AddMinutes (1); break;  				case 3: current = current.AddMinutes (15); break;  				case 4: current = current.AddHours (1); break;  				case 5: current = current.AddDays (1); break;  				case 6: current = current.AddMonths (1); break;  				case 7: current = current.AddYears (1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,MoveNext,The following statement contains a magic number: switch (scale) {  				case 0: current = current.AddSeconds (1); break;  				case 1: current = current.AddSeconds (15); break;  				case 2: current = current.AddMinutes (1); break;  				case 3: current = current.AddMinutes (15); break;  				case 4: current = current.AddHours (1); break;  				case 5: current = current.AddDays (1); break;  				case 6: current = current.AddMonths (1); break;  				case 7: current = current.AddYears (1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,MoveNext,The following statement contains a magic number: switch (scale) {  				case 0: current = current.AddSeconds (1); break;  				case 1: current = current.AddSeconds (15); break;  				case 2: current = current.AddMinutes (1); break;  				case 3: current = current.AddMinutes (15); break;  				case 4: current = current.AddHours (1); break;  				case 5: current = current.AddDays (1); break;  				case 6: current = current.AddMonths (1); break;  				case 7: current = current.AddYears (1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,MoveNext,The following statement contains a magic number: switch (scale) {  				case 0: current = current.AddSeconds (1); break;  				case 1: current = current.AddSeconds (15); break;  				case 2: current = current.AddMinutes (1); break;  				case 3: current = current.AddMinutes (15); break;  				case 4: current = current.AddHours (1); break;  				case 5: current = current.AddDays (1); break;  				case 6: current = current.AddMonths (1); break;  				case 7: current = current.AddYears (1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,MoveNext,The following statement contains a magic number: switch (scale) {  				case 0: current = current.AddSeconds (1); break;  				case 1: current = current.AddSeconds (15); break;  				case 2: current = current.AddMinutes (1); break;  				case 3: current = current.AddMinutes (15); break;  				case 4: current = current.AddHours (1); break;  				case 5: current = current.AddDays (1); break;  				case 6: current = current.AddMonths (1); break;  				case 7: current = current.AddYears (1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,MoveNext,The following statement contains a magic number: switch (scale) {  				case 0: current = current.AddSeconds (1); break;  				case 1: current = current.AddSeconds (15); break;  				case 2: current = current.AddMinutes (1); break;  				case 3: current = current.AddMinutes (15); break;  				case 4: current = current.AddHours (1); break;  				case 5: current = current.AddDays (1); break;  				case 6: current = current.AddMonths (1); break;  				case 7: current = current.AddYears (1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,MoveNext,The following statement contains a magic number: switch (scale) {  				case 0: current = current.AddSeconds (1); break;  				case 1: current = current.AddSeconds (15); break;  				case 2: current = current.AddMinutes (1); break;  				case 3: current = current.AddMinutes (15); break;  				case 4: current = current.AddHours (1); break;  				case 5: current = current.AddDays (1); break;  				case 6: current = current.AddMonths (1); break;  				case 7: current = current.AddYears (1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,MovePrevious,The following statement contains a magic number: switch (scale) {  				case 0: current = current.AddSeconds (-1); break;  				case 1: current = current.AddSeconds (-15); break;  				case 2: current = current.AddMinutes (-1); break;  				case 3: current = current.AddMinutes (-15); break;  				case 4: current = current.AddHours (-1); break;  				case 5: current = current.AddDays (-1); break;  				case 6: current = current.AddMonths (-1); break;  				case 7: current = current.AddYears (-1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,MovePrevious,The following statement contains a magic number: switch (scale) {  				case 0: current = current.AddSeconds (-1); break;  				case 1: current = current.AddSeconds (-15); break;  				case 2: current = current.AddMinutes (-1); break;  				case 3: current = current.AddMinutes (-15); break;  				case 4: current = current.AddHours (-1); break;  				case 5: current = current.AddDays (-1); break;  				case 6: current = current.AddMonths (-1); break;  				case 7: current = current.AddYears (-1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,MovePrevious,The following statement contains a magic number: switch (scale) {  				case 0: current = current.AddSeconds (-1); break;  				case 1: current = current.AddSeconds (-15); break;  				case 2: current = current.AddMinutes (-1); break;  				case 3: current = current.AddMinutes (-15); break;  				case 4: current = current.AddHours (-1); break;  				case 5: current = current.AddDays (-1); break;  				case 6: current = current.AddMonths (-1); break;  				case 7: current = current.AddYears (-1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,MovePrevious,The following statement contains a magic number: switch (scale) {  				case 0: current = current.AddSeconds (-1); break;  				case 1: current = current.AddSeconds (-15); break;  				case 2: current = current.AddMinutes (-1); break;  				case 3: current = current.AddMinutes (-15); break;  				case 4: current = current.AddHours (-1); break;  				case 5: current = current.AddDays (-1); break;  				case 6: current = current.AddMonths (-1); break;  				case 7: current = current.AddYears (-1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,MovePrevious,The following statement contains a magic number: switch (scale) {  				case 0: current = current.AddSeconds (-1); break;  				case 1: current = current.AddSeconds (-15); break;  				case 2: current = current.AddMinutes (-1); break;  				case 3: current = current.AddMinutes (-15); break;  				case 4: current = current.AddHours (-1); break;  				case 5: current = current.AddDays (-1); break;  				case 6: current = current.AddMonths (-1); break;  				case 7: current = current.AddYears (-1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,MovePrevious,The following statement contains a magic number: switch (scale) {  				case 0: current = current.AddSeconds (-1); break;  				case 1: current = current.AddSeconds (-15); break;  				case 2: current = current.AddMinutes (-1); break;  				case 3: current = current.AddMinutes (-15); break;  				case 4: current = current.AddHours (-1); break;  				case 5: current = current.AddDays (-1); break;  				case 6: current = current.AddMonths (-1); break;  				case 7: current = current.AddYears (-1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,MovePrevious,The following statement contains a magic number: switch (scale) {  				case 0: current = current.AddSeconds (-1); break;  				case 1: current = current.AddSeconds (-15); break;  				case 2: current = current.AddMinutes (-1); break;  				case 3: current = current.AddMinutes (-15); break;  				case 4: current = current.AddHours (-1); break;  				case 5: current = current.AddDays (-1); break;  				case 6: current = current.AddMonths (-1); break;  				case 7: current = current.AddYears (-1); break;  			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,MovePrevious,The following statement contains a magic number: switch (scale) {  				case 0: current = current.AddSeconds (-1); break;  				case 1: current = current.AddSeconds (-15); break;  				case 2: current = current.AddMinutes (-1); break;  				case 3: current = current.AddMinutes (-15); break;  				case 4: current = current.AddHours (-1); break;  				case 5: current = current.AddDays (-1); break;  				case 6: current = current.AddMonths (-1); break;  				case 7: current = current.AddYears (-1); break;  			}
Magic Number,MonoDevelop.Components.Chart,IntegerAxis,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\IntegerAxis.cs,CreateTickEnumerator,The following statement contains a magic number: unchecked {  				val = (long) minTickStep;  				long red = 10; 				while (val > red) 					red = red * 10; 				 				long scale; 				 				if (val <= 1) 					scale = 1; 				else if (val > red / 2) 					scale = red; 				else if (val > red / 4) 					scale = red / 2; 				else 					scale = red / 4; 				return new IntegerTickEnumerator (scale);  			}
Magic Number,MonoDevelop.Components.Chart,IntegerAxis,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\IntegerAxis.cs,CreateTickEnumerator,The following statement contains a magic number: unchecked {  				val = (long) minTickStep;  				long red = 10; 				while (val > red) 					red = red * 10; 				 				long scale; 				 				if (val <= 1) 					scale = 1; 				else if (val > red / 2) 					scale = red; 				else if (val > red / 4) 					scale = red / 2; 				else 					scale = red / 4; 				return new IntegerTickEnumerator (scale);  			}
Magic Number,MonoDevelop.Components.Chart,IntegerAxis,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\IntegerAxis.cs,CreateTickEnumerator,The following statement contains a magic number: unchecked {  				val = (long) minTickStep;  				long red = 10; 				while (val > red) 					red = red * 10; 				 				long scale; 				 				if (val <= 1) 					scale = 1; 				else if (val > red / 2) 					scale = red; 				else if (val > red / 4) 					scale = red / 2; 				else 					scale = red / 4; 				return new IntegerTickEnumerator (scale);  			}
Magic Number,MonoDevelop.Components.Chart,IntegerAxis,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\IntegerAxis.cs,CreateTickEnumerator,The following statement contains a magic number: unchecked {  				val = (long) minTickStep;  				long red = 10; 				while (val > red) 					red = red * 10; 				 				long scale; 				 				if (val <= 1) 					scale = 1; 				else if (val > red / 2) 					scale = red; 				else if (val > red / 4) 					scale = red / 2; 				else 					scale = red / 4; 				return new IntegerTickEnumerator (scale);  			}
Magic Number,MonoDevelop.Components.Chart,IntegerAxis,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\IntegerAxis.cs,CreateTickEnumerator,The following statement contains a magic number: unchecked {  				val = (long) minTickStep;  				long red = 10; 				while (val > red) 					red = red * 10; 				 				long scale; 				 				if (val <= 1) 					scale = 1; 				else if (val > red / 2) 					scale = red; 				else if (val > red / 4) 					scale = red / 2; 				else 					scale = red / 4; 				return new IntegerTickEnumerator (scale);  			}
Magic Number,MonoDevelop.Components.Chart,IntegerAxis,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\IntegerAxis.cs,CreateTickEnumerator,The following statement contains a magic number: unchecked {  				val = (long) minTickStep;  				long red = 10; 				while (val > red) 					red = red * 10; 				 				long scale; 				 				if (val <= 1) 					scale = 1; 				else if (val > red / 2) 					scale = red; 				else if (val > red / 4) 					scale = red / 2; 				else 					scale = red / 4; 				return new IntegerTickEnumerator (scale);  			}
Missing Default,Samples,WidgetEvents,C:\repos\mono_xwt\TestApps\Samples\Samples\WidgetEvents.cs,HandleButtonPressed,The following switch statement is missing a default case: switch (e.Button) {  				case PointerButton.Left: laLeft.BackgroundColor = Colors.Green; break;  				case PointerButton.Middle: laMiddle.BackgroundColor = Colors.Green; break;  				case PointerButton.Right: laRight.BackgroundColor = Colors.Green; break;  			}
Missing Default,Samples,WidgetEvents,C:\repos\mono_xwt\TestApps\Samples\Samples\WidgetEvents.cs,HandleButtonReleased,The following switch statement is missing a default case: switch (e.Button) {  				case PointerButton.Left: laLeft.BackgroundColor = Colors.White; break;  				case PointerButton.Middle: laMiddle.BackgroundColor = Colors.White; break;  				case PointerButton.Right: laRight.BackgroundColor = Colors.White; break;  			}
Missing Default,Samples,DrawingText,C:\repos\mono_xwt\TestApps\Samples\Samples\DrawingText.cs,DrawText,The following switch statement is missing a default case: switch (tl.TextAlignment) {  			case Alignment.Center:  				dx = Math.Round ((tl.Width - s.Width) / 2);  				break;  			case Alignment.End:  				dx = tl.Width - s.Width;  				break;  			}
Missing Default,Samples,MessageDialogs,C:\repos\mono_xwt\TestApps\Samples\Samples\MessageDialogs.cs,MessageDialogs,The following switch statement is missing a default case: switch (cmbType.SelectedText) {  					case "Message":  						MessageDialog.ShowMessage (this.ParentWindow' txtPrimay.Text' txtSecondary.Text);  						lblResult.Text = "Result: dialog closed";  						break;  					case "Question":  						var question = new QuestionMessage(txtPrimay.Text' txtSecondary.Text);  						question.Buttons.Add(new Command("Answer 1"));  						question.Buttons.Add(new Command("Answer 2"));  						question.DefaultButton = 1;  						question.AddOption ("option1"' "Option 1"' false);  						question.AddOption ("option2"' "Option 2"' true);  						var result = MessageDialog.AskQuestion (question);  						lblResult.Text = "Result: " + result.Id;  						if (question.GetOptionValue ("option1"))  							lblResult.Text += " + Option 1";  						if (question.GetOptionValue ("option2"))  							lblResult.Text += " + Option 2";  						break;  					case "Confirmation":  						var confirmation = new ConfirmationMessage (txtPrimay.Text' txtSecondary.Text' Command.Apply);  						confirmation.AddOption ("option1"' "Option 1"' false);  						confirmation.AddOption ("option2"' "Option 2"' true);  						confirmation.AllowApplyToAll = true;    						var success = MessageDialog.Confirm (confirmation);  						lblResult.Text = "Result: " + success;  						if (confirmation.GetOptionValue ("option1"))  							lblResult.Text += " + Option 1";  						if (confirmation.GetOptionValue ("option2"))  							lblResult.Text += " + Option 2";    						lblResult.Text += " + All: " + confirmation.AllowApplyToAll;  						break;  					case "Warning":  						MessageDialog.ShowWarning (this.ParentWindow' txtPrimay.Text' txtSecondary.Text);  						lblResult.Text = "Result: dialog closed";  						break;  					case "Error":  						MessageDialog.ShowError (this.ParentWindow' txtPrimay.Text' txtSecondary.Text);  						lblResult.Text = "Result: dialog closed";  						break;  				}
Missing Default,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,MoveNext,The following switch statement is missing a default case: switch (scale) {  				case 0: current = current.AddSeconds (1); break;  				case 1: current = current.AddSeconds (15); break;  				case 2: current = current.AddMinutes (1); break;  				case 3: current = current.AddMinutes (15); break;  				case 4: current = current.AddHours (1); break;  				case 5: current = current.AddDays (1); break;  				case 6: current = current.AddMonths (1); break;  				case 7: current = current.AddYears (1); break;  			}
Missing Default,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\repos\mono_xwt\TestApps\Samples\MonoDevelop.Components.Chart\DateTimeAxis.cs,MovePrevious,The following switch statement is missing a default case: switch (scale) {  				case 0: current = current.AddSeconds (-1); break;  				case 1: current = current.AddSeconds (-15); break;  				case 2: current = current.AddMinutes (-1); break;  				case 3: current = current.AddMinutes (-15); break;  				case 4: current = current.AddHours (-1); break;  				case 5: current = current.AddDays (-1); break;  				case 6: current = current.AddMonths (-1); break;  				case 7: current = current.AddYears (-1); break;  			}
