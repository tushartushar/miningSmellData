Implementation smell,Namespace,Class,File,Method,Description
Long Method,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,GetXwtRole,The method has 114 lines of code.
Long Method,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The method has 156 lines of code.
Complex Method,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,GetXwtRole,Cyclomatic complexity of the method is 43
Complex Method,Xwt.Mac,ViewBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ViewBackend.cs,DraggingUpdated,Cyclomatic complexity of the method is 8
Complex Method,Xwt.Mac,CompositeCell,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac.CellViews\CompositeCell.cs,GetCells,Cyclomatic complexity of the method is 8
Complex Method,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetWeightFromValue,Cyclomatic complexity of the method is 11
Complex Method,Xwt.Mac,AlertDialogBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\AlertDialogBackend.cs,Run,Cyclomatic complexity of the method is 11
Complex Method,Xwt.Mac,PopoverBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\PopoverBackend.cs,Show,Cyclomatic complexity of the method is 8
Complex Method,Xwt.Mac,GtkQuartz,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\GtkQuartz.cs,GetView,Cyclomatic complexity of the method is 8
Long Parameter List,Xwt.Mac,WindowBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\WindowBackend.cs,DragStart,The method has 5 parameters. Parameters: data' dragAction' dragImage' xhot' yhot
Long Parameter List,Xwt.Mac,CellUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac.CellViews\CellUtil.cs,CreateCell,The method has 5 parameters. Parameters: context' table' source' cells' column
Long Parameter List,Xwt.Mac,ImageHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ImageHandler.cs,CopyBitmapArea,The method has 8 parameters. Parameters: backend' srcX' srcY' width' height' dest' destX' destY
Long Parameter List,Xwt.Mac,ImageHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ImageHandler.cs,CropBitmap,The method has 5 parameters. Parameters: backend' srcX' srcY' width' height
Long Parameter List,Xwt.Mac,MacContextBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ContextBackendHandler.cs,Arc,The method has 6 parameters. Parameters: backend' xc' yc' radius' angle1' angle2
Long Parameter List,Xwt.Mac,MacContextBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ContextBackendHandler.cs,ArcNegative,The method has 6 parameters. Parameters: backend' xc' yc' radius' angle1' angle2
Long Parameter List,Xwt.Mac,MacContextBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ContextBackendHandler.cs,CurveTo,The method has 7 parameters. Parameters: backend' x1' y1' x2' y2' x3' y3
Long Parameter List,Xwt.Mac,MacContextBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ContextBackendHandler.cs,Rectangle,The method has 5 parameters. Parameters: backend' x' y' width' height
Long Parameter List,Xwt.Mac,MacContextBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ContextBackendHandler.cs,RelCurveTo,The method has 7 parameters. Parameters: backend' dx1' dy1' dx2' dy2' dx3' dy3
Long Parameter List,Xwt.Mac,MacGradientBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\GradientBackendHandler.cs,CreateRadial,The method has 6 parameters. Parameters: cx0' cy0' radius0' cx1' cy1' radius1
Long Parameter List,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,Create,The method has 5 parameters. Parameters: fontName' size' style' weight' stretch
Long Parameter List,Xwt.Mac,CustomCell,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\TextEntryBackend.cs,EditWithFrame,The method has 5 parameters. Parameters: aRect' inView' editor' delegateObject' theEvent
Long Parameter List,Xwt.Mac,CustomCell,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\TextEntryBackend.cs,SelectWithFrame,The method has 6 parameters. Parameters: aRect' inView' editor' delegateObject' selStart' selLength
Long Parameter List,Xwt.Mac,ScrollAdjustmentBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ScrollAdjustmentBackend.cs,SetRange,The method has 6 parameters. Parameters: lowerValue' upperValue' pageSize' pageIncrement' stepIncrement' value
Long Parameter List,Xwt.Mac,MacPathBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\PathBackendHandler.cs,Arc,The method has 6 parameters. Parameters: backend' xc' yc' radius' angle1' angle2
Long Parameter List,Xwt.Mac,MacPathBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\PathBackendHandler.cs,ArcNegative,The method has 6 parameters. Parameters: backend' xc' yc' radius' angle1' angle2
Long Parameter List,Xwt.Mac,MacPathBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\PathBackendHandler.cs,CurveTo,The method has 7 parameters. Parameters: backend' x1' y1' x2' y2' x3' y3
Long Parameter List,Xwt.Mac,MacPathBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\PathBackendHandler.cs,Rectangle,The method has 5 parameters. Parameters: backend' x' y' width' height
Long Parameter List,Xwt.Mac,MacPathBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\PathBackendHandler.cs,RelCurveTo,The method has 7 parameters. Parameters: backend' dx1' dy1' dx2' dy2' dx3' dy3
Long Parameter List,Xwt.Mac,CustomScroller,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ScrollbarBackend.cs,SetRange,The method has 6 parameters. Parameters: lowerValue' upperValue' pageSize' pageIncrement' stepIncrement' value
Long Parameter List,Xwt.Mac,PopupWindowBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\PopupWindowBackend.cs,DragStart,The method has 5 parameters. Parameters: data' dragAction' dragImage' xhot' yhot
Long Identifier,Xwt.Mac,MacRichTextBuffer,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\RichTextViewBackend.cs,,The length of the parameter selInitWithHTMLDocumentAttributes_Handle is 40.
Long Identifier,Xwt.Mac,MacRichTextBuffer,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\RichTextViewBackend.cs,,The length of the parameter _NSExcludedElementsDocumentAttribute is 36.
Long Statement,Xwt.Mac,ButtonBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ButtonBackend.cs,SetContent,The length of the statement  "				case ContentPosition.Center: Widget.ImagePosition = string.IsNullOrEmpty (label) ? NSCellImagePosition.ImageOnly : NSCellImagePosition.ImageOverlaps; break; " is 156.
Long Statement,Xwt.Mac,LabelBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\LabelBackend.cs,GetPreferredSize,The length of the statement  "			var r = new CGRect (0' 0' widthConstraint.IsConstrained ? (float)widthConstraint.AvailableSize : float.MaxValue' heightConstraint.IsConstrained ? (float)heightConstraint.AvailableSize : float.MaxValue); " is 202.
Long Statement,Xwt.Mac,AppDelegate,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\MacEngine.cs,WillFinishLaunching,The length of the statement  "			eventManager.SetEventHandler (this' new Selector ("handleGetURLEvent:withReplyEvent:")' AEEventClass.Internet' AEEventID.GetUrl); " is 129.
Long Statement,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToXwtColor,The length of the statement  "				return new Color (calibrated.RedComponent' calibrated.GreenComponent' calibrated.BlueComponent' calibrated.AlphaComponent); " is 123.
Long Statement,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToAttributedString,The length of the statement  "					ns.AddAttribute (NSStringAttributeKey.ForegroundColor' Toolkit.CurrentEngine.Defaults.FallbackLinkColor.ToNSColor ()' r); " is 121.
Long Statement,Xwt.Mac,ViewBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ViewBackend.cs,NeedsAlignmentWrapper,The length of the statement  "			return fw.HorizontalPlacement != WidgetPlacement.Fill || fw.VerticalPlacement != WidgetPlacement.Fill || fw.Margin.VerticalSpacing != 0 || fw.Margin.HorizontalSpacing != 0; " is 172.
Long Statement,Xwt.Mac,ViewBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ViewBackend.cs,ConvertToScreenCoordinates,The length of the statement  "			return MacDesktopBackend.ToDesktopRect (new CGRect (lo.X' lo.Y' 0' Widget.IsFlipped ? 0 : Widget.Frame.Height)).Location; " is 121.
Long Statement,Xwt.Mac,ViewBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ViewBackend.cs,SizeToFit,The length of the statement  "//				Widget.SetFrameSize (new SizeF (Math.Max (Widget.Frame.Width' (float)minWidth)' Math.Max (Widget.Frame.Height' (float)minHeight))); " is 137.
Long Statement,Xwt.Mac,ViewBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ViewBackend.cs,FillDataStore,The length of the statement  "					store.AddUris (doc.SelectNodes ("/plist/array/string").Cast<XmlElement> ().Select (e => new Uri (e.InnerText)).ToArray ()); " is 123.
Long Statement,Xwt.Mac,MacContextBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ContextBackendHandler.cs,RelCurveTo,The length of the statement  "			ctx.AddCurveToPoint ((float)(p.X + dx1)' (float)(p.Y + dy1)' (float)(p.X + dx2)' (float)(p.Y + dy2)' (float)(p.X + dx3)' (float)(p.Y + dy3)); " is 141.
Long Statement,Xwt.Mac,MacContextBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ContextBackendHandler.cs,DrawImage,The length of the statement  "				ctx.DrawImage (new CGRect (0' -size.Height' size.Width' size.Height)' image.AsCGImage (ref rr' NSGraphicsContext.CurrentContext' null)); " is 136.
Long Statement,Xwt.Mac,MacContextBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ContextBackendHandler.cs,IsPointInFill,The length of the statement  "			return ((CGContextBackend)backend).Context.PathContainsPoint (new CGPoint ((nfloat)x' (nfloat)y)' CGPathDrawingMode.Fill); " is 122.
Long Statement,Xwt.Mac,MacContextBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ContextBackendHandler.cs,IsPointInStroke,The length of the statement  "			return ((CGContextBackend)backend).Context.PathContainsPoint (new CGPoint ((nfloat)x' (nfloat)y)' CGPathDrawingMode.Stroke); " is 124.
Long Statement,Xwt.Mac,MacGradientBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\GradientBackendHandler.cs,Draw,The length of the statement  "					ctx.DrawLinearGradient (cg' gradient.Start' gradient.End' CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation); " is 158.
Long Statement,Xwt.Mac,MacGradientBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\GradientBackendHandler.cs,Draw,The length of the statement  "					ctx.DrawRadialGradient (cg' gradient.Start' gradient.StartRadius' gradient.End' gradient.EndRadius' CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation); " is 200.
Long Statement,Xwt.Mac,MacTextLayoutBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\TextLayoutBackendHandler.cs,CreateFrame,The length of the statement  "				path.AddRect (new CGRect (0' 0' li.Width.HasValue && !ellipsize ? li.Width.Value : float.MaxValue' li.Height ?? float.MaxValue)); " is 129.
Long Statement,Xwt.Mac,MacTextLayoutBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\TextLayoutBackendHandler.cs,CreateAttributedString,The length of the statement  "					ns.AddAttribute (CTStringAttributeKey.ForegroundColor' Toolkit.CurrentEngine.Defaults.FallbackLinkColor.ToNSColor ()' r); " is 121.
Long Statement,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetSystemDefaultMonospaceFont,The length of the statement  "			return Create (GetDefaultMonospaceFontNames(Desktop.DesktopType)' font.PointSize' FontStyle.Normal' FontWeight.Normal' FontStretch.Normal); " is 139.
Long Statement,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetAvailableFamilyFaces,The length of the statement  "				var traits = (NSFontTraitMask) ((NSNumber)NSValue.ValueFromPointer (nsFace.ValueAt (3)).NonretainedObjectValue).Int32Value; " is 123.
Long Statement,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,SetStretch,The length of the statement  "				font = NSFontManager.SharedFontManager.ConvertFontToNotHaveTrait (font' NSFontTraitMask.Compressed | NSFontTraitMask.Expanded | NSFontTraitMask.Narrow); " is 152.
Long Statement,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,SetStretch,The length of the statement  "				font = NSFontManager.SharedFontManager.ConvertFontToNotHaveTrait (font' NSFontTraitMask.Compressed | NSFontTraitMask.Expanded | NSFontTraitMask.Condensed); " is 155.
Long Statement,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,SetStretch,The length of the statement  "				font = NSFontManager.SharedFontManager.ConvertFontToNotHaveTrait (font' NSFontTraitMask.Compressed | NSFontTraitMask.Narrow | NSFontTraitMask.Condensed); " is 153.
Long Statement,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,SetStretch,The length of the statement  "				font = NSFontManager.SharedFontManager.ConvertFontToNotHaveTrait (font' NSFontTraitMask.Condensed | NSFontTraitMask.Expanded | NSFontTraitMask.Narrow | NSFontTraitMask.Compressed); " is 180.
Long Statement,Xwt.Mac,ListViewBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ListViewBackend.cs,SetSource,The length of the statement  "			source.RowChanged += (sender' e) => Table.ReloadData (NSIndexSet.FromIndex (e.Row)' NSIndexSet.FromNSRange (new NSRange(0' Table.ColumnCount - 1))); " is 148.
Long Statement,Xwt.Mac,TableViewBackend<T;S>,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\TableViewBackend.cs,EnableEvent,The length of the statement  "					selChangeObserver = NSNotificationCenter.DefaultCenter.AddObserver (new NSString (SelectionChangeEventName)' HandleTreeSelectionDidChange' Table); " is 146.
Long Statement,Xwt.Mac,CustomCell,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\TextEntryBackend.cs,FieldEditorForView,The length of the statement  "					selChangeObserver = NSNotificationCenter.DefaultCenter.AddObserver (new NSString ("NSTextViewDidChangeSelectionNotification")' HandleSelectionDidChange' editor); " is 161.
Long Statement,Xwt.Mac,MacComboBox,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ComboBoxEntryBackend.cs,UpdateTrackingAreas,The length of the statement  "			var options = NSTrackingAreaOptions.MouseMoved | NSTrackingAreaOptions.ActiveInKeyWindow | NSTrackingAreaOptions.MouseEnteredAndExited; " is 135.
Long Statement,Xwt.Mac,MacComboBox,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ComboBoxEntryBackend.cs,MouseMoved,The length of the statement  "			MouseMovedEventArgs args = new MouseMovedEventArgs ((long) TimeSpan.FromSeconds (theEvent.Timestamp).TotalMilliseconds' p.X' p.Y); " is 130.
Long Statement,Xwt.Mac,FrameBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FrameBackend.cs,OnSizeToFit,The length of the statement  "				Widget.SetFrameSize (new CGSize ((nfloat)(Widget.Frame.Width + frame.Padding.HorizontalSpacing)' (nfloat)(Widget.Frame.Height + frame.Padding.VerticalSpacing))); " is 161.
Long Statement,Xwt.Mac,CustomContentView,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FrameBackend.cs,UpdatePlacement,The length of the statement  "				var r = new Rectangle (frame.PaddingLeft' frame.PaddingTop' Frame.Width - frame.Padding.HorizontalSpacing' Frame.Height - frame.Padding.VerticalSpacing); " is 153.
Long Statement,Xwt.Mac,ScrollViewBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ScrollViewBackend.cs,GetPreferredSize,The length of the statement  "			var childWidthConstraint = horizontalScrollPolicy == ScrollPolicy.Never ? widthConstraint : SizeConstraint.Unconstrained; " is 121.
Long Statement,Xwt.Mac,ScrollViewBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ScrollViewBackend.cs,GetPreferredSize,The length of the statement  "			var childHeightConstraint = verticalScrollPolicy == ScrollPolicy.Never ? heightConstraint : SizeConstraint.Unconstrained; " is 121.
Long Statement,Xwt.Mac,ScrollViewBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ScrollViewBackend.cs,GetPreferredSize,The length of the statement  "			var schild = ((ViewBackend)child).Frontend.Surface.GetPreferredSize (childWidthConstraint' childHeightConstraint' true); " is 120.
Long Statement,Xwt.Mac,CustomClipView,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ScrollViewBackend.cs,UpdateDocumentSize,The length of the statement  "			DocumentView.Frame = new CGRect (0' 0' (nfloat)(hScroll.UpperValue - hScroll.LowerValue) * ratioX' (nfloat)(vScroll.UpperValue - vScroll.LowerValue) * ratioY); " is 159.
Long Statement,Xwt.Mac,FactoryViewController,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\PopoverBackend.cs,LoadView,The length of the statement  "					NSLayoutConstraint.Create (NativeChild' NSLayoutAttribute.Left' NSLayoutRelation.Equal' View' NSLayoutAttribute.Left' 1' (nfloat)padding.Left)' " is 143.
Long Statement,Xwt.Mac,FactoryViewController,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\PopoverBackend.cs,LoadView,The length of the statement  "					NSLayoutConstraint.Create (NativeChild' NSLayoutAttribute.Right' NSLayoutRelation.Equal' View' NSLayoutAttribute.Right' 1' -(nfloat)padding.Right)' " is 147.
Long Statement,Xwt.Mac,FactoryViewController,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\PopoverBackend.cs,LoadView,The length of the statement  "					NSLayoutConstraint.Create (NativeChild' NSLayoutAttribute.Top' NSLayoutRelation.Equal' View' NSLayoutAttribute.Top' 1' (nfloat)padding.Top)' " is 140.
Long Statement,Xwt.Mac,FactoryViewController,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\PopoverBackend.cs,LoadView,The length of the statement  "					NSLayoutConstraint.Create (NativeChild' NSLayoutAttribute.Bottom' NSLayoutRelation.Equal' View' NSLayoutAttribute.Bottom' 1' -(nfloat)padding.Bottom)' " is 150.
Long Statement,Xwt.Mac,LinkLabelBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\LinkLabelBackend.cs,GetAttributedString,The length of the statement  "			attrStr.AddAttribute (NSStringAttributeKey.ForegroundColor' Toolkit.CurrentEngine.Defaults.FallbackLinkColor.ToNSColor ()' range); " is 130.
Long Statement,Xwt.Mac,SelectFolderDialogBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\SelectFolderDialogBackend.cs,Initialize,The length of the statement  "			this.Prompt = Application.TranslationCatalog.GetPluralString("Select Directory"' "Select Directories"' multiselect ? 2 : 1); " is 124.
Long Statement,Xwt.Mac,MacPathBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\PathBackendHandler.cs,Arc,The length of the statement  "			((CGPath)backend).AddArc ((float)xc' (float)yc' (float)radius' (float)(angle1 * degrees)' (float)(angle2 * degrees)' false); " is 124.
Long Statement,Xwt.Mac,MacPathBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\PathBackendHandler.cs,ArcNegative,The length of the statement  "			((CGPath)backend).AddArc ((float)xc' (float)yc' (float)radius' (float)(angle1 * degrees)' (float)(angle2 * degrees)' true); " is 123.
Long Statement,Xwt.Mac,MacPathBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\PathBackendHandler.cs,RelCurveTo,The length of the statement  "			path.AddCurveToPoint ((float)(p.X + dx1)' (float)(p.Y + dy1)' (float)(p.X + dx2)' (float)(p.Y + dy2)' (float)(p.X + dx3)' (float)(p.Y + dy3)); " is 142.
Long Statement,Xwt.Mac,ListBoxBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ListBoxBackend.cs,ResetColumnSize,The length of the statement  "			// https://developer.apple.com/library/mac/documentation/Cocoa/Reference/NSTableViewDelegate_Protocol/index.html#//apple_ref/occ/intfm/NSTableViewDelegate/tableView:sizeToFitWidthOfColumn: " is 188.
Long Statement,Xwt.Mac,DialogBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\DialogBackend.cs,LayoutWindow,The length of the statement  "				buttonBoxView.Frame = new CGRect ((nfloat)buttonBoxPadding.Left' (nfloat)buttonBoxPadding.Bottom' frame.Width - (nfloat)buttonBoxPadding.HorizontalSpacing' (float)ps.Height); " is 174.
Long Statement,Xwt.Mac,MacTextView,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\RichTextViewBackend.cs,ViewDidMoveToWindow,The length of the statement  "				ns [NSStringAttributeKey.ForegroundColor] = Backend.Frontend.Surface.ToolkitEngine.Defaults.FallbackLinkColor.ToNSColor (); " is 123.
Long Statement,Xwt.Mac,MacTextView,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\RichTextViewBackend.cs,ResetCursorRects,The length of the statement  "				TextStorage.EnumerateAttributes (new NSRange (0' TextStorage.Length)' NSAttributedStringEnumeration.None' (NSDictionary attrs' NSRange range' ref bool stop) => { " is 161.
Long Statement,Xwt.Mac,MacRichTextBuffer,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\RichTextViewBackend.cs,CreateStringFromHTML,The length of the statement  "			attrString.Handle = Messaging.IntPtr_objc_msgSend_IntPtr_IntPtr (attrString.Handle' selInitWithHTMLDocumentAttributes_Handle' data.Handle' docAttributesPtr); " is 157.
Long Statement,Xwt.Mac,WidgetView,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\WidgetView.cs,UpdateTrackingAreas,The length of the statement  "			var options = NSTrackingAreaOptions.MouseMoved | NSTrackingAreaOptions.ActiveInKeyWindow | NSTrackingAreaOptions.MouseEnteredAndExited; " is 135.
Long Statement,Xwt.Mac,WidgetView,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\WidgetView.cs,MouseMoved,The length of the statement  "			MouseMovedEventArgs args = new MouseMovedEventArgs ((long) TimeSpan.FromSeconds (theEvent.Timestamp).TotalMilliseconds' p.X' p.Y); " is 130.
Long Statement,Xwt.Mac,WidgetView,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\WidgetView.cs,MouseDragged,The length of the statement  "			MouseMovedEventArgs args = new MouseMovedEventArgs ((long) TimeSpan.FromSeconds (theEvent.Timestamp).TotalMilliseconds' p.X' p.Y); " is 130.
Long Statement,Xwt.Mac,NSTableViewBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\NSTableViewBackend.cs,UpdateTrackingAreas,The length of the statement  "			var options = NSTrackingAreaOptions.MouseMoved | NSTrackingAreaOptions.ActiveInKeyWindow | NSTrackingAreaOptions.MouseEnteredAndExited; " is 135.
Long Statement,Xwt.Mac,NSTableViewBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\NSTableViewBackend.cs,MouseMoved,The length of the statement  "			MouseMovedEventArgs args = new MouseMovedEventArgs ((long) TimeSpan.FromSeconds (theEvent.Timestamp).TotalMilliseconds' p.X' p.Y); " is 130.
Long Statement,Xwt.Mac,NSTableViewBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\NSTableViewBackend.cs,MouseDragged,The length of the statement  "			MouseMovedEventArgs args = new MouseMovedEventArgs ((long) TimeSpan.FromSeconds (theEvent.Timestamp).TotalMilliseconds' p.X' p.Y); " is 130.
Long Statement,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,ToXwtKeyEventArgs,The length of the statement  "			return new KeyEventArgs (key' keyEvent.KeyCode' mod' keyEvent.IsARepeat' (long)TimeSpan.FromSeconds (keyEvent.Timestamp).TotalMilliseconds); " is 140.
Long Statement,Xwt.Mac,OutlineViewBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\OutlineViewBackend.cs,UpdateTrackingAreas,The length of the statement  "			var options = NSTrackingAreaOptions.MouseMoved | NSTrackingAreaOptions.ActiveInKeyWindow | NSTrackingAreaOptions.MouseEnteredAndExited; " is 135.
Long Statement,Xwt.Mac,OutlineViewBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\OutlineViewBackend.cs,MouseMoved,The length of the statement  "			MouseMovedEventArgs args = new MouseMovedEventArgs ((long) TimeSpan.FromSeconds (theEvent.Timestamp).TotalMilliseconds' p.X' p.Y); " is 130.
Long Statement,Xwt.Mac,OutlineViewBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\OutlineViewBackend.cs,MouseDragged,The length of the statement  "			MouseMovedEventArgs args = new MouseMovedEventArgs ((long) TimeSpan.FromSeconds (theEvent.Timestamp).TotalMilliseconds' p.X' p.Y); " is 130.
Long Statement,Xwt.Mac,AccessibleBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\AccessibleBackend.cs,InitializeBackend,The length of the statement  "				throw new ArgumentException ("Invalid frontend type. Expected '" + typeof (Accessible) + "' found '" + frontend.GetType () + "'"); " is 130.
Complex Conditional,Xwt.Mac,ButtonBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ButtonBackend.cs,SetButtonStyle,The conditional expression  "Widget.Image != null  						|| Frontend.MinHeight > 0  						|| Frontend.HeightRequest > 0  						|| Widget.Title.Contains (Environment.NewLine)"  is complex.
Complex Conditional,Xwt.Mac,CheckBoxTableCell,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac.CellViews\CheckBoxTableCell.cs,HandleActivated,The conditional expression  "cellView.Editable && !cellView.RaiseToggled () && (cellView.StateField != null || cellView.ActiveField != null)"  is complex.
Virtual Method Call from Constructor,Xwt.Mac,WindowBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\WindowBackend.cs,WindowBackend,The constructor "WindowBackend" calls a virtual method "OnClosed".
Virtual Method Call from Constructor,Xwt.Mac,PopupWindowBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\PopupWindowBackend.cs,PopupWindowBackend,The constructor "PopupWindowBackend" calls a virtual method "OnClosed".
Magic Number,Xwt.Mac,CustomAlignedContainer,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\LabelBackend.cs,UpdateTextFieldFrame,The following statement contains a magic number: if (expandVertically)  				Child.Frame = new CGRect (0' 0' Frame.Width' Frame.Height);  			else {  				Child.Frame = new CGRect (0' (Frame.Height - Child.Frame.Height) / 2' Frame.Width' Child.Frame.Height);  			}
Magic Number,Xwt.Mac,CustomTextFieldCell,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\LabelBackend.cs,TitleRectForBounds,The following statement contains a magic number: if (dif > 0) {  				rect.Height -= dif;  				rect.Y += (dif / 2);  			}
Magic Number,Xwt.Mac,AppDelegate,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\MacEngine.cs,HandleGetUrlEvent,The following statement contains a magic number: uint keywordDirectObject = (((uint)keyDirectObjectString [0]) << 24 |  				((uint)keyDirectObjectString [1]) << 16 |  				((uint)keyDirectObjectString [2]) << 8 |  				((uint)keyDirectObjectString [3]));
Magic Number,Xwt.Mac,AppDelegate,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\MacEngine.cs,HandleGetUrlEvent,The following statement contains a magic number: uint keywordDirectObject = (((uint)keyDirectObjectString [0]) << 24 |  				((uint)keyDirectObjectString [1]) << 16 |  				((uint)keyDirectObjectString [2]) << 8 |  				((uint)keyDirectObjectString [3]));
Magic Number,Xwt.Mac,AppDelegate,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\MacEngine.cs,HandleGetUrlEvent,The following statement contains a magic number: uint keywordDirectObject = (((uint)keyDirectObjectString [0]) << 24 |  				((uint)keyDirectObjectString [1]) << 16 |  				((uint)keyDirectObjectString [2]) << 8 |  				((uint)keyDirectObjectString [3]));
Magic Number,Xwt.Mac,AppDelegate,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\MacEngine.cs,HandleGetUrlEvent,The following statement contains a magic number: uint keywordDirectObject = (((uint)keyDirectObjectString [0]) << 24 |  				((uint)keyDirectObjectString [1]) << 16 |  				((uint)keyDirectObjectString [2]) << 8 |  				((uint)keyDirectObjectString [3]));
Magic Number,Xwt.Mac,AppDelegate,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\MacEngine.cs,HandleGetUrlEvent,The following statement contains a magic number: uint keywordDirectObject = (((uint)keyDirectObjectString [0]) << 24 |  				((uint)keyDirectObjectString [1]) << 16 |  				((uint)keyDirectObjectString [2]) << 8 |  				((uint)keyDirectObjectString [3]));
Magic Number,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToXwtColor,The following statement contains a magic number: return new Color (cs[0]' cs[1]' cs[2]' col.Alpha);
Magic Number,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToIconType,The following statement contains a magic number: switch (id) {  			case StockIconId.Error:       return 1937010544; // 'stop'  			case StockIconId.Warning:     return 1667331444; // 'caut'  			case StockIconId.Information: return 1852798053; // 'note'  			case StockIconId.Question:    return 1903519091; // 'ques'  			case StockIconId.Remove:      return 1952736620; // 'tdel'  			}
Magic Number,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToIconType,The following statement contains a magic number: switch (id) {  			case StockIconId.Error:       return 1937010544; // 'stop'  			case StockIconId.Warning:     return 1667331444; // 'caut'  			case StockIconId.Information: return 1852798053; // 'note'  			case StockIconId.Question:    return 1903519091; // 'ques'  			case StockIconId.Remove:      return 1952736620; // 'tdel'  			}
Magic Number,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToIconType,The following statement contains a magic number: switch (id) {  			case StockIconId.Error:       return 1937010544; // 'stop'  			case StockIconId.Warning:     return 1667331444; // 'caut'  			case StockIconId.Information: return 1852798053; // 'note'  			case StockIconId.Question:    return 1903519091; // 'ques'  			case StockIconId.Remove:      return 1952736620; // 'tdel'  			}
Magic Number,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToIconType,The following statement contains a magic number: switch (id) {  			case StockIconId.Error:       return 1937010544; // 'stop'  			case StockIconId.Warning:     return 1667331444; // 'caut'  			case StockIconId.Information: return 1852798053; // 'note'  			case StockIconId.Question:    return 1903519091; // 'ques'  			case StockIconId.Remove:      return 1952736620; // 'tdel'  			}
Magic Number,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToIconType,The following statement contains a magic number: switch (id) {  			case StockIconId.Error:       return 1937010544; // 'stop'  			case StockIconId.Warning:     return 1667331444; // 'caut'  			case StockIconId.Information: return 1852798053; // 'note'  			case StockIconId.Question:    return 1903519091; // 'ques'  			case StockIconId.Remove:      return 1952736620; // 'tdel'  			}
Magic Number,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,TriggersContextMenu,The following statement contains a magic number: if (theEvent.ButtonNumber == 1 &&  					(NSEvent.CurrentPressedMouseButtons & 1 | NSEvent.CurrentPressedMouseButtons & 4) == 0) {  				return true;  			}
Magic Number,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,TriggersContextMenu,The following statement contains a magic number: if (theEvent.ButtonNumber == 0 && (theEvent.ModifierFlags & NSEventModifierMask.ControlKeyMask) != 0 &&  					(NSEvent.CurrentPressedMouseButtons & 2 | NSEvent.CurrentPressedMouseButtons & 4) == 0) {  				return true;  			}
Magic Number,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,TriggersContextMenu,The following statement contains a magic number: if (theEvent.ButtonNumber == 0 && (theEvent.ModifierFlags & NSEventModifierMask.ControlKeyMask) != 0 &&  					(NSEvent.CurrentPressedMouseButtons & 2 | NSEvent.CurrentPressedMouseButtons & 4) == 0) {  				return true;  			}
Magic Number,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToMacValue,The following statement contains a magic number: switch (weight) {  			case FontWeight.Thin:  				return 1;  			case FontWeight.Ultralight:  				return 2;  			case FontWeight.Light:  				return 3;  			case FontWeight.Book:  				return 4;  			case FontWeight.Normal:  				return 5;  			case FontWeight.Medium:  				return 6;  			case FontWeight.Semibold:  				return 8;  			case FontWeight.Bold:  				return 9;  			case FontWeight.Ultrabold:  				return 10;  			case FontWeight.Heavy:  				return 11;  			case FontWeight.Ultraheavy:  				return 12;  			default:  				return 13;  			}
Magic Number,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToMacValue,The following statement contains a magic number: switch (weight) {  			case FontWeight.Thin:  				return 1;  			case FontWeight.Ultralight:  				return 2;  			case FontWeight.Light:  				return 3;  			case FontWeight.Book:  				return 4;  			case FontWeight.Normal:  				return 5;  			case FontWeight.Medium:  				return 6;  			case FontWeight.Semibold:  				return 8;  			case FontWeight.Bold:  				return 9;  			case FontWeight.Ultrabold:  				return 10;  			case FontWeight.Heavy:  				return 11;  			case FontWeight.Ultraheavy:  				return 12;  			default:  				return 13;  			}
Magic Number,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToMacValue,The following statement contains a magic number: switch (weight) {  			case FontWeight.Thin:  				return 1;  			case FontWeight.Ultralight:  				return 2;  			case FontWeight.Light:  				return 3;  			case FontWeight.Book:  				return 4;  			case FontWeight.Normal:  				return 5;  			case FontWeight.Medium:  				return 6;  			case FontWeight.Semibold:  				return 8;  			case FontWeight.Bold:  				return 9;  			case FontWeight.Ultrabold:  				return 10;  			case FontWeight.Heavy:  				return 11;  			case FontWeight.Ultraheavy:  				return 12;  			default:  				return 13;  			}
Magic Number,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToMacValue,The following statement contains a magic number: switch (weight) {  			case FontWeight.Thin:  				return 1;  			case FontWeight.Ultralight:  				return 2;  			case FontWeight.Light:  				return 3;  			case FontWeight.Book:  				return 4;  			case FontWeight.Normal:  				return 5;  			case FontWeight.Medium:  				return 6;  			case FontWeight.Semibold:  				return 8;  			case FontWeight.Bold:  				return 9;  			case FontWeight.Ultrabold:  				return 10;  			case FontWeight.Heavy:  				return 11;  			case FontWeight.Ultraheavy:  				return 12;  			default:  				return 13;  			}
Magic Number,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToMacValue,The following statement contains a magic number: switch (weight) {  			case FontWeight.Thin:  				return 1;  			case FontWeight.Ultralight:  				return 2;  			case FontWeight.Light:  				return 3;  			case FontWeight.Book:  				return 4;  			case FontWeight.Normal:  				return 5;  			case FontWeight.Medium:  				return 6;  			case FontWeight.Semibold:  				return 8;  			case FontWeight.Bold:  				return 9;  			case FontWeight.Ultrabold:  				return 10;  			case FontWeight.Heavy:  				return 11;  			case FontWeight.Ultraheavy:  				return 12;  			default:  				return 13;  			}
Magic Number,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToMacValue,The following statement contains a magic number: switch (weight) {  			case FontWeight.Thin:  				return 1;  			case FontWeight.Ultralight:  				return 2;  			case FontWeight.Light:  				return 3;  			case FontWeight.Book:  				return 4;  			case FontWeight.Normal:  				return 5;  			case FontWeight.Medium:  				return 6;  			case FontWeight.Semibold:  				return 8;  			case FontWeight.Bold:  				return 9;  			case FontWeight.Ultrabold:  				return 10;  			case FontWeight.Heavy:  				return 11;  			case FontWeight.Ultraheavy:  				return 12;  			default:  				return 13;  			}
Magic Number,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToMacValue,The following statement contains a magic number: switch (weight) {  			case FontWeight.Thin:  				return 1;  			case FontWeight.Ultralight:  				return 2;  			case FontWeight.Light:  				return 3;  			case FontWeight.Book:  				return 4;  			case FontWeight.Normal:  				return 5;  			case FontWeight.Medium:  				return 6;  			case FontWeight.Semibold:  				return 8;  			case FontWeight.Bold:  				return 9;  			case FontWeight.Ultrabold:  				return 10;  			case FontWeight.Heavy:  				return 11;  			case FontWeight.Ultraheavy:  				return 12;  			default:  				return 13;  			}
Magic Number,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToMacValue,The following statement contains a magic number: switch (weight) {  			case FontWeight.Thin:  				return 1;  			case FontWeight.Ultralight:  				return 2;  			case FontWeight.Light:  				return 3;  			case FontWeight.Book:  				return 4;  			case FontWeight.Normal:  				return 5;  			case FontWeight.Medium:  				return 6;  			case FontWeight.Semibold:  				return 8;  			case FontWeight.Bold:  				return 9;  			case FontWeight.Ultrabold:  				return 10;  			case FontWeight.Heavy:  				return 11;  			case FontWeight.Ultraheavy:  				return 12;  			default:  				return 13;  			}
Magic Number,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToMacValue,The following statement contains a magic number: switch (weight) {  			case FontWeight.Thin:  				return 1;  			case FontWeight.Ultralight:  				return 2;  			case FontWeight.Light:  				return 3;  			case FontWeight.Book:  				return 4;  			case FontWeight.Normal:  				return 5;  			case FontWeight.Medium:  				return 6;  			case FontWeight.Semibold:  				return 8;  			case FontWeight.Bold:  				return 9;  			case FontWeight.Ultrabold:  				return 10;  			case FontWeight.Heavy:  				return 11;  			case FontWeight.Ultraheavy:  				return 12;  			default:  				return 13;  			}
Magic Number,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToMacValue,The following statement contains a magic number: switch (weight) {  			case FontWeight.Thin:  				return 1;  			case FontWeight.Ultralight:  				return 2;  			case FontWeight.Light:  				return 3;  			case FontWeight.Book:  				return 4;  			case FontWeight.Normal:  				return 5;  			case FontWeight.Medium:  				return 6;  			case FontWeight.Semibold:  				return 8;  			case FontWeight.Bold:  				return 9;  			case FontWeight.Ultrabold:  				return 10;  			case FontWeight.Heavy:  				return 11;  			case FontWeight.Ultraheavy:  				return 12;  			default:  				return 13;  			}
Magic Number,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToMacValue,The following statement contains a magic number: switch (weight) {  			case FontWeight.Thin:  				return 1;  			case FontWeight.Ultralight:  				return 2;  			case FontWeight.Light:  				return 3;  			case FontWeight.Book:  				return 4;  			case FontWeight.Normal:  				return 5;  			case FontWeight.Medium:  				return 6;  			case FontWeight.Semibold:  				return 8;  			case FontWeight.Bold:  				return 9;  			case FontWeight.Ultrabold:  				return 10;  			case FontWeight.Heavy:  				return 11;  			case FontWeight.Ultraheavy:  				return 12;  			default:  				return 13;  			}
Magic Number,Xwt.Mac,WindowBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\WindowBackend.cs,InternalShow,The following statement contains a magic number: if (ParentWindow != null)  			{  				if (!ParentWindow.ChildWindows.Contains(this))  					ParentWindow.AddChildWindow(this' NSWindowOrderingMode.Above);    				// always use NSWindow for alignment when running in guest mode and  				// don't rely on AddChildWindow to position the window correctly  				if (frontend.InitialLocation == WindowLocation.CenterParent && !(ParentWindow is WindowBackend))  				{  					var parentBounds = MacDesktopBackend.ToDesktopRect(ParentWindow.ContentRectFor(ParentWindow.Frame));  					var bounds = ((IWindowFrameBackend)this).Bounds;  					bounds.X = parentBounds.Center.X - (Frame.Width / 2);  					bounds.Y = parentBounds.Center.Y - (Frame.Height / 2);  					((IWindowFrameBackend)this).Bounds = bounds;  				}  			}
Magic Number,Xwt.Mac,WindowBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\WindowBackend.cs,InternalShow,The following statement contains a magic number: if (ParentWindow != null)  			{  				if (!ParentWindow.ChildWindows.Contains(this))  					ParentWindow.AddChildWindow(this' NSWindowOrderingMode.Above);    				// always use NSWindow for alignment when running in guest mode and  				// don't rely on AddChildWindow to position the window correctly  				if (frontend.InitialLocation == WindowLocation.CenterParent && !(ParentWindow is WindowBackend))  				{  					var parentBounds = MacDesktopBackend.ToDesktopRect(ParentWindow.ContentRectFor(ParentWindow.Frame));  					var bounds = ((IWindowFrameBackend)this).Bounds;  					bounds.X = parentBounds.Center.X - (Frame.Width / 2);  					bounds.Y = parentBounds.Center.Y - (Frame.Height / 2);  					((IWindowFrameBackend)this).Bounds = bounds;  				}  			}
Magic Number,Xwt.Mac,ImageHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ImageHandler.cs,ConvertToBitmap,The following statement contains a magic number: if (idesc.Backend is CustomImage) {  				var flags = CGBitmapFlags.ByteOrderDefault;  				int bytesPerRow;  				switch (format) {  				case ImageFormat.ARGB32:  					bytesPerRow = pixelWidth * 4;  					flags |= CGBitmapFlags.PremultipliedFirst;  					break;    				case ImageFormat.RGB24:  					bytesPerRow = pixelWidth * 3;  					flags |= CGBitmapFlags.None;  					break;    				default:  					throw new NotImplementedException ("ImageFormat: " + format.ToString ());  				}    				var bmp = new CGBitmapContext (IntPtr.Zero' pixelWidth' pixelHeight' 8' bytesPerRow' Util.DeviceRGBColorSpace' flags);  				bmp.TranslateCTM (0' pixelHeight);  				bmp.ScaleCTM ((float)scaleFactor' (float)-scaleFactor);    				var ctx = new CGContextBackend {  					Context = bmp'  					Size = new CGSize ((nfloat)width' (nfloat)height)'  					InverseViewTransform = bmp.GetCTM ().Invert ()'  					ScaleFactor = scaleFactor  				};    				var ci = (CustomImage)idesc.Backend;  				ci.DrawInContext (ctx' idesc);    				var img = new NSImage (((CGBitmapContext)bmp).ToImage ()' new CGSize (pixelWidth' pixelHeight));  				var imageData = img.AsTiff ();  				var imageRep = (NSBitmapImageRep)NSBitmapImageRep.ImageRepFromData (imageData);  				var im = new NSImage ();  				im.AddRepresentation (imageRep);  				im.Size = new CGSize ((nfloat)width' (nfloat)height);  				bmp.Dispose ();  				return im;  			}  			else {  				NSImage img = (NSImage)idesc.Backend;  				NSBitmapImageRep bitmap = img.Representations ().OfType<NSBitmapImageRep> ().FirstOrDefault ();  				if (bitmap == null) {  					var imageData = img.AsTiff ();  					var imageRep = (NSBitmapImageRep)NSBitmapImageRep.ImageRepFromData (imageData);  					var im = new NSImage ();  					im.AddRepresentation (imageRep);  					im.Size = new CGSize ((nfloat)width' (nfloat)height);  					return im;  				}  				return idesc.Backend;  			}
Magic Number,Xwt.Mac,ImageHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ImageHandler.cs,ConvertToBitmap,The following statement contains a magic number: if (idesc.Backend is CustomImage) {  				var flags = CGBitmapFlags.ByteOrderDefault;  				int bytesPerRow;  				switch (format) {  				case ImageFormat.ARGB32:  					bytesPerRow = pixelWidth * 4;  					flags |= CGBitmapFlags.PremultipliedFirst;  					break;    				case ImageFormat.RGB24:  					bytesPerRow = pixelWidth * 3;  					flags |= CGBitmapFlags.None;  					break;    				default:  					throw new NotImplementedException ("ImageFormat: " + format.ToString ());  				}    				var bmp = new CGBitmapContext (IntPtr.Zero' pixelWidth' pixelHeight' 8' bytesPerRow' Util.DeviceRGBColorSpace' flags);  				bmp.TranslateCTM (0' pixelHeight);  				bmp.ScaleCTM ((float)scaleFactor' (float)-scaleFactor);    				var ctx = new CGContextBackend {  					Context = bmp'  					Size = new CGSize ((nfloat)width' (nfloat)height)'  					InverseViewTransform = bmp.GetCTM ().Invert ()'  					ScaleFactor = scaleFactor  				};    				var ci = (CustomImage)idesc.Backend;  				ci.DrawInContext (ctx' idesc);    				var img = new NSImage (((CGBitmapContext)bmp).ToImage ()' new CGSize (pixelWidth' pixelHeight));  				var imageData = img.AsTiff ();  				var imageRep = (NSBitmapImageRep)NSBitmapImageRep.ImageRepFromData (imageData);  				var im = new NSImage ();  				im.AddRepresentation (imageRep);  				im.Size = new CGSize ((nfloat)width' (nfloat)height);  				bmp.Dispose ();  				return im;  			}  			else {  				NSImage img = (NSImage)idesc.Backend;  				NSBitmapImageRep bitmap = img.Representations ().OfType<NSBitmapImageRep> ().FirstOrDefault ();  				if (bitmap == null) {  					var imageData = img.AsTiff ();  					var imageRep = (NSBitmapImageRep)NSBitmapImageRep.ImageRepFromData (imageData);  					var im = new NSImage ();  					im.AddRepresentation (imageRep);  					im.Size = new CGSize ((nfloat)width' (nfloat)height);  					return im;  				}  				return idesc.Backend;  			}
Magic Number,Xwt.Mac,ImageHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ImageHandler.cs,ConvertToBitmap,The following statement contains a magic number: if (idesc.Backend is CustomImage) {  				var flags = CGBitmapFlags.ByteOrderDefault;  				int bytesPerRow;  				switch (format) {  				case ImageFormat.ARGB32:  					bytesPerRow = pixelWidth * 4;  					flags |= CGBitmapFlags.PremultipliedFirst;  					break;    				case ImageFormat.RGB24:  					bytesPerRow = pixelWidth * 3;  					flags |= CGBitmapFlags.None;  					break;    				default:  					throw new NotImplementedException ("ImageFormat: " + format.ToString ());  				}    				var bmp = new CGBitmapContext (IntPtr.Zero' pixelWidth' pixelHeight' 8' bytesPerRow' Util.DeviceRGBColorSpace' flags);  				bmp.TranslateCTM (0' pixelHeight);  				bmp.ScaleCTM ((float)scaleFactor' (float)-scaleFactor);    				var ctx = new CGContextBackend {  					Context = bmp'  					Size = new CGSize ((nfloat)width' (nfloat)height)'  					InverseViewTransform = bmp.GetCTM ().Invert ()'  					ScaleFactor = scaleFactor  				};    				var ci = (CustomImage)idesc.Backend;  				ci.DrawInContext (ctx' idesc);    				var img = new NSImage (((CGBitmapContext)bmp).ToImage ()' new CGSize (pixelWidth' pixelHeight));  				var imageData = img.AsTiff ();  				var imageRep = (NSBitmapImageRep)NSBitmapImageRep.ImageRepFromData (imageData);  				var im = new NSImage ();  				im.AddRepresentation (imageRep);  				im.Size = new CGSize ((nfloat)width' (nfloat)height);  				bmp.Dispose ();  				return im;  			}  			else {  				NSImage img = (NSImage)idesc.Backend;  				NSBitmapImageRep bitmap = img.Representations ().OfType<NSBitmapImageRep> ().FirstOrDefault ();  				if (bitmap == null) {  					var imageData = img.AsTiff ();  					var imageRep = (NSBitmapImageRep)NSBitmapImageRep.ImageRepFromData (imageData);  					var im = new NSImage ();  					im.AddRepresentation (imageRep);  					im.Size = new CGSize ((nfloat)width' (nfloat)height);  					return im;  				}  				return idesc.Backend;  			}
Magic Number,Xwt.Mac,ImageHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ImageHandler.cs,LoadStockIcon,The following statement contains a magic number: if (type != 0 && GetIconRef (-32768/*kOnSystemDisk*/' 1835098995/*kSystemIconsCreator*/' type' out iconRef) == 0) {  				try {  					var alloced = Messaging.IntPtr_objc_msgSend (cls_NSImage' sel_alloc);  					image = (NSImage) Runtime.GetNSObject (Messaging.IntPtr_objc_msgSend_IntPtr (alloced' sel_initWithIconRef' iconRef));  					// NSImage (IntPtr) ctor retains' but since it is the sole owner' we don't want that  					Messaging.void_objc_msgSend (image.Handle' sel_release);  				} finally {  					ReleaseIconRef (iconRef);  				}  			}
Magic Number,Xwt.Mac,ImageHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ImageHandler.cs,LoadStockIcon,The following statement contains a magic number: if (type != 0 && GetIconRef (-32768/*kOnSystemDisk*/' 1835098995/*kSystemIconsCreator*/' type' out iconRef) == 0) {  				try {  					var alloced = Messaging.IntPtr_objc_msgSend (cls_NSImage' sel_alloc);  					image = (NSImage) Runtime.GetNSObject (Messaging.IntPtr_objc_msgSend_IntPtr (alloced' sel_initWithIconRef' iconRef));  					// NSImage (IntPtr) ctor retains' but since it is the sole owner' we don't want that  					Messaging.void_objc_msgSend (image.Handle' sel_release);  				} finally {  					ReleaseIconRef (iconRef);  				}  			}
Magic Number,Xwt.Mac,MacTextLayoutBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\TextLayoutBackendHandler.cs,GetMeanline,The following statement contains a magic number: return GetBaseline (backend) - li.Font.XHeight / 2;
Magic Number,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetAvailableFamilyFaces,The following statement contains a magic number: foreach (var nsFace in NSFontManager.SharedFontManager.AvailableMembersOfFontFamily(family)) {  				var name = NSString.FromHandle(nsFace.ValueAt(1));  				var weight = ((NSNumber) NSValue.ValueFromPointer (nsFace.ValueAt (2)).NonretainedObjectValue).Int32Value;  				var traits = (NSFontTraitMask) ((NSNumber)NSValue.ValueFromPointer (nsFace.ValueAt (3)).NonretainedObjectValue).Int32Value;  				yield return new KeyValuePair<string' object>(name' FontData.FromFamily(family' traits' weight' 0));  			}
Magic Number,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetAvailableFamilyFaces,The following statement contains a magic number: foreach (var nsFace in NSFontManager.SharedFontManager.AvailableMembersOfFontFamily(family)) {  				var name = NSString.FromHandle(nsFace.ValueAt(1));  				var weight = ((NSNumber) NSValue.ValueFromPointer (nsFace.ValueAt (2)).NonretainedObjectValue).Int32Value;  				var traits = (NSFontTraitMask) ((NSNumber)NSValue.ValueFromPointer (nsFace.ValueAt (3)).NonretainedObjectValue).Int32Value;  				yield return new KeyValuePair<string' object>(name' FontData.FromFamily(family' traits' weight' 0));  			}
Magic Number,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetWeightValue,The following statement contains a magic number: switch (weight) {  			case FontWeight.Thin:  				return 1;  			case FontWeight.Ultralight:  				return 2;  			case FontWeight.Light:  				return 3;  			case FontWeight.Book:  				return 4;  			case FontWeight.Normal:  				return 5;  			case FontWeight.Medium:  				return 6;  			case FontWeight.Semibold:  				return 8;  			case FontWeight.Bold:  				return 9;  			case FontWeight.Ultrabold:  				return 10;  			case FontWeight.Heavy:  				return 11;  			case FontWeight.Ultraheavy:  				return 12;  			default:  				return 13;  			}
Magic Number,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetWeightValue,The following statement contains a magic number: switch (weight) {  			case FontWeight.Thin:  				return 1;  			case FontWeight.Ultralight:  				return 2;  			case FontWeight.Light:  				return 3;  			case FontWeight.Book:  				return 4;  			case FontWeight.Normal:  				return 5;  			case FontWeight.Medium:  				return 6;  			case FontWeight.Semibold:  				return 8;  			case FontWeight.Bold:  				return 9;  			case FontWeight.Ultrabold:  				return 10;  			case FontWeight.Heavy:  				return 11;  			case FontWeight.Ultraheavy:  				return 12;  			default:  				return 13;  			}
Magic Number,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetWeightValue,The following statement contains a magic number: switch (weight) {  			case FontWeight.Thin:  				return 1;  			case FontWeight.Ultralight:  				return 2;  			case FontWeight.Light:  				return 3;  			case FontWeight.Book:  				return 4;  			case FontWeight.Normal:  				return 5;  			case FontWeight.Medium:  				return 6;  			case FontWeight.Semibold:  				return 8;  			case FontWeight.Bold:  				return 9;  			case FontWeight.Ultrabold:  				return 10;  			case FontWeight.Heavy:  				return 11;  			case FontWeight.Ultraheavy:  				return 12;  			default:  				return 13;  			}
Magic Number,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetWeightValue,The following statement contains a magic number: switch (weight) {  			case FontWeight.Thin:  				return 1;  			case FontWeight.Ultralight:  				return 2;  			case FontWeight.Light:  				return 3;  			case FontWeight.Book:  				return 4;  			case FontWeight.Normal:  				return 5;  			case FontWeight.Medium:  				return 6;  			case FontWeight.Semibold:  				return 8;  			case FontWeight.Bold:  				return 9;  			case FontWeight.Ultrabold:  				return 10;  			case FontWeight.Heavy:  				return 11;  			case FontWeight.Ultraheavy:  				return 12;  			default:  				return 13;  			}
Magic Number,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetWeightValue,The following statement contains a magic number: switch (weight) {  			case FontWeight.Thin:  				return 1;  			case FontWeight.Ultralight:  				return 2;  			case FontWeight.Light:  				return 3;  			case FontWeight.Book:  				return 4;  			case FontWeight.Normal:  				return 5;  			case FontWeight.Medium:  				return 6;  			case FontWeight.Semibold:  				return 8;  			case FontWeight.Bold:  				return 9;  			case FontWeight.Ultrabold:  				return 10;  			case FontWeight.Heavy:  				return 11;  			case FontWeight.Ultraheavy:  				return 12;  			default:  				return 13;  			}
Magic Number,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetWeightValue,The following statement contains a magic number: switch (weight) {  			case FontWeight.Thin:  				return 1;  			case FontWeight.Ultralight:  				return 2;  			case FontWeight.Light:  				return 3;  			case FontWeight.Book:  				return 4;  			case FontWeight.Normal:  				return 5;  			case FontWeight.Medium:  				return 6;  			case FontWeight.Semibold:  				return 8;  			case FontWeight.Bold:  				return 9;  			case FontWeight.Ultrabold:  				return 10;  			case FontWeight.Heavy:  				return 11;  			case FontWeight.Ultraheavy:  				return 12;  			default:  				return 13;  			}
Magic Number,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetWeightValue,The following statement contains a magic number: switch (weight) {  			case FontWeight.Thin:  				return 1;  			case FontWeight.Ultralight:  				return 2;  			case FontWeight.Light:  				return 3;  			case FontWeight.Book:  				return 4;  			case FontWeight.Normal:  				return 5;  			case FontWeight.Medium:  				return 6;  			case FontWeight.Semibold:  				return 8;  			case FontWeight.Bold:  				return 9;  			case FontWeight.Ultrabold:  				return 10;  			case FontWeight.Heavy:  				return 11;  			case FontWeight.Ultraheavy:  				return 12;  			default:  				return 13;  			}
Magic Number,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetWeightValue,The following statement contains a magic number: switch (weight) {  			case FontWeight.Thin:  				return 1;  			case FontWeight.Ultralight:  				return 2;  			case FontWeight.Light:  				return 3;  			case FontWeight.Book:  				return 4;  			case FontWeight.Normal:  				return 5;  			case FontWeight.Medium:  				return 6;  			case FontWeight.Semibold:  				return 8;  			case FontWeight.Bold:  				return 9;  			case FontWeight.Ultrabold:  				return 10;  			case FontWeight.Heavy:  				return 11;  			case FontWeight.Ultraheavy:  				return 12;  			default:  				return 13;  			}
Magic Number,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetWeightValue,The following statement contains a magic number: switch (weight) {  			case FontWeight.Thin:  				return 1;  			case FontWeight.Ultralight:  				return 2;  			case FontWeight.Light:  				return 3;  			case FontWeight.Book:  				return 4;  			case FontWeight.Normal:  				return 5;  			case FontWeight.Medium:  				return 6;  			case FontWeight.Semibold:  				return 8;  			case FontWeight.Bold:  				return 9;  			case FontWeight.Ultrabold:  				return 10;  			case FontWeight.Heavy:  				return 11;  			case FontWeight.Ultraheavy:  				return 12;  			default:  				return 13;  			}
Magic Number,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetWeightValue,The following statement contains a magic number: switch (weight) {  			case FontWeight.Thin:  				return 1;  			case FontWeight.Ultralight:  				return 2;  			case FontWeight.Light:  				return 3;  			case FontWeight.Book:  				return 4;  			case FontWeight.Normal:  				return 5;  			case FontWeight.Medium:  				return 6;  			case FontWeight.Semibold:  				return 8;  			case FontWeight.Bold:  				return 9;  			case FontWeight.Ultrabold:  				return 10;  			case FontWeight.Heavy:  				return 11;  			case FontWeight.Ultraheavy:  				return 12;  			default:  				return 13;  			}
Magic Number,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetWeightValue,The following statement contains a magic number: switch (weight) {  			case FontWeight.Thin:  				return 1;  			case FontWeight.Ultralight:  				return 2;  			case FontWeight.Light:  				return 3;  			case FontWeight.Book:  				return 4;  			case FontWeight.Normal:  				return 5;  			case FontWeight.Medium:  				return 6;  			case FontWeight.Semibold:  				return 8;  			case FontWeight.Bold:  				return 9;  			case FontWeight.Ultrabold:  				return 10;  			case FontWeight.Heavy:  				return 11;  			case FontWeight.Ultraheavy:  				return 12;  			default:  				return 13;  			}
Magic Number,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetWeightFromValue,The following statement contains a magic number: if (w == 2)  				return FontWeight.Ultralight;
Magic Number,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetWeightFromValue,The following statement contains a magic number: if (w == 3)  				return FontWeight.Light;
Magic Number,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetWeightFromValue,The following statement contains a magic number: if (w == 4)  				return FontWeight.Book;
Magic Number,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetWeightFromValue,The following statement contains a magic number: if (w == 5)  				return FontWeight.Normal;
Magic Number,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetWeightFromValue,The following statement contains a magic number: if (w == 6)  				return FontWeight.Medium;
Magic Number,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetWeightFromValue,The following statement contains a magic number: if (w <= 8)  				return FontWeight.Semibold;
Magic Number,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetWeightFromValue,The following statement contains a magic number: if (w == 9)  				return FontWeight.Bold;
Magic Number,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetWeightFromValue,The following statement contains a magic number: if (w == 10)  				return FontWeight.Ultrabold;
Magic Number,Xwt.Mac,MacFontBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FontBackendHandler.cs,GetWeightFromValue,The following statement contains a magic number: if (w == 11)  				return FontWeight.Heavy;
Magic Number,Xwt.Mac,CustomCell,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\TextEntryBackend.cs,VerticalCenteredRectForBounds,The following statement contains a magic number: var offset = (aRect.Height - textHeight) / 2;
Magic Number,Xwt.Mac,MacImageBuilderBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ImageBuilderBackendHandler.cs,CreateImageBuilder,The following statement contains a magic number: switch (format) {    			case ImageFormat.ARGB32:  				bytesPerRow = width * 4;  				flags |= CGBitmapFlags.PremultipliedFirst;  				break;    			case ImageFormat.RGB24:  				bytesPerRow = width * 3;  				flags |= CGBitmapFlags.None;  				break;    			default:  				throw new NotImplementedException ("ImageFormat: " + format.ToString ());  			}
Magic Number,Xwt.Mac,MacImageBuilderBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ImageBuilderBackendHandler.cs,CreateImageBuilder,The following statement contains a magic number: switch (format) {    			case ImageFormat.ARGB32:  				bytesPerRow = width * 4;  				flags |= CGBitmapFlags.PremultipliedFirst;  				break;    			case ImageFormat.RGB24:  				bytesPerRow = width * 3;  				flags |= CGBitmapFlags.None;  				break;    			default:  				throw new NotImplementedException ("ImageFormat: " + format.ToString ());  			}
Magic Number,Xwt.Mac,MacImageBuilderBackendHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ImageBuilderBackendHandler.cs,CreateImageBuilder,The following statement contains a magic number: var bmp = new CGBitmapContext (IntPtr.Zero' width' height' 8' bytesPerRow' Util.DeviceRGBColorSpace' flags);
Magic Number,Xwt.Mac,FrameBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FrameBackend.cs,SetFrameType,The following statement contains a magic number: switch (type) {  			case FrameType.WidgetBox:  				Widget.BoxType = NSBoxType.NSBoxPrimary;  				Widget.ContentViewMargins = new CGSize (5'5);  				break;  			case FrameType.Custom:  				Widget.BoxType = NSBoxType.NSBoxCustom;  				Widget.ContentViewMargins = new CGSize (0'0);  				break;  			}
Magic Number,Xwt.Mac,FrameBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FrameBackend.cs,SetFrameType,The following statement contains a magic number: switch (type) {  			case FrameType.WidgetBox:  				Widget.BoxType = NSBoxType.NSBoxPrimary;  				Widget.ContentViewMargins = new CGSize (5'5);  				break;  			case FrameType.Custom:  				Widget.BoxType = NSBoxType.NSBoxCustom;  				Widget.ContentViewMargins = new CGSize (0'0);  				break;  			}
Magic Number,Xwt.Mac,AlertDialogBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\AlertDialogBackend.cs,Run,The following statement contains a magic number: if (message.Options.Count > 0) {  				AccessoryView = new NSView ();  				var optionsSize = new CGSize (0' 3);    				foreach (var op in message.Options) {  					var chk = new NSButton ();  					chk.SetButtonType (NSButtonType.Switch);  					chk.Title = op.Text;  					chk.State = op.Value ? NSCellStateValue.On : NSCellStateValue.Off;  					chk.Activated += (sender' e) => message.SetOptionValue (op.Id' chk.State == NSCellStateValue.On);    					chk.SizeToFit ();  					chk.Frame = new CGRect (new CGPoint (0' optionsSize.Height)' chk.FittingSize);    					optionsSize.Height += chk.FittingSize.Height + 6;  					optionsSize.Width = (float) Math.Max (optionsSize.Width' chk.FittingSize.Width);    					AccessoryView.AddSubview (chk);  					chk.NeedsDisplay = true;  				}    				AccessoryView.SetFrameSize (optionsSize);  			}
Magic Number,Xwt.Mac,AlertDialogBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\AlertDialogBackend.cs,Run,The following statement contains a magic number: if (message.Options.Count > 0) {  				AccessoryView = new NSView ();  				var optionsSize = new CGSize (0' 3);    				foreach (var op in message.Options) {  					var chk = new NSButton ();  					chk.SetButtonType (NSButtonType.Switch);  					chk.Title = op.Text;  					chk.State = op.Value ? NSCellStateValue.On : NSCellStateValue.Off;  					chk.Activated += (sender' e) => message.SetOptionValue (op.Id' chk.State == NSCellStateValue.On);    					chk.SizeToFit ();  					chk.Frame = new CGRect (new CGPoint (0' optionsSize.Height)' chk.FittingSize);    					optionsSize.Height += chk.FittingSize.Height + 6;  					optionsSize.Width = (float) Math.Max (optionsSize.Width' chk.FittingSize.Width);    					AccessoryView.AddSubview (chk);  					chk.NeedsDisplay = true;  				}    				AccessoryView.SetFrameSize (optionsSize);  			}
Magic Number,Xwt.Mac,AlertDialogBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\AlertDialogBackend.cs,Run,The following statement contains a magic number: if (win != null)  				return sortedButtons [(int)this.RunSheetModal (win) - 1000];
Magic Number,Xwt.Mac,AlertDialogBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\AlertDialogBackend.cs,Run,The following statement contains a magic number: return sortedButtons [(int)this.RunModal () - 1000];
Magic Number,Xwt.Mac,MacSpinButton,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\SpinButtonBackend.cs,SizeToFit,The following statement contains a magic number: minWidth = (nfloat)Math.Max (minWidth' 60);
Magic Number,Xwt.Mac,MacSpinButton,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\SpinButtonBackend.cs,ResizeSubviewsWithOldSize,The following statement contains a magic number: var stepperY = (Frame.Height - stepper.Frame.Height) / 2;
Magic Number,Xwt.Mac,MacSpinButton,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\SpinButtonBackend.cs,ResizeSubviewsWithOldSize,The following statement contains a magic number: var inputY = (Frame.Height - input.Frame.Height) / 2;
Magic Number,Xwt.Mac,ExpanderBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ExpanderBackend.cs,ExpanderBackend,The following statement contains a magic number: SetMinSize (10' 21);
Magic Number,Xwt.Mac,ExpanderBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ExpanderBackend.cs,ExpanderBackend,The following statement contains a magic number: SetMinSize (10' 21);
Magic Number,Xwt.Mac,MacExpander,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ExpanderBackend.cs,MacExpander,The following statement contains a magic number: expander = new ExpanderWidget () {  				Frame = new CGRect (0' 0' 80' 21)'  				AutoresizingMask = NSViewResizingMask.WidthSizable  			};
Magic Number,Xwt.Mac,MacExpander,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ExpanderBackend.cs,MacExpander,The following statement contains a magic number: expander = new ExpanderWidget () {  				Frame = new CGRect (0' 0' 80' 21)'  				AutoresizingMask = NSViewResizingMask.WidthSizable  			};
Magic Number,Xwt.Mac,MacExpander,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ExpanderBackend.cs,MacExpander,The following statement contains a magic number: box.SetFrameOrigin (new CGPoint (0' 21));
Magic Number,Xwt.Mac,ExpanderWidget,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ExpanderBackend.cs,ExpanderWidget,The following statement contains a magic number: disclosure = new NSButton {  				BezelStyle = NSBezelStyle.Disclosure'  				AutoresizingMask = NSViewResizingMask.MaxYMargin'  				ImagePosition = NSCellImagePosition.ImageOnly'  				Frame = new CGRect (5' 4' 13' 13)'  				State = NSCellStateValue.Off  			};
Magic Number,Xwt.Mac,ExpanderWidget,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ExpanderBackend.cs,ExpanderWidget,The following statement contains a magic number: disclosure = new NSButton {  				BezelStyle = NSBezelStyle.Disclosure'  				AutoresizingMask = NSViewResizingMask.MaxYMargin'  				ImagePosition = NSCellImagePosition.ImageOnly'  				Frame = new CGRect (5' 4' 13' 13)'  				State = NSCellStateValue.Off  			};
Magic Number,Xwt.Mac,ExpanderWidget,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ExpanderBackend.cs,ExpanderWidget,The following statement contains a magic number: disclosure = new NSButton {  				BezelStyle = NSBezelStyle.Disclosure'  				AutoresizingMask = NSViewResizingMask.MaxYMargin'  				ImagePosition = NSCellImagePosition.ImageOnly'  				Frame = new CGRect (5' 4' 13' 13)'  				State = NSCellStateValue.Off  			};
Magic Number,Xwt.Mac,ExpanderWidget,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ExpanderBackend.cs,ExpanderWidget,The following statement contains a magic number: disclosure = new NSButton {  				BezelStyle = NSBezelStyle.Disclosure'  				AutoresizingMask = NSViewResizingMask.MaxYMargin'  				ImagePosition = NSCellImagePosition.ImageOnly'  				Frame = new CGRect (5' 4' 13' 13)'  				State = NSCellStateValue.Off  			};
Magic Number,Xwt.Mac,ExpanderWidget,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ExpanderBackend.cs,ExpanderWidget,The following statement contains a magic number: label = new NSButton {  				Bordered = false'  				AutoresizingMask = NSViewResizingMask.MaxYMargin | NSViewResizingMask.WidthSizable'  				Alignment = NSTextAlignment.Left'  				Frame = new CGRect (17' 3' 60' 13)'  				Target = disclosure'  				Action = new Selector ("performClick:")  			};
Magic Number,Xwt.Mac,ExpanderWidget,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ExpanderBackend.cs,ExpanderWidget,The following statement contains a magic number: label = new NSButton {  				Bordered = false'  				AutoresizingMask = NSViewResizingMask.MaxYMargin | NSViewResizingMask.WidthSizable'  				Alignment = NSTextAlignment.Left'  				Frame = new CGRect (17' 3' 60' 13)'  				Target = disclosure'  				Action = new Selector ("performClick:")  			};
Magic Number,Xwt.Mac,ExpanderWidget,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ExpanderBackend.cs,ExpanderWidget,The following statement contains a magic number: label = new NSButton {  				Bordered = false'  				AutoresizingMask = NSViewResizingMask.MaxYMargin | NSViewResizingMask.WidthSizable'  				Alignment = NSTextAlignment.Left'  				Frame = new CGRect (17' 3' 60' 13)'  				Target = disclosure'  				Action = new Selector ("performClick:")  			};
Magic Number,Xwt.Mac,ExpanderWidget,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ExpanderBackend.cs,ExpanderWidget,The following statement contains a magic number: label = new NSButton {  				Bordered = false'  				AutoresizingMask = NSViewResizingMask.MaxYMargin | NSViewResizingMask.WidthSizable'  				Alignment = NSTextAlignment.Left'  				Frame = new CGRect (17' 3' 60' 13)'  				Target = disclosure'  				Action = new Selector ("performClick:")  			};
Magic Number,Xwt.Mac,ExpanderWidget,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ExpanderBackend.cs,DrawRect,The following statement contains a magic number: backgroundGradient.DrawInRect (Frame' -90);
Magic Number,Xwt.Mac,CollapsibleBox,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ExpanderBackend.cs,SetFrameSize,The following statement contains a magic number: if (animating) {  				NSAnimation animation = new NSViewAnimation (new [] {  					NSDictionary.FromObjectsAndKeys (  						new object[] { this' NSValue.FromCGRect (Frame)' NSValue.FromCGRect (newFrame) }'  						new object[] { NSViewAnimation.TargetKey' NSViewAnimation.StartFrameKey' NSViewAnimation.EndFrameKey }  					)  				});  				animation.AnimationBlockingMode = NSAnimationBlockingMode.Nonblocking;  				animation.Duration = 0.25;  				animation.StartAnimation ();  			} else {  				Superview.SetNeedsDisplayInRect (Frame);  				Frame = newFrame;  				NeedsDisplay = true;  			}
Magic Number,Xwt.Mac,FileDialogBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FileDialogBackend.cs,Initialize,The following statement contains a magic number: this.Prompt = Application.TranslationCatalog.GetPluralString ("Select File"' "Select Files"' multiselect ? 2 : 1);
Magic Number,Xwt.Mac,SelectFolderDialogBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\SelectFolderDialogBackend.cs,Initialize,The following statement contains a magic number: this.Prompt = Application.TranslationCatalog.GetPluralString("Select Directory"' "Select Directories"' multiselect ? 2 : 1);
Magic Number,Xwt.Mac,DialogBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\DialogBackend.cs,SetButtons,The following statement contains a magic number: foreach (var b in buttonList.OrderBy (b => b == DefaultButton).Reverse ()) {  				var button = new Button { Font = Font.SystemFont };  				var tb = b;  				button.Clicked += delegate {  					OnClicked (tb);  				};  				button.MinWidth = 77; // Dialog buttons have a minimal width of 77px on Mac    				if (b.PackOrigin == PackOrigin.End)  					buttonBox.PackEnd (button);  				else  					buttonBox.PackStart (button);  				buttons [b] = button;  				UpdateButton (b' button);  			}
Magic Number,Xwt.Mac,DialogBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\DialogBackend.cs,UpdateButton,The following statement contains a magic number: realButton.WidthRequest = s.Width + 16;
Magic Number,Xwt.Mac,MacSystemInformation,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\MacSystemInformation.cs,Gestalt,The following statement contains a magic number: System.Diagnostics.Debug.Assert (selector != null && selector.Length == 4);
Magic Number,Xwt.Mac,MacSystemInformation,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\MacSystemInformation.cs,Gestalt,The following statement contains a magic number: int cc = selector[3] | (selector[2] << 8) | (selector[1] << 16) | (selector[0] << 24);
Magic Number,Xwt.Mac,MacSystemInformation,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\MacSystemInformation.cs,Gestalt,The following statement contains a magic number: int cc = selector[3] | (selector[2] << 8) | (selector[1] << 16) | (selector[0] << 24);
Magic Number,Xwt.Mac,MacSystemInformation,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\MacSystemInformation.cs,Gestalt,The following statement contains a magic number: int cc = selector[3] | (selector[2] << 8) | (selector[1] << 16) | (selector[0] << 24);
Magic Number,Xwt.Mac,MacSystemInformation,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\MacSystemInformation.cs,Gestalt,The following statement contains a magic number: int cc = selector[3] | (selector[2] << 8) | (selector[1] << 16) | (selector[0] << 24);
Magic Number,Xwt.Mac,MacSystemInformation,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\MacSystemInformation.cs,Gestalt,The following statement contains a magic number: int cc = selector[3] | (selector[2] << 8) | (selector[1] << 16) | (selector[0] << 24);
Magic Number,Xwt.Mac,MacRichTextBuffer,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\RichTextViewBackend.cs,ToAttributedString,The following statement contains a magic number: if (font != null) {  				fontSize = (float) font.PointSize;  				fontFamily = font.FontName;  			} else {  				fontSize = 16;  				fontFamily = "sans-serif";  			}
Magic Number,Xwt.Mac,MacRichTextBuffer,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\RichTextViewBackend.cs,CreateStringFromHTML,The following statement contains a magic number: IntPtr docAttributesPtr = Marshal.AllocHGlobal (4);
Magic Number,Xwt.Mac,MacRichTextBuffer,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\RichTextViewBackend.cs,EmitStartHeader,The following statement contains a magic number: if (level > 6)  				level = 6;
Magic Number,Xwt.Mac,MacRichTextBuffer,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\RichTextViewBackend.cs,EmitStartHeader,The following statement contains a magic number: if (level > 6)  				level = 6;
Magic Number,Xwt.Mac,CustomScroller,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ScrollbarBackend.cs,UpdateValue,The following statement contains a magic number: if (lowerValue >= upperValue) {  				DoubleValue = 0.5;  				return;  			}
Magic Number,Xwt.Mac,CustomScroller,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ScrollbarBackend.cs,UpdateValue,The following statement contains a magic number: if (val + pageSize > upperValue) {  				val = upperValue - pageSize;  				if (val < lowerValue) {  					DoubleValue = 0.5;  					return;  				}  			}
Magic Number,Xwt.Mac,SliderBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\SliderBackend.cs,Initialize,The following statement contains a magic number: if (dir == Orientation.Horizontal)  				Widget.SetFrameSize (new CGSize (80' 30));  			else  				Widget.SetFrameSize (new CGSize (30' 80));
Magic Number,Xwt.Mac,SliderBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\SliderBackend.cs,Initialize,The following statement contains a magic number: if (dir == Orientation.Horizontal)  				Widget.SetFrameSize (new CGSize (80' 30));  			else  				Widget.SetFrameSize (new CGSize (30' 80));
Magic Number,Xwt.Mac,SliderBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\SliderBackend.cs,Initialize,The following statement contains a magic number: if (dir == Orientation.Horizontal)  				Widget.SetFrameSize (new CGSize (80' 30));  			else  				Widget.SetFrameSize (new CGSize (30' 80));
Magic Number,Xwt.Mac,SliderBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\SliderBackend.cs,Initialize,The following statement contains a magic number: if (dir == Orientation.Horizontal)  				Widget.SetFrameSize (new CGSize (80' 30));  			else  				Widget.SetFrameSize (new CGSize (30' 80));
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following statement contains a magic number: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Magic Number,Xwt.Mac,ColorPickerBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ColorPickerBackend.cs,GetPreferredSize,The following statement contains a magic number: return new Size (35' 20);
Magic Number,Xwt.Mac,ColorPickerBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ColorPickerBackend.cs,GetPreferredSize,The following statement contains a magic number: return new Size (35' 20);
Missing Default,Xwt.Mac,ButtonBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ButtonBackend.cs,SetContent,The following switch statement is missing a default case: switch (((Button)Frontend).Type) {  			case ButtonType.Help:  			case ButtonType.Disclosure:  				return;  			}
Missing Default,Xwt.Mac,ButtonBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ButtonBackend.cs,SetContent,The following switch statement is missing a default case: switch (imagePosition) {  				case ContentPosition.Bottom: Widget.ImagePosition = NSCellImagePosition.ImageBelow; break;  				case ContentPosition.Left: Widget.ImagePosition = NSCellImagePosition.ImageLeft; break;  				case ContentPosition.Right: Widget.ImagePosition = NSCellImagePosition.ImageRight; break;  				case ContentPosition.Top: Widget.ImagePosition = NSCellImagePosition.ImageAbove; break;  				case ContentPosition.Center: Widget.ImagePosition = string.IsNullOrEmpty (label) ? NSCellImagePosition.ImageOnly : NSCellImagePosition.ImageOverlaps; break;  				}
Missing Default,Xwt.Mac,ButtonBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ButtonBackend.cs,SetButtonStyle,The following switch statement is missing a default case: switch (style) {  				case ButtonStyle.Normal:  					if (Widget.Image != null  						|| Frontend.MinHeight > 0  						|| Frontend.HeightRequest > 0  						|| Widget.Title.Contains (Environment.NewLine))  						Widget.BezelStyle = NSBezelStyle.RegularSquare;  					else  						Widget.BezelStyle = NSBezelStyle.Rounded;  					Widget.ShowsBorderOnlyWhileMouseInside = false;  					break;  				case ButtonStyle.Borderless:  				case ButtonStyle.Flat:  					Widget.BezelStyle = NSBezelStyle.ShadowlessSquare;  					Widget.ShowsBorderOnlyWhileMouseInside = true;  					break;  				}
Missing Default,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToIconType,The following switch statement is missing a default case: switch (id) {  			case StockIconId.Error:       return 1937010544; // 'stop'  			case StockIconId.Warning:     return 1667331444; // 'caut'  			case StockIconId.Information: return 1852798053; // 'note'  			case StockIconId.Question:    return 1903519091; // 'ques'  			case StockIconId.Remove:      return 1952736620; // 'tdel'  			}
Missing Default,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToIconSize,The following switch statement is missing a default case: switch (size) {  			case IconSize.Small: return new CGSize (16f' 16f);  			case IconSize.Large: return new CGSize (64f' 64f);  			}
Missing Default,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToMacValue,The following switch statement is missing a default case: switch (value)  			{  				case GridLines.Both:  					return (NSTableViewGridStyle.SolidHorizontalLine | NSTableViewGridStyle.SolidVerticalLine);  				case GridLines.Horizontal:  					return NSTableViewGridStyle.SolidHorizontalLine;  				case GridLines.Vertical:  					return NSTableViewGridStyle.SolidVerticalLine;  				case GridLines.None:  					return NSTableViewGridStyle.None;  			}
Missing Default,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,ToMacValue,The following switch statement is missing a default case: switch (style) {  				case DatePickerStyle.Date:  					return NSDatePickerElementFlags.YearMonthDateDay;  				case DatePickerStyle.DateTime:  					return NSDatePickerElementFlags.YearMonthDateDay | NSDatePickerElementFlags.HourMinuteSecond;  				case DatePickerStyle.Time:  					return NSDatePickerElementFlags.HourMinuteSecond;  			}
Missing Default,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,GetMacRole,The following switch statement is missing a default case: switch (role) {  				case Accessibility.Role.Button:  					return NSAccessibilityRoles.ButtonRole;  				//case Accessibility.Role.Calendar:  				//	break;  				case Accessibility.Role.Cell:  					return NSAccessibilityRoles.CellRole;  				case Accessibility.Role.CheckBox:  					return NSAccessibilityRoles.CheckBoxRole;  				case Accessibility.Role.ColorChooser:  					return NSAccessibilityRoles.ColorWellRole;  				case Accessibility.Role.Column:  					return NSAccessibilityRoles.ColumnRole;  				case Accessibility.Role.ComboBox:  					return NSAccessibilityRoles.ComboBoxRole;  				//case Accessibility.Role.Custom:  				//	break;  				//case Accessibility.Role.Dialog:  				//	return NSAccessibilityRoles.WindowRole;  				case Accessibility.Role.Disclosure:  					return NSAccessibilityRoles.DisclosureTriangleRole;  				//case Accessibility.Role.Grid:  				//	break;  				case Accessibility.Role.Group:  					return NSAccessibilityRoles.GroupRole;  				case Accessibility.Role.Image:  					return NSAccessibilityRoles.ImageRole;  				case Accessibility.Role.Label:  					return NSAccessibilityRoles.StaticTextRole;  				case Accessibility.Role.LevelIndicator:  					return NSAccessibilityRoles.LevelIndicatorRole;  				case Accessibility.Role.Link:  					return NSAccessibilityRoles.LinkRole;  				case Accessibility.Role.List:  					return NSAccessibilityRoles.ListRole;  				case Accessibility.Role.Menu:  					return NSAccessibilityRoles.MenuRole;  				case Accessibility.Role.MenuBar:  					return new NSString ("NSAccessibilityMenuBarRole");  				case Accessibility.Role.MenuBarItem:  					return NSAccessibilityRoles.MenuBarItemRole;  				case Accessibility.Role.MenuButton:  					return NSAccessibilityRoles.PopUpButtonRole;  				case Accessibility.Role.MenuItem:  				case Accessibility.Role.MenuItemCheckBox:  				case Accessibility.Role.MenuItemRadio:  					return NSAccessibilityRoles.MenuItemRole;  				case Accessibility.Role.Notebook:  					return NSAccessibilityRoles.TabGroupRole;  				//case Accessibility.Role.NotebookTab:  				//	break;  				case Accessibility.Role.Popup:  					return NSAccessibilityRoles.PopoverRole;  				case Accessibility.Role.ProgressBar:  					return NSAccessibilityRoles.ProgressIndicatorRole;  				case Accessibility.Role.RadioButton:  					return NSAccessibilityRoles.RadioButtonRole;  				case Accessibility.Role.RadioGroup:  					return NSAccessibilityRoles.RadioGroupRole;  				case Accessibility.Role.Row:  					return NSAccessibilityRoles.RowRole;  				case Accessibility.Role.ScrollBar:  					return NSAccessibilityRoles.ScrollBarRole;  				case Accessibility.Role.ScrollView:  					return NSAccessibilityRoles.ScrollAreaRole;  				//case Accessibility.Role.Separator:  				//	break;  				case Accessibility.Role.Slider:  					return NSAccessibilityRoles.SliderRole;  				case Accessibility.Role.SpinButton:  					return NSAccessibilityRoles.ValueIndicatorRole;  				case Accessibility.Role.Paned:  					return NSAccessibilityRoles.SplitGroupRole;  				case Accessibility.Role.PanedSplitter:  					return NSAccessibilityRoles.SplitterRole;  				case Accessibility.Role.Table:  					return NSAccessibilityRoles.TableRole;  				case Accessibility.Role.TextArea:  					return NSAccessibilityRoles.TextAreaRole;  				case Accessibility.Role.TextEntry:  					return NSAccessibilityRoles.TextFieldRole;  				case Accessibility.Role.ToggleButton:  					return NSAccessibilityRoles.ButtonRole;  				case Accessibility.Role.ToolBar:  					return NSAccessibilityRoles.ToolbarRole;  				//case Accessibility.Role.ToolTip:  				//	break;  				case Accessibility.Role.Tree:  					return NSAccessibilityRoles.OutlineRole;  				//case Accessibility.Role.Window:  				//	return NSAccessibilityRoles.WindowRole;  			}
Missing Default,Xwt.Mac,Util,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\Util.cs,GetMacSubrole,The following switch statement is missing a default case: switch (role) {  			case Accessibility.Role.ButtonClose:  				return NSAccessibilitySubroles.CloseButtonSubrole;  			case Accessibility.Role.ButtonMaximize:  				return NSAccessibilitySubroles.ZoomButtonSubrole;  			case Accessibility.Role.ButtonMinimize:  				return NSAccessibilitySubroles.MinimizeButtonSubrole;  			case Accessibility.Role.ButtonFullscreen:  				return NSAccessibilitySubroles.FullScreenButtonSubrole;  			case Accessibility.Role.TextEntrySearch:  				return NSAccessibilitySubroles.SearchFieldSubrole;  			case Accessibility.Role.TextEntryPassword:  				return NSAccessibilitySubroles.SecureTextFieldSubrole;  			}
Missing Default,Xwt.Mac,ViewBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ViewBackend.cs,EnableEvent,The following switch statement is missing a default case: switch (ev) {  				case WidgetEvent.GotFocus:  				case WidgetEvent.LostFocus:  					SetupFocusEvents (Widget.GetType ());  					break;  				}
Missing Default,Xwt.Mac,WindowBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\WindowBackend.cs,EnableEvent,The following switch statement is missing a default case: switch (@event) {  				case WindowFrameEvent.BoundsChanged:  					DidResize += HandleDidResize;  					DidMove += HandleDidResize;  					break;  				case WindowFrameEvent.Hidden:  					EnableVisibilityEvent (@event);  					this.WillClose += OnWillClose;  					break;  				case WindowFrameEvent.Shown:  					EnableVisibilityEvent (@event);  					break;  				case WindowFrameEvent.CloseRequested:  					WindowShouldClose = OnShouldClose;  					break;  				}
Missing Default,Xwt.Mac,WindowBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\WindowBackend.cs,DisableEvent,The following switch statement is missing a default case: switch (@event) {  					case WindowFrameEvent.BoundsChanged:  						DidResize -= HandleDidResize;  						DidMove -= HandleDidResize;  						break;  					case WindowFrameEvent.Hidden:  						this.WillClose -= OnWillClose;  						DisableVisibilityEvent (@event);  						break;  					case WindowFrameEvent.Shown:  						DisableVisibilityEvent (@event);  						break;  				}
Missing Default,Xwt.Mac,ImageHandler,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ImageHandler.cs,LoadStockIcon,The following switch statement is missing a default case: switch (id) {  			case StockIconId.ZoomIn: return NSImageFromResource ("zoom-in-16.png");  			case StockIconId.ZoomOut: return NSImageFromResource ("zoom-out-16.png");  			}
Missing Default,Xwt.Mac,ListViewBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ListViewBackend.cs,EnableEvent,The following switch statement is missing a default case: switch ((ListViewEvent)eventId) {  				case ListViewEvent.RowActivated:  					Table.DoubleClick += HandleDoubleClick;  					break;  				}
Missing Default,Xwt.Mac,ListViewBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ListViewBackend.cs,DisableEvent,The following switch statement is missing a default case: switch ((ListViewEvent)eventId) {  				case ListViewEvent.RowActivated:  					Table.DoubleClick -= HandleDoubleClick;  					Table.DoubleAction = null;  					break;  				}
Missing Default,Xwt.Mac,TableViewBackend<T;S>,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\TableViewBackend.cs,EnableEvent,The following switch statement is missing a default case: switch ((TableViewEvent)eventId) {  				case TableViewEvent.SelectionChanged:  					selChangeObserver = NSNotificationCenter.DefaultCenter.AddObserver (new NSString (SelectionChangeEventName)' HandleTreeSelectionDidChange' Table);  					break;  				}
Missing Default,Xwt.Mac,TableViewBackend<T;S>,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\TableViewBackend.cs,DisableEvent,The following switch statement is missing a default case: switch ((TableViewEvent)eventId) {  				case TableViewEvent.SelectionChanged:  					if (selChangeObserver != null)  						NSNotificationCenter.DefaultCenter.RemoveObserver (selChangeObserver);  					break;  				}
Missing Default,Xwt.Mac,TableViewBackend<T;S>,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\TableViewBackend.cs,UpdateColumn,The following switch statement is missing a default case: switch (change) {  				case ListViewColumnChange.CanResize:  					if (col.CanResize)  						tcol.ResizingMask |= NSTableColumnResizing.UserResizingMask;  					else  						tcol.ResizingMask &= ~NSTableColumnResizing.UserResizingMask;  					break;  				case ListViewColumnChange.Expanding:  					if (col.Expands)  						tcol.ResizingMask |= NSTableColumnResizing.Autoresizing;  					else  						tcol.ResizingMask &= ~NSTableColumnResizing.Autoresizing;  					break;  				case ListViewColumnChange.Cells:  					var c = CellUtil.CreateCell(ApplicationContext' Table' this' col.Views' cols.IndexOf(tcol));  					c.Alignment = col.Alignment.ToNSTextAlignment();  					tcol.DataCell = c;  					break;  				case ListViewColumnChange.Title:  					tcol.HeaderCell.Title = col.Title ?? string.Empty;  					if (!col.CanResize)  						tcol.SizeToFit();  					break;  				case ListViewColumnChange.Alignment:  					tcol.HeaderCell.Alignment = col.Alignment.ToNSTextAlignment();  					break;  			}
Missing Default,Xwt.Mac,FrameBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\FrameBackend.cs,SetFrameType,The following switch statement is missing a default case: switch (type) {  			case FrameType.WidgetBox:  				Widget.BoxType = NSBoxType.NSBoxPrimary;  				Widget.ContentViewMargins = new CGSize (5'5);  				break;  			case FrameType.Custom:  				Widget.BoxType = NSBoxType.NSBoxCustom;  				Widget.ContentViewMargins = new CGSize (0'0);  				break;  			}
Missing Default,Xwt.Mac,ToggleButtonBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ToggleButtonBackend.cs,NotifyToggle,The following switch statement is missing a default case: switch (((Button)Frontend).Style) {  				case ButtonStyle.Borderless:  				case ButtonStyle.Flat:  					Widget.ShowsBorderOnlyWhileMouseInside = !Active;  					break;  				}
Missing Default,Xwt.Mac,MacSpinButton,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\SpinButtonBackend.cs,DoCommandBySelector,The following switch statement is missing a default case: switch (commandSelector.Name) {  			case "moveUp:":  				Value += IncrementValue;  				return true;  			case "moveDown:":  				Value -= IncrementValue;  				return true;  			case "scrollPageUp:":  				Value += IncrementValue;  				return true;  			case "scrollPageDown:":  				Value -= IncrementValue;  				return true;  			}
Missing Default,Xwt.Mac,MacSpinButton,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\SpinButtonBackend.cs,EnableEvent,The following switch statement is missing a default case: switch ((SpinButtonEvent)eventId) {  				case SpinButtonEvent.ValueChanged: enableValueChangedEvent = true; break;  				}
Missing Default,Xwt.Mac,MacSpinButton,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\SpinButtonBackend.cs,DisableEvent,The following switch statement is missing a default case: switch ((SpinButtonEvent)eventId) {  				case SpinButtonEvent.ValueChanged: enableValueChangedEvent = false; break;  				}
Missing Default,Xwt.Mac,PopoverBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\PopoverBackend.cs,EnableEvent,The following switch statement is missing a default case: switch ((PopoverEvent)eventId) {  				case PopoverEvent.Closed:  					EnableCloseEvent = true;  					break;  				}
Missing Default,Xwt.Mac,PopoverBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\PopoverBackend.cs,DisableEvent,The following switch statement is missing a default case: switch ((PopoverEvent)eventId) {  				case PopoverEvent.Closed:  					EnableCloseEvent = false;  					break;  				}
Missing Default,Xwt.Mac,LinkLabelBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\LinkLabelBackend.cs,EnableEvent,The following switch statement is missing a default case: switch ((LinkLabelEvent) eventId) {  				case LinkLabelEvent.NavigateToUrl:  					((LinkLabelView)Widget).Clicked += HandleClicked;  					break;  				}
Missing Default,Xwt.Mac,LinkLabelBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\LinkLabelBackend.cs,DisableEvent,The following switch statement is missing a default case: switch ((LinkLabelEvent) eventId) {  				case LinkLabelEvent.NavigateToUrl:  					((LinkLabelView)Widget).Clicked -= HandleClicked;  					break;  				}
Missing Default,Xwt.Mac,CustomScroller,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\ScrollbarBackend.cs,HandleActivated,The following switch statement is missing a default case: switch (HitPart) {  			case NSScrollerPart.DecrementPage:  				value -= pageSize;  				if (value < lowerValue)  					value = lowerValue;  				UpdateValue ();  				break;  			case NSScrollerPart.IncrementPage:  				value += pageSize;  				if (value + pageSize > upperValue)  					value = upperValue - pageSize;  				if (value < lowerValue)  					value = lowerValue;  				UpdateValue ();  				break;  			case NSScrollerPart.DecrementLine:  				value -= stepIncrement;  				if (value < lowerValue)  					value = lowerValue;  				UpdateValue ();  				break;  			case NSScrollerPart.IncrementLine:  				value += stepIncrement;  				if (value + pageSize > upperValue)  					value = upperValue - pageSize;  				if (value < lowerValue)  					value = lowerValue;  				UpdateValue ();  				break;  			}
Missing Default,Xwt.Mac,WebViewBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\WebViewBackend.cs,EnableEvent,The following switch statement is missing a default case: switch ((WebViewEvent)eventId) {  					case WebViewEvent.NavigateToUrl: Widget.StartedProvisionalLoad += HandleStartedProvisionalLoad; break;  					case WebViewEvent.Loading: Widget.CommitedLoad += HandleLoadStarted; break;  					case WebViewEvent.Loaded: Widget.FinishedLoad += HandleLoadFinished; break;  					case WebViewEvent.TitleChanged: Widget.ReceivedTitle += HandleTitleChanged; break;  				}
Missing Default,Xwt.Mac,WebViewBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\WebViewBackend.cs,DisableEvent,The following switch statement is missing a default case: switch ((WebViewEvent)eventId) {  					case WebViewEvent.NavigateToUrl: Widget.StartedProvisionalLoad -= HandleStartedProvisionalLoad; break;  					case WebViewEvent.Loading: Widget.CommitedLoad -= HandleLoadStarted; break;  					case WebViewEvent.Loaded: Widget.FinishedLoad -= HandleLoadFinished; break;  					case WebViewEvent.TitleChanged: Widget.ReceivedTitle -= HandleTitleChanged; break;  				}
Missing Default,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following switch statement is missing a default case: switch (keyEvent.KeyCode) {  				case 65: return Key.NumPadDecimal;  // kVK_ANSI_KeypadDecimal        = 0x41  				case 67: return Key.NumPadMultiply; // kVK_ANSI_KeypadMultiply       = 0x43  				case 69: return Key.NumPadAdd;      // kVK_ANSI_KeypadPlus           = 0x45  				case 71: return Key.NumLock;        // kVK_ANSI_KeypadClear          = 0x47  				case 75: return Key.NumPadDivide;   // kVK_ANSI_KeypadDivide         = 0x4B  				case 76: return Key.NumPadEnter;    // kVK_ANSI_KeypadEnter          = 0x4C  				case 78: return Key.NumPadSubtract; // kVK_ANSI_KeypadMinus          = 0x4E  				case 81: return Key.NumPadEnter;    // kVK_ANSI_KeypadEquals         = 0x51  				case 82: return Key.NumPad0;        // kVK_ANSI_Keypad0              = 0x52  				case 83: return Key.NumPad1;        // kVK_ANSI_Keypad1              = 0x53  				case 84: return Key.NumPad2;        // kVK_ANSI_Keypad2              = 0x54  				case 85: return Key.NumPad3;        // kVK_ANSI_Keypad3              = 0x55  				case 86: return Key.NumPad4;        // kVK_ANSI_Keypad4              = 0x56  				case 87: return Key.NumPad5;        // kVK_ANSI_Keypad5              = 0x57  				case 88: return Key.NumPad6;        // kVK_ANSI_Keypad6              = 0x58  				case 89: return Key.NumPad7;        // kVK_ANSI_Keypad7              = 0x59  				case 91: return Key.NumPad8;        // kVK_ANSI_Keypad8              = 0x5B  				case 92: return Key.NumPad9;        // kVK_ANSI_Keypad9              = 0x5C    				case 36: return Key.Return;         // kVK_Return                    = 0x24  				case 48: return Key.Tab;            // kVK_Tab                       = 0x30  				case 49: return Key.Space;          // kVK_Space                     = 0x31  				case 51: return Key.BackSpace;      // kVK_Delete                    = 0x33  				case 53: return Key.Escape;         // kVK_Escape                    = 0x35  				case 55: return Key.MetaLeft;       // kVK_Command                   = 0x37  				case 56: return Key.ShiftLeft;      // kVK_Shift                     = 0x38  				case 57: return Key.CapsLock;       // kVK_CapsLock                  = 0x39  				case 58: return Key.AltLeft;        // kVK_Option                    = 0x3A  				case 59: return Key.ControlLeft;    // kVK_Control                   = 0x3B  				case 60: return Key.ShiftRight;     // kVK_RightShift                = 0x3C  				case 61: return Key.AltRight;       // kVK_RightOption               = 0x3D  				case 62: return Key.ControlRight;   // kVK_RightControl              = 0x3E  				//case 0x3F: return Key.FN;           // kVK_Function                  = 0x3F  				//case 0x40: return Key.F17;          // kVK_F17                       = 0x40  				//case 0x48: return Key.VolUp;        // kVK_VolumeUp                  = 0x48  				//case 0x49: return Key.VolDown;      // kVK_VolumeDown                = 0x49  				//case 0x4A: return Key.Mute;         // kVK_Mute                      = 0x4A  				//case 0x4F: return Key.F18;          // kVK_F18                       = 0x4F  				//case 0x50: return Key.F19;          // kVK_F19                       = 0x50  				//case 0x5A: return Key.F20;          // kVK_F20                       = 0x5A  				case 96: return Key.F5;             // kVK_F5                        = 0x60  				case 97: return Key.F6;             // kVK_F6                        = 0x61  				case 98: return Key.F7;             // kVK_F7                        = 0x62  				case 99: return Key.F3;             // kVK_F3                        = 0x63  				case 100: return Key.F8;            // kVK_F8                        = 0x64  				case 101: return Key.F9;            // kVK_F9                        = 0x65  				//case 0x67: return Key.F11;          // kVK_F11                       = 0x67  				case 105: return Key.Print;         // kVK_F13                       = 0x69  				//case 0x6A: return Key.F16;          // kVK_F16                       = 0x6A  				//case 0x6B: return Key.F14;          // kVK_F14                       = 0x6B  				case 109: return Key.F10;           // kVK_F10                       = 0x6D  				//case 0x6F: return Key.F12;          // kVK_F12                       = 0x6F  				//case 0x71: return Key.F15;          // kVK_F15                       = 0x71  				case 114: return Key.Help;          // kVK_Help                      = 0x72  				case 115: return Key.Home;          // kVK_Home                      = 0x73  				case 116: return Key.PageUp;        // kVK_PageUp                    = 0x74  				case 117: return Key.Delete;        // kVK_ForwardDelete             = 0x75  				case 118: return Key.F4;            // kVK_F4                        = 0x76  				case 119: return Key.End;           // kVK_End                       = 0x77  				case 120: return Key.F2;            // kVK_F2                        = 0x78  				case 121: return Key.PageDown;      // kVK_PageDown                  = 0x79  				case 122: return Key.F1;            // kVK_F1                        = 0x7A  				case 123: return Key.Left;          // kVK_LeftArrow                 = 0x7B  				case 124: return Key.Right;         // kVK_RightArrow                = 0x7C  				case 125: return Key.Down;          // kVK_DownArrow                 = 0x7D  				case 126: return Key.Up;            // kVK_UpArrow                   = 0x7E  			}
Missing Default,Xwt.Mac,KeyboardUtil,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\KeyboardUtil.cs,GetXwtKey,The following switch statement is missing a default case: switch (keyEvent.CharactersIgnoringModifiers[0]) {  				case 'A': return Key.A;  				case 'B': return Key.B;  				case 'C': return Key.C;  				case 'D': return Key.D;  				case 'E': return Key.E;  				case 'F': return Key.F;  				case 'G': return Key.G;  				case 'H': return Key.H;  				case 'I': return Key.I;  				case 'J': return Key.J;  				case 'K': return Key.K;  				case 'L': return Key.L;  				case 'M': return Key.M;  				case 'N': return Key.N;  				case 'O': return Key.O;  				case 'P': return Key.P;  				case 'Q': return Key.Q;  				case 'R': return Key.R;  				case 'S': return Key.S;  				case 'T': return Key.T;  				case 'U': return Key.U;  				case 'V': return Key.V;  				case 'W': return Key.W;  				case 'X': return Key.X;  				case 'Y': return Key.Y;  				case 'Z': return Key.Z;  				case 'a': return Key.a;  				case 'b': return Key.b;  				case 'c': return Key.c;  				case 'd': return Key.d;  				case 'e': return Key.e;  				case 'f': return Key.f;  				case 'g': return Key.g;  				case 'h': return Key.h;  				case 'i': return Key.i;  				case 'j': return Key.j;  				case 'k': return Key.k;  				case 'l': return Key.l;  				case 'm': return Key.m;  				case 'n': return Key.n;  				case 'o': return Key.o;  				case 'p': return Key.p;  				case 'q': return Key.q;  				case 'r': return Key.r;  				case 's': return Key.s;  				case 't': return Key.t;  				case 'u': return Key.u;  				case 'v': return Key.v;  				case 'w': return Key.w;  				case 'x': return Key.x;  				case 'y': return Key.y;  				case 'z': return Key.z;    				case '1': return Key.K1;  				case '2': return Key.K2;  				case '3': return Key.K3;  				case '4': return Key.K4;  				case '5': return Key.K5;  				case '6': return Key.K6;  				case '7': return Key.K7;  				case '8': return Key.K8;  				case '9': return Key.K9;  				case '0': return Key.K0;    				case '^': return Key.Caret;  				case '\'': return Key.Quote;  				case '(': return Key.LeftBracket;  				case ')': return Key.RightBracket;  				case '*': return Key.Asterisk;  				case '+': return Key.Plus;  				case ''': return Key.Comma;  				case '-': return Key.Minus;  				case '.': return Key.Period;  				case '/': return Key.Slash;  				case '\\': return Key.Backslash;  				case ':': return Key.Colon;  				case ';': return Key.Semicolon;  				case '<': return Key.Less;  				case '>': return Key.Greater;  				case '=': return Key.Equal;  				case '?': return Key.Question;  				case '@': return Key.At;  			}
Missing Default,Xwt.Mac,AccessibleBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\AccessibleBackend.cs,EnableEvent,The following switch statement is missing a default case: switch (ev) {  					case AccessibleEvent.Press:  						if (eventProxy != null)  							eventProxy.PerformAccessiblePressDelegate = PerformPress;  					break;  				}
Missing Default,Xwt.Mac,AccessibleBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\AccessibleBackend.cs,DisableEvent,The following switch statement is missing a default case: switch (ev) {  					case AccessibleEvent.Press:  						if (eventProxy != null)  							eventProxy.PerformAccessiblePressDelegate = null;  					break;  				}
Missing Default,Xwt.Mac,PopupWindowBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\PopupWindowBackend.cs,EnableEvent,The following switch statement is missing a default case: switch (@event) {  				case WindowFrameEvent.BoundsChanged:  					DidResize += HandleDidResize;  					DidMove += HandleDidResize;  					break;  				case WindowFrameEvent.Hidden:  					EnableVisibilityEvent (@event);  					this.WillClose += OnWillClose;  					break;  				case WindowFrameEvent.Shown:  					EnableVisibilityEvent (@event);  					break;  				case WindowFrameEvent.CloseRequested:  					WindowShouldClose = OnShouldClose;  					break;  				}
Missing Default,Xwt.Mac,PopupWindowBackend,C:\repos\mono_xwt\Xwt.XamMac\Xwt.Mac\PopupWindowBackend.cs,DisableEvent,The following switch statement is missing a default case: switch (@event) {  					case WindowFrameEvent.BoundsChanged:  						DidResize -= HandleDidResize;  						DidMove -= HandleDidResize;  						break;  					case WindowFrameEvent.Hidden:  						this.WillClose -= OnWillClose;  						DisableVisibilityEvent (@event);  						break;  					case WindowFrameEvent.Shown:  						DisableVisibilityEvent (@event);  						break;  				}
