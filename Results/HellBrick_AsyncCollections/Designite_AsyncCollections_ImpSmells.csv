Implementation smell,Namespace,Class,File,Method,Description
Complex Method,HellBrick.Collections,AsyncCollection<T>,C:\repos\HellBrick_AsyncCollections\AsyncCollections\AsyncCollection.cs,TakeFromAnyAsync,Cyclomatic complexity of the method is 9
Long Identifier,HellBrick.Collections.Internal,ExclusiveCompletionSourceGroup<T>,C:\repos\HellBrick_AsyncCollections\AsyncCollections\Internal\ExclusiveCompletionSourceGroup.cs,,The length of the parameter _cancellationRegistrationHolder is 31.
Long Statement,HellBrick.Collections,Batch,C:\repos\HellBrick_AsyncCollections\AsyncCollections\AsyncBatchQueue.cs,TryAdd,The length of the statement  "				//	The following is true if someone has beaten us to the last slot and we have to wait until the next batch comes along. " is 120.
Long Statement,HellBrick.Collections,Batch,C:\repos\HellBrick_AsyncCollections\AsyncCollections\AsyncBatchQueue.cs,TryAdd,The length of the statement  "				//	The following is true if we've taken the last slot' which means we're obligated to flush the current batch and create a new one. " is 131.
Long Statement,HellBrick.Collections,Batch,C:\repos\HellBrick_AsyncCollections\AsyncCollections\AsyncBatchQueue.cs,TryFlush,The length of the statement  "				int previousReservation = Interlocked.CompareExchange( ref _lastReservationIndex' _queue._batchSize' expectedPreviousReservation ); " is 131.
Long Statement,HellBrick.Collections,AsyncBoundedPriorityQueue<T>,C:\repos\HellBrick_AsyncCollections\AsyncCollections\AsyncBoundedPriorityQueue.cs,Add,The length of the statement  "				throw new ArgumentOutOfRangeException( nameof( priority )' priority' $"Priority can't be less than 0 or bigger than {PriorityLevels - 1}." ); " is 141.
Long Statement,HellBrick.Collections,AsyncCollection<T>,C:\repos\HellBrick_AsyncCollections\AsyncCollections\AsyncCollection.cs,TakeFromAnyAsync,The length of the statement  "				throw new ArgumentException( String.Format( "The collection array can't contain less than 1 or more than {0} collections."' TakeFromAnyMaxCollections )' "collections" ); " is 169.
Long Statement,HellBrick.Collections.Internal,ExclusiveCompletionSourceGroup<T>,C:\repos\HellBrick_AsyncCollections\AsyncCollections\Internal\ExclusiveCompletionSourceGroup.cs,UnlockCompetition,The length of the statement  "					/// #1: The token is canceled before <see cref="UnlockCompetition(CancellationToken)"/> is called' but after the token is validated higher up the stack. " is 152.
Long Statement,HellBrick.Collections.Internal,ExclusiveCompletionSourceGroup<T>,C:\repos\HellBrick_AsyncCollections\AsyncCollections\Internal\ExclusiveCompletionSourceGroup.cs,UnlockCompetition,The length of the statement  "					/// Is this is the case' the cancellation callbak will be called synchronously while <see cref="_completedSource"/> is still set to <see cref="State.Locked"/>. " is 159.
Long Statement,HellBrick.Collections.Internal,ExclusiveCompletionSourceGroup<T>,C:\repos\HellBrick_AsyncCollections\AsyncCollections\Internal\ExclusiveCompletionSourceGroup.cs,UnlockCompetition,The length of the statement  "					/// If this is the case' we have a simple race against the awaiters to progress from <see cref="State.Unlocked"/> to <see cref="State.Canceled"/>. " is 146.
Long Statement,HellBrick.Collections.Internal,ExclusiveCompletionSourceGroup<T>,C:\repos\HellBrick_AsyncCollections\AsyncCollections\Internal\ExclusiveCompletionSourceGroup.cs,UnlockCompetition,The length of the statement  "					if ( group.TryTransitionToCanceledIfStateIs( State.Locked ) || group.TryTransitionToCanceledIfStateIs( State.Unlocked ) ) " is 121.
Long Statement,HellBrick.Collections.Internal,ExclusiveCompletionSourceGroup<T>,C:\repos\HellBrick_AsyncCollections\AsyncCollections\Internal\ExclusiveCompletionSourceGroup.cs,UnlockCompetition,The length of the statement  "			// We can't do volatile reads/writes on a custom value type field' so we have to wrap the registration into a holder instance. " is 126.
Long Statement,HellBrick.Collections.Internal,ExclusiveCompletionSourceGroup<T>,C:\repos\HellBrick_AsyncCollections\AsyncCollections\Internal\ExclusiveCompletionSourceGroup.cs,UnlockCompetition,The length of the statement  "			// If the cancellation was processed synchronously' the state will already be set to Canceled and we must *NOT* unlock the competition. " is 135.
Magic Number,HellBrick.Collections,AnyResult,C:\repos\HellBrick_AsyncCollections\AsyncCollections\AnyResult.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				const int prime = -1521134295;  				int hash = 12345701;  				hash = hash * prime + EqualityComparer<T>.Default.GetHashCode( Value );  				hash = hash * prime + EqualityComparer<int>.Default.GetHashCode( CollectionIndex );  				return hash;  			}
Magic Number,HellBrick.Collections,AnyResult,C:\repos\HellBrick_AsyncCollections\AsyncCollections\AnyResult.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				const int prime = -1521134295;  				int hash = 12345701;  				hash = hash * prime + EqualityComparer<T>.Default.GetHashCode( Value );  				hash = hash * prime + EqualityComparer<int>.Default.GetHashCode( CollectionIndex );  				return hash;  			}
Magic Number,HellBrick.Collections,PrioritizedItem,C:\repos\HellBrick_AsyncCollections\AsyncCollections\PrioritizedItem.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				const int prime = -1521134295;  				int hash = 12345701;  				hash = hash * prime + EqualityComparer<T>.Default.GetHashCode( Item );  				hash = hash * prime + EqualityComparer<int>.Default.GetHashCode( Priority );  				return hash;  			}
Magic Number,HellBrick.Collections,PrioritizedItem,C:\repos\HellBrick_AsyncCollections\AsyncCollections\PrioritizedItem.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				const int prime = -1521134295;  				int hash = 12345701;  				hash = hash * prime + EqualityComparer<T>.Default.GetHashCode( Item );  				hash = hash * prime + EqualityComparer<int>.Default.GetHashCode( Priority );  				return hash;  			}
Magic Number,HellBrick.Collections.Internal,Factory,C:\repos\HellBrick_AsyncCollections\AsyncCollections\Internal\ExclusiveCompletionSourceGroup.cs,GetHashCode,The following statement contains a magic number: unchecked  				{  					const int prime = -1521134295;  					int hash = 12345701;  					hash = hash * prime + EqualityComparer<ExclusiveCompletionSourceGroup<T>>.Default.GetHashCode( _group );  					hash = hash * prime + EqualityComparer<int>.Default.GetHashCode( _index );  					return hash;  				}
Magic Number,HellBrick.Collections.Internal,Factory,C:\repos\HellBrick_AsyncCollections\AsyncCollections\Internal\ExclusiveCompletionSourceGroup.cs,GetHashCode,The following statement contains a magic number: unchecked  				{  					const int prime = -1521134295;  					int hash = 12345701;  					hash = hash * prime + EqualityComparer<ExclusiveCompletionSourceGroup<T>>.Default.GetHashCode( _group );  					hash = hash * prime + EqualityComparer<int>.Default.GetHashCode( _index );  					return hash;  				}
