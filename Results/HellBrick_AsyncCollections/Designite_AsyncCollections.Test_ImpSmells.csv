Implementation smell,Namespace,Class,File,Method,Description
Long Statement,HellBrick.Collections.Test,AsyncBatchQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncBatchQueueTest.cs,NoRaceBetweenFlushOnAddAndOnDemand,The length of the statement  "					allItems.Count.Should().BeLessOrEqualTo( batchSize' $"Double flush detected at attempt #{attemptNumber}. Items: {String.Join( "' "' allItems )}" ); " is 147.
Long Statement,HellBrick.Collections.Test,AsyncCollectionTest<TAsyncCollection>,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTest.cs,ContinuationIsNotInlinedOnAddThread,The length of the statement  "			addThreadID.Should().NotBe( continuationThreadID' "TakeAsync() continuation shouldn't have been inlined on the Add() thread." ); " is 128.
Empty Catch Block,HellBrick.Collections.Test,AsyncCollectionTest<TAsyncCollection>,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTest.cs,RandomMultithreadingOperationsDontCrash,The method has an empty catch block.
Magic Number,HellBrick.Collections.Test,AsyncBatchQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncBatchQueueTest.cs,FlushesWhenBatchSizeIsReached,The following statement contains a magic number: int[] array = { 0' 1' 42 };
Magic Number,HellBrick.Collections.Test,AsyncBatchQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncBatchQueueTest.cs,ManualFlushWorks,The following statement contains a magic number: int[] array = { 0' 1' 42 };
Magic Number,HellBrick.Collections.Test,AsyncBatchQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncBatchQueueTest.cs,ManualFlushWorks,The following statement contains a magic number: _queue = new AsyncBatchQueue<int>( 50 );
Magic Number,HellBrick.Collections.Test,AsyncBatchQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncBatchQueueTest.cs,TimerFlushesPendingItems,The following statement contains a magic number: TimeSpan flushPeriod = TimeSpan.FromMilliseconds( 500 );
Magic Number,HellBrick.Collections.Test,AsyncBatchQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncBatchQueueTest.cs,TimerFlushesPendingItems,The following statement contains a magic number: var timerQueue = new AsyncBatchQueue<int>( 9999 ).WithFlushEvery( flushPeriod );
Magic Number,HellBrick.Collections.Test,AsyncBatchQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncBatchQueueTest.cs,TimerFlushesPendingItems,The following statement contains a magic number: timerQueue.Add( 42 );
Magic Number,HellBrick.Collections.Test,AsyncBatchQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncBatchQueueTest.cs,TimerFlushesPendingItems,The following statement contains a magic number: batch.Should().BeEqualTo( new[] { 42 } );
Magic Number,HellBrick.Collections.Test,AsyncBatchQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncBatchQueueTest.cs,MultithreadingInsertsDontCrash,The following statement contains a magic number: int insertThreads = 4;
Magic Number,HellBrick.Collections.Test,AsyncBatchQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncBatchQueueTest.cs,MultithreadingInsertsDontCrash,The following statement contains a magic number: int itemsPerThread = 100;
Magic Number,HellBrick.Collections.Test,AsyncBatchQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncBatchQueueTest.cs,MultithreadingInsertsDontCrash,The following statement contains a magic number: _queue = new AsyncBatchQueue<int>( 11 );
Magic Number,HellBrick.Collections.Test,AsyncBatchQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncBatchQueueTest.cs,MultithreadingInsertsDontCrash,The following statement contains a magic number: List<Task> insertTasks = Enumerable.Range( 1' insertThreads )  				.Select(  					_ => Task.Run(  						() =>  						{  							for ( int i = 0; i < itemsPerThread; i++ )  								_queue.Add( 42 );  						} ) )  				.ToList();
Magic Number,HellBrick.Collections.Test,AsyncBatchQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncBatchQueueTest.cs,NoRaceBetweenFlushOnAddAndOnDemand,The following statement contains a magic number: const int attempts = 100 * 1000;
Magic Number,HellBrick.Collections.Test,AsyncBatchQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncBatchQueueTest.cs,NoRaceBetweenFlushOnAddAndOnDemand,The following statement contains a magic number: const int attempts = 100 * 1000;
Magic Number,HellBrick.Collections.Test,AsyncBatchQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncBatchQueueTest.cs,NoRaceBetweenFlushOnAddAndOnDemand,The following statement contains a magic number: const int batchSize = 5;
Magic Number,HellBrick.Collections.Test,AsyncBatchQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncBatchQueueTest.cs,NoRaceBetweenFlushOnAddAndOnDemand,The following statement contains a magic number: Task addTask = Task.Run  					(  						() =>  						{  							trigger.WaitOne();  							_queue.Add( 666 );  						}  					);
Magic Number,HellBrick.Collections.Test,AsyncBoundedPriorityQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncBoundedPriorityQueueTest.cs,CreateCollection,The following statement contains a magic number: return new AsyncBoundedPriorityQueue<int>( 2 );
Magic Number,HellBrick.Collections.Test,AsyncBoundedPriorityQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncBoundedPriorityQueueTest.cs,ReturnsLowPriorityIfNoHighPriorityIsAvailable,The following statement contains a magic number: Collection.Add( 42' 1 );
Magic Number,HellBrick.Collections.Test,AsyncBoundedPriorityQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncBoundedPriorityQueueTest.cs,ReturnsLowPriorityIfNoHighPriorityIsAvailable,The following statement contains a magic number: result.Should().Be( new PrioritizedItem<int>( 42' 1 ) );
Magic Number,HellBrick.Collections.Test,AsyncBoundedPriorityQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncBoundedPriorityQueueTest.cs,RespectsPriority,The following statement contains a magic number: Collection.Add( 42' 0 );
Magic Number,HellBrick.Collections.Test,AsyncBoundedPriorityQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncBoundedPriorityQueueTest.cs,RespectsPriority,The following statement contains a magic number: Collection.Add( 999' 1 );
Magic Number,HellBrick.Collections.Test,AsyncBoundedPriorityQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncBoundedPriorityQueueTest.cs,RespectsPriority,The following statement contains a magic number: result.Should().Be( new PrioritizedItem<int>( 42' 0 ) );
Magic Number,HellBrick.Collections.Test,AsyncCollectionTakeFromAnyTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTakeFromAnyTest.cs,AsyncCollectionTakeFromAnyTest,The following statement contains a magic number: _collections = new AsyncCollection<int>[ 2 ] { new AsyncCollection<int>( new ConcurrentQueue<int>() )' new AsyncCollection<int>( new ConcurrentQueue<int>() ) };
Magic Number,HellBrick.Collections.Test,AsyncCollectionTakeFromAnyTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTakeFromAnyTest.cs,ReturnsItemFromSecondIfFirstIsEmpty,The following statement contains a magic number: _collections[ 1 ].Add( 42 );
Magic Number,HellBrick.Collections.Test,AsyncCollectionTakeFromAnyTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTakeFromAnyTest.cs,ReturnsItemFromSecondIfFirstIsEmpty,The following statement contains a magic number: result.Value.Should().Be( 42 );
Magic Number,HellBrick.Collections.Test,AsyncCollectionTakeFromAnyTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTakeFromAnyTest.cs,NoUnnecessaryAwaitersAreQueued,The following statement contains a magic number: _collections[ 1 ].Add( 42 );
Magic Number,HellBrick.Collections.Test,AsyncCollectionTakeFromAnyTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTakeFromAnyTest.cs,RespectsCollectionOrder,The following statement contains a magic number: _collections[ 0 ].Add( 42 );
Magic Number,HellBrick.Collections.Test,AsyncCollectionTakeFromAnyTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTakeFromAnyTest.cs,RespectsCollectionOrder,The following statement contains a magic number: _collections[ 1 ].Add( 24 );
Magic Number,HellBrick.Collections.Test,AsyncCollectionTakeFromAnyTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTakeFromAnyTest.cs,RespectsCollectionOrder,The following statement contains a magic number: result.Value.Should().Be( 42 );
Magic Number,HellBrick.Collections.Test,AsyncCollectionTakeFromAnyTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTakeFromAnyTest.cs,ReturnsItemIfItIsAddedLater,The following statement contains a magic number: _collections[ 1 ].Add( 42 );
Magic Number,HellBrick.Collections.Test,AsyncCollectionTakeFromAnyTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTakeFromAnyTest.cs,ReturnsItemIfItIsAddedLater,The following statement contains a magic number: result.Value.Should().Be( 42 );
Magic Number,HellBrick.Collections.Test,AsyncCollectionTakeFromAnyTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTakeFromAnyTest.cs,CancelsTaskWhenTokenIsCanceled,The following statement contains a magic number: _collections[ 0 ].Add( 42 );
Magic Number,HellBrick.Collections.Test,AsyncCollectionTakeFromAnyTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTakeFromAnyTest.cs,CancelsTaskWhenTokenIsCanceled,The following statement contains a magic number: _collections[ 1 ].Add( 64 );
Magic Number,HellBrick.Collections.Test,AsyncCollectionTakeFromAnyTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTakeFromAnyTest.cs,DoesNothingIfTokenIsCanceledBeforeMethodCall,The following statement contains a magic number: _collections[ 0 ].Add( 42 );
Magic Number,HellBrick.Collections.Test,AsyncCollectionTest<TAsyncCollection>,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTest.cs,TakingItemFromNonEmptyCollectionCompletesImmediately,The following statement contains a magic number: Collection.Add( 42 );
Magic Number,HellBrick.Collections.Test,AsyncCollectionTest<TAsyncCollection>,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTest.cs,TakingItemFromNonEmptyCollectionCompletesImmediately,The following statement contains a magic number: itemTask.Result.Should().Be( 42 );
Magic Number,HellBrick.Collections.Test,AsyncCollectionTest<TAsyncCollection>,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTest.cs,AddingItemCompletesPendingTask,The following statement contains a magic number: Collection.Add( 42 );
Magic Number,HellBrick.Collections.Test,AsyncCollectionTest<TAsyncCollection>,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTest.cs,AddingItemCompletesPendingTask,The following statement contains a magic number: ( await itemTask.ConfigureAwait( true ) ).Should().Be( 42 );
Magic Number,HellBrick.Collections.Test,AsyncCollectionTest<TAsyncCollection>,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTest.cs,TakeWithCanceledTokenReturnsCanceledTask,The following statement contains a magic number: Collection.Add( 42 );
Magic Number,HellBrick.Collections.Test,AsyncCollectionTest<TAsyncCollection>,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTest.cs,CancelledTakeCancelsTask,The following statement contains a magic number: Collection.Add( 42 );
Magic Number,HellBrick.Collections.Test,AsyncCollectionTest<TAsyncCollection>,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTest.cs,InsertedItemsCanBeEnumerated,The following statement contains a magic number: int[] items = Enumerable.Range( 0' 1000 ).ToArray();
Magic Number,HellBrick.Collections.Test,AsyncCollectionTest<TAsyncCollection>,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTest.cs,ContinuationIsNotInlinedOnAddThread,The following statement contains a magic number: Collection.Add( 42 );
Magic Number,HellBrick.Collections.Test,AsyncCollectionTest<TAsyncCollection>,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTest.cs,RandomMultithreadingOperationsDontCrash,The following statement contains a magic number: int itemCount = 100;
Magic Number,HellBrick.Collections.Test,AsyncCollectionTest<TAsyncCollection>,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTest.cs,RandomMultithreadingOperationsDontCrash,The following statement contains a magic number: int producerThreads = 4;
Magic Number,HellBrick.Collections.Test,AsyncCollectionTest<TAsyncCollection>,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncCollectionTest.cs,RandomMultithreadingOperationsDontCrash,The following statement contains a magic number: int consumerThreads = 2;
Magic Number,HellBrick.Collections.Test,AsyncQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncQueueTest.cs,CountsAreCorrectIfTailsMatch,The following statement contains a magic number: Collection.Add( 42 );
Magic Number,HellBrick.Collections.Test,AsyncQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncQueueTest.cs,CountsAreCorrectIfTailsMatch,The following statement contains a magic number: Collection.Add( 64 );
Magic Number,HellBrick.Collections.Test,AsyncQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncQueueTest.cs,EnumeratorReturnsItemsInCorrectOrder,The following statement contains a magic number: int[] items = Enumerable.Range( 0' _itemsToOverflowSegment * 2 ).ToArray();
Magic Number,HellBrick.Collections.Test,AsyncQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncQueueTest.cs,EnumeratorDoesNotReturnItemsThatHaveBeenRemovedBetweenMoveNextCalls,The following statement contains a magic number: InsertItems( 1' 2' 3 );
Magic Number,HellBrick.Collections.Test,AsyncQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncQueueTest.cs,EnumeratorDoesNotReturnItemsThatHaveBeenRemovedBetweenMoveNextCalls,The following statement contains a magic number: InsertItems( 1' 2' 3 );
Magic Number,HellBrick.Collections.Test,AsyncQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncQueueTest.cs,EnumeratorDoesNotReturnItemsThatHaveBeenRemovedBetweenMoveNextCalls,The following statement contains a magic number: InsertAwaiters( 2 );
Magic Number,HellBrick.Collections.Test,AsyncQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncQueueTest.cs,EnumeratorDoesNotReturnItemsThatHaveBeenRemovedBetweenMoveNextCalls,The following statement contains a magic number: enumerator.Current.Should().Be( 3 );
Missing Default,HellBrick.Collections.Test,AsyncQueueTest,D:\research\architectureSmells\repos\HellBrick_AsyncCollections\AsyncCollections.Test\AsyncQueueTest.cs,EverythingWorksIfSegmentIsFilledByOneKindOfItems,The following switch statement is missing a default case: switch ( insertionOrder )  			{  				case Order.ItemsFirst:  					InsertItems( items );  					tasks = InsertAwaiters( items.Length );  					break;    				case Order.AwaitersFirst:  					tasks = InsertAwaiters( items.Length );  					InsertItems( items );  					break;  			}
