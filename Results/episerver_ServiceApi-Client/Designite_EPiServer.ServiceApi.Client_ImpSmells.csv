Implementation smell,Namespace,Class,File,Method,Description
Complex Method,EPiServer.Integration.Client.Tests,ImportTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\ImportTest.cs,Execute,Cyclomatic complexity of the method is 10
Complex Method,EPiServer.Integration.Client.Tests,ExportTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\ExportTest.cs,CatalogExportTest,Cyclomatic complexity of the method is 8
Complex Method,EPiServer.Integration.Client.Tests,ExportTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\ExportTest.cs,SiteExportTest,Cyclomatic complexity of the method is 8
Long Parameter List,EPiServer.Integration.Client.Client,OAuth2Client,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Client\OAuth2Client.cs,OAuth2Client,The method has 5 parameters.
Long Parameter List,EPiServer.Integration.Client.Client,OAuth2Client,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Client\OAuth2Client.cs,CreateCodeFlowUrl,The method has 5 parameters.
Long Parameter List,EPiServer.Integration.Client.Client,OAuth2Client,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Client\OAuth2Client.cs,CreateImplicitFlowUrl,The method has 5 parameters.
Long Parameter List,EPiServer.Integration.Client.Client,OAuth2Client,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Client\OAuth2Client.cs,CreateAuthorizeUrl,The method has 6 parameters.
Long Parameter List,EPiServer.Integration.Client.Client,OAuth2Client,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Client\OAuth2Client.cs,Merge,The method has 5 parameters.
Long Statement,EPiServer.Integration.Client.Tests,BaseTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\BaseTest.cs,GetHttpClient,The length of the statement  "	var token = await _oAuth2Client.RequestResourceOwnerPasswordAsync (ConfigurationManager.AppSettings ["username"]' ConfigurationManager.AppSettings ["password"]); " is 161.
Long Statement,EPiServer.Integration.Client.Tests,BaseTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\BaseTest.cs,WaitForCompletion,The length of the statement  "		done = lastMessage == null || lastMessage.MessageType == MessageType.Success || lastMessage.MessageType == MessageType.Error; " is 125.
Long Statement,EPiServer.Integration.Client.Tests,ExportTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\ExportTest.cs,CatalogExportTest,The length of the statement  "		var catalog = Get (String.Format ("/episerverapi/commerce/export/catalog/{0}"' catalogName)' HttpCompletionOption.ResponseHeadersRead).Result; " is 142.
Long Statement,EPiServer.Integration.Client.Tests,ExportTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\ExportTest.cs,CatalogExportTest,The length of the statement  "			return String.Format ("Catalog export file was created at {0}"' Path.Combine (_exportOutputPath' String.Format ("{0}.zip"' catalogName))); " is 138.
Long Statement,EPiServer.Integration.Client.Tests,ExportTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\ExportTest.cs,SiteExportTest,The length of the statement  "		var site = Get (String.Format ("/episerverapi/commerce/export/site/{0}"' siteName)' HttpCompletionOption.ResponseHeadersRead).Result; " is 133.
Long Statement,EPiServer.Integration.Client.Tests,ExportTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\ExportTest.cs,SiteExportTest,The length of the statement  "			using (var fileStream = File.Create (Path.Combine (_exportOutputPath' String.Format ("{0}.episerverdata"' siteName)))) { " is 120.
Long Statement,EPiServer.Integration.Client.Tests,ExportTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\ExportTest.cs,SiteExportTest,The length of the statement  "			return String.Format ("Site export file was created at {0}"' Path.Combine (_exportOutputPath' String.Format ("{0}.episerverdata"' siteName))); " is 142.
Long Statement,EPiServer.Integration.Client.Client,OAuth2Client,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Client\OAuth2Client.cs,CreateAuthorizeUrl,The length of the statement  "	var qs = string.Join ("&"' values.Select (kvp => String.Format ("{0}={1}"' WebUtility.UrlEncode (kvp.Key)' WebUtility.UrlEncode (kvp.Value))).ToArray ()); " is 154.
Long Statement,EPiServer.Integration.Client.Client,OAuth2Client,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Client\OAuth2Client.cs,RequestAccessToken,The length of the statement  "	var response = await _client.PostAsync ("/episerverapi/token"' new FormUrlEncodedContent (form)).ConfigureAwait (false); " is 120.
Long Statement,EPiServer.Integration.Client.Client,OAuth2Client,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Client\OAuth2Client.cs,Merge,The length of the statement  "		merged = explicitValues.Concat (additionalValues.Where (add => !explicitValues.ContainsKey (add.Key))).ToDictionary (final => final.Key' final => final.Value); " is 159.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssetTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssetTest.cs,GetAllEntryAssets,The length of the statement  "		var result = Get ("/episerverapi/commerce/entries/Jackets-Blazers-Wrap/assets").Result.Content.ReadAsStringAsync ().Result; " is 123.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssetTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssetTest.cs,GetAllEntryAssets,The length of the statement  "		result = GetXml ("/episerverapi/commerce/entries/Jackets-Blazers-Wrap/assets").Result.Content.ReadAsStringAsync ().Result; " is 122.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssetTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssetTest.cs,GetEntryAssets,The length of the statement  "		var result = Get ("episerverapi/commerce/entries/Jackets-Blazers-Wrap/assets/fd761c1d-5692-48b6-b90a-1ddf4c7c5eb9/episerver.core.icontentimage").Result.Content.ReadAsStringAsync ().Result; " is 188.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssetTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssetTest.cs,GetEntryAssets,The length of the statement  "		result = GetXml ("episerverapi/commerce/entries/Jackets-Blazers-Wrap/assets/fd761c1d-5692-48b6-b90a-1ddf4c7c5eb9/episerver.core.icontentimage").Result.Content.ReadAsStringAsync ().Result; " is 187.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssetTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssetTest.cs,PostEntryAsset,The length of the statement  "		var result = Post ("/episerverapi/commerce/entries/Jackets-Blazers-Wrap/assets"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 185.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssetTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssetTest.cs,PostEntryAsset,The length of the statement  "		result = Post ("/episerverapi/commerce/entries/Jackets-Blazers-Wrap/assets"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 172.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssetTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssetTest.cs,PutEntryAsset,The length of the statement  "		var result = Put ("episerverapi/commerce/entries/Jackets-Blazers-Wrap/assets/fd761c1d-5692-48b6-b90a-1ddf4c7c5eb9/episerver.core.icontentimage"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 249.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssetTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssetTest.cs,PutEntryAsset,The length of the statement  "		result = Put ("episerverapi/commerce/entries/Jackets-Blazers-Wrap/assets/fd761c1d-5692-48b6-b90a-1ddf4c7c5eb9/episerver.core.icontentimage"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 236.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssetTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssetTest.cs,DeleteEntryAsset,The length of the statement  "		var result = Delete ("episerverapi/commerce/entries/Jackets-Blazers-Wrap/assets/fd761c1d-5692-48b6-b90a-1ddf4c7c5eb9/episerver.core.icontentimages").Result.Content.ReadAsStringAsync ().Result; " is 192.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssetTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssetTest.cs,DeleteEntryAsset,The length of the statement  "		result = DeleteXml ("episerverapi/commerce/entries/Jackets-Blazers-Wrap/assets/fd761c1d-5692-48b6-b90a-1ddf4c7c5eb9/episerver.core.icontentimages").Result.Content.ReadAsStringAsync ().Result; " is 191.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssetTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssetTest.cs,GetNodeAssets,The length of the statement  "		var result = Get ("episerverapi/commerce/nodes/Fashion/assets/ed6fc3d7-091f-4e84-b1f6-49b56e7b5146/episerver.core.icontentimage").Result.Content.ReadAsStringAsync ().Result; " is 173.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssetTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssetTest.cs,GetNodeAssets,The length of the statement  "		result = GetXml ("episerverapi/commerce/nodes/Fashion/assets/ed6fc3d7-091f-4e84-b1f6-49b56e7b5146/episerver.core.icontentimage").Result.Content.ReadAsStringAsync ().Result; " is 172.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssetTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssetTest.cs,PostNodeAsset,The length of the statement  "		var result = Post ("/episerverapi/commerce/nodes/Fashion/assets"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 170.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssetTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssetTest.cs,PostNodeAsset,The length of the statement  "		result = Post ("/episerverapi/commerce/nodes/Fashion/assets"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 157.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssetTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssetTest.cs,PutNodeAsset,The length of the statement  "		var result = Put ("episerverapi/commerce/nodes/Fashion/assets/ed6fc3d7-091f-4e84-b1f6-49b56e7b5146/episerver.core.icontentimage"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 234.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssetTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssetTest.cs,PutNodeAsset,The length of the statement  "		result = Put ("episerverapi/commerce/nodes/Fashion/assets/ed6fc3d7-091f-4e84-b1f6-49b56e7b5146/episerver.core.icontentimage"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 221.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssetTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssetTest.cs,DeleteNodeAsset,The length of the statement  "		var result = Delete ("episerverapi/commerce/entries/Fashion/assets/ed6fc3d7-091f-4e84-b1f6-49b56e7b5146/episerver.core.icontentimages").Result.Content.ReadAsStringAsync ().Result; " is 179.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssetTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssetTest.cs,DeleteNodeAsset,The length of the statement  "		result = DeleteXml ("episerverapi/commerce/entries/Fashion/assets/ed6fc3d7-091f-4e84-b1f6-49b56e7b5146/episerver.core.icontentimages").Result.Content.ReadAsStringAsync ().Result; " is 178.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssociationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssociationTest.cs,GetAllEntryAssociations,The length of the statement  "		var result = Get ("/episerverapi/commerce/entries/Movies-Kids-Jumanji-BluRay/associations").Result.Content.ReadAsStringAsync ().Result; " is 135.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssociationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssociationTest.cs,GetAllEntryAssociations,The length of the statement  "		result = GetXml ("/episerverapi/commerce/entries/Movies-Kids-Jumanji-BluRay/associations").Result.Content.ReadAsStringAsync ().Result; " is 134.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssociationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssociationTest.cs,GetEntryAssociations,The length of the statement  "		var result = Get ("episerverapi/commerce/entries/Movies-Kids-Jumanji-BluRay/associations/UpSell").Result.Content.ReadAsStringAsync ().Result; " is 141.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssociationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssociationTest.cs,GetEntryAssociations,The length of the statement  "		result = GetXml ("episerverapi/commerce/entries/Movies-Kids-Jumanji-BluRay/associations/UpSell").Result.Content.ReadAsStringAsync ().Result; " is 140.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssociationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssociationTest.cs,PostEntryAssociation,The length of the statement  "		var result = Post ("/episerverapi/commerce/entries/Movies-Kids-Jumanji-BluRay/associations"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 197.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssociationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssociationTest.cs,PostEntryAssociation,The length of the statement  "		result = Post ("/episerverapi/commerce/entries/Movies-Kids-Jumanji-BluRay/associations"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 184.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssociationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssociationTest.cs,PutEntryAssociation,The length of the statement  "		var result = Put ("episerverapi/commerce/entries/Movies-Kids-Jumanji-BluRay/associations/UpSell"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 202.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssociationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssociationTest.cs,PutEntryAssociation,The length of the statement  "		result = Put ("episerverapi/commerce/entries/Movies-Kids-Jumanji-BluRay/associations/UpSell"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 189.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssociationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssociationTest.cs,DeleteEntryAssociation,The length of the statement  "		var result = Delete ("episerverapi/commerce/entries/Movies-Kids-Jumanji-BluRay/associations/UpSells").Result.Content.ReadAsStringAsync ().Result; " is 145.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,AssociationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssociationTest.cs,DeleteEntryAssociation,The length of the statement  "		result = DeleteXml ("episerverapi/commerce/entries/Movies-Kids-Jumanji-BluRay/associations/UpSells").Result.Content.ReadAsStringAsync ().Result; " is 144.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,CatalogNodeTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\CatalogNodeTest.cs,GetAllNodes,The length of the statement  "		var result = Get ("/episerverapi/commerce/catalog/Departmental Catalog/nodes").Result.Content.ReadAsStringAsync ().Result; " is 122.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,CatalogNodeTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\CatalogNodeTest.cs,GetAllNodes,The length of the statement  "		result = GetXml ("/episerverapi/commerce/catalog/Departmental Catalog/nodes").Result.Content.ReadAsStringAsync ().Result; " is 121.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,CatalogNodeTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\CatalogNodeTest.cs,PostNode,The length of the statement  "		var result = Post ("/episerverapi/commerce/nodes"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 155.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,CatalogNodeTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\CatalogNodeTest.cs,PostNode,The length of the statement  "		result = Post ("/episerverapi/commerce/nodes"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 142.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,CatalogNodeTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\CatalogNodeTest.cs,PutNode,The length of the statement  "		var result = Put ("episerverapi/commerce/nodes/Node 2"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 160.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,CatalogNodeTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\CatalogNodeTest.cs,PutNode,The length of the statement  "		result = Put ("episerverapi/commerce/nodes/Node 2"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 147.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,CatalogEntryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\CatalogEntryTest.cs,GetEntry,The length of the statement  "		var result = Get ("episerverapi/commerce/entries/Jackets-Peacoats-Hooded-Tan-Small").Result.Content.ReadAsStringAsync ().Result; " is 128.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,CatalogEntryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\CatalogEntryTest.cs,GetEntry,The length of the statement  "		result = GetXml ("episerverapi/commerce/entries/Jackets-Peacoats-Hooded-Tan-Small").Result.Content.ReadAsStringAsync ().Result; " is 127.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,CatalogEntryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\CatalogEntryTest.cs,PostEntry,The length of the statement  "		var result = Post ("/episerverapi/commerce/entries"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 157.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,CatalogEntryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\CatalogEntryTest.cs,PostEntry,The length of the statement  "		result = Post ("/episerverapi/commerce/entries"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 144.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,CatalogEntryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\CatalogEntryTest.cs,PutEntry,The length of the statement  "		var result = Put ("episerverapi/commerce/entries/Dresses-Cocktail-Silk"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 177.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,CatalogEntryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\CatalogEntryTest.cs,PutEntry,The length of the statement  "		result = Put ("episerverapi/commerce/entries/Dresses-Cocktail-Silk"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 164.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,CatalogTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\CatalogTest.cs,PostCatalog,The length of the statement  "		var result = Post ("/episerverapi/commerce/catalogs"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 158.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,CatalogTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\CatalogTest.cs,PostCatalog,The length of the statement  "		result = Post ("/episerverapi/commerce/catalogs"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 145.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,CatalogTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\CatalogTest.cs,PutCatalog,The length of the statement  "		var result = Put ("episerverapi/commerce/catalogs/Test Post"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 166.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,CatalogTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\CatalogTest.cs,PutCatalog,The length of the statement  "		result = Put ("episerverapi/commerce/catalogs/Test Post"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 153.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,EntryRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\EntryRelationTest.cs,GetAllEntryRelations,The length of the statement  "		var result = Get ("/episerverapi/commerce/entries/Jackets-Peacoats-Asymmetrical/entryrelations").Result.Content.ReadAsStringAsync ().Result; " is 140.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,EntryRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\EntryRelationTest.cs,GetAllEntryRelations,The length of the statement  "		result = GetXml ("/episerverapi/commerce/entries/Jackets-Peacoats-Asymmetrical/entryrelations").Result.Content.ReadAsStringAsync ().Result; " is 139.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,EntryRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\EntryRelationTest.cs,GetEntryRelation,The length of the statement  "		var result = Get ("episerverapi/commerce/entries/Jackets-Peacoats-Asymmetrical/entryrelations/Jackets-Peacoats-Asymmetrical-Black-Small/ProductVariation").Result.Content.ReadAsStringAsync ().Result; " is 198.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,EntryRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\EntryRelationTest.cs,GetEntryRelation,The length of the statement  "		result = GetXml ("episerverapi/commerce/entries/Jackets-Peacoats-Asymmetrical/entryrelations/Jackets-Peacoats-Asymmetrical-Black-Small/ProductVariation").Result.Content.ReadAsStringAsync ().Result; " is 197.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,EntryRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\EntryRelationTest.cs,PostEntryRelation,The length of the statement  "		var result = Post ("/episerverapi/commerce/entries/Jackets-Peacoats-Asymmetrical/entryrelations"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 202.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,EntryRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\EntryRelationTest.cs,PostEntryRelation,The length of the statement  "		result = Post ("/episerverapi/commerce/entries/Jackets-Peacoats-Asymmetrical/entryrelations"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 189.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,EntryRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\EntryRelationTest.cs,PutEntryRelation,The length of the statement  "		var result = Put ("episerverapi/commerce/entries/Jackets-Peacoats-Asymmetrical/entryrelations/Jackets-Peacoats-Hooded-Tan-Large/ProductVariation"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 251.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,EntryRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\EntryRelationTest.cs,PutEntryRelation,The length of the statement  "		result = Put ("episerverapi/commerce/entries/Jackets-Peacoats-Asymmetrical/entryrelations/Jackets-Peacoats-Hooded-Tan-Large/ProductVariation"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 238.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,EntryRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\EntryRelationTest.cs,DeleteEntryRelation,The length of the statement  "		var result = Delete ("episerverapi/commerce/entries/Jackets-Peacoats-Asymmetrical/entryrelations/Jackets-Peacoats-Hooded-Tan-Large/ProductVariation").Result.Content.ReadAsStringAsync ().Result; " is 193.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,EntryRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\EntryRelationTest.cs,DeleteEntryRelation,The length of the statement  "		result = DeleteXml ("episerverapi/commerce/entries/Jackets-Blazers-Wrap/entryrelations/Jackets-Peacoats-Hooded-Tan-Largedd/ProductVariation").Result.Content.ReadAsStringAsync ().Result; " is 185.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,NodeEntryRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\NodeEntryRelationTest.cs,GetAllNodeEntryRelations,The length of the statement  "		var result = Get ("/episerverapi/commerce/entries/Tops-Tunics-LongSleeve/nodeentryrelations").Result.Content.ReadAsStringAsync ().Result; " is 137.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,NodeEntryRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\NodeEntryRelationTest.cs,GetAllNodeEntryRelations,The length of the statement  "		result = GetXml ("/episerverapi/commerce/entries/Tops-Tunics-LongSleeve/nodeentryrelations").Result.Content.ReadAsStringAsync ().Result; " is 136.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,NodeEntryRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\NodeEntryRelationTest.cs,GetNodeEntryRelation,The length of the statement  "		var result = Get ("episerverapi/commerce/entries/Tops-Tunics-LongSleeve/nodeentryrelations/Tops-Tunics").Result.Content.ReadAsStringAsync ().Result; " is 148.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,NodeEntryRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\NodeEntryRelationTest.cs,GetNodeEntryRelation,The length of the statement  "		result = GetXml ("episerverapi/commerce/entries/Tops-Tunics-LongSleeve/nodeentryrelations/Tops-Tunics").Result.Content.ReadAsStringAsync ().Result; " is 147.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,NodeEntryRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\NodeEntryRelationTest.cs,PostNodeEntryRelation,The length of the statement  "		var result = Post ("/episerverapi/commerce/entries/Tops-Tunics-LongSleeve/nodeentryrelations"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 199.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,NodeEntryRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\NodeEntryRelationTest.cs,PostNodeEntryRelation,The length of the statement  "		result = Post ("/episerverapi/commerce/entries/Tops-Tunics-LongSleeve/nodeentryrelations"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 186.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,NodeEntryRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\NodeEntryRelationTest.cs,PutNodeEntryRelation,The length of the statement  "		var result = Put ("episerverapi/commerce/entries/Tops-Tunics-LongSleeve/nodeentryrelations/Tops-Sweaters"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 211.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,NodeEntryRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\NodeEntryRelationTest.cs,PutNodeEntryRelation,The length of the statement  "		result = Put ("episerverapi/commerce/entries/Tops-Tunics-LongSleeve/nodeentryrelations/Tops-Sweaters"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 198.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,NodeEntryRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\NodeEntryRelationTest.cs,DeleteNodeEntryRelation,The length of the statement  "		var result = Delete ("episerverapi/commerce/entries/Tops-Tunics-LongSleeve/nodeentryrelations/Tops-Sweaters").Result.Content.ReadAsStringAsync ().Result; " is 153.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,NodeEntryRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\NodeEntryRelationTest.cs,DeleteNodeEntryRelation,The length of the statement  "		result = DeleteXml ("episerverapi/commerce/entries/Tops-Tunics-LongSleeve/nodeentryrelations/Tops-Sweaterssss").Result.Content.ReadAsStringAsync ().Result; " is 155.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,NodeRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\NodeRelationTest.cs,GetNodeRelation,The length of the statement  "		var result = Get ("episerverapi/commerce/nodes/Books/noderelations/Bottoms").Result.Content.ReadAsStringAsync ().Result; " is 120.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,NodeRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\NodeRelationTest.cs,PostNodeRelation,The length of the statement  "		var result = Post ("/episerverapi/commerce/nodes/Books/noderelations"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 175.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,NodeRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\NodeRelationTest.cs,PostNodeRelation,The length of the statement  "		result = Post ("/episerverapi/commerce/nodes/Books/noderelations"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 162.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,NodeRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\NodeRelationTest.cs,PutNodeRelation,The length of the statement  "		var result = Put ("episerverapi/commerce/nodes/Books/noderelations/Bottoms"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 181.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,NodeRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\NodeRelationTest.cs,PutNodeRelation,The length of the statement  "		result = Put ("episerverapi/commerce/nodes/Books/noderelations/Bottoms"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 168.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,NodeRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\NodeRelationTest.cs,DeleteNodeRelation,The length of the statement  "		var result = Delete ("episerverapi/commerce/nodes/Books/noderelations/Bottoms").Result.Content.ReadAsStringAsync ().Result; " is 123.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,NodeRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\NodeRelationTest.cs,DeleteNodeRelation,The length of the statement  "		result = DeleteXml ("episerverapi/commerce/nodes/Books/noderelations/Bottomsss").Result.Content.ReadAsStringAsync ().Result; " is 124.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,PriceTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\PriceTest.cs,GetAllEntryPrices,The length of the statement  "		var result = Get ("/episerverapi/commerce/entries/Jackets-Peacoats-Hooded-Tan-Small/prices").Result.Content.ReadAsStringAsync ().Result; " is 136.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,PriceTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\PriceTest.cs,GetAllEntryPrices,The length of the statement  "		result = GetXml ("/episerverapi/commerce/entries/Jackets-Peacoats-Hooded-Tan-Small/prices").Result.Content.ReadAsStringAsync ().Result; " is 135.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,PriceTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\PriceTest.cs,GetEntryPrice,The length of the statement  "		var result = Get ("episerverapi/commerce/entries/Jackets-Peacoats-Hooded-Tan-Small/prices/250").Result.Content.ReadAsStringAsync ().Result; " is 139.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,PriceTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\PriceTest.cs,GetEntryPrice,The length of the statement  "		result = GetXml ("episerverapi/commerce/entries/Jackets-Peacoats-Hooded-Tan-Small/prices/250").Result.Content.ReadAsStringAsync ().Result; " is 138.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,PriceTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\PriceTest.cs,PostEntryPrice,The length of the statement  "		var result = Post ("/episerverapi/commerce/entries/Jackets-Peacoats-Hooded-Tan-Small/prices"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 198.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,PriceTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\PriceTest.cs,PostEntryPrice,The length of the statement  "		result = Post ("/episerverapi/commerce/entries/Jackets-Peacoats-Hooded-Tan-Small/prices"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 185.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,PriceTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\PriceTest.cs,PutEntryPrice,The length of the statement  "		var result = Put ("episerverapi/commerce/entries/Jackets-Peacoats-Hooded-Tan-Small/prices/250"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 200.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,PriceTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\PriceTest.cs,PutEntryPrice,The length of the statement  "		result = Put ("episerverapi/commerce/entries/Jackets-Peacoats-Hooded-Tan-Small/prices/250"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 187.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,PriceTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\PriceTest.cs,DeleteEntryPrice,The length of the statement  "		var result = Delete ("episerverapi/commerce/entries/Jackets-Peacoats-Hooded-Tan-Small/prices/99999999999").Result.Content.ReadAsStringAsync ().Result; " is 150.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,PriceTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\PriceTest.cs,DeleteEntryPrice,The length of the statement  "		result = DeleteXml ("episerverapi/commerce/entries/Jackets-Peacoats-Hooded-Tan-Small/prices/99999999999").Result.Content.ReadAsStringAsync ().Result; " is 149.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,WarehouseInventoryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\WarehouseInventoryTest.cs,GetAllEntryWarehouseInventories,The length of the statement  "		var result = Get ("/episerverapi/commerce/entries/Accessories-Electronics-200WattsAMFMCDReciever-sku/inventories").Result.Content.ReadAsStringAsync ().Result; " is 158.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,WarehouseInventoryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\WarehouseInventoryTest.cs,GetAllEntryWarehouseInventories,The length of the statement  "		result = GetXml ("/episerverapi/commerce/entries/Accessories-Electronics-200WattsAMFMCDReciever-sku/inventories").Result.Content.ReadAsStringAsync ().Result; " is 157.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,WarehouseInventoryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\WarehouseInventoryTest.cs,GetEntryWarehouseInventory,The length of the statement  "		var result = Get ("episerverapi/commerce/entries/Accessories-Electronics-200WattsAMFMCDReciever-sku/inventories/WELLINGTON").Result.Content.ReadAsStringAsync ().Result; " is 168.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,WarehouseInventoryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\WarehouseInventoryTest.cs,GetEntryWarehouseInventory,The length of the statement  "		result = GetXml ("episerverapi/commerce/entries/Accessories-Electronics-200WattsAMFMCDReciever-sku/inventories/WELLINGTON").Result.Content.ReadAsStringAsync ().Result; " is 167.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,WarehouseInventoryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\WarehouseInventoryTest.cs,PostEntryWarehouseInventory,The length of the statement  "		var result = Post ("/episerverapi/commerce/entries/Accessories-Electronics-200WattsAMFMCDReciever-sku/inventories"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 220.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,WarehouseInventoryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\WarehouseInventoryTest.cs,PostEntryWarehouseInventory,The length of the statement  "		result = Post ("/episerverapi/commerce/entries/Accessories-Electronics-200WattsAMFMCDReciever-sku/inventories"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 207.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,WarehouseInventoryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\WarehouseInventoryTest.cs,PutEntryWarehouseInventory,The length of the statement  "		var result = Put ("episerverapi/commerce/entries/Accessories-Electronics-200WattsAMFMCDReciever-sku/inventories/WELLINGTON"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 229.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,WarehouseInventoryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\WarehouseInventoryTest.cs,PutEntryWarehouseInventory,The length of the statement  "		result = Put ("episerverapi/commerce/entries/Accessories-Electronics-200WattsAMFMCDReciever-sku/inventories/WELLINGTON"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 216.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,WarehouseInventoryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\WarehouseInventoryTest.cs,DeleteEntryWarehouseInventory,The length of the statement  "		var result = Delete ("episerverapi/commerce/entries/Accessories-Electronics-200WattsAMFMCDReciever-sku/inventories/WELLINGTONs").Result.Content.ReadAsStringAsync ().Result; " is 172.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,WarehouseInventoryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\WarehouseInventoryTest.cs,DeleteEntryWarehouseInventory,The length of the statement  "		result = DeleteXml ("episerverapi/commerce/entries/Accessories-Electronics-200WattsAMFMCDReciever-sku/inventories/WELLINGTONs").Result.Content.ReadAsStringAsync ().Result; " is 171.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,WarehouseTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\WarehouseTest.cs,PostWarehouse,The length of the statement  "		var result = Post ("/episerverapi/commerce/warehouses"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 160.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,WarehouseTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\WarehouseTest.cs,PostWarehouse,The length of the statement  "		result = Post ("/episerverapi/commerce/warehouses"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 147.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,WarehouseTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\WarehouseTest.cs,PutWarehouse,The length of the statement  "		var result = Put ("episerverapi/commerce/warehouses/Warehouse 3"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result; " is 170.
Long Statement,EPiServer.Integration.Client.Tests.Cruds,WarehouseTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\WarehouseTest.cs,PutWarehouse,The length of the statement  "		result = Put ("episerverapi/commerce/warehouses/Warehouse 3"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result; " is 157.
Long Statement,EPiServer.Integration.Client,Program,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Program.cs,GetEnumerableOfType,The length of the statement  "	var objects = Assembly.GetAssembly (typeof(T)).GetTypes ().Where (myType => myType.IsClass && !myType.IsAbstract && myType.IsSubclassOf (typeof(T))).Select (type => (T)Activator.CreateInstance (type' constructorArgs)).ToList (); " is 228.
Magic Number,EPiServer.Integration.Client.Tests,ImportTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\ImportTest.cs,PostImport,The following statement contains a magic number: if (response.IsSuccessStatusCode) {  	var returnString = response.Content.ReadAsStringAsync ().Result;  	taskId = GetJobId (returnString);  	if (taskId != Guid.Empty) {  		return WaitForCompletion (taskId);  	}  	return new List<JobMessage> () {  		new JobMessage () {  			Exception = null'  			ExceptionMessage = "Error parsing returned job guid"'  			ExceptionStackTrace = ""'  			Message = "Task Failed"'  			MessageType = MessageType.Error'  			StageCount = 1'  			StageIndex = 1'  			StageProgress = 100'  			StageTotalProgress = 100'  			StageName = ""'  			TimestampUtc = DateTime.UtcNow  		}  	};  }  
Magic Number,EPiServer.Integration.Client.Tests,ImportTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\ImportTest.cs,PostImport,The following statement contains a magic number: if (response.IsSuccessStatusCode) {  	var returnString = response.Content.ReadAsStringAsync ().Result;  	taskId = GetJobId (returnString);  	if (taskId != Guid.Empty) {  		return WaitForCompletion (taskId);  	}  	return new List<JobMessage> () {  		new JobMessage () {  			Exception = null'  			ExceptionMessage = "Error parsing returned job guid"'  			ExceptionStackTrace = ""'  			Message = "Task Failed"'  			MessageType = MessageType.Error'  			StageCount = 1'  			StageIndex = 1'  			StageProgress = 100'  			StageTotalProgress = 100'  			StageName = ""'  			TimestampUtc = DateTime.UtcNow  		}  	};  }  
Magic Number,EPiServer.Integration.Client.Tests,ImportTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\ImportTest.cs,PostImport,The following statement contains a magic number: return new List<JobMessage> () {  	new JobMessage () {  		Exception = null'  		ExceptionMessage = "Error parsing returned job guid"'  		ExceptionStackTrace = ""'  		Message = "Task Failed"'  		MessageType = MessageType.Error'  		StageCount = 1'  		StageIndex = 1'  		StageProgress = 100'  		StageTotalProgress = 100'  		StageName = ""'  		TimestampUtc = DateTime.UtcNow  	}  };  
Magic Number,EPiServer.Integration.Client.Tests,ImportTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\ImportTest.cs,PostImport,The following statement contains a magic number: return new List<JobMessage> () {  	new JobMessage () {  		Exception = null'  		ExceptionMessage = "Error parsing returned job guid"'  		ExceptionStackTrace = ""'  		Message = "Task Failed"'  		MessageType = MessageType.Error'  		StageCount = 1'  		StageIndex = 1'  		StageProgress = 100'  		StageTotalProgress = 100'  		StageName = ""'  		TimestampUtc = DateTime.UtcNow  	}  };  
Magic Number,EPiServer.Integration.Client.Tests,ImportTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\ImportTest.cs,PostImport,The following statement contains a magic number: return new List<JobMessage> () {  	new JobMessage () {  		Exception = null'  		ExceptionMessage = response.ReasonPhrase'  		ExceptionStackTrace = response.Content.ReadAsStringAsync ().Result'  		Message = "Task Failed"'  		MessageType = MessageType.Error'  		StageCount = 1'  		StageIndex = 1'  		StageProgress = 100'  		StageTotalProgress = 100'  		StageName = ""'  		TimestampUtc = DateTime.UtcNow  	}  };  
Magic Number,EPiServer.Integration.Client.Tests,ImportTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\ImportTest.cs,PostImport,The following statement contains a magic number: return new List<JobMessage> () {  	new JobMessage () {  		Exception = null'  		ExceptionMessage = response.ReasonPhrase'  		ExceptionStackTrace = response.Content.ReadAsStringAsync ().Result'  		Message = "Task Failed"'  		MessageType = MessageType.Error'  		StageCount = 1'  		StageIndex = 1'  		StageProgress = 100'  		StageTotalProgress = 100'  		StageName = ""'  		TimestampUtc = DateTime.UtcNow  	}  };  
Magic Number,EPiServer.Integration.Client.Tests.Cruds,AssetTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssetTest.cs,PostEntryAsset,The following statement contains a magic number: try {  	var model = new ItemAsset () {  		CatalogEntryCode = "Jackets-Blazers-Wrap"'  		AssetKey = "fd761c1d-5692-48b6-b90a-1ddf4c7c5eb9"'  		AssetType = "episerver.core.icontentimage"'  		SortOrder = 45'  		GroupName = "large"  	};  	var json = JsonConvert.SerializeObject (model);  	var xml = SerializeObjectToXml (typeof(ItemAsset)' model);  	var result = Post ("/episerverapi/commerce/entries/Jackets-Blazers-Wrap/assets"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_assetOutputPath' "PostEntryJson.txt")' result);  	result = Post ("/episerverapi/commerce/entries/Jackets-Blazers-Wrap/assets"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_assetOutputPath' "PostEntryXml.xml")' result);  	return "Post entry asset complete.....";  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,EPiServer.Integration.Client.Tests.Cruds,AssetTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssetTest.cs,PutEntryAsset,The following statement contains a magic number: try {  	var model = new ItemAsset () {  		CatalogEntryCode = "Jackets-Blazers-Wrap"'  		AssetKey = "fd761c1d-5692-48b6-b90a-1ddf4c7c5eb9"'  		AssetType = "episerver.core.icontentimage"'  		SortOrder = 45'  		GroupName = "large"  	};  	var json = JsonConvert.SerializeObject (model);  	var xml = SerializeObjectToXml (typeof(ItemAsset)' model);  	var result = Put ("episerverapi/commerce/entries/Jackets-Blazers-Wrap/assets/fd761c1d-5692-48b6-b90a-1ddf4c7c5eb9/episerver.core.icontentimage"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_assetOutputPath' "PutEntryJson.txt")' result);  	result = Put ("episerverapi/commerce/entries/Jackets-Blazers-Wrap/assets/fd761c1d-5692-48b6-b90a-1ddf4c7c5eb9/episerver.core.icontentimage"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_assetOutputPath' "PutEntryXml.xml")' result);  	return "Put entry asset complete.....";  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,EPiServer.Integration.Client.Tests.Cruds,AssetTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssetTest.cs,PostNodeAsset,The following statement contains a magic number: try {  	var model = new ItemAsset () {  		CatalogNodeCode = "Fashion"'  		AssetKey = "ed6fc3d7-091f-4e84-b1f6-49b56e7b5146"'  		AssetType = "episerver.core.icontentimage"'  		SortOrder = 45'  		GroupName = "large"  	};  	var json = JsonConvert.SerializeObject (model);  	var xml = SerializeObjectToXml (typeof(ItemAsset)' model);  	var result = Post ("/episerverapi/commerce/nodes/Fashion/assets"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_assetOutputPath' "PostNodeJson.txt")' result);  	result = Post ("/episerverapi/commerce/nodes/Fashion/assets"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_assetOutputPath' "PostNodeXml.xml")' result);  	return "Post node asset complete.....";  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,EPiServer.Integration.Client.Tests.Cruds,AssetTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\AssetTest.cs,PutNodeAsset,The following statement contains a magic number: try {  	var model = new ItemAsset () {  		CatalogNodeCode = "Fashion"'  		AssetKey = "ed6fc3d7-091f-4e84-b1f6-49b56e7b5146"'  		AssetType = "episerver.core.icontentimage"'  		SortOrder = 45'  		GroupName = "large"  	};  	var json = JsonConvert.SerializeObject (model);  	var xml = SerializeObjectToXml (typeof(ItemAsset)' model);  	var result = Put ("episerverapi/commerce/nodes/Fashion/assets/ed6fc3d7-091f-4e84-b1f6-49b56e7b5146/episerver.core.icontentimage"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_assetOutputPath' "PutNodeJson.txt")' result);  	result = Put ("episerverapi/commerce/nodes/Fashion/assets/ed6fc3d7-091f-4e84-b1f6-49b56e7b5146/episerver.core.icontentimage"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_assetOutputPath' "PutNodeXml.xml")' result);  	return "Put node asset complete.....";  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,EPiServer.Integration.Client.Tests.Cruds,CatalogNodeTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\CatalogNodeTest.cs,PostNode,The following statement contains a magic number: try {  	var model = new Node () {  		Code = "Node 2"'  		Catalog = "Departmental Catalog"'  		EndDate = DateTime.UtcNow.AddDays (100)'  		IsActive = true'  		MetaClass = "CatalogNodeEx"'  		Name = "Test"'  		StartDate = DateTime.UtcNow'  		ParentNodeCode = "Departments"'  		MetaFields = new List<MetaFieldProperty> () {  			new MetaFieldProperty () {  				Name = "DisplayName"'  				Type = "ShortString"'  				Data = new List<MetaFieldData> () {  					new MetaFieldData () {  						Language = "en"'  						Value = "DisplayName"  					}  				}  			}  		}'  		SeoInformation = new List<SeoInfo> () {  			new SeoInfo () {  				Description = "description"'  				Keywords = ""'  				LanguageCode = "en"'  				Title = "title"'  				Uri = "node 2"'  				UriSegment = "node 2"  			}  		}  	};  	var json = JsonConvert.SerializeObject (model);  	var xml = SerializeObjectToXml (typeof(Node)' model);  	var result = Post ("/episerverapi/commerce/nodes"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_nodeOutputPath' "PostJson.txt")' result);  	result = Post ("/episerverapi/commerce/nodes"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_nodeOutputPath' "PostXml.xml")' result);  	return "Post node complete.....";  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,EPiServer.Integration.Client.Tests.Cruds,CatalogNodeTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\CatalogNodeTest.cs,PutNode,The following statement contains a magic number: try {  	var model = new Node () {  		Code = "Node 2"'  		Catalog = "Departmental Catalog"'  		EndDate = DateTime.UtcNow.AddDays (100)'  		IsActive = true'  		MetaClass = "CatalogNodeEx"'  		Name = "Test"'  		StartDate = DateTime.UtcNow'  		ParentNodeCode = "Departments"'  		MetaFields = new List<MetaFieldProperty> () {  			new MetaFieldProperty () {  				Name = "DisplayName"'  				Type = "ShortString"'  				Data = new List<MetaFieldData> () {  					new MetaFieldData () {  						Language = "en"'  						Value = "DisplayName"  					}  				}  			}  		}'  		SeoInformation = new List<SeoInfo> () {  			new SeoInfo () {  				Description = "description"'  				Keywords = ""'  				LanguageCode = "en"'  				Title = "title"'  				Uri = "node 2"'  				UriSegment = "node 2"  			}  		}  	};  	var json = JsonConvert.SerializeObject (model);  	var xml = SerializeObjectToXml (typeof(Node)' model);  	var result = Put ("episerverapi/commerce/nodes/Node 2"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_nodeOutputPath' "PutJson.txt")' result);  	result = Put ("episerverapi/commerce/nodes/Node 2"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_nodeOutputPath' "PutXml.xml")' result);  	return "Put node complete.....";  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,EPiServer.Integration.Client.Tests.Cruds,CatalogEntryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\CatalogEntryTest.cs,PostEntry,The following statement contains a magic number: try {  	var model = new Entry () {  		Code = "WhoKnewBaby"'  		Catalog = "Departmental Catalog"'  		EndDate = DateTime.UtcNow.AddDays (100)'  		EntryType = "Product"'  		InventoryStatus = "Enabled"'  		IsActive = true'  		MetaClass = "Fashion_Product_Class"'  		Name = "Test"'  		StartDate = DateTime.UtcNow'  		MetaFields = new List<MetaFieldProperty> () {  			new MetaFieldProperty () {  				Name = "DisplayName"'  				Type = "ShortString"'  				Data = new List<MetaFieldData> () {  					new MetaFieldData () {  						Language = "en"'  						Value = "DisplayName"  					}  				}  			}  		}'  		SeoInformation = new List<SeoInfo> () {  			new SeoInfo () {  				Description = "description"'  				Keywords = ""'  				LanguageCode = "en"'  				Title = "title"'  				Uri = "whoknew"'  				UriSegment = "whoknew"  			}  		}  	};  	var json = JsonConvert.SerializeObject (model);  	var xml = SerializeObjectToXml (typeof(Entry)' model);  	var result = Post ("/episerverapi/commerce/entries"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_entryOutputPath' "PostJson.txt")' result);  	result = Post ("/episerverapi/commerce/entries"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_entryOutputPath' "PostXml.xml")' result);  	return "Post entry complete.....";  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,EPiServer.Integration.Client.Tests.Cruds,CatalogEntryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\CatalogEntryTest.cs,PutEntry,The following statement contains a magic number: try {  	var model = new Entry () {  		Code = "Dresses-Cocktail-Silk"'  		Catalog = "Departmental Catalog"'  		EndDate = DateTime.UtcNow.AddDays (100)'  		EntryType = "Product"'  		InventoryStatus = "Enabled"'  		IsActive = true'  		MetaClass = "Fashion_Product_Class"'  		Name = "Test"'  		StartDate = DateTime.UtcNow'  		MetaFields = new List<MetaFieldProperty> () {  			new MetaFieldProperty () {  				Name = "DisplayName"'  				Type = "ShortString"'  				Data = new List<MetaFieldData> () {  					new MetaFieldData () {  						Language = "en"'  						Value = "Dresses-Cocktail-Silk"  					}  				}  			}  		}'  		SeoInformation = new List<SeoInfo> () {  			new SeoInfo () {  				Description = "description"'  				Keywords = ""'  				LanguageCode = "en"'  				Title = "title"'  				Uri = "Dresses-Cocktail-Silk"'  				UriSegment = "Dresses-Cocktail-Silk"  			}  		}  	};  	var json = JsonConvert.SerializeObject (model);  	var xml = SerializeObjectToXml (typeof(Entry)' model);  	var result = Put ("episerverapi/commerce/entries/Dresses-Cocktail-Silk"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_entryOutputPath' "PutJson.txt")' result);  	result = Put ("episerverapi/commerce/entries/Dresses-Cocktail-Silk"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_entryOutputPath' "PutXml.xml")' result);  	return "Put entry complete.....";  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,EPiServer.Integration.Client.Tests.Cruds,NodeEntryRelationTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\NodeEntryRelationTest.cs,PutNodeEntryRelation,The following statement contains a magic number: try {  	var model = new NodeEntryRelation () {  		EntryCode = "Tops-Tunics-LongSleeve"'  		NodeCode = "Tops-Sweaters"'  		SortOrder = 5  	};  	var json = JsonConvert.SerializeObject (model);  	var xml = SerializeObjectToXml (typeof(NodeEntryRelation)' model);  	var result = Put ("episerverapi/commerce/entries/Tops-Tunics-LongSleeve/nodeentryrelations/Tops-Sweaters"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_nodeEntryRelationOutputPath' "PutJson.txt")' result);  	result = Put ("episerverapi/commerce/entries/Tops-Tunics-LongSleeve/nodeentryrelations/Tops-Sweaters"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_nodeEntryRelationOutputPath' "PutXml.xml")' result);  	return "Put entry node entry relation complete.....";  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,EPiServer.Integration.Client.Tests.Cruds,PriceTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\PriceTest.cs,PostEntryPrice,The following statement contains a magic number: try {  	var model = new Price () {  		CatalogEntryCode = "Jackets-Peacoats-Hooded-Tan-Small"'  		CurrencyCode = "USD"'  		MarketId = "DEFAULT"'  		MinQuantity = 0'  		PriceCode = "mark"'  		PriceTypeId = "PriceGroup"'  		UnitPrice = 30'  		ValidFrom = DateTime.UtcNow'  		ValidUntil = DateTime.UtcNow.AddDays (100)  	};  	var json = JsonConvert.SerializeObject (model);  	var xml = SerializeObjectToXml (typeof(Price)' model);  	var result = Post ("/episerverapi/commerce/entries/Jackets-Peacoats-Hooded-Tan-Small/prices"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_priceOutputPath' "PostJson.txt")' result);  	result = Post ("/episerverapi/commerce/entries/Jackets-Peacoats-Hooded-Tan-Small/prices"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_priceOutputPath' "PostXml.xml")' result);  	return "Post entry price complete.....";  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,EPiServer.Integration.Client.Tests.Cruds,PriceTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\PriceTest.cs,PostEntryPrice,The following statement contains a magic number: try {  	var model = new Price () {  		CatalogEntryCode = "Jackets-Peacoats-Hooded-Tan-Small"'  		CurrencyCode = "USD"'  		MarketId = "DEFAULT"'  		MinQuantity = 0'  		PriceCode = "mark"'  		PriceTypeId = "PriceGroup"'  		UnitPrice = 30'  		ValidFrom = DateTime.UtcNow'  		ValidUntil = DateTime.UtcNow.AddDays (100)  	};  	var json = JsonConvert.SerializeObject (model);  	var xml = SerializeObjectToXml (typeof(Price)' model);  	var result = Post ("/episerverapi/commerce/entries/Jackets-Peacoats-Hooded-Tan-Small/prices"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_priceOutputPath' "PostJson.txt")' result);  	result = Post ("/episerverapi/commerce/entries/Jackets-Peacoats-Hooded-Tan-Small/prices"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_priceOutputPath' "PostXml.xml")' result);  	return "Post entry price complete.....";  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,EPiServer.Integration.Client.Tests.Cruds,PriceTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\PriceTest.cs,PutEntryPrice,The following statement contains a magic number: try {  	var model = new Price () {  		CatalogEntryCode = "Jackets-Peacoats-Hooded-Tan-Small"'  		CurrencyCode = "USD"'  		MarketId = "DEFAULT"'  		MinQuantity = 0'  		PriceCode = ""'  		PriceTypeId = "AllCustomers"'  		PriceValueId = 250'  		UnitPrice = 30'  		ValidFrom = DateTime.UtcNow'  		ValidUntil = DateTime.UtcNow.AddDays (100)  	};  	var json = JsonConvert.SerializeObject (model);  	var xml = SerializeObjectToXml (typeof(Price)' model);  	var result = Put ("episerverapi/commerce/entries/Jackets-Peacoats-Hooded-Tan-Small/prices/250"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_priceOutputPath' "PutJson.txt")' result);  	result = Put ("episerverapi/commerce/entries/Jackets-Peacoats-Hooded-Tan-Small/prices/250"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_priceOutputPath' "PutXml.xml")' result);  	return "Put entry price complete.....";  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,EPiServer.Integration.Client.Tests.Cruds,PriceTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\PriceTest.cs,PutEntryPrice,The following statement contains a magic number: try {  	var model = new Price () {  		CatalogEntryCode = "Jackets-Peacoats-Hooded-Tan-Small"'  		CurrencyCode = "USD"'  		MarketId = "DEFAULT"'  		MinQuantity = 0'  		PriceCode = ""'  		PriceTypeId = "AllCustomers"'  		PriceValueId = 250'  		UnitPrice = 30'  		ValidFrom = DateTime.UtcNow'  		ValidUntil = DateTime.UtcNow.AddDays (100)  	};  	var json = JsonConvert.SerializeObject (model);  	var xml = SerializeObjectToXml (typeof(Price)' model);  	var result = Put ("episerverapi/commerce/entries/Jackets-Peacoats-Hooded-Tan-Small/prices/250"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_priceOutputPath' "PutJson.txt")' result);  	result = Put ("episerverapi/commerce/entries/Jackets-Peacoats-Hooded-Tan-Small/prices/250"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_priceOutputPath' "PutXml.xml")' result);  	return "Put entry price complete.....";  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,EPiServer.Integration.Client.Tests.Cruds,PriceTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\PriceTest.cs,PutEntryPrice,The following statement contains a magic number: try {  	var model = new Price () {  		CatalogEntryCode = "Jackets-Peacoats-Hooded-Tan-Small"'  		CurrencyCode = "USD"'  		MarketId = "DEFAULT"'  		MinQuantity = 0'  		PriceCode = ""'  		PriceTypeId = "AllCustomers"'  		PriceValueId = 250'  		UnitPrice = 30'  		ValidFrom = DateTime.UtcNow'  		ValidUntil = DateTime.UtcNow.AddDays (100)  	};  	var json = JsonConvert.SerializeObject (model);  	var xml = SerializeObjectToXml (typeof(Price)' model);  	var result = Put ("episerverapi/commerce/entries/Jackets-Peacoats-Hooded-Tan-Small/prices/250"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_priceOutputPath' "PutJson.txt")' result);  	result = Put ("episerverapi/commerce/entries/Jackets-Peacoats-Hooded-Tan-Small/prices/250"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_priceOutputPath' "PutXml.xml")' result);  	return "Put entry price complete.....";  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,EPiServer.Integration.Client.Tests.Cruds,WarehouseInventoryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\WarehouseInventoryTest.cs,PostEntryWarehouseInventory,The following statement contains a magic number: try {  	var model = new WarehouseInventory () {  		AllowBackorder = true'  		AllowPreorder = true'  		BackorderAvailabilityDate = DateTime.UtcNow'  		BackorderQuantity = 2'  		CatalogEntryCode = "Accessories-Electronics-200WattsAMFMCDReciever-sku"'  		InStockQuantity = 23'  		InventoryStatus = "Enabled"'  		PreorderAvailabilityDate = DateTime.UtcNow'  		PreorderQuantity = 3'  		ReorderMinQuantity = 1'  		ReservedQuantity = 1'  		WarehouseCode = "WELLINGTON"  	};  	var json = JsonConvert.SerializeObject (model);  	var xml = SerializeObjectToXml (typeof(WarehouseInventory)' model);  	var result = Post ("/episerverapi/commerce/entries/Accessories-Electronics-200WattsAMFMCDReciever-sku/inventories"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_warehouseInventoryOutputPath' "PostJson.txt")' result);  	result = Post ("/episerverapi/commerce/entries/Accessories-Electronics-200WattsAMFMCDReciever-sku/inventories"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_warehouseInventoryOutputPath' "PostXml.xml")' result);  	return "Post entry warehouse inventory complete.....";  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,EPiServer.Integration.Client.Tests.Cruds,WarehouseInventoryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\WarehouseInventoryTest.cs,PostEntryWarehouseInventory,The following statement contains a magic number: try {  	var model = new WarehouseInventory () {  		AllowBackorder = true'  		AllowPreorder = true'  		BackorderAvailabilityDate = DateTime.UtcNow'  		BackorderQuantity = 2'  		CatalogEntryCode = "Accessories-Electronics-200WattsAMFMCDReciever-sku"'  		InStockQuantity = 23'  		InventoryStatus = "Enabled"'  		PreorderAvailabilityDate = DateTime.UtcNow'  		PreorderQuantity = 3'  		ReorderMinQuantity = 1'  		ReservedQuantity = 1'  		WarehouseCode = "WELLINGTON"  	};  	var json = JsonConvert.SerializeObject (model);  	var xml = SerializeObjectToXml (typeof(WarehouseInventory)' model);  	var result = Post ("/episerverapi/commerce/entries/Accessories-Electronics-200WattsAMFMCDReciever-sku/inventories"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_warehouseInventoryOutputPath' "PostJson.txt")' result);  	result = Post ("/episerverapi/commerce/entries/Accessories-Electronics-200WattsAMFMCDReciever-sku/inventories"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_warehouseInventoryOutputPath' "PostXml.xml")' result);  	return "Post entry warehouse inventory complete.....";  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,EPiServer.Integration.Client.Tests.Cruds,WarehouseInventoryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\WarehouseInventoryTest.cs,PostEntryWarehouseInventory,The following statement contains a magic number: try {  	var model = new WarehouseInventory () {  		AllowBackorder = true'  		AllowPreorder = true'  		BackorderAvailabilityDate = DateTime.UtcNow'  		BackorderQuantity = 2'  		CatalogEntryCode = "Accessories-Electronics-200WattsAMFMCDReciever-sku"'  		InStockQuantity = 23'  		InventoryStatus = "Enabled"'  		PreorderAvailabilityDate = DateTime.UtcNow'  		PreorderQuantity = 3'  		ReorderMinQuantity = 1'  		ReservedQuantity = 1'  		WarehouseCode = "WELLINGTON"  	};  	var json = JsonConvert.SerializeObject (model);  	var xml = SerializeObjectToXml (typeof(WarehouseInventory)' model);  	var result = Post ("/episerverapi/commerce/entries/Accessories-Electronics-200WattsAMFMCDReciever-sku/inventories"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_warehouseInventoryOutputPath' "PostJson.txt")' result);  	result = Post ("/episerverapi/commerce/entries/Accessories-Electronics-200WattsAMFMCDReciever-sku/inventories"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_warehouseInventoryOutputPath' "PostXml.xml")' result);  	return "Post entry warehouse inventory complete.....";  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,EPiServer.Integration.Client.Tests.Cruds,WarehouseInventoryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\WarehouseInventoryTest.cs,PutEntryWarehouseInventory,The following statement contains a magic number: try {  	var model = new WarehouseInventory () {  		AllowBackorder = true'  		AllowPreorder = true'  		BackorderAvailabilityDate = DateTime.UtcNow'  		BackorderQuantity = 2'  		CatalogEntryCode = "Accessories-Electronics-200WattsAMFMCDReciever-sku"'  		InStockQuantity = 23'  		InventoryStatus = "Enabled"'  		PreorderAvailabilityDate = DateTime.UtcNow'  		PreorderQuantity = 3'  		ReorderMinQuantity = 1'  		ReservedQuantity = 1'  		WarehouseCode = "WELLINGTON"  	};  	var json = JsonConvert.SerializeObject (model);  	var xml = SerializeObjectToXml (typeof(WarehouseInventory)' model);  	var result = Put ("episerverapi/commerce/entries/Accessories-Electronics-200WattsAMFMCDReciever-sku/inventories/WELLINGTON"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_warehouseInventoryOutputPath' "PutJson.txt")' result);  	result = Put ("episerverapi/commerce/entries/Accessories-Electronics-200WattsAMFMCDReciever-sku/inventories/WELLINGTON"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_warehouseInventoryOutputPath' "PutXml.xml")' result);  	return "Put entry warehouse inventory complete.....";  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,EPiServer.Integration.Client.Tests.Cruds,WarehouseInventoryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\WarehouseInventoryTest.cs,PutEntryWarehouseInventory,The following statement contains a magic number: try {  	var model = new WarehouseInventory () {  		AllowBackorder = true'  		AllowPreorder = true'  		BackorderAvailabilityDate = DateTime.UtcNow'  		BackorderQuantity = 2'  		CatalogEntryCode = "Accessories-Electronics-200WattsAMFMCDReciever-sku"'  		InStockQuantity = 23'  		InventoryStatus = "Enabled"'  		PreorderAvailabilityDate = DateTime.UtcNow'  		PreorderQuantity = 3'  		ReorderMinQuantity = 1'  		ReservedQuantity = 1'  		WarehouseCode = "WELLINGTON"  	};  	var json = JsonConvert.SerializeObject (model);  	var xml = SerializeObjectToXml (typeof(WarehouseInventory)' model);  	var result = Put ("episerverapi/commerce/entries/Accessories-Electronics-200WattsAMFMCDReciever-sku/inventories/WELLINGTON"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_warehouseInventoryOutputPath' "PutJson.txt")' result);  	result = Put ("episerverapi/commerce/entries/Accessories-Electronics-200WattsAMFMCDReciever-sku/inventories/WELLINGTON"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_warehouseInventoryOutputPath' "PutXml.xml")' result);  	return "Put entry warehouse inventory complete.....";  }  catch (Exception ex) {  	return ex.Message;  }  
Magic Number,EPiServer.Integration.Client.Tests.Cruds,WarehouseInventoryTest,C:\repos\episerver_ServiceApi-Client\EPiServer.ServiceApi.Client\Tests\Cruds\WarehouseInventoryTest.cs,PutEntryWarehouseInventory,The following statement contains a magic number: try {  	var model = new WarehouseInventory () {  		AllowBackorder = true'  		AllowPreorder = true'  		BackorderAvailabilityDate = DateTime.UtcNow'  		BackorderQuantity = 2'  		CatalogEntryCode = "Accessories-Electronics-200WattsAMFMCDReciever-sku"'  		InStockQuantity = 23'  		InventoryStatus = "Enabled"'  		PreorderAvailabilityDate = DateTime.UtcNow'  		PreorderQuantity = 3'  		ReorderMinQuantity = 1'  		ReservedQuantity = 1'  		WarehouseCode = "WELLINGTON"  	};  	var json = JsonConvert.SerializeObject (model);  	var xml = SerializeObjectToXml (typeof(WarehouseInventory)' model);  	var result = Put ("episerverapi/commerce/entries/Accessories-Electronics-200WattsAMFMCDReciever-sku/inventories/WELLINGTON"' new StringContent (json' Encoding.UTF8' "application/json")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_warehouseInventoryOutputPath' "PutJson.txt")' result);  	result = Put ("episerverapi/commerce/entries/Accessories-Electronics-200WattsAMFMCDReciever-sku/inventories/WELLINGTON"' new StringContent (xml' Encoding.UTF8' "text/xml")).Result.Content.ReadAsStringAsync ().Result;  	WriteTextFile (Path.Combine (_warehouseInventoryOutputPath' "PutXml.xml")' result);  	return "Put entry warehouse inventory complete.....";  }  catch (Exception ex) {  	return ex.Message;  }  
