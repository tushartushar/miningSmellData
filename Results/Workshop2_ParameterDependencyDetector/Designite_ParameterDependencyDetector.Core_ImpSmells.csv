Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ParameterDependencyDetector.Core,StoredProcedureParser,C:\repos\Workshop2_ParameterDependencyDetector\ParameterDependencyDetector.Core\StoredProcedureParser.cs,GetParametersForInstance,Cyclomatic complexity of the method is 9
Long Parameter List,ParameterDependencyDetector.Core,StoredProcedureParser,C:\repos\Workshop2_ParameterDependencyDetector\ParameterDependencyDetector.Core\StoredProcedureParser.cs,GetParametersForInstance,The method has 5 parameters.
Long Statement,ParameterDependencyDetector.Core,StoredProcedureParser,C:\repos\Workshop2_ParameterDependencyDetector\ParameterDependencyDetector.Core\StoredProcedureParser.cs,DetectUsages,The length of the statement  "	var procedureAsLines = procedureToParse.Split (Environment.NewLine.ToCharArray ()).Select (x => x.Trim ()).Where (x => string.IsNullOrEmpty (x) == false).ToArray (); " is 165.
Long Statement,ParameterDependencyDetector.Core,StoredProcedureParser,C:\repos\Workshop2_ParameterDependencyDetector\ParameterDependencyDetector.Core\StoredProcedureParser.cs,RemoveAllComments,The length of the statement  "	var noComments = Regex.Replace (procedureToParse' blockComments + "|" + lineComments + "|" + strings + "|" + verbatimStrings + "|" + prints' me =>  { " is 149.
Long Statement,ParameterDependencyDetector.Core,StoredProcedureParser,C:\repos\Workshop2_ParameterDependencyDetector\ParameterDependencyDetector.Core\StoredProcedureParser.cs,GetParametersForInstance,The length of the statement  "	var whereToStart = currentLine.IndexOf (procedureName' StringComparison.InvariantCultureIgnoreCase) + procedureName.Length; " is 123.
Magic Number,ParameterDependencyDetector.Core,StoredProcedureParser,C:\repos\Workshop2_ParameterDependencyDetector\ParameterDependencyDetector.Core\StoredProcedureParser.cs,GetParametersForInstance,The following statement contains a magic number: while (!hasFoundEnd) {  	var matches = currentLine.Split (''').Select (x => x.Trim ()).ToList ();  	foreach (var match in matches) {  		var parameterParts = match.Split ('=').Select (x => x.Trim ()).ToArray ();  		//TODO: If we want to increase precision' then we need to support the format of: usp_SP @Param1' @Param2 @Param3  		if (parameterParts.Count () < 2 || string.IsNullOrEmpty (parameterParts [0]))  			continue;  		var isLast = matches.IndexOf (match) == (matches.Count - 1);  		if (isLast)  			hasFoundEnd = true;  		if (!result.ContainsKey (parameterParts [0])) {  			hasFoundEnd = true;  			// throw new Exception("Found un-expected paramter: " + parameterParts[0]);  			continue;  		}  		result [parameterParts [0]] = parameterParts [1];  	}  	if (!hasFoundEnd) {  		instance++;  		if (instance < (procedureToParse.Count () - 1))  			currentLine = procedureToParse [instance];  		else  			hasFoundEnd = true;  	}  }  
Magic Number,ParameterDependencyDetector.Core,StoredProcedureParser,C:\repos\Workshop2_ParameterDependencyDetector\ParameterDependencyDetector.Core\StoredProcedureParser.cs,GetParametersForInstance,The following statement contains a magic number: foreach (var match in matches) {  	var parameterParts = match.Split ('=').Select (x => x.Trim ()).ToArray ();  	//TODO: If we want to increase precision' then we need to support the format of: usp_SP @Param1' @Param2 @Param3  	if (parameterParts.Count () < 2 || string.IsNullOrEmpty (parameterParts [0]))  		continue;  	var isLast = matches.IndexOf (match) == (matches.Count - 1);  	if (isLast)  		hasFoundEnd = true;  	if (!result.ContainsKey (parameterParts [0])) {  		hasFoundEnd = true;  		// throw new Exception("Found un-expected paramter: " + parameterParts[0]);  		continue;  	}  	result [parameterParts [0]] = parameterParts [1];  }  
Magic Number,ParameterDependencyDetector.Core,StoredProcedureParser,C:\repos\Workshop2_ParameterDependencyDetector\ParameterDependencyDetector.Core\StoredProcedureParser.cs,GetParametersForInstance,The following statement contains a magic number: if (parameterParts.Count () < 2 || string.IsNullOrEmpty (parameterParts [0]))  	continue;  
