Implementation smell,Namespace,Class,File,Method,Description
Long Method,socks5.Socks5Client,Socks,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,DoSocksAuth,The method has 113 lines of code.
Long Method,socks5.Socks,SocksClient,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\SocksClient.cs,Begin,The method has 103 lines of code.
Complex Method,socks5.Plugin,PluginLoader,C:\repos\ThrDev_Socks5\socks5\socks5\Plugin\PluginLoader.cs,LoadPlugins,Cyclomatic complexity of the method is 13
Complex Method,socks5.Socks5Client,Socks,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,DoSocksAuth,Cyclomatic complexity of the method is 10
Complex Method,socks5.Socks,SocksClient,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\SocksClient.cs,Begin,Cyclomatic complexity of the method is 10
Complex Method,socks5,SocksTunnel,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\SocksTunnel.cs,Open,Cyclomatic complexity of the method is 8
Long Parameter List,socks5.Socks5Client,Socks5Client,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Socks5Client,The method has 6 parameters. Parameters: ipOrDomain' port' dest' destport' username' password
Long Parameter List,socks5.Socks5Client,Socks5Client,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Socks5Client,The method has 6 parameters. Parameters: ip' port' dest' destport' username' password
Long Parameter List,socks5.Socks5Client,Socks5Client,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,DoSocks,The method has 6 parameters. Parameters: ip' port' dest' destport' username' password
Long Parameter List,socks5.Socks,SocksSpecialTunnel,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\SocksSpecialTunnel.cs,SocksSpecialTunnel,The method has 6 parameters. Parameters: p' ph' req' req1' packetSize' timeout
Long Parameter List,socks5,SocksTunnel,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\SocksTunnel.cs,SocksTunnel,The method has 5 parameters. Parameters: p' req' req1' packetSize' timeout
Long Statement,socks5.Socks,SocksClient,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\SocksClient.cs,Begin,The length of the statement  "            if (lhandlers.Count > 0 && (authtypes.Contains(AuthTypes.SocksBoth) || authtypes.Contains(AuthTypes.SocksEncrypt) || authtypes.Contains(AuthTypes.SocksCompress) || authtypes.Contains(AuthTypes.Login))) " is 201.
Complex Conditional,socks5.Socks,SocksClient,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\SocksClient.cs,Begin,The conditional expression  "lhandlers.Count > 0 && (authtypes.Contains(AuthTypes.SocksBoth) || authtypes.Contains(AuthTypes.SocksEncrypt) || authtypes.Contains(AuthTypes.SocksCompress) || authtypes.Contains(AuthTypes.Login))"  is complex.
Empty Catch Block,socks5.Plugin,PluginLoader,C:\repos\ThrDev_Socks5\socks5\socks5\Plugin\PluginLoader.cs,LoadPlugins,The method has an empty catch block.
Empty Catch Block,socks5.Plugin,PluginLoader,C:\repos\ThrDev_Socks5\socks5\socks5\Plugin\PluginLoader.cs,LoadPlugins,The method has an empty catch block.
Empty Catch Block,socks5.Socks,SocksSpecialTunnel,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\SocksSpecialTunnel.cs,ConnectHandler,The method has an empty catch block.
Empty Catch Block,socks5,Socks5Server,C:\repos\ThrDev_Socks5\socks5\socks5\SocksServer\Socks5Server.cs,_server_onClientConnected,The method has an empty catch block.
Empty Catch Block,socks5,Socks5Server,C:\repos\ThrDev_Socks5\socks5\socks5\SocksServer\Socks5Server.cs,client_onClientDisconnected,The method has an empty catch block.
Empty Catch Block,socks5.TCP,Client,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\Client.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,socks5.TCP,TcpServer,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\TcpServer.cs,AcceptConnections,The method has an empty catch block.
Magic Number,socks5.HTTP,Chunked,C:\repos\ThrDev_Socks5\socks5\socks5\Chunked.cs,Chunked,The following statement contains a magic number: if (IsChunked(oldbuffer))              {                  int endofheader = oldbuffer.FindString("\r\n\r\n");                  int endofchunked = oldbuffer.FindString("\r\n"' endofheader + 4);                  //                  string chunked = oldbuffer.GetBetween(endofheader + 4' endofchunked);                  //convert chunked data to int.                  int totallen = chunked.FromHex();                  //                  if (totallen > 0)                  {                      //start a while loop and receive till end of chunk.                      totalbuff = new byte[65535];                      finalbuff = new byte[size];                      //remove chunk data before adding.                      oldbuffer = oldbuffer.ReplaceBetween(endofheader + 4' endofchunked + 2' new byte[] { });                      Buffer.BlockCopy(oldbuffer' 0' finalbuff' 0' size);                      if (f.Connected)                      {                          int totalchunksize = 0;                          int received = f.Receive(totalbuff' 0' totalbuff.Length' SocketFlags.None);                          while ((totalchunksize = GetChunkSize(totalbuff' received)) != -1)                          {                              //add data to final byte buffer.                              byte[] chunkedData = GetChunkData(totalbuff' received);                              byte[] tempData = new byte[chunkedData.Length + finalbuff.Length];                              //get data AFTER chunked response.                              Buffer.BlockCopy(finalbuff' 0' tempData' 0' finalbuff.Length);                              Buffer.BlockCopy(chunkedData' 0' tempData' finalbuff.Length' chunkedData.Length);                              //now add to finalbuff.                              finalbuff = tempData;                              //receive again.                              if (totalchunksize == -2)                                  break;                              else                                  received = f.Receive(totalbuff' 0' totalbuff.Length' SocketFlags.None);                            }                          //end of chunk.                          Console.WriteLine("Got chunk! Size: {0}"' finalbuff.Length);                      }                  }                  else                  {                      finalbuff = new byte[size];                      Buffer.BlockCopy(oldbuffer' 0' finalbuff' 0' size);                  }              }
Magic Number,socks5.HTTP,Chunked,C:\repos\ThrDev_Socks5\socks5\socks5\Chunked.cs,Chunked,The following statement contains a magic number: if (IsChunked(oldbuffer))              {                  int endofheader = oldbuffer.FindString("\r\n\r\n");                  int endofchunked = oldbuffer.FindString("\r\n"' endofheader + 4);                  //                  string chunked = oldbuffer.GetBetween(endofheader + 4' endofchunked);                  //convert chunked data to int.                  int totallen = chunked.FromHex();                  //                  if (totallen > 0)                  {                      //start a while loop and receive till end of chunk.                      totalbuff = new byte[65535];                      finalbuff = new byte[size];                      //remove chunk data before adding.                      oldbuffer = oldbuffer.ReplaceBetween(endofheader + 4' endofchunked + 2' new byte[] { });                      Buffer.BlockCopy(oldbuffer' 0' finalbuff' 0' size);                      if (f.Connected)                      {                          int totalchunksize = 0;                          int received = f.Receive(totalbuff' 0' totalbuff.Length' SocketFlags.None);                          while ((totalchunksize = GetChunkSize(totalbuff' received)) != -1)                          {                              //add data to final byte buffer.                              byte[] chunkedData = GetChunkData(totalbuff' received);                              byte[] tempData = new byte[chunkedData.Length + finalbuff.Length];                              //get data AFTER chunked response.                              Buffer.BlockCopy(finalbuff' 0' tempData' 0' finalbuff.Length);                              Buffer.BlockCopy(chunkedData' 0' tempData' finalbuff.Length' chunkedData.Length);                              //now add to finalbuff.                              finalbuff = tempData;                              //receive again.                              if (totalchunksize == -2)                                  break;                              else                                  received = f.Receive(totalbuff' 0' totalbuff.Length' SocketFlags.None);                            }                          //end of chunk.                          Console.WriteLine("Got chunk! Size: {0}"' finalbuff.Length);                      }                  }                  else                  {                      finalbuff = new byte[size];                      Buffer.BlockCopy(oldbuffer' 0' finalbuff' 0' size);                  }              }
Magic Number,socks5.HTTP,Chunked,C:\repos\ThrDev_Socks5\socks5\socks5\Chunked.cs,Chunked,The following statement contains a magic number: if (IsChunked(oldbuffer))              {                  int endofheader = oldbuffer.FindString("\r\n\r\n");                  int endofchunked = oldbuffer.FindString("\r\n"' endofheader + 4);                  //                  string chunked = oldbuffer.GetBetween(endofheader + 4' endofchunked);                  //convert chunked data to int.                  int totallen = chunked.FromHex();                  //                  if (totallen > 0)                  {                      //start a while loop and receive till end of chunk.                      totalbuff = new byte[65535];                      finalbuff = new byte[size];                      //remove chunk data before adding.                      oldbuffer = oldbuffer.ReplaceBetween(endofheader + 4' endofchunked + 2' new byte[] { });                      Buffer.BlockCopy(oldbuffer' 0' finalbuff' 0' size);                      if (f.Connected)                      {                          int totalchunksize = 0;                          int received = f.Receive(totalbuff' 0' totalbuff.Length' SocketFlags.None);                          while ((totalchunksize = GetChunkSize(totalbuff' received)) != -1)                          {                              //add data to final byte buffer.                              byte[] chunkedData = GetChunkData(totalbuff' received);                              byte[] tempData = new byte[chunkedData.Length + finalbuff.Length];                              //get data AFTER chunked response.                              Buffer.BlockCopy(finalbuff' 0' tempData' 0' finalbuff.Length);                              Buffer.BlockCopy(chunkedData' 0' tempData' finalbuff.Length' chunkedData.Length);                              //now add to finalbuff.                              finalbuff = tempData;                              //receive again.                              if (totalchunksize == -2)                                  break;                              else                                  received = f.Receive(totalbuff' 0' totalbuff.Length' SocketFlags.None);                            }                          //end of chunk.                          Console.WriteLine("Got chunk! Size: {0}"' finalbuff.Length);                      }                  }                  else                  {                      finalbuff = new byte[size];                      Buffer.BlockCopy(oldbuffer' 0' finalbuff' 0' size);                  }              }
Magic Number,socks5.HTTP,Chunked,C:\repos\ThrDev_Socks5\socks5\socks5\Chunked.cs,Chunked,The following statement contains a magic number: if (IsChunked(oldbuffer))              {                  int endofheader = oldbuffer.FindString("\r\n\r\n");                  int endofchunked = oldbuffer.FindString("\r\n"' endofheader + 4);                  //                  string chunked = oldbuffer.GetBetween(endofheader + 4' endofchunked);                  //convert chunked data to int.                  int totallen = chunked.FromHex();                  //                  if (totallen > 0)                  {                      //start a while loop and receive till end of chunk.                      totalbuff = new byte[65535];                      finalbuff = new byte[size];                      //remove chunk data before adding.                      oldbuffer = oldbuffer.ReplaceBetween(endofheader + 4' endofchunked + 2' new byte[] { });                      Buffer.BlockCopy(oldbuffer' 0' finalbuff' 0' size);                      if (f.Connected)                      {                          int totalchunksize = 0;                          int received = f.Receive(totalbuff' 0' totalbuff.Length' SocketFlags.None);                          while ((totalchunksize = GetChunkSize(totalbuff' received)) != -1)                          {                              //add data to final byte buffer.                              byte[] chunkedData = GetChunkData(totalbuff' received);                              byte[] tempData = new byte[chunkedData.Length + finalbuff.Length];                              //get data AFTER chunked response.                              Buffer.BlockCopy(finalbuff' 0' tempData' 0' finalbuff.Length);                              Buffer.BlockCopy(chunkedData' 0' tempData' finalbuff.Length' chunkedData.Length);                              //now add to finalbuff.                              finalbuff = tempData;                              //receive again.                              if (totalchunksize == -2)                                  break;                              else                                  received = f.Receive(totalbuff' 0' totalbuff.Length' SocketFlags.None);                            }                          //end of chunk.                          Console.WriteLine("Got chunk! Size: {0}"' finalbuff.Length);                      }                  }                  else                  {                      finalbuff = new byte[size];                      Buffer.BlockCopy(oldbuffer' 0' finalbuff' 0' size);                  }              }
Magic Number,socks5.HTTP,Chunked,C:\repos\ThrDev_Socks5\socks5\socks5\Chunked.cs,Chunked,The following statement contains a magic number: if (IsChunked(oldbuffer))              {                  int endofheader = oldbuffer.FindString("\r\n\r\n");                  int endofchunked = oldbuffer.FindString("\r\n"' endofheader + 4);                  //                  string chunked = oldbuffer.GetBetween(endofheader + 4' endofchunked);                  //convert chunked data to int.                  int totallen = chunked.FromHex();                  //                  if (totallen > 0)                  {                      //start a while loop and receive till end of chunk.                      totalbuff = new byte[65535];                      finalbuff = new byte[size];                      //remove chunk data before adding.                      oldbuffer = oldbuffer.ReplaceBetween(endofheader + 4' endofchunked + 2' new byte[] { });                      Buffer.BlockCopy(oldbuffer' 0' finalbuff' 0' size);                      if (f.Connected)                      {                          int totalchunksize = 0;                          int received = f.Receive(totalbuff' 0' totalbuff.Length' SocketFlags.None);                          while ((totalchunksize = GetChunkSize(totalbuff' received)) != -1)                          {                              //add data to final byte buffer.                              byte[] chunkedData = GetChunkData(totalbuff' received);                              byte[] tempData = new byte[chunkedData.Length + finalbuff.Length];                              //get data AFTER chunked response.                              Buffer.BlockCopy(finalbuff' 0' tempData' 0' finalbuff.Length);                              Buffer.BlockCopy(chunkedData' 0' tempData' finalbuff.Length' chunkedData.Length);                              //now add to finalbuff.                              finalbuff = tempData;                              //receive again.                              if (totalchunksize == -2)                                  break;                              else                                  received = f.Receive(totalbuff' 0' totalbuff.Length' SocketFlags.None);                            }                          //end of chunk.                          Console.WriteLine("Got chunk! Size: {0}"' finalbuff.Length);                      }                  }                  else                  {                      finalbuff = new byte[size];                      Buffer.BlockCopy(oldbuffer' 0' finalbuff' 0' size);                  }              }
Magic Number,socks5.HTTP,Chunked,C:\repos\ThrDev_Socks5\socks5\socks5\Chunked.cs,Chunked,The following statement contains a magic number: if (IsChunked(oldbuffer))              {                  int endofheader = oldbuffer.FindString("\r\n\r\n");                  int endofchunked = oldbuffer.FindString("\r\n"' endofheader + 4);                  //                  string chunked = oldbuffer.GetBetween(endofheader + 4' endofchunked);                  //convert chunked data to int.                  int totallen = chunked.FromHex();                  //                  if (totallen > 0)                  {                      //start a while loop and receive till end of chunk.                      totalbuff = new byte[65535];                      finalbuff = new byte[size];                      //remove chunk data before adding.                      oldbuffer = oldbuffer.ReplaceBetween(endofheader + 4' endofchunked + 2' new byte[] { });                      Buffer.BlockCopy(oldbuffer' 0' finalbuff' 0' size);                      if (f.Connected)                      {                          int totalchunksize = 0;                          int received = f.Receive(totalbuff' 0' totalbuff.Length' SocketFlags.None);                          while ((totalchunksize = GetChunkSize(totalbuff' received)) != -1)                          {                              //add data to final byte buffer.                              byte[] chunkedData = GetChunkData(totalbuff' received);                              byte[] tempData = new byte[chunkedData.Length + finalbuff.Length];                              //get data AFTER chunked response.                              Buffer.BlockCopy(finalbuff' 0' tempData' 0' finalbuff.Length);                              Buffer.BlockCopy(chunkedData' 0' tempData' finalbuff.Length' chunkedData.Length);                              //now add to finalbuff.                              finalbuff = tempData;                              //receive again.                              if (totalchunksize == -2)                                  break;                              else                                  received = f.Receive(totalbuff' 0' totalbuff.Length' SocketFlags.None);                            }                          //end of chunk.                          Console.WriteLine("Got chunk! Size: {0}"' finalbuff.Length);                      }                  }                  else                  {                      finalbuff = new byte[size];                      Buffer.BlockCopy(oldbuffer' 0' finalbuff' 0' size);                  }              }
Magic Number,socks5.HTTP,Chunked,C:\repos\ThrDev_Socks5\socks5\socks5\Chunked.cs,GetChunkSize,The following statement contains a magic number: if(buffer.FindString("\r\n0\r\n\r\n"' count - 7) != -1)              {                  //end of buffer.                  return -2;              }
Magic Number,socks5.HTTP,Chunked,C:\repos\ThrDev_Socks5\socks5\socks5\Chunked.cs,GetChunkSize,The following statement contains a magic number: if(buffer.FindString("\r\n0\r\n\r\n"' count - 7) != -1)              {                  //end of buffer.                  return -2;              }
Magic Number,socks5.HTTP,Chunked,C:\repos\ThrDev_Socks5\socks5\socks5\Chunked.cs,GetChunkData,The following statement contains a magic number: return buffer.GetInBetween(buffer.FindString("\r\n") + 2' size);
Magic Number,socks5.Encryption,SocksEncryption,C:\repos\ThrDev_Socks5\socks5\socks5\Encryption\SocksEncryption.cs,GenerateKeys,The following statement contains a magic number: key = new RSACryptoServiceProvider(1024);
Magic Number,socks5.Encryption,SocksEncryption,C:\repos\ThrDev_Socks5\socks5\socks5\Encryption\SocksEncryption.cs,GenerateKeys,The following statement contains a magic number: remotepubkey = new RSACryptoServiceProvider(1024);
Magic Number,socks5.Encryption,SocksEncryption,C:\repos\ThrDev_Socks5\socks5\socks5\Encryption\SocksEncryption.cs,GenerateKeys,The following statement contains a magic number: dc.PassPhrase = Utils.RandStr(20);
Magic Number,socks5.Socks5Client,Socks,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,Greet,The following statement contains a magic number: var bytes = new byte[supportedAuthTypes.Count + 2];
Magic Number,socks5.Socks5Client,Socks,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,Greet,The following statement contains a magic number: for (var i = 0; i < supportedAuthTypes.Count; i++)              {                  bytes[i + 2] = (byte)supportedAuthTypes[i];              }
Magic Number,socks5.Socks5Client,Socks,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,Greet,The following statement contains a magic number: byte[] buffer = new byte[512];
Magic Number,socks5.Socks5Client,Socks,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,SendLogin,The following statement contains a magic number: byte[] x = new byte[Username.Length + Password.Length + 3];
Magic Number,socks5.Socks5Client,Socks,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,SendLogin,The following statement contains a magic number: Buffer.BlockCopy(Encoding.ASCII.GetBytes(Username)' 0' x' 2' Username.Length);
Magic Number,socks5.Socks5Client,Socks,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,SendLogin,The following statement contains a magic number: byte[] buffer = new byte[512];
Magic Number,socks5.Socks5Client,Socks,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,SendRequest,The following statement contains a magic number: byte[] buffer = new byte[512];
Magic Number,socks5.Socks5Client,Socks,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,DoSocksAuth,The following statement contains a magic number: if (auth != AuthTypes.None)              {                  switch (auth)                  {                      case AuthTypes.Login:                          //logged in.                          p.enc.SetType(AuthTypes.Login);                          //just reqeust login?                            break;                      case AuthTypes.SocksBoth:                          //socksboth.                          p.enc.SetType(AuthTypes.SocksBoth);                          p.enc.GenerateKeys();                          //send public key.                          p.Client.Send(p.enc.GetPublicKey());                          //now receive key.                            byte[] buffer = new byte[4096];                          int keysize = p.Client.Receive(buffer' 0' buffer.Length);                          p.enc.SetKey(buffer' 0' keysize);                          //let them know we got it                          //now receive our encryption key.                          int enckeysize = p.Client.Receive(buffer' 0' buffer.Length);                          //decrypt with our public key.                          byte[] newkey = new byte[enckeysize];                          Buffer.BlockCopy(buffer' 0' newkey' 0' enckeysize);                          p.enc.SetEncKey(p.enc.key.Decrypt(newkey' false));                          //now we share our encryption key.                          p.Client.Send(p.enc.ShareEncryptionKey());                            break;                      case AuthTypes.SocksEncrypt:                          p.enc.SetType(AuthTypes.SocksEncrypt);                          p.enc.GenerateKeys();                          //send public key.                          p.Client.Send(p.enc.GetPublicKey());                          //now receive key.                            buffer = new byte[4096];                          keysize = p.Client.Receive(buffer' 0' buffer.Length);                          p.enc.SetKey(buffer' 0' keysize);                          //now receive our encryption key.                          enckeysize = p.Client.Receive(buffer' 0' buffer.Length);                          //decrypt with our public key.                          newkey = new byte[enckeysize];                          Buffer.BlockCopy(buffer' 0' newkey' 0' enckeysize);                          p.enc.SetEncKey(p.enc.key.Decrypt(newkey' false));                          //now we share our encryption key.                            p.Client.Send(p.enc.ShareEncryptionKey());                            //socksencrypt.                          break;                      case AuthTypes.SocksCompress:                          p.enc.SetType(AuthTypes.SocksCompress);                          //sockscompress.                          break;                      default:                          p.Client.Disconnect();                          return false;                  }                  if (p.enc.GetAuthType() != AuthTypes.Login)                  {                      //now receive login params.                      byte[] buff = new byte[1024];                      int recv = p.Client.Receive(buff' 0' buff.Length);                      //check for                       if (recv > 0)                      {                          //check if socks5 version is 5                          if (buff[0] == 0x05)                          {                              //good.                              if (buff[1] == (byte)AuthTypes.Login)                              {                                  if (Username == null || Password == null) { p.Client.Sock.Close(); return false; }                                  int ret = Socks.SendLogin(p.Client' Username' Password);                                  if (ret != 1)                                  {                                      p.Client.Sock.Close();                                      return false;                                  }                              }                              else                              {                                  //idk? close for now.                                  p.Client.Disconnect();                                  return false;                              }                          }                      }                      else                      {                          p.Client.Disconnect();                          return false;                      }                  }                  else                  {                      if (Username == null || Password == null) { p.Client.Sock.Close(); return false; }                      int ret = Socks.SendLogin(p.Client'Username' Password);                      if (ret != 1)                      {                          p.Client.Sock.Close();                          return false;                      }                  }              }
Magic Number,socks5.Socks5Client,Socks,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,DoSocksAuth,The following statement contains a magic number: if (auth != AuthTypes.None)              {                  switch (auth)                  {                      case AuthTypes.Login:                          //logged in.                          p.enc.SetType(AuthTypes.Login);                          //just reqeust login?                            break;                      case AuthTypes.SocksBoth:                          //socksboth.                          p.enc.SetType(AuthTypes.SocksBoth);                          p.enc.GenerateKeys();                          //send public key.                          p.Client.Send(p.enc.GetPublicKey());                          //now receive key.                            byte[] buffer = new byte[4096];                          int keysize = p.Client.Receive(buffer' 0' buffer.Length);                          p.enc.SetKey(buffer' 0' keysize);                          //let them know we got it                          //now receive our encryption key.                          int enckeysize = p.Client.Receive(buffer' 0' buffer.Length);                          //decrypt with our public key.                          byte[] newkey = new byte[enckeysize];                          Buffer.BlockCopy(buffer' 0' newkey' 0' enckeysize);                          p.enc.SetEncKey(p.enc.key.Decrypt(newkey' false));                          //now we share our encryption key.                          p.Client.Send(p.enc.ShareEncryptionKey());                            break;                      case AuthTypes.SocksEncrypt:                          p.enc.SetType(AuthTypes.SocksEncrypt);                          p.enc.GenerateKeys();                          //send public key.                          p.Client.Send(p.enc.GetPublicKey());                          //now receive key.                            buffer = new byte[4096];                          keysize = p.Client.Receive(buffer' 0' buffer.Length);                          p.enc.SetKey(buffer' 0' keysize);                          //now receive our encryption key.                          enckeysize = p.Client.Receive(buffer' 0' buffer.Length);                          //decrypt with our public key.                          newkey = new byte[enckeysize];                          Buffer.BlockCopy(buffer' 0' newkey' 0' enckeysize);                          p.enc.SetEncKey(p.enc.key.Decrypt(newkey' false));                          //now we share our encryption key.                            p.Client.Send(p.enc.ShareEncryptionKey());                            //socksencrypt.                          break;                      case AuthTypes.SocksCompress:                          p.enc.SetType(AuthTypes.SocksCompress);                          //sockscompress.                          break;                      default:                          p.Client.Disconnect();                          return false;                  }                  if (p.enc.GetAuthType() != AuthTypes.Login)                  {                      //now receive login params.                      byte[] buff = new byte[1024];                      int recv = p.Client.Receive(buff' 0' buff.Length);                      //check for                       if (recv > 0)                      {                          //check if socks5 version is 5                          if (buff[0] == 0x05)                          {                              //good.                              if (buff[1] == (byte)AuthTypes.Login)                              {                                  if (Username == null || Password == null) { p.Client.Sock.Close(); return false; }                                  int ret = Socks.SendLogin(p.Client' Username' Password);                                  if (ret != 1)                                  {                                      p.Client.Sock.Close();                                      return false;                                  }                              }                              else                              {                                  //idk? close for now.                                  p.Client.Disconnect();                                  return false;                              }                          }                      }                      else                      {                          p.Client.Disconnect();                          return false;                      }                  }                  else                  {                      if (Username == null || Password == null) { p.Client.Sock.Close(); return false; }                      int ret = Socks.SendLogin(p.Client'Username' Password);                      if (ret != 1)                      {                          p.Client.Sock.Close();                          return false;                      }                  }              }
Magic Number,socks5.Socks5Client,Socks,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,DoSocksAuth,The following statement contains a magic number: if (auth != AuthTypes.None)              {                  switch (auth)                  {                      case AuthTypes.Login:                          //logged in.                          p.enc.SetType(AuthTypes.Login);                          //just reqeust login?                            break;                      case AuthTypes.SocksBoth:                          //socksboth.                          p.enc.SetType(AuthTypes.SocksBoth);                          p.enc.GenerateKeys();                          //send public key.                          p.Client.Send(p.enc.GetPublicKey());                          //now receive key.                            byte[] buffer = new byte[4096];                          int keysize = p.Client.Receive(buffer' 0' buffer.Length);                          p.enc.SetKey(buffer' 0' keysize);                          //let them know we got it                          //now receive our encryption key.                          int enckeysize = p.Client.Receive(buffer' 0' buffer.Length);                          //decrypt with our public key.                          byte[] newkey = new byte[enckeysize];                          Buffer.BlockCopy(buffer' 0' newkey' 0' enckeysize);                          p.enc.SetEncKey(p.enc.key.Decrypt(newkey' false));                          //now we share our encryption key.                          p.Client.Send(p.enc.ShareEncryptionKey());                            break;                      case AuthTypes.SocksEncrypt:                          p.enc.SetType(AuthTypes.SocksEncrypt);                          p.enc.GenerateKeys();                          //send public key.                          p.Client.Send(p.enc.GetPublicKey());                          //now receive key.                            buffer = new byte[4096];                          keysize = p.Client.Receive(buffer' 0' buffer.Length);                          p.enc.SetKey(buffer' 0' keysize);                          //now receive our encryption key.                          enckeysize = p.Client.Receive(buffer' 0' buffer.Length);                          //decrypt with our public key.                          newkey = new byte[enckeysize];                          Buffer.BlockCopy(buffer' 0' newkey' 0' enckeysize);                          p.enc.SetEncKey(p.enc.key.Decrypt(newkey' false));                          //now we share our encryption key.                            p.Client.Send(p.enc.ShareEncryptionKey());                            //socksencrypt.                          break;                      case AuthTypes.SocksCompress:                          p.enc.SetType(AuthTypes.SocksCompress);                          //sockscompress.                          break;                      default:                          p.Client.Disconnect();                          return false;                  }                  if (p.enc.GetAuthType() != AuthTypes.Login)                  {                      //now receive login params.                      byte[] buff = new byte[1024];                      int recv = p.Client.Receive(buff' 0' buff.Length);                      //check for                       if (recv > 0)                      {                          //check if socks5 version is 5                          if (buff[0] == 0x05)                          {                              //good.                              if (buff[1] == (byte)AuthTypes.Login)                              {                                  if (Username == null || Password == null) { p.Client.Sock.Close(); return false; }                                  int ret = Socks.SendLogin(p.Client' Username' Password);                                  if (ret != 1)                                  {                                      p.Client.Sock.Close();                                      return false;                                  }                              }                              else                              {                                  //idk? close for now.                                  p.Client.Disconnect();                                  return false;                              }                          }                      }                      else                      {                          p.Client.Disconnect();                          return false;                      }                  }                  else                  {                      if (Username == null || Password == null) { p.Client.Sock.Close(); return false; }                      int ret = Socks.SendLogin(p.Client'Username' Password);                      if (ret != 1)                      {                          p.Client.Sock.Close();                          return false;                      }                  }              }
Magic Number,socks5.Socks5Client,Socks5Client,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,ConnectAsync,The following statement contains a magic number: Client = new Client(p' 4200);
Magic Number,socks5.Socks5Client,Socks5Client,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Send,The following statement contains a magic number: try              {                  //buffer sending.                  int offst = 0;                  while(true)                  {                      byte[] outputdata = enc.ProcessOutputData(buffer' offst' (length - offst > 4092 ? 4092 : length - offst));                      offst += (length - offst > 4092 ? 4092 : length - offst);                      //craft headers & shit.                      //send outputdata's length firs.t                      if (enc.GetAuthType() != AuthTypes.Login && enc.GetAuthType() != AuthTypes.None)                      {                          byte[] datatosend = new byte[outputdata.Length + 4];                          Buffer.BlockCopy(outputdata' 0' datatosend' 4' outputdata.Length);                          Buffer.BlockCopy(BitConverter.GetBytes(outputdata.Length)' 0' datatosend' 0' 4);                          outputdata = null;                          outputdata = datatosend;                      }                      Client.Send(outputdata' 0' outputdata.Length);                      if (offst >= buffer.Length)                      {                          //exit;                          return true;                      }                  }                  return true;              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,socks5.Socks5Client,Socks5Client,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Send,The following statement contains a magic number: try              {                  //buffer sending.                  int offst = 0;                  while(true)                  {                      byte[] outputdata = enc.ProcessOutputData(buffer' offst' (length - offst > 4092 ? 4092 : length - offst));                      offst += (length - offst > 4092 ? 4092 : length - offst);                      //craft headers & shit.                      //send outputdata's length firs.t                      if (enc.GetAuthType() != AuthTypes.Login && enc.GetAuthType() != AuthTypes.None)                      {                          byte[] datatosend = new byte[outputdata.Length + 4];                          Buffer.BlockCopy(outputdata' 0' datatosend' 4' outputdata.Length);                          Buffer.BlockCopy(BitConverter.GetBytes(outputdata.Length)' 0' datatosend' 0' 4);                          outputdata = null;                          outputdata = datatosend;                      }                      Client.Send(outputdata' 0' outputdata.Length);                      if (offst >= buffer.Length)                      {                          //exit;                          return true;                      }                  }                  return true;              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,socks5.Socks5Client,Socks5Client,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Send,The following statement contains a magic number: try              {                  //buffer sending.                  int offst = 0;                  while(true)                  {                      byte[] outputdata = enc.ProcessOutputData(buffer' offst' (length - offst > 4092 ? 4092 : length - offst));                      offst += (length - offst > 4092 ? 4092 : length - offst);                      //craft headers & shit.                      //send outputdata's length firs.t                      if (enc.GetAuthType() != AuthTypes.Login && enc.GetAuthType() != AuthTypes.None)                      {                          byte[] datatosend = new byte[outputdata.Length + 4];                          Buffer.BlockCopy(outputdata' 0' datatosend' 4' outputdata.Length);                          Buffer.BlockCopy(BitConverter.GetBytes(outputdata.Length)' 0' datatosend' 0' 4);                          outputdata = null;                          outputdata = datatosend;                      }                      Client.Send(outputdata' 0' outputdata.Length);                      if (offst >= buffer.Length)                      {                          //exit;                          return true;                      }                  }                  return true;              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,socks5.Socks5Client,Socks5Client,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Send,The following statement contains a magic number: try              {                  //buffer sending.                  int offst = 0;                  while(true)                  {                      byte[] outputdata = enc.ProcessOutputData(buffer' offst' (length - offst > 4092 ? 4092 : length - offst));                      offst += (length - offst > 4092 ? 4092 : length - offst);                      //craft headers & shit.                      //send outputdata's length firs.t                      if (enc.GetAuthType() != AuthTypes.Login && enc.GetAuthType() != AuthTypes.None)                      {                          byte[] datatosend = new byte[outputdata.Length + 4];                          Buffer.BlockCopy(outputdata' 0' datatosend' 4' outputdata.Length);                          Buffer.BlockCopy(BitConverter.GetBytes(outputdata.Length)' 0' datatosend' 0' 4);                          outputdata = null;                          outputdata = datatosend;                      }                      Client.Send(outputdata' 0' outputdata.Length);                      if (offst >= buffer.Length)                      {                          //exit;                          return true;                      }                  }                  return true;              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,socks5.Socks5Client,Socks5Client,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Send,The following statement contains a magic number: try              {                  //buffer sending.                  int offst = 0;                  while(true)                  {                      byte[] outputdata = enc.ProcessOutputData(buffer' offst' (length - offst > 4092 ? 4092 : length - offst));                      offst += (length - offst > 4092 ? 4092 : length - offst);                      //craft headers & shit.                      //send outputdata's length firs.t                      if (enc.GetAuthType() != AuthTypes.Login && enc.GetAuthType() != AuthTypes.None)                      {                          byte[] datatosend = new byte[outputdata.Length + 4];                          Buffer.BlockCopy(outputdata' 0' datatosend' 4' outputdata.Length);                          Buffer.BlockCopy(BitConverter.GetBytes(outputdata.Length)' 0' datatosend' 0' 4);                          outputdata = null;                          outputdata = datatosend;                      }                      Client.Send(outputdata' 0' outputdata.Length);                      if (offst >= buffer.Length)                      {                          //exit;                          return true;                      }                  }                  return true;              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,socks5.Socks5Client,Socks5Client,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Send,The following statement contains a magic number: try              {                  //buffer sending.                  int offst = 0;                  while(true)                  {                      byte[] outputdata = enc.ProcessOutputData(buffer' offst' (length - offst > 4092 ? 4092 : length - offst));                      offst += (length - offst > 4092 ? 4092 : length - offst);                      //craft headers & shit.                      //send outputdata's length firs.t                      if (enc.GetAuthType() != AuthTypes.Login && enc.GetAuthType() != AuthTypes.None)                      {                          byte[] datatosend = new byte[outputdata.Length + 4];                          Buffer.BlockCopy(outputdata' 0' datatosend' 4' outputdata.Length);                          Buffer.BlockCopy(BitConverter.GetBytes(outputdata.Length)' 0' datatosend' 0' 4);                          outputdata = null;                          outputdata = datatosend;                      }                      Client.Send(outputdata' 0' outputdata.Length);                      if (offst >= buffer.Length)                      {                          //exit;                          return true;                      }                  }                  return true;              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,socks5.Socks5Client,Socks5Client,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Send,The following statement contains a magic number: try              {                  //buffer sending.                  int offst = 0;                  while(true)                  {                      byte[] outputdata = enc.ProcessOutputData(buffer' offst' (length - offst > 4092 ? 4092 : length - offst));                      offst += (length - offst > 4092 ? 4092 : length - offst);                      //craft headers & shit.                      //send outputdata's length firs.t                      if (enc.GetAuthType() != AuthTypes.Login && enc.GetAuthType() != AuthTypes.None)                      {                          byte[] datatosend = new byte[outputdata.Length + 4];                          Buffer.BlockCopy(outputdata' 0' datatosend' 4' outputdata.Length);                          Buffer.BlockCopy(BitConverter.GetBytes(outputdata.Length)' 0' datatosend' 0' 4);                          outputdata = null;                          outputdata = datatosend;                      }                      Client.Send(outputdata' 0' outputdata.Length);                      if (offst >= buffer.Length)                      {                          //exit;                          return true;                      }                  }                  return true;              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,socks5.Socks5Client,Socks5Client,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Receive,The following statement contains a magic number: try              {                  if (enc.GetAuthType() != AuthTypes.Login && enc.GetAuthType() != AuthTypes.None)                  {                      if(HalfReceivedBufferLength > 0)                      {                          if (HalfReceivedBufferLength <= count)                          {                              Buffer.BlockCopy(HalfReceiveBuffer' 0' buffer' offset' HalfReceivedBufferLength);                              HalfReceivedBufferLength = 0;                              return HalfReceivedBufferLength;                          }                          else                          {                              Buffer.BlockCopy(HalfReceiveBuffer' 0' buffer' offset' count);                              HalfReceivedBufferLength = HalfReceivedBufferLength - count;                              Buffer.BlockCopy(HalfReceiveBuffer' count' HalfReceiveBuffer' 0' count);                                return count;                          }                      }                        count = Math.Min(4200' count);                        byte[] databuf = new byte[4200];                      int got = Client.Receive(databuf' 0' 4200);                        int packetsize = BitConverter.ToInt32(databuf' 0);                      byte[] processed = enc.ProcessInputData(databuf' 4' packetsize);                        Buffer.BlockCopy(databuf' 0' buffer' offset' count);                      Buffer.BlockCopy(databuf' count' HalfReceiveBuffer' 0' packetsize - count);                      HalfReceivedBufferLength = packetsize - count;                      return count;                  }                  else                  {                      return Client.Receive(buffer' offset' count);                  }              }              catch (Exception ex)              {                  //disconnect.                  Client.Disconnect();                  throw ex;              }
Magic Number,socks5.Socks5Client,Socks5Client,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Receive,The following statement contains a magic number: try              {                  if (enc.GetAuthType() != AuthTypes.Login && enc.GetAuthType() != AuthTypes.None)                  {                      if(HalfReceivedBufferLength > 0)                      {                          if (HalfReceivedBufferLength <= count)                          {                              Buffer.BlockCopy(HalfReceiveBuffer' 0' buffer' offset' HalfReceivedBufferLength);                              HalfReceivedBufferLength = 0;                              return HalfReceivedBufferLength;                          }                          else                          {                              Buffer.BlockCopy(HalfReceiveBuffer' 0' buffer' offset' count);                              HalfReceivedBufferLength = HalfReceivedBufferLength - count;                              Buffer.BlockCopy(HalfReceiveBuffer' count' HalfReceiveBuffer' 0' count);                                return count;                          }                      }                        count = Math.Min(4200' count);                        byte[] databuf = new byte[4200];                      int got = Client.Receive(databuf' 0' 4200);                        int packetsize = BitConverter.ToInt32(databuf' 0);                      byte[] processed = enc.ProcessInputData(databuf' 4' packetsize);                        Buffer.BlockCopy(databuf' 0' buffer' offset' count);                      Buffer.BlockCopy(databuf' count' HalfReceiveBuffer' 0' packetsize - count);                      HalfReceivedBufferLength = packetsize - count;                      return count;                  }                  else                  {                      return Client.Receive(buffer' offset' count);                  }              }              catch (Exception ex)              {                  //disconnect.                  Client.Disconnect();                  throw ex;              }
Magic Number,socks5.Socks5Client,Socks5Client,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Receive,The following statement contains a magic number: try              {                  if (enc.GetAuthType() != AuthTypes.Login && enc.GetAuthType() != AuthTypes.None)                  {                      if(HalfReceivedBufferLength > 0)                      {                          if (HalfReceivedBufferLength <= count)                          {                              Buffer.BlockCopy(HalfReceiveBuffer' 0' buffer' offset' HalfReceivedBufferLength);                              HalfReceivedBufferLength = 0;                              return HalfReceivedBufferLength;                          }                          else                          {                              Buffer.BlockCopy(HalfReceiveBuffer' 0' buffer' offset' count);                              HalfReceivedBufferLength = HalfReceivedBufferLength - count;                              Buffer.BlockCopy(HalfReceiveBuffer' count' HalfReceiveBuffer' 0' count);                                return count;                          }                      }                        count = Math.Min(4200' count);                        byte[] databuf = new byte[4200];                      int got = Client.Receive(databuf' 0' 4200);                        int packetsize = BitConverter.ToInt32(databuf' 0);                      byte[] processed = enc.ProcessInputData(databuf' 4' packetsize);                        Buffer.BlockCopy(databuf' 0' buffer' offset' count);                      Buffer.BlockCopy(databuf' count' HalfReceiveBuffer' 0' packetsize - count);                      HalfReceivedBufferLength = packetsize - count;                      return count;                  }                  else                  {                      return Client.Receive(buffer' offset' count);                  }              }              catch (Exception ex)              {                  //disconnect.                  Client.Disconnect();                  throw ex;              }
Magic Number,socks5.Socks5Client,Socks5Client,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Receive,The following statement contains a magic number: try              {                  if (enc.GetAuthType() != AuthTypes.Login && enc.GetAuthType() != AuthTypes.None)                  {                      if(HalfReceivedBufferLength > 0)                      {                          if (HalfReceivedBufferLength <= count)                          {                              Buffer.BlockCopy(HalfReceiveBuffer' 0' buffer' offset' HalfReceivedBufferLength);                              HalfReceivedBufferLength = 0;                              return HalfReceivedBufferLength;                          }                          else                          {                              Buffer.BlockCopy(HalfReceiveBuffer' 0' buffer' offset' count);                              HalfReceivedBufferLength = HalfReceivedBufferLength - count;                              Buffer.BlockCopy(HalfReceiveBuffer' count' HalfReceiveBuffer' 0' count);                                return count;                          }                      }                        count = Math.Min(4200' count);                        byte[] databuf = new byte[4200];                      int got = Client.Receive(databuf' 0' 4200);                        int packetsize = BitConverter.ToInt32(databuf' 0);                      byte[] processed = enc.ProcessInputData(databuf' 4' packetsize);                        Buffer.BlockCopy(databuf' 0' buffer' offset' count);                      Buffer.BlockCopy(databuf' count' HalfReceiveBuffer' 0' packetsize - count);                      HalfReceivedBufferLength = packetsize - count;                      return count;                  }                  else                  {                      return Client.Receive(buffer' offset' count);                  }              }              catch (Exception ex)              {                  //disconnect.                  Client.Disconnect();                  throw ex;              }
Magic Number,socks5.Socks5Client,Socks5Client,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,ReceiveAsync,The following statement contains a magic number: if (enc.GetAuthType() != AuthTypes.Login && enc.GetAuthType() != AuthTypes.None)              {                  Client.ReceiveAsync(4);              }              else              {                  Client.ReceiveAsync(4096);              }
Magic Number,socks5.Socks5Client,Socks5Client,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,ReceiveAsync,The following statement contains a magic number: if (enc.GetAuthType() != AuthTypes.Login && enc.GetAuthType() != AuthTypes.None)              {                  Client.ReceiveAsync(4);              }              else              {                  Client.ReceiveAsync(4096);              }
Magic Number,socks5.Socks5Client,Socks5Client,C:\repos\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Connect,The following statement contains a magic number: try              {                  p = new Socket(AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);                  Client = new Client(p' 65535);                  Client.Sock.Connect(new IPEndPoint(ipAddress' Port));                  //try the greeting.                  //Client.onDataReceived += Client_onDataReceived;                  if(Socks.DoSocksAuth(this' Username' Password))                      if (Socks.SendRequest(Client' enc' Dest' Destport) == SocksError.Granted) {                          Client.onDataReceived += Client_onDataReceived;                          return true;                      }                  return false;              }              catch              {                  return false;              }
Magic Number,socks5.Socks,SocksSpecialTunnel,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\SocksSpecialTunnel.cs,ConnectHandler,The following statement contains a magic number: try              {                  //all plugins get the event thrown.                  Client.Client.Sock.ReceiveBufferSize = 4200;                  Client.Client.Sock.SendBufferSize = 4200;                  foreach (DataHandler data in PluginLoader.LoadPlugin(typeof(DataHandler)))                      Plugins.Push(data);                  Client.Client.onDataReceived += Client_onDataReceived;                  RemoteClient.onDataReceived += RemoteClient_onDataReceived;                  RemoteClient.onClientDisconnected += RemoteClient_onClientDisconnected;                  Client.Client.onClientDisconnected += Client_onClientDisconnected;                  Client.Client.ReceiveAsync();                  RemoteClient.ReceiveAsync();              }              catch              {              }
Magic Number,socks5.Socks,SocksSpecialTunnel,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\SocksSpecialTunnel.cs,ConnectHandler,The following statement contains a magic number: try              {                  //all plugins get the event thrown.                  Client.Client.Sock.ReceiveBufferSize = 4200;                  Client.Client.Sock.SendBufferSize = 4200;                  foreach (DataHandler data in PluginLoader.LoadPlugin(typeof(DataHandler)))                      Plugins.Push(data);                  Client.Client.onDataReceived += Client_onDataReceived;                  RemoteClient.onDataReceived += RemoteClient_onDataReceived;                  RemoteClient.onClientDisconnected += RemoteClient_onClientDisconnected;                  Client.Client.onClientDisconnected += Client_onClientDisconnected;                  Client.Client.ReceiveAsync();                  RemoteClient.ReceiveAsync();              }              catch              {              }
Magic Number,socks5.Socks,SocksSpecialTunnel,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\SocksSpecialTunnel.cs,RemoteClient_onDataReceived,The following statement contains a magic number: try              {                  foreach (DataHandler f in Plugins)  	                f.OnServerDataReceived(this' e);                  //craft headers & shit.                  byte[] outputdata = se.ProcessOutputData(e.Buffer' e.Offset' e.Count);                  byte[] datatosend = new byte[outputdata.Length + 4];                  Buffer.BlockCopy(outputdata' 0' datatosend' 4' outputdata.Length);                  Buffer.BlockCopy(BitConverter.GetBytes(outputdata.Length)' 0' datatosend' 0' 4);                  //send outputdata's length first.                  Client.Client.Send(datatosend);                  if(!RemoteClient.Receiving)                      RemoteClient.ReceiveAsync();                  if (!Client.Client.Receiving)                      Client.Client.ReceiveAsync();              }              catch              {                  //Client.Client.Disconnect();                  RemoteClient.Disconnect();              }
Magic Number,socks5.Socks,SocksSpecialTunnel,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\SocksSpecialTunnel.cs,RemoteClient_onDataReceived,The following statement contains a magic number: try              {                  foreach (DataHandler f in Plugins)  	                f.OnServerDataReceived(this' e);                  //craft headers & shit.                  byte[] outputdata = se.ProcessOutputData(e.Buffer' e.Offset' e.Count);                  byte[] datatosend = new byte[outputdata.Length + 4];                  Buffer.BlockCopy(outputdata' 0' datatosend' 4' outputdata.Length);                  Buffer.BlockCopy(BitConverter.GetBytes(outputdata.Length)' 0' datatosend' 0' 4);                  //send outputdata's length first.                  Client.Client.Send(datatosend);                  if(!RemoteClient.Receiving)                      RemoteClient.ReceiveAsync();                  if (!Client.Client.Receiving)                      Client.Client.ReceiveAsync();              }              catch              {                  //Client.Client.Disconnect();                  RemoteClient.Disconnect();              }
Magic Number,socks5.Socks,SocksSpecialTunnel,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\SocksSpecialTunnel.cs,RemoteClient_onDataReceived,The following statement contains a magic number: try              {                  foreach (DataHandler f in Plugins)  	                f.OnServerDataReceived(this' e);                  //craft headers & shit.                  byte[] outputdata = se.ProcessOutputData(e.Buffer' e.Offset' e.Count);                  byte[] datatosend = new byte[outputdata.Length + 4];                  Buffer.BlockCopy(outputdata' 0' datatosend' 4' outputdata.Length);                  Buffer.BlockCopy(BitConverter.GetBytes(outputdata.Length)' 0' datatosend' 0' 4);                  //send outputdata's length first.                  Client.Client.Send(datatosend);                  if(!RemoteClient.Receiving)                      RemoteClient.ReceiveAsync();                  if (!Client.Client.Receiving)                      Client.Client.ReceiveAsync();              }              catch              {                  //Client.Client.Disconnect();                  RemoteClient.Disconnect();              }
Magic Number,socks5.Socks,SocksSpecialTunnel,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\SocksSpecialTunnel.cs,Client_onDataReceived,The following statement contains a magic number: try              {                  int packetsize = BitConverter.ToInt32(e.Buffer' 0);                  byte[] newbuff = new byte[packetsize];                  //yey                  //process packet.                  byte[] output = se.ProcessInputData(e.Buffer' 4' packetsize);                  e.Buffer = null;                  e.Buffer = output;                  e.Offset = 0;                  e.Count = output.Length;                  //receive full packet.                  foreach (DataHandler f in Plugins)                      f.OnClientDataReceived(this' e);                  RemoteClient.SendAsync(e.Buffer' e.Offset' e.Count);                  if (!Client.Client.Receiving)                      Client.Client.ReceiveAsync();                  if (!RemoteClient.Receiving)                      RemoteClient.ReceiveAsync();              }              catch              {                  //disconnect.                  Client.Client.Disconnect();                  RemoteClient.Disconnect();              }
Magic Number,socks5.Socks,Socks5,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestAuth,The following statement contains a magic number: for (int i = 2; i < methods + 2; i++)  			{  				switch ((AuthTypes)buff[i])  				{  				case AuthTypes.Login:  					types.Add(AuthTypes.Login);  					break;  				case AuthTypes.None:  					types.Add(AuthTypes.None);  					break;  				case AuthTypes.SocksBoth:  					types.Add(AuthTypes.SocksBoth);  					break;  				case AuthTypes.SocksEncrypt:  					types.Add(AuthTypes.SocksEncrypt);  					break;  				case AuthTypes.SocksCompress:  					types.Add(AuthTypes.SocksCompress);  					break;  				}  			}
Magic Number,socks5.Socks,Socks5,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestAuth,The following statement contains a magic number: for (int i = 2; i < methods + 2; i++)  			{  				switch ((AuthTypes)buff[i])  				{  				case AuthTypes.Login:  					types.Add(AuthTypes.Login);  					break;  				case AuthTypes.None:  					types.Add(AuthTypes.None);  					break;  				case AuthTypes.SocksBoth:  					types.Add(AuthTypes.SocksBoth);  					break;  				case AuthTypes.SocksEncrypt:  					types.Add(AuthTypes.SocksEncrypt);  					break;  				case AuthTypes.SocksCompress:  					types.Add(AuthTypes.SocksCompress);  					break;  				}  			}
Magic Number,socks5.Socks,Socks5,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestSpecialMode,The following statement contains a magic number: if (auth.Contains(AuthTypes.SocksBoth))  			{  				//tell client that we chose socksboth.  				client.Send(new byte[] { (byte)HeaderTypes.Socks5' (byte)AuthTypes.SocksBoth });  				//wait for public key.  				SocksEncryption ph = new SocksEncryption();  				ph.GenerateKeys();  				//wait for public key.  				byte[] buffer = new byte[4096];  				int keysize = client.Receive(buffer' 0' buffer.Length);  				//store key in our encryption class.  				ph.SetKey(buffer' 0' keysize);  				//send key.  				client.Send(ph.GetPublicKey());  				//now we give them our key.  				client.Send(ph.ShareEncryptionKey());  				//send more.  				int enckeysize = client.Receive(buffer' 0' buffer.Length);  				//decrypt with our public key.  				byte[] newkey = new byte[enckeysize];  				Buffer.BlockCopy(buffer' 0' newkey' 0' enckeysize);  				ph.SetEncKey(ph.key.Decrypt(newkey' false));    				ph.SetType(AuthTypes.SocksBoth);  				//ready up our client.  				return ph;  			}  			else if (auth.Contains(AuthTypes.SocksEncrypt))  			{  				//tell client that we chose socksboth.  				client.Send(new byte[] { (byte)HeaderTypes.Socks5' (byte)AuthTypes.SocksEncrypt });  				//wait for public key.  				SocksEncryption ph = new SocksEncryption();  				ph.GenerateKeys();  				//wait for public key.  				byte[] buffer = new byte[4096];  				int keysize = client.Receive(buffer' 0' buffer.Length);  				//store key in our encryption class.  				ph.SetKey(buffer' 0' keysize);  				//send key.  				client.Send(ph.GetPublicKey());  				//now we give them our key.  				client.Send(ph.ShareEncryptionKey());  				//send more.  				int enckeysize = client.Receive(buffer' 0' buffer.Length);  				//decrypt with our public key.  				byte[] newkey = new byte[enckeysize];  				Buffer.BlockCopy(buffer' 0' newkey' 0' enckeysize);  				ph.SetEncKey(ph.key.Decrypt(newkey' false));  				ph.SetType(AuthTypes.SocksEncrypt);  				//ready up our client.  				return ph;  			}  			else if (auth.Contains(AuthTypes.SocksCompress))  			{  				//start compression.  				client.Send(new byte[] { (byte)HeaderTypes.Socks5' (byte)AuthTypes.SocksCompress });  				SocksEncryption ph = new SocksEncryption();  				ph.SetType(AuthTypes.SocksCompress);  				//ready  			}  			else if (auth.Contains(AuthTypes.Login))  			{  				SocksEncryption ph = new SocksEncryption();  				ph.SetType(AuthTypes.Login);  				return ph;  			}
Magic Number,socks5.Socks,Socks5,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestSpecialMode,The following statement contains a magic number: if (auth.Contains(AuthTypes.SocksBoth))  			{  				//tell client that we chose socksboth.  				client.Send(new byte[] { (byte)HeaderTypes.Socks5' (byte)AuthTypes.SocksBoth });  				//wait for public key.  				SocksEncryption ph = new SocksEncryption();  				ph.GenerateKeys();  				//wait for public key.  				byte[] buffer = new byte[4096];  				int keysize = client.Receive(buffer' 0' buffer.Length);  				//store key in our encryption class.  				ph.SetKey(buffer' 0' keysize);  				//send key.  				client.Send(ph.GetPublicKey());  				//now we give them our key.  				client.Send(ph.ShareEncryptionKey());  				//send more.  				int enckeysize = client.Receive(buffer' 0' buffer.Length);  				//decrypt with our public key.  				byte[] newkey = new byte[enckeysize];  				Buffer.BlockCopy(buffer' 0' newkey' 0' enckeysize);  				ph.SetEncKey(ph.key.Decrypt(newkey' false));    				ph.SetType(AuthTypes.SocksBoth);  				//ready up our client.  				return ph;  			}  			else if (auth.Contains(AuthTypes.SocksEncrypt))  			{  				//tell client that we chose socksboth.  				client.Send(new byte[] { (byte)HeaderTypes.Socks5' (byte)AuthTypes.SocksEncrypt });  				//wait for public key.  				SocksEncryption ph = new SocksEncryption();  				ph.GenerateKeys();  				//wait for public key.  				byte[] buffer = new byte[4096];  				int keysize = client.Receive(buffer' 0' buffer.Length);  				//store key in our encryption class.  				ph.SetKey(buffer' 0' keysize);  				//send key.  				client.Send(ph.GetPublicKey());  				//now we give them our key.  				client.Send(ph.ShareEncryptionKey());  				//send more.  				int enckeysize = client.Receive(buffer' 0' buffer.Length);  				//decrypt with our public key.  				byte[] newkey = new byte[enckeysize];  				Buffer.BlockCopy(buffer' 0' newkey' 0' enckeysize);  				ph.SetEncKey(ph.key.Decrypt(newkey' false));  				ph.SetType(AuthTypes.SocksEncrypt);  				//ready up our client.  				return ph;  			}  			else if (auth.Contains(AuthTypes.SocksCompress))  			{  				//start compression.  				client.Send(new byte[] { (byte)HeaderTypes.Socks5' (byte)AuthTypes.SocksCompress });  				SocksEncryption ph = new SocksEncryption();  				ph.SetType(AuthTypes.SocksCompress);  				//ready  			}  			else if (auth.Contains(AuthTypes.Login))  			{  				SocksEncryption ph = new SocksEncryption();  				ph.SetType(AuthTypes.Login);  				return ph;  			}
Magic Number,socks5.Socks,Socks5,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestLogin,The following statement contains a magic number: int numpassword = Convert.ToInt32(buff[(numusername + 2)]);
Magic Number,socks5.Socks,Socks5,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestLogin,The following statement contains a magic number: string username = Encoding.ASCII.GetString(buff' 2' numusername);
Magic Number,socks5.Socks,Socks5,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestLogin,The following statement contains a magic number: string password = Encoding.ASCII.GetString(buff' numusername + 3' numpassword);
Magic Number,socks5.Socks,Socks5,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following statement contains a magic number: switch ((StreamTypes)buff[1])  			{  			case StreamTypes.Stream:  				{  					int fwd = 4;  					string address = "";  					switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}  					byte[] po = new byte[2];  					Array.Copy(buff' fwd' po' 0' 2);  					UInt16 port = BitConverter.ToUInt16(new byte[] { po[1]' po[0] }' 0);  					return new SocksRequest(StreamTypes.Stream' (AddressType)buff[3]' address' port);  				}  			default:  				//not supported.  				return null;    			}
Magic Number,socks5.Socks,Socks5,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following statement contains a magic number: switch ((StreamTypes)buff[1])  			{  			case StreamTypes.Stream:  				{  					int fwd = 4;  					string address = "";  					switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}  					byte[] po = new byte[2];  					Array.Copy(buff' fwd' po' 0' 2);  					UInt16 port = BitConverter.ToUInt16(new byte[] { po[1]' po[0] }' 0);  					return new SocksRequest(StreamTypes.Stream' (AddressType)buff[3]' address' port);  				}  			default:  				//not supported.  				return null;    			}
Magic Number,socks5.Socks,Socks5,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following statement contains a magic number: switch ((StreamTypes)buff[1])  			{  			case StreamTypes.Stream:  				{  					int fwd = 4;  					string address = "";  					switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}  					byte[] po = new byte[2];  					Array.Copy(buff' fwd' po' 0' 2);  					UInt16 port = BitConverter.ToUInt16(new byte[] { po[1]' po[0] }' 0);  					return new SocksRequest(StreamTypes.Stream' (AddressType)buff[3]' address' port);  				}  			default:  				//not supported.  				return null;    			}
Magic Number,socks5.Socks,Socks5,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following statement contains a magic number: switch ((StreamTypes)buff[1])  			{  			case StreamTypes.Stream:  				{  					int fwd = 4;  					string address = "";  					switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}  					byte[] po = new byte[2];  					Array.Copy(buff' fwd' po' 0' 2);  					UInt16 port = BitConverter.ToUInt16(new byte[] { po[1]' po[0] }' 0);  					return new SocksRequest(StreamTypes.Stream' (AddressType)buff[3]' address' port);  				}  			default:  				//not supported.  				return null;    			}
Magic Number,socks5.Socks,Socks5,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following statement contains a magic number: switch ((StreamTypes)buff[1])  			{  			case StreamTypes.Stream:  				{  					int fwd = 4;  					string address = "";  					switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}  					byte[] po = new byte[2];  					Array.Copy(buff' fwd' po' 0' 2);  					UInt16 port = BitConverter.ToUInt16(new byte[] { po[1]' po[0] }' 0);  					return new SocksRequest(StreamTypes.Stream' (AddressType)buff[3]' address' port);  				}  			default:  				//not supported.  				return null;    			}
Magic Number,socks5.Socks,Socks5,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following statement contains a magic number: switch ((StreamTypes)buff[1])  			{  			case StreamTypes.Stream:  				{  					int fwd = 4;  					string address = "";  					switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}  					byte[] po = new byte[2];  					Array.Copy(buff' fwd' po' 0' 2);  					UInt16 port = BitConverter.ToUInt16(new byte[] { po[1]' po[0] }' 0);  					return new SocksRequest(StreamTypes.Stream' (AddressType)buff[3]' address' port);  				}  			default:  				//not supported.  				return null;    			}
Magic Number,socks5.Socks,Socks5,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following statement contains a magic number: switch ((StreamTypes)buff[1])  			{  			case StreamTypes.Stream:  				{  					int fwd = 4;  					string address = "";  					switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}  					byte[] po = new byte[2];  					Array.Copy(buff' fwd' po' 0' 2);  					UInt16 port = BitConverter.ToUInt16(new byte[] { po[1]' po[0] }' 0);  					return new SocksRequest(StreamTypes.Stream' (AddressType)buff[3]' address' port);  				}  			default:  				//not supported.  				return null;    			}
Magic Number,socks5.Socks,Socks5,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following statement contains a magic number: switch ((StreamTypes)buff[1])  			{  			case StreamTypes.Stream:  				{  					int fwd = 4;  					string address = "";  					switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}  					byte[] po = new byte[2];  					Array.Copy(buff' fwd' po' 0' 2);  					UInt16 port = BitConverter.ToUInt16(new byte[] { po[1]' po[0] }' 0);  					return new SocksRequest(StreamTypes.Stream' (AddressType)buff[3]' address' port);  				}  			default:  				//not supported.  				return null;    			}
Magic Number,socks5.Socks,Socks5,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following statement contains a magic number: switch ((StreamTypes)buff[1])  			{  			case StreamTypes.Stream:  				{  					int fwd = 4;  					string address = "";  					switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}  					byte[] po = new byte[2];  					Array.Copy(buff' fwd' po' 0' 2);  					UInt16 port = BitConverter.ToUInt16(new byte[] { po[1]' po[0] }' 0);  					return new SocksRequest(StreamTypes.Stream' (AddressType)buff[3]' address' port);  				}  			default:  				//not supported.  				return null;    			}
Magic Number,socks5.Socks,Socks5,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following statement contains a magic number: switch ((StreamTypes)buff[1])  			{  			case StreamTypes.Stream:  				{  					int fwd = 4;  					string address = "";  					switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}  					byte[] po = new byte[2];  					Array.Copy(buff' fwd' po' 0' 2);  					UInt16 port = BitConverter.ToUInt16(new byte[] { po[1]' po[0] }' 0);  					return new SocksRequest(StreamTypes.Stream' (AddressType)buff[3]' address' port);  				}  			default:  				//not supported.  				return null;    			}
Magic Number,socks5.Socks,Socks5,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following statement contains a magic number: switch ((StreamTypes)buff[1])  			{  			case StreamTypes.Stream:  				{  					int fwd = 4;  					string address = "";  					switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}  					byte[] po = new byte[2];  					Array.Copy(buff' fwd' po' 0' 2);  					UInt16 port = BitConverter.ToUInt16(new byte[] { po[1]' po[0] }' 0);  					return new SocksRequest(StreamTypes.Stream' (AddressType)buff[3]' address' port);  				}  			default:  				//not supported.  				return null;    			}
Magic Number,socks5.Socks,Socks5,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,Receive,The following statement contains a magic number: buffer = new byte[65535];
Magic Number,socks5.Socks,SocksRequest,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,GetData,The following statement contains a magic number: if (Type == AddressType.IP)  			{  				data = new byte[10];  				string[] content = IP.ToString().Split('.');  				for (int i = 4; i < content.Length + 4; i++)  					data[i] = Convert.ToByte(Convert.ToInt32(content[i - 4]));  				Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' 8' 2);  			}  			else if (Type == AddressType.Domain)  			{  				data = new byte[Address.Length + 7];  				data[4] = Convert.ToByte(Address.Length);  				Buffer.BlockCopy(Encoding.ASCII.GetBytes(Address)' 0' data' 5' Address.Length);  				Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' data.Length - 2' 2);  			}  			else return null;
Magic Number,socks5.Socks,SocksRequest,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,GetData,The following statement contains a magic number: if (Type == AddressType.IP)  			{  				data = new byte[10];  				string[] content = IP.ToString().Split('.');  				for (int i = 4; i < content.Length + 4; i++)  					data[i] = Convert.ToByte(Convert.ToInt32(content[i - 4]));  				Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' 8' 2);  			}  			else if (Type == AddressType.Domain)  			{  				data = new byte[Address.Length + 7];  				data[4] = Convert.ToByte(Address.Length);  				Buffer.BlockCopy(Encoding.ASCII.GetBytes(Address)' 0' data' 5' Address.Length);  				Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' data.Length - 2' 2);  			}  			else return null;
Magic Number,socks5.Socks,SocksRequest,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,GetData,The following statement contains a magic number: if (Type == AddressType.IP)  			{  				data = new byte[10];  				string[] content = IP.ToString().Split('.');  				for (int i = 4; i < content.Length + 4; i++)  					data[i] = Convert.ToByte(Convert.ToInt32(content[i - 4]));  				Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' 8' 2);  			}  			else if (Type == AddressType.Domain)  			{  				data = new byte[Address.Length + 7];  				data[4] = Convert.ToByte(Address.Length);  				Buffer.BlockCopy(Encoding.ASCII.GetBytes(Address)' 0' data' 5' Address.Length);  				Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' data.Length - 2' 2);  			}  			else return null;
Magic Number,socks5.Socks,SocksRequest,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,GetData,The following statement contains a magic number: if (Type == AddressType.IP)  			{  				data = new byte[10];  				string[] content = IP.ToString().Split('.');  				for (int i = 4; i < content.Length + 4; i++)  					data[i] = Convert.ToByte(Convert.ToInt32(content[i - 4]));  				Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' 8' 2);  			}  			else if (Type == AddressType.Domain)  			{  				data = new byte[Address.Length + 7];  				data[4] = Convert.ToByte(Address.Length);  				Buffer.BlockCopy(Encoding.ASCII.GetBytes(Address)' 0' data' 5' Address.Length);  				Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' data.Length - 2' 2);  			}  			else return null;
Magic Number,socks5.Socks,SocksRequest,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,GetData,The following statement contains a magic number: if (Type == AddressType.IP)  			{  				data = new byte[10];  				string[] content = IP.ToString().Split('.');  				for (int i = 4; i < content.Length + 4; i++)  					data[i] = Convert.ToByte(Convert.ToInt32(content[i - 4]));  				Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' 8' 2);  			}  			else if (Type == AddressType.Domain)  			{  				data = new byte[Address.Length + 7];  				data[4] = Convert.ToByte(Address.Length);  				Buffer.BlockCopy(Encoding.ASCII.GetBytes(Address)' 0' data' 5' Address.Length);  				Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' data.Length - 2' 2);  			}  			else return null;
Magic Number,socks5.Socks,SocksRequest,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,GetData,The following statement contains a magic number: if (Type == AddressType.IP)  			{  				data = new byte[10];  				string[] content = IP.ToString().Split('.');  				for (int i = 4; i < content.Length + 4; i++)  					data[i] = Convert.ToByte(Convert.ToInt32(content[i - 4]));  				Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' 8' 2);  			}  			else if (Type == AddressType.Domain)  			{  				data = new byte[Address.Length + 7];  				data[4] = Convert.ToByte(Address.Length);  				Buffer.BlockCopy(Encoding.ASCII.GetBytes(Address)' 0' data' 5' Address.Length);  				Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' data.Length - 2' 2);  			}  			else return null;
Magic Number,socks5.Socks,SocksRequest,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,GetData,The following statement contains a magic number: if (Type == AddressType.IP)  			{  				data = new byte[10];  				string[] content = IP.ToString().Split('.');  				for (int i = 4; i < content.Length + 4; i++)  					data[i] = Convert.ToByte(Convert.ToInt32(content[i - 4]));  				Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' 8' 2);  			}  			else if (Type == AddressType.Domain)  			{  				data = new byte[Address.Length + 7];  				data[4] = Convert.ToByte(Address.Length);  				Buffer.BlockCopy(Encoding.ASCII.GetBytes(Address)' 0' data' 5' Address.Length);  				Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' data.Length - 2' 2);  			}  			else return null;
Magic Number,socks5.Socks,SocksRequest,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,GetData,The following statement contains a magic number: if (Type == AddressType.IP)  			{  				data = new byte[10];  				string[] content = IP.ToString().Split('.');  				for (int i = 4; i < content.Length + 4; i++)  					data[i] = Convert.ToByte(Convert.ToInt32(content[i - 4]));  				Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' 8' 2);  			}  			else if (Type == AddressType.Domain)  			{  				data = new byte[Address.Length + 7];  				data[4] = Convert.ToByte(Address.Length);  				Buffer.BlockCopy(Encoding.ASCII.GetBytes(Address)' 0' data' 5' Address.Length);  				Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' data.Length - 2' 2);  			}  			else return null;
Magic Number,socks5.Socks,SocksRequest,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,GetData,The following statement contains a magic number: if (Type == AddressType.IP)  			{  				data = new byte[10];  				string[] content = IP.ToString().Split('.');  				for (int i = 4; i < content.Length + 4; i++)  					data[i] = Convert.ToByte(Convert.ToInt32(content[i - 4]));  				Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' 8' 2);  			}  			else if (Type == AddressType.Domain)  			{  				data = new byte[Address.Length + 7];  				data[4] = Convert.ToByte(Address.Length);  				Buffer.BlockCopy(Encoding.ASCII.GetBytes(Address)' 0' data' 5' Address.Length);  				Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' data.Length - 2' 2);  			}  			else return null;
Magic Number,socks5.Socks,SocksRequest,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,GetData,The following statement contains a magic number: if (Type == AddressType.IP)  			{  				data = new byte[10];  				string[] content = IP.ToString().Split('.');  				for (int i = 4; i < content.Length + 4; i++)  					data[i] = Convert.ToByte(Convert.ToInt32(content[i - 4]));  				Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' 8' 2);  			}  			else if (Type == AddressType.Domain)  			{  				data = new byte[Address.Length + 7];  				data[4] = Convert.ToByte(Address.Length);  				Buffer.BlockCopy(Encoding.ASCII.GetBytes(Address)' 0' data' 5' Address.Length);  				Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' data.Length - 2' 2);  			}  			else return null;
Magic Number,socks5.Socks,SocksRequest,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,GetData,The following statement contains a magic number: if (Type == AddressType.IP)  			{  				data = new byte[10];  				string[] content = IP.ToString().Split('.');  				for (int i = 4; i < content.Length + 4; i++)  					data[i] = Convert.ToByte(Convert.ToInt32(content[i - 4]));  				Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' 8' 2);  			}  			else if (Type == AddressType.Domain)  			{  				data = new byte[Address.Length + 7];  				data[4] = Convert.ToByte(Address.Length);  				Buffer.BlockCopy(Encoding.ASCII.GetBytes(Address)' 0' data' 5' Address.Length);  				Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' data.Length - 2' 2);  			}  			else return null;
Magic Number,socks5.Socks,SocksRequest,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,GetData,The following statement contains a magic number: data[2] = 0x00;
Magic Number,socks5.Socks,SocksRequest,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,GetData,The following statement contains a magic number: data[3] = (byte)Type;
Magic Number,socks5.Socks,SocksClient,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\SocksClient.cs,Begin,The following statement contains a magic number: if (lhandlers.Count > 0 && (authtypes.Contains(AuthTypes.SocksBoth) || authtypes.Contains(AuthTypes.SocksEncrypt) || authtypes.Contains(AuthTypes.SocksCompress) || authtypes.Contains(AuthTypes.Login)))              {                  //this is the preferred method.                  w = Socks5.RequestSpecialMode(authtypes' Client);                  foreach (LoginHandler lh in lhandlers)                  {  					//request login.  					User user = Socks5.RequestLogin(this);  					if (user == null)  					{  						Client.Disconnect();  						return;  					}  					LoginStatus status = lh.HandleLogin(user);  					Client.Send(new byte[] { (byte)HeaderTypes.Socks5' (byte)status });  					if (status == LoginStatus.Denied)  					{  						Client.Disconnect();  						return;  					}  					else if (status == LoginStatus.Correct)  					{  						Authenticated = (w.GetAuthType() == AuthTypes.Login ? 1 : 2);  						break;  					}                  }              }              else if (authtypes.Contains(AuthTypes.None))              {                  //no authentication.                  if (lhandlers.Count <= 0)                  {                      //unsupported methods y0                      Authenticated = 1;                      Client.Send(new byte[] { (byte)HeaderTypes.Socks5' (byte)HeaderTypes.Zero });                  }                  else                  {                      //unsupported.                      Client.Send(new byte[] { (byte)HeaderTypes.Socks5' (byte)AuthTypes.Unsupported });                      Client.Disconnect();                      return;                  }              }              else              {                  //unsupported.                  Client.Send(new byte[] { (byte)HeaderTypes.Socks5' (byte)AuthTypes.Unsupported });                  Client.Disconnect();                  return;              }
Magic Number,socks5.Socks,SocksClient,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\SocksClient.cs,Begin,The following statement contains a magic number: if (Authenticated == 1)              {                  w = new SocksEncryption();                  w.SetType(AuthTypes.Login);                  SocksRequest req = Socks5.RequestTunnel(this' w);                  if (req == null) { Client.Disconnect(); return; }                  req1 = new SocksRequest(req.StreamType' req.Type' req.Address' req.Port);                  //call on plugins for connect callbacks.                  foreach (ConnectHandler conn in PluginLoader.LoadPlugin(typeof(ConnectHandler)))  					if (conn.OnConnect(req1) == false)  					{  						req.Error = SocksError.Failure;  						Client.Send(req.GetData(true));  						Client.Disconnect();  						return;  					}                    //Send Tunnel Data back.                  SocksTunnel x = new SocksTunnel(this' req' req1' PacketSize' Timeout);                  x.Open(outboundInterface);              }              else if (Authenticated == 2)              {                  SocksRequest req = Socks5.RequestTunnel(this' w);                  if (req == null) { Client.Disconnect(); return; }                  req1 = new SocksRequest(req.StreamType' req.Type' req.Address' req.Port);                  foreach (ConnectHandler conn in PluginLoader.LoadPlugin(typeof(ConnectHandler)))  					if (conn.OnConnect(req1) == false)  					{  						req.Error = SocksError.Failure;  						Client.Send(req.GetData(true));  						Client.Disconnect();  						return;  					}                    //Send Tunnel Data back.                  SocksSpecialTunnel x = new SocksSpecialTunnel(this' w' req' req1' PacketSize' Timeout);                  x.Open(outboundInterface);              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: while (bytes > 1024)              {                  kbytes++;                  bytes -= 1024;              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: while (bytes > 1024)              {                  kbytes++;                  bytes -= 1024;              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: while (kbytes > 1024)              {                  mbytes++;                  kbytes -= 1024;              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: while (kbytes > 1024)              {                  mbytes++;                  kbytes -= 1024;              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: while (mbytes > 1024)              {                  gbytes++;                  mbytes -= 1024;              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: while (mbytes > 1024)              {                  gbytes++;                  mbytes -= 1024;              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: while (gbytes > 1024)              {                  tbytes++;                  gbytes -= 1024;              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: while (gbytes > 1024)              {                  tbytes++;                  gbytes -= 1024;              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: while (tbytes > 1024)              {                  pbytes++;                  tbytes -= 1024;              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: while (tbytes > 1024)              {                  pbytes++;                  tbytes -= 1024;              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)              {                  double ret = (double)pbytes + ((double)((double)tbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbytes > 0)              {                  double ret = (double)tbytes + ((double)((double)gbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " TB";              }              else if (gbytes > 0)              {                  double ret = (double)gbytes + ((double)((double)mbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " GB";              }              else if (mbytes > 0)              {                  double ret = (double)mbytes + ((double)((double)kbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " MB";              }              else if (kbytes > 0)              {                  double ret = (double)kbytes + ((double)((double)bytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " KB";              }              else              {                  string s = bytes.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)              {                  double ret = (double)pbytes + ((double)((double)tbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbytes > 0)              {                  double ret = (double)tbytes + ((double)((double)gbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " TB";              }              else if (gbytes > 0)              {                  double ret = (double)gbytes + ((double)((double)mbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " GB";              }              else if (mbytes > 0)              {                  double ret = (double)mbytes + ((double)((double)kbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " MB";              }              else if (kbytes > 0)              {                  double ret = (double)kbytes + ((double)((double)bytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " KB";              }              else              {                  string s = bytes.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)              {                  double ret = (double)pbytes + ((double)((double)tbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbytes > 0)              {                  double ret = (double)tbytes + ((double)((double)gbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " TB";              }              else if (gbytes > 0)              {                  double ret = (double)gbytes + ((double)((double)mbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " GB";              }              else if (mbytes > 0)              {                  double ret = (double)mbytes + ((double)((double)kbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " MB";              }              else if (kbytes > 0)              {                  double ret = (double)kbytes + ((double)((double)bytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " KB";              }              else              {                  string s = bytes.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)              {                  double ret = (double)pbytes + ((double)((double)tbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbytes > 0)              {                  double ret = (double)tbytes + ((double)((double)gbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " TB";              }              else if (gbytes > 0)              {                  double ret = (double)gbytes + ((double)((double)mbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " GB";              }              else if (mbytes > 0)              {                  double ret = (double)mbytes + ((double)((double)kbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " MB";              }              else if (kbytes > 0)              {                  double ret = (double)kbytes + ((double)((double)bytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " KB";              }              else              {                  string s = bytes.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)              {                  double ret = (double)pbytes + ((double)((double)tbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbytes > 0)              {                  double ret = (double)tbytes + ((double)((double)gbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " TB";              }              else if (gbytes > 0)              {                  double ret = (double)gbytes + ((double)((double)mbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " GB";              }              else if (mbytes > 0)              {                  double ret = (double)mbytes + ((double)((double)kbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " MB";              }              else if (kbytes > 0)              {                  double ret = (double)kbytes + ((double)((double)bytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " KB";              }              else              {                  string s = bytes.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)              {                  double ret = (double)pbytes + ((double)((double)tbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbytes > 0)              {                  double ret = (double)tbytes + ((double)((double)gbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " TB";              }              else if (gbytes > 0)              {                  double ret = (double)gbytes + ((double)((double)mbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " GB";              }              else if (mbytes > 0)              {                  double ret = (double)mbytes + ((double)((double)kbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " MB";              }              else if (kbytes > 0)              {                  double ret = (double)kbytes + ((double)((double)bytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " KB";              }              else              {                  string s = bytes.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)              {                  double ret = (double)pbytes + ((double)((double)tbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbytes > 0)              {                  double ret = (double)tbytes + ((double)((double)gbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " TB";              }              else if (gbytes > 0)              {                  double ret = (double)gbytes + ((double)((double)mbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " GB";              }              else if (mbytes > 0)              {                  double ret = (double)mbytes + ((double)((double)kbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " MB";              }              else if (kbytes > 0)              {                  double ret = (double)kbytes + ((double)((double)bytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " KB";              }              else              {                  string s = bytes.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)              {                  double ret = (double)pbytes + ((double)((double)tbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbytes > 0)              {                  double ret = (double)tbytes + ((double)((double)gbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " TB";              }              else if (gbytes > 0)              {                  double ret = (double)gbytes + ((double)((double)mbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " GB";              }              else if (mbytes > 0)              {                  double ret = (double)mbytes + ((double)((double)kbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " MB";              }              else if (kbytes > 0)              {                  double ret = (double)kbytes + ((double)((double)bytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " KB";              }              else              {                  string s = bytes.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)              {                  double ret = (double)pbytes + ((double)((double)tbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbytes > 0)              {                  double ret = (double)tbytes + ((double)((double)gbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " TB";              }              else if (gbytes > 0)              {                  double ret = (double)gbytes + ((double)((double)mbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " GB";              }              else if (mbytes > 0)              {                  double ret = (double)mbytes + ((double)((double)kbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " MB";              }              else if (kbytes > 0)              {                  double ret = (double)kbytes + ((double)((double)bytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " KB";              }              else              {                  string s = bytes.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)              {                  double ret = (double)pbytes + ((double)((double)tbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbytes > 0)              {                  double ret = (double)tbytes + ((double)((double)gbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " TB";              }              else if (gbytes > 0)              {                  double ret = (double)gbytes + ((double)((double)mbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " GB";              }              else if (mbytes > 0)              {                  double ret = (double)mbytes + ((double)((double)kbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " MB";              }              else if (kbytes > 0)              {                  double ret = (double)kbytes + ((double)((double)bytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " KB";              }              else              {                  string s = bytes.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)              {                  double ret = (double)pbytes + ((double)((double)tbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbytes > 0)              {                  double ret = (double)tbytes + ((double)((double)gbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " TB";              }              else if (gbytes > 0)              {                  double ret = (double)gbytes + ((double)((double)mbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " GB";              }              else if (mbytes > 0)              {                  double ret = (double)mbytes + ((double)((double)kbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " MB";              }              else if (kbytes > 0)              {                  double ret = (double)kbytes + ((double)((double)bytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " KB";              }              else              {                  string s = bytes.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)              {                  double ret = (double)pbytes + ((double)((double)tbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbytes > 0)              {                  double ret = (double)tbytes + ((double)((double)gbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " TB";              }              else if (gbytes > 0)              {                  double ret = (double)gbytes + ((double)((double)mbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " GB";              }              else if (mbytes > 0)              {                  double ret = (double)mbytes + ((double)((double)kbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " MB";              }              else if (kbytes > 0)              {                  double ret = (double)kbytes + ((double)((double)bytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " KB";              }              else              {                  string s = bytes.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)              {                  double ret = (double)pbytes + ((double)((double)tbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbytes > 0)              {                  double ret = (double)tbytes + ((double)((double)gbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " TB";              }              else if (gbytes > 0)              {                  double ret = (double)gbytes + ((double)((double)mbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " GB";              }              else if (mbytes > 0)              {                  double ret = (double)mbytes + ((double)((double)kbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " MB";              }              else if (kbytes > 0)              {                  double ret = (double)kbytes + ((double)((double)bytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " KB";              }              else              {                  string s = bytes.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)              {                  double ret = (double)pbytes + ((double)((double)tbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbytes > 0)              {                  double ret = (double)tbytes + ((double)((double)gbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " TB";              }              else if (gbytes > 0)              {                  double ret = (double)gbytes + ((double)((double)mbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " GB";              }              else if (mbytes > 0)              {                  double ret = (double)mbytes + ((double)((double)kbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " MB";              }              else if (kbytes > 0)              {                  double ret = (double)kbytes + ((double)((double)bytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " KB";              }              else              {                  string s = bytes.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)              {                  double ret = (double)pbytes + ((double)((double)tbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbytes > 0)              {                  double ret = (double)tbytes + ((double)((double)gbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " TB";              }              else if (gbytes > 0)              {                  double ret = (double)gbytes + ((double)((double)mbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " GB";              }              else if (mbytes > 0)              {                  double ret = (double)mbytes + ((double)((double)kbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " MB";              }              else if (kbytes > 0)              {                  double ret = (double)kbytes + ((double)((double)bytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " KB";              }              else              {                  string s = bytes.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)              {                  double ret = (double)pbytes + ((double)((double)tbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbytes > 0)              {                  double ret = (double)tbytes + ((double)((double)gbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " TB";              }              else if (gbytes > 0)              {                  double ret = (double)gbytes + ((double)((double)mbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " GB";              }              else if (mbytes > 0)              {                  double ret = (double)mbytes + ((double)((double)kbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " MB";              }              else if (kbytes > 0)              {                  double ret = (double)kbytes + ((double)((double)bytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " KB";              }              else              {                  string s = bytes.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,socks5,BandwidthCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)              {                  double ret = (double)pbytes + ((double)((double)tbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " Pb";              }              else if (tbytes > 0)              {                  double ret = (double)tbytes + ((double)((double)gbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " TB";              }              else if (gbytes > 0)              {                  double ret = (double)gbytes + ((double)((double)mbytes / 1024));                  string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " GB";              }              else if (mbytes > 0)              {                  double ret = (double)mbytes + ((double)((double)kbytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " MB";              }              else if (kbytes > 0)              {                  double ret = (double)kbytes + ((double)((double)bytes / 1024));                    string s = ret.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " KB";              }              else              {                  string s = bytes.ToString();                  if (s.Length > 6)                      s = s.Substring(0' 6);                  return s + " b";              }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: while (bytes > 1024)                  {                      kbytes++;                      bytes -= 1024;                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: while (bytes > 1024)                  {                      kbytes++;                      bytes -= 1024;                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: while (kbytes > 1024)                  {                      mbytes++;                      kbytes -= 1024;                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: while (kbytes > 1024)                  {                      mbytes++;                      kbytes -= 1024;                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: while (mbytes > 1024)                  {                      gbytes++;                      mbytes -= 1024;                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: while (mbytes > 1024)                  {                      gbytes++;                      mbytes -= 1024;                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: while (gbytes > 1024)                  {                      tbytes++;                      gbytes -= 1024;                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: while (gbytes > 1024)                  {                      tbytes++;                      gbytes -= 1024;                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: while (tbytes > 1024)                  {                      pbytes++;                      tbytes -= 1024;                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: while (tbytes > 1024)                  {                      pbytes++;                      tbytes -= 1024;                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,BytesPerSec,The following statement contains a magic number: if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                                            return (ulong)(((ret * 1024) * 1024) * 1024);                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                        return (ulong)((ret * 1024) * 1024);                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                        return (ulong)(ret * 1024);                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                        return (ulong)ret;                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,BytesPerSec,The following statement contains a magic number: if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                                            return (ulong)(((ret * 1024) * 1024) * 1024);                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                        return (ulong)((ret * 1024) * 1024);                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                        return (ulong)(ret * 1024);                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                        return (ulong)ret;                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,BytesPerSec,The following statement contains a magic number: if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                                            return (ulong)(((ret * 1024) * 1024) * 1024);                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                        return (ulong)((ret * 1024) * 1024);                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                        return (ulong)(ret * 1024);                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                        return (ulong)ret;                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,BytesPerSec,The following statement contains a magic number: if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                                            return (ulong)(((ret * 1024) * 1024) * 1024);                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                        return (ulong)((ret * 1024) * 1024);                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                        return (ulong)(ret * 1024);                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                        return (ulong)ret;                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,BytesPerSec,The following statement contains a magic number: if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                                            return (ulong)(((ret * 1024) * 1024) * 1024);                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                        return (ulong)((ret * 1024) * 1024);                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                        return (ulong)(ret * 1024);                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                        return (ulong)ret;                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,BytesPerSec,The following statement contains a magic number: if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                                            return (ulong)(((ret * 1024) * 1024) * 1024);                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                        return (ulong)((ret * 1024) * 1024);                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                        return (ulong)(ret * 1024);                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                        return (ulong)ret;                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,BytesPerSec,The following statement contains a magic number: if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                                            return (ulong)(((ret * 1024) * 1024) * 1024);                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                        return (ulong)((ret * 1024) * 1024);                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                        return (ulong)(ret * 1024);                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                        return (ulong)ret;                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,BytesPerSec,The following statement contains a magic number: if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                                            return (ulong)(((ret * 1024) * 1024) * 1024);                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                        return (ulong)((ret * 1024) * 1024);                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                        return (ulong)(ret * 1024);                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                        return (ulong)ret;                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,BytesPerSec,The following statement contains a magic number: if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                                            return (ulong)(((ret * 1024) * 1024) * 1024);                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                        return (ulong)((ret * 1024) * 1024);                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                        return (ulong)(ret * 1024);                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                        return (ulong)ret;                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)                  {                      double ret = (double)pbytes + ((double)((double)tbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " PB";                  }                  else if (tbytes > 0)                  {                      double ret = (double)tbytes + ((double)((double)gbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " TB";                  }                  else if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " GB";                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " MB";                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " KB";                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " B";                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)                  {                      double ret = (double)pbytes + ((double)((double)tbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " PB";                  }                  else if (tbytes > 0)                  {                      double ret = (double)tbytes + ((double)((double)gbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " TB";                  }                  else if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " GB";                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " MB";                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " KB";                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " B";                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)                  {                      double ret = (double)pbytes + ((double)((double)tbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " PB";                  }                  else if (tbytes > 0)                  {                      double ret = (double)tbytes + ((double)((double)gbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " TB";                  }                  else if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " GB";                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " MB";                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " KB";                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " B";                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)                  {                      double ret = (double)pbytes + ((double)((double)tbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " PB";                  }                  else if (tbytes > 0)                  {                      double ret = (double)tbytes + ((double)((double)gbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " TB";                  }                  else if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " GB";                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " MB";                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " KB";                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " B";                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)                  {                      double ret = (double)pbytes + ((double)((double)tbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " PB";                  }                  else if (tbytes > 0)                  {                      double ret = (double)tbytes + ((double)((double)gbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " TB";                  }                  else if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " GB";                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " MB";                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " KB";                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " B";                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)                  {                      double ret = (double)pbytes + ((double)((double)tbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " PB";                  }                  else if (tbytes > 0)                  {                      double ret = (double)tbytes + ((double)((double)gbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " TB";                  }                  else if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " GB";                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " MB";                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " KB";                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " B";                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)                  {                      double ret = (double)pbytes + ((double)((double)tbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " PB";                  }                  else if (tbytes > 0)                  {                      double ret = (double)tbytes + ((double)((double)gbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " TB";                  }                  else if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " GB";                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " MB";                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " KB";                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " B";                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)                  {                      double ret = (double)pbytes + ((double)((double)tbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " PB";                  }                  else if (tbytes > 0)                  {                      double ret = (double)tbytes + ((double)((double)gbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " TB";                  }                  else if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " GB";                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " MB";                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " KB";                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " B";                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)                  {                      double ret = (double)pbytes + ((double)((double)tbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " PB";                  }                  else if (tbytes > 0)                  {                      double ret = (double)tbytes + ((double)((double)gbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " TB";                  }                  else if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " GB";                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " MB";                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " KB";                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " B";                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)                  {                      double ret = (double)pbytes + ((double)((double)tbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " PB";                  }                  else if (tbytes > 0)                  {                      double ret = (double)tbytes + ((double)((double)gbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " TB";                  }                  else if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " GB";                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " MB";                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " KB";                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " B";                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)                  {                      double ret = (double)pbytes + ((double)((double)tbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " PB";                  }                  else if (tbytes > 0)                  {                      double ret = (double)tbytes + ((double)((double)gbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " TB";                  }                  else if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " GB";                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " MB";                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " KB";                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " B";                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)                  {                      double ret = (double)pbytes + ((double)((double)tbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " PB";                  }                  else if (tbytes > 0)                  {                      double ret = (double)tbytes + ((double)((double)gbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " TB";                  }                  else if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " GB";                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " MB";                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " KB";                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " B";                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)                  {                      double ret = (double)pbytes + ((double)((double)tbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " PB";                  }                  else if (tbytes > 0)                  {                      double ret = (double)tbytes + ((double)((double)gbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " TB";                  }                  else if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " GB";                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " MB";                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " KB";                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " B";                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)                  {                      double ret = (double)pbytes + ((double)((double)tbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " PB";                  }                  else if (tbytes > 0)                  {                      double ret = (double)tbytes + ((double)((double)gbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " TB";                  }                  else if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " GB";                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " MB";                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " KB";                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " B";                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)                  {                      double ret = (double)pbytes + ((double)((double)tbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " PB";                  }                  else if (tbytes > 0)                  {                      double ret = (double)tbytes + ((double)((double)gbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " TB";                  }                  else if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " GB";                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " MB";                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " KB";                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " B";                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)                  {                      double ret = (double)pbytes + ((double)((double)tbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " PB";                  }                  else if (tbytes > 0)                  {                      double ret = (double)tbytes + ((double)((double)gbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " TB";                  }                  else if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " GB";                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " MB";                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " KB";                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " B";                  }
Magic Number,socks5,MiniCounter,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: if (pbytes > 0)                  {                      double ret = (double)pbytes + ((double)((double)tbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " PB";                  }                  else if (tbytes > 0)                  {                      double ret = (double)tbytes + ((double)((double)gbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " TB";                  }                  else if (gbytes > 0)                  {                      double ret = (double)gbytes + ((double)((double)mbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " GB";                  }                  else if (mbytes > 0)                  {                      double ret = (double)mbytes + ((double)((double)kbytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                        lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " MB";                  }                  else if (kbytes > 0)                  {                      double ret = (double)kbytes + ((double)((double)bytes / 1024));                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " KB";                  }                  else                  {                      double ret = bytes;                      ret = ret / (DateTime.Now - lastRead).TotalSeconds;                      lastRead = DateTime.Now;                      string s = ret.ToString();                      if (s.Length > 6)                          s = s.Substring(0' 6);                      return s + " B";                  }
Magic Number,socks5,Extensions,C:\repos\ThrDev_Socks5\socks5\socks5\Extensions.cs,FromHex,The following statement contains a magic number: if (value.StartsWith("0x"' StringComparison.OrdinalIgnoreCase))              {                  value = value.Substring(2);              }
Magic Number,socks5,Socks5Server,C:\repos\ThrDev_Socks5\socks5\socks5\SocksServer\Socks5Server.cs,Socks5Server,The following statement contains a magic number: Timeout = 5000;
Magic Number,socks5,Socks5Server,C:\repos\ThrDev_Socks5\socks5\socks5\SocksServer\Socks5Server.cs,Socks5Server,The following statement contains a magic number: PacketSize = 4096;
Magic Number,socks5,Socks5Server,C:\repos\ThrDev_Socks5\socks5\socks5\SocksServer\Socks5Server.cs,Start,The following statement contains a magic number: NetworkStats = new Thread(new ThreadStart(delegate()              {                  while (started)                  {                      if (this.Clients.Contains(null))                          this.Clients.Remove(null);                      Stats.ResetClients(this.Clients.Count);                      Thread.Sleep(1000);                  }              }));
Magic Number,System.Runtime.CompilerServices,Extensions,C:\repos\ThrDev_Socks5\socks5\socks5\Extensions.cs,FromHex,The following statement contains a magic number: if (value.StartsWith("0x"' StringComparison.OrdinalIgnoreCase))              {                  value = value.Substring(2);              }
Magic Number,socks5.TCP,TcpServer,C:\repos\ThrDev_Socks5\socks5\socks5\TCP\TcpServer.cs,Start,The following statement contains a magic number: if (!accept)              {                  accept = true;                  p.Start(10000);                                 new Thread(new ThreadStart(AcceptConnections)).Start();              }
Missing Default,socks5.Socks,SocksSpecialTunnel,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\SocksSpecialTunnel.cs,socketArgs_Completed,The following switch statement is missing a default case: switch (e.LastOperation)              {                  case SocketAsyncOperation.Connect:                      //connected;                      ConnectHandler(e);                      break;                             }
Missing Default,socks5.Socks,Socks5,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestAuth,The following switch statement is missing a default case: switch ((AuthTypes)buff[i])  				{  				case AuthTypes.Login:  					types.Add(AuthTypes.Login);  					break;  				case AuthTypes.None:  					types.Add(AuthTypes.None);  					break;  				case AuthTypes.SocksBoth:  					types.Add(AuthTypes.SocksBoth);  					break;  				case AuthTypes.SocksEncrypt:  					types.Add(AuthTypes.SocksEncrypt);  					break;  				case AuthTypes.SocksCompress:  					types.Add(AuthTypes.SocksCompress);  					break;  				}
Missing Default,socks5.Socks,Socks5,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following switch statement is missing a default case: switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}
Missing Default,socks5,SocksTunnel,C:\repos\ThrDev_Socks5\socks5\socks5\Socks\SocksTunnel.cs,socketArgs_Completed,The following switch statement is missing a default case: switch (e.LastOperation)              {                  case SocketAsyncOperation.Connect:                      //connected;                      ConnectHandler(e);                      break;                             }
