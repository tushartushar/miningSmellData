Implementation smell,Namespace,Class,File,Method,Description
Long Method,socks5.Socks5Client,Socks,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,DoSocksAuth,The method has 113 lines of code.
Long Method,socks5.Socks,SocksClient,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\SocksClient.cs,Begin,The method has 103 lines of code.
Complex Method,socks5.Plugin,PluginLoader,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Plugin\PluginLoader.cs,LoadPlugins,Cyclomatic complexity of the method is 13
Complex Method,socks5.Socks5Client,Socks,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,DoSocksAuth,Cyclomatic complexity of the method is 15
Complex Method,socks5.Socks,SocksClient,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\SocksClient.cs,Begin,Cyclomatic complexity of the method is 17
Complex Method,socks5,BandwidthCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,Cyclomatic complexity of the method is 12
Complex Method,socks5,MiniCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,Cyclomatic complexity of the method is 12
Complex Method,socks5,SocksTunnel,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\SocksTunnel.cs,Open,Cyclomatic complexity of the method is 8
Long Parameter List,socks5.Socks5Client,Socks5Client,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Socks5Client,The method has 6 parameters. Parameters: ipOrDomain' port' dest' destport' username' password
Long Parameter List,socks5.Socks5Client,Socks5Client,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Socks5Client,The method has 6 parameters. Parameters: ip' port' dest' destport' username' password
Long Parameter List,socks5.Socks5Client,Socks5Client,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,DoSocks,The method has 6 parameters. Parameters: ip' port' dest' destport' username' password
Long Parameter List,socks5.Socks,SocksSpecialTunnel,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\SocksSpecialTunnel.cs,SocksSpecialTunnel,The method has 6 parameters. Parameters: p' ph' req' req1' packetSize' timeout
Long Parameter List,socks5,SocksTunnel,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\SocksTunnel.cs,SocksTunnel,The method has 5 parameters. Parameters: p' req' req1' packetSize' timeout
Long Statement,socks5.Socks,SocksClient,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\SocksClient.cs,Begin,The length of the statement  "            if (lhandlers.Count > 0 && (authtypes.Contains(AuthTypes.SocksBoth) || authtypes.Contains(AuthTypes.SocksEncrypt) || authtypes.Contains(AuthTypes.SocksCompress) || authtypes.Contains(AuthTypes.Login))) " is 201.
Complex Conditional,socks5.Socks,SocksClient,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\SocksClient.cs,Begin,The conditional expression  "lhandlers.Count > 0 && (authtypes.Contains(AuthTypes.SocksBoth) || authtypes.Contains(AuthTypes.SocksEncrypt) || authtypes.Contains(AuthTypes.SocksCompress) || authtypes.Contains(AuthTypes.Login))"  is complex.
Empty Catch Block,socks5.Plugin,PluginLoader,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Plugin\PluginLoader.cs,LoadPlugins,The method has an empty catch block.
Empty Catch Block,socks5.Plugin,PluginLoader,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Plugin\PluginLoader.cs,LoadPlugins,The method has an empty catch block.
Empty Catch Block,socks5.Socks,SocksSpecialTunnel,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\SocksSpecialTunnel.cs,ConnectHandler,The method has an empty catch block.
Empty Catch Block,socks5,Socks5Server,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\SocksServer\Socks5Server.cs,_server_onClientConnected,The method has an empty catch block.
Empty Catch Block,socks5,Socks5Server,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\SocksServer\Socks5Server.cs,client_onClientDisconnected,The method has an empty catch block.
Empty Catch Block,socks5.TCP,Client,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\Client.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,socks5.TCP,TcpServer,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\TcpServer.cs,AcceptConnections,The method has an empty catch block.
Magic Number,socks5.HTTP,Chunked,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Chunked.cs,Chunked,The following statement contains a magic number: int endofchunked = oldbuffer.FindString("\r\n"' endofheader + 4);
Magic Number,socks5.HTTP,Chunked,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Chunked.cs,Chunked,The following statement contains a magic number: string chunked = oldbuffer.GetBetween(endofheader + 4' endofchunked);
Magic Number,socks5.HTTP,Chunked,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Chunked.cs,Chunked,The following statement contains a magic number: totalbuff = new byte[65535];
Magic Number,socks5.HTTP,Chunked,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Chunked.cs,Chunked,The following statement contains a magic number: oldbuffer = oldbuffer.ReplaceBetween(endofheader + 4' endofchunked + 2' new byte[] { });
Magic Number,socks5.HTTP,Chunked,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Chunked.cs,Chunked,The following statement contains a magic number: oldbuffer = oldbuffer.ReplaceBetween(endofheader + 4' endofchunked + 2' new byte[] { });
Magic Number,socks5.HTTP,Chunked,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Chunked.cs,Chunked,The following statement contains a magic number: totalchunksize == -2
Magic Number,socks5.HTTP,Chunked,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Chunked.cs,GetChunkSize,The following statement contains a magic number: return -2;
Magic Number,socks5.HTTP,Chunked,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Chunked.cs,GetChunkSize,The following statement contains a magic number: buffer.FindString("\r\n0\r\n\r\n"' count - 7) != -1
Magic Number,socks5.HTTP,Chunked,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Chunked.cs,GetChunkData,The following statement contains a magic number: return buffer.GetInBetween(buffer.FindString("\r\n") + 2' size);
Magic Number,socks5.Encryption,SocksEncryption,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Encryption\SocksEncryption.cs,GenerateKeys,The following statement contains a magic number: key = new RSACryptoServiceProvider(1024);
Magic Number,socks5.Encryption,SocksEncryption,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Encryption\SocksEncryption.cs,GenerateKeys,The following statement contains a magic number: remotepubkey = new RSACryptoServiceProvider(1024);
Magic Number,socks5.Encryption,SocksEncryption,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Encryption\SocksEncryption.cs,GenerateKeys,The following statement contains a magic number: dc.PassPhrase = Utils.RandStr(20);
Magic Number,socks5.Socks5Client,Socks,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,Greet,The following statement contains a magic number: var bytes = new byte[supportedAuthTypes.Count + 2];
Magic Number,socks5.Socks5Client,Socks,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,Greet,The following statement contains a magic number: bytes[i + 2] = (byte)supportedAuthTypes[i];
Magic Number,socks5.Socks5Client,Socks,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,Greet,The following statement contains a magic number: byte[] buffer = new byte[512];
Magic Number,socks5.Socks5Client,Socks,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,SendLogin,The following statement contains a magic number: byte[] x = new byte[Username.Length + Password.Length + 3];
Magic Number,socks5.Socks5Client,Socks,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,SendLogin,The following statement contains a magic number: Buffer.BlockCopy(Encoding.ASCII.GetBytes(Username)' 0' x' 2' Username.Length);
Magic Number,socks5.Socks5Client,Socks,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,SendLogin,The following statement contains a magic number: byte[] buffer = new byte[512];
Magic Number,socks5.Socks5Client,Socks,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,SendRequest,The following statement contains a magic number: byte[] buffer = new byte[512];
Magic Number,socks5.Socks5Client,Socks,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,DoSocksAuth,The following statement contains a magic number: switch (auth)                  {                      case AuthTypes.Login:                          //logged in.                          p.enc.SetType(AuthTypes.Login);                          //just reqeust login?                            break;                      case AuthTypes.SocksBoth:                          //socksboth.                          p.enc.SetType(AuthTypes.SocksBoth);                          p.enc.GenerateKeys();                          //send public key.                          p.Client.Send(p.enc.GetPublicKey());                          //now receive key.                            byte[] buffer = new byte[4096];                          int keysize = p.Client.Receive(buffer' 0' buffer.Length);                          p.enc.SetKey(buffer' 0' keysize);                          //let them know we got it                          //now receive our encryption key.                          int enckeysize = p.Client.Receive(buffer' 0' buffer.Length);                          //decrypt with our public key.                          byte[] newkey = new byte[enckeysize];                          Buffer.BlockCopy(buffer' 0' newkey' 0' enckeysize);                          p.enc.SetEncKey(p.enc.key.Decrypt(newkey' false));                          //now we share our encryption key.                          p.Client.Send(p.enc.ShareEncryptionKey());                            break;                      case AuthTypes.SocksEncrypt:                          p.enc.SetType(AuthTypes.SocksEncrypt);                          p.enc.GenerateKeys();                          //send public key.                          p.Client.Send(p.enc.GetPublicKey());                          //now receive key.                            buffer = new byte[4096];                          keysize = p.Client.Receive(buffer' 0' buffer.Length);                          p.enc.SetKey(buffer' 0' keysize);                          //now receive our encryption key.                          enckeysize = p.Client.Receive(buffer' 0' buffer.Length);                          //decrypt with our public key.                          newkey = new byte[enckeysize];                          Buffer.BlockCopy(buffer' 0' newkey' 0' enckeysize);                          p.enc.SetEncKey(p.enc.key.Decrypt(newkey' false));                          //now we share our encryption key.                            p.Client.Send(p.enc.ShareEncryptionKey());                            //socksencrypt.                          break;                      case AuthTypes.SocksCompress:                          p.enc.SetType(AuthTypes.SocksCompress);                          //sockscompress.                          break;                      default:                          p.Client.Disconnect();                          return false;                  }
Magic Number,socks5.Socks5Client,Socks,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,DoSocksAuth,The following statement contains a magic number: switch (auth)                  {                      case AuthTypes.Login:                          //logged in.                          p.enc.SetType(AuthTypes.Login);                          //just reqeust login?                            break;                      case AuthTypes.SocksBoth:                          //socksboth.                          p.enc.SetType(AuthTypes.SocksBoth);                          p.enc.GenerateKeys();                          //send public key.                          p.Client.Send(p.enc.GetPublicKey());                          //now receive key.                            byte[] buffer = new byte[4096];                          int keysize = p.Client.Receive(buffer' 0' buffer.Length);                          p.enc.SetKey(buffer' 0' keysize);                          //let them know we got it                          //now receive our encryption key.                          int enckeysize = p.Client.Receive(buffer' 0' buffer.Length);                          //decrypt with our public key.                          byte[] newkey = new byte[enckeysize];                          Buffer.BlockCopy(buffer' 0' newkey' 0' enckeysize);                          p.enc.SetEncKey(p.enc.key.Decrypt(newkey' false));                          //now we share our encryption key.                          p.Client.Send(p.enc.ShareEncryptionKey());                            break;                      case AuthTypes.SocksEncrypt:                          p.enc.SetType(AuthTypes.SocksEncrypt);                          p.enc.GenerateKeys();                          //send public key.                          p.Client.Send(p.enc.GetPublicKey());                          //now receive key.                            buffer = new byte[4096];                          keysize = p.Client.Receive(buffer' 0' buffer.Length);                          p.enc.SetKey(buffer' 0' keysize);                          //now receive our encryption key.                          enckeysize = p.Client.Receive(buffer' 0' buffer.Length);                          //decrypt with our public key.                          newkey = new byte[enckeysize];                          Buffer.BlockCopy(buffer' 0' newkey' 0' enckeysize);                          p.enc.SetEncKey(p.enc.key.Decrypt(newkey' false));                          //now we share our encryption key.                            p.Client.Send(p.enc.ShareEncryptionKey());                            //socksencrypt.                          break;                      case AuthTypes.SocksCompress:                          p.enc.SetType(AuthTypes.SocksCompress);                          //sockscompress.                          break;                      default:                          p.Client.Disconnect();                          return false;                  }
Magic Number,socks5.Socks5Client,Socks,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks.cs,DoSocksAuth,The following statement contains a magic number: byte[] buff = new byte[1024];
Magic Number,socks5.Socks5Client,Socks5Client,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,ConnectAsync,The following statement contains a magic number: Client = new Client(p' 4200);
Magic Number,socks5.Socks5Client,Socks5Client,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Send,The following statement contains a magic number: byte[] outputdata = enc.ProcessOutputData(buffer' offst' (length - offst > 4092 ? 4092 : length - offst));
Magic Number,socks5.Socks5Client,Socks5Client,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Send,The following statement contains a magic number: byte[] outputdata = enc.ProcessOutputData(buffer' offst' (length - offst > 4092 ? 4092 : length - offst));
Magic Number,socks5.Socks5Client,Socks5Client,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Send,The following statement contains a magic number: offst += (length - offst > 4092 ? 4092 : length - offst);
Magic Number,socks5.Socks5Client,Socks5Client,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Send,The following statement contains a magic number: offst += (length - offst > 4092 ? 4092 : length - offst);
Magic Number,socks5.Socks5Client,Socks5Client,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Send,The following statement contains a magic number: byte[] datatosend = new byte[outputdata.Length + 4];
Magic Number,socks5.Socks5Client,Socks5Client,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Send,The following statement contains a magic number: Buffer.BlockCopy(outputdata' 0' datatosend' 4' outputdata.Length);
Magic Number,socks5.Socks5Client,Socks5Client,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Send,The following statement contains a magic number: Buffer.BlockCopy(BitConverter.GetBytes(outputdata.Length)' 0' datatosend' 0' 4);
Magic Number,socks5.Socks5Client,Socks5Client,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Receive,The following statement contains a magic number: count = Math.Min(4200' count);
Magic Number,socks5.Socks5Client,Socks5Client,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Receive,The following statement contains a magic number: byte[] databuf = new byte[4200];
Magic Number,socks5.Socks5Client,Socks5Client,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Receive,The following statement contains a magic number: int got = Client.Receive(databuf' 0' 4200);
Magic Number,socks5.Socks5Client,Socks5Client,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Receive,The following statement contains a magic number: byte[] processed = enc.ProcessInputData(databuf' 4' packetsize);
Magic Number,socks5.Socks5Client,Socks5Client,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,ReceiveAsync,The following statement contains a magic number: Client.ReceiveAsync(4);
Magic Number,socks5.Socks5Client,Socks5Client,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks5Client\Socks5Client.cs,Connect,The following statement contains a magic number: Client = new Client(p' 65535);
Magic Number,socks5.Socks,SocksSpecialTunnel,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\SocksSpecialTunnel.cs,ConnectHandler,The following statement contains a magic number: Client.Client.Sock.ReceiveBufferSize = 4200;
Magic Number,socks5.Socks,SocksSpecialTunnel,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\SocksSpecialTunnel.cs,ConnectHandler,The following statement contains a magic number: Client.Client.Sock.SendBufferSize = 4200;
Magic Number,socks5.Socks,SocksSpecialTunnel,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\SocksSpecialTunnel.cs,RemoteClient_onDataReceived,The following statement contains a magic number: byte[] datatosend = new byte[outputdata.Length + 4];
Magic Number,socks5.Socks,SocksSpecialTunnel,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\SocksSpecialTunnel.cs,RemoteClient_onDataReceived,The following statement contains a magic number: Buffer.BlockCopy(outputdata' 0' datatosend' 4' outputdata.Length);
Magic Number,socks5.Socks,SocksSpecialTunnel,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\SocksSpecialTunnel.cs,RemoteClient_onDataReceived,The following statement contains a magic number: Buffer.BlockCopy(BitConverter.GetBytes(outputdata.Length)' 0' datatosend' 0' 4);
Magic Number,socks5.Socks,SocksSpecialTunnel,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\SocksSpecialTunnel.cs,Client_onDataReceived,The following statement contains a magic number: byte[] output = se.ProcessInputData(e.Buffer' 4' packetsize);
Magic Number,socks5.Socks,Socks5,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestAuth,The following statement contains a magic number: i < methods + 2
Magic Number,socks5.Socks,Socks5,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestSpecialMode,The following statement contains a magic number: byte[] buffer = new byte[4096];
Magic Number,socks5.Socks,Socks5,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestLogin,The following statement contains a magic number: int numpassword = Convert.ToInt32(buff[(numusername + 2)]);
Magic Number,socks5.Socks,Socks5,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestLogin,The following statement contains a magic number: string username = Encoding.ASCII.GetString(buff' 2' numusername);
Magic Number,socks5.Socks,Socks5,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestLogin,The following statement contains a magic number: string password = Encoding.ASCII.GetString(buff' numusername + 3' numpassword);
Magic Number,socks5.Socks,Socks5,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following statement contains a magic number: switch ((StreamTypes)buff[1])  			{  			case StreamTypes.Stream:  				{  					int fwd = 4;  					string address = "";  					switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}  					byte[] po = new byte[2];  					Array.Copy(buff' fwd' po' 0' 2);  					UInt16 port = BitConverter.ToUInt16(new byte[] { po[1]' po[0] }' 0);  					return new SocksRequest(StreamTypes.Stream' (AddressType)buff[3]' address' port);  				}  			default:  				//not supported.  				return null;    			}
Magic Number,socks5.Socks,Socks5,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following statement contains a magic number: switch ((StreamTypes)buff[1])  			{  			case StreamTypes.Stream:  				{  					int fwd = 4;  					string address = "";  					switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}  					byte[] po = new byte[2];  					Array.Copy(buff' fwd' po' 0' 2);  					UInt16 port = BitConverter.ToUInt16(new byte[] { po[1]' po[0] }' 0);  					return new SocksRequest(StreamTypes.Stream' (AddressType)buff[3]' address' port);  				}  			default:  				//not supported.  				return null;    			}
Magic Number,socks5.Socks,Socks5,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following statement contains a magic number: switch ((StreamTypes)buff[1])  			{  			case StreamTypes.Stream:  				{  					int fwd = 4;  					string address = "";  					switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}  					byte[] po = new byte[2];  					Array.Copy(buff' fwd' po' 0' 2);  					UInt16 port = BitConverter.ToUInt16(new byte[] { po[1]' po[0] }' 0);  					return new SocksRequest(StreamTypes.Stream' (AddressType)buff[3]' address' port);  				}  			default:  				//not supported.  				return null;    			}
Magic Number,socks5.Socks,Socks5,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following statement contains a magic number: switch ((StreamTypes)buff[1])  			{  			case StreamTypes.Stream:  				{  					int fwd = 4;  					string address = "";  					switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}  					byte[] po = new byte[2];  					Array.Copy(buff' fwd' po' 0' 2);  					UInt16 port = BitConverter.ToUInt16(new byte[] { po[1]' po[0] }' 0);  					return new SocksRequest(StreamTypes.Stream' (AddressType)buff[3]' address' port);  				}  			default:  				//not supported.  				return null;    			}
Magic Number,socks5.Socks,Socks5,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following statement contains a magic number: switch ((StreamTypes)buff[1])  			{  			case StreamTypes.Stream:  				{  					int fwd = 4;  					string address = "";  					switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}  					byte[] po = new byte[2];  					Array.Copy(buff' fwd' po' 0' 2);  					UInt16 port = BitConverter.ToUInt16(new byte[] { po[1]' po[0] }' 0);  					return new SocksRequest(StreamTypes.Stream' (AddressType)buff[3]' address' port);  				}  			default:  				//not supported.  				return null;    			}
Magic Number,socks5.Socks,Socks5,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following statement contains a magic number: switch ((StreamTypes)buff[1])  			{  			case StreamTypes.Stream:  				{  					int fwd = 4;  					string address = "";  					switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}  					byte[] po = new byte[2];  					Array.Copy(buff' fwd' po' 0' 2);  					UInt16 port = BitConverter.ToUInt16(new byte[] { po[1]' po[0] }' 0);  					return new SocksRequest(StreamTypes.Stream' (AddressType)buff[3]' address' port);  				}  			default:  				//not supported.  				return null;    			}
Magic Number,socks5.Socks,Socks5,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following statement contains a magic number: switch ((StreamTypes)buff[1])  			{  			case StreamTypes.Stream:  				{  					int fwd = 4;  					string address = "";  					switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}  					byte[] po = new byte[2];  					Array.Copy(buff' fwd' po' 0' 2);  					UInt16 port = BitConverter.ToUInt16(new byte[] { po[1]' po[0] }' 0);  					return new SocksRequest(StreamTypes.Stream' (AddressType)buff[3]' address' port);  				}  			default:  				//not supported.  				return null;    			}
Magic Number,socks5.Socks,Socks5,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following statement contains a magic number: switch ((StreamTypes)buff[1])  			{  			case StreamTypes.Stream:  				{  					int fwd = 4;  					string address = "";  					switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}  					byte[] po = new byte[2];  					Array.Copy(buff' fwd' po' 0' 2);  					UInt16 port = BitConverter.ToUInt16(new byte[] { po[1]' po[0] }' 0);  					return new SocksRequest(StreamTypes.Stream' (AddressType)buff[3]' address' port);  				}  			default:  				//not supported.  				return null;    			}
Magic Number,socks5.Socks,Socks5,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following statement contains a magic number: switch ((StreamTypes)buff[1])  			{  			case StreamTypes.Stream:  				{  					int fwd = 4;  					string address = "";  					switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}  					byte[] po = new byte[2];  					Array.Copy(buff' fwd' po' 0' 2);  					UInt16 port = BitConverter.ToUInt16(new byte[] { po[1]' po[0] }' 0);  					return new SocksRequest(StreamTypes.Stream' (AddressType)buff[3]' address' port);  				}  			default:  				//not supported.  				return null;    			}
Magic Number,socks5.Socks,Socks5,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following statement contains a magic number: switch ((StreamTypes)buff[1])  			{  			case StreamTypes.Stream:  				{  					int fwd = 4;  					string address = "";  					switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}  					byte[] po = new byte[2];  					Array.Copy(buff' fwd' po' 0' 2);  					UInt16 port = BitConverter.ToUInt16(new byte[] { po[1]' po[0] }' 0);  					return new SocksRequest(StreamTypes.Stream' (AddressType)buff[3]' address' port);  				}  			default:  				//not supported.  				return null;    			}
Magic Number,socks5.Socks,Socks5,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following statement contains a magic number: switch ((StreamTypes)buff[1])  			{  			case StreamTypes.Stream:  				{  					int fwd = 4;  					string address = "";  					switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}  					byte[] po = new byte[2];  					Array.Copy(buff' fwd' po' 0' 2);  					UInt16 port = BitConverter.ToUInt16(new byte[] { po[1]' po[0] }' 0);  					return new SocksRequest(StreamTypes.Stream' (AddressType)buff[3]' address' port);  				}  			default:  				//not supported.  				return null;    			}
Magic Number,socks5.Socks,Socks5,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,Receive,The following statement contains a magic number: buffer = new byte[65535];
Magic Number,socks5.Socks,SocksRequest,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,GetData,The following statement contains a magic number: data = new byte[10];
Magic Number,socks5.Socks,SocksRequest,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,GetData,The following statement contains a magic number: data[i] = Convert.ToByte(Convert.ToInt32(content[i - 4]));
Magic Number,socks5.Socks,SocksRequest,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,GetData,The following statement contains a magic number: i < content.Length + 4
Magic Number,socks5.Socks,SocksRequest,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,GetData,The following statement contains a magic number: Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' 8' 2);
Magic Number,socks5.Socks,SocksRequest,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,GetData,The following statement contains a magic number: Buffer.BlockCopy(BitConverter.GetBytes(port)' 0' data' 8' 2);
Magic Number,socks5.Socks,SocksRequest,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,GetData,The following statement contains a magic number: data[2] = 0x00;
Magic Number,socks5.Socks,SocksRequest,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,GetData,The following statement contains a magic number: data[3] = (byte)Type;
Magic Number,socks5,BandwidthCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: bytes -= 1024;
Magic Number,socks5,BandwidthCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: bytes > 1024
Magic Number,socks5,BandwidthCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: kbytes -= 1024;
Magic Number,socks5,BandwidthCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: kbytes > 1024
Magic Number,socks5,BandwidthCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: mbytes -= 1024;
Magic Number,socks5,BandwidthCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: mbytes > 1024
Magic Number,socks5,BandwidthCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: gbytes -= 1024;
Magic Number,socks5,BandwidthCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: gbytes > 1024
Magic Number,socks5,BandwidthCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: tbytes -= 1024;
Magic Number,socks5,BandwidthCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: tbytes > 1024
Magic Number,socks5,BandwidthCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: double ret = (double)pbytes + ((double)((double)tbytes / 1024));
Magic Number,socks5,BandwidthCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: s = s.Substring(0' 6);
Magic Number,socks5,BandwidthCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: s.Length > 6
Magic Number,socks5,MiniCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: bytes -= 1024;
Magic Number,socks5,MiniCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: bytes > 1024
Magic Number,socks5,MiniCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: kbytes -= 1024;
Magic Number,socks5,MiniCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: kbytes > 1024
Magic Number,socks5,MiniCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: mbytes -= 1024;
Magic Number,socks5,MiniCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: mbytes > 1024
Magic Number,socks5,MiniCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: gbytes -= 1024;
Magic Number,socks5,MiniCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: gbytes > 1024
Magic Number,socks5,MiniCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: tbytes -= 1024;
Magic Number,socks5,MiniCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,AddBytes,The following statement contains a magic number: tbytes > 1024
Magic Number,socks5,MiniCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,BytesPerSec,The following statement contains a magic number: double ret = (double)gbytes + ((double)((double)mbytes / 1024));
Magic Number,socks5,MiniCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,BytesPerSec,The following statement contains a magic number: return (ulong)(((ret * 1024) * 1024) * 1024);
Magic Number,socks5,MiniCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,BytesPerSec,The following statement contains a magic number: return (ulong)(((ret * 1024) * 1024) * 1024);
Magic Number,socks5,MiniCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,BytesPerSec,The following statement contains a magic number: return (ulong)(((ret * 1024) * 1024) * 1024);
Magic Number,socks5,MiniCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: double ret = (double)pbytes + ((double)((double)tbytes / 1024));
Magic Number,socks5,MiniCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: s = s.Substring(0' 6);
Magic Number,socks5,MiniCounter,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\BandwidthCounter.cs,ToString,The following statement contains a magic number: s.Length > 6
Magic Number,socks5,Extensions,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Extensions.cs,FromHex,The following statement contains a magic number: value = value.Substring(2);
Magic Number,socks5,Socks5Server,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\SocksServer\Socks5Server.cs,Socks5Server,The following statement contains a magic number: Timeout = 5000;
Magic Number,socks5,Socks5Server,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\SocksServer\Socks5Server.cs,Socks5Server,The following statement contains a magic number: PacketSize = 4096;
Magic Number,socks5,Socks5Server,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\SocksServer\Socks5Server.cs,Start,The following statement contains a magic number: NetworkStats = new Thread(new ThreadStart(delegate()              {                  while (started)                  {                      if (this.Clients.Contains(null))                          this.Clients.Remove(null);                      Stats.ResetClients(this.Clients.Count);                      Thread.Sleep(1000);                  }              }));
Magic Number,socks5.TCP,TcpServer,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\TCP\TcpServer.cs,Start,The following statement contains a magic number: p.Start(10000);
Missing Default,socks5.Socks,SocksSpecialTunnel,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\SocksSpecialTunnel.cs,socketArgs_Completed,The following switch statement is missing a default case: switch (e.LastOperation)              {                  case SocketAsyncOperation.Connect:                      //connected;                      ConnectHandler(e);                      break;                             }
Missing Default,socks5.Socks,Socks5,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestAuth,The following switch statement is missing a default case: switch ((AuthTypes)buff[i])  				{  				case AuthTypes.Login:  					types.Add(AuthTypes.Login);  					break;  				case AuthTypes.None:  					types.Add(AuthTypes.None);  					break;  				case AuthTypes.SocksBoth:  					types.Add(AuthTypes.SocksBoth);  					break;  				case AuthTypes.SocksEncrypt:  					types.Add(AuthTypes.SocksEncrypt);  					break;  				case AuthTypes.SocksCompress:  					types.Add(AuthTypes.SocksCompress);  					break;  				}
Missing Default,socks5.Socks,Socks5,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\Socks.cs,RequestTunnel,The following switch statement is missing a default case: switch ((AddressType)buff[3])  					{  					case AddressType.IP:  						{  							for (int i = 4; i < 8; i++)  							{  								//grab IP.  								address += Convert.ToInt32(buff[i]).ToString() + (i != 7 ? "." : "");  							}  							fwd += 4;  						}  						break;  					case AddressType.Domain:  						{  							int domainlen = Convert.ToInt32(buff[4]);  							address += Encoding.ASCII.GetString(buff' 5' domainlen);  							fwd += domainlen + 1;  						}  						break;  					case AddressType.IPv6:  						//can't handle IPV6 traffic just yet.  						return null;  					}
Missing Default,socks5,SocksTunnel,D:\research\architectureSmells\repos1\ThrDev_Socks5\socks5\socks5\Socks\SocksTunnel.cs,socketArgs_Completed,The following switch statement is missing a default case: switch (e.LastOperation)              {                  case SocketAsyncOperation.Connect:                      //connected;                      ConnectHandler(e);                      break;                             }
