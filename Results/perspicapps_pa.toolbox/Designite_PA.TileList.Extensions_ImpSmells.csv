Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ChangeQuadrant,Cyclomatic complexity of the method is 23
Complex Method,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ChangeQuadrant,Cyclomatic complexity of the method is 23
Complex Method,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ChangeQuadrant,Cyclomatic complexity of the method is 31
Complex Method,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ChangeQuadrant,Cyclomatic complexity of the method is 31
Complex Method,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ChangeQuadrantFromOriginX,Cyclomatic complexity of the method is 23
Complex Method,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ChangeQuadrantFromOriginY,Cyclomatic complexity of the method is 23
Complex Method,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ToTopLeftPositive,Cyclomatic complexity of the method is 16
Complex Method,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ToTopLeftPositive,Cyclomatic complexity of the method is 16
Complex Method,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ToTopLeftPositive,Cyclomatic complexity of the method is 16
Complex Method,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,FromTopLeftPositive,Cyclomatic complexity of the method is 16
Complex Method,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,Fill,Cyclomatic complexity of the method is 25
Complex Method,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,Contextualize,Cyclomatic complexity of the method is 38
Long Parameter List,PA.TileList.Contextual,ContextualExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Contextual\ContextualExtensions.cs,Flatten,The method has 6 parameters.
Long Parameter List,PA.TileList.Linear,LinearExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Linear\LinearExtensions.cs,GetLine,The method has 6 parameters.
Long Parameter List,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ToTopLeftPositive,The method has 5 parameters.
Long Parameter List,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,FirstOrDefault,The method has 5 parameters.
Long Parameter List,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,FirstOrAdd,The method has 5 parameters.
Long Parameter List,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,Fill,The method has 7 parameters.
Long Parameter List,PA.TileList.Quantified,QuantifiedExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quantified\QuantifiedExtensions.cs,GetCoordinateAt,The method has 7 parameters.
Long Parameter List,PA.TileList.Quantified,QuantifiedExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quantified\QuantifiedExtensions.cs,GetCoordinatesIn,The method has 9 parameters.
Long Parameter List,PA.TileList.Quantified,QuantifiedExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quantified\QuantifiedExtensions.cs,Crop,The method has 9 parameters.
Long Parameter List,PA.TileList.Quantified,QuantifiedExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quantified\QuantifiedExtensions.cs,FirstOrDefault,The method has 6 parameters.
Long Statement,PA.TileList.Contextual,ContextualExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Contextual\ContextualExtensions.cs,Flatten,The length of the statement  "	QuantifiedTile<IContextual<T>> list = new QuantifiedTile<IContextual<T>> (ContextualExtensions.Flatten<U' T> (t as ITile<U>' predicate)' sizeX' sizeY' stepX' stepY' distX * stepX + t.RefOffsetX' distY * stepY + t.RefOffsetY); " is 225.
Long Statement,PA.TileList.Contextual,ContextualExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Contextual\ContextualExtensions.cs,Flatten,The length of the statement  "		list = t.Where<U> (predicate).SelectMany<U' IContextual<T>> (subtile => subtile.Select (c => subtile.Contextualize (c))); " is 121.
Long Statement,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ChangeQuadrant,The length of the statement  "	return QuadrantExtension.ChangeQuadrant (c.AsTile ()' source' target).AsQuantified (c.ElementSizeX' c.ElementSizeY' c.ElementStepX' c.ElementStepY' offsetX' offsetY); " is 166.
Long Statement,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ChangeQuadrant,The length of the statement  "	return QuadrantExtension.ChangeQuadrant (c.AsTile ()' source' target).AsQuantified (c.ElementSizeX' c.ElementSizeY' c.ElementStepX' c.ElementStepY' offsetX' offsetY); " is 166.
Long Statement,PA.TileList.Quantified,QuantifiedExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quantified\QuantifiedExtensions.cs,Scale,The length of the statement  "	return new QuantifiedTile<T> (list' list.ElementSizeX * scaleFactor' list.ElementSizeY * scaleFactor' list.ElementStepX * scaleFactor' list.ElementStepY * scaleFactor' list.RefOffsetX * scaleFactor' list.RefOffsetY * scaleFactor); " is 230.
Long Statement,PA.TileList.Quantified,QuantifiedExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quantified\QuantifiedExtensions.cs,GetCoordinateAt,The length of the statement  "	return list.GetArea ().FirstOrDefault (c => list.Corners (c' 1' (xc' yc) => Math.Abs (xc - x) < list.ElementStepX && Math.Abs (yc - y) < list.ElementStepY) == p); " is 162.
Long Statement,PA.TileList.Quantified,QuantifiedExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quantified\QuantifiedExtensions.cs,GetCoordinatesIn,The length of the statement  "	return list.GetArea ().Where (c => list.Corners (c' res' (xc' yc) => xc >= minX && xc <= maxX && yc >= minY && yc <= maxY) >= (strict ? 4 : 1)); " is 144.
Long Statement,PA.TileList.Quantified,QuantifiedExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quantified\QuantifiedExtensions.cs,Crop,The length of the statement  "	return list.Where (c => list.Corners (c' 1' (xc' yc) => xc >= minX && xc <= maxX && yc >= minY && yc <= maxY) >= (strict ? 4 : 1)); " is 131.
Long Statement,PA.TileList.Quantified,QuantifiedExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quantified\QuantifiedExtensions.cs,FirstOrDefault,The length of the statement  "	return list.FirstOrDefault (e => list.Corners (e' 1' (xc' yc) => Math.Abs (xc - x) < list.ElementStepX && Math.Abs (yc - y) < list.ElementStepY) == 4); " is 151.
Magic Number,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,Fill,The following statement contains a magic number: switch (q) {  case Quadrant.Array:  	StartX = 0;  	StartY = 0;  	break;  case Quadrant.TopRight:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f - 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f - 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  case Quadrant.TopLeft:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f - 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f + 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  case Quadrant.BottomLeft:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f + 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f + 0.1);  	break;  case Quadrant.BottomRight:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f + 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f - 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  default:  	throw new NotSupportedException ("Quadrant not supported");  }  
Magic Number,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,Fill,The following statement contains a magic number: switch (q) {  case Quadrant.Array:  	StartX = 0;  	StartY = 0;  	break;  case Quadrant.TopRight:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f - 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f - 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  case Quadrant.TopLeft:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f - 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f + 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  case Quadrant.BottomLeft:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f + 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f + 0.1);  	break;  case Quadrant.BottomRight:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f + 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f - 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  default:  	throw new NotSupportedException ("Quadrant not supported");  }  
Magic Number,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,Fill,The following statement contains a magic number: switch (q) {  case Quadrant.Array:  	StartX = 0;  	StartY = 0;  	break;  case Quadrant.TopRight:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f - 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f - 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  case Quadrant.TopLeft:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f - 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f + 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  case Quadrant.BottomLeft:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f + 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f + 0.1);  	break;  case Quadrant.BottomRight:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f + 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f - 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  default:  	throw new NotSupportedException ("Quadrant not supported");  }  
Magic Number,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,Fill,The following statement contains a magic number: switch (q) {  case Quadrant.Array:  	StartX = 0;  	StartY = 0;  	break;  case Quadrant.TopRight:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f - 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f - 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  case Quadrant.TopLeft:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f - 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f + 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  case Quadrant.BottomLeft:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f + 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f + 0.1);  	break;  case Quadrant.BottomRight:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f + 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f - 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  default:  	throw new NotSupportedException ("Quadrant not supported");  }  
Magic Number,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,Fill,The following statement contains a magic number: switch (q) {  case Quadrant.Array:  	StartX = 0;  	StartY = 0;  	break;  case Quadrant.TopRight:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f - 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f - 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  case Quadrant.TopLeft:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f - 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f + 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  case Quadrant.BottomLeft:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f + 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f + 0.1);  	break;  case Quadrant.BottomRight:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f + 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f - 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  default:  	throw new NotSupportedException ("Quadrant not supported");  }  
Magic Number,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,Fill,The following statement contains a magic number: switch (q) {  case Quadrant.Array:  	StartX = 0;  	StartY = 0;  	break;  case Quadrant.TopRight:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f - 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f - 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  case Quadrant.TopLeft:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f - 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f + 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  case Quadrant.BottomLeft:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f + 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f + 0.1);  	break;  case Quadrant.BottomRight:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f + 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f - 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  default:  	throw new NotSupportedException ("Quadrant not supported");  }  
Magic Number,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,Fill,The following statement contains a magic number: switch (q) {  case Quadrant.Array:  	StartX = 0;  	StartY = 0;  	break;  case Quadrant.TopRight:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f - 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f - 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  case Quadrant.TopLeft:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f - 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f + 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  case Quadrant.BottomLeft:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f + 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f + 0.1);  	break;  case Quadrant.BottomRight:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f + 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f - 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  default:  	throw new NotSupportedException ("Quadrant not supported");  }  
Magic Number,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,Fill,The following statement contains a magic number: switch (q) {  case Quadrant.Array:  	StartX = 0;  	StartY = 0;  	break;  case Quadrant.TopRight:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f - 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f - 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  case Quadrant.TopLeft:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f - 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f + 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  case Quadrant.BottomLeft:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f + 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f + 0.1);  	break;  case Quadrant.BottomRight:  	StartX = Convert.ToInt32 (ShiftX - SizeX / 2f + 0.1);  	StartY = Convert.ToInt32 (ShiftY - SizeY / 2f - 0.1);  	throw new NotImplementedException ("Quadrant not VERIFIED");  default:  	throw new NotSupportedException ("Quadrant not supported");  }  
Magic Number,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,Fill,The following statement contains a magic number: StartX = Convert.ToInt32 (ShiftX - SizeX / 2f - 0.1);  
Magic Number,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,Fill,The following statement contains a magic number: StartY = Convert.ToInt32 (ShiftY - SizeY / 2f - 0.1);  
Magic Number,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,Fill,The following statement contains a magic number: StartX = Convert.ToInt32 (ShiftX - SizeX / 2f - 0.1);  
Magic Number,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,Fill,The following statement contains a magic number: StartY = Convert.ToInt32 (ShiftY - SizeY / 2f + 0.1);  
Magic Number,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,Fill,The following statement contains a magic number: StartX = Convert.ToInt32 (ShiftX - SizeX / 2f + 0.1);  
Magic Number,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,Fill,The following statement contains a magic number: StartY = Convert.ToInt32 (ShiftY - SizeY / 2f + 0.1);  
Magic Number,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,Fill,The following statement contains a magic number: StartX = Convert.ToInt32 (ShiftX - SizeX / 2f + 0.1);  
Magic Number,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,Fill,The following statement contains a magic number: StartY = Convert.ToInt32 (ShiftY - SizeY / 2f - 0.1);  
Magic Number,PA.TileList.Quantified,QuantifiedExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quantified\QuantifiedExtensions.cs,GetScaleFactor,The following statement contains a magic number: return Math.Round (Math.Min (ratioX' ratioY)' 4);  
Magic Number,PA.TileList.Quantified,QuantifiedExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quantified\QuantifiedExtensions.cs,GetCoordinatesIn,The following statement contains a magic number: return list.GetArea ().Where (c => list.Corners (c' res' (xc' yc) => xc >= minX && xc <= maxX && yc >= minY && yc <= maxY) >= (strict ? 4 : 1));  
Magic Number,PA.TileList.Quantified,QuantifiedExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quantified\QuantifiedExtensions.cs,Crop,The following statement contains a magic number: return list.Where (c => list.Corners (c' 1' (xc' yc) => xc >= minX && xc <= maxX && yc >= minY && yc <= maxY) >= (strict ? 4 : 1));  
Magic Number,PA.TileList.Quantified,QuantifiedExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quantified\QuantifiedExtensions.cs,FirstOrDefault,The following statement contains a magic number: return list.FirstOrDefault (e => list.Corners (e' 1' (xc' yc) => Math.Abs (xc - x) < list.ElementStepX && Math.Abs (yc - y) < list.ElementStepY) == 4);  
Magic Number,PA.TileList.Quantified,QuantifiedExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quantified\QuantifiedExtensions.cs,Corners,The following statement contains a magic number: for (int i = 0; i < steps; i++) {  	double testX = ((c.X - tile.Reference.X) - 0.5f + i * resolution) * tile.ElementStepX + tile.RefOffsetX;  	if (i == 0) {  		for (int j = 0; j < steps; j++) {  			testY [j] = ((c.Y - tile.Reference.Y) - 0.5f + j * resolution) * tile.ElementStepY + tile.RefOffsetY;  			testY2 [j] = Math.Pow (testY [j]' 2);  			points += predicate (testX' testY [j]) ? 1 : 0;  		}  	}  	else {  		for (int j = 0; j < steps; j++) {  			points += predicate (testX' testY [j]) ? 1 : 0;  		}  	}  }  
Magic Number,PA.TileList.Quantified,QuantifiedExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quantified\QuantifiedExtensions.cs,Corners,The following statement contains a magic number: if (i == 0) {  	for (int j = 0; j < steps; j++) {  		testY [j] = ((c.Y - tile.Reference.Y) - 0.5f + j * resolution) * tile.ElementStepY + tile.RefOffsetY;  		testY2 [j] = Math.Pow (testY [j]' 2);  		points += predicate (testX' testY [j]) ? 1 : 0;  	}  }  else {  	for (int j = 0; j < steps; j++) {  		points += predicate (testX' testY [j]) ? 1 : 0;  	}  }  
Magic Number,PA.TileList.Quantified,QuantifiedExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quantified\QuantifiedExtensions.cs,Corners,The following statement contains a magic number: for (int j = 0; j < steps; j++) {  	testY [j] = ((c.Y - tile.Reference.Y) - 0.5f + j * resolution) * tile.ElementStepY + tile.RefOffsetY;  	testY2 [j] = Math.Pow (testY [j]' 2);  	points += predicate (testX' testY [j]) ? 1 : 0;  }  
Magic Number,PA.TileList.Quantified,QuantifiedExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quantified\QuantifiedExtensions.cs,Corners,The following statement contains a magic number: testY2 [j] = Math.Pow (testY [j]' 2);  
Missing Default,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ChangeQuadrant,The following switch statement is missing a default case: switch (source) {  case Quadrant.TopRight:  	offsetX = -offsetX;  	//offsetY =offsetY;  	break;  case Quadrant.TopLeft:  	//offsetX = offsetX;  	//offsetY =offsetY;  	break;  case Quadrant.BottomLeft:  	//offsetX = offsetX;  	offsetY = -offsetY;  	break;  case Quadrant.BottomRight:  	offsetX = -offsetX;  	offsetY = -offsetY;  	break;  }  
Missing Default,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ChangeQuadrant,The following switch statement is missing a default case: switch (target) {  case Quadrant.TopRight:  	offsetX = -offsetX;  	//offsetY = offsetY ;  	break;  case Quadrant.TopLeft:  	//offsetX = offsetX ;  	//offsetY = offsetY ;  	break;  case Quadrant.BottomLeft:  	//offsetX = offsetX;  	offsetY = -offsetY;  	break;  case Quadrant.BottomRight:  	offsetX = -offsetX;  	offsetY = -offsetY;  	break;  }  
Missing Default,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ChangeQuadrant,The following switch statement is missing a default case: switch (source) {  case Quadrant.TopRight:  	offsetX = -offsetX;  	//offsetY =offsetY;  	break;  case Quadrant.TopLeft:  	//offsetX = offsetX;  	//offsetY =offsetY;  	break;  case Quadrant.BottomLeft:  	//offsetX = offsetX;  	offsetY = -offsetY;  	break;  case Quadrant.BottomRight:  	offsetX = -offsetX;  	offsetY = -offsetY;  	break;  }  
Missing Default,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ChangeQuadrant,The following switch statement is missing a default case: switch (target) {  case Quadrant.TopRight:  	offsetX = -offsetX;  	//offsetY = offsetY ;  	break;  case Quadrant.TopLeft:  	//offsetX = offsetX ;  	//offsetY = offsetY ;  	break;  case Quadrant.BottomLeft:  	//offsetX = offsetX;  	offsetY = -offsetY;  	break;  case Quadrant.BottomRight:  	offsetX = -offsetX;  	offsetY = -offsetY;  	break;  }  
Missing Default,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ChangeQuadrant,The following switch statement is missing a default case: switch (source) {  case Quadrant.TopRight:  	item.X = -(item.X - a.Min.X - a.SizeX + 1);  	item.Y = (item.Y - a.Min.Y);  	break;  case Quadrant.TopLeft:  	item.X = (item.X - a.Min.X);  	item.Y = (item.Y - a.Min.Y);  	break;  case Quadrant.BottomLeft:  	item.X = (item.X - a.Min.X);  	item.Y = -(item.Y - a.Min.Y - a.SizeY + 1);  	break;  case Quadrant.BottomRight:  	item.X = -(item.X - a.Min.X - a.SizeX + 1);  	item.Y = -(item.Y - a.Min.Y - a.SizeY + 1);  	break;  }  
Missing Default,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ChangeQuadrant,The following switch statement is missing a default case: switch (target) {  case Quadrant.TopRight:  	item.X = -item.X + a.Min.X + a.SizeX - 1;  	item.Y = item.Y + a.Min.Y;  	break;  case Quadrant.TopLeft:  	item.X = item.X + a.Min.X;  	item.Y = item.Y + a.Min.Y;  	break;  case Quadrant.BottomLeft:  	item.X = item.X + a.Min.X;  	item.Y = -item.Y + a.Min.Y + a.SizeY - 1;  	break;  case Quadrant.BottomRight:  	item.X = -item.X + a.Min.X + a.SizeX - 1;  	item.Y = -item.Y + a.Min.Y + a.SizeY - 1;  	break;  }  
Missing Default,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ChangeQuadrant,The following switch statement is missing a default case: switch (source) {  case Quadrant.TopRight:  	item.X = -(item.X - a.Min.X - a.SizeX + 1);  	item.Y = (item.Y - a.Min.Y);  	break;  case Quadrant.TopLeft:  	item.X = (item.X - a.Min.X);  	item.Y = (item.Y - a.Min.Y);  	break;  case Quadrant.BottomLeft:  	item.X = (item.X - a.Min.X);  	item.Y = -(item.Y - a.Min.Y - a.SizeY + 1);  	break;  case Quadrant.BottomRight:  	item.X = -(item.X - a.Min.X - a.SizeX + 1);  	item.Y = -(item.Y - a.Min.Y - a.SizeY + 1);  	break;  }  
Missing Default,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ChangeQuadrant,The following switch statement is missing a default case: switch (target) {  case Quadrant.TopRight:  	item.X = -item.X + a.Min.X + a.SizeX - 1;  	item.Y = item.Y + a.Min.Y;  	break;  case Quadrant.TopLeft:  	item.X = item.X + a.Min.X;  	item.Y = item.Y + a.Min.Y;  	break;  case Quadrant.BottomLeft:  	item.X = item.X + a.Min.X;  	item.Y = -item.Y + a.Min.Y + a.SizeY - 1;  	break;  case Quadrant.BottomRight:  	item.X = -item.X + a.Min.X + a.SizeX - 1;  	item.Y = -item.Y + a.Min.Y + a.SizeY - 1;  	break;  }  
Missing Default,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ChangeQuadrantFromOriginX,The following switch statement is missing a default case: switch (source) {  case Quadrant.TopRight:  	xx = -x;  	//y = y;  	break;  case Quadrant.TopLeft:  	xx = x;  	//y = y;  	break;  case Quadrant.BottomLeft:  	xx = x;  	// y = -y;  	break;  case Quadrant.BottomRight:  	xx = -x;  	//y = -y;  	break;  }  
Missing Default,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ChangeQuadrantFromOriginX,The following switch statement is missing a default case: switch (target) {  case Quadrant.TopRight:  	xx = -x;  	//y = y;  	break;  case Quadrant.TopLeft:  	xx = x;  	//y = y;  	break;  case Quadrant.BottomLeft:  	xx = x;  	// y = -y;  	break;  case Quadrant.BottomRight:  	xx = -x;  	//y = -y;  	break;  }  
Missing Default,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ChangeQuadrantFromOriginY,The following switch statement is missing a default case: switch (source) {  case Quadrant.TopRight:  	//xx = -x;  	yy = y;  	break;  case Quadrant.TopLeft:  	// xx = x;  	yy = y;  	break;  case Quadrant.BottomLeft:  	//xx = x;  	yy = -y;  	break;  case Quadrant.BottomRight:  	// xx = -x;  	yy = -y;  	break;  }  
Missing Default,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ChangeQuadrantFromOriginY,The following switch statement is missing a default case: switch (target) {  case Quadrant.TopRight:  	//xx = -x;  	yy = y;  	break;  case Quadrant.TopLeft:  	// xx = x;  	yy = y;  	break;  case Quadrant.BottomLeft:  	//xx = x;  	yy = -y;  	break;  case Quadrant.BottomRight:  	// xx = -x;  	yy = -y;  	break;  }  
Missing Default,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ToTopLeftPositive,The following switch statement is missing a default case: switch (q) {  case Quadrant.TopRight:  	x = -(x - a.Min.X - a.SizeX + 1);  	y = (y - a.Min.Y);  	break;  case Quadrant.TopLeft:  	x = (x - a.Min.X);  	y = (y - a.Min.Y);  	break;  case Quadrant.BottomLeft:  	x = (x - a.Min.X);  	y = -(y - a.Min.Y - a.SizeY + 1);  	break;  case Quadrant.BottomRight:  	x = -(x - a.Min.X - a.SizeX + 1);  	y = -(y - a.Min.Y - a.SizeY + 1);  	break;  }  
Missing Default,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ToTopLeftPositive,The following switch statement is missing a default case: switch (zl.Quadrant) {  case Quadrant.TopRight:  	x = -(x - a.Min.X - a.SizeX + 1);  	y = (y - a.Min.Y);  	break;  case Quadrant.TopLeft:  	x = (x - a.Min.X);  	y = (y - a.Min.Y);  	break;  case Quadrant.BottomLeft:  	x = (x - a.Min.X);  	y = -(y - a.Min.Y - a.SizeY + 1);  	break;  case Quadrant.BottomRight:  	x = -(x - a.Min.X - a.SizeX + 1);  	y = -(y - a.Min.Y - a.SizeY + 1);  	break;  }  
Missing Default,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,ToTopLeftPositive,The following switch statement is missing a default case: switch (zl.Quadrant) {  case Quadrant.TopRight:  	item.X = -(item.X - a.Min.X - a.SizeX + 1);  	item.Y = (item.Y - a.Min.Y);  	break;  case Quadrant.TopLeft:  	item.X = (item.X - a.Min.X);  	item.Y = (item.Y - a.Min.Y);  	break;  case Quadrant.BottomLeft:  	item.X = (item.X - a.Min.X);  	item.Y = -(item.Y - a.Min.Y - a.SizeY + 1);  	break;  case Quadrant.BottomRight:  	item.X = -(item.X - a.Min.X - a.SizeX + 1);  	item.Y = -(item.Y - a.Min.Y - a.SizeY + 1);  	break;  }  
Missing Default,PA.TileList.Quadrant,QuadrantExtension,C:\repos\perspicapps_pa.toolbox\PA.TileList.Extensions\Quadrant\QuadrantExtension.cs,FromTopLeftPositive,The following switch statement is missing a default case: switch (zl.Quadrant) {  case Quadrant.TopRight:  	x = -x + a.Min.X + a.SizeX - 1;  	y = y + a.Min.Y;  	break;  case Quadrant.TopLeft:  	x = x + a.Min.X;  	y = y + a.Min.Y;  	break;  case Quadrant.BottomLeft:  	x = x + a.Min.X;  	y = -y + a.Min.Y + a.SizeY - 1;  	break;  case Quadrant.BottomRight:  	x = -x + a.Min.X + a.SizeX - 1;  	y = -y + a.Min.Y + a.SizeY - 1;  	break;  }  
