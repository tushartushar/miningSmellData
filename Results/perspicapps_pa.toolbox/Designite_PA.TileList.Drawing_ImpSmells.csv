Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,Cyclomatic complexity of the method is 19
Long Parameter List,PA.TileList.Drawing,ImageExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Core\ImageExtentions.cs,GetImage,The method has 5 parameters.
Long Parameter List,PA.TileList.Drawing,ProfileExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\ProfileExtentions.cs,GetImage,The method has 5 parameters.
Long Parameter List,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The method has 7 parameters.
Long Statement,PA.TileList.Drawing,ImageExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Core\ImageExtentions.cs,GetOrigin,The length of the statement  "	return new PointF ((float)(x * c.ElementStepX - c.RefOffsetX) * scale' (float)(y * c.ElementStepY - c.RefOffsetY) * scale); " is 123.
Long Statement,PA.TileList.Drawing,ImageExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Core\ImageExtentions.cs,GetPortions,The length of the statement  "		//portion => RectangleF inner = new RectangleF(bounds.Left + p.Inner.Left + (e.X - c.Area.Min.X) * p.Outer.Width' bounds.Top + p.Inner.Top + (e.Y - c.Area.Min.Y) * p.Outer.Height' p.Inner.Width' p.Inner.Height); " is 211.
Long Statement,PA.TileList.Drawing,ImageExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Core\ImageExtentions.cs,GetPortions,The length of the statement  "		//RectangleF outer = new RectangleF(bounds.Left + p.Outer.Left + (e.X - c.Area.Min.X) * p.Outer.Width' bounds.Top + p.Outer.Top + (e.Y - c.Area.Min.Y) * p.Outer.Height' p.Outer.Width' p.Outer.Height); " is 200.
Long Statement,PA.TileList.Drawing,ImageExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Core\ImageExtentions.cs,GetSignature,The length of the statement  "		System.Diagnostics.StackFrame sf = st.GetFrames ().FirstOrDefault (s => s.GetMethod ().GetCustomAttributes (false).Any (i => i.ToString ().EndsWith ("TestMethodAttribute"))); " is 174.
Long Statement,PA.TileList.Drawing,ProfileExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\ProfileExtentions.cs,GetImage,The length of the statement  "	RectangleF outerZone = new RectangleF (image.Outer.X * scale' image.Outer.Y * scale' image.Outer.Width * scale' image.Outer.Height * scale); " is 140.
Long Statement,PA.TileList.Drawing,ProfileExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\ProfileExtentions.cs,GetImage,The length of the statement  "	RectangleF innerZone = new RectangleF (image.Inner.X * scale' image.Inner.Y * scale' image.Inner.Width * scale' image.Inner.Height * scale); " is 140.
Long Statement,PA.TileList.Drawing,ProfileExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\ProfileExtentions.cs,GetImage,The length of the statement  "				g.DrawArc (Pens.Red' offsetX - lastRadius' offsetY - lastRadius' lastRadius * 2f' lastRadius * 2f' (float)ad' (float)sw); " is 121.
Long Statement,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The length of the statement  "					g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' offset - size' position + offset); " is 137.
Long Statement,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The length of the statement  "					g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' position + offset' offset - size); " is 137.
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: for (int i = 0; i < steps.Length; i++) {  	float start = 0;  	float step = steps [i];  	float size = (i + 1f) / scale;  	while (start < min) {  		start += step;  	}  	while (start > min) {  		start -= step;  	}  	for (float position = start + step; position < max; position += step) {  		switch (d) {  		case Direction.Vertical:  			if (i == 0) {  				g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' offset - size' position + offset);  			}  			g.DrawLine (Pens.Black' offset - 10 * size' position + offset' offset + 10 * size' position + offset);  			break;  		case Direction.Horizontal:  			if (i == 0) {  				g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' position + offset' offset - size);  			}  			g.DrawLine (Pens.Black' position + offset' offset - 10 * size' position + offset' offset + 10 * size);  			break;  		}  	}  }  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: for (int i = 0; i < steps.Length; i++) {  	float start = 0;  	float step = steps [i];  	float size = (i + 1f) / scale;  	while (start < min) {  		start += step;  	}  	while (start > min) {  		start -= step;  	}  	for (float position = start + step; position < max; position += step) {  		switch (d) {  		case Direction.Vertical:  			if (i == 0) {  				g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' offset - size' position + offset);  			}  			g.DrawLine (Pens.Black' offset - 10 * size' position + offset' offset + 10 * size' position + offset);  			break;  		case Direction.Horizontal:  			if (i == 0) {  				g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' position + offset' offset - size);  			}  			g.DrawLine (Pens.Black' position + offset' offset - 10 * size' position + offset' offset + 10 * size);  			break;  		}  	}  }  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: for (int i = 0; i < steps.Length; i++) {  	float start = 0;  	float step = steps [i];  	float size = (i + 1f) / scale;  	while (start < min) {  		start += step;  	}  	while (start > min) {  		start -= step;  	}  	for (float position = start + step; position < max; position += step) {  		switch (d) {  		case Direction.Vertical:  			if (i == 0) {  				g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' offset - size' position + offset);  			}  			g.DrawLine (Pens.Black' offset - 10 * size' position + offset' offset + 10 * size' position + offset);  			break;  		case Direction.Horizontal:  			if (i == 0) {  				g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' position + offset' offset - size);  			}  			g.DrawLine (Pens.Black' position + offset' offset - 10 * size' position + offset' offset + 10 * size);  			break;  		}  	}  }  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: for (int i = 0; i < steps.Length; i++) {  	float start = 0;  	float step = steps [i];  	float size = (i + 1f) / scale;  	while (start < min) {  		start += step;  	}  	while (start > min) {  		start -= step;  	}  	for (float position = start + step; position < max; position += step) {  		switch (d) {  		case Direction.Vertical:  			if (i == 0) {  				g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' offset - size' position + offset);  			}  			g.DrawLine (Pens.Black' offset - 10 * size' position + offset' offset + 10 * size' position + offset);  			break;  		case Direction.Horizontal:  			if (i == 0) {  				g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' position + offset' offset - size);  			}  			g.DrawLine (Pens.Black' position + offset' offset - 10 * size' position + offset' offset + 10 * size);  			break;  		}  	}  }  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: for (int i = 0; i < steps.Length; i++) {  	float start = 0;  	float step = steps [i];  	float size = (i + 1f) / scale;  	while (start < min) {  		start += step;  	}  	while (start > min) {  		start -= step;  	}  	for (float position = start + step; position < max; position += step) {  		switch (d) {  		case Direction.Vertical:  			if (i == 0) {  				g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' offset - size' position + offset);  			}  			g.DrawLine (Pens.Black' offset - 10 * size' position + offset' offset + 10 * size' position + offset);  			break;  		case Direction.Horizontal:  			if (i == 0) {  				g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' position + offset' offset - size);  			}  			g.DrawLine (Pens.Black' position + offset' offset - 10 * size' position + offset' offset + 10 * size);  			break;  		}  	}  }  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: for (int i = 0; i < steps.Length; i++) {  	float start = 0;  	float step = steps [i];  	float size = (i + 1f) / scale;  	while (start < min) {  		start += step;  	}  	while (start > min) {  		start -= step;  	}  	for (float position = start + step; position < max; position += step) {  		switch (d) {  		case Direction.Vertical:  			if (i == 0) {  				g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' offset - size' position + offset);  			}  			g.DrawLine (Pens.Black' offset - 10 * size' position + offset' offset + 10 * size' position + offset);  			break;  		case Direction.Horizontal:  			if (i == 0) {  				g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' position + offset' offset - size);  			}  			g.DrawLine (Pens.Black' position + offset' offset - 10 * size' position + offset' offset + 10 * size);  			break;  		}  	}  }  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: for (float position = start + step; position < max; position += step) {  	switch (d) {  	case Direction.Vertical:  		if (i == 0) {  			g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' offset - size' position + offset);  		}  		g.DrawLine (Pens.Black' offset - 10 * size' position + offset' offset + 10 * size' position + offset);  		break;  	case Direction.Horizontal:  		if (i == 0) {  			g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' position + offset' offset - size);  		}  		g.DrawLine (Pens.Black' position + offset' offset - 10 * size' position + offset' offset + 10 * size);  		break;  	}  }  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: for (float position = start + step; position < max; position += step) {  	switch (d) {  	case Direction.Vertical:  		if (i == 0) {  			g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' offset - size' position + offset);  		}  		g.DrawLine (Pens.Black' offset - 10 * size' position + offset' offset + 10 * size' position + offset);  		break;  	case Direction.Horizontal:  		if (i == 0) {  			g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' position + offset' offset - size);  		}  		g.DrawLine (Pens.Black' position + offset' offset - 10 * size' position + offset' offset + 10 * size);  		break;  	}  }  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: for (float position = start + step; position < max; position += step) {  	switch (d) {  	case Direction.Vertical:  		if (i == 0) {  			g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' offset - size' position + offset);  		}  		g.DrawLine (Pens.Black' offset - 10 * size' position + offset' offset + 10 * size' position + offset);  		break;  	case Direction.Horizontal:  		if (i == 0) {  			g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' position + offset' offset - size);  		}  		g.DrawLine (Pens.Black' position + offset' offset - 10 * size' position + offset' offset + 10 * size);  		break;  	}  }  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: for (float position = start + step; position < max; position += step) {  	switch (d) {  	case Direction.Vertical:  		if (i == 0) {  			g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' offset - size' position + offset);  		}  		g.DrawLine (Pens.Black' offset - 10 * size' position + offset' offset + 10 * size' position + offset);  		break;  	case Direction.Horizontal:  		if (i == 0) {  			g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' position + offset' offset - size);  		}  		g.DrawLine (Pens.Black' position + offset' offset - 10 * size' position + offset' offset + 10 * size);  		break;  	}  }  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: for (float position = start + step; position < max; position += step) {  	switch (d) {  	case Direction.Vertical:  		if (i == 0) {  			g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' offset - size' position + offset);  		}  		g.DrawLine (Pens.Black' offset - 10 * size' position + offset' offset + 10 * size' position + offset);  		break;  	case Direction.Horizontal:  		if (i == 0) {  			g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' position + offset' offset - size);  		}  		g.DrawLine (Pens.Black' position + offset' offset - 10 * size' position + offset' offset + 10 * size);  		break;  	}  }  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: for (float position = start + step; position < max; position += step) {  	switch (d) {  	case Direction.Vertical:  		if (i == 0) {  			g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' offset - size' position + offset);  		}  		g.DrawLine (Pens.Black' offset - 10 * size' position + offset' offset + 10 * size' position + offset);  		break;  	case Direction.Horizontal:  		if (i == 0) {  			g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' position + offset' offset - size);  		}  		g.DrawLine (Pens.Black' position + offset' offset - 10 * size' position + offset' offset + 10 * size);  		break;  	}  }  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: switch (d) {  case Direction.Vertical:  	if (i == 0) {  		g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' offset - size' position + offset);  	}  	g.DrawLine (Pens.Black' offset - 10 * size' position + offset' offset + 10 * size' position + offset);  	break;  case Direction.Horizontal:  	if (i == 0) {  		g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' position + offset' offset - size);  	}  	g.DrawLine (Pens.Black' position + offset' offset - 10 * size' position + offset' offset + 10 * size);  	break;  }  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: switch (d) {  case Direction.Vertical:  	if (i == 0) {  		g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' offset - size' position + offset);  	}  	g.DrawLine (Pens.Black' offset - 10 * size' position + offset' offset + 10 * size' position + offset);  	break;  case Direction.Horizontal:  	if (i == 0) {  		g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' position + offset' offset - size);  	}  	g.DrawLine (Pens.Black' position + offset' offset - 10 * size' position + offset' offset + 10 * size);  	break;  }  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: switch (d) {  case Direction.Vertical:  	if (i == 0) {  		g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' offset - size' position + offset);  	}  	g.DrawLine (Pens.Black' offset - 10 * size' position + offset' offset + 10 * size' position + offset);  	break;  case Direction.Horizontal:  	if (i == 0) {  		g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' position + offset' offset - size);  	}  	g.DrawLine (Pens.Black' position + offset' offset - 10 * size' position + offset' offset + 10 * size);  	break;  }  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: switch (d) {  case Direction.Vertical:  	if (i == 0) {  		g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' offset - size' position + offset);  	}  	g.DrawLine (Pens.Black' offset - 10 * size' position + offset' offset + 10 * size' position + offset);  	break;  case Direction.Horizontal:  	if (i == 0) {  		g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' position + offset' offset - size);  	}  	g.DrawLine (Pens.Black' position + offset' offset - 10 * size' position + offset' offset + 10 * size);  	break;  }  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: switch (d) {  case Direction.Vertical:  	if (i == 0) {  		g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' offset - size' position + offset);  	}  	g.DrawLine (Pens.Black' offset - 10 * size' position + offset' offset + 10 * size' position + offset);  	break;  case Direction.Horizontal:  	if (i == 0) {  		g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' position + offset' offset - size);  	}  	g.DrawLine (Pens.Black' position + offset' offset - 10 * size' position + offset' offset + 10 * size);  	break;  }  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: switch (d) {  case Direction.Vertical:  	if (i == 0) {  		g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' offset - size' position + offset);  	}  	g.DrawLine (Pens.Black' offset - 10 * size' position + offset' offset + 10 * size' position + offset);  	break;  case Direction.Horizontal:  	if (i == 0) {  		g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' position + offset' offset - size);  	}  	g.DrawLine (Pens.Black' position + offset' offset - 10 * size' position + offset' offset + 10 * size);  	break;  }  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: if (i == 0) {  	g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' offset - size' position + offset);  }  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' offset - size' position + offset);  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: g.DrawLine (Pens.Black' offset - 10 * size' position + offset' offset + 10 * size' position + offset);  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: g.DrawLine (Pens.Black' offset - 10 * size' position + offset' offset + 10 * size' position + offset);  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: if (i == 0) {  	g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' position + offset' offset - size);  }  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' position + offset' offset - size);  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: g.DrawLine (Pens.Black' position + offset' offset - 10 * size' position + offset' offset + 10 * size);  
Magic Number,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following statement contains a magic number: g.DrawLine (Pens.Black' position + offset' offset - 10 * size' position + offset' offset + 10 * size);  
Missing Default,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following switch statement is missing a default case: switch (d) {  case Direction.Vertical:  	g.DrawLine (Pens.Black' min' 0' max' 0);  	break;  case Direction.Horizontal:  	g.DrawLine (Pens.Black' 0' min' 0' max);  	break;  }  
Missing Default,PA.TileList.Drawing,RulersExtentions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Drawing\Extra\RulersExtentions.cs,DrawSteps,The following switch statement is missing a default case: switch (d) {  case Direction.Vertical:  	if (i == 0) {  		g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' offset - size' position + offset);  	}  	g.DrawLine (Pens.Black' offset - 10 * size' position + offset' offset + 10 * size' position + offset);  	break;  case Direction.Horizontal:  	if (i == 0) {  		g.DrawString (position.ToString ()' new Font (FontFamily.GenericSansSerif' 10 / scale)' Brushes.Black' position + offset' offset - size);  	}  	g.DrawLine (Pens.Black' position + offset' offset - 10 * size' position + offset' offset + 10 * size);  	break;  }  
