Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,PA.TileList.Geometrics.Circular,CircularExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Circular\CircularExtensions.cs,Points,The method has 7 parameters.
Long Parameter List,PA.TileList.Geometrics.Circular,CircularExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Circular\CircularExtensions.cs,Points,The method has 8 parameters.
Long Parameter List,PA.TileList.Geometrics.Circular,CircularExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Circular\CircularExtensions.cs,Points,The method has 5 parameters.
Long Parameter List,PA.TileList.Geometrics.Circular,CircularExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Circular\CircularExtensions.cs,Take,The method has 5 parameters.
Long Parameter List,PA.TileList.Geometrics.Circular,CircularProfile,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Circular\CircularProfile.cs,AddProfileFlat,The method has 5 parameters.
Long Parameter List,PA.TileList.Geometrics,PolygonExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Extensions\PolygonExtensions.cs,GetBiggestArea,The method has 8 parameters.
Long Statement,PA.TileList.Geometrics.Circular,CircularExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Circular\CircularExtensions.cs,Take,The length of the statement  "		if (config.SelectionType.HasFlag (CircularConfiguration.SelectionFlag.Under) && 0 < c.Value && c.Value < config.MinSurface) { " is 125.
Long Statement,PA.TileList.Geometrics,CoordinateExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Extensions\CoordinateExtensions.cs,Translate,The length of the statement  "	return CoordinateExtensions.Translate<T> (t.AsTile ()' source).AsQuantified (t.ElementSizeX' t.ElementSizeY' t.ElementStepX' t.ElementStepY' t.RefOffsetX' t.RefOffsetY); " is 169.
Long Statement,PA.TileList.Geometrics,CoordinateExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Extensions\CoordinateExtensions.cs,Translate,The length of the statement  "	return CoordinateExtensions.Translate<T> (t.AsTile ()' source).AsQuantified (t.ElementSizeX' t.ElementSizeY' t.ElementStepX' t.ElementStepY' t.RefOffsetX' t.RefOffsetY); " is 169.
Long Statement,PA.TileList.Geometrics,Segment,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Segment.cs,Contains,The length of the statement  "	return p.X <= Math.Max (this.Origin.X' this.Point.X) && p.X >= Math.Min (this.Origin.X' this.Point.X) && p.Y <= Math.Max (this.Origin.Y' this.Point.Y) && p.Y >= Math.Min (this.Origin.Y' this.Point.Y); " is 200.
Magic Number,PA.TileList.Geometrics.Circular,CircularExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Circular\CircularExtensions.cs,Distance2,The following statement contains a magic number: return Math.Pow (testX' 2) + Math.Pow (testY' 2);  
Magic Number,PA.TileList.Geometrics.Circular,CircularExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Circular\CircularExtensions.cs,Distance2,The following statement contains a magic number: return Math.Pow (testX' 2) + Math.Pow (testY' 2);  
Magic Number,PA.TileList.Geometrics.Circular,CircularExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Circular\CircularExtensions.cs,Points,The following statement contains a magic number: foreach (T c in tile.WhereOrDefault (predicate)) {  	//				CircularProfile.ProfileStep step = first;  	//				bool quickMode = true;  	//  	//				// Quick check with 4 corners  	//				int quick = tile.Points (c' 2' 1' (angle' r2) => {  	//					if (r2 > maxRadius2) {  	//						return false;  	//					}  	//  	//					if (r2 < minRadius2) {  	//						return true;  	//					}  	//  	//					CircularProfile.ProfileStep last = profile.LastOrDefault (ps => ps.Angle < angle) ?? first;  	//  	//					if (step != last) {  	//						quickMode = step.Equals (first);  	//						step = last;  	//					}  	//  	//					return config.SelectionType.HasFlag (CircularConfiguration.SelectionFlag.Under);  	//				});  	//  	//				if (quickMode) {  	//					// Certainly All Outside  	//					if (quick == 0) {  	//						yield return new KeyValuePair<T' int> (c' 0);  	//						continue;  	//					}  	//  	//					// Certainly All Inside  	//					if (quick == 4) {  	//						yield return new KeyValuePair<T' int> (c' (int)config.MaxSurface);  	//						continue;  	//					}  	//				}  	// Full check on all surface  	int full = tile.Points (c' config.Steps' config.Resolution' (angle' r2) =>  {  		if (r2 > maxRadius2) {  			return false;  		}  		if (r2 < minRadius2) {  			return true;  		}  		CircularProfile.ProfileStep last = profile.LastOrDefault (ps => ps.Angle < angle) ?? first;  		return r2 < Math.Pow ((double)last.Radius' 2);  	});  	yield return new KeyValuePair<T' int> (c' full);  }  
Magic Number,PA.TileList.Geometrics.Circular,CircularExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Circular\CircularExtensions.cs,Points,The following statement contains a magic number: return r2 < Math.Pow ((double)last.Radius' 2);  
Magic Number,PA.TileList.Geometrics.Circular,CircularExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Circular\CircularExtensions.cs,Points,The following statement contains a magic number: for (int i = 0; i < steps; i++) {  	double testX = ((c.X - tile.Reference.X) - 0.5f + i * resolution) * tile.ElementStepX + tile.RefOffsetX;  	double testX2 = Math.Pow (testX' 2);  	for (int j = 0; j < steps; j++) {  		// Work in topleft quadrant by default  		if (i == 0) {  			testY [j] = -(((c.Y - tile.Reference.Y) - 0.5f + j * resolution) * tile.ElementStepY + tile.RefOffsetY);  			testY2 [j] = Math.Pow (testY [j]' 2);  		}  		// X' Y' X2+Y2 (=radius2)  		points += predicate (testX' testY [j]' testX2 + testY2 [j]) ? 1 : 0;  	}  }  
Magic Number,PA.TileList.Geometrics.Circular,CircularExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Circular\CircularExtensions.cs,Points,The following statement contains a magic number: for (int i = 0; i < steps; i++) {  	double testX = ((c.X - tile.Reference.X) - 0.5f + i * resolution) * tile.ElementStepX + tile.RefOffsetX;  	double testX2 = Math.Pow (testX' 2);  	for (int j = 0; j < steps; j++) {  		// Work in topleft quadrant by default  		if (i == 0) {  			testY [j] = -(((c.Y - tile.Reference.Y) - 0.5f + j * resolution) * tile.ElementStepY + tile.RefOffsetY);  			testY2 [j] = Math.Pow (testY [j]' 2);  		}  		// X' Y' X2+Y2 (=radius2)  		points += predicate (testX' testY [j]' testX2 + testY2 [j]) ? 1 : 0;  	}  }  
Magic Number,PA.TileList.Geometrics.Circular,CircularExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Circular\CircularExtensions.cs,Points,The following statement contains a magic number: for (int j = 0; j < steps; j++) {  	// Work in topleft quadrant by default  	if (i == 0) {  		testY [j] = -(((c.Y - tile.Reference.Y) - 0.5f + j * resolution) * tile.ElementStepY + tile.RefOffsetY);  		testY2 [j] = Math.Pow (testY [j]' 2);  	}  	// X' Y' X2+Y2 (=radius2)  	points += predicate (testX' testY [j]' testX2 + testY2 [j]) ? 1 : 0;  }  
Magic Number,PA.TileList.Geometrics.Circular,CircularExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Circular\CircularExtensions.cs,Points,The following statement contains a magic number: if (i == 0) {  	testY [j] = -(((c.Y - tile.Reference.Y) - 0.5f + j * resolution) * tile.ElementStepY + tile.RefOffsetY);  	testY2 [j] = Math.Pow (testY [j]' 2);  }  
Magic Number,PA.TileList.Geometrics.Circular,CircularExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Circular\CircularExtensions.cs,Points,The following statement contains a magic number: testY2 [j] = Math.Pow (testY [j]' 2);  
Magic Number,PA.TileList.Geometrics.Circular,CircularProfile,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Circular\CircularProfile.cs,GetFirst,The following statement contains a magic number: while (last.Angle > -Math.PI) {  	last.Angle = last.Angle - 2 * Math.PI;  }  
Magic Number,PA.TileList.Geometrics.Circular,CircularProfile,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Circular\CircularProfile.cs,GetFirst,The following statement contains a magic number: last.Angle = last.Angle - 2 * Math.PI;  
Magic Number,PA.TileList.Geometrics,PolygonExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Extensions\PolygonExtensions.cs,IsInside,The following statement contains a magic number: if (polygon.Length < 3) {  	throw new InvalidOperationException ("At least 3 Coordinates needed in polygon");  }  
Magic Number,PA.TileList.Geometrics,PolygonExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Extensions\PolygonExtensions.cs,IsInside,The following statement contains a magic number: return count % 2 == 1;  
Magic Number,PA.TileList.Geometrics,CoordinateExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Extensions\CoordinateExtensions.cs,DistanceTo,The following statement contains a magic number: return Math.Sqrt (Math.Pow (q.X - p.X' 2) + Math.Pow (q.Y - p.Y' 2));  
Magic Number,PA.TileList.Geometrics,CoordinateExtensions,C:\repos\perspicapps_pa.toolbox\PA.TileList.Geometrics\Extensions\CoordinateExtensions.cs,DistanceTo,The following statement contains a magic number: return Math.Sqrt (Math.Pow (q.X - p.X' 2) + Math.Pow (q.Y - p.Y' 2));  
