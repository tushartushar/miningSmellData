Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Hyperletter.Channel,LetterReceiver,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Channel\LetterReceiver.cs,HandleReceived,Cyclomatic complexity of the method is 9
Long Parameter List,Hyperletter.Channel,InboundChannel,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Channel\InboundChannel.cs,InboundChannel,The method has 5 parameters. Parameters: options' socket' binding' letterDeserializer' factory
Long Statement,Hyperletter.Batch,BatchChannel,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Batch\BatchChannel.cs,TrySendBatch,The length of the statement  "                if(!_batchBuilder.IsEmpty && (timeout || _batchBuilder.IsFull || _stopwatch.ElapsedMilliseconds >= _options.MaxExtend.TotalMilliseconds)) { " is 139.
Long Statement,Hyperletter,HyperSocket,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\HyperSocket.cs,ChannelDisconnecting,The length of the statement  "            Disconnecting?.Invoke(this' new DisconnectingEventArgs { Binding = channel.Binding' Reason = shutdownReason' RemoteNodeId = channel.RemoteNodeId' Socket = this }); " is 163.
Long Statement,Hyperletter,HyperSocket,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\HyperSocket.cs,ChannelInitialized,The length of the statement  "            Initialized?.Invoke(this' new InitializedEventArgs { Binding = channel.Binding' Socket = this' RemoteNodeId = channel.RemoteNodeId }); " is 134.
Long Statement,Hyperletter,HyperSocket,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\HyperSocket.cs,ChannelDisconnected,The length of the statement  "            Disconnected?.Invoke(this' new DisconnectedEventArgs { Binding = binding' Reason = reason' Socket = this' RemoteNodeId = channel.RemoteNodeId }); " is 145.
Long Statement,Hyperletter,HyperSocket,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\HyperSocket.cs,ChannelSent,The length of the statement  "            Sent?.Invoke(letter' new SentEventArgs { Binding = channel.Binding' Socket = this' RemoteNodeId = channel.RemoteNodeId }); " is 122.
Long Statement,Hyperletter.Channel,AbstractChannel,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Channel\AbstractChannel.cs,LockedConnected,The length of the statement  "            InternalEnqueue(new Letter.Letter { Type = LetterType.Initialize' Options = LetterOptions.Ack' Parts = new[] { _options.NodeId.ToByteArray() } }); " is 146.
Long Statement,Hyperletter.Channel,AbstractChannel,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Channel\AbstractChannel.cs,ReceiverReceived,The length of the statement  "                    if(_options.Notification.ReceivedNotifyOnAllAckStates && (letterType == LetterType.User || letterType == LetterType.Batch)) " is 123.
Long Statement,Hyperletter.IoC,DependencyResolver<TService>,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\IoC\DependencyResolver.cs,BuildArguments,The length of the statement  "                else if (parameters.Count > parameterIndex && p.ParameterType.GetTypeInfo().IsInstanceOfType(parameters[parameterIndex])) " is 121.
Long Statement,Hyperletter.IoC,DependencyResolver<TService>,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\IoC\DependencyResolver.cs,BuildArguments,The length of the statement  "                        throw new ResolveException("Cant find parameter " + p.Name + " (" + p.ParameterType + ") in arguments or registerd in container"); " is 130.
Complex Conditional,Hyperletter.Batch,BatchChannel,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Batch\BatchChannel.cs,TrySendBatch,The conditional expression  "!_batchBuilder.IsEmpty && (timeout || _batchBuilder.IsFull || _stopwatch.ElapsedMilliseconds >= _options.MaxExtend.TotalMilliseconds)"  is complex.
Complex Conditional,Hyperletter.Channel,AbstractChannel,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Channel\AbstractChannel.cs,WaitForTranseiviersToShutDown,The conditional expression  "(_transmitter != null && _transmitter.Sending) || (_receiver != null && _receiver.Receiving)"  is complex.
Complex Conditional,Hyperletter.IoC,DependencyResolver<TService>,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\IoC\DependencyResolver.cs,IsFunc,The conditional expression  "generic == typeof(Func<>)                 || generic == typeof(Func<'>)                 || generic == typeof(Func<''>)                 || generic == typeof(Func<'''>)                 || generic == typeof(Func<''''>)                 || generic == typeof(Func<'''''>)                 || generic == typeof(Func<''''''>)                 || generic == typeof(Func<'''''''>)                 || generic == typeof(Func<''''''''>)                 || generic == typeof(Func<'''''''''>)                 || generic == typeof(Func<''''''''''>)                 || generic == typeof(Func<'''''''''''>)                 || generic == typeof(Func<''''''''''''>)                 || generic == typeof(Func<'''''''''''''>)                 || generic == typeof(Func<''''''''''''''>)                 || generic == typeof(Func<'''''''''''''''>)                 || generic == typeof(Func<''''''''''''''''>)"  is complex.
Empty Catch Block,Hyperletter,LetterDispatcher,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\LetterDispatcher.cs,SendTask,The method has an empty catch block.
Empty Catch Block,Hyperletter,SocketListener,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\SocketListener.cs,Stop,The method has an empty catch block.
Empty Catch Block,Hyperletter,SocketListener,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\SocketListener.cs,EndAccept,The method has an empty catch block.
Empty Catch Block,Hyperletter.Channel,AbstractChannel,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Channel\AbstractChannel.cs,DisconnectSocket,The method has an empty catch block.
Magic Number,Hyperletter,Binding,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Binding.cs,GetHashCode,The following statement contains a magic number: return (IpAddress.GetHashCode()*397) ^ Port;
Magic Number,Hyperletter,SocketListener,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\SocketListener.cs,Start,The following statement contains a magic number: _socket.Listen(20);
Magic Number,Hyperletter,SocketOptions,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\SocketOptions.cs,SocketOptions,The following statement contains a magic number: Batch = new BatchOptions {Enabled = true' Extend = TimeSpan.FromMilliseconds(100)' MaxExtend = TimeSpan.FromSeconds(1)' MaxLetters = 4000};
Magic Number,Hyperletter,SocketOptions,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\SocketOptions.cs,SocketOptions,The following statement contains a magic number: Batch = new BatchOptions {Enabled = true' Extend = TimeSpan.FromMilliseconds(100)' MaxExtend = TimeSpan.FromSeconds(1)' MaxLetters = 4000};
Magic Number,Hyperletter,SocketOptions,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\SocketOptions.cs,SocketOptions,The following statement contains a magic number: Heartbeat = new HeartbeatOptions {Interval = 1000};
Magic Number,Hyperletter,SocketOptions,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\SocketOptions.cs,SocketOptions,The following statement contains a magic number: ReconnectInterval = TimeSpan.FromMilliseconds(1000);
Magic Number,Hyperletter,SocketOptions,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\SocketOptions.cs,SocketOptions,The following statement contains a magic number: ShutdownWait = TimeSpan.FromMilliseconds(1500);
Magic Number,Hyperletter,SocketOptions,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\SocketOptions.cs,SocketOptions,The following statement contains a magic number: MaximumInitializeTime = TimeSpan.FromMilliseconds(4000);
Magic Number,Hyperletter.Channel,AbstractChannel,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Channel\AbstractChannel.cs,HandleInitialize,The following statement contains a magic number: Lock(() => {                  if (Interlocked.Increment(ref _initalizationCount) == 2)                      ChannelInitialized?.Invoke(this);                                   });
Magic Number,Hyperletter.Channel,AbstractChannel,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Channel\AbstractChannel.cs,Heartbeat,The following statement contains a magic number: _initalizationCount != 2
Magic Number,Hyperletter.Channel,AbstractChannel,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Channel\AbstractChannel.cs,WaitForTranseiviersToShutDown,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,Hyperletter.Channel,AbstractChannel,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Channel\AbstractChannel.cs,ResetHeartbeatTimer,The following statement contains a magic number: _lastAction > 10000000
Magic Number,Hyperletter.Channel,LetterReceiver,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Channel\LetterReceiver.cs,HandleReceived,The following statement contains a magic number: read < 4
Magic Number,Hyperletter.Channel,LetterReceiver,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Channel\LetterReceiver.cs,HandleReceived,The following statement contains a magic number: !_initalized && (_currentLength != 30 && _currentLength != 10)
Magic Number,Hyperletter.Channel,LetterReceiver,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Channel\LetterReceiver.cs,HandleReceived,The following statement contains a magic number: !_initalized && (_currentLength != 30 && _currentLength != 10)
Magic Number,Hyperletter.Channel,LetterReceiver,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Channel\LetterReceiver.cs,ReadNewLetterLength,The following statement contains a magic number: bufferPosition < buffer.Length && _lengthPosition < 4
Magic Number,Hyperletter.Channel,LetterReceiver,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Channel\LetterReceiver.cs,ReadNewLetterLength,The following statement contains a magic number: _lengthPosition != 4
Magic Number,Hyperletter.Channel,LetterReceiver,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Channel\LetterReceiver.cs,ReadNewLetterLength,The following statement contains a magic number: bytesToRead < 4 || _lengthPosition != 0
Magic Number,Hyperletter.Channel,LetterReceiver,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Channel\LetterReceiver.cs,ReadNewLetterLength,The following statement contains a magic number: return 4;
Magic Number,Hyperletter.Letter,LetterDeserializer,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Letter\LetterSerializer.cs,Deserialize,The following statement contains a magic number: int position = 4;
Magic Number,Hyperletter.Letter,LetterDeserializer,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Letter\LetterSerializer.cs,Deserialize,The following statement contains a magic number: letter.UniqueId = new Guid(GetByteRange(serializedLetter' position' 16));
Magic Number,Hyperletter.Letter,LetterDeserializer,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Letter\LetterSerializer.cs,Deserialize,The following statement contains a magic number: position += 16;
Magic Number,Hyperletter.Letter,LetterDeserializer,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Letter\LetterSerializer.cs,ReadParts,The following statement contains a magic number: position += 4;
Magic Number,Hyperletter.Letter,LetterDeserializer,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Letter\LetterSerializer.cs,ReadParts,The following statement contains a magic number: position += 4;
Magic Number,Hyperletter.Letter,LetterDeserializer,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Letter\LetterSerializer.cs,GetLength,The following statement contains a magic number: return buffer[position] | (buffer[position + 1] << 8) | (buffer[position + 2] << 16) | (buffer[position + 3] << 24);
Magic Number,Hyperletter.Letter,LetterDeserializer,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Letter\LetterSerializer.cs,GetLength,The following statement contains a magic number: return buffer[position] | (buffer[position + 1] << 8) | (buffer[position + 2] << 16) | (buffer[position + 3] << 24);
Magic Number,Hyperletter.Letter,LetterDeserializer,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Letter\LetterSerializer.cs,GetLength,The following statement contains a magic number: return buffer[position] | (buffer[position + 1] << 8) | (buffer[position + 2] << 16) | (buffer[position + 3] << 24);
Magic Number,Hyperletter.Letter,LetterDeserializer,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Letter\LetterSerializer.cs,GetLength,The following statement contains a magic number: return buffer[position] | (buffer[position + 1] << 8) | (buffer[position + 2] << 16) | (buffer[position + 3] << 24);
Magic Number,Hyperletter.Letter,LetterDeserializer,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Letter\LetterSerializer.cs,GetLength,The following statement contains a magic number: return buffer[position] | (buffer[position + 1] << 8) | (buffer[position + 2] << 16) | (buffer[position + 3] << 24);
Magic Number,Hyperletter.Letter,LetterSerializer,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Letter\LetterSerializer.cs,WriteTotalLength,The following statement contains a magic number: ms.Write(Bytes((int) ms.Length)' 0' 4);
Magic Number,Hyperletter.Letter,LetterSerializer,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Letter\LetterSerializer.cs,WriteMetadata,The following statement contains a magic number: ms.Position = 4;
Magic Number,Hyperletter.Letter,LetterSerializer,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Letter\LetterSerializer.cs,WriteMetadata,The following statement contains a magic number: ms.Write(letter.UniqueId.ToByteArray()' 0' 16);
Magic Number,Hyperletter.Letter,LetterSerializer,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Letter\LetterSerializer.cs,WriteParts,The following statement contains a magic number: ms.Write(Bytes(letter.Parts == null ? 0x000000 : letter.Parts.Length)' 0' 4);
Magic Number,Hyperletter.Letter,LetterSerializer,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Letter\LetterSerializer.cs,WritePart,The following statement contains a magic number: ms.Write(Bytes(address.Length)' 0' 4);
Magic Number,Hyperletter.Letter,LetterSerializer,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Letter\LetterSerializer.cs,Bytes,The following statement contains a magic number: var bytes = new byte[4];
Magic Number,Hyperletter.Letter,LetterSerializer,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Letter\LetterSerializer.cs,Bytes,The following statement contains a magic number: bytes[3] = (byte) (parts >> 24);
Magic Number,Hyperletter.Letter,LetterSerializer,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Letter\LetterSerializer.cs,Bytes,The following statement contains a magic number: bytes[3] = (byte) (parts >> 24);
Magic Number,Hyperletter.Letter,LetterSerializer,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Letter\LetterSerializer.cs,Bytes,The following statement contains a magic number: bytes[2] = (byte) (parts >> 16);
Magic Number,Hyperletter.Letter,LetterSerializer,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Letter\LetterSerializer.cs,Bytes,The following statement contains a magic number: bytes[2] = (byte) (parts >> 16);
Magic Number,Hyperletter.Letter,LetterSerializer,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Letter\LetterSerializer.cs,Bytes,The following statement contains a magic number: bytes[1] = (byte) (parts >> 8);
Magic Number,Hyperletter.Utility,QueueDictionary<T>,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Utility\QueueDictionary.cs,TryTake,The following statement contains a magic number: _highestCount > 100000
Missing Default,Hyperletter.Channel,AbstractChannel,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Channel\AbstractChannel.cs,HandleReceivedLetter,The following switch statement is missing a default case: switch(receivedLetter.Type) {                  case LetterType.Initialize:                      RemoteNodeId = new Guid(receivedLetter.Parts[0]);                      HandleInitialize();                      break;                    case LetterType.Shutdown:                      _remoteShutdownRequested = true;                      ChannelDisconnecting?.Invoke(this' ShutdownReason.Remote);                      break;                    case LetterType.User:                      Received?.Invoke(receivedLetter' CreateReceivedEventArgs(ackState));                      break;                    case LetterType.Batch:                      for(var i = 0; i < receivedLetter.Parts.Length; i++) {                          var batchedLetter = _letterDeserializer.Deserialize(receivedLetter.Parts[i]);                          Received?.Invoke(batchedLetter' CreateReceivedEventArgs(ackState));                      }                      break;              }
Missing Default,Hyperletter.Channel,AbstractChannel,D:\research\architectureSmells\repos\Jiddler_Hyperletter\Hyperletter\Channel\AbstractChannel.cs,HandleLetterSent,The following switch statement is missing a default case: switch(sentLetter.Type) {                  case LetterType.Initialize:                      HandleInitialize();                      break;                    case LetterType.Heartbeat:                      NotifyOnEmptyQueue();                      break;                    case LetterType.Batch:                  case LetterType.User:                      Sent?.Invoke(this' sentLetter);                      NotifyOnEmptyQueue();                      break;              }
