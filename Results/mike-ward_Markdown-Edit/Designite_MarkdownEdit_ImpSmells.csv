Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MarkdownEdit.Models,BlockBackgroundRenderer,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\BlockBackgroundRenderer.cs,Draw,Cyclomatic complexity of the method is 12
Complex Method,MarkdownEdit.Models,EditorLoadSave,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\EditorLoadSave.cs,SaveFileAs,Cyclomatic complexity of the method is 9
Complex Method,MarkdownEdit.Models,MarkdownHighlightingColorizer,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\MarkdownHighlightingColorizer.cs,ColorizeLine,Cyclomatic complexity of the method is 10
Complex Method,MarkdownEdit.SpellCheck,SpellCheckProvider,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\SpellCheck\SpellCheckProvider.cs,DoSpellCheck,Cyclomatic complexity of the method is 15
Long Parameter List,MarkdownEdit.Controls,MainWindow,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\MainWindow.xaml.cs,WndProc,The method has 5 parameters. Parameters: hwnd' msg' wParam' lParam' handled
Long Parameter List,MarkdownEdit.Controls,Preview,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Preview.xaml.cs,BrowserOnMessageHook,The method has 5 parameters. Parameters: hwnd' msg' wParam' lParam' handled
Long Parameter List,MarkdownEdit.Models,MarkdownHighlightingColorizer,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\MarkdownHighlightingColorizer.cs,ApplyLinePart,The method has 7 parameters. Parameters: highlight' sourceStart' sourceLength' lineStart' lineEnd' leadingSpaces' magnify
Long Identifier,MarkdownEdit.Controls,DisplaySettings,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\DisplaySettings.xaml.cs,OnIsVisibleChanged,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MarkdownEdit.Controls,DisplayDocumentStructure,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\DisplayDocumentStructure.xaml.cs,OnIsVisibleChanged,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MarkdownEdit.Controls,MainWindowViewModel,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\MainWindow.vm.cs,OnIsVisibleChanged,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MarkdownEdit.Controls,RecentFilesDialog,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\RecentFilesDialog.xaml.cs,OnIsVisibleChanged,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MarkdownEdit.Controls,ThemeDialog,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\ThemeDialog.xaml.cs,OnIsVisibleChanged,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MarkdownEdit.Controls,Editor,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Editor.xaml.cs,OnIsVisibleChanged,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MarkdownEdit.Controls,Editor,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Editor.xaml.cs,,The length of the parameter VerticalScrollBarVisibilityProperty is 35.
Long Identifier,MarkdownEdit.Models,ListInputHandler,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\ListInputHandler.cs,,The length of the parameter UnorderedListCheckboxEndPattern is 31.
Long Identifier,MarkdownEdit.Models,Markdown,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\Markdown.cs,,The length of the parameter PandocGithubMarkdownFormatOptions is 33.
Long Identifier,MarkdownEdit.Models,UserSettings,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\UserSettings.cs,,The length of the parameter _editorVerticalScrollBarVisible is 31.
Long Identifier,MarkdownEdit.Models,UserSettings,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\UserSettings.cs,,The length of the parameter _spellCheckIgnoreWordsWithDigits is 32.
Long Statement,MarkdownEdit.Controls,DisplayDocumentStructure,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\DisplayDocumentStructure.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/mde;component/controls/displaydocumentstructure.xaml"' System.UriKind.Relative); " is 126.
Long Statement,MarkdownEdit.Controls,Donate,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Donate.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.Canvas)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.CloseOnMouseDown); " is 128.
Long Statement,MarkdownEdit.Controls,Donate,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Donate.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.Canvas)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.DonateOnMouseDown); " is 129.
Long Statement,MarkdownEdit.Controls,FadingPopupControl,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\FadingPopupControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/mde;component/controls/fadingpopupcontrol.xaml"' System.UriKind.Relative); " is 120.
Long Statement,MarkdownEdit.Controls,SpellingDictionaryComboBox,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\SpellingDictionaryComboBox.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/mde;component/controls/spellingdictionarycombobox.xaml"' System.UriKind.Relative); " is 128.
Long Statement,MarkdownEdit.Controls,Preview,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Preview.xaml.cs,ScrubHtml,The length of the statement  "            each(nc' node => { if (node.Name != "blockquote" || node.ParentNode.Name != "li") node.Attributes.Add("id"' getName()); }); " is 123.
Long Statement,MarkdownEdit.Controls,Preview,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Preview.xaml.cs,ScrubHtml,The length of the statement  "            nc = doc.DocumentNode.SelectNodes("//a[starts-with(translate(@href' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'' 'abcdefghijklmnopqrstuvwxyz')' 'javascript')]|//a[starts-with(translate(@href' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'' 'abcdefghijklmnopqrstuvwxyz')' 'jscript')]|//a[starts-with(translate(@href' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'' 'abcdefghijklmnopqrstuvwxyz')' 'vbscript')]"); " is 359.
Long Statement,MarkdownEdit.Controls,Preview,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Preview.xaml.cs,ScrubHtml,The length of the statement  "            nc = doc.DocumentNode.SelectNodes("//img[starts-with(translate(@src' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'' 'abcdefghijklmnopqrstuvwxyz')' 'javascript')]|//img[starts-with(translate(@src' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'' 'abcdefghijklmnopqrstuvwxyz')' 'jscript')]|//img[starts-with(translate(@src' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'' 'abcdefghijklmnopqrstuvwxyz')' 'vbscript')]"); " is 362.
Long Statement,MarkdownEdit.Controls,Preview,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Preview.xaml.cs,ScrubHtml,The length of the statement  "            nc = doc.DocumentNode.SelectNodes("//*[@onclick or @onmouseover or @onfocus or @onblur or @onmouseout or @ondoubleclick or @onload or @onunload]"); " is 147.
Long Statement,MarkdownEdit.Controls,Preview,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Preview.xaml.cs,ScrubHtml,The length of the statement  "            nc = doc.DocumentNode.SelectNodes("//*[contains(translate(@style' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'' 'abcdefghijklmnopqrstuvwxyz')' 'expression')]"); " is 144.
Long Statement,MarkdownEdit.MarkdownConverters,CMarkGitHub,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\MarkdownConverters\CMarkGitHub.cs,ConvertToHtml,The length of the statement  "            var startInfo = Markdown.ProcessStartInfo("cmark-gfm"' "--hardbreaks -e table -e strikethrough -e autolink -e tagfilter"' true); " is 128.
Long Statement,MarkdownEdit.MarkdownConverters,GitHubMarkdownConverter,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\MarkdownConverters\GitHubMarkdownConverter.cs,ConvertToHtml,The length of the statement  "            return Markdown.Pandoc(markdown' "-f markdown_github-emoji+tex_math_dollars -t html5 --email-obfuscation=none --mathjax"); " is 122.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,MarkdownEdit.Models,MarkdownHighlightingColorizer,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\MarkdownHighlightingColorizer.cs,ColorizeLine,The conditional expression  "(inline.Tag == InlineTag.Link || inline.Tag == InlineTag.Image)                          && inline.FirstChild?.LiteralContent != null                          && inline.FirstChild.LiteralContent != inline.TargetUrl"  is complex.
Complex Conditional,MarkdownEdit.Models,StringExtensions,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\StringExtensions.cs,ToSlug,The conditional expression  "(c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')"  is complex.
Complex Conditional,MarkdownEdit.Models,StringExtensions,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\StringExtensions.cs,ToSlug,The conditional expression  "c == ' ' || c == ''' || c == '.' || c == '/' || c == '\\' || c == '-' || c == '_' || c == '='"  is complex.
Empty Catch Block,MarkdownEdit.Controls,Preview,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Preview.xaml.cs,EmitFirePreviewUpdatedEvent,The method has an empty catch block.
Empty Catch Block,MarkdownEdit.Models,FileExtensions,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\FileExtensions.cs,WatchFile,The method has an empty catch block.
Empty Catch Block,MarkdownEdit.Models,FileExtensions,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\FileExtensions.cs,WatchFile,The method has an empty catch block.
Magic Number,MarkdownEdit.Commands,TogglePreviewCommand,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Commands\TogglePreviewCommand.cs,Execute,The following statement contains a magic number: Settings.Default.EditPreviewHide = (Settings.Default.EditPreviewHide + 1) % 3;
Magic Number,MarkdownEdit.Controls,DisplayDocumentStructureViewModel,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\DisplayDocumentStructureViewModel.cs,Update,The following statement contains a magic number: Structure = AbstractSyntaxTree.EnumerateBlocks(ast.FirstChild)                  .Where(b => b.Tag == BlockTag.AtxHeading || b.Tag == BlockTag.SetextHeading)                  .Select(b => new DocumentStructure                  {                      Heading = InlineContent(b.InlineContent)'                      Level = b.Heading.Level*20'                      FontWeight = b.Heading.Level == 1 ? FontWeights.Bold : FontWeights.Normal'                      Offset = b.SourcePosition                  })                  .ToArray();
Magic Number,MarkdownEdit.Controls,Donate,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Donate.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 25 "..\..\..\Controls\Donate.xaml"              ((System.Windows.Controls.Canvas)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.CloseOnMouseDown);                            #line default              #line hidden                            #line 26 "..\..\..\Controls\Donate.xaml"              ((System.Windows.Controls.Canvas)(target)).MouseEnter += new System.Windows.Input.MouseEventHandler(this.OnMouseEnter);                            #line default              #line hidden                            #line 27 "..\..\..\Controls\Donate.xaml"              ((System.Windows.Controls.Canvas)(target)).MouseLeave += new System.Windows.Input.MouseEventHandler(this.OnMouseLeave);                            #line default              #line hidden              return;              case 2:                            #line 34 "..\..\..\Controls\Donate.xaml"              ((System.Windows.Controls.Canvas)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.DonateOnMouseDown);                            #line default              #line hidden                            #line 35 "..\..\..\Controls\Donate.xaml"              ((System.Windows.Controls.Canvas)(target)).MouseEnter += new System.Windows.Input.MouseEventHandler(this.OnMouseEnter);                            #line default              #line hidden                            #line 36 "..\..\..\Controls\Donate.xaml"              ((System.Windows.Controls.Canvas)(target)).MouseLeave += new System.Windows.Input.MouseEventHandler(this.OnMouseLeave);                            #line default              #line hidden              return;              }
Magic Number,MarkdownEdit.Controls,FadingPopupControl,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\FadingPopupControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\Controls\FadingPopupControl.xaml"              ((System.Windows.Media.Animation.Storyboard)(target)).Completed += new System.EventHandler(this.StatusFader_Completed);                            #line default              #line hidden              return;              case 2:              this.Popup = ((System.Windows.Controls.Primitives.Popup)(target));              return;              case 3:              this.PopupBackground = ((System.Windows.Controls.Border)(target));              return;              case 4:              this.PopupLabel = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,MarkdownEdit.Controls,FadingPopupControl,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\FadingPopupControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\Controls\FadingPopupControl.xaml"              ((System.Windows.Media.Animation.Storyboard)(target)).Completed += new System.EventHandler(this.StatusFader_Completed);                            #line default              #line hidden              return;              case 2:              this.Popup = ((System.Windows.Controls.Primitives.Popup)(target));              return;              case 3:              this.PopupBackground = ((System.Windows.Controls.Border)(target));              return;              case 4:              this.PopupLabel = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,MarkdownEdit.Controls,FadingPopupControl,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\FadingPopupControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\Controls\FadingPopupControl.xaml"              ((System.Windows.Media.Animation.Storyboard)(target)).Completed += new System.EventHandler(this.StatusFader_Completed);                            #line default              #line hidden              return;              case 2:              this.Popup = ((System.Windows.Controls.Primitives.Popup)(target));              return;              case 3:              this.PopupBackground = ((System.Windows.Controls.Border)(target));              return;              case 4:              this.PopupLabel = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,MarkdownEdit.Controls,ImageDropDialog,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\ImageDropDialog.xaml.cs,OnUploadToImgur,The following statement contains a magic number: try              {                  UploadProgressChangedEventHandler progress = (o' args) => TextEditor.Dispatcher.InvokeAsync(() =>                  {                      if (_canceled) ((WebClient)o).CancelAsync();                      var progressPercentage = (int)(args.BytesSent / (double)args.TotalBytesToSend * 100);                      ProgressBar.Value = progressPercentage;                      if (progressPercentage == 100) ProgressBar.IsIndeterminate = true;                  });                    UploadValuesCompletedEventHandler completed = (o' args) =>                  {                      if (_canceled) ((WebClient)o).CancelAsync();                  };                    string name;                  byte[] image;                    if (_vm.UseClipboardImage)                  {                      name = "clipboard";                      image = Images.ClipboardDibToBitmapSource().ToPngArray();                  }                  else                  {                      var files = DroppedFiles();                      if (files.Length > 1) throw new Exception("Upload only 1 file at a time");                      var path = files[0];                      name = Path.GetFileNameWithoutExtension(path);                      image = File.ReadAllBytes(path);                  }                    _vm.Uploading = true;                  ContextMenu.IsOpen = false;                  var link = await new ImageUploadImgur().UploadBytesAsync(image' progress' completed);                  ActivateClose();                    if (Uri.IsWellFormedUriString(link' UriKind.Absolute))                      InsertText(TextEditor' DragEventArgs' CreateImageTag(link' name));                  else Notify.Alert(link);              }              catch (Exception ex)              {                  ActivateClose();                  Notify.Alert(ex.Message);              }
Magic Number,MarkdownEdit.Controls,ImageDropDialog,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\ImageDropDialog.xaml.cs,OnUploadToImgur,The following statement contains a magic number: try              {                  UploadProgressChangedEventHandler progress = (o' args) => TextEditor.Dispatcher.InvokeAsync(() =>                  {                      if (_canceled) ((WebClient)o).CancelAsync();                      var progressPercentage = (int)(args.BytesSent / (double)args.TotalBytesToSend * 100);                      ProgressBar.Value = progressPercentage;                      if (progressPercentage == 100) ProgressBar.IsIndeterminate = true;                  });                    UploadValuesCompletedEventHandler completed = (o' args) =>                  {                      if (_canceled) ((WebClient)o).CancelAsync();                  };                    string name;                  byte[] image;                    if (_vm.UseClipboardImage)                  {                      name = "clipboard";                      image = Images.ClipboardDibToBitmapSource().ToPngArray();                  }                  else                  {                      var files = DroppedFiles();                      if (files.Length > 1) throw new Exception("Upload only 1 file at a time");                      var path = files[0];                      name = Path.GetFileNameWithoutExtension(path);                      image = File.ReadAllBytes(path);                  }                    _vm.Uploading = true;                  ContextMenu.IsOpen = false;                  var link = await new ImageUploadImgur().UploadBytesAsync(image' progress' completed);                  ActivateClose();                    if (Uri.IsWellFormedUriString(link' UriKind.Absolute))                      InsertText(TextEditor' DragEventArgs' CreateImageTag(link' name));                  else Notify.Alert(link);              }              catch (Exception ex)              {                  ActivateClose();                  Notify.Alert(ex.Message);              }
Magic Number,MarkdownEdit.Controls,MainWindowViewModel,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\MainWindow.vm.cs,OnFirstActivation,The following statement contains a magic number: MainWindow.Dispatcher.InvokeAsync(async () =>              {                  var updateMargins = Utility.Debounce(() =>                      MainWindow.Dispatcher.Invoke(() => EditorMargins = CalculateEditorMargins())' 50);                    Func<Visibility> isVisible = () => MainWindow.WindowState == WindowState.Maximized                      ? Visibility.Visible                      : Visibility.Collapsed;                    App.UserSettings.PropertyChanged += (o' args) =>                  {                      if (args.PropertyName == nameof(App.UserSettings.SinglePaneMargin)) updateMargins();                      if (args.PropertyName == nameof(App.UserSettings.GitHubMarkdown)) MainWindow.Preview.UpdatePreview(MainWindow.Editor);                  };                    StartClock();                  ClockIsVisible = isVisible();                  MainWindow.SizeChanged += (s' e) => ClockIsVisible = isVisible();                    updateMargins();                  MainWindow.SizeChanged += (s' e) => updateMargins();                    LoadCommandLineOrLastFile();                  Application.Current.Activated += OnActivated;                  NewVersion = !await Version.IsCurrentVersion();              });
Magic Number,MarkdownEdit.Controls,MainWindowViewModel,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\MainWindow.vm.cs,UpdateEditorPreviewVisibility,The following statement contains a magic number: MainWindow.Editor.Visibility = state == 2 ? Visibility.Collapsed : Visibility.Visible;
Magic Number,MarkdownEdit.Controls,MainWindowViewModel,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\MainWindow.vm.cs,UpdateEditorPreviewVisibility,The following statement contains a magic number: MainWindow.UniformGrid.Columns = state == 0 ? 2 : 1;
Magic Number,MarkdownEdit.Controls,MainWindowViewModel,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\MainWindow.vm.cs,UpdateEditorPreviewVisibility,The following statement contains a magic number: MainWindow.SetFocus(state == 2 ? MainWindow.Preview.Browser as IInputElement : MainWindow.Editor.EditBox);
Magic Number,MarkdownEdit.Controls,MainWindowViewModel,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\MainWindow.vm.cs,StartClock,The following statement contains a magic number: var timer = new DispatcherTimer { Interval = new TimeSpan(0' 0' 15) };
Magic Number,MarkdownEdit.Controls,RecentFilesDialog,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\RecentFilesDialog.xaml.cs,UpdateRecentFiles,The following statement contains a magic number: sc.AddRange(files.Take(19).ToArray());
Magic Number,MarkdownEdit.Controls,Editor,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Editor.xaml.cs,OnIsVisibleChanged,The following statement contains a magic number: EditBox.Options.IndentationSize = 2;
Magic Number,MarkdownEdit.Controls,Editor,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Editor.xaml.cs,OnIsVisibleChanged,The following statement contains a magic number: Dispatcher.InvokeAsync(() =>              {                  var executeAutoSave = Utility.Debounce<string>(s => Dispatcher?.Invoke(ExecuteAutoSave)' 4000);                  EditBox.TextChanged += (s' e) => executeAutoSave(null);                  EditBox.PreviewKeyDown += (s' e) => EditorSpellCheck.AppsKeyDown = e.Key == Key.Apps && e.IsDown;                  EditBox.Document.PropertyChanged += OnEditBoxPropertyChanged;                  DataObject.AddPastingHandler(EditBox' OnPaste);                  RestyleScrollBar();                  EditorUtilities.AllowImagePaste(this);                  RemoveIndentationCommandBinding();                  SetupTabSnippetHandler();                  ThemeChangedCallback(this' new DependencyPropertyChangedEventArgs());                  EditBox.Focus();                    // fixes context menu not showing on first click                  ContextMenu = new ContextMenu();                  ContextMenu.Items.Add(new MenuItem());              });
Magic Number,MarkdownEdit.Controls,Editor,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Editor.xaml.cs,RestyleScrollBar,The following statement contains a magic number: grid.ColumnDefinitions[1].Width = new GridLength(8);
Magic Number,MarkdownEdit.Controls,Editor,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Editor.xaml.cs,RestyleScrollBar,The following statement contains a magic number: grid.RowDefinitions[1].Height = new GridLength(8);
Magic Number,MarkdownEdit.Controls,Editor,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Editor.xaml.cs,RestyleScrollBar,The following statement contains a magic number: grid.Children[1].Opacity = 0.3;
Magic Number,MarkdownEdit.Controls,Editor,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Editor.xaml.cs,RestyleScrollBar,The following statement contains a magic number: grid.Children[2].Opacity = 0.3;
Magic Number,MarkdownEdit.Controls,Editor,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Editor.xaml.cs,RestyleScrollBar,The following statement contains a magic number: grid.Children[2].Opacity = 0.3;
Magic Number,MarkdownEdit.Controls,Preview,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Preview.xaml.cs,SetScrollOffset,The following statement contains a magic number: if (document3?.documentElement != null)              {                  var editor = sender as Editor;                  if (editor == null) return;                  var numberAndExtra = editor.VisibleBlockNumber();                  var number = numberAndExtra.Item1;                  var extra = numberAndExtra.Item2;                  var offsetTop = 0;                  var document2 = Browser.Document as IHTMLDocument2;                  if (number == int.MaxValue)                  {                      var body = document2?.body as IHTMLElement2;                      if (body != null) offsetTop = body.scrollHeight;                  }                  else if (number > 1)                  {                      var element = document3.getElementById(GetIdName(number));                      if (element == null) return;                      offsetTop = element.offsetTop + extra * 20;                  }                  document2?.parentWindow.scroll(0' offsetTop);              }
Magic Number,MarkdownEdit.i18n,TranslationProvider,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\i18n\TranslationProvider.cs,Parse,The following statement contains a magic number: foreach (var line in text.Split(new[] {Environment.NewLine}' StringSplitOptions.None))              {                  if (string.IsNullOrWhiteSpace(line)) continue;                  if (line.StartsWith("=")) continue;                    var pair = line.Split(new[] {':'}' 2);                  if (pair.Length != 2) throw new FormatException(ErrorMessage("invalid expression"' line));                    var name = pair[0];                  var value = pair[1].Trim();                    if (regex.IsMatch(name) == false) throw new FormatException(ErrorMessage("invalid identifier"' line));                  if (string.IsNullOrWhiteSpace(value)) throw new FormatException(ErrorMessage("empty value"' line));                    language.Dictionary.Add(name' value);              }
Magic Number,MarkdownEdit.i18n,TranslationProvider,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\i18n\TranslationProvider.cs,Parse,The following statement contains a magic number: foreach (var line in text.Split(new[] {Environment.NewLine}' StringSplitOptions.None))              {                  if (string.IsNullOrWhiteSpace(line)) continue;                  if (line.StartsWith("=")) continue;                    var pair = line.Split(new[] {':'}' 2);                  if (pair.Length != 2) throw new FormatException(ErrorMessage("invalid expression"' line));                    var name = pair[0];                  var value = pair[1].Trim();                    if (regex.IsMatch(name) == false) throw new FormatException(ErrorMessage("invalid identifier"' line));                  if (string.IsNullOrWhiteSpace(value)) throw new FormatException(ErrorMessage("empty value"' line));                    language.Dictionary.Add(name' value);              }
Magic Number,MarkdownEdit.Models,BlockBackgroundRenderer,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\BlockBackgroundRenderer.cs,Draw,The following statement contains a magic number: foreach (var line in textView.VisualLines)              {                  var rc = BackgroundGeometryBuilder.GetRectsFromVisualSegment(textView' line' 0' 1000).FirstOrDefault();                  if (rc == default(Rect)) continue;                    foreach (var block in AbstractSyntaxTree.EnumerateBlocks(ast.FirstChild))                  {                      if (block.SourcePosition + block.SourceLength <= line.StartOffset) continue;                      if (block.SourcePosition > line.LastDocumentLine.EndOffset) break;                        // Indented code does not terminate (at least in the AST) until a new                      // block is encountered. Thus blank lines at the end of the block are                      // highlighted. It looks much better if they're not highlighted.                      if (block.Tag == BlockTag.IndentedCode)                      {                          var length = block.SourcePosition + block.SourceLength - line.StartOffset;                          if (line.StartOffset + length > textView.Document.TextLength) break;                          var remainder = textView.Document.GetText(line.StartOffset' length);                          if (string.IsNullOrWhiteSpace(remainder)) break;                      }                        if (_blockTags.Any(tag => tag == block.Tag))                      {                          Brush brush;                          if (_brushes.TryGetValue(block.Tag' out brush) && brush != null)                          {                              drawingContext.DrawRectangle(brush' null'                                  new Rect(0' rc.Top' textView.ActualWidth' line.Height));                          }                      }                  }              }
Magic Number,MarkdownEdit.Models,CrashReport,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\CrashReport.cs,ShowCrashReport,The following statement contains a magic number: Environment.Exit(110);
Magic Number,MarkdownEdit.Models,EditorUtilities,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\EditorUtilities.cs,InsertHyperlink,The following statement contains a magic number: var parts = link.Split(new[] { '"' }' 2);
Magic Number,MarkdownEdit.Models,FileExtensions,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\FileExtensions.cs,ReadAllTextRetry,The following statement contains a magic number: var retries = 3;
Magic Number,MarkdownEdit.Models,FileExtensions,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\FileExtensions.cs,ReadAllTextRetry,The following statement contains a magic number: while (retries > 0)              {                  try                  {                      retries -= 1;                      return File.ReadAllText(file);                  }                  catch (IOException ex)                  {                      const int sharingViolation = 32;                      if (retries == 0 || (ex.HResult & 0xFFFF) != sharingViolation) throw;                      Thread.Sleep(50);                  }              }
Magic Number,MarkdownEdit.Models,FileExtensions,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\FileExtensions.cs,ReadAllTextRetry,The following statement contains a magic number: while (retries > 0)              {                  try                  {                      retries -= 1;                      return File.ReadAllText(file);                  }                  catch (IOException ex)                  {                      const int sharingViolation = 32;                      if (retries == 0 || (ex.HResult & 0xFFFF) != sharingViolation) throw;                      Thread.Sleep(50);                  }              }
Magic Number,MarkdownEdit.Models,Markdown,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\Markdown.cs,SeperateFrontMatter,The following statement contains a magic number: if (Regex.IsMatch(text' @"^---\s*"))              {                  var matches = Regex.Matches(text' @"^(?:---)|(?:\.\.\.)\s*$"' RegexOptions.Multiline);                  if (matches.Count < 2) return Tuple.Create(Empty' text);                  var match = matches[1];                  var index = match.Index + match.Groups[0].Value.Length + 1;                  while (index < text.Length && char.IsWhiteSpace(text[index])) index += 1;                  index = Math.Min(text.Length' index);                  return Tuple.Create(text.Substring(0' index)' text.Substring(index));              }              else              {                  // Hack for non-standard front-matter                  const string formatHack = @"^<\!--\s*MDE\s*-->\s*$";                  var match = Regex.Match(text' formatHack' RegexOptions.Multiline);                  if (match.Success)                  {                      var index = match.Index + match.Groups[0].Value.Length + 1;                      while (index < text.Length && char.IsWhiteSpace(text[index])) index += 1;                      return Tuple.Create(text.Substring(0' index)' text.Substring(index));                  }              }
Magic Number,MarkdownEdit.Models,Images,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\Images.cs,ClipboardDibToBitmapSource,The following statement contains a magic number: var fileHeader = new BITMAPFILEHEADER              {                  bfType = BITMAPFILEHEADER.BM'                  bfSize = fileSize'                  bfReserved1 = 0'                  bfReserved2 = 0'                  bfOffBits = fileHeaderSize + infoHeaderSize + infoHeader.biClrUsed*4              };
Magic Number,MarkdownEdit.Models,Images,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\Images.cs,IsImageUrl,The following statement contains a magic number: try              {                  if (HasImageExtension(url)) return true;                    var request = WebRequest.Create(url);                  request.Method = "HEAD";                  request.Timeout = 2000;                  using (var response = request.GetResponse())                      return response.ContentType.StartsWith("image/"' StringComparison.OrdinalIgnoreCase);              }              catch (Exception)              {                  return false;              }
Magic Number,MarkdownEdit.Models,EditorLoadSave,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\EditorLoadSave.cs,LoadFile,The following statement contains a magic number: try              {                  var parts = file.Split(new[] {'|'}' 2);                  var filename = parts[0] ?? "";                  var offset = ConvertToOffset(parts.Length == 2 ? parts[1] : "0");                  var pathExtension = Path.GetExtension(filename);                    var isWordDoc = pathExtension.Equals(".docx"' StringComparison.OrdinalIgnoreCase);                    if (isWordDoc)                  {                      NewFile(editor);                      editor.EditBox.Text = Markdown.FromMicrosoftWord(filename);                      editor.EditBox.Encoding = Encoding.UTF8;                      return true;                  }                    var isHtmlFile = pathExtension.Equals(".html"' StringComparison.OrdinalIgnoreCase)                                   || pathExtension.Equals(".htm"' StringComparison.OrdinalIgnoreCase);                    if (isHtmlFile)                  {                      NewFile(editor);                      editor.EditBox.Text = Markdown.FromHtml(filename);                      editor.EditBox.Encoding = Encoding.UTF8;                      return true;                  }                    var editorEncoding = App.UserSettings.EditorEncoding;                    var encoding = MyEncodingInfo.IsAutoDetectEncoding(editorEncoding)                      ? MyEncodingInfo.DetectEncoding(filename)                      : Encoding.GetEncoding(editorEncoding.CodePage);                    editor.EditBox.Text = File.ReadAllText(filename' encoding);                  editor.EditBox.Encoding = encoding;                    if (updateCursorPosition)                  {                      if (App.UserSettings.EditorOpenLastCursorPosition)                      {                          editor.EditBox.ScrollToLine(editor.EditBox.Document.GetLineByOffset(offset)?.LineNumber ?? 0);                          editor.EditBox.SelectionStart = offset;                      }                      else                      {                          editor.EditBox.ScrollToHome();                      }                  }                    Settings.Default.LastOpenFile = file;                  RecentFilesDialog.UpdateRecentFiles(filename' offset);                  editor.IsModified = false;                  editor.FileName = filename;                  return true;              }              catch (Exception ex)              {                  Notify.Alert($"{ex.Message} {file}");                  return false;              }
Magic Number,MarkdownEdit.Models,EditorLoadSave,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\EditorLoadSave.cs,LoadFile,The following statement contains a magic number: try              {                  var parts = file.Split(new[] {'|'}' 2);                  var filename = parts[0] ?? "";                  var offset = ConvertToOffset(parts.Length == 2 ? parts[1] : "0");                  var pathExtension = Path.GetExtension(filename);                    var isWordDoc = pathExtension.Equals(".docx"' StringComparison.OrdinalIgnoreCase);                    if (isWordDoc)                  {                      NewFile(editor);                      editor.EditBox.Text = Markdown.FromMicrosoftWord(filename);                      editor.EditBox.Encoding = Encoding.UTF8;                      return true;                  }                    var isHtmlFile = pathExtension.Equals(".html"' StringComparison.OrdinalIgnoreCase)                                   || pathExtension.Equals(".htm"' StringComparison.OrdinalIgnoreCase);                    if (isHtmlFile)                  {                      NewFile(editor);                      editor.EditBox.Text = Markdown.FromHtml(filename);                      editor.EditBox.Encoding = Encoding.UTF8;                      return true;                  }                    var editorEncoding = App.UserSettings.EditorEncoding;                    var encoding = MyEncodingInfo.IsAutoDetectEncoding(editorEncoding)                      ? MyEncodingInfo.DetectEncoding(filename)                      : Encoding.GetEncoding(editorEncoding.CodePage);                    editor.EditBox.Text = File.ReadAllText(filename' encoding);                  editor.EditBox.Encoding = encoding;                    if (updateCursorPosition)                  {                      if (App.UserSettings.EditorOpenLastCursorPosition)                      {                          editor.EditBox.ScrollToLine(editor.EditBox.Document.GetLineByOffset(offset)?.LineNumber ?? 0);                          editor.EditBox.SelectionStart = offset;                      }                      else                      {                          editor.EditBox.ScrollToHome();                      }                  }                    Settings.Default.LastOpenFile = file;                  RecentFilesDialog.UpdateRecentFiles(filename' offset);                  editor.IsModified = false;                  editor.FileName = filename;                  return true;              }              catch (Exception ex)              {                  Notify.Alert($"{ex.Message} {file}");                  return false;              }
Magic Number,MarkdownEdit.Models,EditorLoadSave,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\EditorLoadSave.cs,SaveFileAs,The following statement contains a magic number: const int html = 2;
Magic Number,MarkdownEdit.Models,EditorLoadSave,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\EditorLoadSave.cs,SaveFileAs,The following statement contains a magic number: const int pdf = 3;
Magic Number,MarkdownEdit.Models,EditorLoadSave,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\EditorLoadSave.cs,SaveFileAs,The following statement contains a magic number: const int docx = 4;
Magic Number,MarkdownEdit.Models,MarkdownHighlightingColorizer,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\MarkdownHighlightingColorizer.cs,ColorizeLine,The following statement contains a magic number: foreach (var block in EnumerateSpanningBlocks(ast' start' end))              {                  if (BlockHighlighter.TryGetValue(block.Tag' out highlighter))                  {                      var magnify = double.NaN;                      if (block.Heading.Level == 1) magnify = theme.Header1Height;                      if (block.Heading.Level == 2) magnify = theme.Header2Height;                        var length = block.Tag == BlockTag.ListItem                          ? Math.Min(block.SourceLength' block.ListData.Padding)                          : block.SourceLength;                                            ApplyLinePart(highlighter(theme)' block.SourcePosition' length' start' end' leadingSpaces' magnify);                  }                    foreach (var inline in EnumerateInlines(block.InlineContent)                      .TakeWhile(il => il.SourcePosition < end)                      .Where(il => InlineHighlighter.TryGetValue(il.Tag' out highlighter)))                  {                      var position = inline.SourcePosition;                      var length = inline.SourceLength;                        if ((inline.Tag == InlineTag.Link || inline.Tag == InlineTag.Image)                          && inline.FirstChild?.LiteralContent != null                          && inline.FirstChild.LiteralContent != inline.TargetUrl)                      {                          var literal = inline.FirstChild.LastSibling;                          var urlPosition = literal.SourcePosition + literal.SourceLength + 1;                          var urlLength = inline.SourcePosition + inline.SourceLength - urlPosition;                          if (urlLength > 0) // check for <name@domain.ext> style links                          {                              position = urlPosition;                              length = urlLength;                          }                      }                        // inlines don't magnify                      ApplyLinePart(highlighter(theme)' position' length' start' end' leadingSpaces' double.NaN);                  }              }
Magic Number,MarkdownEdit.Models,UserSettings,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\UserSettings.cs,GetHashCode,The following statement contains a magic number: return 17                     ^ EditorFontFamily.GetHashCode()                     ^ EditorFontSize.GetHashCode()                     ^ EditorHighlightCurrentLine.GetHashCode()                     ^ EditorOpenLastCursorPosition.GetHashCode()                     ^ EditorOpenLastFile.GetHashCode()                     ^ EditorShowEndOfLine.GetHashCode()                     ^ EditorShowLineNumbers.GetHashCode()                     ^ EditorShowSpaces.GetHashCode()                     ^ EditorShowTabs.GetHashCode()                     ^ EditorVerticalScrollBarVisible.GetHashCode()                     ^ EditorEncoding.GetHashCode()                     ^ SynchronizeScrollPositions.GetHashCode()                     ^ SpellCheckDictionary.GetHashCode()                     ^ SpellCheckIgnoreCodeBlocks.GetHashCode()                     ^ SpellCheckIgnoreMarkupTags.GetHashCode()                     ^ SpellCheckIgnoreWordsWithDigits.GetHashCode()                     ^ IgnoreTaskbarOnMaximize.GetHashCode()                     ^ FormatOnSave.GetHashCode()                     ^ GitHubMarkdown.GetHashCode()                     ^ Theme.GetHashCode()                     ^ SinglePaneMargin.GetHashCode()                     ^ LineEnding.GetHashCode()                     ^ CustomMarkdownConverter.GetHashCode()                     ^ CustomMarkdownConverterArgs.GetHashCode()                     ^ UseDefaultEditor.GetHashCode()                     ^ YesIDonated.GetHashCode()                     ^ InsertImagePathsOnly.GetHashCode()                     ^ CultureLanguage.GetHashCode();
Magic Number,MarkdownEdit.Models,StringExtensions,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\StringExtensions.cs,ToSlug,The following statement contains a magic number: const int maxlen = 80;
Magic Number,MarkdownEdit.Models,StringExtensions,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\StringExtensions.cs,ToSlug,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var c = normalised[i];                  if ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9'))                  {                      if (prevDash)                      {                          sb.Append('-');                          prevDash = false;                      }                      sb.Append(c);                  }                  else if (c >= 'A' && c <= 'Z')                  {                      if (prevDash)                      {                          sb.Append('-');                          prevDash = false;                      }                      // tricky way to convert to lowercase                      if (toLower) sb.Append((char)(c | 32));                      else sb.Append(c);                  }                  else if (c == ' ' || c == ''' || c == '.' || c == '/' || c == '\\' || c == '-' || c == '_' || c == '=')                  {                      if (!prevDash && sb.Length > 0)                      {                          prevDash = true;                      }                  }                  else                  {                      var swap = ConvertEdgeCases(c' toLower);                        if (swap != null)                      {                          if (prevDash)                          {                              sb.Append('-');                              prevDash = false;                          }                          sb.Append(swap);                      }                  }                    if (sb.Length == maxlen) break;              }
Magic Number,MarkdownEdit.Snippets,SnippetManager,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Snippets\SnippetManager.cs,ReadSnippetFile,The following statement contains a magic number: try              {                  var file = SnippetFile();                    if (File.Exists(file) == false)                  {                      Directory.CreateDirectory(UserSettings.SettingsFolder);                      File.WriteAllText(file' Resources.Snippets);                  }                    var key = default(string);                  var value = default(string);                  _snippets = new Dictionary<string' string>();                    foreach (var line in File.ReadAllLines(file))                  {                      if (key != null)                      {                          // Keep reading until terminator sequence                          if (line.TrimEnd() != "::")                          {                              value += line + Environment.NewLine;                          }                          else                          {                              _snippets.Add(key' value);                              key = null;                              value = null;                          }                          continue;                      }                        if (string.IsNullOrWhiteSpace(line)) continue;                      var pair = line.Split(null' 2);                        if (pair.Length == 2)                      {                          _snippets.Add(pair[0]' pair[1]);                      }                        else if (pair[0].EndsWith("::") && pair[0][0] != ':')                      {                          // begin multiline sequence                          key = pair[0].TrimEnd(':');                          value = string.Empty;                      }                  }              }              catch (Exception ex)              {                  Notify.Alert($"{ex.Message} in {SnippetFile()}");              }
Magic Number,MarkdownEdit.Snippets,SnippetManager,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Snippets\SnippetManager.cs,ReadSnippetFile,The following statement contains a magic number: try              {                  var file = SnippetFile();                    if (File.Exists(file) == false)                  {                      Directory.CreateDirectory(UserSettings.SettingsFolder);                      File.WriteAllText(file' Resources.Snippets);                  }                    var key = default(string);                  var value = default(string);                  _snippets = new Dictionary<string' string>();                    foreach (var line in File.ReadAllLines(file))                  {                      if (key != null)                      {                          // Keep reading until terminator sequence                          if (line.TrimEnd() != "::")                          {                              value += line + Environment.NewLine;                          }                          else                          {                              _snippets.Add(key' value);                              key = null;                              value = null;                          }                          continue;                      }                        if (string.IsNullOrWhiteSpace(line)) continue;                      var pair = line.Split(null' 2);                        if (pair.Length == 2)                      {                          _snippets.Add(pair[0]' pair[1]);                      }                        else if (pair[0].EndsWith("::") && pair[0][0] != ':')                      {                          // begin multiline sequence                          key = pair[0].TrimEnd(':');                          value = string.Empty;                      }                  }              }              catch (Exception ex)              {                  Notify.Alert($"{ex.Message} in {SnippetFile()}");              }
Magic Number,MarkdownEdit.SpellCheck,SpellCheckBackgroundRenderer,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\SpellCheck\SpellCheckBackgroundRenderer.cs,Draw,The following statement contains a magic number: const int timeout = 100;
Magic Number,MarkdownEdit.SpellCheck,SpellCheckBackgroundRenderer,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\SpellCheck\SpellCheckBackgroundRenderer.cs,Draw,The following statement contains a magic number: var pen = new Pen(new SolidColorBrush(color)' 0.6);
Magic Number,MarkdownEdit.SpellCheck,SpellCheckBackgroundRenderer,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\SpellCheck\SpellCheckBackgroundRenderer.cs,Draw,The following statement contains a magic number: foreach (var current in ErrorSegments)              {                  foreach (var current2 in BackgroundGeometryBuilder.GetRectsForSegment(textView' current))                  {                      const double num = 2.0;                      var bottomLeft = current2.BottomLeft;                      var bottomRight = current2.BottomRight;                      var count = Math.Max((int)((bottomRight.X - bottomLeft.X) / num) + 1' 4);                      var streamGeometry = new StreamGeometry();                      using (var streamGeometryContext = streamGeometry.Open())                      {                          streamGeometryContext.BeginFigure(bottomLeft' false' false);                          streamGeometryContext.PolyLineTo(CreatePoints(bottomLeft' num' count).ToArray()' true' false);                      }                      streamGeometry.Freeze();                      drawingContext.DrawGeometry(Brushes.Transparent' pen' streamGeometry);                        if (stopwatch.ElapsedMilliseconds > timeout) break;                  }                  if (stopwatch.ElapsedMilliseconds > timeout) break;              }
Magic Number,MarkdownEdit.SpellCheck,SpellCheckBackgroundRenderer,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\SpellCheck\SpellCheckBackgroundRenderer.cs,Draw,The following statement contains a magic number: foreach (var current in ErrorSegments)              {                  foreach (var current2 in BackgroundGeometryBuilder.GetRectsForSegment(textView' current))                  {                      const double num = 2.0;                      var bottomLeft = current2.BottomLeft;                      var bottomRight = current2.BottomRight;                      var count = Math.Max((int)((bottomRight.X - bottomLeft.X) / num) + 1' 4);                      var streamGeometry = new StreamGeometry();                      using (var streamGeometryContext = streamGeometry.Open())                      {                          streamGeometryContext.BeginFigure(bottomLeft' false' false);                          streamGeometryContext.PolyLineTo(CreatePoints(bottomLeft' num' count).ToArray()' true' false);                      }                      streamGeometry.Freeze();                      drawingContext.DrawGeometry(Brushes.Transparent' pen' streamGeometry);                        if (stopwatch.ElapsedMilliseconds > timeout) break;                  }                  if (stopwatch.ElapsedMilliseconds > timeout) break;              }
Magic Number,MarkdownEdit.SpellCheck,SpellCheckBackgroundRenderer,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\SpellCheck\SpellCheckBackgroundRenderer.cs,CreatePoints,The following statement contains a magic number: for (var i = 0; i < count; i++)              {                  yield return new Point(start.X + i * offset' start.Y - ((i + 1) % 2 == 0 ? offset : 0.0));              }
Magic Number,MarkdownEdit.SpellCheck,SpellCheckProvider,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\SpellCheck\SpellCheckProvider.cs,DoSpellCheck,The following statement contains a magic number: foreach (var currentLine in visualLines)              {                  var startIndex = 0;                  var startOfLine = currentLine.FirstDocumentLine.Offset;                  var lengthOfLine = currentLine.LastDocumentLine.EndOffset - startOfLine;                    var originalText = _editor.EditBox.Document.GetText(startOfLine' lengthOfLine);                    originalText = Regex.Replace(originalText' "[\\u2018\\u2019\\u201A\\u201B\\u2032\\u2035]"' "'");                  var textWithout = originalText;                  if (userSettings.SpellCheckIgnoreCodeBlocks)                  {                      if (!AbstractSyntaxTree.PositionSafeForSmartLink(_editor.AbstractSyntaxTree' startOfLine' lengthOfLine))                      {                          // Generally speaking' if it's not safe to insert a link' it's probably something we don't                          // want spell checked.                          continue;                      };                      if (_codeBlock.IsMatch(originalText))                      {                          var firstChar = originalText.FirstOrDefault(c => !char.IsWhiteSpace(c));                          if (firstChar != '-' && firstChar != '*' && !char.IsDigit(firstChar)) textWithout = "";                      }                  }                  if (userSettings.SpellCheckIgnoreMarkupTags) textWithout = _markupTag.Replace(textWithout' "");                  textWithout = _uriFinderRegex.Replace(textWithout' "");                  textWithout = _mardownUri.Replace(textWithout' "");                  if (userSettings.SpellCheckIgnoreCodeBlocks) textWithout = _inlineCode.Replace(textWithout' "");                  var words = _wordSeparatorRegex.Split(textWithout).Where(s => !string.IsNullOrEmpty(s));                  if (userSettings.SpellCheckIgnoreAllCaps) words = words.Where(w => w != w.ToUpper()).ToArray();                  if (userSettings.SpellCheckIgnoreWordsWithDigits) words = words.Where(w => !Regex.Match(w' "\\d").Success).ToArray();                  var errors = 0;                    foreach (var word in words)                  {                      if (errors >= 20) break;                      var trimmedWord = word.Trim('\''' '_'' '-');                        var num = currentLine.FirstDocumentLine.Offset                                + originalText.IndexOf(trimmedWord' startIndex'                                    StringComparison.InvariantCultureIgnoreCase);                        if (!_spellingService.Spell(trimmedWord))                      {                          var textSegment = new TextSegment {StartOffset = num' Length = word.Length};                          _spellCheckRenderer.ErrorSegments.Add(textSegment);                          errors += 1;                      }                        startIndex = originalText.IndexOf(word' startIndex' StringComparison.InvariantCultureIgnoreCase)                                   + word.Length;                  }              }
Magic Number,MarkdownEdit,App,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\App.xaml.cs,AlreadyEditingFile,The following statement contains a magic number: foreach (var process in Process                  .GetProcessesByName(currentProcess.ProcessName)                  .Where(p => p.Id != currentProcess.Id)                  .Where(p => OldSchool.IsEditingFile(p' fileName)))              {                  if (IsIconic(process.MainWindowHandle)) ShowWindowAsync(process.MainWindowHandle' 9 /* SW_RESTORE */);                  SetForegroundWindow(process.MainWindowHandle);                  return true;              }
Missing Default,MarkdownEdit.Controls,DisplayDocumentStructure,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\DisplayDocumentStructure.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.Headings = ((System.Windows.Controls.ListBox)(target));                            #line 16 "..\..\..\Controls\DisplayDocumentStructure.xaml"              this.Headings.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.OnSelected);                            #line default              #line hidden              return;              }
Missing Default,MarkdownEdit.Controls,Donate,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Donate.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 25 "..\..\..\Controls\Donate.xaml"              ((System.Windows.Controls.Canvas)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.CloseOnMouseDown);                            #line default              #line hidden                            #line 26 "..\..\..\Controls\Donate.xaml"              ((System.Windows.Controls.Canvas)(target)).MouseEnter += new System.Windows.Input.MouseEventHandler(this.OnMouseEnter);                            #line default              #line hidden                            #line 27 "..\..\..\Controls\Donate.xaml"              ((System.Windows.Controls.Canvas)(target)).MouseLeave += new System.Windows.Input.MouseEventHandler(this.OnMouseLeave);                            #line default              #line hidden              return;              case 2:                            #line 34 "..\..\..\Controls\Donate.xaml"              ((System.Windows.Controls.Canvas)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.DonateOnMouseDown);                            #line default              #line hidden                            #line 35 "..\..\..\Controls\Donate.xaml"              ((System.Windows.Controls.Canvas)(target)).MouseEnter += new System.Windows.Input.MouseEventHandler(this.OnMouseEnter);                            #line default              #line hidden                            #line 36 "..\..\..\Controls\Donate.xaml"              ((System.Windows.Controls.Canvas)(target)).MouseLeave += new System.Windows.Input.MouseEventHandler(this.OnMouseLeave);                            #line default              #line hidden              return;              }
Missing Default,MarkdownEdit.Controls,FadingPopupControl,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\FadingPopupControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\Controls\FadingPopupControl.xaml"              ((System.Windows.Media.Animation.Storyboard)(target)).Completed += new System.EventHandler(this.StatusFader_Completed);                            #line default              #line hidden              return;              case 2:              this.Popup = ((System.Windows.Controls.Primitives.Popup)(target));              return;              case 3:              this.PopupBackground = ((System.Windows.Controls.Border)(target));              return;              case 4:              this.PopupLabel = ((System.Windows.Controls.Label)(target));              return;              }
Missing Default,MarkdownEdit.Controls,MainWindowViewModel,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\MainWindow.vm.cs,EditorOnPropertyChanged,The following switch statement is missing a default case: switch (ea.PropertyName)              {                  case nameof(Editor.FileName):                  case nameof(Editor.DisplayName):                  case nameof(Editor.IsModified):                      TitleName = $"{App.Title} - {(MainWindow.Editor.IsModified ? "* " : "")}{MainWindow.Editor.DisplayName}";                      break;              }
Missing Default,MarkdownEdit.Controls,SpellingDictionaryComboBox,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\SpellingDictionaryComboBox.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.Languages = ((System.Windows.Controls.ComboBox)(target));              return;              }
Missing Default,MarkdownEdit.Controls,Preview,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Preview.xaml.cs,BrowserPreviewKeyDown,The following switch statement is missing a default case: switch (e.Key)              {                  case Key.O:                      if (Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl))                      {                          ApplicationCommands.Open.Execute(this' Application.Current.MainWindow);                          e.Handled = true;                      }                      break;                    case Key.N:                      if (Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl))                      {                          ApplicationCommands.New.Execute(this' Application.Current.MainWindow);                          e.Handled = true;                      }                      break;                    case Key.F1:                      ApplicationCommands.Help.Execute(this' Application.Current.MainWindow);                      e.Handled = true;                      break;              }
Missing Default,MarkdownEdit.Controls,Preview,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Preview.xaml.cs,BrowserOnMessageHook,The following switch statement is missing a default case: switch (msg)              {                  case 0x021:                      Application.Current.MainWindow.Activate();                      handled = true;                      break;              }
Missing Default,MarkdownEdit.Controls,Preview,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Controls\Preview.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.Browser = ((System.Windows.Controls.WebBrowser)(target));              return;              }
Missing Default,MarkdownEdit.Models,StringExtensions,C:\repos\mike-ward_Markdown-Edit\src\MarkdownEdit\Models\StringExtensions.cs,ConvertEdgeCases,The following switch statement is missing a default case: switch (c)              {                  case 'ı':                      swap = "i";                      break;                    case 'ł':                      swap = "l";                      break;                    case 'Ł':                      swap = toLower ? "l" : "L";                      break;                    case 'đ':                      swap = "d";                      break;                    case 'ß':                      swap = "ss";                      break;                    case 'ø':                      swap = "o";                      break;                    case 'Þ':                      swap = "th";                      break;              }
