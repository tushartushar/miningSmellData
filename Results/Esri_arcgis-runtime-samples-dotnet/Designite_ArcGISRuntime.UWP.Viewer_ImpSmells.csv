Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ArcGISRuntime.Samples.Models,SampleStructureMap,C:\repos\Esri_arcgis-runtime-samples-dotnet\src\ArcGISRuntime.Samples.Shared\Models\SampleStructureMap.cs,Create,Cyclomatic complexity of the method is 16
Long Statement,ArcGISRuntime.UWP.Viewer,MainPage,C:\repos\Esri_arcgis-runtime-samples-dotnet\src\UWP\ArcGISRuntime.UWP.Viewer\MainPage.xaml.cs,Initialize,The length of the statement  "            // Initialize manager that handles all the samples' this will load all the items from samples assembly and related files " is 120.
Long Statement,ArcGISRuntime.UWP.Viewer,SamplePage,C:\repos\Esri_arcgis-runtime-samples-dotnet\src\UWP\ArcGISRuntime.UWP.Viewer\SamplePage.xaml.cs,SaveBitmapToFileAsync,The length of the statement  "            // This stores image to  C:\Users\{user}\AppData\Local\Packages\b13e56ac-7531-429d-baf2-003653d989c1_cc4tdm0yr4r3t\LocalState\Screenshots  " is 137.
Long Statement,ArcGISRuntime.UWP.Viewer,SamplePage,C:\repos\Esri_arcgis-runtime-samples-dotnet\src\UWP\ArcGISRuntime.UWP.Viewer\SamplePage.xaml.cs,SaveBitmapToFileAsync,The length of the statement  "            StorageFolder pictureFolder = await ApplicationData.Current.LocalFolder.CreateFolderAsync("Screenshots"' CreationCollisionOption.OpenIfExists); " is 143.
Long Statement,ArcGISRuntime.UWP.Viewer,SamplePage,C:\repos\Esri_arcgis-runtime-samples-dotnet\src\UWP\ArcGISRuntime.UWP.Viewer\SamplePage.xaml.cs,SaveBitmapToFileAsync,The length of the statement  "                encoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Straight' (uint)image.PixelWidth' (uint)image.PixelHeight' 96' 96' pixels); " is 137.
Long Statement,ArcGISRuntime.Samples.Models,SampleModel,C:\repos\Esri_arcgis-runtime-samples-dotnet\src\ArcGISRuntime.Samples.Shared\Models\SampleModel.cs,Create,The length of the statement  "            if (ApplicationManager.Current.SelectedLanguage == Language.VBNet && System.Type.GetType(sampleModel.ExpectedVbAssemblyQualifiedType' false) == null) " is 149.
Empty Catch Block,ArcGISRuntime.UWP.Viewer.Converters,SampleToBitmapConverter,C:\repos\Esri_arcgis-runtime-samples-dotnet\src\UWP\ArcGISRuntime.UWP.Viewer\Converters\SampleToBitmapConverter.cs,Convert,The method has an empty catch block.
Magic Number,ArcGISRuntime.UWP.Viewer,SamplePage,C:\repos\Esri_arcgis-runtime-samples-dotnet\src\UWP\ArcGISRuntime.UWP.Viewer\SamplePage.xaml.cs,CoreWindow_KeyDown,The following statement contains a magic number: if (ctrl.HasFlag(CoreVirtualKeyStates.Down) && args.VirtualKey == VirtualKey.T)              {                  if (!isResized)                  {                      originalHeight = SampleContainer.ActualHeight;                      originalWidth = SampleContainer.ActualWidth;                      SampleContainer.Height = 600;                      SampleContainer.Width = 800;                      isResized = true;                      return;                  }                    var layoutRoot = new Grid();                  var mapViewImage = new Image() { VerticalAlignment = VerticalAlignment.Top };                  var uiImage = new Image();                    // Create image from the non-map UI                  var uiLayerImage = await CreateBitmapFromElement(SampleContainer.Content as UIElement);                    // Find mapview from the sample. This expects that we use the same name in all samples                  var mapview = (SampleContainer.Content as UserControl).FindName("MyMapView") as MapView;                    // Retrieve general transform                   var tranform = mapview.TransformToVisual((SampleContainer.Content as UIElement));                  // Retrieve the point value relative to the child.                  var currentPoint = tranform.TransformPoint(new Point(0' 0));                  // Setup the location where the mapview was in the view to respect the ui layout                  mapViewImage.Margin = new Thickness(currentPoint.X' currentPoint.Y' 0' 0);                    // Create snapshot from MapView                  var exportImage = await mapview.ExportImageAsync();                    // Set sources to the images and add them to the layout                  uiImage.Source = uiLayerImage;                  mapViewImage.Source = await esriUI.RuntimeImageExtensions.ToImageSourceAsync(exportImage);                  layoutRoot.Children.Add(mapViewImage);                  layoutRoot.Children.Add(uiImage);                    // Add layout to the view                  var sample = SampleContainer.Content;                  SampleContainer.Content = layoutRoot;                    // Wait that images are rendered                  await Task.Delay(TimeSpan.FromSeconds(1));                    // Save image to the disk                  var combinedImage = await CreateBitmapFromElement(SampleContainer.Content as UIElement);                  await SaveBitmapToFileAsync(combinedImage' SampleManager.Current.SelectedSample.SampleName);                    // Reset view                  SampleContainer.Content = sample;                  SampleContainer.Height = originalHeight;                  SampleContainer.Width = originalWidth;                  isResized = false;              }
Magic Number,ArcGISRuntime.UWP.Viewer,SamplePage,C:\repos\Esri_arcgis-runtime-samples-dotnet\src\UWP\ArcGISRuntime.UWP.Viewer\SamplePage.xaml.cs,CoreWindow_KeyDown,The following statement contains a magic number: if (ctrl.HasFlag(CoreVirtualKeyStates.Down) && args.VirtualKey == VirtualKey.T)              {                  if (!isResized)                  {                      originalHeight = SampleContainer.ActualHeight;                      originalWidth = SampleContainer.ActualWidth;                      SampleContainer.Height = 600;                      SampleContainer.Width = 800;                      isResized = true;                      return;                  }                    var layoutRoot = new Grid();                  var mapViewImage = new Image() { VerticalAlignment = VerticalAlignment.Top };                  var uiImage = new Image();                    // Create image from the non-map UI                  var uiLayerImage = await CreateBitmapFromElement(SampleContainer.Content as UIElement);                    // Find mapview from the sample. This expects that we use the same name in all samples                  var mapview = (SampleContainer.Content as UserControl).FindName("MyMapView") as MapView;                    // Retrieve general transform                   var tranform = mapview.TransformToVisual((SampleContainer.Content as UIElement));                  // Retrieve the point value relative to the child.                  var currentPoint = tranform.TransformPoint(new Point(0' 0));                  // Setup the location where the mapview was in the view to respect the ui layout                  mapViewImage.Margin = new Thickness(currentPoint.X' currentPoint.Y' 0' 0);                    // Create snapshot from MapView                  var exportImage = await mapview.ExportImageAsync();                    // Set sources to the images and add them to the layout                  uiImage.Source = uiLayerImage;                  mapViewImage.Source = await esriUI.RuntimeImageExtensions.ToImageSourceAsync(exportImage);                  layoutRoot.Children.Add(mapViewImage);                  layoutRoot.Children.Add(uiImage);                    // Add layout to the view                  var sample = SampleContainer.Content;                  SampleContainer.Content = layoutRoot;                    // Wait that images are rendered                  await Task.Delay(TimeSpan.FromSeconds(1));                    // Save image to the disk                  var combinedImage = await CreateBitmapFromElement(SampleContainer.Content as UIElement);                  await SaveBitmapToFileAsync(combinedImage' SampleManager.Current.SelectedSample.SampleName);                    // Reset view                  SampleContainer.Content = sample;                  SampleContainer.Height = originalHeight;                  SampleContainer.Width = originalWidth;                  isResized = false;              }
Magic Number,ArcGISRuntime.UWP.Viewer,SamplePage,C:\repos\Esri_arcgis-runtime-samples-dotnet\src\UWP\ArcGISRuntime.UWP.Viewer\SamplePage.xaml.cs,SaveBitmapToFileAsync,The following statement contains a magic number: using (var stream = await file.OpenStreamForWriteAsync())              {                  BitmapEncoder encoder = await BitmapEncoder.CreateAsync(BitmapEncoder.PngEncoderId' stream.AsRandomAccessStream());                  var pixelStream = image.PixelBuffer.AsStream();                  byte[] pixels = new byte[image.PixelBuffer.Length];                  await pixelStream.ReadAsync(pixels' 0' pixels.Length);                  encoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Straight' (uint)image.PixelWidth' (uint)image.PixelHeight' 96' 96' pixels);                  await encoder.FlushAsync();              }
Magic Number,ArcGISRuntime.UWP.Viewer,SamplePage,C:\repos\Esri_arcgis-runtime-samples-dotnet\src\UWP\ArcGISRuntime.UWP.Viewer\SamplePage.xaml.cs,SaveBitmapToFileAsync,The following statement contains a magic number: using (var stream = await file.OpenStreamForWriteAsync())              {                  BitmapEncoder encoder = await BitmapEncoder.CreateAsync(BitmapEncoder.PngEncoderId' stream.AsRandomAccessStream());                  var pixelStream = image.PixelBuffer.AsStream();                  byte[] pixels = new byte[image.PixelBuffer.Length];                  await pixelStream.ReadAsync(pixels' 0' pixels.Length);                  encoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Straight' (uint)image.PixelWidth' (uint)image.PixelHeight' 96' 96' pixels);                  await encoder.FlushAsync();              }
