Implementation smell,Namespace,Class,File,Method,Description
Long Method,CSPspEmu.Core.Gpu,TextureCache<TGpuImpl;TTexture>,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\TextureCache.cs,Get,The method has 216 lines of code.
Long Method,CSPspEmu.Core.Gpu.Impl.Opengl,OpenglGpuImpl,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Impl\Opengl\OpenglGpuImpl.cs,Prim,The method has 157 lines of code.
Complex Method,CSPspEmu.Core.Gpu,GpuDisplayList,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\GpuDisplayList.cs,GenerateSwitch,Cyclomatic complexity of the method is 8
Complex Method,CSPspEmu.Core.Gpu,TextureCache<TGpuImpl;TTexture>,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\TextureCache.cs,Get,Cyclomatic complexity of the method is 9
Complex Method,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,DrawBezier,Cyclomatic complexity of the method is 9
Long Parameter List,CSPspEmu.Core.Gpu.Formats,PspWavefrontObjWriter,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Formats\PspWavefrontObjWriter.cs,StartPrimitive,The method has 5 parameters. Parameters: gpuState' primitiveType' vertexAddress' vertexCount' vertexType
Long Parameter List,CSPspEmu.Core.Gpu,GpuImpl,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\GpuImpl.cs,DrawCurvedSurface,The method has 5 parameters. Parameters: GlobalGpuState' GpuStateStruct' Patch' UCount' VCount
Long Parameter List,CSPspEmu.Core.Gpu,IGpuConnector,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\IGpuConnector.cs,Signal,The method has 5 parameters. Parameters: PC' PspGeCallbackData' Signal' Behavior' ExecuteNow
Long Parameter List,CSPspEmu.Core.Gpu.Impl.Opengl,OpenglGpuImpl,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Impl\Opengl\OpenglGpuImpl.cs,_CapturePrimitive,The method has 5 parameters. Parameters: primitiveType' vertexAddress' vetexCount' vertexType' action
Long Identifier,CSPspEmu.Core.Gpu,GpuConfig,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\GpuConfig.cs,,The length of the parameter NoticeUnimplementedGpuCommands is 30.
Long Identifier,CSPspEmu.Core.Gpu.Impl.Opengl.Modules,DrawBufferValue,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Impl\Opengl\Modules\RenderbufferManager.cs,,The length of the parameter _mustUpdateRenderTargetScaleViewport is 36.
Long Statement,CSPspEmu.Core.Gpu,TextureCache<TGpuImpl;TTexture>,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\TextureCache.cs,Get,The length of the statement  "					Console.Error.WriteLine("UPDATE_TEXTURE(TEX={0}'CLUT={1}:{2}:{3}:{4}:0x{5:X}'SIZE={6}x{7}'{8}'Swizzled={9})"' TextureFormat' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask' BufferWidth' Height' BufferWidth' Swizzled); " is 224.
Long Statement,CSPspEmu.Core.Gpu.Impl.Opengl,OpenglGpuImpl,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Impl\Opengl\OpenglGpuImpl.cs,PrepareDrawStateFirst,The length of the statement  "                //Console.WriteLine("{0}' {1}' {2}' {3}' {4}' {5}"' TextureState->Effect' TextureState->ColorComponent' GpuState->BlendingState.Enabled' GpuState->BlendingState.FunctionSource' GpuState->BlendingState.FunctionDestination' GpuState->ColorTestState.Enabled); " is 256.
Long Statement,CSPspEmu.Core.Gpu.Impl.Opengl,OpenglGpuImpl,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Impl\Opengl\OpenglGpuImpl.cs,PrimStart,The length of the statement  "                    //new Bitmap(512' 272).SetChannelsDataInterleaved(LogicOpsRenderTarget.ReadPixels()' BitmapChannelList.RGBA).Save(@"c:\temp\test.png"); " is 135.
Long Statement,CSPspEmu.Core.Gpu.Impl.Opengl,OpenglGpuImpl,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Impl\Opengl\OpenglGpuImpl.cs,Prim,The length of the statement  "                //Console.WriteLine("PRIM: {0}' {1}' Morphing:{2}' Skinning:{3}"' PrimitiveType' VertexCount' MorpingVertexCount' VertexType.RealSkinningWeightCount); " is 150.
Long Statement,CSPspEmu.Core.Gpu.Impl.Opengl,OpenglGpuImpl,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Impl\Opengl\OpenglGpuImpl.cs,PrepareState_Lighting,The length of the statement  "            //	(int)((LightingState->LightModel == LightModelEnum.SeparateSpecularColor) ? LightModelColorControl.SeparateSpecularColor : LightModelColorControl.SingleColor) " is 161.
Long Statement,CSPspEmu.Core.Gpu.Impl.Opengl,OpenglGpuImpl,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Impl\Opengl\OpenglGpuImpl.cs,PrepareState_Texture_Common,The length of the statement  "            //GL.glTexEnv(TextureEnvTarget.TextureEnv' TextureEnvParameter.TextureEnvMode' (int)TextureEnvModeTranslate[(int)TextureState->Effect]); " is 136.
Long Statement,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,DrawBezier,The length of the statement  "            // TODO may need to move inside the loop if indices are used' or find the largest index so we can calculate the size of the vertex list " is 135.
Long Statement,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_PRIM,The length of the statement  "			GpuDisplayList.GpuProcessor.GpuImpl.Prim(GlobalGpuState' GpuDisplayList.GpuStateStructPointer' primitiveType' vertexCount); " is 123.
Magic Number,CSPspEmu.Core.Gpu.Formats,PspWavefrontObjWriter,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Formats\PspWavefrontObjWriter.cs,EndPrimitive,The following statement contains a magic number: switch (_currentPrimitiveType)              {                  case GuPrimitiveType.Sprites:                      _wavefrontObjWriter.AddFaces(4' _primitiveIndices);                      break;                  case GuPrimitiveType.Triangles:                      _wavefrontObjWriter.AddFaces(3' _primitiveIndices);                      break;                  case GuPrimitiveType.TriangleStrip:                  {                      var indices = _primitiveIndices.ToArray();                      var triangleCount = indices.Length - 2;                      for (var n = 0; n < triangleCount; n++)                      {                          _wavefrontObjWriter.AddFace(indices[n + 0]' indices[n + 1]' indices[n + 2]);                      }                  }                      break;                  default:                      _wavefrontObjWriter.StartComment("Can't handle primitive type: " + _currentPrimitiveType);                      break;              }
Magic Number,CSPspEmu.Core.Gpu.Formats,PspWavefrontObjWriter,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Formats\PspWavefrontObjWriter.cs,EndPrimitive,The following statement contains a magic number: switch (_currentPrimitiveType)              {                  case GuPrimitiveType.Sprites:                      _wavefrontObjWriter.AddFaces(4' _primitiveIndices);                      break;                  case GuPrimitiveType.Triangles:                      _wavefrontObjWriter.AddFaces(3' _primitiveIndices);                      break;                  case GuPrimitiveType.TriangleStrip:                  {                      var indices = _primitiveIndices.ToArray();                      var triangleCount = indices.Length - 2;                      for (var n = 0; n < triangleCount; n++)                      {                          _wavefrontObjWriter.AddFace(indices[n + 0]' indices[n + 1]' indices[n + 2]);                      }                  }                      break;                  default:                      _wavefrontObjWriter.StartComment("Can't handle primitive type: " + _currentPrimitiveType);                      break;              }
Magic Number,CSPspEmu.Core.Gpu.Formats,PspWavefrontObjWriter,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Formats\PspWavefrontObjWriter.cs,EndPrimitive,The following statement contains a magic number: switch (_currentPrimitiveType)              {                  case GuPrimitiveType.Sprites:                      _wavefrontObjWriter.AddFaces(4' _primitiveIndices);                      break;                  case GuPrimitiveType.Triangles:                      _wavefrontObjWriter.AddFaces(3' _primitiveIndices);                      break;                  case GuPrimitiveType.TriangleStrip:                  {                      var indices = _primitiveIndices.ToArray();                      var triangleCount = indices.Length - 2;                      for (var n = 0; n < triangleCount; n++)                      {                          _wavefrontObjWriter.AddFace(indices[n + 0]' indices[n + 1]' indices[n + 2]);                      }                  }                      break;                  default:                      _wavefrontObjWriter.StartComment("Can't handle primitive type: " + _currentPrimitiveType);                      break;              }
Magic Number,CSPspEmu.Core.Gpu.Formats,PspWavefrontObjWriter,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Formats\PspWavefrontObjWriter.cs,EndPrimitive,The following statement contains a magic number: switch (_currentPrimitiveType)              {                  case GuPrimitiveType.Sprites:                      _wavefrontObjWriter.AddFaces(4' _primitiveIndices);                      break;                  case GuPrimitiveType.Triangles:                      _wavefrontObjWriter.AddFaces(3' _primitiveIndices);                      break;                  case GuPrimitiveType.TriangleStrip:                  {                      var indices = _primitiveIndices.ToArray();                      var triangleCount = indices.Length - 2;                      for (var n = 0; n < triangleCount; n++)                      {                          _wavefrontObjWriter.AddFace(indices[n + 0]' indices[n + 1]' indices[n + 2]);                      }                  }                      break;                  default:                      _wavefrontObjWriter.StartComment("Can't handle primitive type: " + _currentPrimitiveType);                      break;              }
Magic Number,CSPspEmu.Core.Gpu.Formats,WavefrontObjWriter,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Formats\WavefrontObjWriter.cs,_EndVertices,The following statement contains a magic number: normalize /= 64;
Magic Number,CSPspEmu.Core.Gpu,GpuDisplayList,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\GpuDisplayList.cs,Process,The following statement contains a magic number: while (!Done)              {                  if ((InstructionAddressStall != 0) && (InstructionAddressCurrent >= InstructionAddressStall))                  {                      if (Debug)                          Console.WriteLine(                              "- STALLED --------------------------------------------------------------------");                      Status.SetValue(DisplayListStatusEnum.Stalling);                      while (!StallAddressUpdated.WaitOne(TimeSpan.FromSeconds(2)))                      {                          ConsoleUtils.SaveRestoreConsoleColor(ConsoleColor.Magenta' () =>                          {                              Console.WriteLine("DisplayListQueue.GetCountLock(): {0}"'                                  GpuProcessor.DisplayListQueue.GetCountLock());                              Console.WriteLine("CurrentGpuDisplayList.Status: {0}"' Status.ToStringDefault());                          });                          if (GpuProcessor.Syncing)                          {                              Done = true;                              Status.SetValue(DisplayListStatusEnum.Completed);                              return;                          }                      }                  }                    ProcessInstruction();              }
Magic Number,CSPspEmu.Core.Gpu,GpuDisplayList,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\GpuDisplayList.cs,ReadInstructionAndMoveNext,The following statement contains a magic number: InstructionAddressCurrent += 4;
Magic Number,CSPspEmu.Core.Gpu,TextureCache<TGpuImpl;TTexture>,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\TextureCache.cs,Get,The following statement contains a magic number: ulong Hash1 = TextureAddress | (ulong) ((ClutAddress + ClutDataStart) << 32);
Magic Number,CSPspEmu.Core.Gpu,TextureCache<TGpuImpl;TTexture>,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\TextureCache.cs,Get,The following statement contains a magic number: if (Recheck)              {                  //Console.Write(".");                    //Console.WriteLine("{0:X}"' ClutAddress);                    var TextureFormat = TextureState->PixelFormat;                  //var Width = TextureState->Mipmap0.TextureWidth;                    int BufferWidth = TextureState->Mipmap0.BufferWidth;                    // FAKE!                  //BufferWidth = TextureState->Mipmap0.TextureWidth;                    var Height = TextureState->Mipmap0.TextureHeight;                  var TextureDataSize = PixelFormatDecoder.GetPixelsSize(TextureFormat' BufferWidth * Height);                  if (ClutState->NumberOfColors > 256)                  {                      ClutState->NumberOfColors = 256;                  }                  var ClutDataSize = PixelFormatDecoder.GetPixelsSize(ClutFormat' ClutState->NumberOfColors);                  var ClutCount = ClutState->NumberOfColors;                  var ClutShift = ClutState->Shift;                  var ClutMask = ClutState->Mask;                    //Console.WriteLine(TextureFormat);                    // INVALID TEXTURE                  if (!PspMemory.IsRangeValid(TextureAddress' TextureDataSize) || TextureDataSize > 2048 * 2048 * 4)                  {                      Console.Error.WriteLineColored(ConsoleColor.DarkRed'                          "UPDATE_TEXTURE(TEX={0}'CLUT={1}:{2}:{3}:{4}:0x{5:X}'SIZE={6}x{7}'{8}'Swizzled={9})"'                          TextureFormat' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask' BufferWidth' Height'                          BufferWidth' Swizzled);                      Console.Error.WriteLineColored(ConsoleColor.DarkRed'                          "Invalid TEXTURE! TextureAddress=0x{0:X}' TextureDataSize={1}"' TextureAddress'                          TextureDataSize);                      if (InvalidTexture == null)                      {                          InvalidTexture = new TTexture();                          InvalidTexture.Init(GpuImpl);                            int InvalidTextureWidth = 2' InvalidTextureHeight = 2;                          int InvalidTextureSize = InvalidTextureWidth * InvalidTextureHeight;                          var Data = new OutputPixel[InvalidTextureSize];                          fixed (OutputPixel* DataPtr = Data)                          {                              var Color1 = OutputPixel.FromRgba(0xFF' 0x00' 0x00' 0xFF);                              var Color2 = OutputPixel.FromRgba(0x00' 0x00' 0xFF' 0xFF);                              for (int n = 0; n < InvalidTextureSize; n++)                              {                                  DataPtr[n] = ((n & 1) != 0) ? Color1 : Color2;                              }                              InvalidTexture.SetData(Data' InvalidTextureWidth' InvalidTextureHeight);                          }                      }                      return InvalidTexture;                  }                    //Console.WriteLine("TextureAddress=0x{0:X}' TextureDataSize=0x{1:X}"' TextureAddress' TextureDataSize);                    byte* TexturePointer = null;                  byte* ClutPointer = null;                    try                  {                      TexturePointer = (byte*) PspMemory.PspAddressToPointerSafe(TextureAddress);                      ClutPointer = (byte*) PspMemory.PspAddressToPointerSafe(ClutAddress);                  }                  catch (PspMemory.InvalidAddressException InvalidAddressException)                  {                      throw(InvalidAddressException);                  }                    TextureCacheKey TextureCacheKey = new TextureCacheKey()                  {                      TextureAddress = TextureAddress'                      TextureFormat = TextureFormat'                      TextureHash = FastHash(TexturePointer' TextureDataSize)'                        ClutHash = FastHash(&(ClutPointer[ClutDataStart])' ClutDataSize)'                      ClutAddress = ClutAddress'                      ClutFormat = ClutFormat'                      ClutStart = ClutStart'                      ClutShift = ClutShift'                      ClutMask = ClutMask'                      Swizzled = Swizzled'                        ColorTestEnabled = GpuState->ColorTestState.Enabled'                      ColorTestRef = GpuState->ColorTestState.Ref'                      ColorTestMask = GpuState->ColorTestState.Mask'                      ColorTestFunction = GpuState->ColorTestState.Function'                  };                    if (Texture == null || (!Texture.TextureCacheKey.Equals(TextureCacheKey)))                  {                      string TextureName = "texture_" + TextureCacheKey.TextureHash + "_" + TextureCacheKey.ClutHash +                                           "_" + TextureFormat + "_" + ClutFormat + "_" + BufferWidth + "x" + Height +                                           "_" + Swizzled;  #if DEBUG_TEXTURE_CACHE    					Console.Error.WriteLine("UPDATE_TEXTURE(TEX={0}'CLUT={1}:{2}:{3}:{4}:0x{5:X}'SIZE={6}x{7}'{8}'Swizzled={9})"' TextureFormat' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask' BufferWidth' Height' BufferWidth' Swizzled);  #endif                      Texture = new TTexture();                      Texture.Init(GpuImpl);                      Texture.TextureCacheKey = TextureCacheKey;                      //Texture.Hash = Hash1;                        {                          //int TextureWidth = Math.Max(BufferWidth' Height);                          //int TextureHeight = Math.Max(BufferWidth' Height);                          int TextureWidth = BufferWidth;                          int TextureHeight = Height;                          int TextureWidthHeight = TextureWidth * TextureHeight;                            fixed (OutputPixel* TexturePixelsPointer = DecodedTextureBuffer)                          {                              if (Swizzled)                              {                                  fixed (byte* SwizzlingBufferPointer = SwizzlingBuffer)                                  {                                      PointerUtils.Memcpy(SwizzlingBuffer' TexturePointer' TextureDataSize);                                      PixelFormatDecoder.UnswizzleInline(TextureFormat' (void*) SwizzlingBufferPointer'                                          BufferWidth' Height);                                      PixelFormatDecoder.Decode(                                          TextureFormat' (void*) SwizzlingBufferPointer' TexturePixelsPointer'                                          BufferWidth' Height'                                          ClutPointer' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask'                                          strideWidth: PixelFormatDecoder.GetPixelsSize(TextureFormat' TextureWidth)                                      );                                  }                              }                              else                              {                                  PixelFormatDecoder.Decode(                                      TextureFormat' (void*) TexturePointer' TexturePixelsPointer' BufferWidth' Height'                                      ClutPointer' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask'                                      strideWidth: PixelFormatDecoder.GetPixelsSize(TextureFormat' TextureWidth)                                  );                              }                                if (TextureCacheKey.ColorTestEnabled)                              {                                  byte EqualValue' NotEqualValue;                                    switch (TextureCacheKey.ColorTestFunction)                                  {                                      case ColorTestFunctionEnum.GuAlways:                                          EqualValue = 0xFF;                                          NotEqualValue = 0xFF;                                          break;                                      case ColorTestFunctionEnum.GuNever:                                          EqualValue = 0x00;                                          NotEqualValue = 0x00;                                          break;                                      case ColorTestFunctionEnum.GuEqual:                                          EqualValue = 0xFF;                                          NotEqualValue = 0x00;                                          break;                                      case ColorTestFunctionEnum.GuNotequal:                                          EqualValue = 0x00;                                          NotEqualValue = 0xFF;                                          break;                                      default: throw(new NotImplementedException());                                  }                                    ConsoleUtils.SaveRestoreConsoleState(() =>                                  {                                      Console.BackgroundColor = ConsoleColor.Red;                                      Console.ForegroundColor = ConsoleColor.Yellow;                                      Console.Error.WriteLine("{0} : {1}' {2} : ref:{3} : mask:{4}"'                                          TextureCacheKey.ColorTestFunction' EqualValue' NotEqualValue'                                          TextureCacheKey.ColorTestRef' TextureCacheKey.ColorTestMask);                                  });                                    for (int n = 0; n < TextureWidthHeight; n++)                                  {                                      if ((TexturePixelsPointer[n] & TextureCacheKey.ColorTestMask).Equals(                                          (TextureCacheKey.ColorTestRef & TextureCacheKey.ColorTestMask)))                                      {                                          TexturePixelsPointer[n].A = EqualValue;                                      }                                      else                                      {                                          TexturePixelsPointer[n].A = NotEqualValue;                                      }                                      if (TexturePixelsPointer[n].A == 0)                                      {                                          //Console.Write("yup!");                                      }                                  }                              }                                var TextureInfo = new TextureHookInfo()                              {                                  TextureCacheKey = TextureCacheKey'                                  Data = DecodedTextureBuffer'                                  Width = TextureWidth'                                  Height = TextureHeight                              };                              MessageBus.Dispatch(TextureInfo);                                var Result = Texture.SetData(TextureInfo.Data' TextureInfo.Width' TextureInfo.Height);                          }                      }                      if (Cache.ContainsKey(Hash1))                      {                          Cache[Hash1].Dispose();                      }                      Cache[Hash1] = Texture;                  }              }
Magic Number,CSPspEmu.Core.Gpu,TextureCache<TGpuImpl;TTexture>,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\TextureCache.cs,Get,The following statement contains a magic number: if (Recheck)              {                  //Console.Write(".");                    //Console.WriteLine("{0:X}"' ClutAddress);                    var TextureFormat = TextureState->PixelFormat;                  //var Width = TextureState->Mipmap0.TextureWidth;                    int BufferWidth = TextureState->Mipmap0.BufferWidth;                    // FAKE!                  //BufferWidth = TextureState->Mipmap0.TextureWidth;                    var Height = TextureState->Mipmap0.TextureHeight;                  var TextureDataSize = PixelFormatDecoder.GetPixelsSize(TextureFormat' BufferWidth * Height);                  if (ClutState->NumberOfColors > 256)                  {                      ClutState->NumberOfColors = 256;                  }                  var ClutDataSize = PixelFormatDecoder.GetPixelsSize(ClutFormat' ClutState->NumberOfColors);                  var ClutCount = ClutState->NumberOfColors;                  var ClutShift = ClutState->Shift;                  var ClutMask = ClutState->Mask;                    //Console.WriteLine(TextureFormat);                    // INVALID TEXTURE                  if (!PspMemory.IsRangeValid(TextureAddress' TextureDataSize) || TextureDataSize > 2048 * 2048 * 4)                  {                      Console.Error.WriteLineColored(ConsoleColor.DarkRed'                          "UPDATE_TEXTURE(TEX={0}'CLUT={1}:{2}:{3}:{4}:0x{5:X}'SIZE={6}x{7}'{8}'Swizzled={9})"'                          TextureFormat' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask' BufferWidth' Height'                          BufferWidth' Swizzled);                      Console.Error.WriteLineColored(ConsoleColor.DarkRed'                          "Invalid TEXTURE! TextureAddress=0x{0:X}' TextureDataSize={1}"' TextureAddress'                          TextureDataSize);                      if (InvalidTexture == null)                      {                          InvalidTexture = new TTexture();                          InvalidTexture.Init(GpuImpl);                            int InvalidTextureWidth = 2' InvalidTextureHeight = 2;                          int InvalidTextureSize = InvalidTextureWidth * InvalidTextureHeight;                          var Data = new OutputPixel[InvalidTextureSize];                          fixed (OutputPixel* DataPtr = Data)                          {                              var Color1 = OutputPixel.FromRgba(0xFF' 0x00' 0x00' 0xFF);                              var Color2 = OutputPixel.FromRgba(0x00' 0x00' 0xFF' 0xFF);                              for (int n = 0; n < InvalidTextureSize; n++)                              {                                  DataPtr[n] = ((n & 1) != 0) ? Color1 : Color2;                              }                              InvalidTexture.SetData(Data' InvalidTextureWidth' InvalidTextureHeight);                          }                      }                      return InvalidTexture;                  }                    //Console.WriteLine("TextureAddress=0x{0:X}' TextureDataSize=0x{1:X}"' TextureAddress' TextureDataSize);                    byte* TexturePointer = null;                  byte* ClutPointer = null;                    try                  {                      TexturePointer = (byte*) PspMemory.PspAddressToPointerSafe(TextureAddress);                      ClutPointer = (byte*) PspMemory.PspAddressToPointerSafe(ClutAddress);                  }                  catch (PspMemory.InvalidAddressException InvalidAddressException)                  {                      throw(InvalidAddressException);                  }                    TextureCacheKey TextureCacheKey = new TextureCacheKey()                  {                      TextureAddress = TextureAddress'                      TextureFormat = TextureFormat'                      TextureHash = FastHash(TexturePointer' TextureDataSize)'                        ClutHash = FastHash(&(ClutPointer[ClutDataStart])' ClutDataSize)'                      ClutAddress = ClutAddress'                      ClutFormat = ClutFormat'                      ClutStart = ClutStart'                      ClutShift = ClutShift'                      ClutMask = ClutMask'                      Swizzled = Swizzled'                        ColorTestEnabled = GpuState->ColorTestState.Enabled'                      ColorTestRef = GpuState->ColorTestState.Ref'                      ColorTestMask = GpuState->ColorTestState.Mask'                      ColorTestFunction = GpuState->ColorTestState.Function'                  };                    if (Texture == null || (!Texture.TextureCacheKey.Equals(TextureCacheKey)))                  {                      string TextureName = "texture_" + TextureCacheKey.TextureHash + "_" + TextureCacheKey.ClutHash +                                           "_" + TextureFormat + "_" + ClutFormat + "_" + BufferWidth + "x" + Height +                                           "_" + Swizzled;  #if DEBUG_TEXTURE_CACHE    					Console.Error.WriteLine("UPDATE_TEXTURE(TEX={0}'CLUT={1}:{2}:{3}:{4}:0x{5:X}'SIZE={6}x{7}'{8}'Swizzled={9})"' TextureFormat' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask' BufferWidth' Height' BufferWidth' Swizzled);  #endif                      Texture = new TTexture();                      Texture.Init(GpuImpl);                      Texture.TextureCacheKey = TextureCacheKey;                      //Texture.Hash = Hash1;                        {                          //int TextureWidth = Math.Max(BufferWidth' Height);                          //int TextureHeight = Math.Max(BufferWidth' Height);                          int TextureWidth = BufferWidth;                          int TextureHeight = Height;                          int TextureWidthHeight = TextureWidth * TextureHeight;                            fixed (OutputPixel* TexturePixelsPointer = DecodedTextureBuffer)                          {                              if (Swizzled)                              {                                  fixed (byte* SwizzlingBufferPointer = SwizzlingBuffer)                                  {                                      PointerUtils.Memcpy(SwizzlingBuffer' TexturePointer' TextureDataSize);                                      PixelFormatDecoder.UnswizzleInline(TextureFormat' (void*) SwizzlingBufferPointer'                                          BufferWidth' Height);                                      PixelFormatDecoder.Decode(                                          TextureFormat' (void*) SwizzlingBufferPointer' TexturePixelsPointer'                                          BufferWidth' Height'                                          ClutPointer' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask'                                          strideWidth: PixelFormatDecoder.GetPixelsSize(TextureFormat' TextureWidth)                                      );                                  }                              }                              else                              {                                  PixelFormatDecoder.Decode(                                      TextureFormat' (void*) TexturePointer' TexturePixelsPointer' BufferWidth' Height'                                      ClutPointer' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask'                                      strideWidth: PixelFormatDecoder.GetPixelsSize(TextureFormat' TextureWidth)                                  );                              }                                if (TextureCacheKey.ColorTestEnabled)                              {                                  byte EqualValue' NotEqualValue;                                    switch (TextureCacheKey.ColorTestFunction)                                  {                                      case ColorTestFunctionEnum.GuAlways:                                          EqualValue = 0xFF;                                          NotEqualValue = 0xFF;                                          break;                                      case ColorTestFunctionEnum.GuNever:                                          EqualValue = 0x00;                                          NotEqualValue = 0x00;                                          break;                                      case ColorTestFunctionEnum.GuEqual:                                          EqualValue = 0xFF;                                          NotEqualValue = 0x00;                                          break;                                      case ColorTestFunctionEnum.GuNotequal:                                          EqualValue = 0x00;                                          NotEqualValue = 0xFF;                                          break;                                      default: throw(new NotImplementedException());                                  }                                    ConsoleUtils.SaveRestoreConsoleState(() =>                                  {                                      Console.BackgroundColor = ConsoleColor.Red;                                      Console.ForegroundColor = ConsoleColor.Yellow;                                      Console.Error.WriteLine("{0} : {1}' {2} : ref:{3} : mask:{4}"'                                          TextureCacheKey.ColorTestFunction' EqualValue' NotEqualValue'                                          TextureCacheKey.ColorTestRef' TextureCacheKey.ColorTestMask);                                  });                                    for (int n = 0; n < TextureWidthHeight; n++)                                  {                                      if ((TexturePixelsPointer[n] & TextureCacheKey.ColorTestMask).Equals(                                          (TextureCacheKey.ColorTestRef & TextureCacheKey.ColorTestMask)))                                      {                                          TexturePixelsPointer[n].A = EqualValue;                                      }                                      else                                      {                                          TexturePixelsPointer[n].A = NotEqualValue;                                      }                                      if (TexturePixelsPointer[n].A == 0)                                      {                                          //Console.Write("yup!");                                      }                                  }                              }                                var TextureInfo = new TextureHookInfo()                              {                                  TextureCacheKey = TextureCacheKey'                                  Data = DecodedTextureBuffer'                                  Width = TextureWidth'                                  Height = TextureHeight                              };                              MessageBus.Dispatch(TextureInfo);                                var Result = Texture.SetData(TextureInfo.Data' TextureInfo.Width' TextureInfo.Height);                          }                      }                      if (Cache.ContainsKey(Hash1))                      {                          Cache[Hash1].Dispose();                      }                      Cache[Hash1] = Texture;                  }              }
Magic Number,CSPspEmu.Core.Gpu,TextureCache<TGpuImpl;TTexture>,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\TextureCache.cs,Get,The following statement contains a magic number: if (Recheck)              {                  //Console.Write(".");                    //Console.WriteLine("{0:X}"' ClutAddress);                    var TextureFormat = TextureState->PixelFormat;                  //var Width = TextureState->Mipmap0.TextureWidth;                    int BufferWidth = TextureState->Mipmap0.BufferWidth;                    // FAKE!                  //BufferWidth = TextureState->Mipmap0.TextureWidth;                    var Height = TextureState->Mipmap0.TextureHeight;                  var TextureDataSize = PixelFormatDecoder.GetPixelsSize(TextureFormat' BufferWidth * Height);                  if (ClutState->NumberOfColors > 256)                  {                      ClutState->NumberOfColors = 256;                  }                  var ClutDataSize = PixelFormatDecoder.GetPixelsSize(ClutFormat' ClutState->NumberOfColors);                  var ClutCount = ClutState->NumberOfColors;                  var ClutShift = ClutState->Shift;                  var ClutMask = ClutState->Mask;                    //Console.WriteLine(TextureFormat);                    // INVALID TEXTURE                  if (!PspMemory.IsRangeValid(TextureAddress' TextureDataSize) || TextureDataSize > 2048 * 2048 * 4)                  {                      Console.Error.WriteLineColored(ConsoleColor.DarkRed'                          "UPDATE_TEXTURE(TEX={0}'CLUT={1}:{2}:{3}:{4}:0x{5:X}'SIZE={6}x{7}'{8}'Swizzled={9})"'                          TextureFormat' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask' BufferWidth' Height'                          BufferWidth' Swizzled);                      Console.Error.WriteLineColored(ConsoleColor.DarkRed'                          "Invalid TEXTURE! TextureAddress=0x{0:X}' TextureDataSize={1}"' TextureAddress'                          TextureDataSize);                      if (InvalidTexture == null)                      {                          InvalidTexture = new TTexture();                          InvalidTexture.Init(GpuImpl);                            int InvalidTextureWidth = 2' InvalidTextureHeight = 2;                          int InvalidTextureSize = InvalidTextureWidth * InvalidTextureHeight;                          var Data = new OutputPixel[InvalidTextureSize];                          fixed (OutputPixel* DataPtr = Data)                          {                              var Color1 = OutputPixel.FromRgba(0xFF' 0x00' 0x00' 0xFF);                              var Color2 = OutputPixel.FromRgba(0x00' 0x00' 0xFF' 0xFF);                              for (int n = 0; n < InvalidTextureSize; n++)                              {                                  DataPtr[n] = ((n & 1) != 0) ? Color1 : Color2;                              }                              InvalidTexture.SetData(Data' InvalidTextureWidth' InvalidTextureHeight);                          }                      }                      return InvalidTexture;                  }                    //Console.WriteLine("TextureAddress=0x{0:X}' TextureDataSize=0x{1:X}"' TextureAddress' TextureDataSize);                    byte* TexturePointer = null;                  byte* ClutPointer = null;                    try                  {                      TexturePointer = (byte*) PspMemory.PspAddressToPointerSafe(TextureAddress);                      ClutPointer = (byte*) PspMemory.PspAddressToPointerSafe(ClutAddress);                  }                  catch (PspMemory.InvalidAddressException InvalidAddressException)                  {                      throw(InvalidAddressException);                  }                    TextureCacheKey TextureCacheKey = new TextureCacheKey()                  {                      TextureAddress = TextureAddress'                      TextureFormat = TextureFormat'                      TextureHash = FastHash(TexturePointer' TextureDataSize)'                        ClutHash = FastHash(&(ClutPointer[ClutDataStart])' ClutDataSize)'                      ClutAddress = ClutAddress'                      ClutFormat = ClutFormat'                      ClutStart = ClutStart'                      ClutShift = ClutShift'                      ClutMask = ClutMask'                      Swizzled = Swizzled'                        ColorTestEnabled = GpuState->ColorTestState.Enabled'                      ColorTestRef = GpuState->ColorTestState.Ref'                      ColorTestMask = GpuState->ColorTestState.Mask'                      ColorTestFunction = GpuState->ColorTestState.Function'                  };                    if (Texture == null || (!Texture.TextureCacheKey.Equals(TextureCacheKey)))                  {                      string TextureName = "texture_" + TextureCacheKey.TextureHash + "_" + TextureCacheKey.ClutHash +                                           "_" + TextureFormat + "_" + ClutFormat + "_" + BufferWidth + "x" + Height +                                           "_" + Swizzled;  #if DEBUG_TEXTURE_CACHE    					Console.Error.WriteLine("UPDATE_TEXTURE(TEX={0}'CLUT={1}:{2}:{3}:{4}:0x{5:X}'SIZE={6}x{7}'{8}'Swizzled={9})"' TextureFormat' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask' BufferWidth' Height' BufferWidth' Swizzled);  #endif                      Texture = new TTexture();                      Texture.Init(GpuImpl);                      Texture.TextureCacheKey = TextureCacheKey;                      //Texture.Hash = Hash1;                        {                          //int TextureWidth = Math.Max(BufferWidth' Height);                          //int TextureHeight = Math.Max(BufferWidth' Height);                          int TextureWidth = BufferWidth;                          int TextureHeight = Height;                          int TextureWidthHeight = TextureWidth * TextureHeight;                            fixed (OutputPixel* TexturePixelsPointer = DecodedTextureBuffer)                          {                              if (Swizzled)                              {                                  fixed (byte* SwizzlingBufferPointer = SwizzlingBuffer)                                  {                                      PointerUtils.Memcpy(SwizzlingBuffer' TexturePointer' TextureDataSize);                                      PixelFormatDecoder.UnswizzleInline(TextureFormat' (void*) SwizzlingBufferPointer'                                          BufferWidth' Height);                                      PixelFormatDecoder.Decode(                                          TextureFormat' (void*) SwizzlingBufferPointer' TexturePixelsPointer'                                          BufferWidth' Height'                                          ClutPointer' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask'                                          strideWidth: PixelFormatDecoder.GetPixelsSize(TextureFormat' TextureWidth)                                      );                                  }                              }                              else                              {                                  PixelFormatDecoder.Decode(                                      TextureFormat' (void*) TexturePointer' TexturePixelsPointer' BufferWidth' Height'                                      ClutPointer' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask'                                      strideWidth: PixelFormatDecoder.GetPixelsSize(TextureFormat' TextureWidth)                                  );                              }                                if (TextureCacheKey.ColorTestEnabled)                              {                                  byte EqualValue' NotEqualValue;                                    switch (TextureCacheKey.ColorTestFunction)                                  {                                      case ColorTestFunctionEnum.GuAlways:                                          EqualValue = 0xFF;                                          NotEqualValue = 0xFF;                                          break;                                      case ColorTestFunctionEnum.GuNever:                                          EqualValue = 0x00;                                          NotEqualValue = 0x00;                                          break;                                      case ColorTestFunctionEnum.GuEqual:                                          EqualValue = 0xFF;                                          NotEqualValue = 0x00;                                          break;                                      case ColorTestFunctionEnum.GuNotequal:                                          EqualValue = 0x00;                                          NotEqualValue = 0xFF;                                          break;                                      default: throw(new NotImplementedException());                                  }                                    ConsoleUtils.SaveRestoreConsoleState(() =>                                  {                                      Console.BackgroundColor = ConsoleColor.Red;                                      Console.ForegroundColor = ConsoleColor.Yellow;                                      Console.Error.WriteLine("{0} : {1}' {2} : ref:{3} : mask:{4}"'                                          TextureCacheKey.ColorTestFunction' EqualValue' NotEqualValue'                                          TextureCacheKey.ColorTestRef' TextureCacheKey.ColorTestMask);                                  });                                    for (int n = 0; n < TextureWidthHeight; n++)                                  {                                      if ((TexturePixelsPointer[n] & TextureCacheKey.ColorTestMask).Equals(                                          (TextureCacheKey.ColorTestRef & TextureCacheKey.ColorTestMask)))                                      {                                          TexturePixelsPointer[n].A = EqualValue;                                      }                                      else                                      {                                          TexturePixelsPointer[n].A = NotEqualValue;                                      }                                      if (TexturePixelsPointer[n].A == 0)                                      {                                          //Console.Write("yup!");                                      }                                  }                              }                                var TextureInfo = new TextureHookInfo()                              {                                  TextureCacheKey = TextureCacheKey'                                  Data = DecodedTextureBuffer'                                  Width = TextureWidth'                                  Height = TextureHeight                              };                              MessageBus.Dispatch(TextureInfo);                                var Result = Texture.SetData(TextureInfo.Data' TextureInfo.Width' TextureInfo.Height);                          }                      }                      if (Cache.ContainsKey(Hash1))                      {                          Cache[Hash1].Dispose();                      }                      Cache[Hash1] = Texture;                  }              }
Magic Number,CSPspEmu.Core.Gpu,TextureCache<TGpuImpl;TTexture>,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\TextureCache.cs,Get,The following statement contains a magic number: if (Recheck)              {                  //Console.Write(".");                    //Console.WriteLine("{0:X}"' ClutAddress);                    var TextureFormat = TextureState->PixelFormat;                  //var Width = TextureState->Mipmap0.TextureWidth;                    int BufferWidth = TextureState->Mipmap0.BufferWidth;                    // FAKE!                  //BufferWidth = TextureState->Mipmap0.TextureWidth;                    var Height = TextureState->Mipmap0.TextureHeight;                  var TextureDataSize = PixelFormatDecoder.GetPixelsSize(TextureFormat' BufferWidth * Height);                  if (ClutState->NumberOfColors > 256)                  {                      ClutState->NumberOfColors = 256;                  }                  var ClutDataSize = PixelFormatDecoder.GetPixelsSize(ClutFormat' ClutState->NumberOfColors);                  var ClutCount = ClutState->NumberOfColors;                  var ClutShift = ClutState->Shift;                  var ClutMask = ClutState->Mask;                    //Console.WriteLine(TextureFormat);                    // INVALID TEXTURE                  if (!PspMemory.IsRangeValid(TextureAddress' TextureDataSize) || TextureDataSize > 2048 * 2048 * 4)                  {                      Console.Error.WriteLineColored(ConsoleColor.DarkRed'                          "UPDATE_TEXTURE(TEX={0}'CLUT={1}:{2}:{3}:{4}:0x{5:X}'SIZE={6}x{7}'{8}'Swizzled={9})"'                          TextureFormat' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask' BufferWidth' Height'                          BufferWidth' Swizzled);                      Console.Error.WriteLineColored(ConsoleColor.DarkRed'                          "Invalid TEXTURE! TextureAddress=0x{0:X}' TextureDataSize={1}"' TextureAddress'                          TextureDataSize);                      if (InvalidTexture == null)                      {                          InvalidTexture = new TTexture();                          InvalidTexture.Init(GpuImpl);                            int InvalidTextureWidth = 2' InvalidTextureHeight = 2;                          int InvalidTextureSize = InvalidTextureWidth * InvalidTextureHeight;                          var Data = new OutputPixel[InvalidTextureSize];                          fixed (OutputPixel* DataPtr = Data)                          {                              var Color1 = OutputPixel.FromRgba(0xFF' 0x00' 0x00' 0xFF);                              var Color2 = OutputPixel.FromRgba(0x00' 0x00' 0xFF' 0xFF);                              for (int n = 0; n < InvalidTextureSize; n++)                              {                                  DataPtr[n] = ((n & 1) != 0) ? Color1 : Color2;                              }                              InvalidTexture.SetData(Data' InvalidTextureWidth' InvalidTextureHeight);                          }                      }                      return InvalidTexture;                  }                    //Console.WriteLine("TextureAddress=0x{0:X}' TextureDataSize=0x{1:X}"' TextureAddress' TextureDataSize);                    byte* TexturePointer = null;                  byte* ClutPointer = null;                    try                  {                      TexturePointer = (byte*) PspMemory.PspAddressToPointerSafe(TextureAddress);                      ClutPointer = (byte*) PspMemory.PspAddressToPointerSafe(ClutAddress);                  }                  catch (PspMemory.InvalidAddressException InvalidAddressException)                  {                      throw(InvalidAddressException);                  }                    TextureCacheKey TextureCacheKey = new TextureCacheKey()                  {                      TextureAddress = TextureAddress'                      TextureFormat = TextureFormat'                      TextureHash = FastHash(TexturePointer' TextureDataSize)'                        ClutHash = FastHash(&(ClutPointer[ClutDataStart])' ClutDataSize)'                      ClutAddress = ClutAddress'                      ClutFormat = ClutFormat'                      ClutStart = ClutStart'                      ClutShift = ClutShift'                      ClutMask = ClutMask'                      Swizzled = Swizzled'                        ColorTestEnabled = GpuState->ColorTestState.Enabled'                      ColorTestRef = GpuState->ColorTestState.Ref'                      ColorTestMask = GpuState->ColorTestState.Mask'                      ColorTestFunction = GpuState->ColorTestState.Function'                  };                    if (Texture == null || (!Texture.TextureCacheKey.Equals(TextureCacheKey)))                  {                      string TextureName = "texture_" + TextureCacheKey.TextureHash + "_" + TextureCacheKey.ClutHash +                                           "_" + TextureFormat + "_" + ClutFormat + "_" + BufferWidth + "x" + Height +                                           "_" + Swizzled;  #if DEBUG_TEXTURE_CACHE    					Console.Error.WriteLine("UPDATE_TEXTURE(TEX={0}'CLUT={1}:{2}:{3}:{4}:0x{5:X}'SIZE={6}x{7}'{8}'Swizzled={9})"' TextureFormat' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask' BufferWidth' Height' BufferWidth' Swizzled);  #endif                      Texture = new TTexture();                      Texture.Init(GpuImpl);                      Texture.TextureCacheKey = TextureCacheKey;                      //Texture.Hash = Hash1;                        {                          //int TextureWidth = Math.Max(BufferWidth' Height);                          //int TextureHeight = Math.Max(BufferWidth' Height);                          int TextureWidth = BufferWidth;                          int TextureHeight = Height;                          int TextureWidthHeight = TextureWidth * TextureHeight;                            fixed (OutputPixel* TexturePixelsPointer = DecodedTextureBuffer)                          {                              if (Swizzled)                              {                                  fixed (byte* SwizzlingBufferPointer = SwizzlingBuffer)                                  {                                      PointerUtils.Memcpy(SwizzlingBuffer' TexturePointer' TextureDataSize);                                      PixelFormatDecoder.UnswizzleInline(TextureFormat' (void*) SwizzlingBufferPointer'                                          BufferWidth' Height);                                      PixelFormatDecoder.Decode(                                          TextureFormat' (void*) SwizzlingBufferPointer' TexturePixelsPointer'                                          BufferWidth' Height'                                          ClutPointer' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask'                                          strideWidth: PixelFormatDecoder.GetPixelsSize(TextureFormat' TextureWidth)                                      );                                  }                              }                              else                              {                                  PixelFormatDecoder.Decode(                                      TextureFormat' (void*) TexturePointer' TexturePixelsPointer' BufferWidth' Height'                                      ClutPointer' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask'                                      strideWidth: PixelFormatDecoder.GetPixelsSize(TextureFormat' TextureWidth)                                  );                              }                                if (TextureCacheKey.ColorTestEnabled)                              {                                  byte EqualValue' NotEqualValue;                                    switch (TextureCacheKey.ColorTestFunction)                                  {                                      case ColorTestFunctionEnum.GuAlways:                                          EqualValue = 0xFF;                                          NotEqualValue = 0xFF;                                          break;                                      case ColorTestFunctionEnum.GuNever:                                          EqualValue = 0x00;                                          NotEqualValue = 0x00;                                          break;                                      case ColorTestFunctionEnum.GuEqual:                                          EqualValue = 0xFF;                                          NotEqualValue = 0x00;                                          break;                                      case ColorTestFunctionEnum.GuNotequal:                                          EqualValue = 0x00;                                          NotEqualValue = 0xFF;                                          break;                                      default: throw(new NotImplementedException());                                  }                                    ConsoleUtils.SaveRestoreConsoleState(() =>                                  {                                      Console.BackgroundColor = ConsoleColor.Red;                                      Console.ForegroundColor = ConsoleColor.Yellow;                                      Console.Error.WriteLine("{0} : {1}' {2} : ref:{3} : mask:{4}"'                                          TextureCacheKey.ColorTestFunction' EqualValue' NotEqualValue'                                          TextureCacheKey.ColorTestRef' TextureCacheKey.ColorTestMask);                                  });                                    for (int n = 0; n < TextureWidthHeight; n++)                                  {                                      if ((TexturePixelsPointer[n] & TextureCacheKey.ColorTestMask).Equals(                                          (TextureCacheKey.ColorTestRef & TextureCacheKey.ColorTestMask)))                                      {                                          TexturePixelsPointer[n].A = EqualValue;                                      }                                      else                                      {                                          TexturePixelsPointer[n].A = NotEqualValue;                                      }                                      if (TexturePixelsPointer[n].A == 0)                                      {                                          //Console.Write("yup!");                                      }                                  }                              }                                var TextureInfo = new TextureHookInfo()                              {                                  TextureCacheKey = TextureCacheKey'                                  Data = DecodedTextureBuffer'                                  Width = TextureWidth'                                  Height = TextureHeight                              };                              MessageBus.Dispatch(TextureInfo);                                var Result = Texture.SetData(TextureInfo.Data' TextureInfo.Width' TextureInfo.Height);                          }                      }                      if (Cache.ContainsKey(Hash1))                      {                          Cache[Hash1].Dispose();                      }                      Cache[Hash1] = Texture;                  }              }
Magic Number,CSPspEmu.Core.Gpu,TextureCache<TGpuImpl;TTexture>,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\TextureCache.cs,Get,The following statement contains a magic number: if (Recheck)              {                  //Console.Write(".");                    //Console.WriteLine("{0:X}"' ClutAddress);                    var TextureFormat = TextureState->PixelFormat;                  //var Width = TextureState->Mipmap0.TextureWidth;                    int BufferWidth = TextureState->Mipmap0.BufferWidth;                    // FAKE!                  //BufferWidth = TextureState->Mipmap0.TextureWidth;                    var Height = TextureState->Mipmap0.TextureHeight;                  var TextureDataSize = PixelFormatDecoder.GetPixelsSize(TextureFormat' BufferWidth * Height);                  if (ClutState->NumberOfColors > 256)                  {                      ClutState->NumberOfColors = 256;                  }                  var ClutDataSize = PixelFormatDecoder.GetPixelsSize(ClutFormat' ClutState->NumberOfColors);                  var ClutCount = ClutState->NumberOfColors;                  var ClutShift = ClutState->Shift;                  var ClutMask = ClutState->Mask;                    //Console.WriteLine(TextureFormat);                    // INVALID TEXTURE                  if (!PspMemory.IsRangeValid(TextureAddress' TextureDataSize) || TextureDataSize > 2048 * 2048 * 4)                  {                      Console.Error.WriteLineColored(ConsoleColor.DarkRed'                          "UPDATE_TEXTURE(TEX={0}'CLUT={1}:{2}:{3}:{4}:0x{5:X}'SIZE={6}x{7}'{8}'Swizzled={9})"'                          TextureFormat' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask' BufferWidth' Height'                          BufferWidth' Swizzled);                      Console.Error.WriteLineColored(ConsoleColor.DarkRed'                          "Invalid TEXTURE! TextureAddress=0x{0:X}' TextureDataSize={1}"' TextureAddress'                          TextureDataSize);                      if (InvalidTexture == null)                      {                          InvalidTexture = new TTexture();                          InvalidTexture.Init(GpuImpl);                            int InvalidTextureWidth = 2' InvalidTextureHeight = 2;                          int InvalidTextureSize = InvalidTextureWidth * InvalidTextureHeight;                          var Data = new OutputPixel[InvalidTextureSize];                          fixed (OutputPixel* DataPtr = Data)                          {                              var Color1 = OutputPixel.FromRgba(0xFF' 0x00' 0x00' 0xFF);                              var Color2 = OutputPixel.FromRgba(0x00' 0x00' 0xFF' 0xFF);                              for (int n = 0; n < InvalidTextureSize; n++)                              {                                  DataPtr[n] = ((n & 1) != 0) ? Color1 : Color2;                              }                              InvalidTexture.SetData(Data' InvalidTextureWidth' InvalidTextureHeight);                          }                      }                      return InvalidTexture;                  }                    //Console.WriteLine("TextureAddress=0x{0:X}' TextureDataSize=0x{1:X}"' TextureAddress' TextureDataSize);                    byte* TexturePointer = null;                  byte* ClutPointer = null;                    try                  {                      TexturePointer = (byte*) PspMemory.PspAddressToPointerSafe(TextureAddress);                      ClutPointer = (byte*) PspMemory.PspAddressToPointerSafe(ClutAddress);                  }                  catch (PspMemory.InvalidAddressException InvalidAddressException)                  {                      throw(InvalidAddressException);                  }                    TextureCacheKey TextureCacheKey = new TextureCacheKey()                  {                      TextureAddress = TextureAddress'                      TextureFormat = TextureFormat'                      TextureHash = FastHash(TexturePointer' TextureDataSize)'                        ClutHash = FastHash(&(ClutPointer[ClutDataStart])' ClutDataSize)'                      ClutAddress = ClutAddress'                      ClutFormat = ClutFormat'                      ClutStart = ClutStart'                      ClutShift = ClutShift'                      ClutMask = ClutMask'                      Swizzled = Swizzled'                        ColorTestEnabled = GpuState->ColorTestState.Enabled'                      ColorTestRef = GpuState->ColorTestState.Ref'                      ColorTestMask = GpuState->ColorTestState.Mask'                      ColorTestFunction = GpuState->ColorTestState.Function'                  };                    if (Texture == null || (!Texture.TextureCacheKey.Equals(TextureCacheKey)))                  {                      string TextureName = "texture_" + TextureCacheKey.TextureHash + "_" + TextureCacheKey.ClutHash +                                           "_" + TextureFormat + "_" + ClutFormat + "_" + BufferWidth + "x" + Height +                                           "_" + Swizzled;  #if DEBUG_TEXTURE_CACHE    					Console.Error.WriteLine("UPDATE_TEXTURE(TEX={0}'CLUT={1}:{2}:{3}:{4}:0x{5:X}'SIZE={6}x{7}'{8}'Swizzled={9})"' TextureFormat' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask' BufferWidth' Height' BufferWidth' Swizzled);  #endif                      Texture = new TTexture();                      Texture.Init(GpuImpl);                      Texture.TextureCacheKey = TextureCacheKey;                      //Texture.Hash = Hash1;                        {                          //int TextureWidth = Math.Max(BufferWidth' Height);                          //int TextureHeight = Math.Max(BufferWidth' Height);                          int TextureWidth = BufferWidth;                          int TextureHeight = Height;                          int TextureWidthHeight = TextureWidth * TextureHeight;                            fixed (OutputPixel* TexturePixelsPointer = DecodedTextureBuffer)                          {                              if (Swizzled)                              {                                  fixed (byte* SwizzlingBufferPointer = SwizzlingBuffer)                                  {                                      PointerUtils.Memcpy(SwizzlingBuffer' TexturePointer' TextureDataSize);                                      PixelFormatDecoder.UnswizzleInline(TextureFormat' (void*) SwizzlingBufferPointer'                                          BufferWidth' Height);                                      PixelFormatDecoder.Decode(                                          TextureFormat' (void*) SwizzlingBufferPointer' TexturePixelsPointer'                                          BufferWidth' Height'                                          ClutPointer' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask'                                          strideWidth: PixelFormatDecoder.GetPixelsSize(TextureFormat' TextureWidth)                                      );                                  }                              }                              else                              {                                  PixelFormatDecoder.Decode(                                      TextureFormat' (void*) TexturePointer' TexturePixelsPointer' BufferWidth' Height'                                      ClutPointer' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask'                                      strideWidth: PixelFormatDecoder.GetPixelsSize(TextureFormat' TextureWidth)                                  );                              }                                if (TextureCacheKey.ColorTestEnabled)                              {                                  byte EqualValue' NotEqualValue;                                    switch (TextureCacheKey.ColorTestFunction)                                  {                                      case ColorTestFunctionEnum.GuAlways:                                          EqualValue = 0xFF;                                          NotEqualValue = 0xFF;                                          break;                                      case ColorTestFunctionEnum.GuNever:                                          EqualValue = 0x00;                                          NotEqualValue = 0x00;                                          break;                                      case ColorTestFunctionEnum.GuEqual:                                          EqualValue = 0xFF;                                          NotEqualValue = 0x00;                                          break;                                      case ColorTestFunctionEnum.GuNotequal:                                          EqualValue = 0x00;                                          NotEqualValue = 0xFF;                                          break;                                      default: throw(new NotImplementedException());                                  }                                    ConsoleUtils.SaveRestoreConsoleState(() =>                                  {                                      Console.BackgroundColor = ConsoleColor.Red;                                      Console.ForegroundColor = ConsoleColor.Yellow;                                      Console.Error.WriteLine("{0} : {1}' {2} : ref:{3} : mask:{4}"'                                          TextureCacheKey.ColorTestFunction' EqualValue' NotEqualValue'                                          TextureCacheKey.ColorTestRef' TextureCacheKey.ColorTestMask);                                  });                                    for (int n = 0; n < TextureWidthHeight; n++)                                  {                                      if ((TexturePixelsPointer[n] & TextureCacheKey.ColorTestMask).Equals(                                          (TextureCacheKey.ColorTestRef & TextureCacheKey.ColorTestMask)))                                      {                                          TexturePixelsPointer[n].A = EqualValue;                                      }                                      else                                      {                                          TexturePixelsPointer[n].A = NotEqualValue;                                      }                                      if (TexturePixelsPointer[n].A == 0)                                      {                                          //Console.Write("yup!");                                      }                                  }                              }                                var TextureInfo = new TextureHookInfo()                              {                                  TextureCacheKey = TextureCacheKey'                                  Data = DecodedTextureBuffer'                                  Width = TextureWidth'                                  Height = TextureHeight                              };                              MessageBus.Dispatch(TextureInfo);                                var Result = Texture.SetData(TextureInfo.Data' TextureInfo.Width' TextureInfo.Height);                          }                      }                      if (Cache.ContainsKey(Hash1))                      {                          Cache[Hash1].Dispose();                      }                      Cache[Hash1] = Texture;                  }              }
Magic Number,CSPspEmu.Core.Gpu,TextureCache<TGpuImpl;TTexture>,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\TextureCache.cs,Get,The following statement contains a magic number: if (Recheck)              {                  //Console.Write(".");                    //Console.WriteLine("{0:X}"' ClutAddress);                    var TextureFormat = TextureState->PixelFormat;                  //var Width = TextureState->Mipmap0.TextureWidth;                    int BufferWidth = TextureState->Mipmap0.BufferWidth;                    // FAKE!                  //BufferWidth = TextureState->Mipmap0.TextureWidth;                    var Height = TextureState->Mipmap0.TextureHeight;                  var TextureDataSize = PixelFormatDecoder.GetPixelsSize(TextureFormat' BufferWidth * Height);                  if (ClutState->NumberOfColors > 256)                  {                      ClutState->NumberOfColors = 256;                  }                  var ClutDataSize = PixelFormatDecoder.GetPixelsSize(ClutFormat' ClutState->NumberOfColors);                  var ClutCount = ClutState->NumberOfColors;                  var ClutShift = ClutState->Shift;                  var ClutMask = ClutState->Mask;                    //Console.WriteLine(TextureFormat);                    // INVALID TEXTURE                  if (!PspMemory.IsRangeValid(TextureAddress' TextureDataSize) || TextureDataSize > 2048 * 2048 * 4)                  {                      Console.Error.WriteLineColored(ConsoleColor.DarkRed'                          "UPDATE_TEXTURE(TEX={0}'CLUT={1}:{2}:{3}:{4}:0x{5:X}'SIZE={6}x{7}'{8}'Swizzled={9})"'                          TextureFormat' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask' BufferWidth' Height'                          BufferWidth' Swizzled);                      Console.Error.WriteLineColored(ConsoleColor.DarkRed'                          "Invalid TEXTURE! TextureAddress=0x{0:X}' TextureDataSize={1}"' TextureAddress'                          TextureDataSize);                      if (InvalidTexture == null)                      {                          InvalidTexture = new TTexture();                          InvalidTexture.Init(GpuImpl);                            int InvalidTextureWidth = 2' InvalidTextureHeight = 2;                          int InvalidTextureSize = InvalidTextureWidth * InvalidTextureHeight;                          var Data = new OutputPixel[InvalidTextureSize];                          fixed (OutputPixel* DataPtr = Data)                          {                              var Color1 = OutputPixel.FromRgba(0xFF' 0x00' 0x00' 0xFF);                              var Color2 = OutputPixel.FromRgba(0x00' 0x00' 0xFF' 0xFF);                              for (int n = 0; n < InvalidTextureSize; n++)                              {                                  DataPtr[n] = ((n & 1) != 0) ? Color1 : Color2;                              }                              InvalidTexture.SetData(Data' InvalidTextureWidth' InvalidTextureHeight);                          }                      }                      return InvalidTexture;                  }                    //Console.WriteLine("TextureAddress=0x{0:X}' TextureDataSize=0x{1:X}"' TextureAddress' TextureDataSize);                    byte* TexturePointer = null;                  byte* ClutPointer = null;                    try                  {                      TexturePointer = (byte*) PspMemory.PspAddressToPointerSafe(TextureAddress);                      ClutPointer = (byte*) PspMemory.PspAddressToPointerSafe(ClutAddress);                  }                  catch (PspMemory.InvalidAddressException InvalidAddressException)                  {                      throw(InvalidAddressException);                  }                    TextureCacheKey TextureCacheKey = new TextureCacheKey()                  {                      TextureAddress = TextureAddress'                      TextureFormat = TextureFormat'                      TextureHash = FastHash(TexturePointer' TextureDataSize)'                        ClutHash = FastHash(&(ClutPointer[ClutDataStart])' ClutDataSize)'                      ClutAddress = ClutAddress'                      ClutFormat = ClutFormat'                      ClutStart = ClutStart'                      ClutShift = ClutShift'                      ClutMask = ClutMask'                      Swizzled = Swizzled'                        ColorTestEnabled = GpuState->ColorTestState.Enabled'                      ColorTestRef = GpuState->ColorTestState.Ref'                      ColorTestMask = GpuState->ColorTestState.Mask'                      ColorTestFunction = GpuState->ColorTestState.Function'                  };                    if (Texture == null || (!Texture.TextureCacheKey.Equals(TextureCacheKey)))                  {                      string TextureName = "texture_" + TextureCacheKey.TextureHash + "_" + TextureCacheKey.ClutHash +                                           "_" + TextureFormat + "_" + ClutFormat + "_" + BufferWidth + "x" + Height +                                           "_" + Swizzled;  #if DEBUG_TEXTURE_CACHE    					Console.Error.WriteLine("UPDATE_TEXTURE(TEX={0}'CLUT={1}:{2}:{3}:{4}:0x{5:X}'SIZE={6}x{7}'{8}'Swizzled={9})"' TextureFormat' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask' BufferWidth' Height' BufferWidth' Swizzled);  #endif                      Texture = new TTexture();                      Texture.Init(GpuImpl);                      Texture.TextureCacheKey = TextureCacheKey;                      //Texture.Hash = Hash1;                        {                          //int TextureWidth = Math.Max(BufferWidth' Height);                          //int TextureHeight = Math.Max(BufferWidth' Height);                          int TextureWidth = BufferWidth;                          int TextureHeight = Height;                          int TextureWidthHeight = TextureWidth * TextureHeight;                            fixed (OutputPixel* TexturePixelsPointer = DecodedTextureBuffer)                          {                              if (Swizzled)                              {                                  fixed (byte* SwizzlingBufferPointer = SwizzlingBuffer)                                  {                                      PointerUtils.Memcpy(SwizzlingBuffer' TexturePointer' TextureDataSize);                                      PixelFormatDecoder.UnswizzleInline(TextureFormat' (void*) SwizzlingBufferPointer'                                          BufferWidth' Height);                                      PixelFormatDecoder.Decode(                                          TextureFormat' (void*) SwizzlingBufferPointer' TexturePixelsPointer'                                          BufferWidth' Height'                                          ClutPointer' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask'                                          strideWidth: PixelFormatDecoder.GetPixelsSize(TextureFormat' TextureWidth)                                      );                                  }                              }                              else                              {                                  PixelFormatDecoder.Decode(                                      TextureFormat' (void*) TexturePointer' TexturePixelsPointer' BufferWidth' Height'                                      ClutPointer' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask'                                      strideWidth: PixelFormatDecoder.GetPixelsSize(TextureFormat' TextureWidth)                                  );                              }                                if (TextureCacheKey.ColorTestEnabled)                              {                                  byte EqualValue' NotEqualValue;                                    switch (TextureCacheKey.ColorTestFunction)                                  {                                      case ColorTestFunctionEnum.GuAlways:                                          EqualValue = 0xFF;                                          NotEqualValue = 0xFF;                                          break;                                      case ColorTestFunctionEnum.GuNever:                                          EqualValue = 0x00;                                          NotEqualValue = 0x00;                                          break;                                      case ColorTestFunctionEnum.GuEqual:                                          EqualValue = 0xFF;                                          NotEqualValue = 0x00;                                          break;                                      case ColorTestFunctionEnum.GuNotequal:                                          EqualValue = 0x00;                                          NotEqualValue = 0xFF;                                          break;                                      default: throw(new NotImplementedException());                                  }                                    ConsoleUtils.SaveRestoreConsoleState(() =>                                  {                                      Console.BackgroundColor = ConsoleColor.Red;                                      Console.ForegroundColor = ConsoleColor.Yellow;                                      Console.Error.WriteLine("{0} : {1}' {2} : ref:{3} : mask:{4}"'                                          TextureCacheKey.ColorTestFunction' EqualValue' NotEqualValue'                                          TextureCacheKey.ColorTestRef' TextureCacheKey.ColorTestMask);                                  });                                    for (int n = 0; n < TextureWidthHeight; n++)                                  {                                      if ((TexturePixelsPointer[n] & TextureCacheKey.ColorTestMask).Equals(                                          (TextureCacheKey.ColorTestRef & TextureCacheKey.ColorTestMask)))                                      {                                          TexturePixelsPointer[n].A = EqualValue;                                      }                                      else                                      {                                          TexturePixelsPointer[n].A = NotEqualValue;                                      }                                      if (TexturePixelsPointer[n].A == 0)                                      {                                          //Console.Write("yup!");                                      }                                  }                              }                                var TextureInfo = new TextureHookInfo()                              {                                  TextureCacheKey = TextureCacheKey'                                  Data = DecodedTextureBuffer'                                  Width = TextureWidth'                                  Height = TextureHeight                              };                              MessageBus.Dispatch(TextureInfo);                                var Result = Texture.SetData(TextureInfo.Data' TextureInfo.Width' TextureInfo.Height);                          }                      }                      if (Cache.ContainsKey(Hash1))                      {                          Cache[Hash1].Dispose();                      }                      Cache[Hash1] = Texture;                  }              }
Magic Number,CSPspEmu.Core.Gpu,TextureCache<TGpuImpl;TTexture>,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\TextureCache.cs,Get,The following statement contains a magic number: if (Recheck)              {                  //Console.Write(".");                    //Console.WriteLine("{0:X}"' ClutAddress);                    var TextureFormat = TextureState->PixelFormat;                  //var Width = TextureState->Mipmap0.TextureWidth;                    int BufferWidth = TextureState->Mipmap0.BufferWidth;                    // FAKE!                  //BufferWidth = TextureState->Mipmap0.TextureWidth;                    var Height = TextureState->Mipmap0.TextureHeight;                  var TextureDataSize = PixelFormatDecoder.GetPixelsSize(TextureFormat' BufferWidth * Height);                  if (ClutState->NumberOfColors > 256)                  {                      ClutState->NumberOfColors = 256;                  }                  var ClutDataSize = PixelFormatDecoder.GetPixelsSize(ClutFormat' ClutState->NumberOfColors);                  var ClutCount = ClutState->NumberOfColors;                  var ClutShift = ClutState->Shift;                  var ClutMask = ClutState->Mask;                    //Console.WriteLine(TextureFormat);                    // INVALID TEXTURE                  if (!PspMemory.IsRangeValid(TextureAddress' TextureDataSize) || TextureDataSize > 2048 * 2048 * 4)                  {                      Console.Error.WriteLineColored(ConsoleColor.DarkRed'                          "UPDATE_TEXTURE(TEX={0}'CLUT={1}:{2}:{3}:{4}:0x{5:X}'SIZE={6}x{7}'{8}'Swizzled={9})"'                          TextureFormat' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask' BufferWidth' Height'                          BufferWidth' Swizzled);                      Console.Error.WriteLineColored(ConsoleColor.DarkRed'                          "Invalid TEXTURE! TextureAddress=0x{0:X}' TextureDataSize={1}"' TextureAddress'                          TextureDataSize);                      if (InvalidTexture == null)                      {                          InvalidTexture = new TTexture();                          InvalidTexture.Init(GpuImpl);                            int InvalidTextureWidth = 2' InvalidTextureHeight = 2;                          int InvalidTextureSize = InvalidTextureWidth * InvalidTextureHeight;                          var Data = new OutputPixel[InvalidTextureSize];                          fixed (OutputPixel* DataPtr = Data)                          {                              var Color1 = OutputPixel.FromRgba(0xFF' 0x00' 0x00' 0xFF);                              var Color2 = OutputPixel.FromRgba(0x00' 0x00' 0xFF' 0xFF);                              for (int n = 0; n < InvalidTextureSize; n++)                              {                                  DataPtr[n] = ((n & 1) != 0) ? Color1 : Color2;                              }                              InvalidTexture.SetData(Data' InvalidTextureWidth' InvalidTextureHeight);                          }                      }                      return InvalidTexture;                  }                    //Console.WriteLine("TextureAddress=0x{0:X}' TextureDataSize=0x{1:X}"' TextureAddress' TextureDataSize);                    byte* TexturePointer = null;                  byte* ClutPointer = null;                    try                  {                      TexturePointer = (byte*) PspMemory.PspAddressToPointerSafe(TextureAddress);                      ClutPointer = (byte*) PspMemory.PspAddressToPointerSafe(ClutAddress);                  }                  catch (PspMemory.InvalidAddressException InvalidAddressException)                  {                      throw(InvalidAddressException);                  }                    TextureCacheKey TextureCacheKey = new TextureCacheKey()                  {                      TextureAddress = TextureAddress'                      TextureFormat = TextureFormat'                      TextureHash = FastHash(TexturePointer' TextureDataSize)'                        ClutHash = FastHash(&(ClutPointer[ClutDataStart])' ClutDataSize)'                      ClutAddress = ClutAddress'                      ClutFormat = ClutFormat'                      ClutStart = ClutStart'                      ClutShift = ClutShift'                      ClutMask = ClutMask'                      Swizzled = Swizzled'                        ColorTestEnabled = GpuState->ColorTestState.Enabled'                      ColorTestRef = GpuState->ColorTestState.Ref'                      ColorTestMask = GpuState->ColorTestState.Mask'                      ColorTestFunction = GpuState->ColorTestState.Function'                  };                    if (Texture == null || (!Texture.TextureCacheKey.Equals(TextureCacheKey)))                  {                      string TextureName = "texture_" + TextureCacheKey.TextureHash + "_" + TextureCacheKey.ClutHash +                                           "_" + TextureFormat + "_" + ClutFormat + "_" + BufferWidth + "x" + Height +                                           "_" + Swizzled;  #if DEBUG_TEXTURE_CACHE    					Console.Error.WriteLine("UPDATE_TEXTURE(TEX={0}'CLUT={1}:{2}:{3}:{4}:0x{5:X}'SIZE={6}x{7}'{8}'Swizzled={9})"' TextureFormat' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask' BufferWidth' Height' BufferWidth' Swizzled);  #endif                      Texture = new TTexture();                      Texture.Init(GpuImpl);                      Texture.TextureCacheKey = TextureCacheKey;                      //Texture.Hash = Hash1;                        {                          //int TextureWidth = Math.Max(BufferWidth' Height);                          //int TextureHeight = Math.Max(BufferWidth' Height);                          int TextureWidth = BufferWidth;                          int TextureHeight = Height;                          int TextureWidthHeight = TextureWidth * TextureHeight;                            fixed (OutputPixel* TexturePixelsPointer = DecodedTextureBuffer)                          {                              if (Swizzled)                              {                                  fixed (byte* SwizzlingBufferPointer = SwizzlingBuffer)                                  {                                      PointerUtils.Memcpy(SwizzlingBuffer' TexturePointer' TextureDataSize);                                      PixelFormatDecoder.UnswizzleInline(TextureFormat' (void*) SwizzlingBufferPointer'                                          BufferWidth' Height);                                      PixelFormatDecoder.Decode(                                          TextureFormat' (void*) SwizzlingBufferPointer' TexturePixelsPointer'                                          BufferWidth' Height'                                          ClutPointer' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask'                                          strideWidth: PixelFormatDecoder.GetPixelsSize(TextureFormat' TextureWidth)                                      );                                  }                              }                              else                              {                                  PixelFormatDecoder.Decode(                                      TextureFormat' (void*) TexturePointer' TexturePixelsPointer' BufferWidth' Height'                                      ClutPointer' ClutFormat' ClutCount' ClutStart' ClutShift' ClutMask'                                      strideWidth: PixelFormatDecoder.GetPixelsSize(TextureFormat' TextureWidth)                                  );                              }                                if (TextureCacheKey.ColorTestEnabled)                              {                                  byte EqualValue' NotEqualValue;                                    switch (TextureCacheKey.ColorTestFunction)                                  {                                      case ColorTestFunctionEnum.GuAlways:                                          EqualValue = 0xFF;                                          NotEqualValue = 0xFF;                                          break;                                      case ColorTestFunctionEnum.GuNever:                                          EqualValue = 0x00;                                          NotEqualValue = 0x00;                                          break;                                      case ColorTestFunctionEnum.GuEqual:                                          EqualValue = 0xFF;                                          NotEqualValue = 0x00;                                          break;                                      case ColorTestFunctionEnum.GuNotequal:                                          EqualValue = 0x00;                                          NotEqualValue = 0xFF;                                          break;                                      default: throw(new NotImplementedException());                                  }                                    ConsoleUtils.SaveRestoreConsoleState(() =>                                  {                                      Console.BackgroundColor = ConsoleColor.Red;                                      Console.ForegroundColor = ConsoleColor.Yellow;                                      Console.Error.WriteLine("{0} : {1}' {2} : ref:{3} : mask:{4}"'                                          TextureCacheKey.ColorTestFunction' EqualValue' NotEqualValue'                                          TextureCacheKey.ColorTestRef' TextureCacheKey.ColorTestMask);                                  });                                    for (int n = 0; n < TextureWidthHeight; n++)                                  {                                      if ((TexturePixelsPointer[n] & TextureCacheKey.ColorTestMask).Equals(                                          (TextureCacheKey.ColorTestRef & TextureCacheKey.ColorTestMask)))                                      {                                          TexturePixelsPointer[n].A = EqualValue;                                      }                                      else                                      {                                          TexturePixelsPointer[n].A = NotEqualValue;                                      }                                      if (TexturePixelsPointer[n].A == 0)                                      {                                          //Console.Write("yup!");                                      }                                  }                              }                                var TextureInfo = new TextureHookInfo()                              {                                  TextureCacheKey = TextureCacheKey'                                  Data = DecodedTextureBuffer'                                  Width = TextureWidth'                                  Height = TextureHeight                              };                              MessageBus.Dispatch(TextureInfo);                                var Result = Texture.SetData(TextureInfo.Data' TextureInfo.Width' TextureInfo.Height);                          }                      }                      if (Cache.ContainsKey(Hash1))                      {                          Cache[Hash1].Dispose();                      }                      Cache[Hash1] = Texture;                  }              }
Magic Number,CSPspEmu.Core.Gpu,VertexInfoWeights,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexInfo.cs,VertexInfoWeights,The following statement contains a magic number: fixed (float* wPtr = W)              {                  for (var n = 0; n < 8; n++) wPtr[n] = vertexInfo.Weights[n];              }
Magic Number,CSPspEmu.Core.Gpu.Impl.Opengl.Modules,OpenglGpuImplMatrix,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Impl\Opengl\Modules\OpenglGpuImplMatrix.cs,PrepareStateMatrix,The following statement contains a magic number: {                  if (gpuState->VertexState.Type.Transform2D)                      //if (true)                  {                      worldViewProjectionMatrix = Matrix4F.Ortho(0' 512' 272' 0' 0' -0xFFFF);                      //WorldViewProjectionMatrix = Matrix4f.Ortho(0' 480' 272' 0' 0' -0xFFFF);                  }                  else                  {                      if (float.IsNaN(gpuState->VertexState.WorldMatrix.Values[0]))                      {                          //Console.Error.WriteLine("Invalid WorldMatrix");                          //Console.Error.WriteLine("Projection:");                          //GpuState->VertexState.ProjectionMatrix.Dump();                          //Console.Error.WriteLine("View:");                          //GpuState->VertexState.ViewMatrix.Dump();                          //Console.Error.WriteLine("World:");                          //GpuState->VertexState.WorldMatrix.Dump();                      }                        gpuState->VertexState.ViewMatrix.SetLastColumn();                      gpuState->VertexState.WorldMatrix.SetLastColumn();                        worldViewProjectionMatrix =                          Matrix4F.Identity                              .Multiply(gpuState->VertexState.WorldMatrix.Matrix4)                              .Multiply(gpuState->VertexState.ViewMatrix.Matrix4)                              .Multiply(gpuState->VertexState.ProjectionMatrix.Matrix4)                          ;                  }              }
Magic Number,CSPspEmu.Core.Gpu.Impl.Opengl.Modules,OpenglGpuImplMatrix,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Impl\Opengl\Modules\OpenglGpuImplMatrix.cs,PrepareStateMatrix,The following statement contains a magic number: {                  if (gpuState->VertexState.Type.Transform2D)                      //if (true)                  {                      worldViewProjectionMatrix = Matrix4F.Ortho(0' 512' 272' 0' 0' -0xFFFF);                      //WorldViewProjectionMatrix = Matrix4f.Ortho(0' 480' 272' 0' 0' -0xFFFF);                  }                  else                  {                      if (float.IsNaN(gpuState->VertexState.WorldMatrix.Values[0]))                      {                          //Console.Error.WriteLine("Invalid WorldMatrix");                          //Console.Error.WriteLine("Projection:");                          //GpuState->VertexState.ProjectionMatrix.Dump();                          //Console.Error.WriteLine("View:");                          //GpuState->VertexState.ViewMatrix.Dump();                          //Console.Error.WriteLine("World:");                          //GpuState->VertexState.WorldMatrix.Dump();                      }                        gpuState->VertexState.ViewMatrix.SetLastColumn();                      gpuState->VertexState.WorldMatrix.SetLastColumn();                        worldViewProjectionMatrix =                          Matrix4F.Identity                              .Multiply(gpuState->VertexState.WorldMatrix.Matrix4)                              .Multiply(gpuState->VertexState.ViewMatrix.Matrix4)                              .Multiply(gpuState->VertexState.ProjectionMatrix.Matrix4)                          ;                  }              }
Magic Number,CSPspEmu.Core.Gpu.Impl.Opengl.Modules,DrawBufferValue,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Impl\Opengl\Modules\RenderbufferManager.cs,UpdateTextures,The following statement contains a magic number: RenderTarget = GLRenderTarget.Create(                      Width = 512 * scaleViewport'                      Height = 272 * scaleViewport                  );
Magic Number,CSPspEmu.Core.Gpu.Impl.Opengl.Modules,DrawBufferValue,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Impl\Opengl\Modules\RenderbufferManager.cs,UpdateTextures,The following statement contains a magic number: RenderTarget = GLRenderTarget.Create(                      Width = 512 * scaleViewport'                      Height = 272 * scaleViewport                  );
Magic Number,CSPspEmu.Core.Gpu.Impl.Opengl,OpenglGpuImpl,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Impl\Opengl\OpenglGpuImpl.cs,DrawVertices,The following statement contains a magic number: _shader.Draw(type' _indicesList.Buffer' _indicesList.Length' () =>              {                  if (VertexType.HasPosition)                  {                      _verticesPositionBuffer.SetData(_verticesPosition.Buffer' 0' _verticesPosition.Length);                      ShaderInfo.vertexPosition.SetData<float>(_verticesPositionBuffer' 3' 0' sizeof(VertexInfoVector3F)'                          false);                  }                    if (VertexType.HasTexture)                  {                      _verticesTexcoordsBuffer.SetData(_verticesTexcoords.Buffer' 0' _verticesTexcoords.Length);                      ShaderInfo.vertexTexCoords.SetData<float>(_verticesTexcoordsBuffer' 3' 0'                          sizeof(VertexInfoVector3F)'                          false);                  }                    if (VertexType.HasColor)                  {                      _verticesColorsBuffer.SetData(_verticesColors.Buffer' 0' _verticesColors.Length);                      ShaderInfo.vertexColor.SetData<float>(_verticesColorsBuffer' 4' 0' sizeof(VertexInfoColor)' false);                  }                    if (VertexType.HasNormal)                  {                      _verticesNormalBuffer.SetData(_verticesNormal.Buffer' 0' _verticesNormal.Length);                      ShaderInfo.vertexNormal.NoWarning()                          .SetData<float>(_verticesNormalBuffer' 4' 0' sizeof(VertexInfoVector3F)' false);                  }                    if (VertexType.HasWeight)                  {                      _verticesWeightsBuffer.SetData(_verticesWeights.Buffer' 0' _verticesWeights.Length);                      var vertexWeights = new[]                      {                          ShaderInfo.vertexWeight0' ShaderInfo.vertexWeight1' ShaderInfo.vertexWeight2'                          ShaderInfo.vertexWeight3' ShaderInfo.vertexWeight4' ShaderInfo.vertexWeight5'                          ShaderInfo.vertexWeight6' ShaderInfo.vertexWeight7                      };                      for (var n = 0; n < VertexType.RealSkinningWeightCount; n++)                      {                          vertexWeights[n].SetData<float>(_verticesWeightsBuffer' 1' n * sizeof(float)'                              sizeof(VertexInfoWeights)' false);                      }                  }              });
Magic Number,CSPspEmu.Core.Gpu.Impl.Opengl,OpenglGpuImpl,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Impl\Opengl\OpenglGpuImpl.cs,DrawVertices,The following statement contains a magic number: _shader.Draw(type' _indicesList.Buffer' _indicesList.Length' () =>              {                  if (VertexType.HasPosition)                  {                      _verticesPositionBuffer.SetData(_verticesPosition.Buffer' 0' _verticesPosition.Length);                      ShaderInfo.vertexPosition.SetData<float>(_verticesPositionBuffer' 3' 0' sizeof(VertexInfoVector3F)'                          false);                  }                    if (VertexType.HasTexture)                  {                      _verticesTexcoordsBuffer.SetData(_verticesTexcoords.Buffer' 0' _verticesTexcoords.Length);                      ShaderInfo.vertexTexCoords.SetData<float>(_verticesTexcoordsBuffer' 3' 0'                          sizeof(VertexInfoVector3F)'                          false);                  }                    if (VertexType.HasColor)                  {                      _verticesColorsBuffer.SetData(_verticesColors.Buffer' 0' _verticesColors.Length);                      ShaderInfo.vertexColor.SetData<float>(_verticesColorsBuffer' 4' 0' sizeof(VertexInfoColor)' false);                  }                    if (VertexType.HasNormal)                  {                      _verticesNormalBuffer.SetData(_verticesNormal.Buffer' 0' _verticesNormal.Length);                      ShaderInfo.vertexNormal.NoWarning()                          .SetData<float>(_verticesNormalBuffer' 4' 0' sizeof(VertexInfoVector3F)' false);                  }                    if (VertexType.HasWeight)                  {                      _verticesWeightsBuffer.SetData(_verticesWeights.Buffer' 0' _verticesWeights.Length);                      var vertexWeights = new[]                      {                          ShaderInfo.vertexWeight0' ShaderInfo.vertexWeight1' ShaderInfo.vertexWeight2'                          ShaderInfo.vertexWeight3' ShaderInfo.vertexWeight4' ShaderInfo.vertexWeight5'                          ShaderInfo.vertexWeight6' ShaderInfo.vertexWeight7                      };                      for (var n = 0; n < VertexType.RealSkinningWeightCount; n++)                      {                          vertexWeights[n].SetData<float>(_verticesWeightsBuffer' 1' n * sizeof(float)'                              sizeof(VertexInfoWeights)' false);                      }                  }              });
Magic Number,CSPspEmu.Core.Gpu.Impl.Opengl,OpenglGpuImpl,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Impl\Opengl\OpenglGpuImpl.cs,DrawVertices,The following statement contains a magic number: _shader.Draw(type' _indicesList.Buffer' _indicesList.Length' () =>              {                  if (VertexType.HasPosition)                  {                      _verticesPositionBuffer.SetData(_verticesPosition.Buffer' 0' _verticesPosition.Length);                      ShaderInfo.vertexPosition.SetData<float>(_verticesPositionBuffer' 3' 0' sizeof(VertexInfoVector3F)'                          false);                  }                    if (VertexType.HasTexture)                  {                      _verticesTexcoordsBuffer.SetData(_verticesTexcoords.Buffer' 0' _verticesTexcoords.Length);                      ShaderInfo.vertexTexCoords.SetData<float>(_verticesTexcoordsBuffer' 3' 0'                          sizeof(VertexInfoVector3F)'                          false);                  }                    if (VertexType.HasColor)                  {                      _verticesColorsBuffer.SetData(_verticesColors.Buffer' 0' _verticesColors.Length);                      ShaderInfo.vertexColor.SetData<float>(_verticesColorsBuffer' 4' 0' sizeof(VertexInfoColor)' false);                  }                    if (VertexType.HasNormal)                  {                      _verticesNormalBuffer.SetData(_verticesNormal.Buffer' 0' _verticesNormal.Length);                      ShaderInfo.vertexNormal.NoWarning()                          .SetData<float>(_verticesNormalBuffer' 4' 0' sizeof(VertexInfoVector3F)' false);                  }                    if (VertexType.HasWeight)                  {                      _verticesWeightsBuffer.SetData(_verticesWeights.Buffer' 0' _verticesWeights.Length);                      var vertexWeights = new[]                      {                          ShaderInfo.vertexWeight0' ShaderInfo.vertexWeight1' ShaderInfo.vertexWeight2'                          ShaderInfo.vertexWeight3' ShaderInfo.vertexWeight4' ShaderInfo.vertexWeight5'                          ShaderInfo.vertexWeight6' ShaderInfo.vertexWeight7                      };                      for (var n = 0; n < VertexType.RealSkinningWeightCount; n++)                      {                          vertexWeights[n].SetData<float>(_verticesWeightsBuffer' 1' n * sizeof(float)'                              sizeof(VertexInfoWeights)' false);                      }                  }              });
Magic Number,CSPspEmu.Core.Gpu.Impl.Opengl,OpenglGpuImpl,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Impl\Opengl\OpenglGpuImpl.cs,DrawVertices,The following statement contains a magic number: _shader.Draw(type' _indicesList.Buffer' _indicesList.Length' () =>              {                  if (VertexType.HasPosition)                  {                      _verticesPositionBuffer.SetData(_verticesPosition.Buffer' 0' _verticesPosition.Length);                      ShaderInfo.vertexPosition.SetData<float>(_verticesPositionBuffer' 3' 0' sizeof(VertexInfoVector3F)'                          false);                  }                    if (VertexType.HasTexture)                  {                      _verticesTexcoordsBuffer.SetData(_verticesTexcoords.Buffer' 0' _verticesTexcoords.Length);                      ShaderInfo.vertexTexCoords.SetData<float>(_verticesTexcoordsBuffer' 3' 0'                          sizeof(VertexInfoVector3F)'                          false);                  }                    if (VertexType.HasColor)                  {                      _verticesColorsBuffer.SetData(_verticesColors.Buffer' 0' _verticesColors.Length);                      ShaderInfo.vertexColor.SetData<float>(_verticesColorsBuffer' 4' 0' sizeof(VertexInfoColor)' false);                  }                    if (VertexType.HasNormal)                  {                      _verticesNormalBuffer.SetData(_verticesNormal.Buffer' 0' _verticesNormal.Length);                      ShaderInfo.vertexNormal.NoWarning()                          .SetData<float>(_verticesNormalBuffer' 4' 0' sizeof(VertexInfoVector3F)' false);                  }                    if (VertexType.HasWeight)                  {                      _verticesWeightsBuffer.SetData(_verticesWeights.Buffer' 0' _verticesWeights.Length);                      var vertexWeights = new[]                      {                          ShaderInfo.vertexWeight0' ShaderInfo.vertexWeight1' ShaderInfo.vertexWeight2'                          ShaderInfo.vertexWeight3' ShaderInfo.vertexWeight4' ShaderInfo.vertexWeight5'                          ShaderInfo.vertexWeight6' ShaderInfo.vertexWeight7                      };                      for (var n = 0; n < VertexType.RealSkinningWeightCount; n++)                      {                          vertexWeights[n].SetData<float>(_verticesWeightsBuffer' 1' n * sizeof(float)'                              sizeof(VertexInfoWeights)' false);                      }                  }              });
Magic Number,CSPspEmu.Core.Gpu.Impl.Opengl,OpenglGpuImpl,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Impl\Opengl\OpenglGpuImpl.cs,PrimStart,The following statement contains a magic number: if (_shader != null)              {                  _shader.GetUniform("lopEnabled").Set(gpuState->LogicalOperationState.Enabled);                    if (gpuState->LogicalOperationState.Enabled)                  {                      if (_logicOpsRenderTarget == null)                      {                          _logicOpsRenderTarget = GLRenderTarget.Create(512' 272' RenderTargetLayers.Color);                      }                      GLRenderTarget.CopyFromTo(GLRenderTarget.Current' _logicOpsRenderTarget);                      _shader.GetUniform("backtex").Set(GLTextureUnit.CreateAtIndex(1).SetFiltering(GLScaleFilter.Linear)                          .SetWrap(GLWrap.ClampToEdge).SetTexture(_logicOpsRenderTarget.TextureColor));                        _shader.GetUniform("lop").Set((int) gpuState->LogicalOperationState.Operation);                        //new Bitmap(512' 272).SetChannelsDataInterleaved(LogicOpsRenderTarget.ReadPixels()' BitmapChannelList.RGBA).Save(@"c:\temp\test.png");                  }              }
Magic Number,CSPspEmu.Core.Gpu.Impl.Opengl,OpenglGpuImpl,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Impl\Opengl\OpenglGpuImpl.cs,PrimStart,The following statement contains a magic number: if (_shader != null)              {                  _shader.GetUniform("lopEnabled").Set(gpuState->LogicalOperationState.Enabled);                    if (gpuState->LogicalOperationState.Enabled)                  {                      if (_logicOpsRenderTarget == null)                      {                          _logicOpsRenderTarget = GLRenderTarget.Create(512' 272' RenderTargetLayers.Color);                      }                      GLRenderTarget.CopyFromTo(GLRenderTarget.Current' _logicOpsRenderTarget);                      _shader.GetUniform("backtex").Set(GLTextureUnit.CreateAtIndex(1).SetFiltering(GLScaleFilter.Linear)                          .SetWrap(GLWrap.ClampToEdge).SetTexture(_logicOpsRenderTarget.TextureColor));                        _shader.GetUniform("lop").Set((int) gpuState->LogicalOperationState.Operation);                        //new Bitmap(512' 272).SetChannelsDataInterleaved(LogicOpsRenderTarget.ReadPixels()' BitmapChannelList.RGBA).Save(@"c:\temp\test.png");                  }              }
Magic Number,CSPspEmu.Core.Gpu.Impl.Opengl,OpenglGpuImpl,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Impl\Opengl\OpenglGpuImpl.cs,Prim,The following statement contains a magic number: _CapturePrimitive(_primitiveType' GpuState->GetAddressRelativeToBaseOffset(GpuState->VertexAddress)'                  vertexCount' ref VertexType' () =>                  {                      // Continuation                      if (_indicesList.Length > 0)                      {                          switch (_primitiveType)                          {                              // Degenerate.                              case GuPrimitiveType.TriangleStrip:                              case GuPrimitiveType.Sprites:                                  if (vertexCount > 0)                                  {                                      PutVertexIndexRelative(-1);                                      PutVertexIndexRelative(0);                                  }                                  break;                              // Can't degenerate' flush.                              default:                                  EndVertex();                                  break;                          }                      }                        if (_primitiveType == GuPrimitiveType.Sprites)                      {                          GL.glDisable(GL.GL_CULL_FACE);                          for (int n = 0; n < vertexCount; n += 2)                          {                              VertexInfo v0' v1' v2' v3;                                readVertex(n + 0' out v0);                              readVertex(n + 1' out v3);                                VertexUtils.GenerateTriangleStripFromSpriteVertices(ref v0' out v1' out v2' ref v3);                                if (n > 0)                              {                                  PutVertexIndexRelative(-1);                                  PutVertexIndexRelative(0);                              }                                PutVertices(v0' v1' v2' v3);                          }                      }                      else                      {                          VertexInfo VertexInfo;                          //Console.Error.WriteLine("{0} : {1} : {2}"' BeginMode' VertexCount' VertexType.Index);                          for (int n = 0; n < vertexCount; n++)                          {                              readVertex(n' out VertexInfo);                              PutVertex(VertexInfo);                          }                      }                  });
Magic Number,CSPspEmu.Core.Gpu.Impl.Opengl,OpenglGpuImpl,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Impl\Opengl\OpenglGpuImpl.cs,InitSynchronizedOnce,The following statement contains a magic number: if (!AlreadyInitialized)              {                  AlreadyInitialized = true;                  var completedEvent = new AutoResetEvent(false);                  new Thread(() =>                  {                      Thread.CurrentThread.CurrentCulture = new CultureInfo(GlobalConfig.ThreadCultureName);                        OpenglContext = GlContextFactory.CreateWindowless();                      OpenglContext.MakeCurrent();                        Console.Out.WriteLineColored(ConsoleColor.White' "## OpenGL Context Version: {0}"'                          GlGetString(GL.GL_VERSION));                      Console.Out.WriteLineColored(ConsoleColor.White' "## Depth Bits: {0}"'                          GL.glGetInteger(GL.GL_DEPTH_BITS));                      Console.Out.WriteLineColored(ConsoleColor.White' "## Stencil Bits: {0}"'                          GL.glGetInteger(GL.GL_STENCIL_BITS));                      Console.Out.WriteLineColored(ConsoleColor.White' "## Color Bits: {0}'{1}'{2}'{3}"'                          GL.glGetInteger(GL.GL_RED_BITS)' GL.glGetInteger(GL.GL_GREEN_BITS)'                          GL.glGetInteger(GL.GL_BLUE_BITS)' GL.glGetInteger(GL.GL_ALPHA_BITS));                        if (GL.glGetInteger(GL.GL_STENCIL_BITS) <= 0)                      {                          Console.Error.WriteLineColored(ConsoleColor.Red' "No stencil bits available!");                      }                        OpenglContext.ReleaseCurrent();                        completedEvent.Set();                      Console.WriteLine("OpenglGpuImpl.Init.Start()");                      try                      {                          while (Running)                          {                              Thread.Sleep(10);                          }                          StopEvent.Set();                      }                      finally                      {                          Console.WriteLine("OpenglGpuImpl.Init.End()");                      }                  })                  {                      Name = "GpuImplEventHandling"'                      IsBackground = true                  }.Start();                    completedEvent.WaitOne();              }
Magic Number,CSPspEmu.Core.Gpu.Impl.Opengl,FastList<T>,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Impl\Opengl\OpenglGpuImpl.cs,Add,The following statement contains a magic number: if (Length >= Buffer.Length) Buffer = Buffer.ResizedCopy(Buffer.Length * 2);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_CMODE,The following statement contains a magic number: ClutState->PixelFormat = (GuPixelFormats) Extract(0' 2);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_CMODE,The following statement contains a magic number: ClutState->Shift = (int) Extract(2' 5);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_CMODE,The following statement contains a magic number: ClutState->Shift = (int) Extract(2' 5);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_CMODE,The following statement contains a magic number: ClutState->Mask = (int) Extract(8' 8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_CMODE,The following statement contains a magic number: ClutState->Mask = (int) Extract(8' 8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_CMODE,The following statement contains a magic number: ClutState->Start = (int) Extract(16' 5);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_CMODE,The following statement contains a magic number: ClutState->Start = (int) Extract(16' 5);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_ALPHA,The following statement contains a magic number: GpuState->BlendingState.FunctionDestination = (GuBlendingFactorDestination) ((Params24 >> 4) & 0xF);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_ALPHA,The following statement contains a magic number: GpuState->BlendingState.Equation = (BlendingOpEnum) ((Params24 >> 8) & 0xF);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_PMSKC,The following statement contains a magic number: GpuState->BlendingState.ColorMask.G = Param8(8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_PMSKC,The following statement contains a magic number: GpuState->BlendingState.ColorMask.B = Param8(16);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_CREF,The following statement contains a magic number: GpuState->ColorTestState.Ref.R = (byte) Extract(8 * 0' 8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_CREF,The following statement contains a magic number: GpuState->ColorTestState.Ref.R = (byte) Extract(8 * 0' 8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_CREF,The following statement contains a magic number: GpuState->ColorTestState.Ref.G = (byte) Extract(8 * 1' 8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_CREF,The following statement contains a magic number: GpuState->ColorTestState.Ref.G = (byte) Extract(8 * 1' 8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_CREF,The following statement contains a magic number: GpuState->ColorTestState.Ref.B = (byte) Extract(8 * 2' 8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_CREF,The following statement contains a magic number: GpuState->ColorTestState.Ref.B = (byte) Extract(8 * 2' 8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_CREF,The following statement contains a magic number: GpuState->ColorTestState.Ref.B = (byte) Extract(8 * 2' 8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_CMSK,The following statement contains a magic number: GpuState->ColorTestState.Mask.R = (byte) Extract(8 * 0' 8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_CMSK,The following statement contains a magic number: GpuState->ColorTestState.Mask.R = (byte) Extract(8 * 0' 8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_CMSK,The following statement contains a magic number: GpuState->ColorTestState.Mask.G = (byte) Extract(8 * 1' 8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_CMSK,The following statement contains a magic number: GpuState->ColorTestState.Mask.G = (byte) Extract(8 * 1' 8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_CMSK,The following statement contains a magic number: GpuState->ColorTestState.Mask.B = (byte) Extract(8 * 2' 8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_CMSK,The following statement contains a magic number: GpuState->ColorTestState.Mask.B = (byte) Extract(8 * 2' 8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_CMSK,The following statement contains a magic number: GpuState->ColorTestState.Mask.B = (byte) Extract(8 * 2' 8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_ZBW,The following statement contains a magic number: GpuState->DepthBufferState.HighAddress = Param8(16);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_ATST,The following statement contains a magic number: GpuState->AlphaTestState.Value = Param8(8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_ATST,The following statement contains a magic number: GpuState->AlphaTestState.Mask = Param8(16);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_STST,The following statement contains a magic number: GpuState->StencilState.FunctionRef = Param8(8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_STST,The following statement contains a magic number: GpuState->StencilState.FunctionMask = Param8(16);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_SOP,The following statement contains a magic number: GpuState->StencilState.OperationZFail = (StencilOperationEnum) Param8(8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_SOP,The following statement contains a magic number: GpuState->StencilState.OperationZPass = (StencilOperationEnum) Param8(16);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_DTH,The following statement contains a magic number: GpuState->DitherMatrix[4 * n + 0] = (sbyte) BitUtils.ExtractSigned(Params24' 4 * 0' 4);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_DTH,The following statement contains a magic number: GpuState->DitherMatrix[4 * n + 0] = (sbyte) BitUtils.ExtractSigned(Params24' 4 * 0' 4);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_DTH,The following statement contains a magic number: GpuState->DitherMatrix[4 * n + 0] = (sbyte) BitUtils.ExtractSigned(Params24' 4 * 0' 4);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_DTH,The following statement contains a magic number: GpuState->DitherMatrix[4 * n + 1] = (sbyte) BitUtils.ExtractSigned(Params24' 4 * 1' 4);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_DTH,The following statement contains a magic number: GpuState->DitherMatrix[4 * n + 1] = (sbyte) BitUtils.ExtractSigned(Params24' 4 * 1' 4);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_DTH,The following statement contains a magic number: GpuState->DitherMatrix[4 * n + 1] = (sbyte) BitUtils.ExtractSigned(Params24' 4 * 1' 4);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_DTH,The following statement contains a magic number: GpuState->DitherMatrix[4 * n + 2] = (sbyte) BitUtils.ExtractSigned(Params24' 4 * 2' 4);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_DTH,The following statement contains a magic number: GpuState->DitherMatrix[4 * n + 2] = (sbyte) BitUtils.ExtractSigned(Params24' 4 * 2' 4);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_DTH,The following statement contains a magic number: GpuState->DitherMatrix[4 * n + 2] = (sbyte) BitUtils.ExtractSigned(Params24' 4 * 2' 4);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_DTH,The following statement contains a magic number: GpuState->DitherMatrix[4 * n + 2] = (sbyte) BitUtils.ExtractSigned(Params24' 4 * 2' 4);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_DTH,The following statement contains a magic number: GpuState->DitherMatrix[4 * n + 2] = (sbyte) BitUtils.ExtractSigned(Params24' 4 * 2' 4);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_DTH,The following statement contains a magic number: GpuState->DitherMatrix[4 * n + 3] = (sbyte) BitUtils.ExtractSigned(Params24' 4 * 3' 4);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_DTH,The following statement contains a magic number: GpuState->DitherMatrix[4 * n + 3] = (sbyte) BitUtils.ExtractSigned(Params24' 4 * 3' 4);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_DTH,The following statement contains a magic number: GpuState->DitherMatrix[4 * n + 3] = (sbyte) BitUtils.ExtractSigned(Params24' 4 * 3' 4);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_DTH,The following statement contains a magic number: GpuState->DitherMatrix[4 * n + 3] = (sbyte) BitUtils.ExtractSigned(Params24' 4 * 3' 4);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_DTH,The following statement contains a magic number: GpuState->DitherMatrix[4 * n + 3] = (sbyte) BitUtils.ExtractSigned(Params24' 4 * 3' 4);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_CLEAR,The following statement contains a magic number: if ((Params24 & 1) != 0)              {                  GpuState->ClearFlags = (ClearBufferSet) Param8(8);                  GpuState->ClearingMode = true;              }              // Stop the clearing mode.              else              {                  GpuState->ClearingMode = false;              }
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_BEZIER,The following statement contains a magic number: var vCount = Param8(8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,BernsteinCoeff,The following statement contains a magic number: return new[]              {                  u1Pow3'                  3 * u * u1Pow2'                  3 * uPow2 * u1'                  uPow3'              };
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,BernsteinCoeff,The following statement contains a magic number: return new[]              {                  u1Pow3'                  3 * u * u1Pow2'                  3 * uPow2 * u1'                  uPow3'              };
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,DrawBezier,The following statement contains a magic number: if ((uCount - 1) % 3 != 0 || (vCount - 1) % 3 != 0)              {                  Logger.Warning("Unsupported bezier parameters ucount=" + uCount + " vcount=" + vCount);                  return;              }
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,DrawBezier,The following statement contains a magic number: if ((uCount - 1) % 3 != 0 || (vCount - 1) % 3 != 0)              {                  Logger.Warning("Unsupported bezier parameters ucount=" + uCount + " vcount=" + vCount);                  return;              }
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,DrawBezier,The following statement contains a magic number: var upcount = uCount / 3;
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,DrawBezier,The following statement contains a magic number: var vpcount = vCount / 3;
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,DrawBezier,The following statement contains a magic number: for (var j = 0; j <= divT; j++)              {                  var vglobal = (float) j * vpcount / divT;                    var vpatch = (int) vglobal; // Patch number                  var v = vglobal - vpatch;                  if (j == divT)                  {                      vpatch--;                      v = 1.0f;                  }                  var vcoeff = BernsteinCoeff(v);                    for (var i = 0; i <= divS; i++)                  {                      var uglobal = (float) i * upcount / divS;                      var upatch = (int) uglobal;                      var u = uglobal - upatch;                      if (i == divS)                      {                          upatch--;                          u = 1.0f;                      }                      ucoeff[i] = BernsteinCoeff(u);                        var p = default(VertexInfo);                      p.Position = Vector4f.Zero;                      p.Normal = Vector4f.Zero;                        for (var ii = 0; ii < 4; ++ii)                      {                          for (var jj = 0; jj < 4; ++jj)                          {                              /*                              Console.WriteLine(                                  "({0}' {1}) : {2} : {3} : {4}"'                                  ii' jj'                                  p.Position' anchors[3 * upatch + ii' 3 * vpatch + jj].Position'                                  ucoeff[i][ii] * vcoeff[jj]                              );                              */                              PointMultAdd(                                  ref p'                                  ref anchors[3 * upatch + ii' 3 * vpatch + jj]'                                  ucoeff[i][ii] * vcoeff[jj]                              );                          }                      }                        p.Texture.X = uglobal;                      p.Texture.Y = vglobal;                        patch[i' j] = p;                        /*                      Console.WriteLine(                          "W: ({0}' {1}) : {2}"'                          i' j'                          patch[i' j]                       );                      */                        /*                      if (useTexture && context.vinfo.texture == 0)                      {                          p.t[0] = uglobal;                          p.t[1] = vglobal;                      }                      */                  }              }
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,DrawBezier,The following statement contains a magic number: for (var j = 0; j <= divT; j++)              {                  var vglobal = (float) j * vpcount / divT;                    var vpatch = (int) vglobal; // Patch number                  var v = vglobal - vpatch;                  if (j == divT)                  {                      vpatch--;                      v = 1.0f;                  }                  var vcoeff = BernsteinCoeff(v);                    for (var i = 0; i <= divS; i++)                  {                      var uglobal = (float) i * upcount / divS;                      var upatch = (int) uglobal;                      var u = uglobal - upatch;                      if (i == divS)                      {                          upatch--;                          u = 1.0f;                      }                      ucoeff[i] = BernsteinCoeff(u);                        var p = default(VertexInfo);                      p.Position = Vector4f.Zero;                      p.Normal = Vector4f.Zero;                        for (var ii = 0; ii < 4; ++ii)                      {                          for (var jj = 0; jj < 4; ++jj)                          {                              /*                              Console.WriteLine(                                  "({0}' {1}) : {2} : {3} : {4}"'                                  ii' jj'                                  p.Position' anchors[3 * upatch + ii' 3 * vpatch + jj].Position'                                  ucoeff[i][ii] * vcoeff[jj]                              );                              */                              PointMultAdd(                                  ref p'                                  ref anchors[3 * upatch + ii' 3 * vpatch + jj]'                                  ucoeff[i][ii] * vcoeff[jj]                              );                          }                      }                        p.Texture.X = uglobal;                      p.Texture.Y = vglobal;                        patch[i' j] = p;                        /*                      Console.WriteLine(                          "W: ({0}' {1}) : {2}"'                          i' j'                          patch[i' j]                       );                      */                        /*                      if (useTexture && context.vinfo.texture == 0)                      {                          p.t[0] = uglobal;                          p.t[1] = vglobal;                      }                      */                  }              }
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,DrawBezier,The following statement contains a magic number: for (var j = 0; j <= divT; j++)              {                  var vglobal = (float) j * vpcount / divT;                    var vpatch = (int) vglobal; // Patch number                  var v = vglobal - vpatch;                  if (j == divT)                  {                      vpatch--;                      v = 1.0f;                  }                  var vcoeff = BernsteinCoeff(v);                    for (var i = 0; i <= divS; i++)                  {                      var uglobal = (float) i * upcount / divS;                      var upatch = (int) uglobal;                      var u = uglobal - upatch;                      if (i == divS)                      {                          upatch--;                          u = 1.0f;                      }                      ucoeff[i] = BernsteinCoeff(u);                        var p = default(VertexInfo);                      p.Position = Vector4f.Zero;                      p.Normal = Vector4f.Zero;                        for (var ii = 0; ii < 4; ++ii)                      {                          for (var jj = 0; jj < 4; ++jj)                          {                              /*                              Console.WriteLine(                                  "({0}' {1}) : {2} : {3} : {4}"'                                  ii' jj'                                  p.Position' anchors[3 * upatch + ii' 3 * vpatch + jj].Position'                                  ucoeff[i][ii] * vcoeff[jj]                              );                              */                              PointMultAdd(                                  ref p'                                  ref anchors[3 * upatch + ii' 3 * vpatch + jj]'                                  ucoeff[i][ii] * vcoeff[jj]                              );                          }                      }                        p.Texture.X = uglobal;                      p.Texture.Y = vglobal;                        patch[i' j] = p;                        /*                      Console.WriteLine(                          "W: ({0}' {1}) : {2}"'                          i' j'                          patch[i' j]                       );                      */                        /*                      if (useTexture && context.vinfo.texture == 0)                      {                          p.t[0] = uglobal;                          p.t[1] = vglobal;                      }                      */                  }              }
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,DrawBezier,The following statement contains a magic number: for (var j = 0; j <= divT; j++)              {                  var vglobal = (float) j * vpcount / divT;                    var vpatch = (int) vglobal; // Patch number                  var v = vglobal - vpatch;                  if (j == divT)                  {                      vpatch--;                      v = 1.0f;                  }                  var vcoeff = BernsteinCoeff(v);                    for (var i = 0; i <= divS; i++)                  {                      var uglobal = (float) i * upcount / divS;                      var upatch = (int) uglobal;                      var u = uglobal - upatch;                      if (i == divS)                      {                          upatch--;                          u = 1.0f;                      }                      ucoeff[i] = BernsteinCoeff(u);                        var p = default(VertexInfo);                      p.Position = Vector4f.Zero;                      p.Normal = Vector4f.Zero;                        for (var ii = 0; ii < 4; ++ii)                      {                          for (var jj = 0; jj < 4; ++jj)                          {                              /*                              Console.WriteLine(                                  "({0}' {1}) : {2} : {3} : {4}"'                                  ii' jj'                                  p.Position' anchors[3 * upatch + ii' 3 * vpatch + jj].Position'                                  ucoeff[i][ii] * vcoeff[jj]                              );                              */                              PointMultAdd(                                  ref p'                                  ref anchors[3 * upatch + ii' 3 * vpatch + jj]'                                  ucoeff[i][ii] * vcoeff[jj]                              );                          }                      }                        p.Texture.X = uglobal;                      p.Texture.Y = vglobal;                        patch[i' j] = p;                        /*                      Console.WriteLine(                          "W: ({0}' {1}) : {2}"'                          i' j'                          patch[i' j]                       );                      */                        /*                      if (useTexture && context.vinfo.texture == 0)                      {                          p.t[0] = uglobal;                          p.t[1] = vglobal;                      }                      */                  }              }
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_PRIM,The following statement contains a magic number: var primitiveType = (GuPrimitiveType) Extract(16' 3);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_PRIM,The following statement contains a magic number: var primitiveType = (GuPrimitiveType) Extract(16' 3);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_PRIM,The following statement contains a magic number: var vertexCount = (ushort) Extract(0' 16);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_PRIM,The following statement contains a magic number: var nextInstruction = *(GpuInstruction*) GpuDisplayList.Memory.PspAddressToPointerUnsafe(Pc + 4);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_PRIM,The following statement contains a magic number: if (nextInstruction.OpCode == GpuOpCodes.PRIM &&                  ((GuPrimitiveType) BitUtils.Extract(nextInstruction.Params' 16' 3) == primitiveType))              {                  //Console.WriteLine();                  _primCount++;              }              else              {                  //Console.WriteLine("{0:X8}"' PC);                    _primCount = 0;                  GpuDisplayList.GpuProcessor.GpuImpl.PrimEnd();              }
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_PRIM,The following statement contains a magic number: if (nextInstruction.OpCode == GpuOpCodes.PRIM &&                  ((GuPrimitiveType) BitUtils.Extract(nextInstruction.Params' 16' 3) == primitiveType))              {                  //Console.WriteLine();                  _primCount++;              }              else              {                  //Console.WriteLine("{0:X8}"' PC);                    _primCount = 0;                  GpuDisplayList.GpuProcessor.GpuImpl.PrimEnd();              }
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_SIGNAL,The following statement contains a magic number: var signal = Extract(0' 16);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_SIGNAL,The following statement contains a magic number: var behaviour = (SignalBehavior) Extract(16' 8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_SIGNAL,The following statement contains a magic number: var behaviour = (SignalBehavior) Extract(16' 8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_LT,The following statement contains a magic number: GetLigth(index)->Type = (LightTypeEnum) Param8(8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_LT,The following statement contains a magic number: switch (GetLigth(index)->Type)              {                  case LightTypeEnum.Directional:                      GetLigth(index)->Position.W = 0;                      break;                  case LightTypeEnum.PointLight:                      GetLigth(index)->Position.W = 1;                      GetLigth(index)->SpotCutoff = 180;                      break;                  case LightTypeEnum.SpotLight:                      GetLigth(index)->Position.W = 1;                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_BONE,The following statement contains a magic number: boneMatrices[SkinningState->CurrentBoneIndex / 12]                  .WriteAt(SkinningState->CurrentBoneIndex % 12' Float1);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_BONE,The following statement contains a magic number: boneMatrices[SkinningState->CurrentBoneIndex / 12]                  .WriteAt(SkinningState->CurrentBoneIndex % 12' Float1);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_FBW,The following statement contains a magic number: GpuState->DrawBufferState.HighAddress = Param8(16);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_REGION1,The following statement contains a magic number: var x1 = (short) BitUtils.Extract(Params24' 0' 10);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_REGION1,The following statement contains a magic number: var y1 = (short) BitUtils.Extract(Params24' 10' 10);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_REGION1,The following statement contains a magic number: var y1 = (short) BitUtils.Extract(Params24' 10' 10);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_REGION2,The following statement contains a magic number: var x2 = (short) BitUtils.Extract(Params24' 0' 10);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_REGION2,The following statement contains a magic number: var y2 = (short) BitUtils.Extract(Params24' 10' 10);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_REGION2,The following statement contains a magic number: var y2 = (short) BitUtils.Extract(Params24' 10' 10);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_SCISSOR1,The following statement contains a magic number: GpuState->ClipPlaneState.Scissor.Left = (short) BitUtils.Extract(Params24' 0' 10);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_SCISSOR1,The following statement contains a magic number: GpuState->ClipPlaneState.Scissor.Top = (short) BitUtils.Extract(Params24' 10' 10);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_SCISSOR1,The following statement contains a magic number: GpuState->ClipPlaneState.Scissor.Top = (short) BitUtils.Extract(Params24' 10' 10);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_SCISSOR2,The following statement contains a magic number: GpuState->ClipPlaneState.Scissor.Right = (short) BitUtils.Extract(Params24' 0' 10);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_SCISSOR2,The following statement contains a magic number: GpuState->ClipPlaneState.Scissor.Bottom = (short) BitUtils.Extract(Params24' 10' 10);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_SCISSOR2,The following statement contains a magic number: GpuState->ClipPlaneState.Scissor.Bottom = (short) BitUtils.Extract(Params24' 10' 10);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_PSUB,The following statement contains a magic number: GpuState->PatchState.DivT = Param8(8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TMODE,The following statement contains a magic number: TextureState->MipmapShareClut = (Param8(8) != 0);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TMODE,The following statement contains a magic number: TextureState->MipmapMaxLevel = Param8(16);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_TBW,The following statement contains a magic number: mipMap->Address = (mipMap->Address & 0x00FFFFFF) | ((uint) (Param8(16) << 24) & 0xFF000000);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_TBW,The following statement contains a magic number: mipMap->Address = (mipMap->Address & 0x00FFFFFF) | ((uint) (Param8(16) << 24) & 0xFF000000);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_TSIZE,The following statement contains a magic number: var widthExp = (int) BitUtils.Extract(Params24' 0' 4);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_TSIZE,The following statement contains a magic number: var heightExp = (int) BitUtils.Extract(Params24' 8' 4);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_TSIZE,The following statement contains a magic number: var heightExp = (int) BitUtils.Extract(Params24' 8' 4);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_TSIZE,The following statement contains a magic number: var unknownFlag = BitUtils.Extract(Params24' 15' 1) != 0;
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_TSIZE,The following statement contains a magic number: widthExp = Math.Min(widthExp' 9);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,_OP_TSIZE,The following statement contains a magic number: heightExp = Math.Min(heightExp' 9);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TFLT,The following statement contains a magic number: TextureState->FilterMagnification = (TextureFilter) Param8(8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TWRAP,The following statement contains a magic number: TextureState->WrapV = (WrapMode) Param8(8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TFUNC,The following statement contains a magic number: TextureState->ColorComponent = (TextureColorComponent) Param8(8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TFUNC,The following statement contains a magic number: TextureState->Fragment2X = (Param8(16) != 0);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TEXTURE_ENV_MAP_MATRIX,The following statement contains a magic number: GpuState->TextureMappingState.ShadeU = (short) BitUtils.Extract(Params24' 0' 2);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TEXTURE_ENV_MAP_MATRIX,The following statement contains a magic number: GpuState->TextureMappingState.ShadeV = (short) BitUtils.Extract(Params24' 8' 2);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TEXTURE_ENV_MAP_MATRIX,The following statement contains a magic number: GpuState->TextureMappingState.ShadeV = (short) BitUtils.Extract(Params24' 8' 2);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TMAP,The following statement contains a magic number: GpuState->TextureMappingState.TextureProjectionMapMode = (TextureProjectionMapMode) Param8(8);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TBIAS,The following statement contains a magic number: GpuState->TextureMappingState.MipmapBias = Param8(16) / 16.0f;
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TRXSBW,The following statement contains a magic number: GpuState->TextureTransferState.SourceAddress.High8 = Params24 << 8;
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TRXSBW,The following statement contains a magic number: GpuState->TextureTransferState.SourceLineWidth = (ushort) Extract(0' 16);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TRXSPOS,The following statement contains a magic number: GpuState->TextureTransferState.SourceX = (ushort) Extract(10 * 0' 10);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TRXSPOS,The following statement contains a magic number: GpuState->TextureTransferState.SourceX = (ushort) Extract(10 * 0' 10);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TRXSPOS,The following statement contains a magic number: GpuState->TextureTransferState.SourceY = (ushort) Extract(10 * 1' 10);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TRXSPOS,The following statement contains a magic number: GpuState->TextureTransferState.SourceY = (ushort) Extract(10 * 1' 10);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TRXDBW,The following statement contains a magic number: textureTransferStateStruct.DestinationAddress.High8 = Params24 << 8;
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TRXDBW,The following statement contains a magic number: textureTransferStateStruct.DestinationLineWidth = (ushort) Extract(0' 16);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TRXDPOS,The following statement contains a magic number: GpuState->TextureTransferState.DestinationX = (ushort) Extract(10 * 0' 10);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TRXDPOS,The following statement contains a magic number: GpuState->TextureTransferState.DestinationX = (ushort) Extract(10 * 0' 10);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TRXDPOS,The following statement contains a magic number: GpuState->TextureTransferState.DestinationY = (ushort) Extract(10 * 1' 10);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TRXDPOS,The following statement contains a magic number: GpuState->TextureTransferState.DestinationY = (ushort) Extract(10 * 1' 10);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TRXSIZE,The following statement contains a magic number: GpuState->TextureTransferState.Width = (ushort) (Extract(10 * 0' 10) + 1);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TRXSIZE,The following statement contains a magic number: GpuState->TextureTransferState.Width = (ushort) (Extract(10 * 0' 10) + 1);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TRXSIZE,The following statement contains a magic number: GpuState->TextureTransferState.Height = (ushort) (Extract(10 * 1' 10) + 1);
Magic Number,CSPspEmu.Core.Gpu.Run,GpuDisplayListRunner,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\Run\GpuDisplayListRunner.cs,OP_TRXSIZE,The following statement contains a magic number: GpuState->TextureTransferState.Height = (ushort) (Extract(10 * 1' 10) + 1);
Magic Number,CSPspEmu.Core.Gpu.State,GpuMatrix4X4Struct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuMatrixStruct.cs,Dump,The following statement contains a magic number: fixed (float* valuesPtr = Values)              {                  Console.WriteLine("----------------------");                  for (var y = 0; y < 4; y++)                  {                      for (var x = 0; x < 4; x++)                      {                          Console.Write("{0}' "' valuesPtr[y * 4 + x]);                      }                      Console.WriteLine("");                  }                  Console.WriteLine("----------------------");              }
Magic Number,CSPspEmu.Core.Gpu.State,GpuMatrix4X4Struct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuMatrixStruct.cs,Dump,The following statement contains a magic number: fixed (float* valuesPtr = Values)              {                  Console.WriteLine("----------------------");                  for (var y = 0; y < 4; y++)                  {                      for (var x = 0; x < 4; x++)                      {                          Console.Write("{0}' "' valuesPtr[y * 4 + x]);                      }                      Console.WriteLine("");                  }                  Console.WriteLine("----------------------");              }
Magic Number,CSPspEmu.Core.Gpu.State,GpuMatrix4X4Struct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuMatrixStruct.cs,Dump,The following statement contains a magic number: fixed (float* valuesPtr = Values)              {                  Console.WriteLine("----------------------");                  for (var y = 0; y < 4; y++)                  {                      for (var x = 0; x < 4; x++)                      {                          Console.Write("{0}' "' valuesPtr[y * 4 + x]);                      }                      Console.WriteLine("");                  }                  Console.WriteLine("----------------------");              }
Magic Number,CSPspEmu.Core.Gpu.State,GpuMatrix4X4Struct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuMatrixStruct.cs,SetIdentity,The following statement contains a magic number: fixed (float* valuesPtr = Values)              {                  for (var y = 0; y < 4; y++)                  {                      for (var x = 0; x < 4; x++)                      {                          valuesPtr[x + y * 4] = (x == y) ? 1 : 0;                      }                  }              }
Magic Number,CSPspEmu.Core.Gpu.State,GpuMatrix4X4Struct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuMatrixStruct.cs,SetIdentity,The following statement contains a magic number: fixed (float* valuesPtr = Values)              {                  for (var y = 0; y < 4; y++)                  {                      for (var x = 0; x < 4; x++)                      {                          valuesPtr[x + y * 4] = (x == y) ? 1 : 0;                      }                  }              }
Magic Number,CSPspEmu.Core.Gpu.State,GpuMatrix4X4Struct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuMatrixStruct.cs,SetIdentity,The following statement contains a magic number: fixed (float* valuesPtr = Values)              {                  for (var y = 0; y < 4; y++)                  {                      for (var x = 0; x < 4; x++)                      {                          valuesPtr[x + y * 4] = (x == y) ? 1 : 0;                      }                  }              }
Magic Number,CSPspEmu.Core.Gpu.State,GpuMatrix4X3Struct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuMatrixStruct.cs,Reset,The following statement contains a magic number: fixed (float* valuesPtr = Values)              {                  valuesPtr[15] = 1.0f;              }
Magic Number,CSPspEmu.Core.Gpu.State,GpuMatrix4X3Struct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuMatrixStruct.cs,Dump,The following statement contains a magic number: fixed (float* valuesPtr = Values)              {                  Console.WriteLine("----------------------");                  for (var y = 0; y < 4; y++)                  {                      for (var x = 0; x < 4; x++)                      {                          Console.Write("{0}' "' valuesPtr[y * 4 + x]);                      }                      Console.WriteLine("");                  }                  Console.WriteLine("----------------------");              }
Magic Number,CSPspEmu.Core.Gpu.State,GpuMatrix4X3Struct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuMatrixStruct.cs,Dump,The following statement contains a magic number: fixed (float* valuesPtr = Values)              {                  Console.WriteLine("----------------------");                  for (var y = 0; y < 4; y++)                  {                      for (var x = 0; x < 4; x++)                      {                          Console.Write("{0}' "' valuesPtr[y * 4 + x]);                      }                      Console.WriteLine("");                  }                  Console.WriteLine("----------------------");              }
Magic Number,CSPspEmu.Core.Gpu.State,GpuMatrix4X3Struct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuMatrixStruct.cs,Dump,The following statement contains a magic number: fixed (float* valuesPtr = Values)              {                  Console.WriteLine("----------------------");                  for (var y = 0; y < 4; y++)                  {                      for (var x = 0; x < 4; x++)                      {                          Console.Write("{0}' "' valuesPtr[y * 4 + x]);                      }                      Console.WriteLine("");                  }                  Console.WriteLine("----------------------");              }
Magic Number,CSPspEmu.Core.Gpu.State,GpuMatrix4X3Struct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuMatrixStruct.cs,SetLastColumn,The following statement contains a magic number: fixed (float* valuesPtr = Values)              {                  valuesPtr[3] = 0.0f;                  valuesPtr[7] = 0.0f;                  valuesPtr[11] = 0.0f;                  valuesPtr[15] = 1.0f;              }
Magic Number,CSPspEmu.Core.Gpu.State,GpuMatrix4X3Struct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuMatrixStruct.cs,SetLastColumn,The following statement contains a magic number: fixed (float* valuesPtr = Values)              {                  valuesPtr[3] = 0.0f;                  valuesPtr[7] = 0.0f;                  valuesPtr[11] = 0.0f;                  valuesPtr[15] = 1.0f;              }
Magic Number,CSPspEmu.Core.Gpu.State,GpuMatrix4X3Struct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuMatrixStruct.cs,SetLastColumn,The following statement contains a magic number: fixed (float* valuesPtr = Values)              {                  valuesPtr[3] = 0.0f;                  valuesPtr[7] = 0.0f;                  valuesPtr[11] = 0.0f;                  valuesPtr[15] = 1.0f;              }
Magic Number,CSPspEmu.Core.Gpu.State,GpuMatrix4X3Struct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuMatrixStruct.cs,SetLastColumn,The following statement contains a magic number: fixed (float* valuesPtr = Values)              {                  valuesPtr[3] = 0.0f;                  valuesPtr[7] = 0.0f;                  valuesPtr[11] = 0.0f;                  valuesPtr[15] = 1.0f;              }
Magic Number,CSPspEmu.Core.Gpu.State,GpuMatrix4X3Struct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuMatrixStruct.cs,SetPosition,The following statement contains a magic number: fixed (float* valuesPtr = Values)              {                  valuesPtr[row * 4 + column] = value;              }
Magic Number,CSPspEmu.Core.Gpu.State,GpuMatrix4X3Struct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuMatrixStruct.cs,LoadIdentity,The following statement contains a magic number: for (var row = 0; row < 4; row++)              {                  for (var column = 0; column < 4; column++)                  {                      SetPosition(column' row' (column == row) ? 1f : 0f);                  }              }
Magic Number,CSPspEmu.Core.Gpu.State,GpuMatrix4X3Struct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuMatrixStruct.cs,LoadIdentity,The following statement contains a magic number: for (var row = 0; row < 4; row++)              {                  for (var column = 0; column < 4; column++)                  {                      SetPosition(column' row' (column == row) ? 1f : 0f);                  }              }
Magic Number,CSPspEmu.Core.Gpu.State,TextureMappingStateStruct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuState.cs,GetTextureComponentsCount,The following statement contains a magic number: byte components = 2;
Magic Number,CSPspEmu.Core.Gpu.State,TextureMappingStateStruct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuState.cs,GetTextureComponentsCount,The following statement contains a magic number: switch (TextureMapMode)              {                  case TextureMapMode.GuTextureCoords:                      break;                  case TextureMapMode.GuTextureMatrix:                      switch (TextureProjectionMapMode)                      {                          case TextureProjectionMapMode.GuNormal:                              components = 3;                              break;                          case TextureProjectionMapMode.GuNormalizedNormal:                              components = 3;                              break;                          case TextureProjectionMapMode.GuPosition:                              components = 3;                              break;                          case TextureProjectionMapMode.GuUv:                              components = 2;                              break;                      }                      break;                  case TextureMapMode.GuEnvironmentMap:                      break;              }
Magic Number,CSPspEmu.Core.Gpu.State,TextureMappingStateStruct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuState.cs,GetTextureComponentsCount,The following statement contains a magic number: switch (TextureMapMode)              {                  case TextureMapMode.GuTextureCoords:                      break;                  case TextureMapMode.GuTextureMatrix:                      switch (TextureProjectionMapMode)                      {                          case TextureProjectionMapMode.GuNormal:                              components = 3;                              break;                          case TextureProjectionMapMode.GuNormalizedNormal:                              components = 3;                              break;                          case TextureProjectionMapMode.GuPosition:                              components = 3;                              break;                          case TextureProjectionMapMode.GuUv:                              components = 2;                              break;                      }                      break;                  case TextureMapMode.GuEnvironmentMap:                      break;              }
Magic Number,CSPspEmu.Core.Gpu.State,TextureMappingStateStruct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuState.cs,GetTextureComponentsCount,The following statement contains a magic number: switch (TextureMapMode)              {                  case TextureMapMode.GuTextureCoords:                      break;                  case TextureMapMode.GuTextureMatrix:                      switch (TextureProjectionMapMode)                      {                          case TextureProjectionMapMode.GuNormal:                              components = 3;                              break;                          case TextureProjectionMapMode.GuNormalizedNormal:                              components = 3;                              break;                          case TextureProjectionMapMode.GuPosition:                              components = 3;                              break;                          case TextureProjectionMapMode.GuUv:                              components = 2;                              break;                      }                      break;                  case TextureMapMode.GuEnvironmentMap:                      break;              }
Magic Number,CSPspEmu.Core.Gpu.State,TextureMappingStateStruct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuState.cs,GetTextureComponentsCount,The following statement contains a magic number: switch (TextureMapMode)              {                  case TextureMapMode.GuTextureCoords:                      break;                  case TextureMapMode.GuTextureMatrix:                      switch (TextureProjectionMapMode)                      {                          case TextureProjectionMapMode.GuNormal:                              components = 3;                              break;                          case TextureProjectionMapMode.GuNormalizedNormal:                              components = 3;                              break;                          case TextureProjectionMapMode.GuPosition:                              components = 3;                              break;                          case TextureProjectionMapMode.GuUv:                              components = 2;                              break;                      }                      break;                  case TextureMapMode.GuEnvironmentMap:                      break;              }
Magic Number,CSPspEmu.Core.Gpu.State,VertexTypeStruct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuState.cs,GetVertexSize,The following statement contains a magic number: size += 3 * NormalSize;
Magic Number,CSPspEmu.Core.Gpu.State,VertexTypeStruct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuState.cs,GetVertexSize,The following statement contains a magic number: size += 3 * PositionSize;
Magic Number,CSPspEmu.Core.Gpu.State,ColorbStruct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuState.cs,SetRgb,The following statement contains a magic number: Green = (byte) ((params24 >> 8) & 0xFF);
Magic Number,CSPspEmu.Core.Gpu.State,ColorbStruct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuState.cs,SetRgb,The following statement contains a magic number: Blue = (byte) ((params24 >> 16) & 0xFF);
Magic Number,CSPspEmu.Core.Gpu.State,ColorfStruct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuState.cs,SetRgb,The following statement contains a magic number: Green = ((params24 >> 8) & 0xFF) / 255.0f;
Magic Number,CSPspEmu.Core.Gpu.State,ColorfStruct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuState.cs,SetRgb,The following statement contains a magic number: Blue = ((params24 >> 16) & 0xFF) / 255.0f;
Magic Number,CSPspEmu.Core.Gpu.VertexReading,VertexReader,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexReading\VertexReader.cs,SetVertexTypeStruct,The following statement contains a magic number: {                  ReadWeights = ReadWeightsList[(int) vertexType.Weight];                  ReadTextureCoordinates = ReadTextureCoordinatesList[(int) vertexType.Texture];                  ReadColor = ReadColorList[(int) vertexType.Color];                  ReadNormal = ReadNormalList[(int) vertexType.Normal];                  ReadPosition = ReadPositionList[(int) vertexType.Position];                    switch (vertexType.StructAlignment)                  {                      case 4:                          VertexAlignment = Align4;                          break;                      case 2:                          VertexAlignment = Align2;                          break;                      default:                          VertexAlignment = Align1;                          break;                  }              }
Magic Number,CSPspEmu.Core.Gpu.VertexReading,VertexReader,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexReading\VertexReader.cs,SetVertexTypeStruct,The following statement contains a magic number: {                  ReadWeights = ReadWeightsList[(int) vertexType.Weight];                  ReadTextureCoordinates = ReadTextureCoordinatesList[(int) vertexType.Texture];                  ReadColor = ReadColorList[(int) vertexType.Color];                  ReadNormal = ReadNormalList[(int) vertexType.Normal];                  ReadPosition = ReadPositionList[(int) vertexType.Position];                    switch (vertexType.StructAlignment)                  {                      case 4:                          VertexAlignment = Align4;                          break;                      case 2:                          VertexAlignment = Align2;                          break;                      default:                          VertexAlignment = Align1;                          break;                  }              }
Magic Number,CSPspEmu.Core.Gpu.VertexReading,VertexReader,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexReading\VertexReader.cs,ReadTextureCoordinatesByte,The following statement contains a magic number: VertexInfo->Texture.Z = (VertexType.NormalCount > 2) ? Pointer[2] : 0.0f;
Magic Number,CSPspEmu.Core.Gpu.VertexReading,VertexReader,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexReading\VertexReader.cs,ReadTextureCoordinatesByte,The following statement contains a magic number: VertexInfo->Texture.Z = (VertexType.NormalCount > 2) ? Pointer[2] : 0.0f;
Magic Number,CSPspEmu.Core.Gpu.VertexReading,VertexReader,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexReading\VertexReader.cs,ReadTextureCoordinatesShort,The following statement contains a magic number: VertexInfo->Texture.Z = (VertexType.NormalCount > 2) ? ((ushort*) Pointer)[2] : 0.0f;
Magic Number,CSPspEmu.Core.Gpu.VertexReading,VertexReader,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexReading\VertexReader.cs,ReadTextureCoordinatesShort,The following statement contains a magic number: VertexInfo->Texture.Z = (VertexType.NormalCount > 2) ? ((ushort*) Pointer)[2] : 0.0f;
Magic Number,CSPspEmu.Core.Gpu.VertexReading,VertexReader,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexReading\VertexReader.cs,ReadTextureCoordinatesFloat,The following statement contains a magic number: VertexInfo->Texture.Z = (VertexType.NormalCount > 2) ? ((float*) Pointer)[2] : 0.0f;
Magic Number,CSPspEmu.Core.Gpu.VertexReading,VertexReader,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexReading\VertexReader.cs,ReadTextureCoordinatesFloat,The following statement contains a magic number: VertexInfo->Texture.Z = (VertexType.NormalCount > 2) ? ((float*) Pointer)[2] : 0.0f;
Magic Number,CSPspEmu.Core.Gpu.VertexReading,VertexReader,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexReading\VertexReader.cs,ReadPositionByte,The following statement contains a magic number: VertexInfo->Position.Z = Transform2D ? Pointer[2] : (float) ((sbyte*) Pointer)[2];
Magic Number,CSPspEmu.Core.Gpu.VertexReading,VertexReader,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexReading\VertexReader.cs,ReadPositionByte,The following statement contains a magic number: VertexInfo->Position.Z = Transform2D ? Pointer[2] : (float) ((sbyte*) Pointer)[2];
Magic Number,CSPspEmu.Core.Gpu.VertexReading,VertexReader,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexReading\VertexReader.cs,ReadPositionByte,The following statement contains a magic number: PointerOffset += sizeof(byte) * 3;
Magic Number,CSPspEmu.Core.Gpu.VertexReading,VertexReader,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexReading\VertexReader.cs,ReadPositionShort,The following statement contains a magic number: VertexInfo->Position.Z = Transform2D ? ((ushort*) Pointer)[2] : (float) ((short*) Pointer)[2];
Magic Number,CSPspEmu.Core.Gpu.VertexReading,VertexReader,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexReading\VertexReader.cs,ReadPositionShort,The following statement contains a magic number: VertexInfo->Position.Z = Transform2D ? ((ushort*) Pointer)[2] : (float) ((short*) Pointer)[2];
Magic Number,CSPspEmu.Core.Gpu.VertexReading,VertexReader,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexReading\VertexReader.cs,ReadPositionShort,The following statement contains a magic number: PointerOffset += sizeof(short) * 3;
Magic Number,CSPspEmu.Core.Gpu.VertexReading,VertexReader,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexReading\VertexReader.cs,ReadPositionFloat,The following statement contains a magic number: VertexInfo->Position.Z = ((float*) Pointer)[2];
Magic Number,CSPspEmu.Core.Gpu.VertexReading,VertexReader,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexReading\VertexReader.cs,ReadPositionFloat,The following statement contains a magic number: PointerOffset += sizeof(float) * 3;
Magic Number,CSPspEmu.Core.Gpu.VertexReading,VertexReader,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexReading\VertexReader.cs,ReadNormalByte,The following statement contains a magic number: VertexInfo->Normal.Z = Pointer[2];
Magic Number,CSPspEmu.Core.Gpu.VertexReading,VertexReader,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexReading\VertexReader.cs,ReadNormalByte,The following statement contains a magic number: PointerOffset += sizeof(byte) * 3;
Magic Number,CSPspEmu.Core.Gpu.VertexReading,VertexReader,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexReading\VertexReader.cs,ReadNormalShort,The following statement contains a magic number: VertexInfo->Normal.Z = ((short*) Pointer)[2];
Magic Number,CSPspEmu.Core.Gpu.VertexReading,VertexReader,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexReading\VertexReader.cs,ReadNormalShort,The following statement contains a magic number: PointerOffset += sizeof(short) * 3;
Magic Number,CSPspEmu.Core.Gpu.VertexReading,VertexReader,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexReading\VertexReader.cs,ReadNormalFloat,The following statement contains a magic number: VertexInfo->Normal.Z = ((float*) Pointer)[2];
Magic Number,CSPspEmu.Core.Gpu.VertexReading,VertexReader,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\VertexReading\VertexReader.cs,ReadNormalFloat,The following statement contains a magic number: PointerOffset += sizeof(float) * 3;
Missing Default,CSPspEmu.Core.Gpu.State,TextureMappingStateStruct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuState.cs,GetTextureComponentsCount,The following switch statement is missing a default case: switch (TextureMapMode)              {                  case TextureMapMode.GuTextureCoords:                      break;                  case TextureMapMode.GuTextureMatrix:                      switch (TextureProjectionMapMode)                      {                          case TextureProjectionMapMode.GuNormal:                              components = 3;                              break;                          case TextureProjectionMapMode.GuNormalizedNormal:                              components = 3;                              break;                          case TextureProjectionMapMode.GuPosition:                              components = 3;                              break;                          case TextureProjectionMapMode.GuUv:                              components = 2;                              break;                      }                      break;                  case TextureMapMode.GuEnvironmentMap:                      break;              }
Missing Default,CSPspEmu.Core.Gpu.State,TextureMappingStateStruct,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Gpu\State\GpuState.cs,GetTextureComponentsCount,The following switch statement is missing a default case: switch (TextureProjectionMapMode)                      {                          case TextureProjectionMapMode.GuNormal:                              components = 3;                              break;                          case TextureProjectionMapMode.GuNormalizedNormal:                              components = 3;                              break;                          case TextureProjectionMapMode.GuPosition:                              components = 3;                              break;                          case TextureProjectionMapMode.GuUv:                              components = 2;                              break;                      }
