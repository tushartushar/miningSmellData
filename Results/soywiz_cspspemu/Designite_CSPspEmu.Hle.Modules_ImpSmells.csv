Implementation smell,Namespace,Class,File,Method,Description
Long Method,CSPspEmu.Hle.Modules.utility,sceUtility,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utility\sceUtility.cs,sceUtilitySavedataInitStart,The method has 214 lines of code.
Long Parameter List,CSPspEmu.Hle.Modules.audio,sceAudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceAudio.cs,_sceAudioOutputPannedBlocking,The method has 5 parameters. Parameters: Channel' LeftVolume' RightVolume' Buffer' Blocking
Long Parameter List,CSPspEmu.Hle.Modules.audio,sceAudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceAudio.cs,_sceAudioOutputPannedBlocking,The method has 5 parameters. Parameters: ChannelId' LeftVolume' RightVolume' Buffer' Blocking
Long Parameter List,CSPspEmu.Hle.Modules.iofilemgr,IoFileMgrForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\iofilemgr\IoFileMgrForUser.cs,sceIoIoctl,The method has 6 parameters. Parameters: FileHandle' Command' InputPointer' InputLength' OutputPointer' OutputLength
Long Parameter List,CSPspEmu.Hle.Modules.iofilemgr,IoFileMgrForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\iofilemgr\IoFileMgrForUser.cs,sceIoDevctl,The method has 6 parameters. Parameters: DeviceName' Command' InputPointer' InputLength' OutputPointer' OutputLength
Long Parameter List,CSPspEmu.Hle.Modules.iofilemgr,IoFileMgrForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\iofilemgr\IoFileMgrForUser.cs,sceIoAssign,The method has 6 parameters. Parameters: Device1' Device2' Device3' mode' unk1' unk2
Long Parameter List,CSPspEmu.Hle.Modules.iofilemgr,IoFileMgrForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\iofilemgr\IoFileMgrForUser.cs,sceIoIoctlAsync,The method has 6 parameters. Parameters: FileId' Command' InputPointer' InputLength' OutputPointer' OutputLength
Long Parameter List,CSPspEmu.Hle.Modules.iofilemgr,GuestHleIoDriver,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\iofilemgr\IoFileMgrForUser.Files.cs,IoIoctl,The method has 6 parameters. Parameters: HleIoDrvFileArg' Command' InputPointer' InputLength' OutputPointer' OutputLength
Long Parameter List,CSPspEmu.Hle.Modules.iofilemgr,GuestHleIoDriver,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\iofilemgr\IoFileMgrForUser.Files.cs,IoDevctl,The method has 7 parameters. Parameters: HleIoDrvFileArg' DeviceName' Command' InputPointer' InputLength' OutputPointer' OutputLength
Long Parameter List,CSPspEmu.Hle.Modules.libfont,sceLibFont,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libfont\sceLibFont.Font.cs,sceFontGetCharGlyphImage_Clip,The method has 7 parameters. Parameters: Font' CharCode' GlyphImage' ClipX' ClipY' ClipWidth' ClipHeight
Long Parameter List,CSPspEmu.Hle.Modules.libfont,FontBitmap,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libfont\sceLibFont.Font.cs,FontBitmap,The method has 5 parameters. Parameters: Address' FontPixelFormat' Width' Height' BytesPerLine
Long Parameter List,CSPspEmu.Hle.Modules.libfont,FontRegistryEntry,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libfont\sceLibFont.Utils.cs,FontRegistryEntry,The method has 16 parameters. Parameters: HorizontalSize' VerticalSize' HorizontalResolution' VerticalResolution' ExtraAttributes' Weight' Family' StyleStyle' StyleSub' Language' Region' Country' FileName' Name' Expire' ShadowOption
Long Parameter List,CSPspEmu.Hle.Modules.modulemgr,ModuleMgrForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\modulemgr\ModuleMgrForUser.cs,sceKernelStartModule,The method has 6 parameters. Parameters: CpuThreadState' ModuleId' ArgumentsSize' ArgumentsPointer' Status' SceKernelSMOption
Long Parameter List,CSPspEmu.Hle.Modules.modulemgr,ModuleMgrForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\modulemgr\ModuleMgrForUser.cs,sceKernelStopModule,The method has 5 parameters. Parameters: ModuleId' ArgumentsSize' ArgumentsPointer' Status' SceKernelSMOption
Long Parameter List,CSPspEmu.Hle.Modules.mpeg,sceMpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\sceMpeg.Atrac.cs,sceMpegAvcDecode,The method has 5 parameters. Parameters: SceMpegPointer' MpegAccessUnit' FrameWidth' OutputBufferPointer' Init
Long Parameter List,CSPspEmu.Hle.Modules.mpeg,sceMpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\sceMpeg.Atrac.cs,sceMpegAvcQueryYCbCrSize,The method has 5 parameters. Parameters: Mpeg' Mode' Width' Height' Result
Long Parameter List,CSPspEmu.Hle.Modules.mpeg,sceMpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\sceMpeg.Atrac.cs,sceMpegAvcCsc,The method has 5 parameters. Parameters: Mpeg' source_addr' range_addr' frameWidth' dest_addr
Long Parameter List,CSPspEmu.Hle.Modules.mpeg,sceMpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\sceMpeg.Atrac.cs,sceMpegAvcInitYCbCr,The method has 5 parameters. Parameters: Mpeg' mode' width' height' ycbcr_addr
Long Parameter List,CSPspEmu.Hle.Modules.mpeg,sceMpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\sceMpeg.Atrac.cs,sceMpegCreate,The method has 7 parameters. Parameters: sceMpegPointer' mpegData' mpegSize' sceMpegRingbuffer' frameWidth' mode' ddrTop
Long Parameter List,CSPspEmu.Hle.Modules.mpeg,sceMpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\sceMpeg.Atrac.cs,sceMpegRingbufferConstruct,The method has 6 parameters. Parameters: ringbuffer' packets' data' size' callback' callbackParam
Long Parameter List,CSPspEmu.Hle.Modules.pspnet,sceNet,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNet.cs,sceNetInit,The method has 5 parameters. Parameters: MemoryPoolSize' calloutprio' calloutstack' netintrprio' netintrstack
Long Parameter List,CSPspEmu.Hle.Modules.pspnet,sceNetAdhoc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetAdhoc.cs,sceNetAdhocPdpSend,The method has 7 parameters. Parameters: PDP' destMacAddr' port' data' len' timeout' nonblock
Long Parameter List,CSPspEmu.Hle.Modules.pspnet,sceNetAdhoc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetAdhoc.cs,sceNetAdhocPdpRecv,The method has 7 parameters. Parameters: PDP' srcMacAddr' port' data' dataLength' timeout' nonblock
Long Parameter List,CSPspEmu.Hle.Modules.pspnet,sceNetAdhoc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetAdhoc.cs,sceNetAdhocPtpOpen,The method has 8 parameters. Parameters: srcmac' srcport' destmac' destport' bufsize' delay' count' unk1
Long Parameter List,CSPspEmu.Hle.Modules.pspnet,sceNetAdhoc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetAdhoc.cs,sceNetAdhocPtpListen,The method has 7 parameters. Parameters: srcmac' srcport' bufsize' delay' count' queue' unk1
Long Parameter List,CSPspEmu.Hle.Modules.pspnet,sceNetAdhoc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetAdhoc.cs,sceNetAdhocPtpAccept,The method has 5 parameters. Parameters: id' mac' port' timeout' nonblock
Long Parameter List,CSPspEmu.Hle.Modules.pspnet,sceNetAdhoc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetAdhoc.cs,sceNetAdhocPtpSend,The method has 5 parameters. Parameters: id' data' datasize' timeout' nonblock
Long Parameter List,CSPspEmu.Hle.Modules.pspnet,sceNetAdhoc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetAdhoc.cs,sceNetAdhocPtpRecv,The method has 5 parameters. Parameters: id' data' datasize' timeout' nonblock
Long Parameter List,CSPspEmu.Hle.Modules.pspnet,sceNetAdhocctl,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetAdhocctl.cs,sceNetAdhocctlCreateEnterGameMode,The method has 6 parameters. Parameters: name' unknown' num' macs' timeout' unknown2
Long Parameter List,CSPspEmu.Hle.Modules.pspnet,sceNetAdhocMatching,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetAdhocMatching.cs,sceNetAdhocMatchingCreate,The method has 9 parameters. Parameters: Mode' MaxPeers' Port' BufSize' HelloDelay' PingDelay' InitCount' MsgDelay' Callback
Long Parameter List,CSPspEmu.Hle.Modules.pspnet,sceNetAdhocMatching,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetAdhocMatching.cs,sceNetAdhocMatchingStart,The method has 7 parameters. Parameters: Matching' evthPri' evthStack' inthPri' inthStack' optLen' optData
Long Parameter List,CSPspEmu.Hle.Modules.pspnet,sceNetInet,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetInet.cs,sceNetInetGetsockopt,The method has 5 parameters. Parameters: s' level' optname' optval' optlen
Long Parameter List,CSPspEmu.Hle.Modules.pspnet,sceNetInet,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetInet.cs,sceNetInetRecvfrom,The method has 6 parameters. Parameters: SocketId' BufferPointer' BufferLength' SocketFlags' From' FromLength
Long Parameter List,CSPspEmu.Hle.Modules.pspnet,sceNetInet,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetInet.cs,sceNetInetSendto,The method has 6 parameters. Parameters: SocketId' BufferPointer' BufferLength' SocketFlags' To' ToLength
Long Parameter List,CSPspEmu.Hle.Modules.pspnet,sceNetInet,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetInet.cs,sceNetInetSetsockopt,The method has 5 parameters. Parameters: SocketId' SocketOptionLevel' SocketOptionName' OptionValue' OptionValueLength
Long Parameter List,CSPspEmu.Hle.Modules.pspnet,sceNetResolver,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetResolver.cs,sceNetResolverStartNtoA,The method has 5 parameters. Parameters: ResolverId' HostName' Address' Timeout' Retries
Long Parameter List,CSPspEmu.Hle.Modules.pspnet,sceNetResolver,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetResolver.cs,sceNetResolverStartAtoN,The method has 6 parameters. Parameters: rid' addr' hostname' hostname_len' timeout' retry
Long Parameter List,CSPspEmu.Hle.Modules.kirk,semaphore,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sceMemlmd\semaphore.cs,sceUtilsBufferCopyWithRange,The method has 5 parameters. Parameters: OutputBuffer' OutputSize' InputBuffer' InputSize' Command
Long Parameter List,CSPspEmu.Hle.Modules.libatrac3plus,sceAtrac3plus,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libatrac3plus\sceAtrac3plus.cs,sceAtracDecodeData,The method has 5 parameters. Parameters: Atrac' SamplesOut' DecodedSamples' ReachedEnd' RemainingFramesToDecode
Long Parameter List,CSPspEmu.Hle.Modules.libatrac3plus,sceAtrac3plus,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libatrac3plus\sceAtrac3plus.cs,_sceAtracDecodeData,The method has 5 parameters. Parameters: Atrac' SamplesOut' DecodedSamples' ReachedEnd' RemainingFramesToDecode
Long Parameter List,CSPspEmu.Hle.Modules.registry,sceReg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\registry\sceReg.cs,sceRegGetKeyInfo,The method has 5 parameters. Parameters: RegCategoryHandle' Name' RegKeyHandle' Type' Size
Long Parameter List,CSPspEmu.Hle.Modules.sc_sascore,sceSasCore,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sc_sascore\sceSasCore.cs,__sceSasInit,The method has 5 parameters. Parameters: SasCorePointer' GrainSamples' MaxVoices' OutputMode' SampleRate
Long Parameter List,CSPspEmu.Hle.Modules.sc_sascore,sceSasCore,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sc_sascore\sceSasCore.cs,__sceSasCore_Internal,The method has 5 parameters. Parameters: SasCore' SasOut' SasIn' LeftVolume' RightVolume
Long Parameter List,CSPspEmu.Hle.Modules.sc_sascore,sceSasCore,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sc_sascore\sceSasCore.cs,__sceSasSetVoice,The method has 5 parameters. Parameters: SasCorePointer' Voice' VagPointer' VagSize' LoopCount
Long Parameter List,CSPspEmu.Hle.Modules.sc_sascore,sceSasCore,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sc_sascore\sceSasCore.cs,__sceSasSetVolume,The method has 6 parameters. Parameters: SasCorePointer' Voice' LeftVolume' RightVolume' EffectLeftVol' EffectRightVol
Long Parameter List,CSPspEmu.Hle.Modules.sc_sascore,sceSasCore,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sc_sascore\sceSasCore.cs,__sceSasSetADSR,The method has 7 parameters. Parameters: SasCorePointer' Voice' Flags' AttackRate' DecayRate' SustainRate' ReleaseRate
Long Parameter List,CSPspEmu.Hle.Modules.sc_sascore,sceSasCore,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sc_sascore\sceSasCore.cs,__sceSasSetADSRmode,The method has 7 parameters. Parameters: SasCorePointer' voice' flags' attackCurveMode' decayCurveMode' sustainCurveMode' releaseCurveMode
Long Parameter List,CSPspEmu.Hle.Modules.sysmem,sceSysEventForKernel,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sysmem\sceSysEventForKernel.cs,sceKernelSysEventDispatch,The method has 7 parameters. Parameters: EventTypeMask' EventId' EventNamePointer' Parameter' Result' BreakNonZero' BreakHandler
Long Parameter List,CSPspEmu.Hle.Modules.sysmem,SysMemUserForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sysmem\SysMemUserForUser.cs,sceKernelAllocPartitionMemory,The method has 5 parameters. Parameters: PartitionId' Name' Type' Size' Address
Long Parameter List,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,_sceKernelWaitEventFlagCB,The method has 6 parameters. Parameters: EventFlag' Bits' Wait' OutBits' Timeout' HandleCallbacks
Long Parameter List,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,sceKernelWaitEventFlag,The method has 5 parameters. Parameters: EventFlag' Bits' WaitType' OutBits' Timeout
Long Parameter List,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,sceKernelWaitEventFlagCB,The method has 5 parameters. Parameters: EventFlag' Bits' WaitType' OutBits' Timeout
Long Parameter List,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,sceKernelCreateFpl,The method has 6 parameters. Parameters: Name' PartitionId' Attributes' BlockSize' NumberOfBlocks' Options
Long Parameter List,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,sceKernelCreateLwMutex,The method has 5 parameters. Parameters: WorkAreaPointer' Name' Attributes' InitialCount' OptionAddress
Long Parameter List,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,sceKernelCreateMsgPipe,The method has 5 parameters. Parameters: Name' PartitionId' Attributes' Size' Options
Long Parameter List,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,sceKernelSendMsgPipe,The method has 6 parameters. Parameters: MsgPipe' Message' Size' WaitMode' ResultSizeAddr' Timeout
Long Parameter List,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,sceKernelTrySendMsgPipe,The method has 5 parameters. Parameters: MsgPipe' Message' Size' WaitMode' ResultSizeAddr
Long Parameter List,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,sceKernelReceiveMsgPipe,The method has 6 parameters. Parameters: MsgPipe' Message' Size' WaitMode' ResultSizeAddr' Timeout
Long Parameter List,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,sceKernelTryReceiveMsgPipe,The method has 5 parameters. Parameters: MsgPipe' Message' Size' WaitMode' ResultSizeAddr
Long Parameter List,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,sceKernelCreateSema,The method has 5 parameters. Parameters: Name' SemaphoreAttribute' InitialCount' MaximumCount' Options
Long Parameter List,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,sceKernelCreateThread,The method has 7 parameters. Parameters: CpuThreadState' Name' EntryPoint' InitPriority' StackSize' Attribute' Option
Long Parameter List,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,sceKernelCreateVpl,The method has 5 parameters. Parameters: Name' PartitionId' Attribute' Size' Options
Long Parameter List,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,sceKernelAllocateVpl,The method has 5 parameters. Parameters: CpuThreadState' VariablePool' Size' AddressPointer' Timeout
Long Parameter List,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,sceKernelAllocateVplCB,The method has 5 parameters. Parameters: CpuThreadState' VariablePool' Size' AddressPointer' Timeout
Long Parameter List,CSPspEmu.Hle.Modules.threadman,VariablePool,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.Vpl.cs,Allocate,The method has 5 parameters. Parameters: CpuThreadState' Size' AddressPointer' Timeout' HandleCallbacks
Long Identifier,CSPspEmu.Hle.Modules.libatrac3plus,PspBufferInfo,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libatrac3plus\sceAtrac3plus.Utils.cs,,The length of the parameter pucWritePositionFirstBufPointer is 31.
Long Identifier,CSPspEmu.Hle.Modules.libatrac3plus,PspBufferInfo,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libatrac3plus\sceAtrac3plus.Utils.cs,,The length of the parameter pucWritePositionSecondBufPointer is 32.
Long Statement,CSPspEmu.Hle.Modules.audio,sceAudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceAudio.cs,_sceAudioOutputPannedBlocking,The length of the statement  "                $"_sceAudioOutputPannedBlocking({Channel}' Volume({LeftVolume}' {RightVolume})' Blocking({Blocking}))"' Channel' WakeUpCallback => " is 130.
Long Statement,CSPspEmu.Hle.Modules.ge,sceGe_user,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\ge\sceGe_user.cs,sceGeSetCallback,The length of the statement  "                Console.WriteLine("PspGeCallbackData.Finish(0x{0:X}) : (0x{1:X})"' CallbackData.FinishFunction' CallbackData.FinishArgument); " is 125.
Long Statement,CSPspEmu.Hle.Modules.ge,sceGe_user,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\ge\sceGe_user.cs,sceGeSetCallback,The length of the statement  "                Console.WriteLine("PspGeCallbackData.Signal(0x{0:X}) : (0x{1:X})"' CallbackData.SignalFunction' CallbackData.SignalArgument); " is 125.
Long Statement,CSPspEmu.Hle.Modules.iofilemgr,IoFileMgrForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\iofilemgr\IoFileMgrForUser.cs,sceIoAssign,The length of the statement  "            // IoFileMgrForUser.sceIoAssign(Device1:'disc0:'' Device2:'umd0:'' Device3:'isofs0:'' mode:1' unk1:0x00000000' unk2:0x0880001E) " is 127.
Long Statement,CSPspEmu.Hle.Modules.libfont,FontCharInfo,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libfont\sceLibFont.Utils.cs,ToString,The length of the statement  "                       $"Metrics(W={Width}' H={Height}' Ascender={Ascender}' Descender={Descender}' BearingH={BearingHX}x{BearingHY}' BearingV={BearingVX}x{BearingVY}' Advance={AdvanceH}x{AdvanceV})"; " is 177.
Long Statement,CSPspEmu.Hle.Modules.mpeg,Mpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\Mpeg.cs,DecodePsPacket,The length of the statement  "                    //ConsoleUtils.SaveRestoreConsoleColor(ConsoleColor.Green' () => { Console.WriteLine("DecodePsPacket: {0}:{1:X4}: {2}"' Packet.Type' (int)Packet.Type' Info); }); " is 161.
Long Statement,CSPspEmu.Hle.Modules.mpeg,sceMpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\sceMpeg.Atrac.cs,sceMpegRingbufferPut,The length of the statement  "            //var PacketsAdded = (int)HleInterop.ExecuteFunctionNow(Ringbuffer->Callback' Ringbuffer->Data' NumPackets' Ringbuffer->CallbackParameter); " is 139.
Long Statement,CSPspEmu.Hle.Modules.libatrac3plus,sceAtrac3plus,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libatrac3plus\sceAtrac3plus.cs,_sceAtracDecodeData,The length of the statement  "            //Console.WriteLine("{0}/{1} -> {2} : {3}"' Atrac.DecodingOffsetInSamples' Atrac.TotalSamples' DecodedSamples' Atrac.DecodingReachedEnd); " is 137.
Long Statement,CSPspEmu.Hle.Modules.libatrac3plus,sceAtrac3plus,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libatrac3plus\sceAtrac3plus.cs,sceAtracReinit,The length of the statement  "            //int at3CountAlready = InjectContext.GetInstance<HleUidPoolManager>().List<Atrac>().Count(Atrac => Atrac.CodecType == CodecType.PSP_MODE_AT_3); " is 144.
Long Statement,CSPspEmu.Hle.Modules.libatrac3plus,sceAtrac3plus,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libatrac3plus\sceAtrac3plus.cs,sceAtracReinit,The length of the statement  "            //int at3PlusCountAlready = InjectContext.GetInstance<HleUidPoolManager>().List<Atrac>().Count(Atrac => Atrac.CodecType == CodecType.PSP_MODE_AT_3_PLUS); " is 153.
Long Statement,CSPspEmu.Hle.Modules.sysmem,SysMemUserForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sysmem\SysMemUserForUser.cs,sceKernelAllocPartitionMemory,The length of the statement  "            //Console.Error.WriteLineColored(ConsoleColor.Yellow' "sceKernelAllocPartitionMemory: {0}' {1}' {2}' {3}' {4}"' PartitionId' MemoryManager.GetPartition(PartitionId).MaxFreeSize' Name' Type' Size); " is 196.
Long Statement,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,sceKernelFreeFpl,The length of the statement  "            //if (!FixedPoolList.Contains(FixedPool)) throw (new SceKernelException(SceKernelErrors.ERROR_KERNEL_ILLEGAL_MEMBLOCK)); " is 120.
Long Statement,CSPspEmu.Hle.Modules.threadman,FixedPool,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.Fpl.cs,Init,The length of the statement  "                //this.MemoryPartition = Partition.Allocate(NumberOfBlocks * BlockSize' Hle.MemoryPartition.Anchor.Set' TEST_FIXED_ADDRESS' Alignment); " is 135.
Long Statement,CSPspEmu.Hle.Modules.usersystemlib,Kernel_Library,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\usersystemlib\Kernel_Library.cs,_sceKernelLockLwMutexCB,The length of the statement  "			if (count > 1 && workarea->attr.HasFlagGeneric(ThreadManForUser.MutexAttributesEnum.AllowRecursive)) throw (new SceKernelException(SceKernelErrors.ERROR_KERNEL_ILLEGAL_COUNT)); " is 176.
Long Statement,CSPspEmu.Hle.Modules.usersystemlib,Kernel_Library,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\usersystemlib\Kernel_Library.cs,_sceKernelLockLwMutexCB,The length of the statement  "			if (count + workarea->lockLevel < 0) throw (new SceKernelException(SceKernelErrors.ERROR_KERNEL_LWMUTEX_LOCK_OVERFLOW)); " is 120.
Complex Conditional,CSPspEmu.Hle.Modules.modulemgr,ModuleMgrForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\modulemgr\ModuleMgrForUser.cs,sceKernelLoadModuleWithStream,The conditional expression  "Path.EndsWith(@"/libatrac3plus.prx") ||                      Path.EndsWith(@"/videocodec.prx") ||                      Path.EndsWith(@"/audiocodec.prx") ||                      Path.EndsWith(@"/mpeg.prx") ||                      Path.EndsWith(@"/mpegbase.prx") ||                      Path.EndsWith(@"/libfont.prx") ||                      false"  is complex.
Complex Conditional,CSPspEmu.Hle.Modules.mpeg,sceMpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\sceMpeg.Atrac.cs,sceMpegAvcQueryYCbCrSize,The conditional expression  "(Width & 15) != 0 || (Height & 15) != 0 || Width > 480 || Height > 272"  is complex.
Complex Conditional,CSPspEmu.Hle.Modules.sc_sascore,sceSasCore,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sc_sascore\sceSasCore.cs,__sceSasSetVolume,The conditional expression  "LeftVolume > PSP_SAS_VOL_MAX || RightVolume > PSP_SAS_VOL_MAX || EffectLeftVol > PSP_SAS_VOL_MAX ||                  EffectRightVol > PSP_SAS_VOL_MAX"  is complex.
Empty Catch Block,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcGetCurrentClock,The method has an empty catch block.
Empty Catch Block,CSPspEmu.Hle.Modules.usersystemlib,Kernel_Library,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\usersystemlib\Kernel_Library.cs,sceKernelMemset,The method has an empty catch block.
Empty Catch Block,CSPspEmu.Hle.Modules.usersystemlib,Kernel_Library,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\usersystemlib\Kernel_Library.cs,sceKernelMemcpy,The method has an empty catch block.
Magic Number,CSPspEmu.Hle.Modules.audio,sceAudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceAudio.cs,sceAudioGetChannelRestLength,The following statement contains a magic number: return 844;
Magic Number,CSPspEmu.Hle.Modules.audio,sceAudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceAudio.cs,IsValidSampleCountOutput2,The following statement contains a magic number: return !(SampleCount < 17 || SampleCount > 4111);
Magic Number,CSPspEmu.Hle.Modules.audio,sceAudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceAudio.cs,IsValidSampleCountOutput2,The following statement contains a magic number: return !(SampleCount < 17 || SampleCount > 4111);
Magic Number,CSPspEmu.Hle.Modules.audio,sceAudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceAudio.cs,IsValidSampleCount,The following statement contains a magic number: return !((SampleCount & 63) != 0 || SampleCount <= 0 || SampleCount > PspAudio.SamplesMax);
Magic Number,CSPspEmu.Hle.Modules.audio,sceAudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceAudio.cs,sceAudioSRCChReserve,The following statement contains a magic number: if (Frequency != 44100) throw (new Exception($"sceAudioSRCChReserve: {Frequency}"));
Magic Number,CSPspEmu.Hle.Modules.audio,sceAudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceAudio.cs,sceAudioSRCChReserve,The following statement contains a magic number: var ValidFrequencies = new int[] {0' 8000' 11025' 12000' 16000' 22050' 24000' 32000' 48000};
Magic Number,CSPspEmu.Hle.Modules.audio,sceAudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceAudio.cs,sceAudioSRCChReserve,The following statement contains a magic number: var ValidFrequencies = new int[] {0' 8000' 11025' 12000' 16000' 22050' 24000' 32000' 48000};
Magic Number,CSPspEmu.Hle.Modules.audio,sceAudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceAudio.cs,sceAudioSRCChReserve,The following statement contains a magic number: var ValidFrequencies = new int[] {0' 8000' 11025' 12000' 16000' 22050' 24000' 32000' 48000};
Magic Number,CSPspEmu.Hle.Modules.audio,sceAudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceAudio.cs,sceAudioSRCChReserve,The following statement contains a magic number: var ValidFrequencies = new int[] {0' 8000' 11025' 12000' 16000' 22050' 24000' 32000' 48000};
Magic Number,CSPspEmu.Hle.Modules.audio,sceAudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceAudio.cs,sceAudioSRCChReserve,The following statement contains a magic number: var ValidFrequencies = new int[] {0' 8000' 11025' 12000' 16000' 22050' 24000' 32000' 48000};
Magic Number,CSPspEmu.Hle.Modules.audio,sceAudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceAudio.cs,sceAudioSRCChReserve,The following statement contains a magic number: var ValidFrequencies = new int[] {0' 8000' 11025' 12000' 16000' 22050' 24000' 32000' 48000};
Magic Number,CSPspEmu.Hle.Modules.audio,sceAudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceAudio.cs,sceAudioSRCChReserve,The following statement contains a magic number: var ValidFrequencies = new int[] {0' 8000' 11025' 12000' 16000' 22050' 24000' 32000' 48000};
Magic Number,CSPspEmu.Hle.Modules.audio,sceAudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceAudio.cs,sceAudioSRCChReserve,The following statement contains a magic number: var ValidFrequencies = new int[] {0' 8000' 11025' 12000' 16000' 22050' 24000' 32000' 48000};
Magic Number,CSPspEmu.Hle.Modules.audio,sceAudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceAudio.cs,sceAudioSRCChReserve,The following statement contains a magic number: if (Channels == 4) throw (new SceKernelException(SceKernelErrors.PSP_AUDIO_ERROR_SRC_FORMAT_4));
Magic Number,CSPspEmu.Hle.Modules.audio,sceAudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceAudio.cs,sceAudioSRCChReserve,The following statement contains a magic number: if (Channels != 2) throw (new SceKernelException(SceKernelErrors.ERROR_INVALID_SIZE));
Magic Number,CSPspEmu.Hle.Modules.audio,sceAudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceAudio.cs,sceAudioSRCChReserve,The following statement contains a magic number: _sceAudioChReserve(() => PspAudio.SrcOutput2Channel' SampleCount'                  (Channels == 2) ? Core.Audio.PspAudio.FormatEnum.Stereo : Core.Audio.PspAudio.FormatEnum.Mono);
Magic Number,CSPspEmu.Hle.Modules.audio,sceVaudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceVaudio.cs,sceVaudioChReserve,The following statement contains a magic number: try              {                  if (VAudioReserved)                  {                      throw (new SceKernelException(SceKernelErrors.ERROR_BUSY));                  }                    if (PspVaudioChannel.IsReserved)                  {                      throw (new SceKernelException(SceKernelErrors.ERROR_AUDIO_CHANNEL_ALREADY_RESERVED));                  }                    if (SampleCount != 256 && SampleCount != 1024 && SampleCount != 2048)                  {                      throw (new SceKernelException(SceKernelErrors.ERROR_INVALID_SIZE));                  }                    if (Channels != 2)                  {                      throw (new SceKernelException(SceKernelErrors.ERROR_INVALID_FORMAT));                  }                    VAudioReserved = true;                  PspVaudioChannel.IsReserved = true;                  PspVaudioChannel.SampleCount = SampleCount;                  PspVaudioChannel.Frequency = Frequency;                  PspVaudioChannel.NumberOfChannels = Channels;                    return 0;              }              catch (InvalidAudioFormatException)              {                  throw (new SceKernelException(SceKernelErrors.ERROR_AUDIO_CHANNEL_ALREADY_RESERVED));              }
Magic Number,CSPspEmu.Hle.Modules.audio,sceVaudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceVaudio.cs,sceVaudioChReserve,The following statement contains a magic number: try              {                  if (VAudioReserved)                  {                      throw (new SceKernelException(SceKernelErrors.ERROR_BUSY));                  }                    if (PspVaudioChannel.IsReserved)                  {                      throw (new SceKernelException(SceKernelErrors.ERROR_AUDIO_CHANNEL_ALREADY_RESERVED));                  }                    if (SampleCount != 256 && SampleCount != 1024 && SampleCount != 2048)                  {                      throw (new SceKernelException(SceKernelErrors.ERROR_INVALID_SIZE));                  }                    if (Channels != 2)                  {                      throw (new SceKernelException(SceKernelErrors.ERROR_INVALID_FORMAT));                  }                    VAudioReserved = true;                  PspVaudioChannel.IsReserved = true;                  PspVaudioChannel.SampleCount = SampleCount;                  PspVaudioChannel.Frequency = Frequency;                  PspVaudioChannel.NumberOfChannels = Channels;                    return 0;              }              catch (InvalidAudioFormatException)              {                  throw (new SceKernelException(SceKernelErrors.ERROR_AUDIO_CHANNEL_ALREADY_RESERVED));              }
Magic Number,CSPspEmu.Hle.Modules.audio,sceVaudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceVaudio.cs,sceVaudioChReserve,The following statement contains a magic number: try              {                  if (VAudioReserved)                  {                      throw (new SceKernelException(SceKernelErrors.ERROR_BUSY));                  }                    if (PspVaudioChannel.IsReserved)                  {                      throw (new SceKernelException(SceKernelErrors.ERROR_AUDIO_CHANNEL_ALREADY_RESERVED));                  }                    if (SampleCount != 256 && SampleCount != 1024 && SampleCount != 2048)                  {                      throw (new SceKernelException(SceKernelErrors.ERROR_INVALID_SIZE));                  }                    if (Channels != 2)                  {                      throw (new SceKernelException(SceKernelErrors.ERROR_INVALID_FORMAT));                  }                    VAudioReserved = true;                  PspVaudioChannel.IsReserved = true;                  PspVaudioChannel.SampleCount = SampleCount;                  PspVaudioChannel.Frequency = Frequency;                  PspVaudioChannel.NumberOfChannels = Channels;                    return 0;              }              catch (InvalidAudioFormatException)              {                  throw (new SceKernelException(SceKernelErrors.ERROR_AUDIO_CHANNEL_ALREADY_RESERVED));              }
Magic Number,CSPspEmu.Hle.Modules.audio,sceVaudio,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\audio\sceVaudio.cs,sceVaudioChReserve,The following statement contains a magic number: try              {                  if (VAudioReserved)                  {                      throw (new SceKernelException(SceKernelErrors.ERROR_BUSY));                  }                    if (PspVaudioChannel.IsReserved)                  {                      throw (new SceKernelException(SceKernelErrors.ERROR_AUDIO_CHANNEL_ALREADY_RESERVED));                  }                    if (SampleCount != 256 && SampleCount != 1024 && SampleCount != 2048)                  {                      throw (new SceKernelException(SceKernelErrors.ERROR_INVALID_SIZE));                  }                    if (Channels != 2)                  {                      throw (new SceKernelException(SceKernelErrors.ERROR_INVALID_FORMAT));                  }                    VAudioReserved = true;                  PspVaudioChannel.IsReserved = true;                  PspVaudioChannel.SampleCount = SampleCount;                  PspVaudioChannel.Frequency = Frequency;                  PspVaudioChannel.NumberOfChannels = Channels;                    return 0;              }              catch (InvalidAudioFormatException)              {                  throw (new SceKernelException(SceKernelErrors.ERROR_AUDIO_CHANNEL_ALREADY_RESERVED));              }
Magic Number,CSPspEmu.Hle.Modules.libfont,FontBitmap,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libfont\sceLibFont.Font.cs,FontBitmap,The following statement contains a magic number: switch (FontPixelFormat)                  {                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_4:                          this.BitsPerPixel = 4;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_4_REV:                          this.BitsPerPixel = 4;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_8:                          this.BitsPerPixel = 8;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_24:                          this.BitsPerPixel = 24;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_32:                          this.BitsPerPixel = 32;                          break;                  }
Magic Number,CSPspEmu.Hle.Modules.libfont,FontBitmap,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libfont\sceLibFont.Font.cs,FontBitmap,The following statement contains a magic number: switch (FontPixelFormat)                  {                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_4:                          this.BitsPerPixel = 4;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_4_REV:                          this.BitsPerPixel = 4;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_8:                          this.BitsPerPixel = 8;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_24:                          this.BitsPerPixel = 24;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_32:                          this.BitsPerPixel = 32;                          break;                  }
Magic Number,CSPspEmu.Hle.Modules.libfont,FontBitmap,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libfont\sceLibFont.Font.cs,FontBitmap,The following statement contains a magic number: switch (FontPixelFormat)                  {                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_4:                          this.BitsPerPixel = 4;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_4_REV:                          this.BitsPerPixel = 4;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_8:                          this.BitsPerPixel = 8;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_24:                          this.BitsPerPixel = 24;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_32:                          this.BitsPerPixel = 32;                          break;                  }
Magic Number,CSPspEmu.Hle.Modules.libfont,FontBitmap,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libfont\sceLibFont.Font.cs,FontBitmap,The following statement contains a magic number: switch (FontPixelFormat)                  {                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_4:                          this.BitsPerPixel = 4;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_4_REV:                          this.BitsPerPixel = 4;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_8:                          this.BitsPerPixel = 8;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_24:                          this.BitsPerPixel = 24;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_32:                          this.BitsPerPixel = 32;                          break;                  }
Magic Number,CSPspEmu.Hle.Modules.libfont,FontBitmap,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libfont\sceLibFont.Font.cs,FontBitmap,The following statement contains a magic number: switch (FontPixelFormat)                  {                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_4:                          this.BitsPerPixel = 4;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_4_REV:                          this.BitsPerPixel = 4;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_8:                          this.BitsPerPixel = 8;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_24:                          this.BitsPerPixel = 24;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_32:                          this.BitsPerPixel = 32;                          break;                  }
Magic Number,CSPspEmu.Hle.Modules.libfont,FontBitmap,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libfont\sceLibFont.Font.cs,GetOffset,The following statement contains a magic number: return Y * BytesPerLine + (X * this.BitsPerPixel) / 8;
Magic Number,CSPspEmu.Hle.Modules.libfont,FontBitmap,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libfont\sceLibFont.Font.cs,SetPixel,The following statement contains a magic number: byte C = (byte) (Color.R * 15 / 255);
Magic Number,CSPspEmu.Hle.Modules.libfont,FontBitmap,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libfont\sceLibFont.Font.cs,SetPixel,The following statement contains a magic number: byte C = (byte) (Color.R * 15 / 255);
Magic Number,CSPspEmu.Hle.Modules.libfont,FontBitmap,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libfont\sceLibFont.Font.cs,SetPixel,The following statement contains a magic number: switch (FontPixelFormat)                  {                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_4:                          *WriteAddress = (byte) ((*WriteAddress & 0xF0) | ((C & 0xF) << 0));                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_4_REV:                          *WriteAddress = (byte) ((*WriteAddress & 0x0F) | ((C & 0xF) << 4));                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_8:                          *WriteAddress = Color.A;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_24:                          *(WriteAddress + 0) = Color.R;                          *(WriteAddress + 1) = Color.G;                          *(WriteAddress + 2) = Color.B;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_32:                          *(WriteAddress + 0) = Color.R;                          *(WriteAddress + 1) = Color.G;                          *(WriteAddress + 2) = Color.B;                          *(WriteAddress + 3) = Color.A;                          break;                  }
Magic Number,CSPspEmu.Hle.Modules.libfont,FontBitmap,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libfont\sceLibFont.Font.cs,SetPixel,The following statement contains a magic number: switch (FontPixelFormat)                  {                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_4:                          *WriteAddress = (byte) ((*WriteAddress & 0xF0) | ((C & 0xF) << 0));                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_4_REV:                          *WriteAddress = (byte) ((*WriteAddress & 0x0F) | ((C & 0xF) << 4));                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_8:                          *WriteAddress = Color.A;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_24:                          *(WriteAddress + 0) = Color.R;                          *(WriteAddress + 1) = Color.G;                          *(WriteAddress + 2) = Color.B;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_32:                          *(WriteAddress + 0) = Color.R;                          *(WriteAddress + 1) = Color.G;                          *(WriteAddress + 2) = Color.B;                          *(WriteAddress + 3) = Color.A;                          break;                  }
Magic Number,CSPspEmu.Hle.Modules.libfont,FontBitmap,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libfont\sceLibFont.Font.cs,SetPixel,The following statement contains a magic number: switch (FontPixelFormat)                  {                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_4:                          *WriteAddress = (byte) ((*WriteAddress & 0xF0) | ((C & 0xF) << 0));                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_4_REV:                          *WriteAddress = (byte) ((*WriteAddress & 0x0F) | ((C & 0xF) << 4));                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_8:                          *WriteAddress = Color.A;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_24:                          *(WriteAddress + 0) = Color.R;                          *(WriteAddress + 1) = Color.G;                          *(WriteAddress + 2) = Color.B;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_32:                          *(WriteAddress + 0) = Color.R;                          *(WriteAddress + 1) = Color.G;                          *(WriteAddress + 2) = Color.B;                          *(WriteAddress + 3) = Color.A;                          break;                  }
Magic Number,CSPspEmu.Hle.Modules.libfont,FontBitmap,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libfont\sceLibFont.Font.cs,SetPixel,The following statement contains a magic number: switch (FontPixelFormat)                  {                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_4:                          *WriteAddress = (byte) ((*WriteAddress & 0xF0) | ((C & 0xF) << 0));                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_4_REV:                          *WriteAddress = (byte) ((*WriteAddress & 0x0F) | ((C & 0xF) << 4));                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_8:                          *WriteAddress = Color.A;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_24:                          *(WriteAddress + 0) = Color.R;                          *(WriteAddress + 1) = Color.G;                          *(WriteAddress + 2) = Color.B;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_32:                          *(WriteAddress + 0) = Color.R;                          *(WriteAddress + 1) = Color.G;                          *(WriteAddress + 2) = Color.B;                          *(WriteAddress + 3) = Color.A;                          break;                  }
Magic Number,CSPspEmu.Hle.Modules.libfont,FontLibrary,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libfont\sceLibFont.cs,FontLibrary,The following statement contains a magic number: FontRegistryList = new List<FontRegistryEntry>()                  {                      new FontRegistryEntry(0x288' 0x288' 0x2000' 0x2000' 0' 0' FamilyEnum.FontFamilySansSerif'                          StyleEnum.FontStyleDb' 0' LanguageEnum.FontLanguageJapanese' 0' 1' "jpn0.pgf"'                          "FTT-NewRodin Pro DB"' 0' 0)'                      new FontRegistryEntry(0x288' 0x288' 0x2000' 0x2000' 0' 0' FamilyEnum.FontFamilySansSerif'                          StyleEnum.FontStyleRegular' 0' LanguageEnum.FontLanguageLatin' 0' 1' "ltn0.pgf"'                          "FTT-NewRodin Pro Latin"' 0' 0)'                      new FontRegistryEntry(0x288' 0x288' 0x2000' 0x2000' 0' 0' FamilyEnum.FontFamilySerif'                          StyleEnum.FontStyleRegular' 0' LanguageEnum.FontLanguageLatin' 0' 1' "ltn1.pgf"'                          "FTT-Matisse Pro Latin"' 0' 0)'                      new FontRegistryEntry(0x288' 0x288' 0x2000' 0x2000' 0' 0' FamilyEnum.FontFamilySansSerif'                          StyleEnum.FontStyleItalic' 0' LanguageEnum.FontLanguageLatin' 0' 1' "ltn2.pgf"'                          "FTT-NewRodin Pro Latin"' 0' 0)'                      new FontRegistryEntry(0x288' 0x288' 0x2000' 0x2000' 0' 0' FamilyEnum.FontFamilySerif'                          StyleEnum.FontStyleItalic' 0' LanguageEnum.FontLanguageLatin' 0' 1' "ltn3.pgf"'                          "FTT-Matisse Pro Latin"' 0' 0)'                      new FontRegistryEntry(0x288' 0x288' 0x2000' 0x2000' 0' 0' FamilyEnum.FontFamilySansSerif'                          StyleEnum.FontStyleBold' 0' LanguageEnum.FontLanguageLatin' 0' 1' "ltn4.pgf"'                          "FTT-NewRodin Pro Latin"' 0' 0)'                      new FontRegistryEntry(0x288' 0x288' 0x2000' 0x2000' 0' 0' FamilyEnum.FontFamilySerif'                          StyleEnum.FontStyleBold' 0' LanguageEnum.FontLanguageLatin' 0' 1' "ltn5.pgf"'                          "FTT-Matisse Pro Latin"' 0' 0)'                      new FontRegistryEntry(0x288' 0x288' 0x2000' 0x2000' 0' 0' FamilyEnum.FontFamilySansSerif'                          StyleEnum.FontStyleBoldItalic' 0' LanguageEnum.FontLanguageLatin' 0' 1' "ltn6.pgf"'                          "FTT-NewRodin Pro Latin"' 0' 0)'                      new FontRegistryEntry(0x288' 0x288' 0x2000' 0x2000' 0' 0' FamilyEnum.FontFamilySerif'                          StyleEnum.FontStyleBoldItalic' 0' LanguageEnum.FontLanguageLatin' 0' 1' "ltn7.pgf"'                          "FTT-Matisse Pro Latin"' 0' 0)'                      new FontRegistryEntry(0x1c0' 0x1c0' 0x2000' 0x2000' 0' 0' FamilyEnum.FontFamilySansSerif'                          StyleEnum.FontStyleRegular' 0' LanguageEnum.FontLanguageLatin' 0' 1' "ltn8.pgf"'                          "FTT-NewRodin Pro Latin"' 0' 0)'                      new FontRegistryEntry(0x1c0' 0x1c0' 0x2000' 0x2000' 0' 0' FamilyEnum.FontFamilySerif'                          StyleEnum.FontStyleRegular' 0' LanguageEnum.FontLanguageLatin' 0' 1' "ltn9.pgf"'                          "FTT-Matisse Pro Latin"' 0' 0)'                      new FontRegistryEntry(0x1c0' 0x1c0' 0x2000' 0x2000' 0' 0' FamilyEnum.FontFamilySansSerif'                          StyleEnum.FontStyleItalic' 0' LanguageEnum.FontLanguageLatin' 0' 1' "ltn10.pgf"'                          "FTT-NewRodin Pro Latin"' 0' 0)'                      new FontRegistryEntry(0x1c0' 0x1c0' 0x2000' 0x2000' 0' 0' FamilyEnum.FontFamilySerif'                          StyleEnum.FontStyleItalic' 0' LanguageEnum.FontLanguageLatin' 0' 1' "ltn11.pgf"'                          "FTT-Matisse Pro Latin"' 0' 0)'                      new FontRegistryEntry(0x1c0' 0x1c0' 0x2000' 0x2000' 0' 0' FamilyEnum.FontFamilySansSerif'                          StyleEnum.FontStyleBold' 0' LanguageEnum.FontLanguageLatin' 0' 1' "ltn12.pgf"'                          "FTT-NewRodin Pro Latin"' 0' 0)'                      new FontRegistryEntry(0x1c0' 0x1c0' 0x2000' 0x2000' 0' 0' FamilyEnum.FontFamilySerif'                          StyleEnum.FontStyleBold' 0' LanguageEnum.FontLanguageLatin' 0' 1' "ltn13.pgf"'                          "FTT-Matisse Pro Latin"' 0' 0)'                      new FontRegistryEntry(0x1c0' 0x1c0' 0x2000' 0x2000' 0' 0' FamilyEnum.FontFamilySansSerif'                          StyleEnum.FontStyleBoldItalic' 0' LanguageEnum.FontLanguageLatin' 0' 1' "ltn14.pgf"'                          "FTT-NewRodin Pro Latin"' 0' 0)'                      new FontRegistryEntry(0x1c0' 0x1c0' 0x2000' 0x2000' 0' 0' FamilyEnum.FontFamilySerif'                          StyleEnum.FontStyleBoldItalic' 0' LanguageEnum.FontLanguageLatin' 0' 1' "ltn15.pgf"'                          "FTT-Matisse Pro Latin"' 0' 0)'                      new FontRegistryEntry(0x288' 0x288' 0x2000' 0x2000' 0' 0' FamilyEnum.FontFamilySansSerif'                          StyleEnum.FontStyleRegular' 0' LanguageEnum.FontLanguageKorean' 0' 3' "kr0.pgf"'                          "AsiaNHH(512Johab)"' 0' 0)'                  };
Magic Number,CSPspEmu.Hle.Modules.modulemgr,ModuleMgrForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\modulemgr\ModuleMgrForUser.cs,sceKernelStartModule,The following statement contains a magic number: if (Module.Loaded)              {                  var NewCpuThreadState = new CpuThreadState(CpuThreadState.CpuProcessor);                  NewCpuThreadState.CopyRegistersFrom(CpuThreadState);                  NewCpuThreadState.Gp = Module.InitInfo.Gp;                  NewCpuThreadState.CallerModule = Module;                    var ThreadId = (int) ThreadManForUser.sceKernelCreateThread(NewCpuThreadState' "ModuleThread"'                      Module.InitInfo.Pc' 10' 1024' PspThreadAttributes.ClearStack' null);                  ThreadManForUser.sceKernelStartThread(NewCpuThreadState' ThreadId' ArgumentsSize' ArgumentsPointer);              }
Magic Number,CSPspEmu.Hle.Modules.modulemgr,ModuleMgrForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\modulemgr\ModuleMgrForUser.cs,sceKernelStartModule,The following statement contains a magic number: if (Module.Loaded)              {                  var NewCpuThreadState = new CpuThreadState(CpuThreadState.CpuProcessor);                  NewCpuThreadState.CopyRegistersFrom(CpuThreadState);                  NewCpuThreadState.Gp = Module.InitInfo.Gp;                  NewCpuThreadState.CallerModule = Module;                    var ThreadId = (int) ThreadManForUser.sceKernelCreateThread(NewCpuThreadState' "ModuleThread"'                      Module.InitInfo.Pc' 10' 1024' PspThreadAttributes.ClearStack' null);                  ThreadManForUser.sceKernelStartThread(NewCpuThreadState' ThreadId' ArgumentsSize' ArgumentsPointer);              }
Magic Number,CSPspEmu.Hle.Modules.mpeg,Mpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\Mpeg.cs,AvcDecode,The following statement contains a magic number: try              {                  //if (H264FrameDecoder.HasMorePackets)                  {                      //Console.WriteLine("VideoStream.Length: {0}"' VideoStream.Length);                      var Frame = H264FrameDecoder.DecodeFrame();                        ConsoleUtils.SaveRestoreConsoleColor(ConsoleColor.DarkGreen'                          () => { Console.WriteLine("DecodedFrame: {0}"' FrameIndex); });                        var Bitmap = FrameUtils.imageFromFrameWithoutEdges(Frame' FrameWidth' 272);                        var TempBuffer =                          new byte[PixelFormatDecoder.GetPixelsSize(GuPixelFormat' Bitmap.Width * Bitmap.Height)];                      fixed (byte* TempBufferPtr = TempBuffer)                      {                          var TempBufferPtr2 = TempBufferPtr;                          Bitmap.LockBitsUnlock(PixelFormat.Format32bppArgb' (BitmapData) =>                          {                              var InputBuffer = (OutputPixel*) BitmapData.Scan0.ToPointer();                              int Count = Bitmap.Width * Bitmap.Height;                                for (int n = 0; n < Count; n++)                              {                                  var Color = InputBuffer[n];                                  InputBuffer[n].R = Color.B;                                  InputBuffer[n].G = Color.G;                                  InputBuffer[n].B = Color.R;                                  InputBuffer[n].A = 0xFF;                              }                                PixelFormatDecoder.Encode(GuPixelFormat' InputBuffer' TempBufferPtr2'                                  Bitmap.Width * Bitmap.Height);                              PixelFormatDecoder.Encode(PspDisplay.CurrentInfo.PixelFormat' InputBuffer'                                  (byte*) Memory.PspAddressToPointerSafe(PspDisplay.CurrentInfo.FrameAddress)' 512'                                  Bitmap.Width' Bitmap.Height);                              PspDisplay.CurrentInfo.PlayingVideo = true;                          });                          PspDisplay.CurrentInfo.PlayingVideo = true;                          Memory.WriteBytes(OutputBuffer.Address' TempBufferPtr' TempBuffer.Length);                          GpuImpl.InvalidateCache(OutputBuffer.Address' TempBuffer.Length);                      }                        if (SaveBitmapFrame) Bitmap.Save(@"c:\temp\frame" + (FrameIndex) + ".png");                      FrameIndex++;                  }                  //PixelFormat                    return;              }              catch (EndOfStreamException)              {                  ConsoleUtils.SaveRestoreConsoleColor(ConsoleColor.Red'                      () => { Console.WriteLine("H264FrameDecoder.DecodeFrame: EndOfStreamException"); });              }
Magic Number,CSPspEmu.Hle.Modules.mpeg,Mpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\Mpeg.cs,AvcDecode,The following statement contains a magic number: try              {                  //if (H264FrameDecoder.HasMorePackets)                  {                      //Console.WriteLine("VideoStream.Length: {0}"' VideoStream.Length);                      var Frame = H264FrameDecoder.DecodeFrame();                        ConsoleUtils.SaveRestoreConsoleColor(ConsoleColor.DarkGreen'                          () => { Console.WriteLine("DecodedFrame: {0}"' FrameIndex); });                        var Bitmap = FrameUtils.imageFromFrameWithoutEdges(Frame' FrameWidth' 272);                        var TempBuffer =                          new byte[PixelFormatDecoder.GetPixelsSize(GuPixelFormat' Bitmap.Width * Bitmap.Height)];                      fixed (byte* TempBufferPtr = TempBuffer)                      {                          var TempBufferPtr2 = TempBufferPtr;                          Bitmap.LockBitsUnlock(PixelFormat.Format32bppArgb' (BitmapData) =>                          {                              var InputBuffer = (OutputPixel*) BitmapData.Scan0.ToPointer();                              int Count = Bitmap.Width * Bitmap.Height;                                for (int n = 0; n < Count; n++)                              {                                  var Color = InputBuffer[n];                                  InputBuffer[n].R = Color.B;                                  InputBuffer[n].G = Color.G;                                  InputBuffer[n].B = Color.R;                                  InputBuffer[n].A = 0xFF;                              }                                PixelFormatDecoder.Encode(GuPixelFormat' InputBuffer' TempBufferPtr2'                                  Bitmap.Width * Bitmap.Height);                              PixelFormatDecoder.Encode(PspDisplay.CurrentInfo.PixelFormat' InputBuffer'                                  (byte*) Memory.PspAddressToPointerSafe(PspDisplay.CurrentInfo.FrameAddress)' 512'                                  Bitmap.Width' Bitmap.Height);                              PspDisplay.CurrentInfo.PlayingVideo = true;                          });                          PspDisplay.CurrentInfo.PlayingVideo = true;                          Memory.WriteBytes(OutputBuffer.Address' TempBufferPtr' TempBuffer.Length);                          GpuImpl.InvalidateCache(OutputBuffer.Address' TempBuffer.Length);                      }                        if (SaveBitmapFrame) Bitmap.Save(@"c:\temp\frame" + (FrameIndex) + ".png");                      FrameIndex++;                  }                  //PixelFormat                    return;              }              catch (EndOfStreamException)              {                  ConsoleUtils.SaveRestoreConsoleColor(ConsoleColor.Red'                      () => { Console.WriteLine("H264FrameDecoder.DecodeFrame: EndOfStreamException"); });              }
Magic Number,CSPspEmu.Hle.Modules.mpeg,sceMpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\sceMpeg.Atrac.cs,sceMpegAvcDecodeDetail,The following statement contains a magic number: AvcDecodeDetail->AvcDetailFrameHeight = 272;
Magic Number,CSPspEmu.Hle.Modules.mpeg,sceMpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\sceMpeg.Atrac.cs,sceMpegMallocAvcEsBuf,The following statement contains a magic number: for (int n = 0; n < 2; n++)              {                  if (!AbvEsBufAllocated[n])                  {                      AbvEsBufAllocated[n] = true;                      return n + 1;                  }              }
Magic Number,CSPspEmu.Hle.Modules.mpeg,sceMpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\sceMpeg.Atrac.cs,sceMpegAvcQueryYCbCrSize,The following statement contains a magic number: if ((Width & 15) != 0 || (Height & 15) != 0 || Width > 480 || Height > 272)              {                  throw (new SceKernelException(SceKernelErrors.ERROR_MPEG_INVALID_VALUE));              }
Magic Number,CSPspEmu.Hle.Modules.mpeg,sceMpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\sceMpeg.Atrac.cs,sceMpegAvcQueryYCbCrSize,The following statement contains a magic number: if ((Width & 15) != 0 || (Height & 15) != 0 || Width > 480 || Height > 272)              {                  throw (new SceKernelException(SceKernelErrors.ERROR_MPEG_INVALID_VALUE));              }
Magic Number,CSPspEmu.Hle.Modules.mpeg,sceMpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\sceMpeg.Atrac.cs,sceMpegAvcQueryYCbCrSize,The following statement contains a magic number: if ((Width & 15) != 0 || (Height & 15) != 0 || Width > 480 || Height > 272)              {                  throw (new SceKernelException(SceKernelErrors.ERROR_MPEG_INVALID_VALUE));              }
Magic Number,CSPspEmu.Hle.Modules.mpeg,sceMpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\sceMpeg.Atrac.cs,sceMpegAvcQueryYCbCrSize,The following statement contains a magic number: if ((Width & 15) != 0 || (Height & 15) != 0 || Width > 480 || Height > 272)              {                  throw (new SceKernelException(SceKernelErrors.ERROR_MPEG_INVALID_VALUE));              }
Magic Number,CSPspEmu.Hle.Modules.mpeg,sceMpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\sceMpeg.Atrac.cs,sceMpegAvcQueryYCbCrSize,The following statement contains a magic number: *Result = (Width / 2) * (Height / 2) * 6 + 128;
Magic Number,CSPspEmu.Hle.Modules.mpeg,sceMpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\sceMpeg.Atrac.cs,sceMpegAvcQueryYCbCrSize,The following statement contains a magic number: *Result = (Width / 2) * (Height / 2) * 6 + 128;
Magic Number,CSPspEmu.Hle.Modules.mpeg,sceMpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\sceMpeg.Atrac.cs,sceMpegAvcQueryYCbCrSize,The following statement contains a magic number: *Result = (Width / 2) * (Height / 2) * 6 + 128;
Magic Number,CSPspEmu.Hle.Modules.mpeg,sceMpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\sceMpeg.Atrac.cs,sceMpegAvcQueryYCbCrSize,The following statement contains a magic number: *Result = (Width / 2) * (Height / 2) * 6 + 128;
Magic Number,CSPspEmu.Hle.Modules.mpeg,sceMpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\sceMpeg.Atrac.cs,sceMpegQueryStreamOffset,The following statement contains a magic number: var pmf = new Pmf().Load(new MemoryStream(PointerUtils.PointerToByteArray(pmfHeader' 2048)));
Magic Number,CSPspEmu.Hle.Modules.mpeg,sceMpeg,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\mpeg\sceMpeg.Atrac.cs,sceMpegQueryStreamSize,The following statement contains a magic number: var pmf = new Pmf().Load(new MemoryStream(PointerUtils.PointerToByteArray(pmfHeader' 2048)));
Magic Number,CSPspEmu.Hle.Modules.pspnet,sceNet,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNet.cs,sceNetEtherStrton,The following statement contains a magic number: PointerUtils.Memset(MacAddress' 0' 6);
Magic Number,CSPspEmu.Hle.Modules.pspnet,sceNet,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNet.cs,sceNetEtherNtostr,The following statement contains a magic number: var Parts = new string[6];
Magic Number,CSPspEmu.Hle.Modules.pspnet,sceNet,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNet.cs,sceNetEtherNtostr,The following statement contains a magic number: for (int n = 0; n < 6; n++)              {                  Parts[n] = "%02X".Sprintf((uint) MacAddress[n]);              }
Magic Number,CSPspEmu.Hle.Modules.pspnet,sceNet,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNet.cs,sceNetGetLocalEtherAddr,The following statement contains a magic number: for (int n = 0; n < 8; n++) Mac[n] = (n < Bytes.Length) ? Bytes[n] : (byte) 0;
Magic Number,CSPspEmu.Hle.Modules.pspnet,Matching,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetAdhocMatching.cs,NotifyEvent,The following statement contains a magic number: var MacPartition = HleMemoryManager.GetPartition(MemoryPartitions.User).Allocate(8);
Magic Number,CSPspEmu.Hle.Modules.pspnet,Matching,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetAdhocMatching.cs,ThreadMain,The following statement contains a magic number: (HelloThread = new Thread(() =>                  {                      while (true)                      {                          SendHello();                          Thread.Sleep(HelloDelay / 1000);                      }                  }) {IsBackground = true}).Start();
Magic Number,CSPspEmu.Hle.Modules.pspnet,Matching,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetAdhocMatching.cs,ThreadMain,The following statement contains a magic number: (PingThread = new Thread(() =>                  {                      while (true)                      {                          SendPing();                          Thread.Sleep(PingDelay / 1000);                      }                  }) {IsBackground = true}).Start();
Magic Number,CSPspEmu.Hle.Modules.pspnet,Matching,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetAdhocMatching.cs,GetBindedPort,The following statement contains a magic number: return 1234 + this.Port;
Magic Number,CSPspEmu.Hle.Modules.pspnet,MacAddress,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetAdhocMatching.cs,GetAddressBytes,The following statement contains a magic number: fixed (byte* DataPointer = Data) return PointerUtils.PointerToByteArray(DataPointer' 8);
Magic Number,CSPspEmu.Hle.Modules.pspnet,MacAddress,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetAdhocMatching.cs,GetNative,The following statement contains a magic number: for (int n = 0; n < 8; n++) MacAddress.Data[n] = (n < Bytes.Length) ? Bytes[n] : (byte) 0;
Magic Number,CSPspEmu.Hle.Modules.pspnet,in_addr,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetResolver.cs,ToString,The following statement contains a magic number: return $"{AddressAsBytes[0]}.{AddressAsBytes[1]}.{AddressAsBytes[2]}.{AddressAsBytes[3]}";
Magic Number,CSPspEmu.Hle.Modules.pspnet,in_addr,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\pspnet\sceNetResolver.cs,ToString,The following statement contains a magic number: return $"{AddressAsBytes[0]}.{AddressAsBytes[1]}.{AddressAsBytes[2]}.{AddressAsBytes[3]}";
Magic Number,CSPspEmu.Hle.Modules.libatrac3plus,sceAtrac3plus,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libatrac3plus\sceAtrac3plus.cs,sceAtracGetBitrate,The following statement contains a magic number: uint _AtracBitrate = (uint) ((Atrac.Format.BytesPerFrame * 352800) / 1000);
Magic Number,CSPspEmu.Hle.Modules.libatrac3plus,sceAtrac3plus,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libatrac3plus\sceAtrac3plus.cs,sceAtracGetBitrate,The following statement contains a magic number: uint _AtracBitrate = (uint) ((Atrac.Format.BytesPerFrame * 352800) / 1000);
Magic Number,CSPspEmu.Hle.Modules.libatrac3plus,sceAtrac3plus,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libatrac3plus\sceAtrac3plus.cs,sceAtracGetBitrate,The following statement contains a magic number: if (Atrac.CodecType == CodecType.PSP_MODE_AT_3_PLUS)              {                  _AtracBitrate = ((_AtracBitrate >> 11) + 8) & 0xFFFFFFF0;              }              else              {                  _AtracBitrate = (_AtracBitrate + 511) >> 10;              }
Magic Number,CSPspEmu.Hle.Modules.libatrac3plus,sceAtrac3plus,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libatrac3plus\sceAtrac3plus.cs,sceAtracGetBitrate,The following statement contains a magic number: if (Atrac.CodecType == CodecType.PSP_MODE_AT_3_PLUS)              {                  _AtracBitrate = ((_AtracBitrate >> 11) + 8) & 0xFFFFFFF0;              }              else              {                  _AtracBitrate = (_AtracBitrate + 511) >> 10;              }
Magic Number,CSPspEmu.Hle.Modules.libatrac3plus,sceAtrac3plus,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libatrac3plus\sceAtrac3plus.cs,sceAtracGetBitrate,The following statement contains a magic number: if (Atrac.CodecType == CodecType.PSP_MODE_AT_3_PLUS)              {                  _AtracBitrate = ((_AtracBitrate >> 11) + 8) & 0xFFFFFFF0;              }              else              {                  _AtracBitrate = (_AtracBitrate + 511) >> 10;              }
Magic Number,CSPspEmu.Hle.Modules.libatrac3plus,sceAtrac3plus,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libatrac3plus\sceAtrac3plus.cs,sceAtracGetBitrate,The following statement contains a magic number: if (Atrac.CodecType == CodecType.PSP_MODE_AT_3_PLUS)              {                  _AtracBitrate = ((_AtracBitrate >> 11) + 8) & 0xFFFFFFF0;              }              else              {                  _AtracBitrate = (_AtracBitrate + 511) >> 10;              }
Magic Number,CSPspEmu.Hle.Modules.libatrac3plus,sceAtrac3plus,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libatrac3plus\sceAtrac3plus.cs,sceAtracReinit,The following statement contains a magic number: for (int n = 0; n < at3plusCount; n++)              {                  if (Space >= 2)                  {                      Space -= 2;                      MaxAtrac3Plus++;                  }                  else                  {                      throw (new SceKernelException(SceKernelErrors.ERROR_OUT_OF_MEMORY));                  }              }
Magic Number,CSPspEmu.Hle.Modules.libatrac3plus,sceAtrac3plus,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libatrac3plus\sceAtrac3plus.cs,sceAtracReinit,The following statement contains a magic number: for (int n = 0; n < at3plusCount; n++)              {                  if (Space >= 2)                  {                      Space -= 2;                      MaxAtrac3Plus++;                  }                  else                  {                      throw (new SceKernelException(SceKernelErrors.ERROR_OUT_OF_MEMORY));                  }              }
Magic Number,CSPspEmu.Hle.Modules.libatrac3plus,Atrac,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libatrac3plus\sceAtrac3plus.cs,Atrac,The following statement contains a magic number: PrimaryBuffer = HleMemoryManager.GetPartition(MemoryPartitions.User).Allocate(1024);
Magic Number,CSPspEmu.Hle.Modules.libatrac3plus,Atrac,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libatrac3plus\sceAtrac3plus.cs,Atrac,The following statement contains a magic number: PrimaryBuffer = HleMemoryManager.GetPartition(MemoryPartitions.User).Allocate(1024);
Magic Number,CSPspEmu.Hle.Modules.libatrac3plus,WavFormatStruct,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libatrac3plus\sceAtrac3plus.cs,ParseWavData,The following statement contains a magic number: RiffWaveReader.HandleChunk += (ChunkType' ChunkStream) =>                      {                          switch (ChunkType)                          {                              case "fmt ":                                  WavFormat = ChunkStream.ReadStruct<WavFormatStruct>();                                  break;                              case "data":  #if false  									DecodedSamples =  new ArrayWrapper<StereoShortSoundSample>(PointerUtils.ByteArrayToArray<StereoShortSoundSample>(ChunkStream.ReadAll()));  								#else                                  DecodedSamples =                                      ChunkStream.ConvertToStreamStructCachedArrayWrapper<StereoShortSoundSample>(                                          16 * 1024);  #endif                                  break;                              default:                                  throw (new NotImplementedException($"Can't handle chunk '{ChunkType}'")                                  );                          }                      };
Magic Number,CSPspEmu.Hle.Modules.libatrac3plus,WavFormatStruct,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libatrac3plus\sceAtrac3plus.cs,ParseWavData,The following statement contains a magic number: RiffWaveReader.HandleChunk += (ChunkType' ChunkStream) =>                      {                          switch (ChunkType)                          {                              case "fmt ":                                  WavFormat = ChunkStream.ReadStruct<WavFormatStruct>();                                  break;                              case "data":  #if false  									DecodedSamples =  new ArrayWrapper<StereoShortSoundSample>(PointerUtils.ByteArrayToArray<StereoShortSoundSample>(ChunkStream.ReadAll()));  								#else                                  DecodedSamples =                                      ChunkStream.ConvertToStreamStructCachedArrayWrapper<StereoShortSoundSample>(                                          16 * 1024);  #endif                                  break;                              default:                                  throw (new NotImplementedException($"Can't handle chunk '{ChunkType}'")                                  );                          }                      };
Magic Number,CSPspEmu.Hle.Modules.power,scePower,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\power\scePower.Callbacks.cs,scePowerGetBatteryLifePercent,The following statement contains a magic number: return (int) (PspBattery.BatteryLifePercent * 100);
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcGetDayOfWeek,The following statement contains a magic number: var MonthTranslate = new int[] {0' 3' 2' 5' 0' 3' 5' 1' 4' 6' 2' 4};
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcGetDayOfWeek,The following statement contains a magic number: var MonthTranslate = new int[] {0' 3' 2' 5' 0' 3' 5' 1' 4' 6' 2' 4};
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcGetDayOfWeek,The following statement contains a magic number: var MonthTranslate = new int[] {0' 3' 2' 5' 0' 3' 5' 1' 4' 6' 2' 4};
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcGetDayOfWeek,The following statement contains a magic number: var MonthTranslate = new int[] {0' 3' 2' 5' 0' 3' 5' 1' 4' 6' 2' 4};
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcGetDayOfWeek,The following statement contains a magic number: var MonthTranslate = new int[] {0' 3' 2' 5' 0' 3' 5' 1' 4' 6' 2' 4};
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcGetDayOfWeek,The following statement contains a magic number: var MonthTranslate = new int[] {0' 3' 2' 5' 0' 3' 5' 1' 4' 6' 2' 4};
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcGetDayOfWeek,The following statement contains a magic number: var MonthTranslate = new int[] {0' 3' 2' 5' 0' 3' 5' 1' 4' 6' 2' 4};
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcGetDayOfWeek,The following statement contains a magic number: var MonthTranslate = new int[] {0' 3' 2' 5' 0' 3' 5' 1' 4' 6' 2' 4};
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcGetDayOfWeek,The following statement contains a magic number: var MonthTranslate = new int[] {0' 3' 2' 5' 0' 3' 5' 1' 4' 6' 2' 4};
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcGetDayOfWeek,The following statement contains a magic number: if (Month == 0)              {                  Month = 8;              }
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcGetDayOfWeek,The following statement contains a magic number: int MonthMod = (Month - 1) % 12;
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcGetDayOfWeek,The following statement contains a magic number: if (MonthMod < 0) MonthMod += 12;
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcGetDayOfWeek,The following statement contains a magic number: Year -= (Month < 3) ? 1 : 0;
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcGetDayOfWeek,The following statement contains a magic number: return (PspDaysOfWeek) ((Year + Year / 4 - Year / 100 + Year / 400 + MonthTranslate[MonthMod] + Day) % 7);
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcGetDayOfWeek,The following statement contains a magic number: return (PspDaysOfWeek) ((Year + Year / 4 - Year / 100 + Year / 400 + MonthTranslate[MonthMod] + Day) % 7);
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcGetDayOfWeek,The following statement contains a magic number: return (PspDaysOfWeek) ((Year + Year / 4 - Year / 100 + Year / 400 + MonthTranslate[MonthMod] + Day) % 7);
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcGetDayOfWeek,The following statement contains a magic number: return (PspDaysOfWeek) ((Year + Year / 4 - Year / 100 + Year / 400 + MonthTranslate[MonthMod] + Day) % 7);
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcTickAddWeeks,The following statement contains a magic number: return _sceRtcTickAddTimeSpan(dstPtr' srcPtr' TimeSpan.FromDays(value * 7));
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcTickAddMonths,The following statement contains a magic number: return _sceRtcTickAddTimeSpan(dstPtr' srcPtr' TimeSpan.FromDays(value * 30));
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcTickAddYears,The following statement contains a magic number: return _sceRtcTickAddTimeSpan(dstPtr' srcPtr' TimeSpan.FromDays(value * 365));
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcSetTick,The following statement contains a magic number: try              {                  *Date = ScePspDateTime.FromDateTime(new DateTime((long) (*Ticks * 10)));                  return 0;              }              catch (Exception Exception)              {                  Console.Error.WriteLine(Exception);                  return -1;              }
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcGetCurrentClockLocalTime,The following statement contains a magic number: Time = new ScePspDateTime()              {                  Year = (ushort) CurrentDateTime.Year'                  Month = (ushort) CurrentDateTime.Month'                  Day = (ushort) CurrentDateTime.Day'                  Hour = (ushort) CurrentDateTime.Hour'                  Minute = (ushort) CurrentDateTime.Minute'                  Second = (ushort) CurrentDateTime.Second'                  Microsecond = (uint) (CurrentDateTime.Millisecond * 1000)'              };
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcCheckValid,The following statement contains a magic number: if (Date->year < 1 || Date->year > 9999)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_YEAR;              }              else if (Date->month < 1 || Date->month > 12)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_MONTH;              }              else if (Date->day < 1 || Date->day > 31) // TODO: Needs to check actual days in month' including leaps               {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_DAY;              }              else if (Date->hour > 23)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_HOUR;              }              else if (Date->minute > 59)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_MINUTES;              }              else if (Date->second > 59)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_SECONDS;              }              else if (Date->microsecond >= 1000000)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_MICROSECONDS;              }
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcCheckValid,The following statement contains a magic number: if (Date->year < 1 || Date->year > 9999)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_YEAR;              }              else if (Date->month < 1 || Date->month > 12)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_MONTH;              }              else if (Date->day < 1 || Date->day > 31) // TODO: Needs to check actual days in month' including leaps               {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_DAY;              }              else if (Date->hour > 23)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_HOUR;              }              else if (Date->minute > 59)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_MINUTES;              }              else if (Date->second > 59)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_SECONDS;              }              else if (Date->microsecond >= 1000000)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_MICROSECONDS;              }
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcCheckValid,The following statement contains a magic number: if (Date->year < 1 || Date->year > 9999)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_YEAR;              }              else if (Date->month < 1 || Date->month > 12)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_MONTH;              }              else if (Date->day < 1 || Date->day > 31) // TODO: Needs to check actual days in month' including leaps               {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_DAY;              }              else if (Date->hour > 23)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_HOUR;              }              else if (Date->minute > 59)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_MINUTES;              }              else if (Date->second > 59)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_SECONDS;              }              else if (Date->microsecond >= 1000000)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_MICROSECONDS;              }
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcCheckValid,The following statement contains a magic number: if (Date->year < 1 || Date->year > 9999)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_YEAR;              }              else if (Date->month < 1 || Date->month > 12)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_MONTH;              }              else if (Date->day < 1 || Date->day > 31) // TODO: Needs to check actual days in month' including leaps               {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_DAY;              }              else if (Date->hour > 23)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_HOUR;              }              else if (Date->minute > 59)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_MINUTES;              }              else if (Date->second > 59)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_SECONDS;              }              else if (Date->microsecond >= 1000000)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_MICROSECONDS;              }
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcCheckValid,The following statement contains a magic number: if (Date->year < 1 || Date->year > 9999)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_YEAR;              }              else if (Date->month < 1 || Date->month > 12)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_MONTH;              }              else if (Date->day < 1 || Date->day > 31) // TODO: Needs to check actual days in month' including leaps               {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_DAY;              }              else if (Date->hour > 23)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_HOUR;              }              else if (Date->minute > 59)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_MINUTES;              }              else if (Date->second > 59)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_SECONDS;              }              else if (Date->microsecond >= 1000000)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_MICROSECONDS;              }
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcCheckValid,The following statement contains a magic number: if (Date->year < 1 || Date->year > 9999)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_YEAR;              }              else if (Date->month < 1 || Date->month > 12)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_MONTH;              }              else if (Date->day < 1 || Date->day > 31) // TODO: Needs to check actual days in month' including leaps               {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_DAY;              }              else if (Date->hour > 23)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_HOUR;              }              else if (Date->minute > 59)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_MINUTES;              }              else if (Date->second > 59)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_SECONDS;              }              else if (Date->microsecond >= 1000000)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_MICROSECONDS;              }
Magic Number,CSPspEmu.Hle.Modules.rtc,sceRtc,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\rtc\sceRtc.cs,sceRtcCheckValid,The following statement contains a magic number: if (Date->year < 1 || Date->year > 9999)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_YEAR;              }              else if (Date->month < 1 || Date->month > 12)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_MONTH;              }              else if (Date->day < 1 || Date->day > 31) // TODO: Needs to check actual days in month' including leaps               {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_DAY;              }              else if (Date->hour > 23)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_HOUR;              }              else if (Date->minute > 59)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_MINUTES;              }              else if (Date->second > 59)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_SECONDS;              }              else if (Date->microsecond >= 1000000)              {                  return pspRtcCheckValidErrors.PSP_TIME_INVALID_MICROSECONDS;              }
Magic Number,CSPspEmu.Hle.Modules.sc_sascore,sceSasCore,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sc_sascore\sceSasCore.cs,__sceSasInit,The following statement contains a magic number: if (SampleRate != 44100)              {                  throw (new SceKernelException(SceKernelErrors.ERROR_SAS_INVALID_SAMPLE_RATE));              }
Magic Number,CSPspEmu.Hle.Modules.sc_sascore,sceSasCore,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sc_sascore\sceSasCore.cs,__sceSasInit,The following statement contains a magic number: BufferTemp = new StereoIntSoundSample[SasCore.GrainSamples * 2];
Magic Number,CSPspEmu.Hle.Modules.sc_sascore,sceSasCore,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sc_sascore\sceSasCore.cs,__sceSasInit,The following statement contains a magic number: BufferShort = new StereoShortSoundSample[SasCore.GrainSamples * 2];
Magic Number,CSPspEmu.Hle.Modules.sc_sascore,sceSasCore,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sc_sascore\sceSasCore.cs,__sceSasInit,The following statement contains a magic number: MixBufferShort = new StereoShortSoundSample[SasCore.GrainSamples * 2];
Magic Number,CSPspEmu.Hle.Modules.sc_sascore,sceSasCore,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sc_sascore\sceSasCore.cs,__sceSasCore_Internal,The following statement contains a magic number: fixed (StereoShortSoundSample* BufferShortPtr = BufferShort)              fixed (StereoIntSoundSample* BufferTempPtr = BufferTemp)              {                  if (SasCore.OutputMode != OutputMode.PSP_SAS_OUTPUTMODE_STEREO)                  {                      Logger.Unimplemented("SasCore.OutputMode != OutputMode.PSP_SAS_OUTPUTMODE_STEREO");                  }                    int NumberOfChannels = (SasCore.OutputMode == OutputMode.PSP_SAS_OUTPUTMODE_STEREO) ? 2 : 1;                  int NumberOfSamples = SasCore.GrainSamples;                  int NumberOfVoicesPlaying = Math.Max(1' SasCore.Voices.Count(Voice => Voice.OnAndPlaying));                    for (int n = 0; n < NumberOfSamples; n++) BufferTempPtr[n] = default(StereoIntSoundSample);                    int PrevPosDiv = -1;                  foreach (var Voice in SasCore.Voices)                  {                      if (Voice.OnAndPlaying)                      {                          //Console.WriteLine("Voice.Pitch: {0}"' Voice.Pitch);                          //for (int n = 0' Pos = 0; n < NumberOfSamples; n++' Pos += Voice.Pitch)                          int Pos = 0;                          while (true)                          {                              if ((Voice.Vag != null) && (Voice.Vag.HasMore))                              {                                  int PosDiv = Pos / Voice.Pitch;                                    if (PosDiv >= NumberOfSamples) break;                                    var Sample = Voice.Vag.GetNextSample()                                      .ApplyVolumes(Voice.LeftVolume' Voice.RightVolume);                                    for (int m = PrevPosDiv + 1; m <= PosDiv; m++) BufferTempPtr[m] += Sample;                                    PrevPosDiv = PosDiv;                                  Pos += PSP_SAS_PITCH_BASE;                              }                              else                              {                                  Voice.SetPlaying(false);                                  break;                              }                          }                      }                  }                    for (int n = 0; n < NumberOfSamples; n++) BufferShortPtr[n] = BufferTempPtr[n];                    for (int channel = 0; channel < NumberOfChannels; channel++)                  {                      for (int n = 0; n < NumberOfSamples; n++)                      {                          SasOut[n * NumberOfChannels + channel] = BufferShortPtr[n].ApplyVolumes(LeftVolume' RightVolume)                              .GetByIndex(channel);                      }                  }              }
Magic Number,CSPspEmu.Hle.Modules.sc_sascore,sceSasCore,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sc_sascore\sceSasCore.cs,GetSasCore,The following statement contains a magic number: if ((SasCorePointer == 0) || (SasCorePointer % 64 != 0))              {                  throw (new SceKernelException(SceKernelErrors.ERROR_SAS_INVALID_ADDRESS));              }
Magic Number,CSPspEmu.Hle.Modules.sc_sascore,sceSasCore,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sc_sascore\sceSasCore.cs,_CheckVoice,The following statement contains a magic number: if (Voice < 0 || Voice >= 32)              {                  throw (new SceKernelException(SceKernelErrors.ERROR_SAS_INVALID_VOICE));              }
Magic Number,CSPspEmu.Hle.Modules.sc_sascore,SasCore,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sc_sascore\sceSasCore.Utils.cs,SasCore,The following statement contains a magic number: Voices = new SasVoice[32];
Magic Number,CSPspEmu.Hle.Modules.sysmem,SysMemUserForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sysmem\SysMemUserForUser.cs,sceKernelDevkitVersion,The following statement contains a magic number: return (Version.Major << 24) | (Version.Minor << 16) | (Version.Revision << 8) | 0x10;
Magic Number,CSPspEmu.Hle.Modules.sysmem,SysMemUserForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sysmem\SysMemUserForUser.cs,sceKernelDevkitVersion,The following statement contains a magic number: return (Version.Major << 24) | (Version.Minor << 16) | (Version.Revision << 8) | 0x10;
Magic Number,CSPspEmu.Hle.Modules.sysmem,SysMemUserForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sysmem\SysMemUserForUser.cs,sceKernelDevkitVersion,The following statement contains a magic number: return (Version.Major << 24) | (Version.Minor << 16) | (Version.Revision << 8) | 0x10;
Magic Number,CSPspEmu.Hle.Modules.sysmem,SysMemUserForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sysmem\SysMemUserForUser.cs,sceKernelMaxFreeMemSize,The following statement contains a magic number: return (MemoryManager.GetPartition(MemoryPartitions.User).MaxFreeSize) & ~15;
Magic Number,CSPspEmu.Hle.Modules.sysmem,SysMemUserForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sysmem\SysMemUserForUser.cs,sceKernelAllocPartitionMemory,The following statement contains a magic number: if ((int) PartitionId <= 0 || (int) PartitionId == 7 || (int) PartitionId >= 10)                  throw (new SceKernelException(SceKernelErrors.ERROR_KERNEL_ILLEGAL_ARGUMENT));
Magic Number,CSPspEmu.Hle.Modules.sysmem,SysMemUserForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sysmem\SysMemUserForUser.cs,sceKernelAllocPartitionMemory,The following statement contains a magic number: if ((int) PartitionId <= 0 || (int) PartitionId == 7 || (int) PartitionId >= 10)                  throw (new SceKernelException(SceKernelErrors.ERROR_KERNEL_ILLEGAL_ARGUMENT));
Magic Number,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,sceKernelSysClock2USecWide,The following statement contains a magic number: if (Low != null) *Low = (uint) (Clock % 1000000);
Magic Number,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,sceKernelSysClock2USecWide,The following statement contains a magic number: if (High != null) *High = (uint) (Clock / 1000000);
Magic Number,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,_sceKernelStartThread,The following statement contains a magic number: if (UserDataPointer == 0)              {                  ThreadToStart.CpuThreadState.Gpr[4] = 0;                  ThreadToStart.CpuThreadState.Gpr[5] = 0;              }              else              {                  CpuThreadState.CpuProcessor.Memory.Copy(UserDataPointer' CopiedDataAddress' UserDataLength);                  ThreadToStart.CpuThreadState.Gpr[4] = (int) UserDataLength;                  ThreadToStart.CpuThreadState.Gpr[5] = (int) CopiedDataAddress;              }
Magic Number,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,_sceKernelStartThread,The following statement contains a magic number: if (UserDataPointer == 0)              {                  ThreadToStart.CpuThreadState.Gpr[4] = 0;                  ThreadToStart.CpuThreadState.Gpr[5] = 0;              }              else              {                  CpuThreadState.CpuProcessor.Memory.Copy(UserDataPointer' CopiedDataAddress' UserDataLength);                  ThreadToStart.CpuThreadState.Gpr[4] = (int) UserDataLength;                  ThreadToStart.CpuThreadState.Gpr[5] = (int) CopiedDataAddress;              }
Magic Number,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,_sceKernelStartThread,The following statement contains a magic number: if (UserDataPointer == 0)              {                  ThreadToStart.CpuThreadState.Gpr[4] = 0;                  ThreadToStart.CpuThreadState.Gpr[5] = 0;              }              else              {                  CpuThreadState.CpuProcessor.Memory.Copy(UserDataPointer' CopiedDataAddress' UserDataLength);                  ThreadToStart.CpuThreadState.Gpr[4] = (int) UserDataLength;                  ThreadToStart.CpuThreadState.Gpr[5] = (int) CopiedDataAddress;              }
Magic Number,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,_sceKernelStartThread,The following statement contains a magic number: if (UserDataPointer == 0)              {                  ThreadToStart.CpuThreadState.Gpr[4] = 0;                  ThreadToStart.CpuThreadState.Gpr[5] = 0;              }              else              {                  CpuThreadState.CpuProcessor.Memory.Copy(UserDataPointer' CopiedDataAddress' UserDataLength);                  ThreadToStart.CpuThreadState.Gpr[4] = (int) UserDataLength;                  ThreadToStart.CpuThreadState.Gpr[5] = (int) CopiedDataAddress;              }
Magic Number,CSPspEmu.Hle.Modules.threadman,ThreadManForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.cs,_hle_sceKernelExitDeleteThread,The following statement contains a magic number: return sceKernelExitDeleteThread(CpuThreadState.Gpr[2]);
Magic Number,CSPspEmu.Hle.Modules.threadman,FixedPool,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.Fpl.cs,Init,The following statement contains a magic number: if (Alignment == 0) Alignment = 4;
Magic Number,CSPspEmu.Hle.Modules.threadman,MsgPipe,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.MsgPipes.cs,Init,The following statement contains a magic number: this.PoolPartition = MemoryManager.GetPartition(PartitionId).Allocate(                      Size'                      BlockType'                      Alignment: 16'                      Name: "<MsgPipe> : " + Name                  );
Magic Number,CSPspEmu.Hle.Modules.threadman,VariablePool,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\threadman\ThreadManForUser.Vpl.cs,TryAllocate,The following statement contains a magic number: Size = (int) MathUtils.NextAligned(Size' 4);
Magic Number,CSPspEmu.Hle.Modules.utility,sceUtility,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utility\sceUtility.cs,sceUtilityGetNetParam,The following statement contains a magic number: PointerUtils.StoreStringOnPtr("Temp"' Encoding.UTF8' data[0].asString' 128);
Magic Number,CSPspEmu.Hle.Modules.utility,sceUtility,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utility\sceUtility.cs,sceUtilitySavedataInitStart,The following statement contains a magic number: try              {                  switch (Params.Mode)                  {                      case PspUtilitySavedataMode.Autoload:                      case PspUtilitySavedataMode.Load:                      case PspUtilitySavedataMode.ListLoad:                      {                          try                          {                              Memory.WriteBytes(                                  Params.DataBufPointer'                                  HleIoManager.HleIoWrapper.ReadBytes(SaveDataBin)                              );                          }                          catch (IOException)                          {                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_LOAD_NO_DATA));                          }                          catch (Exception Exception)                          {                              Console.WriteLine(Exception);                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_LOAD_ACCESS_ERROR));                          }                      }                          break;                      case PspUtilitySavedataMode.Autosave:                      case PspUtilitySavedataMode.Save:                      case PspUtilitySavedataMode.ListSave:                      {                          try                          {                              HleIoManager.HleIoWrapper.Mkdir(SavePathFolder' SceMode.All);                                HleIoManager.HleIoWrapper.WriteBytes(                                  SaveDataBin'                                  Memory.ReadBytes(Params.DataBufPointer' Params.DataSize)                              );                                Save(Params.Icon0FileData' SaveIcon0);                              Save(Params.Pic1FileData' SavePic1);                              //Save(Params.SfoParam' SavePic1);                          }                          catch (Exception Exception)                          {                              Console.Error.WriteLine(Exception);                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_SAVE_ACCESS_ERROR));                          }                      }                          break;                        // "METAL SLUG XX" outputs the following on stdout after calling mode 8 (PspUtilitySavedataMode.Sizes):                      //                      // ------ SIZES ------                      // ---------- savedata result ----------                      // result = 0x801103c7                      //                      // bind : un used(0x0).                      //                      // -- dir name --                      // title id : ULUS10495                      // user  id : METALSLUGXX                      //                      // ms free size                      //   cluster size(byte) : 32768 byte                      //   free cluster num   : 32768                      //   free size(KB)      : 1048576 KB                      //   free size(string)  : "1 GB"                      //                      // ms data size(titleId=ULUS10495' userId=METALSLUGXX)                      //   cluster num        : 0                      //   size (KB)          : 0 KB                      //   size (string)      : "0 KB"                      //   size (32KB)        : 0 KB                      //   size (32KB string) : "0 KB"                      //                      // utility data size                      //   cluster num        : 13                      //   size (KB)          : 416 KB                      //   size (string)      : "416 KB"                      //   size (32KB)        : 416 KB                      //   size (32KB string) : "416 KB"                      // error: SCE_UTILITY_SAVEDATA_TYPE_SIZES return 801103c7                      case PspUtilitySavedataMode.Sizes:                      {                          SceKernelErrors SceKernelError = SceKernelErrors.ERROR_OK;                            //Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.Sizes");                            uint SectorSize = 1024;                          uint FreeSize = 32 * 1024 * 1024; // 32 MB                          uint UsedSize = 0;                            // MS free size.                          // Gets the ammount of free space in the Memory Stick. If null'                          // the size is ignored and no error is returned.                          {                              var SizeFreeInfo = (SizeFreeInfo*) Params.msFreeAddr.GetPointer<SizeFreeInfo>(Memory);                              SizeFreeInfo->SectorSize = SectorSize;                              SizeFreeInfo->FreeSectors = FreeSize / SectorSize;                              SizeFreeInfo->FreeKb = FreeSize / 1024;                                SizeFreeInfo->FreeKbString = (SizeFreeInfo->FreeKb) + "KB";                          }                            // MS data size.                          // Gets the size of the data already saved in the Memory Stick.                          // If null' the size is ignored and no error is returned.                          {                              var SizeUsedInfo = (SizeUsedInfo*) Params.msDataAddr.GetPointer<SizeUsedInfo>(Memory);                                if (SizeUsedInfo != null)                              {  #if true                                  if (true)                                  {                                      Console.WriteLine(SizeUsedInfo->saveName);                                      Console.WriteLine(SizeUsedInfo->gameName);                                        SizeUsedInfo->UsedKb = UsedSize / 1024;                                      SizeUsedInfo->UsedKb32 = UsedSize / (32 * 1024);                                        SizeUsedInfo->UsedKbString = (SizeUsedInfo->UsedKb) + "KB";                                      SizeUsedInfo->UsedKb32String = (SizeUsedInfo->UsedKb32) + "KB";                                  }                                  else                                  {                                      SceKernelError = SceKernelErrors.ERROR_SAVEDATA_SIZES_NO_DATA;                                  }  #else  									SceKernelError = SceKernelErrors.ERROR_SAVEDATA_SIZES_NO_DATA;  #endif                              }                          }                            // Utility data size.                          // Gets the size of the data to be saved in the Memory Stick.                          // If null' the size is ignored and no error is returned.                          {                              var SizeRequiredSpaceInfo =                                  (SizeRequiredSpaceInfo*) Params.utilityDataAddr.GetPointer<SizeRequiredSpaceInfo>(                                      Memory);                              if (SizeRequiredSpaceInfo != null)                              {                                  long RequiredSize = 0;                                  RequiredSize += Params.Icon0FileData.Size;                                  RequiredSize += Params.Icon1FileData.Size;                                  RequiredSize += Params.Pic1FileData.Size;                                  RequiredSize += Params.Snd0FileData.Size;                                  RequiredSize += Params.DataSize;                                    SizeRequiredSpaceInfo->RequiredSpaceSectors =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' SectorSize);                                  SizeRequiredSpaceInfo->RequiredSpaceKb =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' 1024);                                  SizeRequiredSpaceInfo->RequiredSpace32KB =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' 32 * 1024);                                    SizeRequiredSpaceInfo->RequiredSpaceString =                                      (SizeRequiredSpaceInfo->RequiredSpaceKb) + "KB";                                  SizeRequiredSpaceInfo->RequiredSpace32KBString =                                      (SizeRequiredSpaceInfo->RequiredSpace32KB) + "KB";                              }                          }                            if (SceKernelError != SceKernelErrors.ERROR_OK) throw (new SceKernelException(SceKernelError));                      }                          break;                      case PspUtilitySavedataMode.List:                      {                          var ListRequest = (ListRequest*) Params.idListAddr.GetPointer<ListRequest>(Memory);                          ListRequest->NumEntriesReaded = 0;                      }                          break;                      case PspUtilitySavedataMode.GetSize:                      {                          //Params.DataSize                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_MEMSTICK));                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_DATA));                          Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.GetSize");                      }                          break;                      case PspUtilitySavedataMode.Read:                      case PspUtilitySavedataMode.ReadSecure:                      {                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_DATA));                          Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.Read");                      }                          break;                      default:                          Console.Error.WriteLine("sceUtilitySavedataInitStart: Unsupported mode: " + Params.Mode);                          Debug.Fail("sceUtilitySavedataInitStart: Unsupported mode: " + Params.Mode);                          throw (new SceKernelException((SceKernelErrors) (-1)));                      //break;                  }                  //throw(new NotImplementedException());                    Params.Base.Result = SceKernelErrors.ERROR_OK;              }              catch (SceKernelException SceKernelException)              {                  Params.Base.Result = SceKernelException.SceKernelError;              }              finally              {                  CurrentDialogStep = DialogStepEnum.SUCCESS;              }
Magic Number,CSPspEmu.Hle.Modules.utility,sceUtility,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utility\sceUtility.cs,sceUtilitySavedataInitStart,The following statement contains a magic number: try              {                  switch (Params.Mode)                  {                      case PspUtilitySavedataMode.Autoload:                      case PspUtilitySavedataMode.Load:                      case PspUtilitySavedataMode.ListLoad:                      {                          try                          {                              Memory.WriteBytes(                                  Params.DataBufPointer'                                  HleIoManager.HleIoWrapper.ReadBytes(SaveDataBin)                              );                          }                          catch (IOException)                          {                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_LOAD_NO_DATA));                          }                          catch (Exception Exception)                          {                              Console.WriteLine(Exception);                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_LOAD_ACCESS_ERROR));                          }                      }                          break;                      case PspUtilitySavedataMode.Autosave:                      case PspUtilitySavedataMode.Save:                      case PspUtilitySavedataMode.ListSave:                      {                          try                          {                              HleIoManager.HleIoWrapper.Mkdir(SavePathFolder' SceMode.All);                                HleIoManager.HleIoWrapper.WriteBytes(                                  SaveDataBin'                                  Memory.ReadBytes(Params.DataBufPointer' Params.DataSize)                              );                                Save(Params.Icon0FileData' SaveIcon0);                              Save(Params.Pic1FileData' SavePic1);                              //Save(Params.SfoParam' SavePic1);                          }                          catch (Exception Exception)                          {                              Console.Error.WriteLine(Exception);                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_SAVE_ACCESS_ERROR));                          }                      }                          break;                        // "METAL SLUG XX" outputs the following on stdout after calling mode 8 (PspUtilitySavedataMode.Sizes):                      //                      // ------ SIZES ------                      // ---------- savedata result ----------                      // result = 0x801103c7                      //                      // bind : un used(0x0).                      //                      // -- dir name --                      // title id : ULUS10495                      // user  id : METALSLUGXX                      //                      // ms free size                      //   cluster size(byte) : 32768 byte                      //   free cluster num   : 32768                      //   free size(KB)      : 1048576 KB                      //   free size(string)  : "1 GB"                      //                      // ms data size(titleId=ULUS10495' userId=METALSLUGXX)                      //   cluster num        : 0                      //   size (KB)          : 0 KB                      //   size (string)      : "0 KB"                      //   size (32KB)        : 0 KB                      //   size (32KB string) : "0 KB"                      //                      // utility data size                      //   cluster num        : 13                      //   size (KB)          : 416 KB                      //   size (string)      : "416 KB"                      //   size (32KB)        : 416 KB                      //   size (32KB string) : "416 KB"                      // error: SCE_UTILITY_SAVEDATA_TYPE_SIZES return 801103c7                      case PspUtilitySavedataMode.Sizes:                      {                          SceKernelErrors SceKernelError = SceKernelErrors.ERROR_OK;                            //Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.Sizes");                            uint SectorSize = 1024;                          uint FreeSize = 32 * 1024 * 1024; // 32 MB                          uint UsedSize = 0;                            // MS free size.                          // Gets the ammount of free space in the Memory Stick. If null'                          // the size is ignored and no error is returned.                          {                              var SizeFreeInfo = (SizeFreeInfo*) Params.msFreeAddr.GetPointer<SizeFreeInfo>(Memory);                              SizeFreeInfo->SectorSize = SectorSize;                              SizeFreeInfo->FreeSectors = FreeSize / SectorSize;                              SizeFreeInfo->FreeKb = FreeSize / 1024;                                SizeFreeInfo->FreeKbString = (SizeFreeInfo->FreeKb) + "KB";                          }                            // MS data size.                          // Gets the size of the data already saved in the Memory Stick.                          // If null' the size is ignored and no error is returned.                          {                              var SizeUsedInfo = (SizeUsedInfo*) Params.msDataAddr.GetPointer<SizeUsedInfo>(Memory);                                if (SizeUsedInfo != null)                              {  #if true                                  if (true)                                  {                                      Console.WriteLine(SizeUsedInfo->saveName);                                      Console.WriteLine(SizeUsedInfo->gameName);                                        SizeUsedInfo->UsedKb = UsedSize / 1024;                                      SizeUsedInfo->UsedKb32 = UsedSize / (32 * 1024);                                        SizeUsedInfo->UsedKbString = (SizeUsedInfo->UsedKb) + "KB";                                      SizeUsedInfo->UsedKb32String = (SizeUsedInfo->UsedKb32) + "KB";                                  }                                  else                                  {                                      SceKernelError = SceKernelErrors.ERROR_SAVEDATA_SIZES_NO_DATA;                                  }  #else  									SceKernelError = SceKernelErrors.ERROR_SAVEDATA_SIZES_NO_DATA;  #endif                              }                          }                            // Utility data size.                          // Gets the size of the data to be saved in the Memory Stick.                          // If null' the size is ignored and no error is returned.                          {                              var SizeRequiredSpaceInfo =                                  (SizeRequiredSpaceInfo*) Params.utilityDataAddr.GetPointer<SizeRequiredSpaceInfo>(                                      Memory);                              if (SizeRequiredSpaceInfo != null)                              {                                  long RequiredSize = 0;                                  RequiredSize += Params.Icon0FileData.Size;                                  RequiredSize += Params.Icon1FileData.Size;                                  RequiredSize += Params.Pic1FileData.Size;                                  RequiredSize += Params.Snd0FileData.Size;                                  RequiredSize += Params.DataSize;                                    SizeRequiredSpaceInfo->RequiredSpaceSectors =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' SectorSize);                                  SizeRequiredSpaceInfo->RequiredSpaceKb =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' 1024);                                  SizeRequiredSpaceInfo->RequiredSpace32KB =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' 32 * 1024);                                    SizeRequiredSpaceInfo->RequiredSpaceString =                                      (SizeRequiredSpaceInfo->RequiredSpaceKb) + "KB";                                  SizeRequiredSpaceInfo->RequiredSpace32KBString =                                      (SizeRequiredSpaceInfo->RequiredSpace32KB) + "KB";                              }                          }                            if (SceKernelError != SceKernelErrors.ERROR_OK) throw (new SceKernelException(SceKernelError));                      }                          break;                      case PspUtilitySavedataMode.List:                      {                          var ListRequest = (ListRequest*) Params.idListAddr.GetPointer<ListRequest>(Memory);                          ListRequest->NumEntriesReaded = 0;                      }                          break;                      case PspUtilitySavedataMode.GetSize:                      {                          //Params.DataSize                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_MEMSTICK));                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_DATA));                          Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.GetSize");                      }                          break;                      case PspUtilitySavedataMode.Read:                      case PspUtilitySavedataMode.ReadSecure:                      {                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_DATA));                          Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.Read");                      }                          break;                      default:                          Console.Error.WriteLine("sceUtilitySavedataInitStart: Unsupported mode: " + Params.Mode);                          Debug.Fail("sceUtilitySavedataInitStart: Unsupported mode: " + Params.Mode);                          throw (new SceKernelException((SceKernelErrors) (-1)));                      //break;                  }                  //throw(new NotImplementedException());                    Params.Base.Result = SceKernelErrors.ERROR_OK;              }              catch (SceKernelException SceKernelException)              {                  Params.Base.Result = SceKernelException.SceKernelError;              }              finally              {                  CurrentDialogStep = DialogStepEnum.SUCCESS;              }
Magic Number,CSPspEmu.Hle.Modules.utility,sceUtility,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utility\sceUtility.cs,sceUtilitySavedataInitStart,The following statement contains a magic number: try              {                  switch (Params.Mode)                  {                      case PspUtilitySavedataMode.Autoload:                      case PspUtilitySavedataMode.Load:                      case PspUtilitySavedataMode.ListLoad:                      {                          try                          {                              Memory.WriteBytes(                                  Params.DataBufPointer'                                  HleIoManager.HleIoWrapper.ReadBytes(SaveDataBin)                              );                          }                          catch (IOException)                          {                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_LOAD_NO_DATA));                          }                          catch (Exception Exception)                          {                              Console.WriteLine(Exception);                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_LOAD_ACCESS_ERROR));                          }                      }                          break;                      case PspUtilitySavedataMode.Autosave:                      case PspUtilitySavedataMode.Save:                      case PspUtilitySavedataMode.ListSave:                      {                          try                          {                              HleIoManager.HleIoWrapper.Mkdir(SavePathFolder' SceMode.All);                                HleIoManager.HleIoWrapper.WriteBytes(                                  SaveDataBin'                                  Memory.ReadBytes(Params.DataBufPointer' Params.DataSize)                              );                                Save(Params.Icon0FileData' SaveIcon0);                              Save(Params.Pic1FileData' SavePic1);                              //Save(Params.SfoParam' SavePic1);                          }                          catch (Exception Exception)                          {                              Console.Error.WriteLine(Exception);                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_SAVE_ACCESS_ERROR));                          }                      }                          break;                        // "METAL SLUG XX" outputs the following on stdout after calling mode 8 (PspUtilitySavedataMode.Sizes):                      //                      // ------ SIZES ------                      // ---------- savedata result ----------                      // result = 0x801103c7                      //                      // bind : un used(0x0).                      //                      // -- dir name --                      // title id : ULUS10495                      // user  id : METALSLUGXX                      //                      // ms free size                      //   cluster size(byte) : 32768 byte                      //   free cluster num   : 32768                      //   free size(KB)      : 1048576 KB                      //   free size(string)  : "1 GB"                      //                      // ms data size(titleId=ULUS10495' userId=METALSLUGXX)                      //   cluster num        : 0                      //   size (KB)          : 0 KB                      //   size (string)      : "0 KB"                      //   size (32KB)        : 0 KB                      //   size (32KB string) : "0 KB"                      //                      // utility data size                      //   cluster num        : 13                      //   size (KB)          : 416 KB                      //   size (string)      : "416 KB"                      //   size (32KB)        : 416 KB                      //   size (32KB string) : "416 KB"                      // error: SCE_UTILITY_SAVEDATA_TYPE_SIZES return 801103c7                      case PspUtilitySavedataMode.Sizes:                      {                          SceKernelErrors SceKernelError = SceKernelErrors.ERROR_OK;                            //Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.Sizes");                            uint SectorSize = 1024;                          uint FreeSize = 32 * 1024 * 1024; // 32 MB                          uint UsedSize = 0;                            // MS free size.                          // Gets the ammount of free space in the Memory Stick. If null'                          // the size is ignored and no error is returned.                          {                              var SizeFreeInfo = (SizeFreeInfo*) Params.msFreeAddr.GetPointer<SizeFreeInfo>(Memory);                              SizeFreeInfo->SectorSize = SectorSize;                              SizeFreeInfo->FreeSectors = FreeSize / SectorSize;                              SizeFreeInfo->FreeKb = FreeSize / 1024;                                SizeFreeInfo->FreeKbString = (SizeFreeInfo->FreeKb) + "KB";                          }                            // MS data size.                          // Gets the size of the data already saved in the Memory Stick.                          // If null' the size is ignored and no error is returned.                          {                              var SizeUsedInfo = (SizeUsedInfo*) Params.msDataAddr.GetPointer<SizeUsedInfo>(Memory);                                if (SizeUsedInfo != null)                              {  #if true                                  if (true)                                  {                                      Console.WriteLine(SizeUsedInfo->saveName);                                      Console.WriteLine(SizeUsedInfo->gameName);                                        SizeUsedInfo->UsedKb = UsedSize / 1024;                                      SizeUsedInfo->UsedKb32 = UsedSize / (32 * 1024);                                        SizeUsedInfo->UsedKbString = (SizeUsedInfo->UsedKb) + "KB";                                      SizeUsedInfo->UsedKb32String = (SizeUsedInfo->UsedKb32) + "KB";                                  }                                  else                                  {                                      SceKernelError = SceKernelErrors.ERROR_SAVEDATA_SIZES_NO_DATA;                                  }  #else  									SceKernelError = SceKernelErrors.ERROR_SAVEDATA_SIZES_NO_DATA;  #endif                              }                          }                            // Utility data size.                          // Gets the size of the data to be saved in the Memory Stick.                          // If null' the size is ignored and no error is returned.                          {                              var SizeRequiredSpaceInfo =                                  (SizeRequiredSpaceInfo*) Params.utilityDataAddr.GetPointer<SizeRequiredSpaceInfo>(                                      Memory);                              if (SizeRequiredSpaceInfo != null)                              {                                  long RequiredSize = 0;                                  RequiredSize += Params.Icon0FileData.Size;                                  RequiredSize += Params.Icon1FileData.Size;                                  RequiredSize += Params.Pic1FileData.Size;                                  RequiredSize += Params.Snd0FileData.Size;                                  RequiredSize += Params.DataSize;                                    SizeRequiredSpaceInfo->RequiredSpaceSectors =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' SectorSize);                                  SizeRequiredSpaceInfo->RequiredSpaceKb =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' 1024);                                  SizeRequiredSpaceInfo->RequiredSpace32KB =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' 32 * 1024);                                    SizeRequiredSpaceInfo->RequiredSpaceString =                                      (SizeRequiredSpaceInfo->RequiredSpaceKb) + "KB";                                  SizeRequiredSpaceInfo->RequiredSpace32KBString =                                      (SizeRequiredSpaceInfo->RequiredSpace32KB) + "KB";                              }                          }                            if (SceKernelError != SceKernelErrors.ERROR_OK) throw (new SceKernelException(SceKernelError));                      }                          break;                      case PspUtilitySavedataMode.List:                      {                          var ListRequest = (ListRequest*) Params.idListAddr.GetPointer<ListRequest>(Memory);                          ListRequest->NumEntriesReaded = 0;                      }                          break;                      case PspUtilitySavedataMode.GetSize:                      {                          //Params.DataSize                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_MEMSTICK));                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_DATA));                          Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.GetSize");                      }                          break;                      case PspUtilitySavedataMode.Read:                      case PspUtilitySavedataMode.ReadSecure:                      {                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_DATA));                          Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.Read");                      }                          break;                      default:                          Console.Error.WriteLine("sceUtilitySavedataInitStart: Unsupported mode: " + Params.Mode);                          Debug.Fail("sceUtilitySavedataInitStart: Unsupported mode: " + Params.Mode);                          throw (new SceKernelException((SceKernelErrors) (-1)));                      //break;                  }                  //throw(new NotImplementedException());                    Params.Base.Result = SceKernelErrors.ERROR_OK;              }              catch (SceKernelException SceKernelException)              {                  Params.Base.Result = SceKernelException.SceKernelError;              }              finally              {                  CurrentDialogStep = DialogStepEnum.SUCCESS;              }
Magic Number,CSPspEmu.Hle.Modules.utility,sceUtility,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utility\sceUtility.cs,sceUtilitySavedataInitStart,The following statement contains a magic number: try              {                  switch (Params.Mode)                  {                      case PspUtilitySavedataMode.Autoload:                      case PspUtilitySavedataMode.Load:                      case PspUtilitySavedataMode.ListLoad:                      {                          try                          {                              Memory.WriteBytes(                                  Params.DataBufPointer'                                  HleIoManager.HleIoWrapper.ReadBytes(SaveDataBin)                              );                          }                          catch (IOException)                          {                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_LOAD_NO_DATA));                          }                          catch (Exception Exception)                          {                              Console.WriteLine(Exception);                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_LOAD_ACCESS_ERROR));                          }                      }                          break;                      case PspUtilitySavedataMode.Autosave:                      case PspUtilitySavedataMode.Save:                      case PspUtilitySavedataMode.ListSave:                      {                          try                          {                              HleIoManager.HleIoWrapper.Mkdir(SavePathFolder' SceMode.All);                                HleIoManager.HleIoWrapper.WriteBytes(                                  SaveDataBin'                                  Memory.ReadBytes(Params.DataBufPointer' Params.DataSize)                              );                                Save(Params.Icon0FileData' SaveIcon0);                              Save(Params.Pic1FileData' SavePic1);                              //Save(Params.SfoParam' SavePic1);                          }                          catch (Exception Exception)                          {                              Console.Error.WriteLine(Exception);                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_SAVE_ACCESS_ERROR));                          }                      }                          break;                        // "METAL SLUG XX" outputs the following on stdout after calling mode 8 (PspUtilitySavedataMode.Sizes):                      //                      // ------ SIZES ------                      // ---------- savedata result ----------                      // result = 0x801103c7                      //                      // bind : un used(0x0).                      //                      // -- dir name --                      // title id : ULUS10495                      // user  id : METALSLUGXX                      //                      // ms free size                      //   cluster size(byte) : 32768 byte                      //   free cluster num   : 32768                      //   free size(KB)      : 1048576 KB                      //   free size(string)  : "1 GB"                      //                      // ms data size(titleId=ULUS10495' userId=METALSLUGXX)                      //   cluster num        : 0                      //   size (KB)          : 0 KB                      //   size (string)      : "0 KB"                      //   size (32KB)        : 0 KB                      //   size (32KB string) : "0 KB"                      //                      // utility data size                      //   cluster num        : 13                      //   size (KB)          : 416 KB                      //   size (string)      : "416 KB"                      //   size (32KB)        : 416 KB                      //   size (32KB string) : "416 KB"                      // error: SCE_UTILITY_SAVEDATA_TYPE_SIZES return 801103c7                      case PspUtilitySavedataMode.Sizes:                      {                          SceKernelErrors SceKernelError = SceKernelErrors.ERROR_OK;                            //Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.Sizes");                            uint SectorSize = 1024;                          uint FreeSize = 32 * 1024 * 1024; // 32 MB                          uint UsedSize = 0;                            // MS free size.                          // Gets the ammount of free space in the Memory Stick. If null'                          // the size is ignored and no error is returned.                          {                              var SizeFreeInfo = (SizeFreeInfo*) Params.msFreeAddr.GetPointer<SizeFreeInfo>(Memory);                              SizeFreeInfo->SectorSize = SectorSize;                              SizeFreeInfo->FreeSectors = FreeSize / SectorSize;                              SizeFreeInfo->FreeKb = FreeSize / 1024;                                SizeFreeInfo->FreeKbString = (SizeFreeInfo->FreeKb) + "KB";                          }                            // MS data size.                          // Gets the size of the data already saved in the Memory Stick.                          // If null' the size is ignored and no error is returned.                          {                              var SizeUsedInfo = (SizeUsedInfo*) Params.msDataAddr.GetPointer<SizeUsedInfo>(Memory);                                if (SizeUsedInfo != null)                              {  #if true                                  if (true)                                  {                                      Console.WriteLine(SizeUsedInfo->saveName);                                      Console.WriteLine(SizeUsedInfo->gameName);                                        SizeUsedInfo->UsedKb = UsedSize / 1024;                                      SizeUsedInfo->UsedKb32 = UsedSize / (32 * 1024);                                        SizeUsedInfo->UsedKbString = (SizeUsedInfo->UsedKb) + "KB";                                      SizeUsedInfo->UsedKb32String = (SizeUsedInfo->UsedKb32) + "KB";                                  }                                  else                                  {                                      SceKernelError = SceKernelErrors.ERROR_SAVEDATA_SIZES_NO_DATA;                                  }  #else  									SceKernelError = SceKernelErrors.ERROR_SAVEDATA_SIZES_NO_DATA;  #endif                              }                          }                            // Utility data size.                          // Gets the size of the data to be saved in the Memory Stick.                          // If null' the size is ignored and no error is returned.                          {                              var SizeRequiredSpaceInfo =                                  (SizeRequiredSpaceInfo*) Params.utilityDataAddr.GetPointer<SizeRequiredSpaceInfo>(                                      Memory);                              if (SizeRequiredSpaceInfo != null)                              {                                  long RequiredSize = 0;                                  RequiredSize += Params.Icon0FileData.Size;                                  RequiredSize += Params.Icon1FileData.Size;                                  RequiredSize += Params.Pic1FileData.Size;                                  RequiredSize += Params.Snd0FileData.Size;                                  RequiredSize += Params.DataSize;                                    SizeRequiredSpaceInfo->RequiredSpaceSectors =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' SectorSize);                                  SizeRequiredSpaceInfo->RequiredSpaceKb =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' 1024);                                  SizeRequiredSpaceInfo->RequiredSpace32KB =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' 32 * 1024);                                    SizeRequiredSpaceInfo->RequiredSpaceString =                                      (SizeRequiredSpaceInfo->RequiredSpaceKb) + "KB";                                  SizeRequiredSpaceInfo->RequiredSpace32KBString =                                      (SizeRequiredSpaceInfo->RequiredSpace32KB) + "KB";                              }                          }                            if (SceKernelError != SceKernelErrors.ERROR_OK) throw (new SceKernelException(SceKernelError));                      }                          break;                      case PspUtilitySavedataMode.List:                      {                          var ListRequest = (ListRequest*) Params.idListAddr.GetPointer<ListRequest>(Memory);                          ListRequest->NumEntriesReaded = 0;                      }                          break;                      case PspUtilitySavedataMode.GetSize:                      {                          //Params.DataSize                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_MEMSTICK));                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_DATA));                          Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.GetSize");                      }                          break;                      case PspUtilitySavedataMode.Read:                      case PspUtilitySavedataMode.ReadSecure:                      {                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_DATA));                          Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.Read");                      }                          break;                      default:                          Console.Error.WriteLine("sceUtilitySavedataInitStart: Unsupported mode: " + Params.Mode);                          Debug.Fail("sceUtilitySavedataInitStart: Unsupported mode: " + Params.Mode);                          throw (new SceKernelException((SceKernelErrors) (-1)));                      //break;                  }                  //throw(new NotImplementedException());                    Params.Base.Result = SceKernelErrors.ERROR_OK;              }              catch (SceKernelException SceKernelException)              {                  Params.Base.Result = SceKernelException.SceKernelError;              }              finally              {                  CurrentDialogStep = DialogStepEnum.SUCCESS;              }
Magic Number,CSPspEmu.Hle.Modules.utility,sceUtility,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utility\sceUtility.cs,sceUtilitySavedataInitStart,The following statement contains a magic number: try              {                  switch (Params.Mode)                  {                      case PspUtilitySavedataMode.Autoload:                      case PspUtilitySavedataMode.Load:                      case PspUtilitySavedataMode.ListLoad:                      {                          try                          {                              Memory.WriteBytes(                                  Params.DataBufPointer'                                  HleIoManager.HleIoWrapper.ReadBytes(SaveDataBin)                              );                          }                          catch (IOException)                          {                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_LOAD_NO_DATA));                          }                          catch (Exception Exception)                          {                              Console.WriteLine(Exception);                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_LOAD_ACCESS_ERROR));                          }                      }                          break;                      case PspUtilitySavedataMode.Autosave:                      case PspUtilitySavedataMode.Save:                      case PspUtilitySavedataMode.ListSave:                      {                          try                          {                              HleIoManager.HleIoWrapper.Mkdir(SavePathFolder' SceMode.All);                                HleIoManager.HleIoWrapper.WriteBytes(                                  SaveDataBin'                                  Memory.ReadBytes(Params.DataBufPointer' Params.DataSize)                              );                                Save(Params.Icon0FileData' SaveIcon0);                              Save(Params.Pic1FileData' SavePic1);                              //Save(Params.SfoParam' SavePic1);                          }                          catch (Exception Exception)                          {                              Console.Error.WriteLine(Exception);                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_SAVE_ACCESS_ERROR));                          }                      }                          break;                        // "METAL SLUG XX" outputs the following on stdout after calling mode 8 (PspUtilitySavedataMode.Sizes):                      //                      // ------ SIZES ------                      // ---------- savedata result ----------                      // result = 0x801103c7                      //                      // bind : un used(0x0).                      //                      // -- dir name --                      // title id : ULUS10495                      // user  id : METALSLUGXX                      //                      // ms free size                      //   cluster size(byte) : 32768 byte                      //   free cluster num   : 32768                      //   free size(KB)      : 1048576 KB                      //   free size(string)  : "1 GB"                      //                      // ms data size(titleId=ULUS10495' userId=METALSLUGXX)                      //   cluster num        : 0                      //   size (KB)          : 0 KB                      //   size (string)      : "0 KB"                      //   size (32KB)        : 0 KB                      //   size (32KB string) : "0 KB"                      //                      // utility data size                      //   cluster num        : 13                      //   size (KB)          : 416 KB                      //   size (string)      : "416 KB"                      //   size (32KB)        : 416 KB                      //   size (32KB string) : "416 KB"                      // error: SCE_UTILITY_SAVEDATA_TYPE_SIZES return 801103c7                      case PspUtilitySavedataMode.Sizes:                      {                          SceKernelErrors SceKernelError = SceKernelErrors.ERROR_OK;                            //Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.Sizes");                            uint SectorSize = 1024;                          uint FreeSize = 32 * 1024 * 1024; // 32 MB                          uint UsedSize = 0;                            // MS free size.                          // Gets the ammount of free space in the Memory Stick. If null'                          // the size is ignored and no error is returned.                          {                              var SizeFreeInfo = (SizeFreeInfo*) Params.msFreeAddr.GetPointer<SizeFreeInfo>(Memory);                              SizeFreeInfo->SectorSize = SectorSize;                              SizeFreeInfo->FreeSectors = FreeSize / SectorSize;                              SizeFreeInfo->FreeKb = FreeSize / 1024;                                SizeFreeInfo->FreeKbString = (SizeFreeInfo->FreeKb) + "KB";                          }                            // MS data size.                          // Gets the size of the data already saved in the Memory Stick.                          // If null' the size is ignored and no error is returned.                          {                              var SizeUsedInfo = (SizeUsedInfo*) Params.msDataAddr.GetPointer<SizeUsedInfo>(Memory);                                if (SizeUsedInfo != null)                              {  #if true                                  if (true)                                  {                                      Console.WriteLine(SizeUsedInfo->saveName);                                      Console.WriteLine(SizeUsedInfo->gameName);                                        SizeUsedInfo->UsedKb = UsedSize / 1024;                                      SizeUsedInfo->UsedKb32 = UsedSize / (32 * 1024);                                        SizeUsedInfo->UsedKbString = (SizeUsedInfo->UsedKb) + "KB";                                      SizeUsedInfo->UsedKb32String = (SizeUsedInfo->UsedKb32) + "KB";                                  }                                  else                                  {                                      SceKernelError = SceKernelErrors.ERROR_SAVEDATA_SIZES_NO_DATA;                                  }  #else  									SceKernelError = SceKernelErrors.ERROR_SAVEDATA_SIZES_NO_DATA;  #endif                              }                          }                            // Utility data size.                          // Gets the size of the data to be saved in the Memory Stick.                          // If null' the size is ignored and no error is returned.                          {                              var SizeRequiredSpaceInfo =                                  (SizeRequiredSpaceInfo*) Params.utilityDataAddr.GetPointer<SizeRequiredSpaceInfo>(                                      Memory);                              if (SizeRequiredSpaceInfo != null)                              {                                  long RequiredSize = 0;                                  RequiredSize += Params.Icon0FileData.Size;                                  RequiredSize += Params.Icon1FileData.Size;                                  RequiredSize += Params.Pic1FileData.Size;                                  RequiredSize += Params.Snd0FileData.Size;                                  RequiredSize += Params.DataSize;                                    SizeRequiredSpaceInfo->RequiredSpaceSectors =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' SectorSize);                                  SizeRequiredSpaceInfo->RequiredSpaceKb =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' 1024);                                  SizeRequiredSpaceInfo->RequiredSpace32KB =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' 32 * 1024);                                    SizeRequiredSpaceInfo->RequiredSpaceString =                                      (SizeRequiredSpaceInfo->RequiredSpaceKb) + "KB";                                  SizeRequiredSpaceInfo->RequiredSpace32KBString =                                      (SizeRequiredSpaceInfo->RequiredSpace32KB) + "KB";                              }                          }                            if (SceKernelError != SceKernelErrors.ERROR_OK) throw (new SceKernelException(SceKernelError));                      }                          break;                      case PspUtilitySavedataMode.List:                      {                          var ListRequest = (ListRequest*) Params.idListAddr.GetPointer<ListRequest>(Memory);                          ListRequest->NumEntriesReaded = 0;                      }                          break;                      case PspUtilitySavedataMode.GetSize:                      {                          //Params.DataSize                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_MEMSTICK));                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_DATA));                          Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.GetSize");                      }                          break;                      case PspUtilitySavedataMode.Read:                      case PspUtilitySavedataMode.ReadSecure:                      {                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_DATA));                          Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.Read");                      }                          break;                      default:                          Console.Error.WriteLine("sceUtilitySavedataInitStart: Unsupported mode: " + Params.Mode);                          Debug.Fail("sceUtilitySavedataInitStart: Unsupported mode: " + Params.Mode);                          throw (new SceKernelException((SceKernelErrors) (-1)));                      //break;                  }                  //throw(new NotImplementedException());                    Params.Base.Result = SceKernelErrors.ERROR_OK;              }              catch (SceKernelException SceKernelException)              {                  Params.Base.Result = SceKernelException.SceKernelError;              }              finally              {                  CurrentDialogStep = DialogStepEnum.SUCCESS;              }
Magic Number,CSPspEmu.Hle.Modules.utility,sceUtility,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utility\sceUtility.cs,sceUtilitySavedataInitStart,The following statement contains a magic number: try              {                  switch (Params.Mode)                  {                      case PspUtilitySavedataMode.Autoload:                      case PspUtilitySavedataMode.Load:                      case PspUtilitySavedataMode.ListLoad:                      {                          try                          {                              Memory.WriteBytes(                                  Params.DataBufPointer'                                  HleIoManager.HleIoWrapper.ReadBytes(SaveDataBin)                              );                          }                          catch (IOException)                          {                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_LOAD_NO_DATA));                          }                          catch (Exception Exception)                          {                              Console.WriteLine(Exception);                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_LOAD_ACCESS_ERROR));                          }                      }                          break;                      case PspUtilitySavedataMode.Autosave:                      case PspUtilitySavedataMode.Save:                      case PspUtilitySavedataMode.ListSave:                      {                          try                          {                              HleIoManager.HleIoWrapper.Mkdir(SavePathFolder' SceMode.All);                                HleIoManager.HleIoWrapper.WriteBytes(                                  SaveDataBin'                                  Memory.ReadBytes(Params.DataBufPointer' Params.DataSize)                              );                                Save(Params.Icon0FileData' SaveIcon0);                              Save(Params.Pic1FileData' SavePic1);                              //Save(Params.SfoParam' SavePic1);                          }                          catch (Exception Exception)                          {                              Console.Error.WriteLine(Exception);                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_SAVE_ACCESS_ERROR));                          }                      }                          break;                        // "METAL SLUG XX" outputs the following on stdout after calling mode 8 (PspUtilitySavedataMode.Sizes):                      //                      // ------ SIZES ------                      // ---------- savedata result ----------                      // result = 0x801103c7                      //                      // bind : un used(0x0).                      //                      // -- dir name --                      // title id : ULUS10495                      // user  id : METALSLUGXX                      //                      // ms free size                      //   cluster size(byte) : 32768 byte                      //   free cluster num   : 32768                      //   free size(KB)      : 1048576 KB                      //   free size(string)  : "1 GB"                      //                      // ms data size(titleId=ULUS10495' userId=METALSLUGXX)                      //   cluster num        : 0                      //   size (KB)          : 0 KB                      //   size (string)      : "0 KB"                      //   size (32KB)        : 0 KB                      //   size (32KB string) : "0 KB"                      //                      // utility data size                      //   cluster num        : 13                      //   size (KB)          : 416 KB                      //   size (string)      : "416 KB"                      //   size (32KB)        : 416 KB                      //   size (32KB string) : "416 KB"                      // error: SCE_UTILITY_SAVEDATA_TYPE_SIZES return 801103c7                      case PspUtilitySavedataMode.Sizes:                      {                          SceKernelErrors SceKernelError = SceKernelErrors.ERROR_OK;                            //Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.Sizes");                            uint SectorSize = 1024;                          uint FreeSize = 32 * 1024 * 1024; // 32 MB                          uint UsedSize = 0;                            // MS free size.                          // Gets the ammount of free space in the Memory Stick. If null'                          // the size is ignored and no error is returned.                          {                              var SizeFreeInfo = (SizeFreeInfo*) Params.msFreeAddr.GetPointer<SizeFreeInfo>(Memory);                              SizeFreeInfo->SectorSize = SectorSize;                              SizeFreeInfo->FreeSectors = FreeSize / SectorSize;                              SizeFreeInfo->FreeKb = FreeSize / 1024;                                SizeFreeInfo->FreeKbString = (SizeFreeInfo->FreeKb) + "KB";                          }                            // MS data size.                          // Gets the size of the data already saved in the Memory Stick.                          // If null' the size is ignored and no error is returned.                          {                              var SizeUsedInfo = (SizeUsedInfo*) Params.msDataAddr.GetPointer<SizeUsedInfo>(Memory);                                if (SizeUsedInfo != null)                              {  #if true                                  if (true)                                  {                                      Console.WriteLine(SizeUsedInfo->saveName);                                      Console.WriteLine(SizeUsedInfo->gameName);                                        SizeUsedInfo->UsedKb = UsedSize / 1024;                                      SizeUsedInfo->UsedKb32 = UsedSize / (32 * 1024);                                        SizeUsedInfo->UsedKbString = (SizeUsedInfo->UsedKb) + "KB";                                      SizeUsedInfo->UsedKb32String = (SizeUsedInfo->UsedKb32) + "KB";                                  }                                  else                                  {                                      SceKernelError = SceKernelErrors.ERROR_SAVEDATA_SIZES_NO_DATA;                                  }  #else  									SceKernelError = SceKernelErrors.ERROR_SAVEDATA_SIZES_NO_DATA;  #endif                              }                          }                            // Utility data size.                          // Gets the size of the data to be saved in the Memory Stick.                          // If null' the size is ignored and no error is returned.                          {                              var SizeRequiredSpaceInfo =                                  (SizeRequiredSpaceInfo*) Params.utilityDataAddr.GetPointer<SizeRequiredSpaceInfo>(                                      Memory);                              if (SizeRequiredSpaceInfo != null)                              {                                  long RequiredSize = 0;                                  RequiredSize += Params.Icon0FileData.Size;                                  RequiredSize += Params.Icon1FileData.Size;                                  RequiredSize += Params.Pic1FileData.Size;                                  RequiredSize += Params.Snd0FileData.Size;                                  RequiredSize += Params.DataSize;                                    SizeRequiredSpaceInfo->RequiredSpaceSectors =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' SectorSize);                                  SizeRequiredSpaceInfo->RequiredSpaceKb =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' 1024);                                  SizeRequiredSpaceInfo->RequiredSpace32KB =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' 32 * 1024);                                    SizeRequiredSpaceInfo->RequiredSpaceString =                                      (SizeRequiredSpaceInfo->RequiredSpaceKb) + "KB";                                  SizeRequiredSpaceInfo->RequiredSpace32KBString =                                      (SizeRequiredSpaceInfo->RequiredSpace32KB) + "KB";                              }                          }                            if (SceKernelError != SceKernelErrors.ERROR_OK) throw (new SceKernelException(SceKernelError));                      }                          break;                      case PspUtilitySavedataMode.List:                      {                          var ListRequest = (ListRequest*) Params.idListAddr.GetPointer<ListRequest>(Memory);                          ListRequest->NumEntriesReaded = 0;                      }                          break;                      case PspUtilitySavedataMode.GetSize:                      {                          //Params.DataSize                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_MEMSTICK));                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_DATA));                          Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.GetSize");                      }                          break;                      case PspUtilitySavedataMode.Read:                      case PspUtilitySavedataMode.ReadSecure:                      {                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_DATA));                          Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.Read");                      }                          break;                      default:                          Console.Error.WriteLine("sceUtilitySavedataInitStart: Unsupported mode: " + Params.Mode);                          Debug.Fail("sceUtilitySavedataInitStart: Unsupported mode: " + Params.Mode);                          throw (new SceKernelException((SceKernelErrors) (-1)));                      //break;                  }                  //throw(new NotImplementedException());                    Params.Base.Result = SceKernelErrors.ERROR_OK;              }              catch (SceKernelException SceKernelException)              {                  Params.Base.Result = SceKernelException.SceKernelError;              }              finally              {                  CurrentDialogStep = DialogStepEnum.SUCCESS;              }
Magic Number,CSPspEmu.Hle.Modules.utility,sceUtility,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utility\sceUtility.cs,sceUtilitySavedataInitStart,The following statement contains a magic number: try              {                  switch (Params.Mode)                  {                      case PspUtilitySavedataMode.Autoload:                      case PspUtilitySavedataMode.Load:                      case PspUtilitySavedataMode.ListLoad:                      {                          try                          {                              Memory.WriteBytes(                                  Params.DataBufPointer'                                  HleIoManager.HleIoWrapper.ReadBytes(SaveDataBin)                              );                          }                          catch (IOException)                          {                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_LOAD_NO_DATA));                          }                          catch (Exception Exception)                          {                              Console.WriteLine(Exception);                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_LOAD_ACCESS_ERROR));                          }                      }                          break;                      case PspUtilitySavedataMode.Autosave:                      case PspUtilitySavedataMode.Save:                      case PspUtilitySavedataMode.ListSave:                      {                          try                          {                              HleIoManager.HleIoWrapper.Mkdir(SavePathFolder' SceMode.All);                                HleIoManager.HleIoWrapper.WriteBytes(                                  SaveDataBin'                                  Memory.ReadBytes(Params.DataBufPointer' Params.DataSize)                              );                                Save(Params.Icon0FileData' SaveIcon0);                              Save(Params.Pic1FileData' SavePic1);                              //Save(Params.SfoParam' SavePic1);                          }                          catch (Exception Exception)                          {                              Console.Error.WriteLine(Exception);                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_SAVE_ACCESS_ERROR));                          }                      }                          break;                        // "METAL SLUG XX" outputs the following on stdout after calling mode 8 (PspUtilitySavedataMode.Sizes):                      //                      // ------ SIZES ------                      // ---------- savedata result ----------                      // result = 0x801103c7                      //                      // bind : un used(0x0).                      //                      // -- dir name --                      // title id : ULUS10495                      // user  id : METALSLUGXX                      //                      // ms free size                      //   cluster size(byte) : 32768 byte                      //   free cluster num   : 32768                      //   free size(KB)      : 1048576 KB                      //   free size(string)  : "1 GB"                      //                      // ms data size(titleId=ULUS10495' userId=METALSLUGXX)                      //   cluster num        : 0                      //   size (KB)          : 0 KB                      //   size (string)      : "0 KB"                      //   size (32KB)        : 0 KB                      //   size (32KB string) : "0 KB"                      //                      // utility data size                      //   cluster num        : 13                      //   size (KB)          : 416 KB                      //   size (string)      : "416 KB"                      //   size (32KB)        : 416 KB                      //   size (32KB string) : "416 KB"                      // error: SCE_UTILITY_SAVEDATA_TYPE_SIZES return 801103c7                      case PspUtilitySavedataMode.Sizes:                      {                          SceKernelErrors SceKernelError = SceKernelErrors.ERROR_OK;                            //Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.Sizes");                            uint SectorSize = 1024;                          uint FreeSize = 32 * 1024 * 1024; // 32 MB                          uint UsedSize = 0;                            // MS free size.                          // Gets the ammount of free space in the Memory Stick. If null'                          // the size is ignored and no error is returned.                          {                              var SizeFreeInfo = (SizeFreeInfo*) Params.msFreeAddr.GetPointer<SizeFreeInfo>(Memory);                              SizeFreeInfo->SectorSize = SectorSize;                              SizeFreeInfo->FreeSectors = FreeSize / SectorSize;                              SizeFreeInfo->FreeKb = FreeSize / 1024;                                SizeFreeInfo->FreeKbString = (SizeFreeInfo->FreeKb) + "KB";                          }                            // MS data size.                          // Gets the size of the data already saved in the Memory Stick.                          // If null' the size is ignored and no error is returned.                          {                              var SizeUsedInfo = (SizeUsedInfo*) Params.msDataAddr.GetPointer<SizeUsedInfo>(Memory);                                if (SizeUsedInfo != null)                              {  #if true                                  if (true)                                  {                                      Console.WriteLine(SizeUsedInfo->saveName);                                      Console.WriteLine(SizeUsedInfo->gameName);                                        SizeUsedInfo->UsedKb = UsedSize / 1024;                                      SizeUsedInfo->UsedKb32 = UsedSize / (32 * 1024);                                        SizeUsedInfo->UsedKbString = (SizeUsedInfo->UsedKb) + "KB";                                      SizeUsedInfo->UsedKb32String = (SizeUsedInfo->UsedKb32) + "KB";                                  }                                  else                                  {                                      SceKernelError = SceKernelErrors.ERROR_SAVEDATA_SIZES_NO_DATA;                                  }  #else  									SceKernelError = SceKernelErrors.ERROR_SAVEDATA_SIZES_NO_DATA;  #endif                              }                          }                            // Utility data size.                          // Gets the size of the data to be saved in the Memory Stick.                          // If null' the size is ignored and no error is returned.                          {                              var SizeRequiredSpaceInfo =                                  (SizeRequiredSpaceInfo*) Params.utilityDataAddr.GetPointer<SizeRequiredSpaceInfo>(                                      Memory);                              if (SizeRequiredSpaceInfo != null)                              {                                  long RequiredSize = 0;                                  RequiredSize += Params.Icon0FileData.Size;                                  RequiredSize += Params.Icon1FileData.Size;                                  RequiredSize += Params.Pic1FileData.Size;                                  RequiredSize += Params.Snd0FileData.Size;                                  RequiredSize += Params.DataSize;                                    SizeRequiredSpaceInfo->RequiredSpaceSectors =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' SectorSize);                                  SizeRequiredSpaceInfo->RequiredSpaceKb =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' 1024);                                  SizeRequiredSpaceInfo->RequiredSpace32KB =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' 32 * 1024);                                    SizeRequiredSpaceInfo->RequiredSpaceString =                                      (SizeRequiredSpaceInfo->RequiredSpaceKb) + "KB";                                  SizeRequiredSpaceInfo->RequiredSpace32KBString =                                      (SizeRequiredSpaceInfo->RequiredSpace32KB) + "KB";                              }                          }                            if (SceKernelError != SceKernelErrors.ERROR_OK) throw (new SceKernelException(SceKernelError));                      }                          break;                      case PspUtilitySavedataMode.List:                      {                          var ListRequest = (ListRequest*) Params.idListAddr.GetPointer<ListRequest>(Memory);                          ListRequest->NumEntriesReaded = 0;                      }                          break;                      case PspUtilitySavedataMode.GetSize:                      {                          //Params.DataSize                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_MEMSTICK));                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_DATA));                          Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.GetSize");                      }                          break;                      case PspUtilitySavedataMode.Read:                      case PspUtilitySavedataMode.ReadSecure:                      {                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_DATA));                          Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.Read");                      }                          break;                      default:                          Console.Error.WriteLine("sceUtilitySavedataInitStart: Unsupported mode: " + Params.Mode);                          Debug.Fail("sceUtilitySavedataInitStart: Unsupported mode: " + Params.Mode);                          throw (new SceKernelException((SceKernelErrors) (-1)));                      //break;                  }                  //throw(new NotImplementedException());                    Params.Base.Result = SceKernelErrors.ERROR_OK;              }              catch (SceKernelException SceKernelException)              {                  Params.Base.Result = SceKernelException.SceKernelError;              }              finally              {                  CurrentDialogStep = DialogStepEnum.SUCCESS;              }
Magic Number,CSPspEmu.Hle.Modules.utility,sceUtility,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utility\sceUtility.cs,sceUtilitySavedataInitStart,The following statement contains a magic number: try              {                  switch (Params.Mode)                  {                      case PspUtilitySavedataMode.Autoload:                      case PspUtilitySavedataMode.Load:                      case PspUtilitySavedataMode.ListLoad:                      {                          try                          {                              Memory.WriteBytes(                                  Params.DataBufPointer'                                  HleIoManager.HleIoWrapper.ReadBytes(SaveDataBin)                              );                          }                          catch (IOException)                          {                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_LOAD_NO_DATA));                          }                          catch (Exception Exception)                          {                              Console.WriteLine(Exception);                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_LOAD_ACCESS_ERROR));                          }                      }                          break;                      case PspUtilitySavedataMode.Autosave:                      case PspUtilitySavedataMode.Save:                      case PspUtilitySavedataMode.ListSave:                      {                          try                          {                              HleIoManager.HleIoWrapper.Mkdir(SavePathFolder' SceMode.All);                                HleIoManager.HleIoWrapper.WriteBytes(                                  SaveDataBin'                                  Memory.ReadBytes(Params.DataBufPointer' Params.DataSize)                              );                                Save(Params.Icon0FileData' SaveIcon0);                              Save(Params.Pic1FileData' SavePic1);                              //Save(Params.SfoParam' SavePic1);                          }                          catch (Exception Exception)                          {                              Console.Error.WriteLine(Exception);                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_SAVE_ACCESS_ERROR));                          }                      }                          break;                        // "METAL SLUG XX" outputs the following on stdout after calling mode 8 (PspUtilitySavedataMode.Sizes):                      //                      // ------ SIZES ------                      // ---------- savedata result ----------                      // result = 0x801103c7                      //                      // bind : un used(0x0).                      //                      // -- dir name --                      // title id : ULUS10495                      // user  id : METALSLUGXX                      //                      // ms free size                      //   cluster size(byte) : 32768 byte                      //   free cluster num   : 32768                      //   free size(KB)      : 1048576 KB                      //   free size(string)  : "1 GB"                      //                      // ms data size(titleId=ULUS10495' userId=METALSLUGXX)                      //   cluster num        : 0                      //   size (KB)          : 0 KB                      //   size (string)      : "0 KB"                      //   size (32KB)        : 0 KB                      //   size (32KB string) : "0 KB"                      //                      // utility data size                      //   cluster num        : 13                      //   size (KB)          : 416 KB                      //   size (string)      : "416 KB"                      //   size (32KB)        : 416 KB                      //   size (32KB string) : "416 KB"                      // error: SCE_UTILITY_SAVEDATA_TYPE_SIZES return 801103c7                      case PspUtilitySavedataMode.Sizes:                      {                          SceKernelErrors SceKernelError = SceKernelErrors.ERROR_OK;                            //Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.Sizes");                            uint SectorSize = 1024;                          uint FreeSize = 32 * 1024 * 1024; // 32 MB                          uint UsedSize = 0;                            // MS free size.                          // Gets the ammount of free space in the Memory Stick. If null'                          // the size is ignored and no error is returned.                          {                              var SizeFreeInfo = (SizeFreeInfo*) Params.msFreeAddr.GetPointer<SizeFreeInfo>(Memory);                              SizeFreeInfo->SectorSize = SectorSize;                              SizeFreeInfo->FreeSectors = FreeSize / SectorSize;                              SizeFreeInfo->FreeKb = FreeSize / 1024;                                SizeFreeInfo->FreeKbString = (SizeFreeInfo->FreeKb) + "KB";                          }                            // MS data size.                          // Gets the size of the data already saved in the Memory Stick.                          // If null' the size is ignored and no error is returned.                          {                              var SizeUsedInfo = (SizeUsedInfo*) Params.msDataAddr.GetPointer<SizeUsedInfo>(Memory);                                if (SizeUsedInfo != null)                              {  #if true                                  if (true)                                  {                                      Console.WriteLine(SizeUsedInfo->saveName);                                      Console.WriteLine(SizeUsedInfo->gameName);                                        SizeUsedInfo->UsedKb = UsedSize / 1024;                                      SizeUsedInfo->UsedKb32 = UsedSize / (32 * 1024);                                        SizeUsedInfo->UsedKbString = (SizeUsedInfo->UsedKb) + "KB";                                      SizeUsedInfo->UsedKb32String = (SizeUsedInfo->UsedKb32) + "KB";                                  }                                  else                                  {                                      SceKernelError = SceKernelErrors.ERROR_SAVEDATA_SIZES_NO_DATA;                                  }  #else  									SceKernelError = SceKernelErrors.ERROR_SAVEDATA_SIZES_NO_DATA;  #endif                              }                          }                            // Utility data size.                          // Gets the size of the data to be saved in the Memory Stick.                          // If null' the size is ignored and no error is returned.                          {                              var SizeRequiredSpaceInfo =                                  (SizeRequiredSpaceInfo*) Params.utilityDataAddr.GetPointer<SizeRequiredSpaceInfo>(                                      Memory);                              if (SizeRequiredSpaceInfo != null)                              {                                  long RequiredSize = 0;                                  RequiredSize += Params.Icon0FileData.Size;                                  RequiredSize += Params.Icon1FileData.Size;                                  RequiredSize += Params.Pic1FileData.Size;                                  RequiredSize += Params.Snd0FileData.Size;                                  RequiredSize += Params.DataSize;                                    SizeRequiredSpaceInfo->RequiredSpaceSectors =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' SectorSize);                                  SizeRequiredSpaceInfo->RequiredSpaceKb =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' 1024);                                  SizeRequiredSpaceInfo->RequiredSpace32KB =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' 32 * 1024);                                    SizeRequiredSpaceInfo->RequiredSpaceString =                                      (SizeRequiredSpaceInfo->RequiredSpaceKb) + "KB";                                  SizeRequiredSpaceInfo->RequiredSpace32KBString =                                      (SizeRequiredSpaceInfo->RequiredSpace32KB) + "KB";                              }                          }                            if (SceKernelError != SceKernelErrors.ERROR_OK) throw (new SceKernelException(SceKernelError));                      }                          break;                      case PspUtilitySavedataMode.List:                      {                          var ListRequest = (ListRequest*) Params.idListAddr.GetPointer<ListRequest>(Memory);                          ListRequest->NumEntriesReaded = 0;                      }                          break;                      case PspUtilitySavedataMode.GetSize:                      {                          //Params.DataSize                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_MEMSTICK));                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_DATA));                          Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.GetSize");                      }                          break;                      case PspUtilitySavedataMode.Read:                      case PspUtilitySavedataMode.ReadSecure:                      {                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_DATA));                          Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.Read");                      }                          break;                      default:                          Console.Error.WriteLine("sceUtilitySavedataInitStart: Unsupported mode: " + Params.Mode);                          Debug.Fail("sceUtilitySavedataInitStart: Unsupported mode: " + Params.Mode);                          throw (new SceKernelException((SceKernelErrors) (-1)));                      //break;                  }                  //throw(new NotImplementedException());                    Params.Base.Result = SceKernelErrors.ERROR_OK;              }              catch (SceKernelException SceKernelException)              {                  Params.Base.Result = SceKernelException.SceKernelError;              }              finally              {                  CurrentDialogStep = DialogStepEnum.SUCCESS;              }
Magic Number,CSPspEmu.Hle.Modules.utility,sceUtility,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utility\sceUtility.cs,sceUtilitySavedataInitStart,The following statement contains a magic number: try              {                  switch (Params.Mode)                  {                      case PspUtilitySavedataMode.Autoload:                      case PspUtilitySavedataMode.Load:                      case PspUtilitySavedataMode.ListLoad:                      {                          try                          {                              Memory.WriteBytes(                                  Params.DataBufPointer'                                  HleIoManager.HleIoWrapper.ReadBytes(SaveDataBin)                              );                          }                          catch (IOException)                          {                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_LOAD_NO_DATA));                          }                          catch (Exception Exception)                          {                              Console.WriteLine(Exception);                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_LOAD_ACCESS_ERROR));                          }                      }                          break;                      case PspUtilitySavedataMode.Autosave:                      case PspUtilitySavedataMode.Save:                      case PspUtilitySavedataMode.ListSave:                      {                          try                          {                              HleIoManager.HleIoWrapper.Mkdir(SavePathFolder' SceMode.All);                                HleIoManager.HleIoWrapper.WriteBytes(                                  SaveDataBin'                                  Memory.ReadBytes(Params.DataBufPointer' Params.DataSize)                              );                                Save(Params.Icon0FileData' SaveIcon0);                              Save(Params.Pic1FileData' SavePic1);                              //Save(Params.SfoParam' SavePic1);                          }                          catch (Exception Exception)                          {                              Console.Error.WriteLine(Exception);                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_SAVE_ACCESS_ERROR));                          }                      }                          break;                        // "METAL SLUG XX" outputs the following on stdout after calling mode 8 (PspUtilitySavedataMode.Sizes):                      //                      // ------ SIZES ------                      // ---------- savedata result ----------                      // result = 0x801103c7                      //                      // bind : un used(0x0).                      //                      // -- dir name --                      // title id : ULUS10495                      // user  id : METALSLUGXX                      //                      // ms free size                      //   cluster size(byte) : 32768 byte                      //   free cluster num   : 32768                      //   free size(KB)      : 1048576 KB                      //   free size(string)  : "1 GB"                      //                      // ms data size(titleId=ULUS10495' userId=METALSLUGXX)                      //   cluster num        : 0                      //   size (KB)          : 0 KB                      //   size (string)      : "0 KB"                      //   size (32KB)        : 0 KB                      //   size (32KB string) : "0 KB"                      //                      // utility data size                      //   cluster num        : 13                      //   size (KB)          : 416 KB                      //   size (string)      : "416 KB"                      //   size (32KB)        : 416 KB                      //   size (32KB string) : "416 KB"                      // error: SCE_UTILITY_SAVEDATA_TYPE_SIZES return 801103c7                      case PspUtilitySavedataMode.Sizes:                      {                          SceKernelErrors SceKernelError = SceKernelErrors.ERROR_OK;                            //Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.Sizes");                            uint SectorSize = 1024;                          uint FreeSize = 32 * 1024 * 1024; // 32 MB                          uint UsedSize = 0;                            // MS free size.                          // Gets the ammount of free space in the Memory Stick. If null'                          // the size is ignored and no error is returned.                          {                              var SizeFreeInfo = (SizeFreeInfo*) Params.msFreeAddr.GetPointer<SizeFreeInfo>(Memory);                              SizeFreeInfo->SectorSize = SectorSize;                              SizeFreeInfo->FreeSectors = FreeSize / SectorSize;                              SizeFreeInfo->FreeKb = FreeSize / 1024;                                SizeFreeInfo->FreeKbString = (SizeFreeInfo->FreeKb) + "KB";                          }                            // MS data size.                          // Gets the size of the data already saved in the Memory Stick.                          // If null' the size is ignored and no error is returned.                          {                              var SizeUsedInfo = (SizeUsedInfo*) Params.msDataAddr.GetPointer<SizeUsedInfo>(Memory);                                if (SizeUsedInfo != null)                              {  #if true                                  if (true)                                  {                                      Console.WriteLine(SizeUsedInfo->saveName);                                      Console.WriteLine(SizeUsedInfo->gameName);                                        SizeUsedInfo->UsedKb = UsedSize / 1024;                                      SizeUsedInfo->UsedKb32 = UsedSize / (32 * 1024);                                        SizeUsedInfo->UsedKbString = (SizeUsedInfo->UsedKb) + "KB";                                      SizeUsedInfo->UsedKb32String = (SizeUsedInfo->UsedKb32) + "KB";                                  }                                  else                                  {                                      SceKernelError = SceKernelErrors.ERROR_SAVEDATA_SIZES_NO_DATA;                                  }  #else  									SceKernelError = SceKernelErrors.ERROR_SAVEDATA_SIZES_NO_DATA;  #endif                              }                          }                            // Utility data size.                          // Gets the size of the data to be saved in the Memory Stick.                          // If null' the size is ignored and no error is returned.                          {                              var SizeRequiredSpaceInfo =                                  (SizeRequiredSpaceInfo*) Params.utilityDataAddr.GetPointer<SizeRequiredSpaceInfo>(                                      Memory);                              if (SizeRequiredSpaceInfo != null)                              {                                  long RequiredSize = 0;                                  RequiredSize += Params.Icon0FileData.Size;                                  RequiredSize += Params.Icon1FileData.Size;                                  RequiredSize += Params.Pic1FileData.Size;                                  RequiredSize += Params.Snd0FileData.Size;                                  RequiredSize += Params.DataSize;                                    SizeRequiredSpaceInfo->RequiredSpaceSectors =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' SectorSize);                                  SizeRequiredSpaceInfo->RequiredSpaceKb =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' 1024);                                  SizeRequiredSpaceInfo->RequiredSpace32KB =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' 32 * 1024);                                    SizeRequiredSpaceInfo->RequiredSpaceString =                                      (SizeRequiredSpaceInfo->RequiredSpaceKb) + "KB";                                  SizeRequiredSpaceInfo->RequiredSpace32KBString =                                      (SizeRequiredSpaceInfo->RequiredSpace32KB) + "KB";                              }                          }                            if (SceKernelError != SceKernelErrors.ERROR_OK) throw (new SceKernelException(SceKernelError));                      }                          break;                      case PspUtilitySavedataMode.List:                      {                          var ListRequest = (ListRequest*) Params.idListAddr.GetPointer<ListRequest>(Memory);                          ListRequest->NumEntriesReaded = 0;                      }                          break;                      case PspUtilitySavedataMode.GetSize:                      {                          //Params.DataSize                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_MEMSTICK));                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_DATA));                          Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.GetSize");                      }                          break;                      case PspUtilitySavedataMode.Read:                      case PspUtilitySavedataMode.ReadSecure:                      {                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_DATA));                          Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.Read");                      }                          break;                      default:                          Console.Error.WriteLine("sceUtilitySavedataInitStart: Unsupported mode: " + Params.Mode);                          Debug.Fail("sceUtilitySavedataInitStart: Unsupported mode: " + Params.Mode);                          throw (new SceKernelException((SceKernelErrors) (-1)));                      //break;                  }                  //throw(new NotImplementedException());                    Params.Base.Result = SceKernelErrors.ERROR_OK;              }              catch (SceKernelException SceKernelException)              {                  Params.Base.Result = SceKernelException.SceKernelError;              }              finally              {                  CurrentDialogStep = DialogStepEnum.SUCCESS;              }
Magic Number,CSPspEmu.Hle.Modules.utility,sceUtility,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utility\sceUtility.cs,sceUtilitySavedataInitStart,The following statement contains a magic number: try              {                  switch (Params.Mode)                  {                      case PspUtilitySavedataMode.Autoload:                      case PspUtilitySavedataMode.Load:                      case PspUtilitySavedataMode.ListLoad:                      {                          try                          {                              Memory.WriteBytes(                                  Params.DataBufPointer'                                  HleIoManager.HleIoWrapper.ReadBytes(SaveDataBin)                              );                          }                          catch (IOException)                          {                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_LOAD_NO_DATA));                          }                          catch (Exception Exception)                          {                              Console.WriteLine(Exception);                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_LOAD_ACCESS_ERROR));                          }                      }                          break;                      case PspUtilitySavedataMode.Autosave:                      case PspUtilitySavedataMode.Save:                      case PspUtilitySavedataMode.ListSave:                      {                          try                          {                              HleIoManager.HleIoWrapper.Mkdir(SavePathFolder' SceMode.All);                                HleIoManager.HleIoWrapper.WriteBytes(                                  SaveDataBin'                                  Memory.ReadBytes(Params.DataBufPointer' Params.DataSize)                              );                                Save(Params.Icon0FileData' SaveIcon0);                              Save(Params.Pic1FileData' SavePic1);                              //Save(Params.SfoParam' SavePic1);                          }                          catch (Exception Exception)                          {                              Console.Error.WriteLine(Exception);                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_SAVE_ACCESS_ERROR));                          }                      }                          break;                        // "METAL SLUG XX" outputs the following on stdout after calling mode 8 (PspUtilitySavedataMode.Sizes):                      //                      // ------ SIZES ------                      // ---------- savedata result ----------                      // result = 0x801103c7                      //                      // bind : un used(0x0).                      //                      // -- dir name --                      // title id : ULUS10495                      // user  id : METALSLUGXX                      //                      // ms free size                      //   cluster size(byte) : 32768 byte                      //   free cluster num   : 32768                      //   free size(KB)      : 1048576 KB                      //   free size(string)  : "1 GB"                      //                      // ms data size(titleId=ULUS10495' userId=METALSLUGXX)                      //   cluster num        : 0                      //   size (KB)          : 0 KB                      //   size (string)      : "0 KB"                      //   size (32KB)        : 0 KB                      //   size (32KB string) : "0 KB"                      //                      // utility data size                      //   cluster num        : 13                      //   size (KB)          : 416 KB                      //   size (string)      : "416 KB"                      //   size (32KB)        : 416 KB                      //   size (32KB string) : "416 KB"                      // error: SCE_UTILITY_SAVEDATA_TYPE_SIZES return 801103c7                      case PspUtilitySavedataMode.Sizes:                      {                          SceKernelErrors SceKernelError = SceKernelErrors.ERROR_OK;                            //Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.Sizes");                            uint SectorSize = 1024;                          uint FreeSize = 32 * 1024 * 1024; // 32 MB                          uint UsedSize = 0;                            // MS free size.                          // Gets the ammount of free space in the Memory Stick. If null'                          // the size is ignored and no error is returned.                          {                              var SizeFreeInfo = (SizeFreeInfo*) Params.msFreeAddr.GetPointer<SizeFreeInfo>(Memory);                              SizeFreeInfo->SectorSize = SectorSize;                              SizeFreeInfo->FreeSectors = FreeSize / SectorSize;                              SizeFreeInfo->FreeKb = FreeSize / 1024;                                SizeFreeInfo->FreeKbString = (SizeFreeInfo->FreeKb) + "KB";                          }                            // MS data size.                          // Gets the size of the data already saved in the Memory Stick.                          // If null' the size is ignored and no error is returned.                          {                              var SizeUsedInfo = (SizeUsedInfo*) Params.msDataAddr.GetPointer<SizeUsedInfo>(Memory);                                if (SizeUsedInfo != null)                              {  #if true                                  if (true)                                  {                                      Console.WriteLine(SizeUsedInfo->saveName);                                      Console.WriteLine(SizeUsedInfo->gameName);                                        SizeUsedInfo->UsedKb = UsedSize / 1024;                                      SizeUsedInfo->UsedKb32 = UsedSize / (32 * 1024);                                        SizeUsedInfo->UsedKbString = (SizeUsedInfo->UsedKb) + "KB";                                      SizeUsedInfo->UsedKb32String = (SizeUsedInfo->UsedKb32) + "KB";                                  }                                  else                                  {                                      SceKernelError = SceKernelErrors.ERROR_SAVEDATA_SIZES_NO_DATA;                                  }  #else  									SceKernelError = SceKernelErrors.ERROR_SAVEDATA_SIZES_NO_DATA;  #endif                              }                          }                            // Utility data size.                          // Gets the size of the data to be saved in the Memory Stick.                          // If null' the size is ignored and no error is returned.                          {                              var SizeRequiredSpaceInfo =                                  (SizeRequiredSpaceInfo*) Params.utilityDataAddr.GetPointer<SizeRequiredSpaceInfo>(                                      Memory);                              if (SizeRequiredSpaceInfo != null)                              {                                  long RequiredSize = 0;                                  RequiredSize += Params.Icon0FileData.Size;                                  RequiredSize += Params.Icon1FileData.Size;                                  RequiredSize += Params.Pic1FileData.Size;                                  RequiredSize += Params.Snd0FileData.Size;                                  RequiredSize += Params.DataSize;                                    SizeRequiredSpaceInfo->RequiredSpaceSectors =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' SectorSize);                                  SizeRequiredSpaceInfo->RequiredSpaceKb =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' 1024);                                  SizeRequiredSpaceInfo->RequiredSpace32KB =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' 32 * 1024);                                    SizeRequiredSpaceInfo->RequiredSpaceString =                                      (SizeRequiredSpaceInfo->RequiredSpaceKb) + "KB";                                  SizeRequiredSpaceInfo->RequiredSpace32KBString =                                      (SizeRequiredSpaceInfo->RequiredSpace32KB) + "KB";                              }                          }                            if (SceKernelError != SceKernelErrors.ERROR_OK) throw (new SceKernelException(SceKernelError));                      }                          break;                      case PspUtilitySavedataMode.List:                      {                          var ListRequest = (ListRequest*) Params.idListAddr.GetPointer<ListRequest>(Memory);                          ListRequest->NumEntriesReaded = 0;                      }                          break;                      case PspUtilitySavedataMode.GetSize:                      {                          //Params.DataSize                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_MEMSTICK));                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_DATA));                          Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.GetSize");                      }                          break;                      case PspUtilitySavedataMode.Read:                      case PspUtilitySavedataMode.ReadSecure:                      {                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_DATA));                          Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.Read");                      }                          break;                      default:                          Console.Error.WriteLine("sceUtilitySavedataInitStart: Unsupported mode: " + Params.Mode);                          Debug.Fail("sceUtilitySavedataInitStart: Unsupported mode: " + Params.Mode);                          throw (new SceKernelException((SceKernelErrors) (-1)));                      //break;                  }                  //throw(new NotImplementedException());                    Params.Base.Result = SceKernelErrors.ERROR_OK;              }              catch (SceKernelException SceKernelException)              {                  Params.Base.Result = SceKernelException.SceKernelError;              }              finally              {                  CurrentDialogStep = DialogStepEnum.SUCCESS;              }
Magic Number,CSPspEmu.Hle.Modules.utility,sceUtility,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utility\sceUtility.cs,sceUtilitySavedataInitStart,The following statement contains a magic number: try              {                  switch (Params.Mode)                  {                      case PspUtilitySavedataMode.Autoload:                      case PspUtilitySavedataMode.Load:                      case PspUtilitySavedataMode.ListLoad:                      {                          try                          {                              Memory.WriteBytes(                                  Params.DataBufPointer'                                  HleIoManager.HleIoWrapper.ReadBytes(SaveDataBin)                              );                          }                          catch (IOException)                          {                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_LOAD_NO_DATA));                          }                          catch (Exception Exception)                          {                              Console.WriteLine(Exception);                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_LOAD_ACCESS_ERROR));                          }                      }                          break;                      case PspUtilitySavedataMode.Autosave:                      case PspUtilitySavedataMode.Save:                      case PspUtilitySavedataMode.ListSave:                      {                          try                          {                              HleIoManager.HleIoWrapper.Mkdir(SavePathFolder' SceMode.All);                                HleIoManager.HleIoWrapper.WriteBytes(                                  SaveDataBin'                                  Memory.ReadBytes(Params.DataBufPointer' Params.DataSize)                              );                                Save(Params.Icon0FileData' SaveIcon0);                              Save(Params.Pic1FileData' SavePic1);                              //Save(Params.SfoParam' SavePic1);                          }                          catch (Exception Exception)                          {                              Console.Error.WriteLine(Exception);                              throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_SAVE_ACCESS_ERROR));                          }                      }                          break;                        // "METAL SLUG XX" outputs the following on stdout after calling mode 8 (PspUtilitySavedataMode.Sizes):                      //                      // ------ SIZES ------                      // ---------- savedata result ----------                      // result = 0x801103c7                      //                      // bind : un used(0x0).                      //                      // -- dir name --                      // title id : ULUS10495                      // user  id : METALSLUGXX                      //                      // ms free size                      //   cluster size(byte) : 32768 byte                      //   free cluster num   : 32768                      //   free size(KB)      : 1048576 KB                      //   free size(string)  : "1 GB"                      //                      // ms data size(titleId=ULUS10495' userId=METALSLUGXX)                      //   cluster num        : 0                      //   size (KB)          : 0 KB                      //   size (string)      : "0 KB"                      //   size (32KB)        : 0 KB                      //   size (32KB string) : "0 KB"                      //                      // utility data size                      //   cluster num        : 13                      //   size (KB)          : 416 KB                      //   size (string)      : "416 KB"                      //   size (32KB)        : 416 KB                      //   size (32KB string) : "416 KB"                      // error: SCE_UTILITY_SAVEDATA_TYPE_SIZES return 801103c7                      case PspUtilitySavedataMode.Sizes:                      {                          SceKernelErrors SceKernelError = SceKernelErrors.ERROR_OK;                            //Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.Sizes");                            uint SectorSize = 1024;                          uint FreeSize = 32 * 1024 * 1024; // 32 MB                          uint UsedSize = 0;                            // MS free size.                          // Gets the ammount of free space in the Memory Stick. If null'                          // the size is ignored and no error is returned.                          {                              var SizeFreeInfo = (SizeFreeInfo*) Params.msFreeAddr.GetPointer<SizeFreeInfo>(Memory);                              SizeFreeInfo->SectorSize = SectorSize;                              SizeFreeInfo->FreeSectors = FreeSize / SectorSize;                              SizeFreeInfo->FreeKb = FreeSize / 1024;                                SizeFreeInfo->FreeKbString = (SizeFreeInfo->FreeKb) + "KB";                          }                            // MS data size.                          // Gets the size of the data already saved in the Memory Stick.                          // If null' the size is ignored and no error is returned.                          {                              var SizeUsedInfo = (SizeUsedInfo*) Params.msDataAddr.GetPointer<SizeUsedInfo>(Memory);                                if (SizeUsedInfo != null)                              {  #if true                                  if (true)                                  {                                      Console.WriteLine(SizeUsedInfo->saveName);                                      Console.WriteLine(SizeUsedInfo->gameName);                                        SizeUsedInfo->UsedKb = UsedSize / 1024;                                      SizeUsedInfo->UsedKb32 = UsedSize / (32 * 1024);                                        SizeUsedInfo->UsedKbString = (SizeUsedInfo->UsedKb) + "KB";                                      SizeUsedInfo->UsedKb32String = (SizeUsedInfo->UsedKb32) + "KB";                                  }                                  else                                  {                                      SceKernelError = SceKernelErrors.ERROR_SAVEDATA_SIZES_NO_DATA;                                  }  #else  									SceKernelError = SceKernelErrors.ERROR_SAVEDATA_SIZES_NO_DATA;  #endif                              }                          }                            // Utility data size.                          // Gets the size of the data to be saved in the Memory Stick.                          // If null' the size is ignored and no error is returned.                          {                              var SizeRequiredSpaceInfo =                                  (SizeRequiredSpaceInfo*) Params.utilityDataAddr.GetPointer<SizeRequiredSpaceInfo>(                                      Memory);                              if (SizeRequiredSpaceInfo != null)                              {                                  long RequiredSize = 0;                                  RequiredSize += Params.Icon0FileData.Size;                                  RequiredSize += Params.Icon1FileData.Size;                                  RequiredSize += Params.Pic1FileData.Size;                                  RequiredSize += Params.Snd0FileData.Size;                                  RequiredSize += Params.DataSize;                                    SizeRequiredSpaceInfo->RequiredSpaceSectors =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' SectorSize);                                  SizeRequiredSpaceInfo->RequiredSpaceKb =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' 1024);                                  SizeRequiredSpaceInfo->RequiredSpace32KB =                                      (uint) MathUtils.RequiredBlocks(RequiredSize' 32 * 1024);                                    SizeRequiredSpaceInfo->RequiredSpaceString =                                      (SizeRequiredSpaceInfo->RequiredSpaceKb) + "KB";                                  SizeRequiredSpaceInfo->RequiredSpace32KBString =                                      (SizeRequiredSpaceInfo->RequiredSpace32KB) + "KB";                              }                          }                            if (SceKernelError != SceKernelErrors.ERROR_OK) throw (new SceKernelException(SceKernelError));                      }                          break;                      case PspUtilitySavedataMode.List:                      {                          var ListRequest = (ListRequest*) Params.idListAddr.GetPointer<ListRequest>(Memory);                          ListRequest->NumEntriesReaded = 0;                      }                          break;                      case PspUtilitySavedataMode.GetSize:                      {                          //Params.DataSize                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_MEMSTICK));                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_DATA));                          Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.GetSize");                      }                          break;                      case PspUtilitySavedataMode.Read:                      case PspUtilitySavedataMode.ReadSecure:                      {                          //throw (new SceKernelException(SceKernelErrors.ERROR_SAVEDATA_RW_NO_DATA));                          Console.Error.WriteLine("Not Implemented: sceUtilitySavedataInitStart.Read");                      }                          break;                      default:                          Console.Error.WriteLine("sceUtilitySavedataInitStart: Unsupported mode: " + Params.Mode);                          Debug.Fail("sceUtilitySavedataInitStart: Unsupported mode: " + Params.Mode);                          throw (new SceKernelException((SceKernelErrors) (-1)));                      //break;                  }                  //throw(new NotImplementedException());                    Params.Base.Result = SceKernelErrors.ERROR_OK;              }              catch (SceKernelException SceKernelException)              {                  Params.Base.Result = SceKernelException.SceKernelError;              }              finally              {                  CurrentDialogStep = DialogStepEnum.SUCCESS;              }
Magic Number,CSPspEmu.Hle.Modules.utility,sceUtility,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utility\sceUtility.cs,_sceUtilityGetSystemParamInt,The following statement contains a magic number: switch (id)              {                  case PSP_SYSTEMPARAM_ID.INT_ADHOC_CHANNEL: return (int) HleConfig.AdhocChannel;                  case PSP_SYSTEMPARAM_ID.INT_WLAN_POWERSAVE: return (int) HleConfig.WlanPowersave;                  case PSP_SYSTEMPARAM_ID.INT_DATE_FORMAT: return (int) HleConfig.DateFormat;                  case PSP_SYSTEMPARAM_ID.INT_TIME_FORMAT: return (int) HleConfig.TimeFormat;                  case PSP_SYSTEMPARAM_ID.INT_TIMEZONE: return -5 * 60;                  case PSP_SYSTEMPARAM_ID.INT_DAYLIGHTSAVINGS: return (int) HleConfig.DaylightSavings;                  case PSP_SYSTEMPARAM_ID.INT_LANGUAGE: return (int) HleConfig.Language;                  case PSP_SYSTEMPARAM_ID.INT_BUTTON_PREFERENCE: return (int) HleConfig.ConfirmButton;                  default: throw (new SceKernelException(SceKernelErrors.PSP_SYSTEMPARAM_RETVAL));              }
Magic Number,CSPspEmu.Hle.Modules.utility,sceUtility,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utility\sceUtility.cs,_sceUtilityGetSystemParamInt,The following statement contains a magic number: switch (id)              {                  case PSP_SYSTEMPARAM_ID.INT_ADHOC_CHANNEL: return (int) HleConfig.AdhocChannel;                  case PSP_SYSTEMPARAM_ID.INT_WLAN_POWERSAVE: return (int) HleConfig.WlanPowersave;                  case PSP_SYSTEMPARAM_ID.INT_DATE_FORMAT: return (int) HleConfig.DateFormat;                  case PSP_SYSTEMPARAM_ID.INT_TIME_FORMAT: return (int) HleConfig.TimeFormat;                  case PSP_SYSTEMPARAM_ID.INT_TIMEZONE: return -5 * 60;                  case PSP_SYSTEMPARAM_ID.INT_DAYLIGHTSAVINGS: return (int) HleConfig.DaylightSavings;                  case PSP_SYSTEMPARAM_ID.INT_LANGUAGE: return (int) HleConfig.Language;                  case PSP_SYSTEMPARAM_ID.INT_BUTTON_PREFERENCE: return (int) HleConfig.ConfirmButton;                  default: throw (new SceKernelException(SceKernelErrors.PSP_SYSTEMPARAM_RETVAL));              }
Magic Number,CSPspEmu.Hle.Modules.utils,UtilsForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utils\UtilsForUser.cs,sceKernelLibcGettimeofday,The following statement contains a magic number: if (TimeVal != null)              {                  PspRtc.Update();                  ulong MicroSeconds = (ulong) (PspRtc.Elapsed.GetTotalMicroseconds());                  const ulong MicroSecondsInASecond = 1000 * 1000;                  TimeVal->Seconds = (uint) (MicroSeconds / MicroSecondsInASecond);                  TimeVal->Microseconds = (uint) (MicroSeconds % MicroSecondsInASecond);                  //TimeVal->Seconds = 0;                  //TimeVal->Microseconds = 0;                  //Console.Error.WriteLine("aaaaaaaaaaaaaaaaaaaaaaaaa {0}:{1}"' TimeVal->Seconds' TimeVal->Microseconds);              }
Magic Number,CSPspEmu.Hle.Modules.utils,UtilsForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utils\UtilsForUser.cs,sceKernelLibcGettimeofday,The following statement contains a magic number: if (TimeVal != null)              {                  PspRtc.Update();                  ulong MicroSeconds = (ulong) (PspRtc.Elapsed.GetTotalMicroseconds());                  const ulong MicroSecondsInASecond = 1000 * 1000;                  TimeVal->Seconds = (uint) (MicroSeconds / MicroSecondsInASecond);                  TimeVal->Microseconds = (uint) (MicroSeconds % MicroSecondsInASecond);                  //TimeVal->Seconds = 0;                  //TimeVal->Microseconds = 0;                  //Console.Error.WriteLine("aaaaaaaaaaaaaaaaaaaaaaaaa {0}:{1}"' TimeVal->Seconds' TimeVal->Microseconds);              }
Magic Number,CSPspEmu.Hle.Modules.utils,UtilsForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utils\UtilsForUser.cs,sceKernelUtilsMt19937Init,The following statement contains a magic number: fixed (uint* State = Context.State)              {                  State[0] = Seed;                    for (int n = 1; n < SceKernelUtilsMt19937Context.MT_N; n++)                  {                      State[n] = (uint) (1812433253 * (State[n - 1] ^ (State[n - 1] >> 30)) + n);                  }                    Context.Count = 0;                    for (int n = 0; n < SceKernelUtilsMt19937Context.MT_N; n++)                  {                      sceKernelUtilsMt19937UInt(ref Context);                  }                    return 0;              }
Magic Number,CSPspEmu.Hle.Modules.utils,UtilsForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utils\UtilsForUser.cs,sceKernelUtilsMt19937Init,The following statement contains a magic number: fixed (uint* State = Context.State)              {                  State[0] = Seed;                    for (int n = 1; n < SceKernelUtilsMt19937Context.MT_N; n++)                  {                      State[n] = (uint) (1812433253 * (State[n - 1] ^ (State[n - 1] >> 30)) + n);                  }                    Context.Count = 0;                    for (int n = 0; n < SceKernelUtilsMt19937Context.MT_N; n++)                  {                      sceKernelUtilsMt19937UInt(ref Context);                  }                    return 0;              }
Magic Number,CSPspEmu.Hle.Modules.utils,UtilsForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utils\UtilsForUser.cs,sceKernelUtilsMt19937UInt,The following statement contains a magic number: fixed (uint* State = Context.State)              {                  uint* CurrentPointer;                  uint Current' Next;                  uint v0;                  bool currentPosIsLess =                      Context.Count < (SceKernelUtilsMt19937Context.MT_N - SceKernelUtilsMt19937Context.MT_M);                  CurrentPointer = &State[Context.Count];                    // Current Value                  Current = *CurrentPointer;                    // Next Value                  Context.Count = (Context.Count + 1) % SceKernelUtilsMt19937Context.MT_N;                  Next = State[Context.Count];                    v0 = Current ^ (Current >> 11);                  v0 ^= ((v0 << 7) & 0x9D2C5680);                  v0 ^= ((v0 << 15) & 0xEFC60000);                    var Mix = ((Current & 0x80000000) | (Next & 0x7FFFFFFF)) >> 1;                    if ((Next & 1) != 0) Current ^= 0x9908B0DF;                  Mix ^= *(                      currentPosIsLess                          ? &CurrentPointer[+SceKernelUtilsMt19937Context.MT_M]                          : &CurrentPointer[-(SceKernelUtilsMt19937Context.MT_N - SceKernelUtilsMt19937Context.MT_M)]                  );                  *CurrentPointer = Mix;                    return v0 ^ (v0 >> 18);              }
Magic Number,CSPspEmu.Hle.Modules.utils,UtilsForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utils\UtilsForUser.cs,sceKernelUtilsMt19937UInt,The following statement contains a magic number: fixed (uint* State = Context.State)              {                  uint* CurrentPointer;                  uint Current' Next;                  uint v0;                  bool currentPosIsLess =                      Context.Count < (SceKernelUtilsMt19937Context.MT_N - SceKernelUtilsMt19937Context.MT_M);                  CurrentPointer = &State[Context.Count];                    // Current Value                  Current = *CurrentPointer;                    // Next Value                  Context.Count = (Context.Count + 1) % SceKernelUtilsMt19937Context.MT_N;                  Next = State[Context.Count];                    v0 = Current ^ (Current >> 11);                  v0 ^= ((v0 << 7) & 0x9D2C5680);                  v0 ^= ((v0 << 15) & 0xEFC60000);                    var Mix = ((Current & 0x80000000) | (Next & 0x7FFFFFFF)) >> 1;                    if ((Next & 1) != 0) Current ^= 0x9908B0DF;                  Mix ^= *(                      currentPosIsLess                          ? &CurrentPointer[+SceKernelUtilsMt19937Context.MT_M]                          : &CurrentPointer[-(SceKernelUtilsMt19937Context.MT_N - SceKernelUtilsMt19937Context.MT_M)]                  );                  *CurrentPointer = Mix;                    return v0 ^ (v0 >> 18);              }
Magic Number,CSPspEmu.Hle.Modules.utils,UtilsForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utils\UtilsForUser.cs,sceKernelUtilsMt19937UInt,The following statement contains a magic number: fixed (uint* State = Context.State)              {                  uint* CurrentPointer;                  uint Current' Next;                  uint v0;                  bool currentPosIsLess =                      Context.Count < (SceKernelUtilsMt19937Context.MT_N - SceKernelUtilsMt19937Context.MT_M);                  CurrentPointer = &State[Context.Count];                    // Current Value                  Current = *CurrentPointer;                    // Next Value                  Context.Count = (Context.Count + 1) % SceKernelUtilsMt19937Context.MT_N;                  Next = State[Context.Count];                    v0 = Current ^ (Current >> 11);                  v0 ^= ((v0 << 7) & 0x9D2C5680);                  v0 ^= ((v0 << 15) & 0xEFC60000);                    var Mix = ((Current & 0x80000000) | (Next & 0x7FFFFFFF)) >> 1;                    if ((Next & 1) != 0) Current ^= 0x9908B0DF;                  Mix ^= *(                      currentPosIsLess                          ? &CurrentPointer[+SceKernelUtilsMt19937Context.MT_M]                          : &CurrentPointer[-(SceKernelUtilsMt19937Context.MT_N - SceKernelUtilsMt19937Context.MT_M)]                  );                  *CurrentPointer = Mix;                    return v0 ^ (v0 >> 18);              }
Magic Number,CSPspEmu.Hle.Modules.utils,UtilsForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utils\UtilsForUser.cs,sceKernelUtilsMt19937UInt,The following statement contains a magic number: fixed (uint* State = Context.State)              {                  uint* CurrentPointer;                  uint Current' Next;                  uint v0;                  bool currentPosIsLess =                      Context.Count < (SceKernelUtilsMt19937Context.MT_N - SceKernelUtilsMt19937Context.MT_M);                  CurrentPointer = &State[Context.Count];                    // Current Value                  Current = *CurrentPointer;                    // Next Value                  Context.Count = (Context.Count + 1) % SceKernelUtilsMt19937Context.MT_N;                  Next = State[Context.Count];                    v0 = Current ^ (Current >> 11);                  v0 ^= ((v0 << 7) & 0x9D2C5680);                  v0 ^= ((v0 << 15) & 0xEFC60000);                    var Mix = ((Current & 0x80000000) | (Next & 0x7FFFFFFF)) >> 1;                    if ((Next & 1) != 0) Current ^= 0x9908B0DF;                  Mix ^= *(                      currentPosIsLess                          ? &CurrentPointer[+SceKernelUtilsMt19937Context.MT_M]                          : &CurrentPointer[-(SceKernelUtilsMt19937Context.MT_N - SceKernelUtilsMt19937Context.MT_M)]                  );                  *CurrentPointer = Mix;                    return v0 ^ (v0 >> 18);              }
Magic Number,CSPspEmu.Hle.Modules.utils,UtilsForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utils\UtilsForUser.cs,sceKernelUtilsSha1Digest,The following statement contains a magic number: PointerUtils.Memcpy(                  Digest'                  SHA1.Create().ComputeHash(PointerUtils.PointerToByteArray(Data' (int) Size))'                  20              );
Magic Number,CSPspEmu.Hle.Modules.wlan,sceWlanDrv,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\wlan\sceWlanDrv_lib.cs,sceWlanGetEtherAddr,The following statement contains a magic number: foreach (var ThisNetworkInterface in NetworkInterface.GetAllNetworkInterfaces())              {                  if (ThisNetworkInterface.OperationalStatus == OperationalStatus.Up)                  {                      var Bytes = ThisNetworkInterface.GetPhysicalAddress().GetAddressBytes();                      for (int n = 0; n < 6; n++) EthernetAddress[n] = Bytes[n];                        return 0;                  }              }
Missing Default,CSPspEmu.Hle.Modules.iofilemgr,IoFileMgrForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\iofilemgr\IoFileMgrForUser.cs,sceIoWrite,The following switch statement is missing a default case: switch ((StdioForUser.StdHandle) FileId)                  {                      case StdioForUser.StdHandle.Out:                      case StdioForUser.StdHandle.Error:                          ConsoleUtils.SaveRestoreConsoleState(() =>                          {                              //Console.BackgroundColor = ConsoleColor.DarkGray;                              if ((StdioForUser.StdHandle) FileId == StdioForUser.StdHandle.Out)                              {                                  Console.ForegroundColor = ConsoleColor.Blue;                              }                              else                              {                                  Console.ForegroundColor = ConsoleColor.Red;                              }                              //Console.Error.WriteLine("Output: '{0}'"' PointerUtils.PtrToString(InputPointer' InputSize' Encoding.UTF8));                              Console.Error.Write("{0}"'                                  PointerUtils.PtrToString(InputPointer' InputSize' Encoding.UTF8));                          });                          return 0;                  }
Missing Default,CSPspEmu.Hle.Modules.libfont,FontBitmap,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libfont\sceLibFont.Font.cs,FontBitmap,The following switch statement is missing a default case: switch (FontPixelFormat)                  {                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_4:                          this.BitsPerPixel = 4;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_4_REV:                          this.BitsPerPixel = 4;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_8:                          this.BitsPerPixel = 8;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_24:                          this.BitsPerPixel = 24;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_32:                          this.BitsPerPixel = 32;                          break;                  }
Missing Default,CSPspEmu.Hle.Modules.libfont,FontBitmap,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\libfont\sceLibFont.Font.cs,SetPixel,The following switch statement is missing a default case: switch (FontPixelFormat)                  {                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_4:                          *WriteAddress = (byte) ((*WriteAddress & 0xF0) | ((C & 0xF) << 0));                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_4_REV:                          *WriteAddress = (byte) ((*WriteAddress & 0x0F) | ((C & 0xF) << 4));                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_8:                          *WriteAddress = Color.A;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_24:                          *(WriteAddress + 0) = Color.R;                          *(WriteAddress + 1) = Color.G;                          *(WriteAddress + 2) = Color.B;                          break;                      case sceLibFont.FontPixelFormat.PSP_FONT_PIXELFORMAT_32:                          *(WriteAddress + 0) = Color.R;                          *(WriteAddress + 1) = Color.G;                          *(WriteAddress + 2) = Color.B;                          *(WriteAddress + 3) = Color.A;                          break;                  }
Missing Default,CSPspEmu.Hle.Modules.sysmem,SysMemUserForUser,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\sysmem\SysMemUserForUser.cs,sceKernelAllocPartitionMemory,The following switch statement is missing a default case: switch (Type)              {                  case HleMemoryManager.BlockTypeEnum.HighAligned:                  case HleMemoryManager.BlockTypeEnum.LowAligned:                      Alignment = (int) Address;                      break;              }
Missing Default,CSPspEmu.Hle.Modules.utility,sceUtility,C:\repos\soywiz_cspspemu\Hle\CSPspEmu.Hle.Modules\utility\sceUtility.cs,sceUtilityMsgDialogInitStart,The following switch statement is missing a default case: switch (Result)                  {                      case Dialog.Result.Yes:                          Params->ButtonPressed = pspUtilityMsgDialogPressed.PSP_UTILITY_MSGDIALOG_RESULT_YES;                          break;                      case Dialog.Result.No:                          Params->ButtonPressed = pspUtilityMsgDialogPressed.PSP_UTILITY_MSGDIALOG_RESULT_NO;                          break;                      case Dialog.Result.Back:                          Params->ButtonPressed = pspUtilityMsgDialogPressed.PSP_UTILITY_MSGDIALOG_RESULT_BACK;                          break;                  }
