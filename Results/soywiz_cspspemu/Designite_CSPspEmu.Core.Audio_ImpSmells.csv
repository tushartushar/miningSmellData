Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CSPspEmu.Core.Audio.Impl.WaveOut.WaveLib,WaveStream,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\WaveOut\WaveLib\WaveStream.cs,ReadHeader,Cyclomatic complexity of the method is 8
Long Parameter List,CSPspEmu.Core.Audio.Impl.Alsa,Alsa,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\Alsa\Alsa.cs,snd_pcm_open_lconf,The method has 5 parameters. Parameters: playback_handle' name' stream' mode' lconf
Long Parameter List,CSPspEmu.Core.Audio.Impl.WaveOut.WaveLib,WaveInBuffer,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\WaveOut\WaveLib\WaveIn.cs,WaveInProc,The method has 5 parameters. Parameters: hdrvr' uMsg' dwUser' wavhdr' dwParam2
Long Parameter List,CSPspEmu.Core.Audio.Impl.WaveOut.WaveLib,WaveInRecorder,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\WaveOut\WaveLib\WaveIn.cs,WaveInRecorder,The method has 5 parameters. Parameters: device' format' bufferSize' bufferCount' doneProc
Long Parameter List,CSPspEmu.Core.Audio.Impl.WaveOut.WaveLib,WaveNative,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\WaveOut\WaveLib\WaveNative.cs,waveOutOpen,The method has 6 parameters. Parameters: hWaveOut' uDeviceId' lpFormat' dwCallback' dwInstance' dwFlags
Long Parameter List,CSPspEmu.Core.Audio.Impl.WaveOut.WaveLib,WaveNative,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\WaveOut\WaveLib\WaveNative.cs,waveInOpen,The method has 6 parameters. Parameters: phwi' uDeviceId' lpFormat' dwCallback' dwInstance' dwFlags
Long Parameter List,CSPspEmu.Core.Audio.Impl.WaveOut.WaveLib,WaveOutBuffer,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\WaveOut\WaveLib\WaveOut.cs,WaveOutProc,The method has 5 parameters. Parameters: hdrvr' uMsg' dwUser' wavhdr' dwParam2
Long Parameter List,CSPspEmu.Core.Audio.Impl.WaveOut.WaveLib,WaveOutPlayer,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\WaveOut\WaveLib\WaveOut.cs,WaveOutPlayer,The method has 5 parameters. Parameters: device' format' bufferSize' bufferCount' fillProc
Long Statement,CSPspEmu.Core.Audio,PspAudioChannel,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\PspAudioChannel.cs,ToString,The length of the statement  "                $"AudioChannel(Index={Index}'Frequency={Frequency}'Format={Format}'Channels={NumberOfChannels}'SampleCount={SampleCount})"; " is 123.
Empty Catch Block,CSPspEmu.Core.Audio.Impl.WaveOut.WaveLib,WaveInBuffer,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\WaveOut\WaveLib\WaveIn.cs,WaveInProc,The method has an empty catch block.
Magic Number,CSPspEmu.Core.Audio.Impl.Alsa,AudioAlsaImpl,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\Alsa\AudioAlsaImpl.cs,AudioAlsaImpl,The following statement contains a magic number: try              {                  fixed (IntPtr* playbackHandlePtr = &_playbackHandle)                  fixed (IntPtr* hwParamsPtr = &_hwParams)                  {                      var rate = SampleRate;                        //int period_time = (SndOutPacketSize * 1000) / (SampleRate / 1000);                      //int buffer_time = period_time * NumBuffers;                        Assert("snd_pcm_open"'                          Alsa.snd_pcm_open(playbackHandlePtr' Device'                              Alsa.snd_pcm_stream_t.SND_PCM_LB_OPEN_PLAYBACK' 0));                      Assert("snd_pcm_hw_params_malloc"' Alsa.snd_pcm_hw_params_malloc(hwParamsPtr));                      Assert("snd_pcm_hw_params_any"' Alsa.snd_pcm_hw_params_any(_playbackHandle' _hwParams));                      Assert("snd_pcm_hw_params_set_access"'                          Alsa.snd_pcm_hw_params_set_access(_playbackHandle' _hwParams'                              Alsa.snd_pcm_access.SND_PCM_ACCESS_RW_INTERLEAVED));                      Assert("snd_pcm_hw_params_set_format"'                          Alsa.snd_pcm_hw_params_set_format(_playbackHandle' _hwParams'                              Alsa.snd_pcm_format.SND_PCM_FORMAT_S16_LE));                      Assert("snd_pcm_hw_params_set_rate_near"'                          Alsa.snd_pcm_hw_params_set_rate_near(_playbackHandle' _hwParams' &rate' null));                        //Assert("snd_pcm_hw_params_set_buffer_time_near"' Alsa.snd_pcm_hw_params_set_buffer_time_near(playback_handle' hw_params' &buffer_time' null));                      //Assert("snd_pcm_hw_params_set_period_time_near"' Alsa.snd_pcm_hw_params_set_period_time_near(playback_handle' hw_params' &period_time' null));                        Assert("snd_pcm_hw_params_set_channels"'                          Alsa.snd_pcm_hw_params_set_channels(_playbackHandle' _hwParams' Channels));                        Assert("snd_pcm_hw_params_set_periods"'                          Alsa.snd_pcm_hw_params_set_periods(_playbackHandle' _hwParams' Periods' 0));                      Assert("snd_pcm_hw_params_set_period_size"'                          Alsa.snd_pcm_hw_params_set_period_size(_playbackHandle' _hwParams' Periodsize' null));                      Assert("snd_pcm_hw_params_set_buffer_size"'                          Alsa.snd_pcm_hw_params_set_buffer_size(_playbackHandle' _hwParams' 4 * Periodsize));                        Assert("snd_pcm_hw_params"' Alsa.snd_pcm_hw_params(_playbackHandle' _hwParams));                      Assert("snd_pcm_hw_params_free"' Alsa.snd_pcm_hw_params_free(_hwParams));                  }              }              catch (Exception exception)              {                  Console.Error.WriteLine(exception);              }
Magic Number,CSPspEmu.Core.Audio.Impl.WaveOut,PspAudioWaveOutImpl,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\WaveOut\PspAudioWaveOutImpl.cs,BufferFillEventHandler,The following statement contains a magic number: if (Queue.Count > 0)              {                  short[] Result;                  while (!Queue.TryDequeue(out Result))                  {                      if (_mPlayer.Disposing) return;                  }                  Marshal.Copy(Result' 0' data' size / 2);              }              else              {                  PointerUtils.Memset((byte*) data.ToPointer()' 0' size);              }
Magic Number,CSPspEmu.Core.Audio.Impl.WaveOut,PspAudioWaveOutImpl,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\WaveOut\PspAudioWaveOutImpl.cs,Update,The following statement contains a magic number: if (_initialized)              {                  while (Queue.Count < 2)                  {                      var data = new short[BufferSize / 2];                      readStream(data);                      //for (int n = 0; n < Data.Length; n++) Console.Write(Data[n]);                      Queue.Enqueue(data);                  }              }
Magic Number,CSPspEmu.Core.Audio.Impl.WaveOut,PspAudioWaveOutImpl,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\WaveOut\PspAudioWaveOutImpl.cs,Update,The following statement contains a magic number: if (_initialized)              {                  while (Queue.Count < 2)                  {                      var data = new short[BufferSize / 2];                      readStream(data);                      //for (int n = 0; n < Data.Length; n++) Console.Write(Data[n]);                      Queue.Enqueue(data);                  }              }
Magic Number,CSPspEmu.Core.Audio.Impl.WaveOut,PspAudioWaveOutImpl,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\WaveOut\PspAudioWaveOutImpl.cs,Initialize,The following statement contains a magic number: if (_mPlayer == null)              {                  _mPlayer = new WaveOutPlayer(-1' new WaveFormat(rate: Frequency' bits: 16' channels: NumberOfChannels)'                      BufferSize' NumberOfBuffers' BufferFillEventHandler);              }
Magic Number,CSPspEmu.Core.Audio.Impl.WaveOut.WaveLib,WaveFormat,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\WaveOut\WaveLib\WaveNative.cs,WaveFormat,The following statement contains a magic number: nBlockAlign = (short) (channels * (bits / 8));
Magic Number,CSPspEmu.Core.Audio.Impl.WaveOut.WaveLib,WaveOutPlayer,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\WaveOut\WaveLib\WaveOut.cs,WaveOutPlayer,The following statement contains a magic number: _mZero = format.wBitsPerSample == 8 ? (byte) 128 : (byte) 0;
Magic Number,CSPspEmu.Core.Audio.Impl.WaveOut.WaveLib,WaveOutPlayer,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\WaveOut\WaveLib\WaveOut.cs,WaveOutPlayer,The following statement contains a magic number: _mZero = format.wBitsPerSample == 8 ? (byte) 128 : (byte) 0;
Magic Number,CSPspEmu.Core.Audio.Impl.WaveOut.WaveLib,WaveStream,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\WaveOut\WaveLib\WaveStream.cs,ReadChunk,The following statement contains a magic number: byte[] ch = new byte[4];
Magic Number,CSPspEmu.Core.Audio.Impl.WaveOut.WaveLib,WaveStream,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\WaveOut\WaveLib\WaveStream.cs,ReadHeader,The following statement contains a magic number: if (len < 16) throw new Exception("Invalid file format");
Magic Number,CSPspEmu.Core.Audio.Impl.WaveOut.WaveLib,WaveStream,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\WaveOut\WaveLib\WaveStream.cs,ReadHeader,The following statement contains a magic number: _mFormat = new WaveFormat(22050' 16' 2);
Magic Number,CSPspEmu.Core.Audio.Impl.WaveOut.WaveLib,WaveStream,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\WaveOut\WaveLib\WaveStream.cs,ReadHeader,The following statement contains a magic number: _mFormat = new WaveFormat(22050' 16' 2);
Magic Number,CSPspEmu.Core.Audio.Impl.WaveOut.WaveLib,WaveStream,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\WaveOut\WaveLib\WaveStream.cs,ReadHeader,The following statement contains a magic number: _mFormat = new WaveFormat(22050' 16' 2);
Magic Number,CSPspEmu.Core.Audio.Impl.WaveOut.WaveLib,WaveStream,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\WaveOut\WaveLib\WaveStream.cs,ReadHeader,The following statement contains a magic number: len -= 16;
Magic Number,CSPspEmu.Core.Audio,PspAudioChannel,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\PspAudioChannel.cs,Updated,The following statement contains a magic number: this.StereoSamplesBuffer = new short[SampleCount * 2];
Magic Number,CSPspEmu.Core.Audio,PspAudioChannel,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\PspAudioChannel.cs,MonoToStereo,The following statement contains a magic number: for (int n = 0; n < MonoSamples.Length; n++)              {                  StereoSamples[n * 2 + 0] = MonoSamples[n];                  StereoSamples[n * 2 + 1] = MonoSamples[n];              }
Magic Number,CSPspEmu.Core.Audio,PspAudioChannel,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\PspAudioChannel.cs,MonoToStereo,The following statement contains a magic number: for (int n = 0; n < MonoSamples.Length; n++)              {                  StereoSamples[n * 2 + 0] = MonoSamples[n];                  StereoSamples[n * 2 + 1] = MonoSamples[n];              }
Magic Number,CSPspEmu.Core.Audio,PspAudioChannel,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\PspAudioChannel.cs,Write,The following statement contains a magic number: if (SamplePointer != null)              {                  if (NumberOfChannels == 1)                  {                      int Volume = (VolumeLeft + VolumeRight) / 2;                      for (int n = 0; n < Samples.Length; n++)                      {                          Samples[n + 0] = (short) (((int) SamplePointer[n + 0] * Volume) / PspAudio.MaxVolume);                      }                  }                  else                  {                      for (int n = 0; n < Samples.Length; n += 2)                      {                          Samples[n + 0] = (short) (((int) SamplePointer[n + 0] * VolumeLeft) / PspAudio.MaxVolume);                          Samples[n + 1] = (short) (((int) SamplePointer[n + 1] * VolumeRight) / PspAudio.MaxVolume);                      }                  }              }
Magic Number,CSPspEmu.Core.Audio,PspAudioChannel,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\PspAudioChannel.cs,Write,The following statement contains a magic number: if (SamplePointer != null)              {                  if (NumberOfChannels == 1)                  {                      int Volume = (VolumeLeft + VolumeRight) / 2;                      for (int n = 0; n < Samples.Length; n++)                      {                          Samples[n + 0] = (short) (((int) SamplePointer[n + 0] * Volume) / PspAudio.MaxVolume);                      }                  }                  else                  {                      for (int n = 0; n < Samples.Length; n += 2)                      {                          Samples[n + 0] = (short) (((int) SamplePointer[n + 0] * VolumeLeft) / PspAudio.MaxVolume);                          Samples[n + 1] = (short) (((int) SamplePointer[n + 1] * VolumeRight) / PspAudio.MaxVolume);                      }                  }              }
Missing Default,CSPspEmu.Core.Audio.Impl.WaveOut.WaveLib,WaveStream,C:\repos\soywiz_cspspemu\Core\CSPspEmu.Core.Audio\Impl\WaveOut\WaveLib\WaveStream.cs,Seek,The following switch statement is missing a default case: switch (o)              {                  case SeekOrigin.Begin:                      m_Stream.Position = pos + _mDataPos;                      break;                  case SeekOrigin.Current:                      m_Stream.Seek(pos' SeekOrigin.Current);                      break;                  case SeekOrigin.End:                      m_Stream.Position = _mDataPos + _mLength - pos;                      break;              }
