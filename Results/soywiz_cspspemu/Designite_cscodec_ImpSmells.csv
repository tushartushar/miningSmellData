Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,cscodec.av,AVComponentDescriptor,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\AVComponentDescriptor.cs,AVComponentDescriptor,The method has 5 parameters. Parameters: _plane' _step_minus1' _offset_plus1' _shift' _depth_minus1
Long Parameter List,cscodec.av,AVFrame,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\AVFrame.cs,build_def_list,The method has 7 parameters. Parameters: def_base' def_offset' in_base' in_offset' len' is_long' sel
Long Parameter List,cscodec.av,AVFrame,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\AVFrame.cs,add_sorted,The method has 7 parameters. Parameters: sorted_base' sorted_offset' src_base' src_offset' len' limit' dir
Long Parameter List,cscodec.av,ImageUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\ImageUtils.cs,av_image_copy,The method has 9 parameters. Parameters: dst_base' dst_offset' dst_linesizes' src_base' src_offset' src_linesizes' pix_fmt' width' height
Long Parameter List,cscodec.av,ImageUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\ImageUtils.cs,av_image_copy_plane,The method has 8 parameters. Parameters: dst' _dst_offset' dst_linesize' src' _src_offset' src_linesize' bytewidth' height
Long Parameter List,cscodec.util,Frame,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\util\Frame.cs,Frame,The method has 5 parameters. Parameters: width' height' y' cb' cr
Long Statement,cscodec,FrameCrc,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameCrc.cs,GetFrameLine,The length of the statement  "			uint crc = BitConverter.ToUInt32(new CRC32().ComputeHash(pkt.data_base.Select(Item => (byte)Item).ToArray()' pkt.data_offset' pkt.size)' 0); " is 140.
Long Statement,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,imageFromFrame,The length of the statement  "			var BitmapData = bi.LockBits(new System.Drawing.Rectangle(0' 0' bi.Width' bi.Height)' ImageLockMode.WriteOnly' PixelFormat.Format32bppArgb); " is 140.
Magic Number,cscodec.av,AVFrame,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\AVFrame.cs,pic_as_field,The following statement contains a magic number: for (i = 0; i < 4; ++i) {  				if (parity == Constants.PICT_BOTTOM_FIELD)  					pic.data_offset[i] += pic.linesize[i];  				pic.reference = parity;  				pic.linesize[i] *= 2;  			}
Magic Number,cscodec.av,AVFrame,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\AVFrame.cs,pic_as_field,The following statement contains a magic number: for (i = 0; i < 4; ++i) {  				if (parity == Constants.PICT_BOTTOM_FIELD)  					pic.data_offset[i] += pic.linesize[i];  				pic.reference = parity;  				pic.linesize[i] *= 2;  			}
Magic Number,cscodec.av,AVFrame,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\AVFrame.cs,split_field_copy,The following statement contains a magic number: if (match != 0) {  				//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  				src.copyTo(dest);  				if (parity != Constants.PICT_FRAME)  				{  					pic_as_field(dest' parity);  					dest.pic_id *= 2;  					dest.pic_id += id_add;  				}  			}
Magic Number,cscodec.av,AVFrame,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\AVFrame.cs,build_def_list,The following statement contains a magic number: while(i[0]<len || i[1]<len){      				while(i[0]<len && !(in_base[in_offset +  i[0] ]!=null && (in_base[in_offset +  i[0] ].reference & sel)!=0))      					i[0]++;      				while(i[1]<len && !(in_base[in_offset +  i[1] ]!=null && (in_base[in_offset +  i[1] ].reference & (sel^3))!=0))      					i[1]++;      				if(i[0] < len){      					in_base[in_offset +  i[0] ].pic_id= (is_long!=0 ? i[0] : in_base[in_offset +  i[0] ].frame_num);      					split_field_copy(def_base[def_offset + index++]' in_base[in_offset +  i[0]++ ]' sel  ' 1);      				}      				if(i[1] < len){      					in_base[in_offset +  i[1] ].pic_id= (is_long!=0 ? i[1] : in_base[in_offset +  i[1] ].frame_num);      					split_field_copy(def_base[def_offset + index++]' in_base[in_offset +  i[1]++ ]' sel^3' 0);      				}      			}
Magic Number,cscodec.av,AVFrame,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\AVFrame.cs,build_def_list,The following statement contains a magic number: while(i[0]<len || i[1]<len){      				while(i[0]<len && !(in_base[in_offset +  i[0] ]!=null && (in_base[in_offset +  i[0] ].reference & sel)!=0))      					i[0]++;      				while(i[1]<len && !(in_base[in_offset +  i[1] ]!=null && (in_base[in_offset +  i[1] ].reference & (sel^3))!=0))      					i[1]++;      				if(i[0] < len){      					in_base[in_offset +  i[0] ].pic_id= (is_long!=0 ? i[0] : in_base[in_offset +  i[0] ].frame_num);      					split_field_copy(def_base[def_offset + index++]' in_base[in_offset +  i[0]++ ]' sel  ' 1);      				}      				if(i[1] < len){      					in_base[in_offset +  i[1] ].pic_id= (is_long!=0 ? i[1] : in_base[in_offset +  i[1] ].frame_num);      					split_field_copy(def_base[def_offset + index++]' in_base[in_offset +  i[1]++ ]' sel^3' 0);      				}      			}
Magic Number,cscodec.av,ImageUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\ImageUtils.cs,av_image_copy,The following statement contains a magic number: if ((desc.flags & PIX_FMT_PAL) != 0)  			{  				av_image_copy_plane(dst_base[0]' dst_offset[0]' dst_linesizes[0]' src_base[0]' src_offset[0]'  						src_linesizes[0]' width' height);  				/* copy the palette */  				Array.Copy(src_base[1]' src_offset[1]' dst_base[1]' dst_offset[1]' 4 * 256);  				// memcpy(dst_data[1]' src_data[1]' 4*256);  			}  			else  			{  				int i' planes_nb = 0;    				for (i = 0; i < desc.nb_components; i++)  				{  					planes_nb = Math.Max(planes_nb' desc.comp[i].plane + 1);  				}    				for (i = 0; i < planes_nb; i++)  				{  					int h = height;  					int bwidth = av_image_get_linesize(pix_fmt' width' i);  					  					if (i == 1 || i == 2)  					{  						h = -((-height) >> desc.log2_chroma_h);  					}    					av_image_copy_plane(  						dst_base[i]' dst_offset[i]' dst_linesizes[i]' src_base[i]' src_offset[i]'  						src_linesizes[i]' bwidth' h  					);  				}  			}
Magic Number,cscodec.av,ImageUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\ImageUtils.cs,av_image_copy,The following statement contains a magic number: if ((desc.flags & PIX_FMT_PAL) != 0)  			{  				av_image_copy_plane(dst_base[0]' dst_offset[0]' dst_linesizes[0]' src_base[0]' src_offset[0]'  						src_linesizes[0]' width' height);  				/* copy the palette */  				Array.Copy(src_base[1]' src_offset[1]' dst_base[1]' dst_offset[1]' 4 * 256);  				// memcpy(dst_data[1]' src_data[1]' 4*256);  			}  			else  			{  				int i' planes_nb = 0;    				for (i = 0; i < desc.nb_components; i++)  				{  					planes_nb = Math.Max(planes_nb' desc.comp[i].plane + 1);  				}    				for (i = 0; i < planes_nb; i++)  				{  					int h = height;  					int bwidth = av_image_get_linesize(pix_fmt' width' i);  					  					if (i == 1 || i == 2)  					{  						h = -((-height) >> desc.log2_chroma_h);  					}    					av_image_copy_plane(  						dst_base[i]' dst_offset[i]' dst_linesizes[i]' src_base[i]' src_offset[i]'  						src_linesizes[i]' bwidth' h  					);  				}  			}
Magic Number,cscodec.av,ImageUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\ImageUtils.cs,av_image_copy,The following statement contains a magic number: if ((desc.flags & PIX_FMT_PAL) != 0)  			{  				av_image_copy_plane(dst_base[0]' dst_offset[0]' dst_linesizes[0]' src_base[0]' src_offset[0]'  						src_linesizes[0]' width' height);  				/* copy the palette */  				Array.Copy(src_base[1]' src_offset[1]' dst_base[1]' dst_offset[1]' 4 * 256);  				// memcpy(dst_data[1]' src_data[1]' 4*256);  			}  			else  			{  				int i' planes_nb = 0;    				for (i = 0; i < desc.nb_components; i++)  				{  					planes_nb = Math.Max(planes_nb' desc.comp[i].plane + 1);  				}    				for (i = 0; i < planes_nb; i++)  				{  					int h = height;  					int bwidth = av_image_get_linesize(pix_fmt' width' i);  					  					if (i == 1 || i == 2)  					{  						h = -((-height) >> desc.log2_chroma_h);  					}    					av_image_copy_plane(  						dst_base[i]' dst_offset[i]' dst_linesizes[i]' src_base[i]' src_offset[i]'  						src_linesizes[i]' bwidth' h  					);  				}  			}
Magic Number,cscodec.av,ImageUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\ImageUtils.cs,av_image_get_linesize,The following statement contains a magic number: int[] max_step = new int[4];
Magic Number,cscodec.av,ImageUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\ImageUtils.cs,av_image_get_linesize,The following statement contains a magic number: int[] max_step_comp = new int[4];
Magic Number,cscodec.av,ImageUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\ImageUtils.cs,av_image_get_linesize,The following statement contains a magic number: if ((desc.flags & PIX_FMT_BITSTREAM) != 0) return (width * (desc.comp[0].step_minus1+1) + 7) >> 3;
Magic Number,cscodec.av,ImageUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\ImageUtils.cs,av_image_get_linesize,The following statement contains a magic number: if ((desc.flags & PIX_FMT_BITSTREAM) != 0) return (width * (desc.comp[0].step_minus1+1) + 7) >> 3;
Magic Number,cscodec.av,ImageUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\ImageUtils.cs,av_image_get_linesize,The following statement contains a magic number: s = (max_step_comp[plane] == 1 || max_step_comp[plane] == 2) ? desc.log2_chroma_w : 0;
Magic Number,cscodec.av,ImageUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\ImageUtils.cs,av_image_fill_max_pixsteps,The following statement contains a magic number: Arrays.Fill(max_pixsteps' 0' 4' 0);
Magic Number,cscodec.av,ImageUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\ImageUtils.cs,av_image_fill_max_pixsteps,The following statement contains a magic number: if (max_pixstep_comps != null)  			{  				// memset(max_pixstep_comps' 0' 4*sizeof(max_pixstep_comps[0]));  				Arrays.Fill(max_pixstep_comps' 0' 4' 0);  			}
Magic Number,cscodec.av,ImageUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\ImageUtils.cs,av_image_fill_max_pixsteps,The following statement contains a magic number: for (i = 0; i < 4; i++)  			{  				AVComponentDescriptor comp = (pixdesc.comp[i]);  				if ((comp.step_minus1 + 1) > max_pixsteps[comp.plane])  				{  					max_pixsteps[comp.plane] = comp.step_minus1 + 1;  					if (max_pixstep_comps != null) max_pixstep_comps[comp.plane] = i;  				}  			}
Magic Number,cscodec.av,PixFmtYUV420P,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\PixFmtYUV420P.cs,PixFmtYUV420P,The following statement contains a magic number: nb_components = 3;
Magic Number,cscodec.av,PixFmtYUV420P,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\PixFmtYUV420P.cs,PixFmtYUV420P,The following statement contains a magic number: comp = new AVComponentDescriptor[]  			{          		new AVComponentDescriptor(0' 0' 1' 0' 7)'        /* Y */          		new AVComponentDescriptor(1' 0' 1' 0' 7)'        /* U */          		new AVComponentDescriptor(2' 0' 1' 0' 7)'        /* V */          		new AVComponentDescriptor(0' 0' 0' 0' 0)'        /* Filler */  			};
Magic Number,cscodec.av,PixFmtYUV420P,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\PixFmtYUV420P.cs,PixFmtYUV420P,The following statement contains a magic number: comp = new AVComponentDescriptor[]  			{          		new AVComponentDescriptor(0' 0' 1' 0' 7)'        /* Y */          		new AVComponentDescriptor(1' 0' 1' 0' 7)'        /* U */          		new AVComponentDescriptor(2' 0' 1' 0' 7)'        /* V */          		new AVComponentDescriptor(0' 0' 0' 0' 0)'        /* Filler */  			};
Magic Number,cscodec.av,PixFmtYUV420P,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\PixFmtYUV420P.cs,PixFmtYUV420P,The following statement contains a magic number: comp = new AVComponentDescriptor[]  			{          		new AVComponentDescriptor(0' 0' 1' 0' 7)'        /* Y */          		new AVComponentDescriptor(1' 0' 1' 0' 7)'        /* U */          		new AVComponentDescriptor(2' 0' 1' 0' 7)'        /* V */          		new AVComponentDescriptor(0' 0' 0' 0' 0)'        /* Filler */  			};
Magic Number,cscodec.av,PixFmtYUV420P,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\av\PixFmtYUV420P.cs,PixFmtYUV420P,The following statement contains a magic number: comp = new AVComponentDescriptor[]  			{          		new AVComponentDescriptor(0' 0' 1' 0' 7)'        /* Y */          		new AVComponentDescriptor(1' 0' 1' 0' 7)'        /* U */          		new AVComponentDescriptor(2' 0' 1' 0' 7)'        /* V */          		new AVComponentDescriptor(0' 0' 0' 0' 0)'        /* Filler */  			};
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,imageFromFrameWithoutEdges,The following statement contains a magic number: var XEdge = (f.imageWidth - f.imageWidthWOEdge) / 2;
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,imageFromFrameWithoutEdges,The following statement contains a magic number: var YEdge = (f.imageHeight - f.imageHeightWOEdge) / 2;
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: var cr = f.data_base[2];
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec,FrameUtils,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\FrameUtils.cs,YUV2RGB,The following statement contains a magic number: for (int y = 0; y < f.imageHeight; y++)  			{  				int lineOffLuma = y * stride;  				int lineOffChroma = (y >> 1) * strideChroma;    				for (int x = 0; x < f.imageWidth; x++)  				{  					int c = luma[lineOffLuma + x] - 16;  					int d = cb[lineOffChroma + (x >> 1)] - 128;  					int e = cr[lineOffChroma + (x >> 1)] - 128;    					byte red = (byte)MathUtils.Clamp((298 * c + 409 * e + 128) >> 8' 0' 255);  					byte green = (byte)MathUtils.Clamp((298 * c - 100 * d - 208 * e + 128) >> 8' 0' 255);  					byte blue = (byte)MathUtils.Clamp((298 * c + 516 * d + 128) >> 8' 0' 255);  					byte alpha = 255;    					rgb[lineOffLuma + x] = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);  				}  			}
Magic Number,cscodec.util,Arrays,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\util\Arrays.cs,ConvertDimensional,The following statement contains a magic number: int Length3 = In.GetLength(2);
Magic Number,cscodec.util,HashUtil,C:\repos\soywiz_cspspemu\Libraries\cscodec\cscodec\cscodec\util\HashUtil.cs,hash,The following statement contains a magic number: return firstTerm(aSeed)  + (int)( aLong ^ (long)(((ulong)aLong) >> 32) );
