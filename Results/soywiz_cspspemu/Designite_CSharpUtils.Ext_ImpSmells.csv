Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CSharpUtils.Ext.Compression,Huffman,C:\repos\soywiz_cspspemu\Libraries\CSharpUtils\CSharpUtils\CSharpUtils.Ext\Compression\Huffman.cs,BuildTable,Cyclomatic complexity of the method is 8
Complex Method,CSharpUtils.Ext.Compression.Lz,Matcher,C:\repos\soywiz_cspspemu\Libraries\CSharpUtils\CSharpUtils\CSharpUtils.Ext\Compression\Lz\Matcher.cs,HandleLzRle,Cyclomatic complexity of the method is 9
Long Parameter List,CSharpUtils.Ext.Compression.Lz,LzMatcher,C:\repos\soywiz_cspspemu\Libraries\CSharpUtils\CSharpUtils\CSharpUtils.Ext\Compression\Lz\LzMatcher.cs,LzMatcher,The method has 6 parameters. Parameters: data' offset' maxOffset' minSize' maxSize' allowOverlapping
Long Parameter List,CSharpUtils.Ext.Compression.Lz,Matcher,C:\repos\soywiz_cspspemu\Libraries\CSharpUtils\CSharpUtils\CSharpUtils.Ext\Compression\Lz\Matcher.cs,HandleLz,The method has 8 parameters. Parameters: input' startPosition' minLzLength' maxLzLength' maxLzDistance' allowOverlapping' byteCallback' lzCallback
Long Parameter List,CSharpUtils.Ext.Compression.Lz,Matcher,C:\repos\soywiz_cspspemu\Libraries\CSharpUtils\CSharpUtils\CSharpUtils.Ext\Compression\Lz\Matcher.cs,HandleLzRle,The method has 11 parameters. Parameters: input' startPosition' minLzLength' maxLzLength' maxLzDistance' minRleLength' maxRleLength' allowOverlapping' byteCallback' lzCallback' rleCallback
Long Parameter List,CSharpUtils.Ext,Crc32,C:\repos\soywiz_cspspemu\Libraries\CSharpUtils\CSharpUtils\CSharpUtils.Ext\Crc32.cs,CalculateHash,The method has 5 parameters. Parameters: table' seed' buffer' start' size
Long Statement,CSharpUtils.Ext.Compression,Node,C:\repos\soywiz_cspspemu\Libraries\CSharpUtils\CSharpUtils\CSharpUtils.Ext\Compression\Huffman.cs,ToString,The length of the statement  "                    $"(Index={Index}' Unused={Unused}' UsageCount={UsageCount}' HasChilds={HasChilds}' Parent={Parent?.Index ?? -1}' Left={LeftChild?.Index ?? -1}' Right={RightChild?.Index ?? -1})"; " is 178.
Long Statement,CSharpUtils.Ext.Compression.Lz,LzMatcher,C:\repos\soywiz_cspspemu\Libraries\CSharpUtils\CSharpUtils\CSharpUtils.Ext\Compression\Lz\LzMatcher.cs,FindMaxSequence,The length of the statement  "                            Console.WriteLine("{0}' {1}' {2}' {3}: {4:X8}' {5:X8}' {6:X8}"' MatchedLength' MinSize' MaxSize' LocalMaxSize' Hash' Hash1' Hash2); " is 131.
Magic Number,CSharpUtils.Ext.Compression,Huffman,C:\repos\soywiz_cspspemu\Libraries\CSharpUtils\CSharpUtils\CSharpUtils.Ext\Compression\Huffman.cs,BuildTable,The following statement contains a magic number: var nodes = new Node[usageTable.Length * 2 - 1];
Magic Number,CSharpUtils.Ext.Compression,Huffman,C:\repos\soywiz_cspspemu\Libraries\CSharpUtils\CSharpUtils\CSharpUtils.Ext\Compression\Huffman.cs,CalculateUsageTable,The following statement contains a magic number: var usageTable = new uint[256];
Magic Number,CSharpUtils.Ext.Compression.Zip,ZipArchive,C:\repos\soywiz_cspspemu\Libraries\CSharpUtils\CSharpUtils\CSharpUtils.Ext\Compression\Zip\ZipArchive.cs,ReadRecord,The following statement contains a magic number: Debug.Assert(_stream.ReadStringz(2) == "PK");
Magic Number,CSharpUtils.Ext,Crc32,C:\repos\soywiz_cspspemu\Libraries\CSharpUtils\CSharpUtils\CSharpUtils.Ext\Crc32.cs,InitializeTable,The following statement contains a magic number: var createTable = new uint[256];
Magic Number,CSharpUtils.Ext,Crc32,C:\repos\soywiz_cspspemu\Libraries\CSharpUtils\CSharpUtils\CSharpUtils.Ext\Crc32.cs,InitializeTable,The following statement contains a magic number: for (var i = 0; i < 256; i++)              {                  var entry = (uint) i;                  for (var j = 0; j < 8; j++)                      if ((entry & 1) == 1)                          entry = (entry >> 1) ^ polynomial;                      else                          entry = entry >> 1;                  createTable[i] = entry;              }
Magic Number,CSharpUtils.Ext,Crc32,C:\repos\soywiz_cspspemu\Libraries\CSharpUtils\CSharpUtils\CSharpUtils.Ext\Crc32.cs,InitializeTable,The following statement contains a magic number: for (var i = 0; i < 256; i++)              {                  var entry = (uint) i;                  for (var j = 0; j < 8; j++)                      if ((entry & 1) == 1)                          entry = (entry >> 1) ^ polynomial;                      else                          entry = entry >> 1;                  createTable[i] = entry;              }
Magic Number,CSharpUtils.Ext,Crc32,C:\repos\soywiz_cspspemu\Libraries\CSharpUtils\CSharpUtils\CSharpUtils.Ext\Crc32.cs,CalculateHash,The following statement contains a magic number: for (int i = start; i < size; i++)                  unchecked                  {                      crc = (crc >> 8) ^ table[buffer[i] ^ crc & 0xff];                  }
Magic Number,CSharpUtils.Ext,Crc32,C:\repos\soywiz_cspspemu\Libraries\CSharpUtils\CSharpUtils\CSharpUtils.Ext\Crc32.cs,UintToBigEndianBytes,The following statement contains a magic number: return new[]              {                  (byte) ((x >> 24) & 0xff)'                  (byte) ((x >> 16) & 0xff)'                  (byte) ((x >> 8) & 0xff)'                  (byte) (x & 0xff)              };
Magic Number,CSharpUtils.Ext,Crc32,C:\repos\soywiz_cspspemu\Libraries\CSharpUtils\CSharpUtils\CSharpUtils.Ext\Crc32.cs,UintToBigEndianBytes,The following statement contains a magic number: return new[]              {                  (byte) ((x >> 24) & 0xff)'                  (byte) ((x >> 16) & 0xff)'                  (byte) ((x >> 8) & 0xff)'                  (byte) (x & 0xff)              };
Magic Number,CSharpUtils.Ext,Crc32,C:\repos\soywiz_cspspemu\Libraries\CSharpUtils\CSharpUtils\CSharpUtils.Ext\Crc32.cs,UintToBigEndianBytes,The following statement contains a magic number: return new[]              {                  (byte) ((x >> 24) & 0xff)'                  (byte) ((x >> 16) & 0xff)'                  (byte) ((x >> 8) & 0xff)'                  (byte) (x & 0xff)              };
Magic Number,CSharpUtils.Ext.SpaceAssigner,SpaceAssigner1D,C:\repos\soywiz_cspspemu\Libraries\CSharpUtils\CSharpUtils\CSharpUtils.Ext\SpaceAssigner\SpaceAssigner1D.cs,PerformCombine,The following statement contains a magic number: if (AvailableSpaces.Count >= 2)              {                  do                  {                      found = false;                        var previousSpace = AvailableSpaces.ElementAt(0);                        foreach (var currentSpace in AvailableSpaces.Skip(1))                      {                          // Contiguous.                          if (previousSpace.Max == currentSpace.Min)                          {                              AvailableSpaces.Remove(previousSpace);                              AvailableSpaces.Remove(currentSpace);                              AvailableSpaces.Add(new Space(previousSpace.Min' currentSpace.Max));                              found = true;                              break;                          }                            previousSpace = currentSpace;                      }                  } while (found);              }
Magic Number,CSharpUtils.Ext.SpaceAssigner,SpaceAssigner1D,C:\repos\soywiz_cspspemu\Libraries\CSharpUtils\CSharpUtils\CSharpUtils.Ext\SpaceAssigner\SpaceAssigner1D.cs,Substract,The following statement contains a magic number: var maxSteps = AvailableSpaces.Count + 10;
