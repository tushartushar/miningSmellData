Implementation smell,Namespace,Class,File,Method,Description
Long Method,Blade.Compiler.Translation,ClassTranslator,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Translation\Declaration\ClassTranslator.cs,Translate,The method has 100 lines of code.
Complex Method,Blade.Compiler.Models,ModelRegistry,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Models\ModelRegistry.cs,CreateDefinition,Cyclomatic complexity of the method is 14
Complex Method,Blade.Compiler.Transformation.CSharp,Transformer,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Transformation\CSharp\Declaration\InterfaceDeclaration.Transformer.cs,VisitClassDeclaration,Cyclomatic complexity of the method is 8
Complex Method,Blade.Compiler.Transformation.CSharp,Transformer,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Transformation\CSharp\Declaration\InterfaceDeclaration.Transformer.cs,VisitPredefinedType,Cyclomatic complexity of the method is 16
Complex Method,Blade.Compiler.Translation,TranslationHelper,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Translation\TranslationHelper.cs,GetInvocationArgs,Cyclomatic complexity of the method is 8
Complex Method,Blade.Compiler.Translation,ClassTranslator,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Translation\Declaration\ClassTranslator.cs,Translate,Cyclomatic complexity of the method is 16
Complex Method,Blade.Compiler.Translation,IdentifierNameTranslator,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Translation\Expression\IdentifierNameTranslator.cs,Translate,Cyclomatic complexity of the method is 13
Complex Method,Blade.Compiler.Translation,NewExpressionTranslator,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Translation\Expression\NewExpressionTranslator.cs,Translate,Cyclomatic complexity of the method is 8
Complex Method,Blade.Compiler.Translation,NewExpressionTranslator,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Translation\Expression\NewExpressionTranslator.cs,HandleSpecialCases,Cyclomatic complexity of the method is 8
Long Statement,Blade.Compiler.Extensibility,ScriptObjectLiteralExtension,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Extensibility\ScriptObjectLiteralExtension.cs,ValidateClass,The length of the statement  "                throw new CompilationException("A class using the [ScriptObjectLiteral] attribute cannot be declaraed static."' classDecl); " is 123.
Long Statement,Blade.Compiler.Extensibility,ScriptObjectLiteralExtension,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Extensibility\ScriptObjectLiteralExtension.cs,ValidateClass,The length of the statement  "                throw new CompilationException("A class using the [ScriptObjectLiteral] attribute cannot contain constructors."' classDecl); " is 124.
Long Statement,Blade.Compiler.Extensibility,ScriptObjectLiteralExtension,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Extensibility\ScriptObjectLiteralExtension.cs,ValidateClass,The length of the statement  "                throw new CompilationException("A class using the [ScriptObjectLiteral] attribute can only contain auto properties."' classDecl); " is 129.
Long Statement,Blade.Compiler.Extensibility,ScriptObjectLiteralExtension,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Extensibility\ScriptObjectLiteralExtension.cs,ValidateBaseClass,The length of the statement  "                throw new CompilationException("A class using the [ScriptObjectLiteral] attribute cannot inherit from class " + classDef.Symbol.GetFullName() + " is 143.
Long Statement,Blade.Compiler.Models,Extensions,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Models\Extensions.cs,GetFullName,The length of the statement  "            return String.Join("."' (new[] { @this.ContainingType.GetFullName()' @this.Name }).Where(x => !String.IsNullOrEmpty(x))); " is 121.
Long Statement,Blade.Compiler.Transformation,TransformationProcess,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Transformation\TransformationProcess.cs,Execute,The length of the statement  "            else throw new NotImplementedException("Transformation not implemented for compilation of type: " + context.Compilation.GetType().FullName); " is 140.
Long Statement,Blade.Compiler.Translation,TryStatementTranslator,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Translation\Statement\TryStatementTranslator.cs,Translate,The length of the statement  "                    var identifier = (item.Identifier != null && !String.IsNullOrEmpty(item.Identifier.Name)) ? item.Identifier.Name : "ex$"; " is 121.
Complex Conditional,Blade.Compiler.Extensibility,ScriptObjectLiteralExtension,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Extensibility\ScriptObjectLiteralExtension.cs,ValidateBaseClass,The conditional expression  "!extensions.Any(e => e.GetType() == typeof(ScriptObjectLiteralExtension)) &&                  (classDef.Constructors.Any(c => !c.Symbol.IsImplicitlyDeclared) ||                  classDef.Methods.Any(m => !m.Symbol.IsImplicitlyDeclared) ||                  classDef.Properties.Any(p => p.MemberKind != MemberDefinitionKind.Field) ||                  classDef.Fields.Any(f => f.MemberKind != MemberDefinitionKind.Field))"  is complex.
Magic Number,Blade.Compiler.Models,Extensions,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Models\Extensions.cs,IsNumericType,The following statement contains a magic number: return ((int)@this) > 3;
Magic Number,Blade.Compiler.Models,Extensions,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Models\Extensions.cs,IsIntegralType,The following statement contains a magic number: return IsNumericType(@this) && (((int)@this) < 12);
Missing Default,Blade.Compiler.Diagnostics,DiagnosticProcess,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Diagnostics\DiagnosticProcess.cs,Execute,The following switch statement is missing a default case: switch (item.Info.Severity)                  {                      case DiagnosticSeverity.Error:                          context.Result.AddError(CreateMessage(item));                          break;                        case DiagnosticSeverity.Warning:                          context.Result.AddWarning(CreateMessage(item));                          break;                  }
Missing Default,Blade.Compiler.Extensibility,ScriptExternalExtension,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Extensibility\ScriptExternalExtension.cs,ExtendDeclaration,The following switch statement is missing a default case: switch (declaration.Definition.Kind)              {                  case DefinitionKind.Type:                      var typeDecl = declaration as ITypeDeclarationModel;                      if (typeDecl != null)                          model.RemoveType(typeDecl);                      break;                    case DefinitionKind.Member:                      var memberDecl = declaration as IMemberDeclarationModel;                      if (memberDecl != null && memberDecl.Container != null)                          memberDecl.Container.RemoveMember(memberDecl);                      break;              }
Missing Default,Blade.Compiler.Translation,AssignmentExpressionTranslator,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Translation\Expression\AssignmentExpressionTranslator.cs,Translate,The following switch statement is missing a default case: switch (memberDef.MemberKind)                  {                      case MemberDefinitionKind.Property:                          HandlePropertyAssignment(model' context);                          return;                        case MemberDefinitionKind.Event:                          HandleEventAssignment(model' context);                          return;                  }
Missing Default,Blade.Compiler.Preprocessing.CSharp,InstanceMemberPreprocessor,D:\research\architectureSmells\repos\vannatech_blade\source\Core\Compiler\Preprocessing\CSharp\InstanceMemberPreprocessor.cs,IsCandidateForThis,The following switch statement is missing a default case: switch (symbol.Kind)              {                  case CommonSymbolKind.Field:                  case CommonSymbolKind.Property:                  case CommonSymbolKind.Event:                      return true;                    case CommonSymbolKind.Method:                      if (((IMethodSymbol)symbol).MethodKind != CommonMethodKind.Constructor)                          return true;                      else break;              }
