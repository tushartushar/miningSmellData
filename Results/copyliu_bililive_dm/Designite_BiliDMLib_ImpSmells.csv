Implementation smell,Namespace,Class,File,Method,Description
Long Method,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ConnectAsync,The method has 78 lines of code.
Long Method,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The method has 90 lines of code.
Complex Method,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ConnectAsync,Cyclomatic complexity of the method is 11
Complex Method,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,Cyclomatic complexity of the method is 24
Long Parameter List,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,SendSocketData,The method has 6 parameters.
Long Parameter List,BiliDMLib,utils,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\utils.cs,ReadB,The method has 4 parameters.
Empty Catch Block,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The method has an empty catch block.
Empty Catch Block,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,Disconnect,The method has an empty catch block.
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ConnectAsync,The following statement contains a magic number: try {  	if (this.Connected)  		throw new InvalidOperationException ();  	int channelId = roomId;  	//  	//                var request = WebRequest.Create(RoomInfoUrl + roomId + ".json");  	//                var response = request.GetResponse();  	//  	//                int channelId;  	//                using (var stream = response.GetResponseStream())  	//                using (var sr = new StreamReader(stream))  	//                {  	//                    var json = await sr.ReadToEndAsync();  	//                    Debug.WriteLine(json);  	//                    dynamic jo = JObject.Parse(json);  	//                    channelId = (int) jo.list[0].cid;  	//                }  	if (channelId != lastroomid) {  		try {  			var request2 = WebRequest.Create (CIDInfoUrl + channelId);  			request2.Timeout = 2000;  			var response2 = await request2.GetResponseAsync ();  			using (var stream = response2.GetResponseStream ()) {  				using (var sr = new StreamReader (stream)) {  					var text = await sr.ReadToEndAsync ();  					var xml = "<root>" + text + "</root>";  					XmlDocument doc = new XmlDocument ();  					doc.LoadXml (xml);  					ChatHost = doc ["root"] ["server"].InnerText;  				}  			}  		} catch (WebException ex) {  			ChatHost = defaulthosts [new Random ().Next (defaulthosts.Length)];  			HttpWebResponse errorResponse = ex.Response as HttpWebResponse;  			if (errorResponse.StatusCode == HttpStatusCode.NotFound) {  				// ֱ���䲻���ڣ�HTTP 404��  				string msg = "��ֱ�������Ʋ����ڣ���Ļ��ֻ֧��ʹ��ԭ���������";  				LogMessage.Invoke (this' new LogMessageArgs () {  					message = msg  				});  			} else {  				// Bվ��������Ӧ����  				string msg = "Bվ��������Ӧ��Ļ��������ַ���������ʹ�ó�����ַ����";  				LogMessage.Invoke (this' new LogMessageArgs () {  					message = msg  				});  			}  		} catch (Exception) {  			// ��������XML�������󣿣�  			ChatHost = defaulthosts [new Random ().Next (defaulthosts.Length)];  			string msg = "��ȡ��Ļ��������ַʱ����δ֪���󣬳���ʹ�ó�����ַ����";  			LogMessage.Invoke (this' new LogMessageArgs () {  				message = msg  			});  		}  	} else {  		ChatHost = lastserver;  	}  	Client = new TcpClient ();  	await Client.ConnectAsync (ChatHost' ChatPort);  	NetStream = Client.GetStream ();  	if (SendJoinChannel (channelId)) {  		Connected = true;  		this.HeartbeatLoop ();  		var thread = new Thread (this.ReceiveMessageLoop);  		thread.IsBackground = true;  		thread.Start ();  		lastserver = ChatHost;  		lastroomid = roomId;  		return true;  	}  	return false;  } catch (Exception ex) {  	this.Error = ex;  	return false;  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ConnectAsync,The following statement contains a magic number: if (channelId != lastroomid) {  	try {  		var request2 = WebRequest.Create (CIDInfoUrl + channelId);  		request2.Timeout = 2000;  		var response2 = await request2.GetResponseAsync ();  		using (var stream = response2.GetResponseStream ()) {  			using (var sr = new StreamReader (stream)) {  				var text = await sr.ReadToEndAsync ();  				var xml = "<root>" + text + "</root>";  				XmlDocument doc = new XmlDocument ();  				doc.LoadXml (xml);  				ChatHost = doc ["root"] ["server"].InnerText;  			}  		}  	} catch (WebException ex) {  		ChatHost = defaulthosts [new Random ().Next (defaulthosts.Length)];  		HttpWebResponse errorResponse = ex.Response as HttpWebResponse;  		if (errorResponse.StatusCode == HttpStatusCode.NotFound) {  			// ֱ���䲻���ڣ�HTTP 404��  			string msg = "��ֱ�������Ʋ����ڣ���Ļ��ֻ֧��ʹ��ԭ���������";  			LogMessage.Invoke (this' new LogMessageArgs () {  				message = msg  			});  		} else {  			// Bվ��������Ӧ����  			string msg = "Bվ��������Ӧ��Ļ��������ַ���������ʹ�ó�����ַ����";  			LogMessage.Invoke (this' new LogMessageArgs () {  				message = msg  			});  		}  	} catch (Exception) {  		// ��������XML�������󣿣�  		ChatHost = defaulthosts [new Random ().Next (defaulthosts.Length)];  		string msg = "��ȡ��Ļ��������ַʱ����δ֪���󣬳���ʹ�ó�����ַ����";  		LogMessage.Invoke (this' new LogMessageArgs () {  			message = msg  		});  	}  } else {  	ChatHost = lastserver;  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ConnectAsync,The following statement contains a magic number: try {  	var request2 = WebRequest.Create (CIDInfoUrl + channelId);  	request2.Timeout = 2000;  	var response2 = await request2.GetResponseAsync ();  	using (var stream = response2.GetResponseStream ()) {  		using (var sr = new StreamReader (stream)) {  			var text = await sr.ReadToEndAsync ();  			var xml = "<root>" + text + "</root>";  			XmlDocument doc = new XmlDocument ();  			doc.LoadXml (xml);  			ChatHost = doc ["root"] ["server"].InnerText;  		}  	}  } catch (WebException ex) {  	ChatHost = defaulthosts [new Random ().Next (defaulthosts.Length)];  	HttpWebResponse errorResponse = ex.Response as HttpWebResponse;  	if (errorResponse.StatusCode == HttpStatusCode.NotFound) {  		// ֱ���䲻���ڣ�HTTP 404��  		string msg = "��ֱ�������Ʋ����ڣ���Ļ��ֻ֧��ʹ��ԭ���������";  		LogMessage.Invoke (this' new LogMessageArgs () {  			message = msg  		});  	} else {  		// Bվ��������Ӧ����  		string msg = "Bվ��������Ӧ��Ļ��������ַ���������ʹ�ó�����ַ����";  		LogMessage.Invoke (this' new LogMessageArgs () {  			message = msg  		});  	}  } catch (Exception) {  	// ��������XML�������󣿣�  	ChatHost = defaulthosts [new Random ().Next (defaulthosts.Length)];  	string msg = "��ȡ��Ļ��������ַʱ����δ֪���󣬳���ʹ�ó�����ַ����";  	LogMessage.Invoke (this' new LogMessageArgs () {  		message = msg  	});  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ConnectAsync,The following statement contains a magic number: request2.Timeout = 2000;  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: try {  	var stableBuffer = new byte[Client.ReceiveBufferSize];  	while (this.Connected) {  		NetStream.ReadB (stableBuffer' 0' 4);  		var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  		packetlength = IPAddress.NetworkToHostOrder (packetlength);  		if (packetlength < 16) {  			throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  		}  		NetStream.ReadB (stableBuffer' 0' 2);  		//magic  		NetStream.ReadB (stableBuffer' 0' 2);  		//protocol_version   		NetStream.ReadB (stableBuffer' 0' 4);  		var typeId = BitConverter.ToInt32 (stableBuffer' 0);  		typeId = IPAddress.NetworkToHostOrder (typeId);  		Console.WriteLine (typeId);  		NetStream.ReadB (stableBuffer' 0' 4);  		//magic' params?  		var playloadlength = packetlength - 16;  		if (playloadlength == 0) {  			continue;  			//û��������  		}  		typeId = typeId - 1;  		//�ͷ�����Ĵ����Ӧ   		var buffer = new byte[playloadlength];  		NetStream.ReadB (buffer' 0' playloadlength);  		switch (typeId) {  		case 0:  		case 1:  		case 2: {  			var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  			//��������  			Console.WriteLine (viewer);  			if (ReceivedRoomCount != null) {  				ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  					UserCount = viewer  				});  			}  			break;  		}  		case 3:  		case 4://playerCommand  		 {  			var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  			if (debuglog) {  				Console.WriteLine (json);  			}  			try {  				DanmakuModel dama = new DanmakuModel (json' 2);  				if (ReceivedDanmaku != null) {  					ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  						Danmaku = dama  					});  				}  			} catch (Exception) {  				// ignored  			}  			break;  		}  		case 5://newScrollMessage  		 {  			break;  		}  		case 7: {  			break;  		}  		case 16: {  			break;  		}  		default: {  			break;  		}  		//                       		}  	}  } catch (NotSupportedException ex) {  	this.Error = ex;  	_disconnect ();  } catch (Exception ex) {  	this.Error = ex;  	_disconnect ();  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: try {  	var stableBuffer = new byte[Client.ReceiveBufferSize];  	while (this.Connected) {  		NetStream.ReadB (stableBuffer' 0' 4);  		var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  		packetlength = IPAddress.NetworkToHostOrder (packetlength);  		if (packetlength < 16) {  			throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  		}  		NetStream.ReadB (stableBuffer' 0' 2);  		//magic  		NetStream.ReadB (stableBuffer' 0' 2);  		//protocol_version   		NetStream.ReadB (stableBuffer' 0' 4);  		var typeId = BitConverter.ToInt32 (stableBuffer' 0);  		typeId = IPAddress.NetworkToHostOrder (typeId);  		Console.WriteLine (typeId);  		NetStream.ReadB (stableBuffer' 0' 4);  		//magic' params?  		var playloadlength = packetlength - 16;  		if (playloadlength == 0) {  			continue;  			//û��������  		}  		typeId = typeId - 1;  		//�ͷ�����Ĵ����Ӧ   		var buffer = new byte[playloadlength];  		NetStream.ReadB (buffer' 0' playloadlength);  		switch (typeId) {  		case 0:  		case 1:  		case 2: {  			var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  			//��������  			Console.WriteLine (viewer);  			if (ReceivedRoomCount != null) {  				ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  					UserCount = viewer  				});  			}  			break;  		}  		case 3:  		case 4://playerCommand  		 {  			var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  			if (debuglog) {  				Console.WriteLine (json);  			}  			try {  				DanmakuModel dama = new DanmakuModel (json' 2);  				if (ReceivedDanmaku != null) {  					ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  						Danmaku = dama  					});  				}  			} catch (Exception) {  				// ignored  			}  			break;  		}  		case 5://newScrollMessage  		 {  			break;  		}  		case 7: {  			break;  		}  		case 16: {  			break;  		}  		default: {  			break;  		}  		//                       		}  	}  } catch (NotSupportedException ex) {  	this.Error = ex;  	_disconnect ();  } catch (Exception ex) {  	this.Error = ex;  	_disconnect ();  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: try {  	var stableBuffer = new byte[Client.ReceiveBufferSize];  	while (this.Connected) {  		NetStream.ReadB (stableBuffer' 0' 4);  		var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  		packetlength = IPAddress.NetworkToHostOrder (packetlength);  		if (packetlength < 16) {  			throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  		}  		NetStream.ReadB (stableBuffer' 0' 2);  		//magic  		NetStream.ReadB (stableBuffer' 0' 2);  		//protocol_version   		NetStream.ReadB (stableBuffer' 0' 4);  		var typeId = BitConverter.ToInt32 (stableBuffer' 0);  		typeId = IPAddress.NetworkToHostOrder (typeId);  		Console.WriteLine (typeId);  		NetStream.ReadB (stableBuffer' 0' 4);  		//magic' params?  		var playloadlength = packetlength - 16;  		if (playloadlength == 0) {  			continue;  			//û��������  		}  		typeId = typeId - 1;  		//�ͷ�����Ĵ����Ӧ   		var buffer = new byte[playloadlength];  		NetStream.ReadB (buffer' 0' playloadlength);  		switch (typeId) {  		case 0:  		case 1:  		case 2: {  			var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  			//��������  			Console.WriteLine (viewer);  			if (ReceivedRoomCount != null) {  				ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  					UserCount = viewer  				});  			}  			break;  		}  		case 3:  		case 4://playerCommand  		 {  			var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  			if (debuglog) {  				Console.WriteLine (json);  			}  			try {  				DanmakuModel dama = new DanmakuModel (json' 2);  				if (ReceivedDanmaku != null) {  					ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  						Danmaku = dama  					});  				}  			} catch (Exception) {  				// ignored  			}  			break;  		}  		case 5://newScrollMessage  		 {  			break;  		}  		case 7: {  			break;  		}  		case 16: {  			break;  		}  		default: {  			break;  		}  		//                       		}  	}  } catch (NotSupportedException ex) {  	this.Error = ex;  	_disconnect ();  } catch (Exception ex) {  	this.Error = ex;  	_disconnect ();  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: try {  	var stableBuffer = new byte[Client.ReceiveBufferSize];  	while (this.Connected) {  		NetStream.ReadB (stableBuffer' 0' 4);  		var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  		packetlength = IPAddress.NetworkToHostOrder (packetlength);  		if (packetlength < 16) {  			throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  		}  		NetStream.ReadB (stableBuffer' 0' 2);  		//magic  		NetStream.ReadB (stableBuffer' 0' 2);  		//protocol_version   		NetStream.ReadB (stableBuffer' 0' 4);  		var typeId = BitConverter.ToInt32 (stableBuffer' 0);  		typeId = IPAddress.NetworkToHostOrder (typeId);  		Console.WriteLine (typeId);  		NetStream.ReadB (stableBuffer' 0' 4);  		//magic' params?  		var playloadlength = packetlength - 16;  		if (playloadlength == 0) {  			continue;  			//û��������  		}  		typeId = typeId - 1;  		//�ͷ�����Ĵ����Ӧ   		var buffer = new byte[playloadlength];  		NetStream.ReadB (buffer' 0' playloadlength);  		switch (typeId) {  		case 0:  		case 1:  		case 2: {  			var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  			//��������  			Console.WriteLine (viewer);  			if (ReceivedRoomCount != null) {  				ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  					UserCount = viewer  				});  			}  			break;  		}  		case 3:  		case 4://playerCommand  		 {  			var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  			if (debuglog) {  				Console.WriteLine (json);  			}  			try {  				DanmakuModel dama = new DanmakuModel (json' 2);  				if (ReceivedDanmaku != null) {  					ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  						Danmaku = dama  					});  				}  			} catch (Exception) {  				// ignored  			}  			break;  		}  		case 5://newScrollMessage  		 {  			break;  		}  		case 7: {  			break;  		}  		case 16: {  			break;  		}  		default: {  			break;  		}  		//                       		}  	}  } catch (NotSupportedException ex) {  	this.Error = ex;  	_disconnect ();  } catch (Exception ex) {  	this.Error = ex;  	_disconnect ();  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: try {  	var stableBuffer = new byte[Client.ReceiveBufferSize];  	while (this.Connected) {  		NetStream.ReadB (stableBuffer' 0' 4);  		var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  		packetlength = IPAddress.NetworkToHostOrder (packetlength);  		if (packetlength < 16) {  			throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  		}  		NetStream.ReadB (stableBuffer' 0' 2);  		//magic  		NetStream.ReadB (stableBuffer' 0' 2);  		//protocol_version   		NetStream.ReadB (stableBuffer' 0' 4);  		var typeId = BitConverter.ToInt32 (stableBuffer' 0);  		typeId = IPAddress.NetworkToHostOrder (typeId);  		Console.WriteLine (typeId);  		NetStream.ReadB (stableBuffer' 0' 4);  		//magic' params?  		var playloadlength = packetlength - 16;  		if (playloadlength == 0) {  			continue;  			//û��������  		}  		typeId = typeId - 1;  		//�ͷ�����Ĵ����Ӧ   		var buffer = new byte[playloadlength];  		NetStream.ReadB (buffer' 0' playloadlength);  		switch (typeId) {  		case 0:  		case 1:  		case 2: {  			var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  			//��������  			Console.WriteLine (viewer);  			if (ReceivedRoomCount != null) {  				ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  					UserCount = viewer  				});  			}  			break;  		}  		case 3:  		case 4://playerCommand  		 {  			var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  			if (debuglog) {  				Console.WriteLine (json);  			}  			try {  				DanmakuModel dama = new DanmakuModel (json' 2);  				if (ReceivedDanmaku != null) {  					ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  						Danmaku = dama  					});  				}  			} catch (Exception) {  				// ignored  			}  			break;  		}  		case 5://newScrollMessage  		 {  			break;  		}  		case 7: {  			break;  		}  		case 16: {  			break;  		}  		default: {  			break;  		}  		//                       		}  	}  } catch (NotSupportedException ex) {  	this.Error = ex;  	_disconnect ();  } catch (Exception ex) {  	this.Error = ex;  	_disconnect ();  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: try {  	var stableBuffer = new byte[Client.ReceiveBufferSize];  	while (this.Connected) {  		NetStream.ReadB (stableBuffer' 0' 4);  		var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  		packetlength = IPAddress.NetworkToHostOrder (packetlength);  		if (packetlength < 16) {  			throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  		}  		NetStream.ReadB (stableBuffer' 0' 2);  		//magic  		NetStream.ReadB (stableBuffer' 0' 2);  		//protocol_version   		NetStream.ReadB (stableBuffer' 0' 4);  		var typeId = BitConverter.ToInt32 (stableBuffer' 0);  		typeId = IPAddress.NetworkToHostOrder (typeId);  		Console.WriteLine (typeId);  		NetStream.ReadB (stableBuffer' 0' 4);  		//magic' params?  		var playloadlength = packetlength - 16;  		if (playloadlength == 0) {  			continue;  			//û��������  		}  		typeId = typeId - 1;  		//�ͷ�����Ĵ����Ӧ   		var buffer = new byte[playloadlength];  		NetStream.ReadB (buffer' 0' playloadlength);  		switch (typeId) {  		case 0:  		case 1:  		case 2: {  			var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  			//��������  			Console.WriteLine (viewer);  			if (ReceivedRoomCount != null) {  				ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  					UserCount = viewer  				});  			}  			break;  		}  		case 3:  		case 4://playerCommand  		 {  			var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  			if (debuglog) {  				Console.WriteLine (json);  			}  			try {  				DanmakuModel dama = new DanmakuModel (json' 2);  				if (ReceivedDanmaku != null) {  					ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  						Danmaku = dama  					});  				}  			} catch (Exception) {  				// ignored  			}  			break;  		}  		case 5://newScrollMessage  		 {  			break;  		}  		case 7: {  			break;  		}  		case 16: {  			break;  		}  		default: {  			break;  		}  		//                       		}  	}  } catch (NotSupportedException ex) {  	this.Error = ex;  	_disconnect ();  } catch (Exception ex) {  	this.Error = ex;  	_disconnect ();  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: try {  	var stableBuffer = new byte[Client.ReceiveBufferSize];  	while (this.Connected) {  		NetStream.ReadB (stableBuffer' 0' 4);  		var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  		packetlength = IPAddress.NetworkToHostOrder (packetlength);  		if (packetlength < 16) {  			throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  		}  		NetStream.ReadB (stableBuffer' 0' 2);  		//magic  		NetStream.ReadB (stableBuffer' 0' 2);  		//protocol_version   		NetStream.ReadB (stableBuffer' 0' 4);  		var typeId = BitConverter.ToInt32 (stableBuffer' 0);  		typeId = IPAddress.NetworkToHostOrder (typeId);  		Console.WriteLine (typeId);  		NetStream.ReadB (stableBuffer' 0' 4);  		//magic' params?  		var playloadlength = packetlength - 16;  		if (playloadlength == 0) {  			continue;  			//û��������  		}  		typeId = typeId - 1;  		//�ͷ�����Ĵ����Ӧ   		var buffer = new byte[playloadlength];  		NetStream.ReadB (buffer' 0' playloadlength);  		switch (typeId) {  		case 0:  		case 1:  		case 2: {  			var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  			//��������  			Console.WriteLine (viewer);  			if (ReceivedRoomCount != null) {  				ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  					UserCount = viewer  				});  			}  			break;  		}  		case 3:  		case 4://playerCommand  		 {  			var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  			if (debuglog) {  				Console.WriteLine (json);  			}  			try {  				DanmakuModel dama = new DanmakuModel (json' 2);  				if (ReceivedDanmaku != null) {  					ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  						Danmaku = dama  					});  				}  			} catch (Exception) {  				// ignored  			}  			break;  		}  		case 5://newScrollMessage  		 {  			break;  		}  		case 7: {  			break;  		}  		case 16: {  			break;  		}  		default: {  			break;  		}  		//                       		}  	}  } catch (NotSupportedException ex) {  	this.Error = ex;  	_disconnect ();  } catch (Exception ex) {  	this.Error = ex;  	_disconnect ();  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: try {  	var stableBuffer = new byte[Client.ReceiveBufferSize];  	while (this.Connected) {  		NetStream.ReadB (stableBuffer' 0' 4);  		var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  		packetlength = IPAddress.NetworkToHostOrder (packetlength);  		if (packetlength < 16) {  			throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  		}  		NetStream.ReadB (stableBuffer' 0' 2);  		//magic  		NetStream.ReadB (stableBuffer' 0' 2);  		//protocol_version   		NetStream.ReadB (stableBuffer' 0' 4);  		var typeId = BitConverter.ToInt32 (stableBuffer' 0);  		typeId = IPAddress.NetworkToHostOrder (typeId);  		Console.WriteLine (typeId);  		NetStream.ReadB (stableBuffer' 0' 4);  		//magic' params?  		var playloadlength = packetlength - 16;  		if (playloadlength == 0) {  			continue;  			//û��������  		}  		typeId = typeId - 1;  		//�ͷ�����Ĵ����Ӧ   		var buffer = new byte[playloadlength];  		NetStream.ReadB (buffer' 0' playloadlength);  		switch (typeId) {  		case 0:  		case 1:  		case 2: {  			var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  			//��������  			Console.WriteLine (viewer);  			if (ReceivedRoomCount != null) {  				ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  					UserCount = viewer  				});  			}  			break;  		}  		case 3:  		case 4://playerCommand  		 {  			var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  			if (debuglog) {  				Console.WriteLine (json);  			}  			try {  				DanmakuModel dama = new DanmakuModel (json' 2);  				if (ReceivedDanmaku != null) {  					ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  						Danmaku = dama  					});  				}  			} catch (Exception) {  				// ignored  			}  			break;  		}  		case 5://newScrollMessage  		 {  			break;  		}  		case 7: {  			break;  		}  		case 16: {  			break;  		}  		default: {  			break;  		}  		//                       		}  	}  } catch (NotSupportedException ex) {  	this.Error = ex;  	_disconnect ();  } catch (Exception ex) {  	this.Error = ex;  	_disconnect ();  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: try {  	var stableBuffer = new byte[Client.ReceiveBufferSize];  	while (this.Connected) {  		NetStream.ReadB (stableBuffer' 0' 4);  		var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  		packetlength = IPAddress.NetworkToHostOrder (packetlength);  		if (packetlength < 16) {  			throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  		}  		NetStream.ReadB (stableBuffer' 0' 2);  		//magic  		NetStream.ReadB (stableBuffer' 0' 2);  		//protocol_version   		NetStream.ReadB (stableBuffer' 0' 4);  		var typeId = BitConverter.ToInt32 (stableBuffer' 0);  		typeId = IPAddress.NetworkToHostOrder (typeId);  		Console.WriteLine (typeId);  		NetStream.ReadB (stableBuffer' 0' 4);  		//magic' params?  		var playloadlength = packetlength - 16;  		if (playloadlength == 0) {  			continue;  			//û��������  		}  		typeId = typeId - 1;  		//�ͷ�����Ĵ����Ӧ   		var buffer = new byte[playloadlength];  		NetStream.ReadB (buffer' 0' playloadlength);  		switch (typeId) {  		case 0:  		case 1:  		case 2: {  			var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  			//��������  			Console.WriteLine (viewer);  			if (ReceivedRoomCount != null) {  				ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  					UserCount = viewer  				});  			}  			break;  		}  		case 3:  		case 4://playerCommand  		 {  			var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  			if (debuglog) {  				Console.WriteLine (json);  			}  			try {  				DanmakuModel dama = new DanmakuModel (json' 2);  				if (ReceivedDanmaku != null) {  					ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  						Danmaku = dama  					});  				}  			} catch (Exception) {  				// ignored  			}  			break;  		}  		case 5://newScrollMessage  		 {  			break;  		}  		case 7: {  			break;  		}  		case 16: {  			break;  		}  		default: {  			break;  		}  		//                       		}  	}  } catch (NotSupportedException ex) {  	this.Error = ex;  	_disconnect ();  } catch (Exception ex) {  	this.Error = ex;  	_disconnect ();  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: try {  	var stableBuffer = new byte[Client.ReceiveBufferSize];  	while (this.Connected) {  		NetStream.ReadB (stableBuffer' 0' 4);  		var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  		packetlength = IPAddress.NetworkToHostOrder (packetlength);  		if (packetlength < 16) {  			throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  		}  		NetStream.ReadB (stableBuffer' 0' 2);  		//magic  		NetStream.ReadB (stableBuffer' 0' 2);  		//protocol_version   		NetStream.ReadB (stableBuffer' 0' 4);  		var typeId = BitConverter.ToInt32 (stableBuffer' 0);  		typeId = IPAddress.NetworkToHostOrder (typeId);  		Console.WriteLine (typeId);  		NetStream.ReadB (stableBuffer' 0' 4);  		//magic' params?  		var playloadlength = packetlength - 16;  		if (playloadlength == 0) {  			continue;  			//û��������  		}  		typeId = typeId - 1;  		//�ͷ�����Ĵ����Ӧ   		var buffer = new byte[playloadlength];  		NetStream.ReadB (buffer' 0' playloadlength);  		switch (typeId) {  		case 0:  		case 1:  		case 2: {  			var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  			//��������  			Console.WriteLine (viewer);  			if (ReceivedRoomCount != null) {  				ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  					UserCount = viewer  				});  			}  			break;  		}  		case 3:  		case 4://playerCommand  		 {  			var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  			if (debuglog) {  				Console.WriteLine (json);  			}  			try {  				DanmakuModel dama = new DanmakuModel (json' 2);  				if (ReceivedDanmaku != null) {  					ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  						Danmaku = dama  					});  				}  			} catch (Exception) {  				// ignored  			}  			break;  		}  		case 5://newScrollMessage  		 {  			break;  		}  		case 7: {  			break;  		}  		case 16: {  			break;  		}  		default: {  			break;  		}  		//                       		}  	}  } catch (NotSupportedException ex) {  	this.Error = ex;  	_disconnect ();  } catch (Exception ex) {  	this.Error = ex;  	_disconnect ();  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: try {  	var stableBuffer = new byte[Client.ReceiveBufferSize];  	while (this.Connected) {  		NetStream.ReadB (stableBuffer' 0' 4);  		var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  		packetlength = IPAddress.NetworkToHostOrder (packetlength);  		if (packetlength < 16) {  			throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  		}  		NetStream.ReadB (stableBuffer' 0' 2);  		//magic  		NetStream.ReadB (stableBuffer' 0' 2);  		//protocol_version   		NetStream.ReadB (stableBuffer' 0' 4);  		var typeId = BitConverter.ToInt32 (stableBuffer' 0);  		typeId = IPAddress.NetworkToHostOrder (typeId);  		Console.WriteLine (typeId);  		NetStream.ReadB (stableBuffer' 0' 4);  		//magic' params?  		var playloadlength = packetlength - 16;  		if (playloadlength == 0) {  			continue;  			//û��������  		}  		typeId = typeId - 1;  		//�ͷ�����Ĵ����Ӧ   		var buffer = new byte[playloadlength];  		NetStream.ReadB (buffer' 0' playloadlength);  		switch (typeId) {  		case 0:  		case 1:  		case 2: {  			var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  			//��������  			Console.WriteLine (viewer);  			if (ReceivedRoomCount != null) {  				ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  					UserCount = viewer  				});  			}  			break;  		}  		case 3:  		case 4://playerCommand  		 {  			var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  			if (debuglog) {  				Console.WriteLine (json);  			}  			try {  				DanmakuModel dama = new DanmakuModel (json' 2);  				if (ReceivedDanmaku != null) {  					ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  						Danmaku = dama  					});  				}  			} catch (Exception) {  				// ignored  			}  			break;  		}  		case 5://newScrollMessage  		 {  			break;  		}  		case 7: {  			break;  		}  		case 16: {  			break;  		}  		default: {  			break;  		}  		//                       		}  	}  } catch (NotSupportedException ex) {  	this.Error = ex;  	_disconnect ();  } catch (Exception ex) {  	this.Error = ex;  	_disconnect ();  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: try {  	var stableBuffer = new byte[Client.ReceiveBufferSize];  	while (this.Connected) {  		NetStream.ReadB (stableBuffer' 0' 4);  		var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  		packetlength = IPAddress.NetworkToHostOrder (packetlength);  		if (packetlength < 16) {  			throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  		}  		NetStream.ReadB (stableBuffer' 0' 2);  		//magic  		NetStream.ReadB (stableBuffer' 0' 2);  		//protocol_version   		NetStream.ReadB (stableBuffer' 0' 4);  		var typeId = BitConverter.ToInt32 (stableBuffer' 0);  		typeId = IPAddress.NetworkToHostOrder (typeId);  		Console.WriteLine (typeId);  		NetStream.ReadB (stableBuffer' 0' 4);  		//magic' params?  		var playloadlength = packetlength - 16;  		if (playloadlength == 0) {  			continue;  			//û��������  		}  		typeId = typeId - 1;  		//�ͷ�����Ĵ����Ӧ   		var buffer = new byte[playloadlength];  		NetStream.ReadB (buffer' 0' playloadlength);  		switch (typeId) {  		case 0:  		case 1:  		case 2: {  			var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  			//��������  			Console.WriteLine (viewer);  			if (ReceivedRoomCount != null) {  				ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  					UserCount = viewer  				});  			}  			break;  		}  		case 3:  		case 4://playerCommand  		 {  			var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  			if (debuglog) {  				Console.WriteLine (json);  			}  			try {  				DanmakuModel dama = new DanmakuModel (json' 2);  				if (ReceivedDanmaku != null) {  					ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  						Danmaku = dama  					});  				}  			} catch (Exception) {  				// ignored  			}  			break;  		}  		case 5://newScrollMessage  		 {  			break;  		}  		case 7: {  			break;  		}  		case 16: {  			break;  		}  		default: {  			break;  		}  		//                       		}  	}  } catch (NotSupportedException ex) {  	this.Error = ex;  	_disconnect ();  } catch (Exception ex) {  	this.Error = ex;  	_disconnect ();  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: try {  	var stableBuffer = new byte[Client.ReceiveBufferSize];  	while (this.Connected) {  		NetStream.ReadB (stableBuffer' 0' 4);  		var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  		packetlength = IPAddress.NetworkToHostOrder (packetlength);  		if (packetlength < 16) {  			throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  		}  		NetStream.ReadB (stableBuffer' 0' 2);  		//magic  		NetStream.ReadB (stableBuffer' 0' 2);  		//protocol_version   		NetStream.ReadB (stableBuffer' 0' 4);  		var typeId = BitConverter.ToInt32 (stableBuffer' 0);  		typeId = IPAddress.NetworkToHostOrder (typeId);  		Console.WriteLine (typeId);  		NetStream.ReadB (stableBuffer' 0' 4);  		//magic' params?  		var playloadlength = packetlength - 16;  		if (playloadlength == 0) {  			continue;  			//û��������  		}  		typeId = typeId - 1;  		//�ͷ�����Ĵ����Ӧ   		var buffer = new byte[playloadlength];  		NetStream.ReadB (buffer' 0' playloadlength);  		switch (typeId) {  		case 0:  		case 1:  		case 2: {  			var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  			//��������  			Console.WriteLine (viewer);  			if (ReceivedRoomCount != null) {  				ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  					UserCount = viewer  				});  			}  			break;  		}  		case 3:  		case 4://playerCommand  		 {  			var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  			if (debuglog) {  				Console.WriteLine (json);  			}  			try {  				DanmakuModel dama = new DanmakuModel (json' 2);  				if (ReceivedDanmaku != null) {  					ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  						Danmaku = dama  					});  				}  			} catch (Exception) {  				// ignored  			}  			break;  		}  		case 5://newScrollMessage  		 {  			break;  		}  		case 7: {  			break;  		}  		case 16: {  			break;  		}  		default: {  			break;  		}  		//                       		}  	}  } catch (NotSupportedException ex) {  	this.Error = ex;  	_disconnect ();  } catch (Exception ex) {  	this.Error = ex;  	_disconnect ();  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: try {  	var stableBuffer = new byte[Client.ReceiveBufferSize];  	while (this.Connected) {  		NetStream.ReadB (stableBuffer' 0' 4);  		var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  		packetlength = IPAddress.NetworkToHostOrder (packetlength);  		if (packetlength < 16) {  			throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  		}  		NetStream.ReadB (stableBuffer' 0' 2);  		//magic  		NetStream.ReadB (stableBuffer' 0' 2);  		//protocol_version   		NetStream.ReadB (stableBuffer' 0' 4);  		var typeId = BitConverter.ToInt32 (stableBuffer' 0);  		typeId = IPAddress.NetworkToHostOrder (typeId);  		Console.WriteLine (typeId);  		NetStream.ReadB (stableBuffer' 0' 4);  		//magic' params?  		var playloadlength = packetlength - 16;  		if (playloadlength == 0) {  			continue;  			//û��������  		}  		typeId = typeId - 1;  		//�ͷ�����Ĵ����Ӧ   		var buffer = new byte[playloadlength];  		NetStream.ReadB (buffer' 0' playloadlength);  		switch (typeId) {  		case 0:  		case 1:  		case 2: {  			var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  			//��������  			Console.WriteLine (viewer);  			if (ReceivedRoomCount != null) {  				ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  					UserCount = viewer  				});  			}  			break;  		}  		case 3:  		case 4://playerCommand  		 {  			var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  			if (debuglog) {  				Console.WriteLine (json);  			}  			try {  				DanmakuModel dama = new DanmakuModel (json' 2);  				if (ReceivedDanmaku != null) {  					ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  						Danmaku = dama  					});  				}  			} catch (Exception) {  				// ignored  			}  			break;  		}  		case 5://newScrollMessage  		 {  			break;  		}  		case 7: {  			break;  		}  		case 16: {  			break;  		}  		default: {  			break;  		}  		//                       		}  	}  } catch (NotSupportedException ex) {  	this.Error = ex;  	_disconnect ();  } catch (Exception ex) {  	this.Error = ex;  	_disconnect ();  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: try {  	var stableBuffer = new byte[Client.ReceiveBufferSize];  	while (this.Connected) {  		NetStream.ReadB (stableBuffer' 0' 4);  		var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  		packetlength = IPAddress.NetworkToHostOrder (packetlength);  		if (packetlength < 16) {  			throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  		}  		NetStream.ReadB (stableBuffer' 0' 2);  		//magic  		NetStream.ReadB (stableBuffer' 0' 2);  		//protocol_version   		NetStream.ReadB (stableBuffer' 0' 4);  		var typeId = BitConverter.ToInt32 (stableBuffer' 0);  		typeId = IPAddress.NetworkToHostOrder (typeId);  		Console.WriteLine (typeId);  		NetStream.ReadB (stableBuffer' 0' 4);  		//magic' params?  		var playloadlength = packetlength - 16;  		if (playloadlength == 0) {  			continue;  			//û��������  		}  		typeId = typeId - 1;  		//�ͷ�����Ĵ����Ӧ   		var buffer = new byte[playloadlength];  		NetStream.ReadB (buffer' 0' playloadlength);  		switch (typeId) {  		case 0:  		case 1:  		case 2: {  			var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  			//��������  			Console.WriteLine (viewer);  			if (ReceivedRoomCount != null) {  				ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  					UserCount = viewer  				});  			}  			break;  		}  		case 3:  		case 4://playerCommand  		 {  			var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  			if (debuglog) {  				Console.WriteLine (json);  			}  			try {  				DanmakuModel dama = new DanmakuModel (json' 2);  				if (ReceivedDanmaku != null) {  					ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  						Danmaku = dama  					});  				}  			} catch (Exception) {  				// ignored  			}  			break;  		}  		case 5://newScrollMessage  		 {  			break;  		}  		case 7: {  			break;  		}  		case 16: {  			break;  		}  		default: {  			break;  		}  		//                       		}  	}  } catch (NotSupportedException ex) {  	this.Error = ex;  	_disconnect ();  } catch (Exception ex) {  	this.Error = ex;  	_disconnect ();  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: while (this.Connected) {  	NetStream.ReadB (stableBuffer' 0' 4);  	var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  	packetlength = IPAddress.NetworkToHostOrder (packetlength);  	if (packetlength < 16) {  		throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  	}  	NetStream.ReadB (stableBuffer' 0' 2);  	//magic  	NetStream.ReadB (stableBuffer' 0' 2);  	//protocol_version   	NetStream.ReadB (stableBuffer' 0' 4);  	var typeId = BitConverter.ToInt32 (stableBuffer' 0);  	typeId = IPAddress.NetworkToHostOrder (typeId);  	Console.WriteLine (typeId);  	NetStream.ReadB (stableBuffer' 0' 4);  	//magic' params?  	var playloadlength = packetlength - 16;  	if (playloadlength == 0) {  		continue;  		//û��������  	}  	typeId = typeId - 1;  	//�ͷ�����Ĵ����Ӧ   	var buffer = new byte[playloadlength];  	NetStream.ReadB (buffer' 0' playloadlength);  	switch (typeId) {  	case 0:  	case 1:  	case 2: {  		var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  		//��������  		Console.WriteLine (viewer);  		if (ReceivedRoomCount != null) {  			ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  				UserCount = viewer  			});  		}  		break;  	}  	case 3:  	case 4://playerCommand  	 {  		var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  		if (debuglog) {  			Console.WriteLine (json);  		}  		try {  			DanmakuModel dama = new DanmakuModel (json' 2);  			if (ReceivedDanmaku != null) {  				ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  					Danmaku = dama  				});  			}  		} catch (Exception) {  			// ignored  		}  		break;  	}  	case 5://newScrollMessage  	 {  		break;  	}  	case 7: {  		break;  	}  	case 16: {  		break;  	}  	default: {  		break;  	}  	//                       	}  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: while (this.Connected) {  	NetStream.ReadB (stableBuffer' 0' 4);  	var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  	packetlength = IPAddress.NetworkToHostOrder (packetlength);  	if (packetlength < 16) {  		throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  	}  	NetStream.ReadB (stableBuffer' 0' 2);  	//magic  	NetStream.ReadB (stableBuffer' 0' 2);  	//protocol_version   	NetStream.ReadB (stableBuffer' 0' 4);  	var typeId = BitConverter.ToInt32 (stableBuffer' 0);  	typeId = IPAddress.NetworkToHostOrder (typeId);  	Console.WriteLine (typeId);  	NetStream.ReadB (stableBuffer' 0' 4);  	//magic' params?  	var playloadlength = packetlength - 16;  	if (playloadlength == 0) {  		continue;  		//û��������  	}  	typeId = typeId - 1;  	//�ͷ�����Ĵ����Ӧ   	var buffer = new byte[playloadlength];  	NetStream.ReadB (buffer' 0' playloadlength);  	switch (typeId) {  	case 0:  	case 1:  	case 2: {  		var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  		//��������  		Console.WriteLine (viewer);  		if (ReceivedRoomCount != null) {  			ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  				UserCount = viewer  			});  		}  		break;  	}  	case 3:  	case 4://playerCommand  	 {  		var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  		if (debuglog) {  			Console.WriteLine (json);  		}  		try {  			DanmakuModel dama = new DanmakuModel (json' 2);  			if (ReceivedDanmaku != null) {  				ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  					Danmaku = dama  				});  			}  		} catch (Exception) {  			// ignored  		}  		break;  	}  	case 5://newScrollMessage  	 {  		break;  	}  	case 7: {  		break;  	}  	case 16: {  		break;  	}  	default: {  		break;  	}  	//                       	}  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: while (this.Connected) {  	NetStream.ReadB (stableBuffer' 0' 4);  	var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  	packetlength = IPAddress.NetworkToHostOrder (packetlength);  	if (packetlength < 16) {  		throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  	}  	NetStream.ReadB (stableBuffer' 0' 2);  	//magic  	NetStream.ReadB (stableBuffer' 0' 2);  	//protocol_version   	NetStream.ReadB (stableBuffer' 0' 4);  	var typeId = BitConverter.ToInt32 (stableBuffer' 0);  	typeId = IPAddress.NetworkToHostOrder (typeId);  	Console.WriteLine (typeId);  	NetStream.ReadB (stableBuffer' 0' 4);  	//magic' params?  	var playloadlength = packetlength - 16;  	if (playloadlength == 0) {  		continue;  		//û��������  	}  	typeId = typeId - 1;  	//�ͷ�����Ĵ����Ӧ   	var buffer = new byte[playloadlength];  	NetStream.ReadB (buffer' 0' playloadlength);  	switch (typeId) {  	case 0:  	case 1:  	case 2: {  		var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  		//��������  		Console.WriteLine (viewer);  		if (ReceivedRoomCount != null) {  			ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  				UserCount = viewer  			});  		}  		break;  	}  	case 3:  	case 4://playerCommand  	 {  		var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  		if (debuglog) {  			Console.WriteLine (json);  		}  		try {  			DanmakuModel dama = new DanmakuModel (json' 2);  			if (ReceivedDanmaku != null) {  				ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  					Danmaku = dama  				});  			}  		} catch (Exception) {  			// ignored  		}  		break;  	}  	case 5://newScrollMessage  	 {  		break;  	}  	case 7: {  		break;  	}  	case 16: {  		break;  	}  	default: {  		break;  	}  	//                       	}  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: while (this.Connected) {  	NetStream.ReadB (stableBuffer' 0' 4);  	var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  	packetlength = IPAddress.NetworkToHostOrder (packetlength);  	if (packetlength < 16) {  		throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  	}  	NetStream.ReadB (stableBuffer' 0' 2);  	//magic  	NetStream.ReadB (stableBuffer' 0' 2);  	//protocol_version   	NetStream.ReadB (stableBuffer' 0' 4);  	var typeId = BitConverter.ToInt32 (stableBuffer' 0);  	typeId = IPAddress.NetworkToHostOrder (typeId);  	Console.WriteLine (typeId);  	NetStream.ReadB (stableBuffer' 0' 4);  	//magic' params?  	var playloadlength = packetlength - 16;  	if (playloadlength == 0) {  		continue;  		//û��������  	}  	typeId = typeId - 1;  	//�ͷ�����Ĵ����Ӧ   	var buffer = new byte[playloadlength];  	NetStream.ReadB (buffer' 0' playloadlength);  	switch (typeId) {  	case 0:  	case 1:  	case 2: {  		var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  		//��������  		Console.WriteLine (viewer);  		if (ReceivedRoomCount != null) {  			ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  				UserCount = viewer  			});  		}  		break;  	}  	case 3:  	case 4://playerCommand  	 {  		var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  		if (debuglog) {  			Console.WriteLine (json);  		}  		try {  			DanmakuModel dama = new DanmakuModel (json' 2);  			if (ReceivedDanmaku != null) {  				ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  					Danmaku = dama  				});  			}  		} catch (Exception) {  			// ignored  		}  		break;  	}  	case 5://newScrollMessage  	 {  		break;  	}  	case 7: {  		break;  	}  	case 16: {  		break;  	}  	default: {  		break;  	}  	//                       	}  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: while (this.Connected) {  	NetStream.ReadB (stableBuffer' 0' 4);  	var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  	packetlength = IPAddress.NetworkToHostOrder (packetlength);  	if (packetlength < 16) {  		throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  	}  	NetStream.ReadB (stableBuffer' 0' 2);  	//magic  	NetStream.ReadB (stableBuffer' 0' 2);  	//protocol_version   	NetStream.ReadB (stableBuffer' 0' 4);  	var typeId = BitConverter.ToInt32 (stableBuffer' 0);  	typeId = IPAddress.NetworkToHostOrder (typeId);  	Console.WriteLine (typeId);  	NetStream.ReadB (stableBuffer' 0' 4);  	//magic' params?  	var playloadlength = packetlength - 16;  	if (playloadlength == 0) {  		continue;  		//û��������  	}  	typeId = typeId - 1;  	//�ͷ�����Ĵ����Ӧ   	var buffer = new byte[playloadlength];  	NetStream.ReadB (buffer' 0' playloadlength);  	switch (typeId) {  	case 0:  	case 1:  	case 2: {  		var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  		//��������  		Console.WriteLine (viewer);  		if (ReceivedRoomCount != null) {  			ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  				UserCount = viewer  			});  		}  		break;  	}  	case 3:  	case 4://playerCommand  	 {  		var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  		if (debuglog) {  			Console.WriteLine (json);  		}  		try {  			DanmakuModel dama = new DanmakuModel (json' 2);  			if (ReceivedDanmaku != null) {  				ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  					Danmaku = dama  				});  			}  		} catch (Exception) {  			// ignored  		}  		break;  	}  	case 5://newScrollMessage  	 {  		break;  	}  	case 7: {  		break;  	}  	case 16: {  		break;  	}  	default: {  		break;  	}  	//                       	}  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: while (this.Connected) {  	NetStream.ReadB (stableBuffer' 0' 4);  	var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  	packetlength = IPAddress.NetworkToHostOrder (packetlength);  	if (packetlength < 16) {  		throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  	}  	NetStream.ReadB (stableBuffer' 0' 2);  	//magic  	NetStream.ReadB (stableBuffer' 0' 2);  	//protocol_version   	NetStream.ReadB (stableBuffer' 0' 4);  	var typeId = BitConverter.ToInt32 (stableBuffer' 0);  	typeId = IPAddress.NetworkToHostOrder (typeId);  	Console.WriteLine (typeId);  	NetStream.ReadB (stableBuffer' 0' 4);  	//magic' params?  	var playloadlength = packetlength - 16;  	if (playloadlength == 0) {  		continue;  		//û��������  	}  	typeId = typeId - 1;  	//�ͷ�����Ĵ����Ӧ   	var buffer = new byte[playloadlength];  	NetStream.ReadB (buffer' 0' playloadlength);  	switch (typeId) {  	case 0:  	case 1:  	case 2: {  		var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  		//��������  		Console.WriteLine (viewer);  		if (ReceivedRoomCount != null) {  			ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  				UserCount = viewer  			});  		}  		break;  	}  	case 3:  	case 4://playerCommand  	 {  		var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  		if (debuglog) {  			Console.WriteLine (json);  		}  		try {  			DanmakuModel dama = new DanmakuModel (json' 2);  			if (ReceivedDanmaku != null) {  				ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  					Danmaku = dama  				});  			}  		} catch (Exception) {  			// ignored  		}  		break;  	}  	case 5://newScrollMessage  	 {  		break;  	}  	case 7: {  		break;  	}  	case 16: {  		break;  	}  	default: {  		break;  	}  	//                       	}  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: while (this.Connected) {  	NetStream.ReadB (stableBuffer' 0' 4);  	var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  	packetlength = IPAddress.NetworkToHostOrder (packetlength);  	if (packetlength < 16) {  		throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  	}  	NetStream.ReadB (stableBuffer' 0' 2);  	//magic  	NetStream.ReadB (stableBuffer' 0' 2);  	//protocol_version   	NetStream.ReadB (stableBuffer' 0' 4);  	var typeId = BitConverter.ToInt32 (stableBuffer' 0);  	typeId = IPAddress.NetworkToHostOrder (typeId);  	Console.WriteLine (typeId);  	NetStream.ReadB (stableBuffer' 0' 4);  	//magic' params?  	var playloadlength = packetlength - 16;  	if (playloadlength == 0) {  		continue;  		//û��������  	}  	typeId = typeId - 1;  	//�ͷ�����Ĵ����Ӧ   	var buffer = new byte[playloadlength];  	NetStream.ReadB (buffer' 0' playloadlength);  	switch (typeId) {  	case 0:  	case 1:  	case 2: {  		var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  		//��������  		Console.WriteLine (viewer);  		if (ReceivedRoomCount != null) {  			ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  				UserCount = viewer  			});  		}  		break;  	}  	case 3:  	case 4://playerCommand  	 {  		var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  		if (debuglog) {  			Console.WriteLine (json);  		}  		try {  			DanmakuModel dama = new DanmakuModel (json' 2);  			if (ReceivedDanmaku != null) {  				ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  					Danmaku = dama  				});  			}  		} catch (Exception) {  			// ignored  		}  		break;  	}  	case 5://newScrollMessage  	 {  		break;  	}  	case 7: {  		break;  	}  	case 16: {  		break;  	}  	default: {  		break;  	}  	//                       	}  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: while (this.Connected) {  	NetStream.ReadB (stableBuffer' 0' 4);  	var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  	packetlength = IPAddress.NetworkToHostOrder (packetlength);  	if (packetlength < 16) {  		throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  	}  	NetStream.ReadB (stableBuffer' 0' 2);  	//magic  	NetStream.ReadB (stableBuffer' 0' 2);  	//protocol_version   	NetStream.ReadB (stableBuffer' 0' 4);  	var typeId = BitConverter.ToInt32 (stableBuffer' 0);  	typeId = IPAddress.NetworkToHostOrder (typeId);  	Console.WriteLine (typeId);  	NetStream.ReadB (stableBuffer' 0' 4);  	//magic' params?  	var playloadlength = packetlength - 16;  	if (playloadlength == 0) {  		continue;  		//û��������  	}  	typeId = typeId - 1;  	//�ͷ�����Ĵ����Ӧ   	var buffer = new byte[playloadlength];  	NetStream.ReadB (buffer' 0' playloadlength);  	switch (typeId) {  	case 0:  	case 1:  	case 2: {  		var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  		//��������  		Console.WriteLine (viewer);  		if (ReceivedRoomCount != null) {  			ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  				UserCount = viewer  			});  		}  		break;  	}  	case 3:  	case 4://playerCommand  	 {  		var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  		if (debuglog) {  			Console.WriteLine (json);  		}  		try {  			DanmakuModel dama = new DanmakuModel (json' 2);  			if (ReceivedDanmaku != null) {  				ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  					Danmaku = dama  				});  			}  		} catch (Exception) {  			// ignored  		}  		break;  	}  	case 5://newScrollMessage  	 {  		break;  	}  	case 7: {  		break;  	}  	case 16: {  		break;  	}  	default: {  		break;  	}  	//                       	}  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: while (this.Connected) {  	NetStream.ReadB (stableBuffer' 0' 4);  	var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  	packetlength = IPAddress.NetworkToHostOrder (packetlength);  	if (packetlength < 16) {  		throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  	}  	NetStream.ReadB (stableBuffer' 0' 2);  	//magic  	NetStream.ReadB (stableBuffer' 0' 2);  	//protocol_version   	NetStream.ReadB (stableBuffer' 0' 4);  	var typeId = BitConverter.ToInt32 (stableBuffer' 0);  	typeId = IPAddress.NetworkToHostOrder (typeId);  	Console.WriteLine (typeId);  	NetStream.ReadB (stableBuffer' 0' 4);  	//magic' params?  	var playloadlength = packetlength - 16;  	if (playloadlength == 0) {  		continue;  		//û��������  	}  	typeId = typeId - 1;  	//�ͷ�����Ĵ����Ӧ   	var buffer = new byte[playloadlength];  	NetStream.ReadB (buffer' 0' playloadlength);  	switch (typeId) {  	case 0:  	case 1:  	case 2: {  		var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  		//��������  		Console.WriteLine (viewer);  		if (ReceivedRoomCount != null) {  			ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  				UserCount = viewer  			});  		}  		break;  	}  	case 3:  	case 4://playerCommand  	 {  		var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  		if (debuglog) {  			Console.WriteLine (json);  		}  		try {  			DanmakuModel dama = new DanmakuModel (json' 2);  			if (ReceivedDanmaku != null) {  				ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  					Danmaku = dama  				});  			}  		} catch (Exception) {  			// ignored  		}  		break;  	}  	case 5://newScrollMessage  	 {  		break;  	}  	case 7: {  		break;  	}  	case 16: {  		break;  	}  	default: {  		break;  	}  	//                       	}  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: while (this.Connected) {  	NetStream.ReadB (stableBuffer' 0' 4);  	var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  	packetlength = IPAddress.NetworkToHostOrder (packetlength);  	if (packetlength < 16) {  		throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  	}  	NetStream.ReadB (stableBuffer' 0' 2);  	//magic  	NetStream.ReadB (stableBuffer' 0' 2);  	//protocol_version   	NetStream.ReadB (stableBuffer' 0' 4);  	var typeId = BitConverter.ToInt32 (stableBuffer' 0);  	typeId = IPAddress.NetworkToHostOrder (typeId);  	Console.WriteLine (typeId);  	NetStream.ReadB (stableBuffer' 0' 4);  	//magic' params?  	var playloadlength = packetlength - 16;  	if (playloadlength == 0) {  		continue;  		//û��������  	}  	typeId = typeId - 1;  	//�ͷ�����Ĵ����Ӧ   	var buffer = new byte[playloadlength];  	NetStream.ReadB (buffer' 0' playloadlength);  	switch (typeId) {  	case 0:  	case 1:  	case 2: {  		var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  		//��������  		Console.WriteLine (viewer);  		if (ReceivedRoomCount != null) {  			ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  				UserCount = viewer  			});  		}  		break;  	}  	case 3:  	case 4://playerCommand  	 {  		var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  		if (debuglog) {  			Console.WriteLine (json);  		}  		try {  			DanmakuModel dama = new DanmakuModel (json' 2);  			if (ReceivedDanmaku != null) {  				ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  					Danmaku = dama  				});  			}  		} catch (Exception) {  			// ignored  		}  		break;  	}  	case 5://newScrollMessage  	 {  		break;  	}  	case 7: {  		break;  	}  	case 16: {  		break;  	}  	default: {  		break;  	}  	//                       	}  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: while (this.Connected) {  	NetStream.ReadB (stableBuffer' 0' 4);  	var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  	packetlength = IPAddress.NetworkToHostOrder (packetlength);  	if (packetlength < 16) {  		throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  	}  	NetStream.ReadB (stableBuffer' 0' 2);  	//magic  	NetStream.ReadB (stableBuffer' 0' 2);  	//protocol_version   	NetStream.ReadB (stableBuffer' 0' 4);  	var typeId = BitConverter.ToInt32 (stableBuffer' 0);  	typeId = IPAddress.NetworkToHostOrder (typeId);  	Console.WriteLine (typeId);  	NetStream.ReadB (stableBuffer' 0' 4);  	//magic' params?  	var playloadlength = packetlength - 16;  	if (playloadlength == 0) {  		continue;  		//û��������  	}  	typeId = typeId - 1;  	//�ͷ�����Ĵ����Ӧ   	var buffer = new byte[playloadlength];  	NetStream.ReadB (buffer' 0' playloadlength);  	switch (typeId) {  	case 0:  	case 1:  	case 2: {  		var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  		//��������  		Console.WriteLine (viewer);  		if (ReceivedRoomCount != null) {  			ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  				UserCount = viewer  			});  		}  		break;  	}  	case 3:  	case 4://playerCommand  	 {  		var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  		if (debuglog) {  			Console.WriteLine (json);  		}  		try {  			DanmakuModel dama = new DanmakuModel (json' 2);  			if (ReceivedDanmaku != null) {  				ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  					Danmaku = dama  				});  			}  		} catch (Exception) {  			// ignored  		}  		break;  	}  	case 5://newScrollMessage  	 {  		break;  	}  	case 7: {  		break;  	}  	case 16: {  		break;  	}  	default: {  		break;  	}  	//                       	}  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: while (this.Connected) {  	NetStream.ReadB (stableBuffer' 0' 4);  	var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  	packetlength = IPAddress.NetworkToHostOrder (packetlength);  	if (packetlength < 16) {  		throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  	}  	NetStream.ReadB (stableBuffer' 0' 2);  	//magic  	NetStream.ReadB (stableBuffer' 0' 2);  	//protocol_version   	NetStream.ReadB (stableBuffer' 0' 4);  	var typeId = BitConverter.ToInt32 (stableBuffer' 0);  	typeId = IPAddress.NetworkToHostOrder (typeId);  	Console.WriteLine (typeId);  	NetStream.ReadB (stableBuffer' 0' 4);  	//magic' params?  	var playloadlength = packetlength - 16;  	if (playloadlength == 0) {  		continue;  		//û��������  	}  	typeId = typeId - 1;  	//�ͷ�����Ĵ����Ӧ   	var buffer = new byte[playloadlength];  	NetStream.ReadB (buffer' 0' playloadlength);  	switch (typeId) {  	case 0:  	case 1:  	case 2: {  		var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  		//��������  		Console.WriteLine (viewer);  		if (ReceivedRoomCount != null) {  			ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  				UserCount = viewer  			});  		}  		break;  	}  	case 3:  	case 4://playerCommand  	 {  		var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  		if (debuglog) {  			Console.WriteLine (json);  		}  		try {  			DanmakuModel dama = new DanmakuModel (json' 2);  			if (ReceivedDanmaku != null) {  				ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  					Danmaku = dama  				});  			}  		} catch (Exception) {  			// ignored  		}  		break;  	}  	case 5://newScrollMessage  	 {  		break;  	}  	case 7: {  		break;  	}  	case 16: {  		break;  	}  	default: {  		break;  	}  	//                       	}  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: while (this.Connected) {  	NetStream.ReadB (stableBuffer' 0' 4);  	var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  	packetlength = IPAddress.NetworkToHostOrder (packetlength);  	if (packetlength < 16) {  		throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  	}  	NetStream.ReadB (stableBuffer' 0' 2);  	//magic  	NetStream.ReadB (stableBuffer' 0' 2);  	//protocol_version   	NetStream.ReadB (stableBuffer' 0' 4);  	var typeId = BitConverter.ToInt32 (stableBuffer' 0);  	typeId = IPAddress.NetworkToHostOrder (typeId);  	Console.WriteLine (typeId);  	NetStream.ReadB (stableBuffer' 0' 4);  	//magic' params?  	var playloadlength = packetlength - 16;  	if (playloadlength == 0) {  		continue;  		//û��������  	}  	typeId = typeId - 1;  	//�ͷ�����Ĵ����Ӧ   	var buffer = new byte[playloadlength];  	NetStream.ReadB (buffer' 0' playloadlength);  	switch (typeId) {  	case 0:  	case 1:  	case 2: {  		var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  		//��������  		Console.WriteLine (viewer);  		if (ReceivedRoomCount != null) {  			ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  				UserCount = viewer  			});  		}  		break;  	}  	case 3:  	case 4://playerCommand  	 {  		var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  		if (debuglog) {  			Console.WriteLine (json);  		}  		try {  			DanmakuModel dama = new DanmakuModel (json' 2);  			if (ReceivedDanmaku != null) {  				ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  					Danmaku = dama  				});  			}  		} catch (Exception) {  			// ignored  		}  		break;  	}  	case 5://newScrollMessage  	 {  		break;  	}  	case 7: {  		break;  	}  	case 16: {  		break;  	}  	default: {  		break;  	}  	//                       	}  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: while (this.Connected) {  	NetStream.ReadB (stableBuffer' 0' 4);  	var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  	packetlength = IPAddress.NetworkToHostOrder (packetlength);  	if (packetlength < 16) {  		throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  	}  	NetStream.ReadB (stableBuffer' 0' 2);  	//magic  	NetStream.ReadB (stableBuffer' 0' 2);  	//protocol_version   	NetStream.ReadB (stableBuffer' 0' 4);  	var typeId = BitConverter.ToInt32 (stableBuffer' 0);  	typeId = IPAddress.NetworkToHostOrder (typeId);  	Console.WriteLine (typeId);  	NetStream.ReadB (stableBuffer' 0' 4);  	//magic' params?  	var playloadlength = packetlength - 16;  	if (playloadlength == 0) {  		continue;  		//û��������  	}  	typeId = typeId - 1;  	//�ͷ�����Ĵ����Ӧ   	var buffer = new byte[playloadlength];  	NetStream.ReadB (buffer' 0' playloadlength);  	switch (typeId) {  	case 0:  	case 1:  	case 2: {  		var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  		//��������  		Console.WriteLine (viewer);  		if (ReceivedRoomCount != null) {  			ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  				UserCount = viewer  			});  		}  		break;  	}  	case 3:  	case 4://playerCommand  	 {  		var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  		if (debuglog) {  			Console.WriteLine (json);  		}  		try {  			DanmakuModel dama = new DanmakuModel (json' 2);  			if (ReceivedDanmaku != null) {  				ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  					Danmaku = dama  				});  			}  		} catch (Exception) {  			// ignored  		}  		break;  	}  	case 5://newScrollMessage  	 {  		break;  	}  	case 7: {  		break;  	}  	case 16: {  		break;  	}  	default: {  		break;  	}  	//                       	}  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: while (this.Connected) {  	NetStream.ReadB (stableBuffer' 0' 4);  	var packetlength = BitConverter.ToInt32 (stableBuffer' 0);  	packetlength = IPAddress.NetworkToHostOrder (packetlength);  	if (packetlength < 16) {  		throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  	}  	NetStream.ReadB (stableBuffer' 0' 2);  	//magic  	NetStream.ReadB (stableBuffer' 0' 2);  	//protocol_version   	NetStream.ReadB (stableBuffer' 0' 4);  	var typeId = BitConverter.ToInt32 (stableBuffer' 0);  	typeId = IPAddress.NetworkToHostOrder (typeId);  	Console.WriteLine (typeId);  	NetStream.ReadB (stableBuffer' 0' 4);  	//magic' params?  	var playloadlength = packetlength - 16;  	if (playloadlength == 0) {  		continue;  		//û��������  	}  	typeId = typeId - 1;  	//�ͷ�����Ĵ����Ӧ   	var buffer = new byte[playloadlength];  	NetStream.ReadB (buffer' 0' playloadlength);  	switch (typeId) {  	case 0:  	case 1:  	case 2: {  		var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  		//��������  		Console.WriteLine (viewer);  		if (ReceivedRoomCount != null) {  			ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  				UserCount = viewer  			});  		}  		break;  	}  	case 3:  	case 4://playerCommand  	 {  		var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  		if (debuglog) {  			Console.WriteLine (json);  		}  		try {  			DanmakuModel dama = new DanmakuModel (json' 2);  			if (ReceivedDanmaku != null) {  				ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  					Danmaku = dama  				});  			}  		} catch (Exception) {  			// ignored  		}  		break;  	}  	case 5://newScrollMessage  	 {  		break;  	}  	case 7: {  		break;  	}  	case 16: {  		break;  	}  	default: {  		break;  	}  	//                       	}  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: NetStream.ReadB (stableBuffer' 0' 4);  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: if (packetlength < 16) {  	throw new NotSupportedException ("Э��ʧ��: (L:" + packetlength + ")");  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: NetStream.ReadB (stableBuffer' 0' 2);  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: NetStream.ReadB (stableBuffer' 0' 2);  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: NetStream.ReadB (stableBuffer' 0' 4);  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: NetStream.ReadB (stableBuffer' 0' 4);  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: switch (typeId) {  case 0:  case 1:  case 2: {  	var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  	//��������  	Console.WriteLine (viewer);  	if (ReceivedRoomCount != null) {  		ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  			UserCount = viewer  		});  	}  	break;  }  case 3:  case 4://playerCommand   {  	var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  	if (debuglog) {  		Console.WriteLine (json);  	}  	try {  		DanmakuModel dama = new DanmakuModel (json' 2);  		if (ReceivedDanmaku != null) {  			ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  				Danmaku = dama  			});  		}  	} catch (Exception) {  		// ignored  	}  	break;  }  case 5://newScrollMessage   {  	break;  }  case 7: {  	break;  }  case 16: {  	break;  }  default: {  	break;  }  //                       }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: switch (typeId) {  case 0:  case 1:  case 2: {  	var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  	//��������  	Console.WriteLine (viewer);  	if (ReceivedRoomCount != null) {  		ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  			UserCount = viewer  		});  	}  	break;  }  case 3:  case 4://playerCommand   {  	var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  	if (debuglog) {  		Console.WriteLine (json);  	}  	try {  		DanmakuModel dama = new DanmakuModel (json' 2);  		if (ReceivedDanmaku != null) {  			ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  				Danmaku = dama  			});  		}  	} catch (Exception) {  		// ignored  	}  	break;  }  case 5://newScrollMessage   {  	break;  }  case 7: {  	break;  }  case 16: {  	break;  }  default: {  	break;  }  //                       }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: switch (typeId) {  case 0:  case 1:  case 2: {  	var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  	//��������  	Console.WriteLine (viewer);  	if (ReceivedRoomCount != null) {  		ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  			UserCount = viewer  		});  	}  	break;  }  case 3:  case 4://playerCommand   {  	var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  	if (debuglog) {  		Console.WriteLine (json);  	}  	try {  		DanmakuModel dama = new DanmakuModel (json' 2);  		if (ReceivedDanmaku != null) {  			ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  				Danmaku = dama  			});  		}  	} catch (Exception) {  		// ignored  	}  	break;  }  case 5://newScrollMessage   {  	break;  }  case 7: {  	break;  }  case 16: {  	break;  }  default: {  	break;  }  //                       }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: switch (typeId) {  case 0:  case 1:  case 2: {  	var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  	//��������  	Console.WriteLine (viewer);  	if (ReceivedRoomCount != null) {  		ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  			UserCount = viewer  		});  	}  	break;  }  case 3:  case 4://playerCommand   {  	var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  	if (debuglog) {  		Console.WriteLine (json);  	}  	try {  		DanmakuModel dama = new DanmakuModel (json' 2);  		if (ReceivedDanmaku != null) {  			ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  				Danmaku = dama  			});  		}  	} catch (Exception) {  		// ignored  	}  	break;  }  case 5://newScrollMessage   {  	break;  }  case 7: {  	break;  }  case 16: {  	break;  }  default: {  	break;  }  //                       }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: switch (typeId) {  case 0:  case 1:  case 2: {  	var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  	//��������  	Console.WriteLine (viewer);  	if (ReceivedRoomCount != null) {  		ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  			UserCount = viewer  		});  	}  	break;  }  case 3:  case 4://playerCommand   {  	var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  	if (debuglog) {  		Console.WriteLine (json);  	}  	try {  		DanmakuModel dama = new DanmakuModel (json' 2);  		if (ReceivedDanmaku != null) {  			ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  				Danmaku = dama  			});  		}  	} catch (Exception) {  		// ignored  	}  	break;  }  case 5://newScrollMessage   {  	break;  }  case 7: {  	break;  }  case 16: {  	break;  }  default: {  	break;  }  //                       }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: switch (typeId) {  case 0:  case 1:  case 2: {  	var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  	//��������  	Console.WriteLine (viewer);  	if (ReceivedRoomCount != null) {  		ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  			UserCount = viewer  		});  	}  	break;  }  case 3:  case 4://playerCommand   {  	var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  	if (debuglog) {  		Console.WriteLine (json);  	}  	try {  		DanmakuModel dama = new DanmakuModel (json' 2);  		if (ReceivedDanmaku != null) {  			ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  				Danmaku = dama  			});  		}  	} catch (Exception) {  		// ignored  	}  	break;  }  case 5://newScrollMessage   {  	break;  }  case 7: {  	break;  }  case 16: {  	break;  }  default: {  	break;  }  //                       }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: switch (typeId) {  case 0:  case 1:  case 2: {  	var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  	//��������  	Console.WriteLine (viewer);  	if (ReceivedRoomCount != null) {  		ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  			UserCount = viewer  		});  	}  	break;  }  case 3:  case 4://playerCommand   {  	var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  	if (debuglog) {  		Console.WriteLine (json);  	}  	try {  		DanmakuModel dama = new DanmakuModel (json' 2);  		if (ReceivedDanmaku != null) {  			ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  				Danmaku = dama  			});  		}  	} catch (Exception) {  		// ignored  	}  	break;  }  case 5://newScrollMessage   {  	break;  }  case 7: {  	break;  }  case 16: {  	break;  }  default: {  	break;  }  //                       }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: switch (typeId) {  case 0:  case 1:  case 2: {  	var viewer = BitConverter.ToUInt32 (buffer.Take (4).Reverse ().ToArray ()' 0);  	//��������  	Console.WriteLine (viewer);  	if (ReceivedRoomCount != null) {  		ReceivedRoomCount (this' new ReceivedRoomCountArgs () {  			UserCount = viewer  		});  	}  	break;  }  case 3:  case 4://playerCommand   {  	var json = Encoding.UTF8.GetString (buffer' 0' playloadlength);  	if (debuglog) {  		Console.WriteLine (json);  	}  	try {  		DanmakuModel dama = new DanmakuModel (json' 2);  		if (ReceivedDanmaku != null) {  			ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  				Danmaku = dama  			});  		}  	} catch (Exception) {  		// ignored  	}  	break;  }  case 5://newScrollMessage   {  	break;  }  case 7: {  	break;  }  case 16: {  	break;  }  default: {  	break;  }  //                       }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,ReceiveMessageLoop,The following statement contains a magic number: try {  	DanmakuModel dama = new DanmakuModel (json' 2);  	if (ReceivedDanmaku != null) {  		ReceivedDanmaku (this' new ReceivedDanmakuArgs () {  			Danmaku = dama  		});  	}  } catch (Exception) {  	// ignored  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,HeartbeatLoop,The following statement contains a magic number: try {  	while (this.Connected) {  		this.SendHeartbeatAsync ();  		await TaskEx.Delay (30000);  	}  } catch (Exception ex) {  	this.Error = ex;  	_disconnect ();  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,HeartbeatLoop,The following statement contains a magic number: while (this.Connected) {  	this.SendHeartbeatAsync ();  	await TaskEx.Delay (30000);  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,HeartbeatLoop,The following statement contains a magic number: await TaskEx.Delay (30000);  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,SendHeartbeatAsync,The following statement contains a magic number: SendSocketData (2);  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,SendSocketData,The following statement contains a magic number: SendSocketData (0' 16' protocolversion' action' 1' body);  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,SendSocketData,The following statement contains a magic number: if (packetlength == 0) {  	packetlength = playload.Length + 16;  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,SendSocketData,The following statement contains a magic number: packetlength = playload.Length + 16;  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,SendSocketData,The following statement contains a magic number: using (var ms = new MemoryStream (buffer)) {  	var b = BitConverter.GetBytes (buffer.Length).ToBE ();  	ms.Write (b' 0' 4);  	b = BitConverter.GetBytes (magic).ToBE ();  	ms.Write (b' 0' 2);  	b = BitConverter.GetBytes (ver).ToBE ();  	ms.Write (b' 0' 2);  	b = BitConverter.GetBytes (action).ToBE ();  	ms.Write (b' 0' 4);  	b = BitConverter.GetBytes (param).ToBE ();  	ms.Write (b' 0' 4);  	if (playload.Length > 0) {  		ms.Write (playload' 0' playload.Length);  	}  	NetStream.WriteAsync (buffer' 0' buffer.Length);  	NetStream.FlushAsync ();  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,SendSocketData,The following statement contains a magic number: using (var ms = new MemoryStream (buffer)) {  	var b = BitConverter.GetBytes (buffer.Length).ToBE ();  	ms.Write (b' 0' 4);  	b = BitConverter.GetBytes (magic).ToBE ();  	ms.Write (b' 0' 2);  	b = BitConverter.GetBytes (ver).ToBE ();  	ms.Write (b' 0' 2);  	b = BitConverter.GetBytes (action).ToBE ();  	ms.Write (b' 0' 4);  	b = BitConverter.GetBytes (param).ToBE ();  	ms.Write (b' 0' 4);  	if (playload.Length > 0) {  		ms.Write (playload' 0' playload.Length);  	}  	NetStream.WriteAsync (buffer' 0' buffer.Length);  	NetStream.FlushAsync ();  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,SendSocketData,The following statement contains a magic number: using (var ms = new MemoryStream (buffer)) {  	var b = BitConverter.GetBytes (buffer.Length).ToBE ();  	ms.Write (b' 0' 4);  	b = BitConverter.GetBytes (magic).ToBE ();  	ms.Write (b' 0' 2);  	b = BitConverter.GetBytes (ver).ToBE ();  	ms.Write (b' 0' 2);  	b = BitConverter.GetBytes (action).ToBE ();  	ms.Write (b' 0' 4);  	b = BitConverter.GetBytes (param).ToBE ();  	ms.Write (b' 0' 4);  	if (playload.Length > 0) {  		ms.Write (playload' 0' playload.Length);  	}  	NetStream.WriteAsync (buffer' 0' buffer.Length);  	NetStream.FlushAsync ();  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,SendSocketData,The following statement contains a magic number: using (var ms = new MemoryStream (buffer)) {  	var b = BitConverter.GetBytes (buffer.Length).ToBE ();  	ms.Write (b' 0' 4);  	b = BitConverter.GetBytes (magic).ToBE ();  	ms.Write (b' 0' 2);  	b = BitConverter.GetBytes (ver).ToBE ();  	ms.Write (b' 0' 2);  	b = BitConverter.GetBytes (action).ToBE ();  	ms.Write (b' 0' 4);  	b = BitConverter.GetBytes (param).ToBE ();  	ms.Write (b' 0' 4);  	if (playload.Length > 0) {  		ms.Write (playload' 0' playload.Length);  	}  	NetStream.WriteAsync (buffer' 0' buffer.Length);  	NetStream.FlushAsync ();  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,SendSocketData,The following statement contains a magic number: using (var ms = new MemoryStream (buffer)) {  	var b = BitConverter.GetBytes (buffer.Length).ToBE ();  	ms.Write (b' 0' 4);  	b = BitConverter.GetBytes (magic).ToBE ();  	ms.Write (b' 0' 2);  	b = BitConverter.GetBytes (ver).ToBE ();  	ms.Write (b' 0' 2);  	b = BitConverter.GetBytes (action).ToBE ();  	ms.Write (b' 0' 4);  	b = BitConverter.GetBytes (param).ToBE ();  	ms.Write (b' 0' 4);  	if (playload.Length > 0) {  		ms.Write (playload' 0' playload.Length);  	}  	NetStream.WriteAsync (buffer' 0' buffer.Length);  	NetStream.FlushAsync ();  }  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,SendSocketData,The following statement contains a magic number: ms.Write (b' 0' 4);  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,SendSocketData,The following statement contains a magic number: ms.Write (b' 0' 2);  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,SendSocketData,The following statement contains a magic number: ms.Write (b' 0' 2);  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,SendSocketData,The following statement contains a magic number: ms.Write (b' 0' 4);  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,SendSocketData,The following statement contains a magic number: ms.Write (b' 0' 4);  
Magic Number,BiliDMLib,DanmakuLoader,D:\newReposJune17\copyliu_bililive_dm\BiliDMLib\DanmakuLoader.cs,SendJoinChannel,The following statement contains a magic number: SendSocketData (7' playload);  
