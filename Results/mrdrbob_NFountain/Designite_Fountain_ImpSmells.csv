Implementation smell,Namespace,Class,File,Method,Description
Long Method,PageOfBob.NFountain,DefaultParser,C:\repos\mrdrbob_NFountain\src\Fountain\DefaultParser.cs,CreateParser,The method has 182 lines of code.
Complex Method,PageOfBob.NFountain,DefaultWriter,C:\repos\mrdrbob_NFountain\src\Fountain\DefaultWriter.cs,Transform,Cyclomatic complexity of the method is 40
Complex Method,PageOfBob.NFountain,Engine,C:\repos\mrdrbob_NFountain\src\Fountain\Engine.cs,Execute,Cyclomatic complexity of the method is 11
Long Parameter List,PageOfBob.NFountain,DefaultParser,C:\repos\mrdrbob_NFountain\src\Fountain\DefaultParser.cs,CreateParser,The method has 9 parameters.
Long Statement,PageOfBob.NFountain.Commands,SetWriterCommand,C:\repos\mrdrbob_NFountain\src\Fountain\Commands\SetWriterCommand.cs,Execute,The length of the statement  "			throw new InvalidOperationException ("Plugin could not be loaded as Writer: " + _pluginArgument.Plugin.Assembly + " - " + _pluginArgument.Plugin.Type); " is 151.
Long Statement,PageOfBob.NFountain,DefaultParser,C:\repos\mrdrbob_NFountain\src\Fountain\DefaultParser.cs,CreateParser,The length of the statement  "	UpperCase = from c in Parse.Char (x => x != '\r' && x != '\n' && Char.ToUpperInvariant (x) == x' "Not newline and same upper as lower") " is 135.
Long Statement,PageOfBob.NFountain,DefaultParser,C:\repos\mrdrbob_NFountain\src\Fountain\DefaultParser.cs,CreateParser,The length of the statement  "	SimpleHeaderStart = from c in ParseExtensions.StringIgnoreCase ("INT").Or (ParseExtensions.StringIgnoreCase ("EXT")).Or (ParseExtensions.StringIgnoreCase ("EST")).Or (ParseExtensions.StringIgnoreCase ("INT./EXT")).Or (ParseExtensions.StringIgnoreCase ("INT/EXT")).Or (ParseExtensions.StringIgnoreCase ("I/E")).Text () " is 317.
Long Statement,PageOfBob.NFountain,DefaultParser,C:\repos\mrdrbob_NFountain\src\Fountain\DefaultParser.cs,CreateParser,The length of the statement  "	SimpleTitlePart = from key in Parse.Char (x => x != ':' && x != '\r' && x != '\n'' "Not : or newline").AtLeastOnce ().Text () " is 125.
Long Statement,PageOfBob.NFountain,DefaultParser,C:\repos\mrdrbob_NFountain\src\Fountain\DefaultParser.cs,CreateParser,The length of the statement  "	MultilineTitlePart = from key in Parse.Char (x => x != ':' && x != '\r' && x != '\n'' "Not : or newline").AtLeastOnce ().Text () " is 128.
Long Statement,PageOfBob.NFountain,DefaultParser,C:\repos\mrdrbob_NFountain\src\Fountain\DefaultParser.cs,CreateParser,The length of the statement  "	Element = from element in Boneyard.Or<Element> (NoteBlock).Or<Element> (LineBreak).Or<Element> (Section).Or<Element> (Header).Or<Element> (Synopsis).Or<Element> (CenteredText).Or<Element> (Transition).Or<Element> (DialogGroup).Or<Element> (Action) " is 247.
Long Statement,PageOfBob.NFountain,DefaultParser,C:\repos\mrdrbob_NFountain\src\Fountain\DefaultParser.cs,CreateParser,The length of the statement  "	NonEscapedContentChar = from txt in Parse.Char (x => x != '\\' && x != '*' && x != '_'' "not slash' star' underscore").AtLeastOnce ().Text () " is 141.
Long Statement,PageOfBob.NFountain,Engine,C:\repos\mrdrbob_NFountain\src\Fountain\Engine.cs,LoadPlugin,The length of the statement  "		NFountainConfigurationSection config = (NFountainConfigurationSection)ConfigurationManager.GetSection ("nFountainConfiguration"); " is 129.
Long Statement,PageOfBob.NFountain,ParseExtensions,C:\repos\mrdrbob_NFountain\src\Fountain\ParseExtensions.cs,StringIgnoreCase,The length of the statement  "	return s.Select (new Func<char' Parser<char>> (ParseExtensions.CharIgnoreCase)).Aggregate (Parse.Return<IEnumerable<char>> (Enumerable.Empty<char> ())' (Parser<IEnumerable<char>> a' Parser<char> p) => a.Concat (p.Once<char> ())).Named (s); " is 239.
Magic Number,PageOfBob.NFountain,DefaultWriter,C:\repos\mrdrbob_NFountain\src\Fountain\DefaultWriter.cs,WriteCentered,The following statement contains a magic number: foreach (string line in BreakLines (text' width)) {  	int indent = (width - line.Length);  	if (indent % 2 != 0)  		indent -= 1;  	if (indent > 0)  		writer.Write (new string (' '' indent / 2));  	writer.WriteLine (line);  }  
Magic Number,PageOfBob.NFountain,DefaultWriter,C:\repos\mrdrbob_NFountain\src\Fountain\DefaultWriter.cs,WriteCentered,The following statement contains a magic number: foreach (string line in BreakLines (text' width)) {  	int indent = (width - line.Length);  	if (indent % 2 != 0)  		indent -= 1;  	if (indent > 0)  		writer.Write (new string (' '' indent / 2));  	writer.WriteLine (line);  }  
Magic Number,PageOfBob.NFountain,DefaultWriter,C:\repos\mrdrbob_NFountain\src\Fountain\DefaultWriter.cs,WriteCentered,The following statement contains a magic number: if (indent % 2 != 0)  	indent -= 1;  
Magic Number,PageOfBob.NFountain,DefaultWriter,C:\repos\mrdrbob_NFountain\src\Fountain\DefaultWriter.cs,WriteCentered,The following statement contains a magic number: if (indent > 0)  	writer.Write (new string (' '' indent / 2));  
Magic Number,PageOfBob.NFountain,DefaultWriter,C:\repos\mrdrbob_NFountain\src\Fountain\DefaultWriter.cs,WriteCentered,The following statement contains a magic number: writer.Write (new string (' '' indent / 2));  
Magic Number,PageOfBob.NFountain,DefaultWriter,C:\repos\mrdrbob_NFountain\src\Fountain\DefaultWriter.cs,DefaultWriter,The following statement contains a magic number: Columns = 80;  
Magic Number,PageOfBob.NFountain,DefaultWriter,C:\repos\mrdrbob_NFountain\src\Fountain\DefaultWriter.cs,DefaultWriter,The following statement contains a magic number: CharacterIndent = 30;  
Magic Number,PageOfBob.NFountain,DefaultWriter,C:\repos\mrdrbob_NFountain\src\Fountain\DefaultWriter.cs,DefaultWriter,The following statement contains a magic number: CharacterWidth = 30;  
Magic Number,PageOfBob.NFountain,DefaultWriter,C:\repos\mrdrbob_NFountain\src\Fountain\DefaultWriter.cs,DefaultWriter,The following statement contains a magic number: DialogIndent = 20;  
Magic Number,PageOfBob.NFountain,DefaultWriter,C:\repos\mrdrbob_NFountain\src\Fountain\DefaultWriter.cs,DefaultWriter,The following statement contains a magic number: DialogWidth = 40;  
Magic Number,PageOfBob.NFountain,DefaultWriter,C:\repos\mrdrbob_NFountain\src\Fountain\DefaultWriter.cs,DefaultWriter,The following statement contains a magic number: ParentheticalIndent = 25;  
Magic Number,PageOfBob.NFountain,DefaultWriter,C:\repos\mrdrbob_NFountain\src\Fountain\DefaultWriter.cs,DefaultWriter,The following statement contains a magic number: ParentheticalWidth = 30;  
Magic Number,PageOfBob.NFountain,Engine,C:\repos\mrdrbob_NFountain\src\Fountain\Engine.cs,Execute,The following statement contains a magic number: try {  	System.Collections.IEnumerator argsEn = args.GetEnumerator ();  	while (argsEn.MoveNext ()) {  		string arg = (string)argsEn.Current;  		if (arg.StartsWith ("-")) {  			ICommand cmd;  			if (!_commands.TryGetValue (arg.Substring (1)' out cmd)) {  				// Show usage  				return 2;  			}  			cmd.Init (this);  			if (cmd.Arguments != null) {  				foreach (CommandArgument cmdarg in cmd.Arguments) {  					if (!argsEn.MoveNext () || !cmdarg.TryParse ((string)argsEn.Current)) {  						Console.WriteLine ("Failed to parse argument {0} for -{1} command."' cmdarg.Name' cmd.Trigger);  						return 3;  					}  				}  			}  			cmd.Execute (this);  		}  		else {  			// Show usage  			return 1;  		}  	}  	if (Input == null)  		Input = Console.In;  	if (Output == null)  		Output = Console.OpenStandardOutput ();  	if (Parser == null)  		Parser = new Plugins.DefaultParserModule ();  	if (Writer == null)  		Writer = new Plugins.DefaultWriterModule ();  	var parsed = Parser.Transform (Input);  	Writer.Transform (parsed' Output);  	#if !DEBUG  				} catch(Exception ex) { 				Console.Error.WriteLine("An uncaught exception has occurred:"); 				Console.Error.WriteLine(ex.Message); 				Console.Error.WriteLine(ex.StackTrace); 				while((ex = ex.InnerException) != null) { 					Console.Error.WriteLine("Inner Exception: " + ex.Message); 					Console.Error.WriteLine(ex.StackTrace); 				} #endif  }  finally {  	if (Input != null)  		Input.Dispose ();  	if (Output != null)  		Output.Dispose ();  }  
Magic Number,PageOfBob.NFountain,Engine,C:\repos\mrdrbob_NFountain\src\Fountain\Engine.cs,Execute,The following statement contains a magic number: try {  	System.Collections.IEnumerator argsEn = args.GetEnumerator ();  	while (argsEn.MoveNext ()) {  		string arg = (string)argsEn.Current;  		if (arg.StartsWith ("-")) {  			ICommand cmd;  			if (!_commands.TryGetValue (arg.Substring (1)' out cmd)) {  				// Show usage  				return 2;  			}  			cmd.Init (this);  			if (cmd.Arguments != null) {  				foreach (CommandArgument cmdarg in cmd.Arguments) {  					if (!argsEn.MoveNext () || !cmdarg.TryParse ((string)argsEn.Current)) {  						Console.WriteLine ("Failed to parse argument {0} for -{1} command."' cmdarg.Name' cmd.Trigger);  						return 3;  					}  				}  			}  			cmd.Execute (this);  		}  		else {  			// Show usage  			return 1;  		}  	}  	if (Input == null)  		Input = Console.In;  	if (Output == null)  		Output = Console.OpenStandardOutput ();  	if (Parser == null)  		Parser = new Plugins.DefaultParserModule ();  	if (Writer == null)  		Writer = new Plugins.DefaultWriterModule ();  	var parsed = Parser.Transform (Input);  	Writer.Transform (parsed' Output);  	#if !DEBUG  				} catch(Exception ex) { 				Console.Error.WriteLine("An uncaught exception has occurred:"); 				Console.Error.WriteLine(ex.Message); 				Console.Error.WriteLine(ex.StackTrace); 				while((ex = ex.InnerException) != null) { 					Console.Error.WriteLine("Inner Exception: " + ex.Message); 					Console.Error.WriteLine(ex.StackTrace); 				} #endif  }  finally {  	if (Input != null)  		Input.Dispose ();  	if (Output != null)  		Output.Dispose ();  }  
Magic Number,PageOfBob.NFountain,Engine,C:\repos\mrdrbob_NFountain\src\Fountain\Engine.cs,Execute,The following statement contains a magic number: while (argsEn.MoveNext ()) {  	string arg = (string)argsEn.Current;  	if (arg.StartsWith ("-")) {  		ICommand cmd;  		if (!_commands.TryGetValue (arg.Substring (1)' out cmd)) {  			// Show usage  			return 2;  		}  		cmd.Init (this);  		if (cmd.Arguments != null) {  			foreach (CommandArgument cmdarg in cmd.Arguments) {  				if (!argsEn.MoveNext () || !cmdarg.TryParse ((string)argsEn.Current)) {  					Console.WriteLine ("Failed to parse argument {0} for -{1} command."' cmdarg.Name' cmd.Trigger);  					return 3;  				}  			}  		}  		cmd.Execute (this);  	}  	else {  		// Show usage  		return 1;  	}  }  
Magic Number,PageOfBob.NFountain,Engine,C:\repos\mrdrbob_NFountain\src\Fountain\Engine.cs,Execute,The following statement contains a magic number: while (argsEn.MoveNext ()) {  	string arg = (string)argsEn.Current;  	if (arg.StartsWith ("-")) {  		ICommand cmd;  		if (!_commands.TryGetValue (arg.Substring (1)' out cmd)) {  			// Show usage  			return 2;  		}  		cmd.Init (this);  		if (cmd.Arguments != null) {  			foreach (CommandArgument cmdarg in cmd.Arguments) {  				if (!argsEn.MoveNext () || !cmdarg.TryParse ((string)argsEn.Current)) {  					Console.WriteLine ("Failed to parse argument {0} for -{1} command."' cmdarg.Name' cmd.Trigger);  					return 3;  				}  			}  		}  		cmd.Execute (this);  	}  	else {  		// Show usage  		return 1;  	}  }  
Magic Number,PageOfBob.NFountain,Engine,C:\repos\mrdrbob_NFountain\src\Fountain\Engine.cs,Execute,The following statement contains a magic number: if (arg.StartsWith ("-")) {  	ICommand cmd;  	if (!_commands.TryGetValue (arg.Substring (1)' out cmd)) {  		// Show usage  		return 2;  	}  	cmd.Init (this);  	if (cmd.Arguments != null) {  		foreach (CommandArgument cmdarg in cmd.Arguments) {  			if (!argsEn.MoveNext () || !cmdarg.TryParse ((string)argsEn.Current)) {  				Console.WriteLine ("Failed to parse argument {0} for -{1} command."' cmdarg.Name' cmd.Trigger);  				return 3;  			}  		}  	}  	cmd.Execute (this);  }  else {  	// Show usage  	return 1;  }  
Magic Number,PageOfBob.NFountain,Engine,C:\repos\mrdrbob_NFountain\src\Fountain\Engine.cs,Execute,The following statement contains a magic number: if (arg.StartsWith ("-")) {  	ICommand cmd;  	if (!_commands.TryGetValue (arg.Substring (1)' out cmd)) {  		// Show usage  		return 2;  	}  	cmd.Init (this);  	if (cmd.Arguments != null) {  		foreach (CommandArgument cmdarg in cmd.Arguments) {  			if (!argsEn.MoveNext () || !cmdarg.TryParse ((string)argsEn.Current)) {  				Console.WriteLine ("Failed to parse argument {0} for -{1} command."' cmdarg.Name' cmd.Trigger);  				return 3;  			}  		}  	}  	cmd.Execute (this);  }  else {  	// Show usage  	return 1;  }  
Magic Number,PageOfBob.NFountain,Engine,C:\repos\mrdrbob_NFountain\src\Fountain\Engine.cs,Execute,The following statement contains a magic number: if (!_commands.TryGetValue (arg.Substring (1)' out cmd)) {  	// Show usage  	return 2;  }  
Magic Number,PageOfBob.NFountain,Engine,C:\repos\mrdrbob_NFountain\src\Fountain\Engine.cs,Execute,The following statement contains a magic number: return 2;  
Magic Number,PageOfBob.NFountain,Engine,C:\repos\mrdrbob_NFountain\src\Fountain\Engine.cs,Execute,The following statement contains a magic number: if (cmd.Arguments != null) {  	foreach (CommandArgument cmdarg in cmd.Arguments) {  		if (!argsEn.MoveNext () || !cmdarg.TryParse ((string)argsEn.Current)) {  			Console.WriteLine ("Failed to parse argument {0} for -{1} command."' cmdarg.Name' cmd.Trigger);  			return 3;  		}  	}  }  
Magic Number,PageOfBob.NFountain,Engine,C:\repos\mrdrbob_NFountain\src\Fountain\Engine.cs,Execute,The following statement contains a magic number: foreach (CommandArgument cmdarg in cmd.Arguments) {  	if (!argsEn.MoveNext () || !cmdarg.TryParse ((string)argsEn.Current)) {  		Console.WriteLine ("Failed to parse argument {0} for -{1} command."' cmdarg.Name' cmd.Trigger);  		return 3;  	}  }  
Magic Number,PageOfBob.NFountain,Engine,C:\repos\mrdrbob_NFountain\src\Fountain\Engine.cs,Execute,The following statement contains a magic number: if (!argsEn.MoveNext () || !cmdarg.TryParse ((string)argsEn.Current)) {  	Console.WriteLine ("Failed to parse argument {0} for -{1} command."' cmdarg.Name' cmd.Trigger);  	return 3;  }  
Magic Number,PageOfBob.NFountain,Engine,C:\repos\mrdrbob_NFountain\src\Fountain\Engine.cs,Execute,The following statement contains a magic number: return 3;  
