Implementation smell,Namespace,Class,File,Method,Description
Long Method,Firespitter.engine,FSengineBladed,C:\repos\snjo_Firespitter\Firespitter\engine\FS engine modules\FSengineBladed.cs,getCollectiveInput,The method has 122 lines of code.
Long Method,Firespitter.engine,FSengineSounds,C:\repos\snjo_Firespitter\Firespitter\engine\FSengineSounds.cs,FixedUpdate,The method has 139 lines of code.
Complex Method,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuMainMenu,Cyclomatic complexity of the method is 12
Complex Method,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuSettings,Cyclomatic complexity of the method is 10
Complex Method,Firespitter.customization,FSfuelSwitch,C:\repos\snjo_Firespitter\Firespitter\customization\FSfuelSwitch.cs,setupTankList,Cyclomatic complexity of the method is 9
Complex Method,Firespitter.customization,FSmeshSwitch,C:\repos\snjo_Firespitter\Firespitter\customization\FSmeshSwitch.cs,setObject,Cyclomatic complexity of the method is 10
Complex Method,Firespitter.customization,FStextureSwitch2,C:\repos\snjo_Firespitter\Firespitter\customization\FStextureSwitch2.cs,initializeData,Cyclomatic complexity of the method is 10
Complex Method,Firespitter.customization,FStextureSwitch,C:\repos\snjo_Firespitter\Firespitter\customization\FStextureSwitch.cs,OnStart,Cyclomatic complexity of the method is 13
Complex Method,Firespitter.engine,FSpropellerTweak,C:\repos\snjo_Firespitter\Firespitter\engine\FSpropellerTweak.cs,updateExhaustNumber,Cyclomatic complexity of the method is 9
Complex Method,Firespitter.engine,FScopterThrottle,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FScopterThrottle.cs,OnUpdate,Cyclomatic complexity of the method is 12
Complex Method,Firespitter.engine,FShoverThrottle,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FShoverThrottle.cs,OnUpdate,Cyclomatic complexity of the method is 15
Complex Method,Firespitter.engine,FSplanePropellerSpinner,C:\repos\snjo_Firespitter\Firespitter\engine\FSplanePropellerSpinner.cs,OnStart,Cyclomatic complexity of the method is 9
Complex Method,Firespitter.engine,FSplanePropellerSpinner,C:\repos\snjo_Firespitter\Firespitter\engine\FSplanePropellerSpinner.cs,OnUpdate,Cyclomatic complexity of the method is 11
Complex Method,Firespitter.engine,FSengineSounds,C:\repos\snjo_Firespitter\Firespitter\engine\FSengineSounds.cs,FixedUpdate,Cyclomatic complexity of the method is 10
Complex Method,Firespitter.engine,FSengineSounds,C:\repos\snjo_Firespitter\Firespitter\engine\FSengineSounds.cs,OnGUI,Cyclomatic complexity of the method is 9
Complex Method,Firespitter.engine,FSmultiAxisEngine,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSmultiAxisEngine.cs,OnStart,Cyclomatic complexity of the method is 11
Complex Method,Firespitter.engine,FSrotorTrim,C:\repos\snjo_Firespitter\Firespitter\engine\FSrotorTrim.cs,FixedUpdate,Cyclomatic complexity of the method is 8
Complex Method,Firespitter.engine,FStailRotorThrust,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FStailRotorThrust.cs,FixedUpdate,Cyclomatic complexity of the method is 10
Complex Method,Firespitter.engine,FSVTOLrotator,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSVTOLrotator.cs,OnUpdate,Cyclomatic complexity of the method is 14
Complex Method,Firespitter.engine,FSVTOLrotator,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSVTOLrotator.cs,OnGUI,Cyclomatic complexity of the method is 10
Complex Method,Firespitter.info,FSinfoPopup,C:\repos\snjo_Firespitter\Firespitter\info\FSinfoPopup.cs,drawWindow,Cyclomatic complexity of the method is 10
Complex Method,Firespitter.info,FSinfoPopup,C:\repos\snjo_Firespitter\Firespitter\info\FSinfoPopup.cs,OnGUI,Cyclomatic complexity of the method is 8
Complex Method,Firespitter,Tools,C:\repos\snjo_Firespitter\Firespitter\tools\FStools.cs,parseNames,Cyclomatic complexity of the method is 9
Long Parameter List,Firespitter.customization,FStextureSwitch,C:\repos\snjo_Firespitter\Firespitter\customization\FStextureSwitch.cs,getNodeValues,The method has 6 parameters. Parameters: node' nodeLoader' nodeName' valueName' outputDict' outputList
Long Identifier,Firespitter.engine,FSmultiAxisEngine,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSmultiAxisEngine.cs,,The length of the parameter pitchGimbalExtremeTransformName is 31.
Long Identifier,Firespitter.engine,FSmultiAxisEngine,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSmultiAxisEngine.cs,,The length of the parameter rollGimbalExtremeTransformName is 30.
Long Identifier,Firespitter.engine,FSrotorTrim,C:\repos\snjo_Firespitter\Firespitter\engine\FSrotorTrim.cs,,The length of the parameter thrustTransformDefaultPosition is 30.
Long Statement,Firespitter.aero,FSbladeLiftSurface,C:\repos\snjo_Firespitter\Firespitter\aero\FSbladeLiftSurface.cs,GetVelocity,The length of the statement  "            //newVelocity = commonRigidBody.velocity + Krakensbane.GetFrameVelocity() + Vector3.Cross(commonRigidBody.angularVelocity' liftTransform.position - commonRigidBody.position); " is 174.
Long Statement,Firespitter.aero,FSbladeLiftSurface,C:\repos\snjo_Firespitter\Firespitter\aero\FSbladeLiftSurface.cs,getLiftVector,The length of the statement  "            Vector3 ParallelInPlane = Vector3.Exclude(liftTransform.up' bladeVelocity).normalized;  //Projection of velocity vector onto the plane of the wing " is 146.
Long Statement,Firespitter.aero,FSbladeLiftSurface,C:\repos\snjo_Firespitter\Firespitter\aero\FSbladeLiftSurface.cs,getLiftVector,The length of the statement  "            Vector3 perp = Vector3.Cross(liftTransform.up' ParallelInPlane).normalized;       //This just gives the vector to cross with the velocity vector " is 144.
Long Statement,Firespitter.aero,FSbladeLiftSurface,C:\repos\snjo_Firespitter\Firespitter\aero\FSbladeLiftSurface.cs,FixedUpdate,The length of the statement  "                commonRigidBody.AddForceAtPosition(liftAndDrag.y * dragMultiplier * -commonRigidBody.GetPointVelocity(liftTransform.position).normalized' liftTransform.position); " is 162.
Long Statement,Firespitter.cockpit,FSActionGroupSwitch,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSActionGroupSwitch.cs,buttonClick,The length of the statement  "                switchObjectTransform.GetComponent<Renderer>().material.SetColor("_EmissiveColor"' new Color(onEmissiveColor.x' onEmissiveColor.y' onEmissiveColor.z)); " is 151.
Long Statement,Firespitter.cockpit,FSActionGroupSwitch,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSActionGroupSwitch.cs,buttonClick,The length of the statement  "                                    ScreenMessages.PostScreenMessage(new ScreenMessage("hover height set to " + Math.Round(copterEngine.hoverHeight' 1)' 2f' ScreenMessageStyle.UPPER_CENTER)); " is 155.
Long Statement,Firespitter.cockpit,FSActionGroupSwitch,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSActionGroupSwitch.cs,Update,The length of the statement  "                        switchObjectTransform.GetComponent<Renderer>().material.SetColor("_EmissiveColor"' new Color(offEmissiveColor.x' offEmissiveColor.y' offEmissiveColor.z' 1f)); " is 158.
Long Statement,Firespitter.cockpit,FSmonitorScript,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorScript.cs,createTextGrid,The length of the statement  "                        //GameObject newPlate = (GameObject)Instantiate(baseCharPlate' baseCharPlate.transform.position + new Vector3(charSpacing * (charCount)' 0f' lineSpacing * (lineCount))' Quaternion.Euler(new Vector3(-90f'0f'0f))); " is 212.
Long Statement,Firespitter.cockpit,FSmonitorScript,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorScript.cs,createTextGrid,The length of the statement  "                        GameObject newPlate = (GameObject)Instantiate(baseCharPlate' baseCharPlate.transform.position' baseCharPlate.transform.rotation); " is 129.
Long Statement,Firespitter.cockpit,FSmonitorScript,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorScript.cs,OnUpdate,The length of the statement  "            if (CameraManager.Instance.currentCameraMode == CameraManager.CameraMode.IVA)            //|| CameraManager.Instance.currentCameraMode == CameraManager.CameraMode.Internal) " is 172.
Long Statement,Firespitter.cockpit,FSmonitorScript,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorScript.cs,parseStringArray,The length of the statement  "                            lineList[lineCount][charCount].GetComponent<Renderer>().material.mainTextureOffset = (getSheetCharPosition(paddedChar) * spriteScale) - new Vector2(spriteShift' 0f); " is 165.
Long Statement,Firespitter.cockpit,FSmonitorScript,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorScript.cs,parseSingleString,The length of the statement  "                lineList[lineNum][charNum].GetComponent<Renderer>().material.mainTextureOffset = (getSheetCharPosition(c[i]) * spriteScale) - new Vector2(spriteShift' 0f); " is 155.
Long Statement,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,OnUpdate,The length of the statement  "            if (CameraManager.Instance.currentCameraMode == CameraManager.CameraMode.IVA && vessel == FlightGlobals.ActiveVessel)            //|| CameraManager.Instance.currentCameraMode == CameraManager.CameraMode.Internal) " is 212.
Long Statement,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuFlightData,The length of the statement  "            //        refTransform.rotation = Quaternion.LookRotation(vessel.ReferenceTransform.up' -vessel.ReferenceTransform.forward);         " is 124.
Long Statement,Firespitter.customization,FSfuelSwitch,C:\repos\snjo_Firespitter\Firespitter\customization\FSfuelSwitch.cs,setupTankList,The length of the statement  "                        Debug.Log("FSfuelSwitch: error parsing resource amount " + tankCount + "/" + amountCount + ": '" + resourceTankArray[amountCount] + "': '" + resourceAmountArray[amountCount].Trim()+"'"); " is 186.
Long Statement,Firespitter.customization,FSfuelSwitch,C:\repos\snjo_Firespitter\Firespitter\customization\FSfuelSwitch.cs,setupTankList,The length of the statement  "            // Then find the kinds of resources each tank holds' and fill them with the amounts found previously' or the amount hey held last (values kept in save persistence/craft) " is 169.
Long Statement,Firespitter.customization,FSmeshSwitch,C:\repos\snjo_Firespitter\Firespitter\customization\FSmeshSwitch.cs,setObject,The length of the statement  "            // enable the selected one last because there might be several entries with the same object' and we don't want to disable it after it's been enabled. " is 149.
Long Statement,Firespitter.customization,FStextureSwitch2,C:\repos\snjo_Firespitter\Firespitter\customization\FStextureSwitch2.cs,useMap,The length of the statement  "            debug.debugMessage("maplist count: " + mapList.Count + "' selectedTexture: " + selectedTexture + "' texlist Count: " + texList.Count); " is 134.
Long Statement,Firespitter.customization,FStextureSwitch2,C:\repos\snjo_Firespitter\Firespitter\customization\FStextureSwitch2.cs,useMap,The length of the statement  "                        debug.debugMessage("not setting currentTextureName. selectedTexture is " + selectedTexture + "' texDispList count is" + textureDisplayList.Count + "' texList count is " + texList.Count); " is 186.
Long Statement,Firespitter.customization,FStextureSwitch2,C:\repos\snjo_Firespitter\Firespitter\customization\FStextureSwitch2.cs,useMap,The length of the statement  "                    debug.debugMessage("useMap' index out of range error' maplist count: " + mapList.Count + "' selectedTexture: " + selectedTexture); " is 130.
Long Statement,Firespitter.customization,FStextureSwitch2,C:\repos\snjo_Firespitter\Firespitter\customization\FStextureSwitch2.cs,initializeData,The length of the statement  "                debug.debugMessage("found " + texList.Count + " textures' using number " + selectedTexture + "' found " + objectList.Count + " objects' " + mapList.Count + " maps"); " is 165.
Long Statement,Firespitter.customization,FStextureSwitch2,C:\repos\snjo_Firespitter\Firespitter\customization\FStextureSwitch2.cs,initializeData,The length of the statement  "                        if (t != null && t.gameObject.GetComponent<Renderer>() != null) // check for if the object even has a mesh. otherwise part list loading crashes " is 143.
Long Statement,Firespitter.customization,FStextureSwitch,C:\repos\snjo_Firespitter\Firespitter\customization\FStextureSwitch.cs,OnStart,The length of the statement  "            debug.debugMessage("FStextureSwitch found " + texList.Count + " textures' using number " + selectedTexture + "' found " + objectList.Count + " objects' " + mapList.Count + " maps"); " is 181.
Long Statement,Firespitter.customization,FStextureSwitch,C:\repos\snjo_Firespitter\Firespitter\customization\FStextureSwitch.cs,OnStart,The length of the statement  "                if (targetObjectTransform != null && targetObjectTransform.gameObject.GetComponent<Renderer>() != null) // check for if the object even has a mesh. otherwise part list loading crashes " is 183.
Long Statement,Firespitter.engine,FSengineBladed,C:\repos\snjo_Firespitter\Firespitter\engine\FS engine modules\FSengineBladed.cs,updateRPM,The length of the statement  "                //float RPMgain = Mathf.Lerp(powerProduction' maxPowerProduction' propTweak.engineLengthSlider) * TimeWarp.deltaTime * fuelReceivedNormalized; " is 142.
Long Statement,Firespitter.engine,FSengineBladed,C:\repos\snjo_Firespitter\Firespitter\engine\FS engine modules\FSengineBladed.cs,updateRPM,The length of the statement  "                RPM -= (engineBrake + (Mathf.Abs(requestedThrottle) * powerDrain)) * TimeWarp.deltaTime; // for reducing engine power when it's no longer ignited " is 145.
Long Statement,Firespitter.engine,FSengineBladed,C:\repos\snjo_Firespitter\Firespitter\engine\FS engine modules\FSengineBladed.cs,setBladePitch,The length of the statement  "                float bladeRotation = collective + (cyclic.x * bladePitchAligned * steeringResponse) + (cyclic.y * bladeRollAligned * steeringResponse * rollMultiplier); " is 153.
Long Statement,Firespitter.engine,FSengineBladed,C:\repos\snjo_Firespitter\Firespitter\engine\FS engine modules\FSengineBladed.cs,setBladePitch,The length of the statement  "                //bladeLifts[i].pointVelocityMagnitude = Mathf.Clamp((RPM * circumeference) / 60f' 0' 340f) * rotationDirection; // clamping to supersonic 340 m/s " is 146.
Long Statement,Firespitter.engine,FSengineBladed,C:\repos\snjo_Firespitter\Firespitter\engine\FS engine modules\FSengineBladed.cs,getCollectiveInput,The length of the statement  "                    //Debug.Log(" as " + Math.Round(airSpeedThroughRotor' 2) + " maxClimb " +  Math.Round(maxClimb' 2) + " hoverHeight " +  (int)hoverHeight + " offset " + heightOffset); " is 166.
Long Statement,Firespitter.engine,FSalternator,C:\repos\snjo_Firespitter\Firespitter\engine\FSalternator.cs,OnStart,The length of the statement  "                engineScaleMultiplier = Mathf.Max(0.1f' propTweak.engineLengthSlider); // engine scale can be 0 or negative. That would be a bad multiplier. " is 140.
Long Statement,Firespitter.engine,FSengineHover,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSengineHover.cs,printSpeed,The length of the statement  "            ScreenMessages.PostScreenMessage(new ScreenMessage("Hover Climb Rate: " + verticalSpeed' 1f' ScreenMessageStyle.UPPER_CENTER)); " is 127.
Long Statement,Firespitter.engine,FSgroundParticles,C:\repos\snjo_Firespitter\Firespitter\engine\FSgroundParticles.cs,Start,The length of the statement  "                //Setting the values for the particle system. the animator is never doing anything exciting' all particle motion is handled in the late update code " is 147.
Long Statement,Firespitter.engine,FSgroundParticles,C:\repos\snjo_Firespitter\Firespitter\engine\FSgroundParticles.cs,Update,The length of the statement  "            // shoot a ray from the thrustTransform' along the direction of thrust. If it hits the ground' the distance value will be less than maxDistance'  " is 144.
Long Statement,Firespitter.engine,FSgroundParticles,C:\repos\snjo_Firespitter\Firespitter\engine\FSgroundParticles.cs,Update,The length of the statement  "                // layer 15 is the landscap/buildine layer. parts are layer 10' ignore those. the runway should also be layer 15' but it's not registering properly... " is 150.
Long Statement,Firespitter.engine,FSgroundParticles,C:\repos\snjo_Firespitter\Firespitter\engine\FSgroundParticles.cs,Update,The length of the statement  "            //float seaAltitude = Vector3.Distance(washDisc.transform.position' vessel.mainBody.position) - (float)vessel.mainBody.Radius; " is 126.
Long Statement,Firespitter.engine,FSgroundParticles,C:\repos\snjo_Firespitter\Firespitter\engine\FSgroundParticles.cs,Update,The length of the statement  "            // rotate the disc so it's horizontal (does not follow the terrain slope though. Maybe there is a terrain normal to look at' but it looks OK on hills as is) " is 156.
Long Statement,Firespitter.engine,FSgroundParticles,C:\repos\snjo_Firespitter\Firespitter\engine\FSgroundParticles.cs,LateUpdate,The length of the statement  "                // Oh hey' you can't access Interpolate Triangles on mesh emitters' so I have to this junk! Fuck you' whoever made the old Unity particle system. " is 145.
Long Statement,Firespitter.engine,FSgroundParticles,C:\repos\snjo_Firespitter\Firespitter\engine\FSgroundParticles.cs,LateUpdate,The length of the statement  "                    //particles spawn on the outer points of the disc. move it a random amount towrds the center to distribute the spawning. a high number of outer points makes it look OK without exra sideways randomness. " is 201.
Long Statement,Firespitter.engine,FSgroundParticles,C:\repos\snjo_Firespitter\Firespitter\engine\FSgroundParticles.cs,LateUpdate,The length of the statement  "                particles[i].position -= offset.normalized * 0.01f * Mathf.Clamp((maxDistance - currentDistance) - offset.magnitude' 1f' 15f); " is 126.
Long Statement,Firespitter.engine,FSengine,C:\repos\snjo_Firespitter\Firespitter\engine\FS engine modules\FSengine.cs,FixedUpdate,The length of the statement  "                RPM -= (engineBrake + (Mathf.Abs(requestedThrottle) * powerDrain)) * TimeWarp.deltaTime; // for reducing engine power when it's no longer ignited                                 " is 145.
Long Statement,Firespitter.engine,FSengine,C:\repos\snjo_Firespitter\Firespitter\engine\FS engine modules\FSengine.cs,FixedUpdate,The length of the statement  "            float applyThrust = thrustPerTransform * RPMnormalized * atmosphericThrustCurve.Evaluate((float)vessel.atmDensity) * velocityCurve.Evaluate(thrustTransformRelativeSpeed); " is 170.
Long Statement,Firespitter.engine,FSengine,C:\repos\snjo_Firespitter\Firespitter\engine\FS engine modules\FSengine.cs,calculateFinalThrust,The length of the statement  "            finalThrust = maxThrust * Mathf.Clamp(requestedThrottle' -maxThrottleNormalized' maxThrottleNormalized) * throttleThrustCurve.Evaluate(requestedThrottle); " is 154.
Long Statement,Firespitter.engine,FSengine,C:\repos\snjo_Firespitter\Firespitter\engine\FS engine modules\FSengine.cs,consumeResources,The length of the statement  "                    double requestFuelAmount = fuelConsumptionCurve.Evaluate(getWorkDone()) * maxThrust * resourceList[i].ratio * TimeWarp.deltaTime; " is 129.
Long Statement,Firespitter.engine,FSengine,C:\repos\snjo_Firespitter\Firespitter\engine\FS engine modules\FSengine.cs,consumeResources,The length of the statement  "                        //Debug.Log("fR/rFA: " + fuelReceived / requestFuelAmount + " - clamped: " + Tools.Clamp(fuelReceived / requestFuelAmount' 0d' 1d)); " is 132.
Long Statement,Firespitter.engine,FSengine,C:\repos\snjo_Firespitter\Firespitter\engine\FS engine modules\FSengine.cs,consumeResources,The length of the statement  "                            debug.debugMessage("FO " + resourceList[i].name + " == " + resourceList[i].currentSupply + "' requested" + requestFuelAmount + " received " + fuelReceived); " is 156.
Long Statement,Firespitter.engine,FSengine,C:\repos\snjo_Firespitter\Firespitter\engine\FS engine modules\FSengine.cs,consumeResources,The length of the statement  "                            debug.debugMessage("not FO: " + resourceList[i].name + " : " + resourceList[i].currentSupply + "' requested" + requestFuelAmount + " received " + fuelReceived); " is 160.
Long Statement,Firespitter.engine,FSpropellerTweak,C:\repos\snjo_Firespitter\Firespitter\engine\FSpropellerTweak.cs,updateBladeList,The length of the statement  "                    blades[i].transform.localRotation = Quaternion.Euler(propellerRotationAxis * (originalBladeRotation + ((360f / bladeNumber) * (i)))); " is 133.
Long Statement,Firespitter.engine,FSpropellerTweak,C:\repos\snjo_Firespitter\Firespitter\engine\FSpropellerTweak.cs,updateEngineLength,The length of the statement  "                engineExtension.transform.localScale = Vector3.one + (engineExtensionAxis * Mathf.Lerp(engineScaleRange.x' engineScaleRange.y' engineLengthSlider)); " is 148.
Long Statement,Firespitter.engine,FSpropellerTweak,C:\repos\snjo_Firespitter\Firespitter\engine\FSpropellerTweak.cs,initialize,The length of the statement  "                if (propellerRoot == null) Debug.Log("FSpropellerTweak: Nasty error' no propeller root found named " + propellerRootName); " is 122.
Long Statement,Firespitter.engine,FSvelocityController,C:\repos\snjo_Firespitter\Firespitter\engine\FSvelocityController.cs,updateThruster,The length of the statement  "                    //part.gameObject.GetComponent<Rigidbody>().AddForceAtPosition(-thrustDirection * thrustModifier * maxThrust' t.transform.position); " is 132.
Long Statement,Firespitter.engine,FScopterThrottle,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FScopterThrottle.cs,OnUpdate,The length of the statement  "                        if (RotorParent.transform.localEulerAngles.y > parkedBladeRotation + 1.1f || RotorParent.transform.localEulerAngles.y < parkedBladeRotation - 1.1f) " is 147.
Long Statement,Firespitter.engine,FSplanePropellerSpinner,C:\repos\snjo_Firespitter\Firespitter\engine\FSplanePropellerSpinner.cs,OnUpdate,The length of the statement  "                        // if you are using duplicated blades' you don't use a rotor disc' but blur sections for each blade' and need to slow down the rotor itself. " is 140.
Long Statement,Firespitter.engine,FSplanePropellerSpinner,C:\repos\snjo_Firespitter\Firespitter\engine\FSplanePropellerSpinner.cs,OnUpdate,The length of the statement  "                                propeller.Rotate(Vector3.forward * ((rotorDiscSpeed * (1 + (5 * engine.fsengine.RPMnormalized))) * TimeWarp.deltaTime)); " is 120.
Long Statement,Firespitter.engine,FSengineSounds,C:\repos\snjo_Firespitter\Firespitter\engine\FSengineSounds.cs,FixedUpdate,The length of the statement  "            // if the engine module is stock' I might mess with it via atmosphericNerf. If it's FSengine' it will only be changed by propeller tweak at the start of flight (or maybe applyDamage)' but I need to catch that. " is 209.
Long Statement,Firespitter.engine,FSengineSounds,C:\repos\snjo_Firespitter\Firespitter\engine\FSengineSounds.cs,OnGUI,The length of the statement  "                GUI.Label(new Rect(menuItemRect.x + ((buttonSize.x + 10f) * 3)' menuItemRect.y' menuItemSize.x - buttonSize.x - 10f' buttonSize.y)' " is 131.
Long Statement,Firespitter.engine,FSengineSounds,C:\repos\snjo_Firespitter\Firespitter\engine\FSengineSounds.cs,OnGUI,The length of the statement  "                warning = GUI.TextField(new Rect(menuItemRect.x + buttonSize.x + 10f' menuItemRect.y' menuItemSize.x - buttonSize.x - 10f' buttonSize.y)' warning); " is 147.
Long Statement,Firespitter.engine,FSmultiAxisEngine,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSmultiAxisEngine.cs,updateGimbal,The length of the statement  "            gimbalTransform.localRotation = gimbalDefaultRotation * Quaternion.AngleAxis(this.gimbalAnglePitch' gimbalTransform.InverseTransformDirection(vessel.ReferenceTransform.right)) * Quaternion.AngleAxis(gimbalAngleYaw' gimbalTransform.InverseTransformDirection(vessel.ReferenceTransform.forward)); " is 293.
Long Statement,Firespitter.engine,FSmultiAxisEngine,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSmultiAxisEngine.cs,OnFixedUpdate,The length of the statement  "                rotateParts(new Vector3(gimbalResult.x * axisMultiplier.x' gimbalResult.y * axisMultiplier.y' gimbalResult.z * axisMultiplier.z)); " is 130.
Long Statement,Firespitter.engine,FSpropellerAtmosphericNerf,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSpropellerAtmosphericNerf.cs,OnUpdate,The length of the statement  "            if ((atmosphericModifier > 1f && thrustModifier > 1f) || disableAtmosphericNerf) atmosphericModifier = 1f; // not setting modifier to 1 at thrustModifier 1 or lower allows for engine that are better than normal in atmospeheres above 1 " is 234.
Long Statement,Firespitter.engine,FSrotorTrim,C:\repos\snjo_Firespitter\Firespitter\engine\FSrotorTrim.cs,translateThrustTransform,The length of the statement  "            partTransform.position -= vessel.ReferenceTransform.up.normalized * translationDistance * steeringInput.z * steerThrustModifier; " is 128.
Long Statement,Firespitter.engine,FSrotorTrim,C:\repos\snjo_Firespitter\Firespitter\engine\FSrotorTrim.cs,translateThrustTransform,The length of the statement  "            partTransform.position -= vessel.ReferenceTransform.right.normalized * translationDistance * steeringInput.x * steerThrustModifier; " is 131.
Long Statement,Firespitter.engine,FSrotorTrim,C:\repos\snjo_Firespitter\Firespitter\engine\FSrotorTrim.cs,setPartRotation,The length of the statement  "            partTransform.localRotation = Quaternion.Euler(currentRotation + new Vector3(defaultRotationX' defaultRotationY' defaultRotationZ)); " is 132.
Long Statement,Firespitter.engine,FSrotorTrim,C:\repos\snjo_Firespitter\Firespitter\engine\FSrotorTrim.cs,autoHover,The length of the statement  "                partTransform.localRotation = Quaternion.Euler(currentRotation + new Vector3(defaultRotationX' defaultRotationY' defaultRotationZ)); " is 132.
Long Statement,Firespitter.engine,FSVTOLrotator,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSVTOLrotator.cs,OnStart,The length of the statement  "            elementSteerPitchType = new PopupElement("Pitch type"' new PopupButton("Throttle"' "Rotation"' 0f' toggleSteerPitchType)); " is 122.
Long Statement,Firespitter.engine,FSVTOLrotator,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSVTOLrotator.cs,OnStart,The length of the statement  "                popup = new FSGUIPopup(part' "FSVTOLrotator"' 0' popupWindowID' new Rect(550f' 200f' 325f' 150f)' "VTOL presets"' elementInfoText); //FSGUIwindowID.VTOLrotator " is 159.
Long Statement,Firespitter.engine,FSVTOLrotator,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSVTOLrotator.cs,OnStart,The length of the statement  "                popup = new FSGUIPopup(part' "FSVTOLrotator"' 0' popupWindowID' new Rect(500f' 300f' 250f' 100f)' "VTOL steering"' elementSteerRoll); //FSGUIwindowID.VTOLrotator " is 161.
Long Statement,Firespitter.engine,FSVTOLrotator,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSVTOLrotator.cs,testUseAngle,The length of the statement  "                    if (dot < 0) // check for orientation of the part' relative to world directions' since there is no vessel transfrom to compare to " is 129.
Long Statement,Firespitter.engine,FSVTOLrotator,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSVTOLrotator.cs,OnUpdate,The length of the statement  "                // test whether the engine is on the left or right side of the craft' for inverting the engine rotation and thrust based roll. " is 126.
Long Statement,Firespitter.engine,FSVTOLrotator,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSVTOLrotator.cs,OnUpdate,The length of the statement  "                if (Vector3.Dot(partTransform.position.normalized' vessel.ReferenceTransform.right) < 0) // below 0 means the engine is on the left side of the craft " is 149.
Long Statement,Firespitter.info,FSpartDirectionGuide,C:\repos\snjo_Firespitter\Firespitter\info\FSpartDirectionGuide.cs,updateLineColor,The length of the statement  "            if (Vector3.Dot(part.transform.TransformDirection(guideDirection)' worldDirection.transform.TransformDirection(correctWorldDirection)) > 0.5f) " is 142.
Long Statement,Firespitter.info,FSdebugMessages,C:\repos\snjo_Firespitter\Firespitter\info\FSdebugMessages.cs,OnGUI,The length of the statement  "                    GUI.Label(new Rect(screenPosition.x' screenPosition.y + lineSpacing * i' screenPosition.width' screenPosition.height)' outputLines[i].text); " is 140.
Long Statement,Firespitter.info,FSdebugMessages,C:\repos\snjo_Firespitter\Firespitter\info\FSdebugMessages.cs,Post,The length of the statement  "            if (postToScreenDuration > 0f && HighLogic.LoadedSceneIsFlight) // will only work in the flight scene' gives an error in other places. " is 134.
Long Statement,Firespitter.info,FSinfoPopup,C:\repos\snjo_Firespitter\Firespitter\info\FSinfoPopup.cs,drawWindow,The length of the statement  "            if (GUI.Button(new Rect(menuItemRect.x + menuItemSize.x - buttonSize.x' menuItemRect.y' buttonSize.x' buttonSize.y)' "X")) " is 122.
Long Statement,Firespitter.info,FSinfoPopup,C:\repos\snjo_Firespitter\Firespitter\info\FSinfoPopup.cs,drawWindow,The length of the statement  "                textHeading = writeLine(new Rect(menuItemRect.x' menuItemRect.y' menuItemRect.width - buttonSize.x - 10f' menuItemRect.height)' textHeading); " is 141.
Long Statement,Firespitter.info,FSinfoPopup,C:\repos\snjo_Firespitter\Firespitter\info\FSinfoPopup.cs,drawWindow,The length of the statement  "            GUI.Label(new Rect(menuItemRect.x + buttonSize.x + 10f' menuItemRect.y' menuItemSize.x - buttonSize.x - 10f' buttonSize.y)' "Show on start"); " is 141.
Long Statement,Firespitter.info,FSinfoPopup,C:\repos\snjo_Firespitter\Firespitter\info\FSinfoPopup.cs,drawWindow,The length of the statement  "            if (GUI.Button(new Rect(menuItemRect.x + (menuItemSize.x / 2)' menuItemRect.y' buttonSize.x' buttonSize.y)' useHotkeyString)) " is 125.
Long Statement,Firespitter.info,FSinfoPopup,C:\repos\snjo_Firespitter\Firespitter\info\FSinfoPopup.cs,drawWindow,The length of the statement  "            GUI.Label(new Rect(menuItemRect.x + buttonSize.x + 10f + (menuItemSize.x / 2)' menuItemRect.y' menuItemSize.x - buttonSize.x - 10f' buttonSize.y)' "Use hotkey (" + toggleKey + ")"); " is 181.
Long Statement,Firespitter.info,FSinfoPopup,C:\repos\snjo_Firespitter\Firespitter\info\FSinfoPopup.cs,drawWindow,The length of the statement  "                GUI.Label(new Rect(menuItemRect.x + (buttonSize.x * 2) + 20f' menuItemRect.y' menuItemRect.width' menuItemRect.height)' "Hiding this window in " + (int)countDown); " is 163.
Long Statement,Firespitter.info,FSinfoPopup,C:\repos\snjo_Firespitter\Firespitter\info\FSinfoPopup.cs,OnGUI,The length of the statement  "                //GUI.Box(new Rect(menuBasePosition.x - 10f' menuBasePosition.y - 10f' menuItemSize.x + 20f' (menuItemSize.y * 14) + 20f)' ""); " is 127.
Long Statement,Firespitter.wheel,FSwheelAlignment,C:\repos\snjo_Firespitter\Firespitter\wheel\FSwheelAlignment.cs,updateLinePositions,The length of the statement  "                Vector3 forwardLineHorizontal = new Vector3(anglePointForwardHorizontal.x' centerPoint.y' anglePointForwardHorizontal.z) - centerPoint; " is 135.
Long Statement,Firespitter.wheel,FSwheelAlignment,C:\repos\snjo_Firespitter\Firespitter\wheel\FSwheelAlignment.cs,updateLinePositions,The length of the statement  "                Vector3 forwardLineVertical = new Vector3(centerPoint.x' anglePointForwardVertical.y' anglePointForwardVertical.z) - centerPoint; " is 129.
Magic Number,Firespitter.cockpit,FSmonitorScript,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorScript.cs,getSheetCharPosition,The following statement contains a magic number: int charPos = charInt % 16;
Magic Number,Firespitter.cockpit,FSmonitorScript,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorScript.cs,getSheetCharPosition,The following statement contains a magic number: int linePos = (charInt - charPos) / 16;
Magic Number,Firespitter.cockpit,FSmonitorScript,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorScript.cs,getSheetCharPosition,The following statement contains a magic number: linePos = 16 - linePos - 1;
Magic Number,Firespitter.cockpit,FSmonitorScript,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorScript.cs,OnUpdate,The following statement contains a magic number: if (!monitorDefaultStateSet)              {                  //Debug.Log("initializing monitors"); // -------------------------------------------------<<<<<<<<                  fsMon = new FSmonitorInterface[20];                  fsMon = base.transform.parent.GetComponentsInChildren<FSmonitorInterface>();                  //Debug.Log("found " + fsMon.Length + " monitors");                  for (int i = 0; i < fsMon.Length; i++)                  {                      //Debug.Log("setting monitor " + i);                      if (i < monitorStartState.Length && useCustomStartStates)                      {                          fsMon[i].startState = monitorStartState[i];                      }                      else                      {                          fsMon[i].startState = FSmonitorInterface.MenuState.mainMenu;                      }                    }                  monitorDefaultStateSet = true;              }
Magic Number,Firespitter.cockpit,FSmonitorScript,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorScript.cs,parseSingleString,The following statement contains a magic number: for (int i = 0; i < c.Length; i++)              {                  int charNum = i % charPerLine;                  int lineNum = (i - charNum) / 10; // hmmm' seems hard coded somehow...                  //int lineNum = (i - charNum) / charPerLine; // should try this instead later.                  if (lineNum >= linesPerPage) break;                  lineList[lineNum][charNum].GetComponent<Renderer>().material.mainTextureOffset = (getSheetCharPosition(c[i]) * spriteScale) - new Vector2(spriteShift' 0f);                  oldText = inputText;              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,getInfoPopupText,The following statement contains a magic number: if (infoPopup != null)              {                  infoPopupStrings = new string[12];                  infoPopupStrings[0] = infoPopup.textHeading;                  infoPopupStrings[1] = infoPopup.textBody1;                  infoPopupStrings[2] = infoPopup.textBody2;                  infoPopupStrings[3] = infoPopup.textBody3;                  infoPopupStrings[4] = infoPopup.textBody4;                  infoPopupStrings[5] = infoPopup.textBody5;                  infoPopupStrings[6] = infoPopup.textBody6;                  infoPopupStrings[7] = infoPopup.textBody7;                  infoPopupStrings[8] = infoPopup.textBody8;                  infoPopupStrings[9] = infoPopup.textBody9;                  infoPopupStrings[10] = infoPopup.textBody10;                  infoPopupStrings[11] = infoPopup.textBody11;              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,getInfoPopupText,The following statement contains a magic number: if (infoPopup != null)              {                  infoPopupStrings = new string[12];                  infoPopupStrings[0] = infoPopup.textHeading;                  infoPopupStrings[1] = infoPopup.textBody1;                  infoPopupStrings[2] = infoPopup.textBody2;                  infoPopupStrings[3] = infoPopup.textBody3;                  infoPopupStrings[4] = infoPopup.textBody4;                  infoPopupStrings[5] = infoPopup.textBody5;                  infoPopupStrings[6] = infoPopup.textBody6;                  infoPopupStrings[7] = infoPopup.textBody7;                  infoPopupStrings[8] = infoPopup.textBody8;                  infoPopupStrings[9] = infoPopup.textBody9;                  infoPopupStrings[10] = infoPopup.textBody10;                  infoPopupStrings[11] = infoPopup.textBody11;              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,getInfoPopupText,The following statement contains a magic number: if (infoPopup != null)              {                  infoPopupStrings = new string[12];                  infoPopupStrings[0] = infoPopup.textHeading;                  infoPopupStrings[1] = infoPopup.textBody1;                  infoPopupStrings[2] = infoPopup.textBody2;                  infoPopupStrings[3] = infoPopup.textBody3;                  infoPopupStrings[4] = infoPopup.textBody4;                  infoPopupStrings[5] = infoPopup.textBody5;                  infoPopupStrings[6] = infoPopup.textBody6;                  infoPopupStrings[7] = infoPopup.textBody7;                  infoPopupStrings[8] = infoPopup.textBody8;                  infoPopupStrings[9] = infoPopup.textBody9;                  infoPopupStrings[10] = infoPopup.textBody10;                  infoPopupStrings[11] = infoPopup.textBody11;              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,getInfoPopupText,The following statement contains a magic number: if (infoPopup != null)              {                  infoPopupStrings = new string[12];                  infoPopupStrings[0] = infoPopup.textHeading;                  infoPopupStrings[1] = infoPopup.textBody1;                  infoPopupStrings[2] = infoPopup.textBody2;                  infoPopupStrings[3] = infoPopup.textBody3;                  infoPopupStrings[4] = infoPopup.textBody4;                  infoPopupStrings[5] = infoPopup.textBody5;                  infoPopupStrings[6] = infoPopup.textBody6;                  infoPopupStrings[7] = infoPopup.textBody7;                  infoPopupStrings[8] = infoPopup.textBody8;                  infoPopupStrings[9] = infoPopup.textBody9;                  infoPopupStrings[10] = infoPopup.textBody10;                  infoPopupStrings[11] = infoPopup.textBody11;              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,getInfoPopupText,The following statement contains a magic number: if (infoPopup != null)              {                  infoPopupStrings = new string[12];                  infoPopupStrings[0] = infoPopup.textHeading;                  infoPopupStrings[1] = infoPopup.textBody1;                  infoPopupStrings[2] = infoPopup.textBody2;                  infoPopupStrings[3] = infoPopup.textBody3;                  infoPopupStrings[4] = infoPopup.textBody4;                  infoPopupStrings[5] = infoPopup.textBody5;                  infoPopupStrings[6] = infoPopup.textBody6;                  infoPopupStrings[7] = infoPopup.textBody7;                  infoPopupStrings[8] = infoPopup.textBody8;                  infoPopupStrings[9] = infoPopup.textBody9;                  infoPopupStrings[10] = infoPopup.textBody10;                  infoPopupStrings[11] = infoPopup.textBody11;              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,getInfoPopupText,The following statement contains a magic number: if (infoPopup != null)              {                  infoPopupStrings = new string[12];                  infoPopupStrings[0] = infoPopup.textHeading;                  infoPopupStrings[1] = infoPopup.textBody1;                  infoPopupStrings[2] = infoPopup.textBody2;                  infoPopupStrings[3] = infoPopup.textBody3;                  infoPopupStrings[4] = infoPopup.textBody4;                  infoPopupStrings[5] = infoPopup.textBody5;                  infoPopupStrings[6] = infoPopup.textBody6;                  infoPopupStrings[7] = infoPopup.textBody7;                  infoPopupStrings[8] = infoPopup.textBody8;                  infoPopupStrings[9] = infoPopup.textBody9;                  infoPopupStrings[10] = infoPopup.textBody10;                  infoPopupStrings[11] = infoPopup.textBody11;              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,getInfoPopupText,The following statement contains a magic number: if (infoPopup != null)              {                  infoPopupStrings = new string[12];                  infoPopupStrings[0] = infoPopup.textHeading;                  infoPopupStrings[1] = infoPopup.textBody1;                  infoPopupStrings[2] = infoPopup.textBody2;                  infoPopupStrings[3] = infoPopup.textBody3;                  infoPopupStrings[4] = infoPopup.textBody4;                  infoPopupStrings[5] = infoPopup.textBody5;                  infoPopupStrings[6] = infoPopup.textBody6;                  infoPopupStrings[7] = infoPopup.textBody7;                  infoPopupStrings[8] = infoPopup.textBody8;                  infoPopupStrings[9] = infoPopup.textBody9;                  infoPopupStrings[10] = infoPopup.textBody10;                  infoPopupStrings[11] = infoPopup.textBody11;              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,getInfoPopupText,The following statement contains a magic number: if (infoPopup != null)              {                  infoPopupStrings = new string[12];                  infoPopupStrings[0] = infoPopup.textHeading;                  infoPopupStrings[1] = infoPopup.textBody1;                  infoPopupStrings[2] = infoPopup.textBody2;                  infoPopupStrings[3] = infoPopup.textBody3;                  infoPopupStrings[4] = infoPopup.textBody4;                  infoPopupStrings[5] = infoPopup.textBody5;                  infoPopupStrings[6] = infoPopup.textBody6;                  infoPopupStrings[7] = infoPopup.textBody7;                  infoPopupStrings[8] = infoPopup.textBody8;                  infoPopupStrings[9] = infoPopup.textBody9;                  infoPopupStrings[10] = infoPopup.textBody10;                  infoPopupStrings[11] = infoPopup.textBody11;              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,getInfoPopupText,The following statement contains a magic number: if (infoPopup != null)              {                  infoPopupStrings = new string[12];                  infoPopupStrings[0] = infoPopup.textHeading;                  infoPopupStrings[1] = infoPopup.textBody1;                  infoPopupStrings[2] = infoPopup.textBody2;                  infoPopupStrings[3] = infoPopup.textBody3;                  infoPopupStrings[4] = infoPopup.textBody4;                  infoPopupStrings[5] = infoPopup.textBody5;                  infoPopupStrings[6] = infoPopup.textBody6;                  infoPopupStrings[7] = infoPopup.textBody7;                  infoPopupStrings[8] = infoPopup.textBody8;                  infoPopupStrings[9] = infoPopup.textBody9;                  infoPopupStrings[10] = infoPopup.textBody10;                  infoPopupStrings[11] = infoPopup.textBody11;              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,getInfoPopupText,The following statement contains a magic number: if (infoPopup != null)              {                  infoPopupStrings = new string[12];                  infoPopupStrings[0] = infoPopup.textHeading;                  infoPopupStrings[1] = infoPopup.textBody1;                  infoPopupStrings[2] = infoPopup.textBody2;                  infoPopupStrings[3] = infoPopup.textBody3;                  infoPopupStrings[4] = infoPopup.textBody4;                  infoPopupStrings[5] = infoPopup.textBody5;                  infoPopupStrings[6] = infoPopup.textBody6;                  infoPopupStrings[7] = infoPopup.textBody7;                  infoPopupStrings[8] = infoPopup.textBody8;                  infoPopupStrings[9] = infoPopup.textBody9;                  infoPopupStrings[10] = infoPopup.textBody10;                  infoPopupStrings[11] = infoPopup.textBody11;              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,getInfoPopupText,The following statement contains a magic number: if (infoPopup != null)              {                  infoPopupStrings = new string[12];                  infoPopupStrings[0] = infoPopup.textHeading;                  infoPopupStrings[1] = infoPopup.textBody1;                  infoPopupStrings[2] = infoPopup.textBody2;                  infoPopupStrings[3] = infoPopup.textBody3;                  infoPopupStrings[4] = infoPopup.textBody4;                  infoPopupStrings[5] = infoPopup.textBody5;                  infoPopupStrings[6] = infoPopup.textBody6;                  infoPopupStrings[7] = infoPopup.textBody7;                  infoPopupStrings[8] = infoPopup.textBody8;                  infoPopupStrings[9] = infoPopup.textBody9;                  infoPopupStrings[10] = infoPopup.textBody10;                  infoPopupStrings[11] = infoPopup.textBody11;              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,Start,The following statement contains a magic number: buttonObjectNames = new string[4] { button1' button2' button3' button4 };
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,updateFlightData,The following statement contains a magic number: if (unitType == "Metric")              {                  altitudeString = Math.Floor(FlightGlobals.ship_altitude).ToString().PadLeft(6) + " m";                  radarAltitudeString = Math.Floor(vessel.altitude - Math.Max(vessel.pqsAltitude' 0D)).ToString().PadLeft(6) + " m";                  climbrateString = Math.Round(FlightGlobals.ship_verticalSpeed' 1).ToString().PadLeft(6) + " m/s";                  speedString = Math.Round(displaySpeed' 1).ToString().PadLeft(6) + " m/s";                  hoverString = Math.Round(hoverHeight' 1).ToString().PadLeft(6) + " m";              }              else              {                  double altitude = FlightGlobals.ship_altitude;                  double radarAltitude = vessel.altitude - Math.Max(vessel.pqsAltitude' 0D);                  double climbrate = FlightGlobals.ship_verticalSpeed;                  double speed = displaySpeed;                  float hover = hoverHeight * 3.2808399f;                  altitude *= 3.2808399f;                  radarAltitude *= 3.2808399f;                  climbrate = climbrate * 3.2808399f * 60f;                  speed *= 1.944;                  altitudeString = Math.Floor(altitude).ToString().PadLeft(6) + " ft";                  radarAltitudeString = Math.Floor(radarAltitude).ToString().PadLeft(6) + " ft";                  climbrateString = Math.Floor(climbrate).ToString().PadLeft(6) + " ft/m";                  speedString = Math.Floor(speed).ToString().PadLeft(6) + " kt";                  hoverString = Math.Floor(hover).ToString().PadLeft(6) + " ft";              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,updateFlightData,The following statement contains a magic number: if (unitType == "Metric")              {                  altitudeString = Math.Floor(FlightGlobals.ship_altitude).ToString().PadLeft(6) + " m";                  radarAltitudeString = Math.Floor(vessel.altitude - Math.Max(vessel.pqsAltitude' 0D)).ToString().PadLeft(6) + " m";                  climbrateString = Math.Round(FlightGlobals.ship_verticalSpeed' 1).ToString().PadLeft(6) + " m/s";                  speedString = Math.Round(displaySpeed' 1).ToString().PadLeft(6) + " m/s";                  hoverString = Math.Round(hoverHeight' 1).ToString().PadLeft(6) + " m";              }              else              {                  double altitude = FlightGlobals.ship_altitude;                  double radarAltitude = vessel.altitude - Math.Max(vessel.pqsAltitude' 0D);                  double climbrate = FlightGlobals.ship_verticalSpeed;                  double speed = displaySpeed;                  float hover = hoverHeight * 3.2808399f;                  altitude *= 3.2808399f;                  radarAltitude *= 3.2808399f;                  climbrate = climbrate * 3.2808399f * 60f;                  speed *= 1.944;                  altitudeString = Math.Floor(altitude).ToString().PadLeft(6) + " ft";                  radarAltitudeString = Math.Floor(radarAltitude).ToString().PadLeft(6) + " ft";                  climbrateString = Math.Floor(climbrate).ToString().PadLeft(6) + " ft/m";                  speedString = Math.Floor(speed).ToString().PadLeft(6) + " kt";                  hoverString = Math.Floor(hover).ToString().PadLeft(6) + " ft";              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,updateFlightData,The following statement contains a magic number: if (unitType == "Metric")              {                  altitudeString = Math.Floor(FlightGlobals.ship_altitude).ToString().PadLeft(6) + " m";                  radarAltitudeString = Math.Floor(vessel.altitude - Math.Max(vessel.pqsAltitude' 0D)).ToString().PadLeft(6) + " m";                  climbrateString = Math.Round(FlightGlobals.ship_verticalSpeed' 1).ToString().PadLeft(6) + " m/s";                  speedString = Math.Round(displaySpeed' 1).ToString().PadLeft(6) + " m/s";                  hoverString = Math.Round(hoverHeight' 1).ToString().PadLeft(6) + " m";              }              else              {                  double altitude = FlightGlobals.ship_altitude;                  double radarAltitude = vessel.altitude - Math.Max(vessel.pqsAltitude' 0D);                  double climbrate = FlightGlobals.ship_verticalSpeed;                  double speed = displaySpeed;                  float hover = hoverHeight * 3.2808399f;                  altitude *= 3.2808399f;                  radarAltitude *= 3.2808399f;                  climbrate = climbrate * 3.2808399f * 60f;                  speed *= 1.944;                  altitudeString = Math.Floor(altitude).ToString().PadLeft(6) + " ft";                  radarAltitudeString = Math.Floor(radarAltitude).ToString().PadLeft(6) + " ft";                  climbrateString = Math.Floor(climbrate).ToString().PadLeft(6) + " ft/m";                  speedString = Math.Floor(speed).ToString().PadLeft(6) + " kt";                  hoverString = Math.Floor(hover).ToString().PadLeft(6) + " ft";              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,updateFlightData,The following statement contains a magic number: if (unitType == "Metric")              {                  altitudeString = Math.Floor(FlightGlobals.ship_altitude).ToString().PadLeft(6) + " m";                  radarAltitudeString = Math.Floor(vessel.altitude - Math.Max(vessel.pqsAltitude' 0D)).ToString().PadLeft(6) + " m";                  climbrateString = Math.Round(FlightGlobals.ship_verticalSpeed' 1).ToString().PadLeft(6) + " m/s";                  speedString = Math.Round(displaySpeed' 1).ToString().PadLeft(6) + " m/s";                  hoverString = Math.Round(hoverHeight' 1).ToString().PadLeft(6) + " m";              }              else              {                  double altitude = FlightGlobals.ship_altitude;                  double radarAltitude = vessel.altitude - Math.Max(vessel.pqsAltitude' 0D);                  double climbrate = FlightGlobals.ship_verticalSpeed;                  double speed = displaySpeed;                  float hover = hoverHeight * 3.2808399f;                  altitude *= 3.2808399f;                  radarAltitude *= 3.2808399f;                  climbrate = climbrate * 3.2808399f * 60f;                  speed *= 1.944;                  altitudeString = Math.Floor(altitude).ToString().PadLeft(6) + " ft";                  radarAltitudeString = Math.Floor(radarAltitude).ToString().PadLeft(6) + " ft";                  climbrateString = Math.Floor(climbrate).ToString().PadLeft(6) + " ft/m";                  speedString = Math.Floor(speed).ToString().PadLeft(6) + " kt";                  hoverString = Math.Floor(hover).ToString().PadLeft(6) + " ft";              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,updateFlightData,The following statement contains a magic number: if (unitType == "Metric")              {                  altitudeString = Math.Floor(FlightGlobals.ship_altitude).ToString().PadLeft(6) + " m";                  radarAltitudeString = Math.Floor(vessel.altitude - Math.Max(vessel.pqsAltitude' 0D)).ToString().PadLeft(6) + " m";                  climbrateString = Math.Round(FlightGlobals.ship_verticalSpeed' 1).ToString().PadLeft(6) + " m/s";                  speedString = Math.Round(displaySpeed' 1).ToString().PadLeft(6) + " m/s";                  hoverString = Math.Round(hoverHeight' 1).ToString().PadLeft(6) + " m";              }              else              {                  double altitude = FlightGlobals.ship_altitude;                  double radarAltitude = vessel.altitude - Math.Max(vessel.pqsAltitude' 0D);                  double climbrate = FlightGlobals.ship_verticalSpeed;                  double speed = displaySpeed;                  float hover = hoverHeight * 3.2808399f;                  altitude *= 3.2808399f;                  radarAltitude *= 3.2808399f;                  climbrate = climbrate * 3.2808399f * 60f;                  speed *= 1.944;                  altitudeString = Math.Floor(altitude).ToString().PadLeft(6) + " ft";                  radarAltitudeString = Math.Floor(radarAltitude).ToString().PadLeft(6) + " ft";                  climbrateString = Math.Floor(climbrate).ToString().PadLeft(6) + " ft/m";                  speedString = Math.Floor(speed).ToString().PadLeft(6) + " kt";                  hoverString = Math.Floor(hover).ToString().PadLeft(6) + " ft";              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,updateFlightData,The following statement contains a magic number: if (unitType == "Metric")              {                  altitudeString = Math.Floor(FlightGlobals.ship_altitude).ToString().PadLeft(6) + " m";                  radarAltitudeString = Math.Floor(vessel.altitude - Math.Max(vessel.pqsAltitude' 0D)).ToString().PadLeft(6) + " m";                  climbrateString = Math.Round(FlightGlobals.ship_verticalSpeed' 1).ToString().PadLeft(6) + " m/s";                  speedString = Math.Round(displaySpeed' 1).ToString().PadLeft(6) + " m/s";                  hoverString = Math.Round(hoverHeight' 1).ToString().PadLeft(6) + " m";              }              else              {                  double altitude = FlightGlobals.ship_altitude;                  double radarAltitude = vessel.altitude - Math.Max(vessel.pqsAltitude' 0D);                  double climbrate = FlightGlobals.ship_verticalSpeed;                  double speed = displaySpeed;                  float hover = hoverHeight * 3.2808399f;                  altitude *= 3.2808399f;                  radarAltitude *= 3.2808399f;                  climbrate = climbrate * 3.2808399f * 60f;                  speed *= 1.944;                  altitudeString = Math.Floor(altitude).ToString().PadLeft(6) + " ft";                  radarAltitudeString = Math.Floor(radarAltitude).ToString().PadLeft(6) + " ft";                  climbrateString = Math.Floor(climbrate).ToString().PadLeft(6) + " ft/m";                  speedString = Math.Floor(speed).ToString().PadLeft(6) + " kt";                  hoverString = Math.Floor(hover).ToString().PadLeft(6) + " ft";              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,updateFlightData,The following statement contains a magic number: if (unitType == "Metric")              {                  altitudeString = Math.Floor(FlightGlobals.ship_altitude).ToString().PadLeft(6) + " m";                  radarAltitudeString = Math.Floor(vessel.altitude - Math.Max(vessel.pqsAltitude' 0D)).ToString().PadLeft(6) + " m";                  climbrateString = Math.Round(FlightGlobals.ship_verticalSpeed' 1).ToString().PadLeft(6) + " m/s";                  speedString = Math.Round(displaySpeed' 1).ToString().PadLeft(6) + " m/s";                  hoverString = Math.Round(hoverHeight' 1).ToString().PadLeft(6) + " m";              }              else              {                  double altitude = FlightGlobals.ship_altitude;                  double radarAltitude = vessel.altitude - Math.Max(vessel.pqsAltitude' 0D);                  double climbrate = FlightGlobals.ship_verticalSpeed;                  double speed = displaySpeed;                  float hover = hoverHeight * 3.2808399f;                  altitude *= 3.2808399f;                  radarAltitude *= 3.2808399f;                  climbrate = climbrate * 3.2808399f * 60f;                  speed *= 1.944;                  altitudeString = Math.Floor(altitude).ToString().PadLeft(6) + " ft";                  radarAltitudeString = Math.Floor(radarAltitude).ToString().PadLeft(6) + " ft";                  climbrateString = Math.Floor(climbrate).ToString().PadLeft(6) + " ft/m";                  speedString = Math.Floor(speed).ToString().PadLeft(6) + " kt";                  hoverString = Math.Floor(hover).ToString().PadLeft(6) + " ft";              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,updateFlightData,The following statement contains a magic number: if (unitType == "Metric")              {                  altitudeString = Math.Floor(FlightGlobals.ship_altitude).ToString().PadLeft(6) + " m";                  radarAltitudeString = Math.Floor(vessel.altitude - Math.Max(vessel.pqsAltitude' 0D)).ToString().PadLeft(6) + " m";                  climbrateString = Math.Round(FlightGlobals.ship_verticalSpeed' 1).ToString().PadLeft(6) + " m/s";                  speedString = Math.Round(displaySpeed' 1).ToString().PadLeft(6) + " m/s";                  hoverString = Math.Round(hoverHeight' 1).ToString().PadLeft(6) + " m";              }              else              {                  double altitude = FlightGlobals.ship_altitude;                  double radarAltitude = vessel.altitude - Math.Max(vessel.pqsAltitude' 0D);                  double climbrate = FlightGlobals.ship_verticalSpeed;                  double speed = displaySpeed;                  float hover = hoverHeight * 3.2808399f;                  altitude *= 3.2808399f;                  radarAltitude *= 3.2808399f;                  climbrate = climbrate * 3.2808399f * 60f;                  speed *= 1.944;                  altitudeString = Math.Floor(altitude).ToString().PadLeft(6) + " ft";                  radarAltitudeString = Math.Floor(radarAltitude).ToString().PadLeft(6) + " ft";                  climbrateString = Math.Floor(climbrate).ToString().PadLeft(6) + " ft/m";                  speedString = Math.Floor(speed).ToString().PadLeft(6) + " kt";                  hoverString = Math.Floor(hover).ToString().PadLeft(6) + " ft";              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,updateFlightData,The following statement contains a magic number: if (unitType == "Metric")              {                  altitudeString = Math.Floor(FlightGlobals.ship_altitude).ToString().PadLeft(6) + " m";                  radarAltitudeString = Math.Floor(vessel.altitude - Math.Max(vessel.pqsAltitude' 0D)).ToString().PadLeft(6) + " m";                  climbrateString = Math.Round(FlightGlobals.ship_verticalSpeed' 1).ToString().PadLeft(6) + " m/s";                  speedString = Math.Round(displaySpeed' 1).ToString().PadLeft(6) + " m/s";                  hoverString = Math.Round(hoverHeight' 1).ToString().PadLeft(6) + " m";              }              else              {                  double altitude = FlightGlobals.ship_altitude;                  double radarAltitude = vessel.altitude - Math.Max(vessel.pqsAltitude' 0D);                  double climbrate = FlightGlobals.ship_verticalSpeed;                  double speed = displaySpeed;                  float hover = hoverHeight * 3.2808399f;                  altitude *= 3.2808399f;                  radarAltitude *= 3.2808399f;                  climbrate = climbrate * 3.2808399f * 60f;                  speed *= 1.944;                  altitudeString = Math.Floor(altitude).ToString().PadLeft(6) + " ft";                  radarAltitudeString = Math.Floor(radarAltitude).ToString().PadLeft(6) + " ft";                  climbrateString = Math.Floor(climbrate).ToString().PadLeft(6) + " ft/m";                  speedString = Math.Floor(speed).ToString().PadLeft(6) + " kt";                  hoverString = Math.Floor(hover).ToString().PadLeft(6) + " ft";              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,updateFlightData,The following statement contains a magic number: if (unitType == "Metric")              {                  altitudeString = Math.Floor(FlightGlobals.ship_altitude).ToString().PadLeft(6) + " m";                  radarAltitudeString = Math.Floor(vessel.altitude - Math.Max(vessel.pqsAltitude' 0D)).ToString().PadLeft(6) + " m";                  climbrateString = Math.Round(FlightGlobals.ship_verticalSpeed' 1).ToString().PadLeft(6) + " m/s";                  speedString = Math.Round(displaySpeed' 1).ToString().PadLeft(6) + " m/s";                  hoverString = Math.Round(hoverHeight' 1).ToString().PadLeft(6) + " m";              }              else              {                  double altitude = FlightGlobals.ship_altitude;                  double radarAltitude = vessel.altitude - Math.Max(vessel.pqsAltitude' 0D);                  double climbrate = FlightGlobals.ship_verticalSpeed;                  double speed = displaySpeed;                  float hover = hoverHeight * 3.2808399f;                  altitude *= 3.2808399f;                  radarAltitude *= 3.2808399f;                  climbrate = climbrate * 3.2808399f * 60f;                  speed *= 1.944;                  altitudeString = Math.Floor(altitude).ToString().PadLeft(6) + " ft";                  radarAltitudeString = Math.Floor(radarAltitude).ToString().PadLeft(6) + " ft";                  climbrateString = Math.Floor(climbrate).ToString().PadLeft(6) + " ft/m";                  speedString = Math.Floor(speed).ToString().PadLeft(6) + " kt";                  hoverString = Math.Floor(hover).ToString().PadLeft(6) + " ft";              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,updateFlightData,The following statement contains a magic number: if (unitType == "Metric")              {                  altitudeString = Math.Floor(FlightGlobals.ship_altitude).ToString().PadLeft(6) + " m";                  radarAltitudeString = Math.Floor(vessel.altitude - Math.Max(vessel.pqsAltitude' 0D)).ToString().PadLeft(6) + " m";                  climbrateString = Math.Round(FlightGlobals.ship_verticalSpeed' 1).ToString().PadLeft(6) + " m/s";                  speedString = Math.Round(displaySpeed' 1).ToString().PadLeft(6) + " m/s";                  hoverString = Math.Round(hoverHeight' 1).ToString().PadLeft(6) + " m";              }              else              {                  double altitude = FlightGlobals.ship_altitude;                  double radarAltitude = vessel.altitude - Math.Max(vessel.pqsAltitude' 0D);                  double climbrate = FlightGlobals.ship_verticalSpeed;                  double speed = displaySpeed;                  float hover = hoverHeight * 3.2808399f;                  altitude *= 3.2808399f;                  radarAltitude *= 3.2808399f;                  climbrate = climbrate * 3.2808399f * 60f;                  speed *= 1.944;                  altitudeString = Math.Floor(altitude).ToString().PadLeft(6) + " ft";                  radarAltitudeString = Math.Floor(radarAltitude).ToString().PadLeft(6) + " ft";                  climbrateString = Math.Floor(climbrate).ToString().PadLeft(6) + " ft/m";                  speedString = Math.Floor(speed).ToString().PadLeft(6) + " kt";                  hoverString = Math.Floor(hover).ToString().PadLeft(6) + " ft";              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,updateFuel,The following statement contains a magic number: if (vesselNumParts != vessel.Parts.Count || resourceUpdateCountdown <= 0)              {                  getResourceList();                  resourceUpdateCountdown = 60;                  vesselNumParts = vessel.Parts.Count;                  getHoverHeight();              }              else              {                  resourceUpdateCountdown--;              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuAbort,The following statement contains a magic number: textArray[5] = "--ABORT SEQUENCE--";
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuAbort,The following statement contains a magic number: if (!pauseInitialized)              {                  pause(120);              }              else              {                  if (!pause())                      menuState = menuMainMenu;              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuFlightData,The following statement contains a magic number: textArray[++i] = "heading  : " + Math.Round(FlightGlobals.ship_heading' 1).ToString().PadLeft(6) + " deg";
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuFlightData,The following statement contains a magic number: textArray[++i] = "pitch" + Math.Round(pitch' 1).ToString().PadLeft(6) + " deg";
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuFlightData,The following statement contains a magic number: textArray[++i] = "roll" + Math.Round(roll' 1).ToString().PadLeft(6) + " deg";
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuGunner,The following statement contains a magic number: textArray[5] = "   Gunner module not";
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuGunner,The following statement contains a magic number: textArray[6] = "   installed. Contact";
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuGunner,The following statement contains a magic number: textArray[7] = "   your customer rep";
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuGunner,The following statement contains a magic number: textArray[8] = "   for a quote today!";
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuMainMenu,The following statement contains a magic number: menuSelectionTop = 2;
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuMainMenu,The following statement contains a magic number: if (buttonArray[(int)ButtonNames.confirm])  //confirm pressed              {                  switch (menuSelection)                  {                      case (int)MainMenuItems.flightdata + 2:                          menuState = menuFlightData;                          break;                      case (int)MainMenuItems.settings + 2:                          menuState = menuSettings;                          break;                      case (int)MainMenuItems.abort + 2:                          pauseInitialized = false;                          menuState = menuAbort;                          break;                      case (int)MainMenuItems.fuel + 2:                          menuState = menuFuel;                          break;                      case (int)MainMenuItems.gear + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Gear);                          break;                      case (int)MainMenuItems.brakes + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Brakes);                          break;                      case (int)MainMenuItems.SAS + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.SAS);                          break;                      case (int)MainMenuItems.light + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Light);                          break;                      case (int)MainMenuItems.hover + 2:                          toggleHover();                          break;                      case (int)MainMenuItems.reboot + 2:                          menuState = menuSplashScreen;                          RAMcount = 0;                          break;                  }              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuMainMenu,The following statement contains a magic number: if (buttonArray[(int)ButtonNames.confirm])  //confirm pressed              {                  switch (menuSelection)                  {                      case (int)MainMenuItems.flightdata + 2:                          menuState = menuFlightData;                          break;                      case (int)MainMenuItems.settings + 2:                          menuState = menuSettings;                          break;                      case (int)MainMenuItems.abort + 2:                          pauseInitialized = false;                          menuState = menuAbort;                          break;                      case (int)MainMenuItems.fuel + 2:                          menuState = menuFuel;                          break;                      case (int)MainMenuItems.gear + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Gear);                          break;                      case (int)MainMenuItems.brakes + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Brakes);                          break;                      case (int)MainMenuItems.SAS + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.SAS);                          break;                      case (int)MainMenuItems.light + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Light);                          break;                      case (int)MainMenuItems.hover + 2:                          toggleHover();                          break;                      case (int)MainMenuItems.reboot + 2:                          menuState = menuSplashScreen;                          RAMcount = 0;                          break;                  }              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuMainMenu,The following statement contains a magic number: if (buttonArray[(int)ButtonNames.confirm])  //confirm pressed              {                  switch (menuSelection)                  {                      case (int)MainMenuItems.flightdata + 2:                          menuState = menuFlightData;                          break;                      case (int)MainMenuItems.settings + 2:                          menuState = menuSettings;                          break;                      case (int)MainMenuItems.abort + 2:                          pauseInitialized = false;                          menuState = menuAbort;                          break;                      case (int)MainMenuItems.fuel + 2:                          menuState = menuFuel;                          break;                      case (int)MainMenuItems.gear + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Gear);                          break;                      case (int)MainMenuItems.brakes + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Brakes);                          break;                      case (int)MainMenuItems.SAS + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.SAS);                          break;                      case (int)MainMenuItems.light + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Light);                          break;                      case (int)MainMenuItems.hover + 2:                          toggleHover();                          break;                      case (int)MainMenuItems.reboot + 2:                          menuState = menuSplashScreen;                          RAMcount = 0;                          break;                  }              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuMainMenu,The following statement contains a magic number: if (buttonArray[(int)ButtonNames.confirm])  //confirm pressed              {                  switch (menuSelection)                  {                      case (int)MainMenuItems.flightdata + 2:                          menuState = menuFlightData;                          break;                      case (int)MainMenuItems.settings + 2:                          menuState = menuSettings;                          break;                      case (int)MainMenuItems.abort + 2:                          pauseInitialized = false;                          menuState = menuAbort;                          break;                      case (int)MainMenuItems.fuel + 2:                          menuState = menuFuel;                          break;                      case (int)MainMenuItems.gear + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Gear);                          break;                      case (int)MainMenuItems.brakes + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Brakes);                          break;                      case (int)MainMenuItems.SAS + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.SAS);                          break;                      case (int)MainMenuItems.light + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Light);                          break;                      case (int)MainMenuItems.hover + 2:                          toggleHover();                          break;                      case (int)MainMenuItems.reboot + 2:                          menuState = menuSplashScreen;                          RAMcount = 0;                          break;                  }              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuMainMenu,The following statement contains a magic number: if (buttonArray[(int)ButtonNames.confirm])  //confirm pressed              {                  switch (menuSelection)                  {                      case (int)MainMenuItems.flightdata + 2:                          menuState = menuFlightData;                          break;                      case (int)MainMenuItems.settings + 2:                          menuState = menuSettings;                          break;                      case (int)MainMenuItems.abort + 2:                          pauseInitialized = false;                          menuState = menuAbort;                          break;                      case (int)MainMenuItems.fuel + 2:                          menuState = menuFuel;                          break;                      case (int)MainMenuItems.gear + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Gear);                          break;                      case (int)MainMenuItems.brakes + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Brakes);                          break;                      case (int)MainMenuItems.SAS + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.SAS);                          break;                      case (int)MainMenuItems.light + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Light);                          break;                      case (int)MainMenuItems.hover + 2:                          toggleHover();                          break;                      case (int)MainMenuItems.reboot + 2:                          menuState = menuSplashScreen;                          RAMcount = 0;                          break;                  }              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuMainMenu,The following statement contains a magic number: if (buttonArray[(int)ButtonNames.confirm])  //confirm pressed              {                  switch (menuSelection)                  {                      case (int)MainMenuItems.flightdata + 2:                          menuState = menuFlightData;                          break;                      case (int)MainMenuItems.settings + 2:                          menuState = menuSettings;                          break;                      case (int)MainMenuItems.abort + 2:                          pauseInitialized = false;                          menuState = menuAbort;                          break;                      case (int)MainMenuItems.fuel + 2:                          menuState = menuFuel;                          break;                      case (int)MainMenuItems.gear + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Gear);                          break;                      case (int)MainMenuItems.brakes + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Brakes);                          break;                      case (int)MainMenuItems.SAS + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.SAS);                          break;                      case (int)MainMenuItems.light + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Light);                          break;                      case (int)MainMenuItems.hover + 2:                          toggleHover();                          break;                      case (int)MainMenuItems.reboot + 2:                          menuState = menuSplashScreen;                          RAMcount = 0;                          break;                  }              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuMainMenu,The following statement contains a magic number: if (buttonArray[(int)ButtonNames.confirm])  //confirm pressed              {                  switch (menuSelection)                  {                      case (int)MainMenuItems.flightdata + 2:                          menuState = menuFlightData;                          break;                      case (int)MainMenuItems.settings + 2:                          menuState = menuSettings;                          break;                      case (int)MainMenuItems.abort + 2:                          pauseInitialized = false;                          menuState = menuAbort;                          break;                      case (int)MainMenuItems.fuel + 2:                          menuState = menuFuel;                          break;                      case (int)MainMenuItems.gear + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Gear);                          break;                      case (int)MainMenuItems.brakes + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Brakes);                          break;                      case (int)MainMenuItems.SAS + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.SAS);                          break;                      case (int)MainMenuItems.light + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Light);                          break;                      case (int)MainMenuItems.hover + 2:                          toggleHover();                          break;                      case (int)MainMenuItems.reboot + 2:                          menuState = menuSplashScreen;                          RAMcount = 0;                          break;                  }              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuMainMenu,The following statement contains a magic number: if (buttonArray[(int)ButtonNames.confirm])  //confirm pressed              {                  switch (menuSelection)                  {                      case (int)MainMenuItems.flightdata + 2:                          menuState = menuFlightData;                          break;                      case (int)MainMenuItems.settings + 2:                          menuState = menuSettings;                          break;                      case (int)MainMenuItems.abort + 2:                          pauseInitialized = false;                          menuState = menuAbort;                          break;                      case (int)MainMenuItems.fuel + 2:                          menuState = menuFuel;                          break;                      case (int)MainMenuItems.gear + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Gear);                          break;                      case (int)MainMenuItems.brakes + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Brakes);                          break;                      case (int)MainMenuItems.SAS + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.SAS);                          break;                      case (int)MainMenuItems.light + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Light);                          break;                      case (int)MainMenuItems.hover + 2:                          toggleHover();                          break;                      case (int)MainMenuItems.reboot + 2:                          menuState = menuSplashScreen;                          RAMcount = 0;                          break;                  }              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuMainMenu,The following statement contains a magic number: if (buttonArray[(int)ButtonNames.confirm])  //confirm pressed              {                  switch (menuSelection)                  {                      case (int)MainMenuItems.flightdata + 2:                          menuState = menuFlightData;                          break;                      case (int)MainMenuItems.settings + 2:                          menuState = menuSettings;                          break;                      case (int)MainMenuItems.abort + 2:                          pauseInitialized = false;                          menuState = menuAbort;                          break;                      case (int)MainMenuItems.fuel + 2:                          menuState = menuFuel;                          break;                      case (int)MainMenuItems.gear + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Gear);                          break;                      case (int)MainMenuItems.brakes + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Brakes);                          break;                      case (int)MainMenuItems.SAS + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.SAS);                          break;                      case (int)MainMenuItems.light + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Light);                          break;                      case (int)MainMenuItems.hover + 2:                          toggleHover();                          break;                      case (int)MainMenuItems.reboot + 2:                          menuState = menuSplashScreen;                          RAMcount = 0;                          break;                  }              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuMainMenu,The following statement contains a magic number: if (buttonArray[(int)ButtonNames.confirm])  //confirm pressed              {                  switch (menuSelection)                  {                      case (int)MainMenuItems.flightdata + 2:                          menuState = menuFlightData;                          break;                      case (int)MainMenuItems.settings + 2:                          menuState = menuSettings;                          break;                      case (int)MainMenuItems.abort + 2:                          pauseInitialized = false;                          menuState = menuAbort;                          break;                      case (int)MainMenuItems.fuel + 2:                          menuState = menuFuel;                          break;                      case (int)MainMenuItems.gear + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Gear);                          break;                      case (int)MainMenuItems.brakes + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Brakes);                          break;                      case (int)MainMenuItems.SAS + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.SAS);                          break;                      case (int)MainMenuItems.light + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Light);                          break;                      case (int)MainMenuItems.hover + 2:                          toggleHover();                          break;                      case (int)MainMenuItems.reboot + 2:                          menuState = menuSplashScreen;                          RAMcount = 0;                          break;                  }              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuSettings,The following statement contains a magic number: menuSelectionTop = 2;
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuSettings,The following statement contains a magic number: menuSelectionBottom = 3;
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuSettings,The following statement contains a magic number: textArray[2] = " Units: " + unitType;
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuSettings,The following statement contains a magic number: textArray[3] = " Speed: " + speedMode;
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuSettings,The following statement contains a magic number: if (useInfoPopup)              {                  textArray[4] = " Craft info";                  menuSelectionBottom++;              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuSettings,The following statement contains a magic number: if (buttonArray[(int)ButtonNames.confirm])  //confirm pressed              {                  switch (menuSelection)                  {                      case 2:                          if (unitType == "Metric") unitType = "Aviation";                          else unitType = "Metric";                          break;                      case 3:                          if (speedMode == "Surface") speedMode = "Orbit";                          else if (speedMode == "Orbit") speedMode = "Target";                          else if (speedMode == "Target") speedMode = "Surface";                          break;                      case 4:                          if (useInfoPopup)                          {                              getInfoPopupText();                              menuState = menuInfo;                          }                          break;                  }              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuSettings,The following statement contains a magic number: if (buttonArray[(int)ButtonNames.confirm])  //confirm pressed              {                  switch (menuSelection)                  {                      case 2:                          if (unitType == "Metric") unitType = "Aviation";                          else unitType = "Metric";                          break;                      case 3:                          if (speedMode == "Surface") speedMode = "Orbit";                          else if (speedMode == "Orbit") speedMode = "Target";                          else if (speedMode == "Target") speedMode = "Surface";                          break;                      case 4:                          if (useInfoPopup)                          {                              getInfoPopupText();                              menuState = menuInfo;                          }                          break;                  }              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuSettings,The following statement contains a magic number: if (buttonArray[(int)ButtonNames.confirm])  //confirm pressed              {                  switch (menuSelection)                  {                      case 2:                          if (unitType == "Metric") unitType = "Aviation";                          else unitType = "Metric";                          break;                      case 3:                          if (speedMode == "Surface") speedMode = "Orbit";                          else if (speedMode == "Orbit") speedMode = "Target";                          else if (speedMode == "Target") speedMode = "Surface";                          break;                      case 4:                          if (useInfoPopup)                          {                              getInfoPopupText();                              menuState = menuInfo;                          }                          break;                  }              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuSplashScreen,The following statement contains a magic number: textArray[2] = "Booting OS";
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuSplashScreen,The following statement contains a magic number: textArray[4] = "Checking RAM ";
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuSplashScreen,The following statement contains a magic number: textArray[5] = RAMcount + "/512KB";
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuSplashScreen,The following statement contains a magic number: if (RAMcount < 512)              {                  RAMcount += 8;                  pause(10);              }              else              {                  if (!pause())                      menuState = getMenuHandlerFromEnum(startState);              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuSplashScreen,The following statement contains a magic number: if (RAMcount < 512)              {                  RAMcount += 8;                  pause(10);              }              else              {                  if (!pause())                      menuState = getMenuHandlerFromEnum(startState);              }
Magic Number,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuSplashScreen,The following statement contains a magic number: if (RAMcount < 512)              {                  RAMcount += 8;                  pause(10);              }              else              {                  if (!pause())                      menuState = getMenuHandlerFromEnum(startState);              }
Magic Number,Firespitter.engine,FSgroundParticles,C:\repos\snjo_Firespitter\Firespitter\engine\FSgroundParticles.cs,Start,The following statement contains a magic number: meshFilter.mesh = MeshCreator.createDisc(emissionDiscSize' 100);
Magic Number,Firespitter.engine,FSgroundParticles,C:\repos\snjo_Firespitter\Firespitter\engine\FSgroundParticles.cs,Update,The following statement contains a magic number: for (int i = 0; i < hit.Length; i++)              {                  // layer 15 is the landscap/buildine layer. parts are layer 10' ignore those. the runway should also be layer 15' but it's not registering properly...                  if (hit[i].collider.gameObject.layer == 15)                  {                      washDisc.transform.position = hit[i].point + Vector3.up * 0.1f;                                          distanceFromGround = hit[i].distance;                      break;                  }              }
Magic Number,Firespitter.engine,FSpropellerTweak,C:\repos\snjo_Firespitter\Firespitter\engine\FSpropellerTweak.cs,Update,The following statement contains a magic number: if (HighLogic.LoadedSceneIsEditor && initialized && part.parent != null)              {                  //Debug.Log("FSpropellerTweak Update running on " + part.GetInstanceID());                    bladeNumber = Mathf.FloorToInt(bladeNumberRaw);                  exhaustNumber = Mathf.FloorToInt(engineLengthSliderRaw);                  engineLengthSlider = (float)Math.Round(engineLengthSliderRaw' 2);                  bladeLengthSlider = (float)Math.Round(BladeLengthSliderRaw' 2);                                      destroyBladeObjects();                  destroyExhaustObjects();                                    updateBladeList();                  updateEngineLength();                  updateBladeLength();                    part.mass = finalWeight;              }
Magic Number,Firespitter.engine,FSpropellerTweak,C:\repos\snjo_Firespitter\Firespitter\engine\FSpropellerTweak.cs,Update,The following statement contains a magic number: if (HighLogic.LoadedSceneIsEditor && initialized && part.parent != null)              {                  //Debug.Log("FSpropellerTweak Update running on " + part.GetInstanceID());                    bladeNumber = Mathf.FloorToInt(bladeNumberRaw);                  exhaustNumber = Mathf.FloorToInt(engineLengthSliderRaw);                  engineLengthSlider = (float)Math.Round(engineLengthSliderRaw' 2);                  bladeLengthSlider = (float)Math.Round(BladeLengthSliderRaw' 2);                                      destroyBladeObjects();                  destroyExhaustObjects();                                    updateBladeList();                  updateEngineLength();                  updateBladeLength();                    part.mass = finalWeight;              }
Magic Number,Firespitter.engine,FScopterThrottle,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FScopterThrottle.cs,getHoverThrottle,The following statement contains a magic number: if (heightAboveHover < fallOffHeight * 4 && vessel.verticalSpeed < -2.5f) thrust = 1f;
Magic Number,Firespitter.engine,FScopterThrottle,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FScopterThrottle.cs,OnUpdate,The following statement contains a magic number: if (vessel != null)              {                    if ((engineActive && !engine.getFlameoutState) && timeCount < 1000)                  {                      timeCount += spinUpTime;                  }                  else if ((engine.getFlameoutState || !engineActive) && timeCount > 0)                  {                      timeCount -= spinUpTime;                  }                    if (timeCount < 0) timeCount = 0; // in case people give the spinUpTime in an unexpected way                    float targetSpeed = ((rotationSpeed * 6) * TimeWarp.deltaTime * ((float)timeCount / 1000));                  //if (engine.getFlameoutState)                  //    targetSpeed = 0f;                  if (RotorParent != null && spinRotorObject)                  {                      if (targetSpeed != 0f)                          RotorParent.transform.Rotate(Vector3.forward * targetSpeed);                        if (usesDeployAnimation == 1 && engine.EngineIgnited == false)                      {                          if (RotorParent.transform.localEulerAngles.y > parkedBladeRotation + 1.1f || RotorParent.transform.localEulerAngles.y < parkedBladeRotation - 1.1f)                          {                              RotorParent.transform.localEulerAngles += new Vector3(0' 1' 0);                              //Debug.Log("resetting blades");                                                  }                      }                  }                    // ----hover                  if (hoverActive)                      atmosphericNerf.engineModeModifier = getHoverThrottle(radarAltitude()' (float)vessel.verticalSpeed);              }
Magic Number,Firespitter.engine,FScopterThrottle,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FScopterThrottle.cs,OnUpdate,The following statement contains a magic number: if (vessel != null)              {                    if ((engineActive && !engine.getFlameoutState) && timeCount < 1000)                  {                      timeCount += spinUpTime;                  }                  else if ((engine.getFlameoutState || !engineActive) && timeCount > 0)                  {                      timeCount -= spinUpTime;                  }                    if (timeCount < 0) timeCount = 0; // in case people give the spinUpTime in an unexpected way                    float targetSpeed = ((rotationSpeed * 6) * TimeWarp.deltaTime * ((float)timeCount / 1000));                  //if (engine.getFlameoutState)                  //    targetSpeed = 0f;                  if (RotorParent != null && spinRotorObject)                  {                      if (targetSpeed != 0f)                          RotorParent.transform.Rotate(Vector3.forward * targetSpeed);                        if (usesDeployAnimation == 1 && engine.EngineIgnited == false)                      {                          if (RotorParent.transform.localEulerAngles.y > parkedBladeRotation + 1.1f || RotorParent.transform.localEulerAngles.y < parkedBladeRotation - 1.1f)                          {                              RotorParent.transform.localEulerAngles += new Vector3(0' 1' 0);                              //Debug.Log("resetting blades");                                                  }                      }                  }                    // ----hover                  if (hoverActive)                      atmosphericNerf.engineModeModifier = getHoverThrottle(radarAltitude()' (float)vessel.verticalSpeed);              }
Magic Number,Firespitter.engine,FScopterThrottle,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FScopterThrottle.cs,OnUpdate,The following statement contains a magic number: if (vessel != null)              {                    if ((engineActive && !engine.getFlameoutState) && timeCount < 1000)                  {                      timeCount += spinUpTime;                  }                  else if ((engine.getFlameoutState || !engineActive) && timeCount > 0)                  {                      timeCount -= spinUpTime;                  }                    if (timeCount < 0) timeCount = 0; // in case people give the spinUpTime in an unexpected way                    float targetSpeed = ((rotationSpeed * 6) * TimeWarp.deltaTime * ((float)timeCount / 1000));                  //if (engine.getFlameoutState)                  //    targetSpeed = 0f;                  if (RotorParent != null && spinRotorObject)                  {                      if (targetSpeed != 0f)                          RotorParent.transform.Rotate(Vector3.forward * targetSpeed);                        if (usesDeployAnimation == 1 && engine.EngineIgnited == false)                      {                          if (RotorParent.transform.localEulerAngles.y > parkedBladeRotation + 1.1f || RotorParent.transform.localEulerAngles.y < parkedBladeRotation - 1.1f)                          {                              RotorParent.transform.localEulerAngles += new Vector3(0' 1' 0);                              //Debug.Log("resetting blades");                                                  }                      }                  }                    // ----hover                  if (hoverActive)                      atmosphericNerf.engineModeModifier = getHoverThrottle(radarAltitude()' (float)vessel.verticalSpeed);              }
Magic Number,Firespitter.engine,FShoverThrottle,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FShoverThrottle.cs,increaseThrustEvent,The following statement contains a magic number: defaultMaxThrust += 50;
Magic Number,Firespitter.engine,FShoverThrottle,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FShoverThrottle.cs,decreaseThrustEvent,The following statement contains a magic number: defaultMaxThrust -= 50;
Magic Number,Firespitter.engine,FShoverThrottle,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FShoverThrottle.cs,OnUpdate,The following statement contains a magic number: if (heightAboveHover < fallOffHeight * 4 && vessel.verticalSpeed < -2.5f) thrust = 1f;
Magic Number,Firespitter.engine,FSplanePropellerSpinner,C:\repos\snjo_Firespitter\Firespitter\engine\FSplanePropellerSpinner.cs,OnUpdate,The following statement contains a magic number: if (engine != null)              {                    if (usesDeployAnimation)                  {                      if (deployAnimationStartsDeployed && deployAnimation.animTime > 0)                          engine.EngineIgnited = false;                      else if (!deployAnimationStartsDeployed && deployAnimation.animTime < 1)                      {                          engine.EngineIgnited = false;                      }                  }                    if (engine.type == Firespitter.engine.FSengineWrapper.EngineType.FSengine)                  {                      rotationSpeed = engine.fsengine.maxRPM;                      currentRPM = engine.fsengine.RPM / engine.fsengine.maxRPM;                      //Debug.Log("Fsengine found");                  }                  else                  {                      //check if the engine is running' or the airplane is moving through the air                      if (!engine.getIgnitionState || engine.getFlameoutState)                      {                                                  if (FlightGlobals.ship_srfSpeed > windmillMinAirspeed && vessel.atmDensity > 0.1f)                              targetRPM = windmillRPM + (windmillRPM * FlightInputHandler.state.mainThrottle); //spins depending on the blade angle                          else                              targetRPM = 0f;                      }                      else                      {                          targetRPM = 1f;                      }                      currentRPM = Mathf.Lerp(currentRPM' targetRPM' engine.engineAccelerationSpeed / spinUpTime * TimeWarp.deltaTime);                  }                    if (currentRPM != 0f)                  {                      //Debug.Log("RPM not 0' prop null: " + (propeller == null) + "' disc null: " + (rotorDisc == null));                        float finalRotationSpeed = rotationSpeed;                      if (thrustRPM != 0f)                      {                          float normalizedThrustRPM = (engine.finalThrust / maxThrust);                          smoothedThrustRPM = Mathf.Lerp(smoothedThrustRPM' normalizedThrustRPM' 0.1f);                          finalRotationSpeed += (thrustRPM * normalizedThrustRPM);                      }                        if (useRotorDiscSwap == 1)                      {                          // if you are using duplicated blades' you don't use a rotor disc' but blur sections for each blade' and need to slow down the rotor itself.                          if (!duplicatedBlades && rotorDisc != null)                           {                              if (currentRPM > rotorDiscFadeInStart)                              {                                  setBladeRendererState(false);                                  rotorDisc.Rotate(Vector3.forward * ((rotorDiscSpeed * 6) * TimeWarp.deltaTime));                              }                              else                              {                                  setBladeRendererState(true);                                  propeller.transform.Rotate(Vector3.forward * ((finalRotationSpeed * 6) * TimeWarp.deltaTime * currentRPM));                                 }                          }                          else                          {                              if (currentRPM > rotorDiscFadeInStart)                              {                                  setBladeRendererState(false);                                  propeller.Rotate(Vector3.forward * ((rotorDiscSpeed * (1 + (5 * engine.fsengine.RPMnormalized))) * TimeWarp.deltaTime));                              }                              else                              {                                  setBladeRendererState(true);                                  propeller.transform.Rotate(Vector3.forward * ((finalRotationSpeed * 6) * TimeWarp.deltaTime * currentRPM));                                                              }                          }                      }                      else                      {                          propeller.transform.Rotate(Vector3.forward * ((finalRotationSpeed * 6) * TimeWarp.deltaTime * currentRPM));                      }                  }                                  }
Magic Number,Firespitter.engine,FSplanePropellerSpinner,C:\repos\snjo_Firespitter\Firespitter\engine\FSplanePropellerSpinner.cs,OnUpdate,The following statement contains a magic number: if (engine != null)              {                    if (usesDeployAnimation)                  {                      if (deployAnimationStartsDeployed && deployAnimation.animTime > 0)                          engine.EngineIgnited = false;                      else if (!deployAnimationStartsDeployed && deployAnimation.animTime < 1)                      {                          engine.EngineIgnited = false;                      }                  }                    if (engine.type == Firespitter.engine.FSengineWrapper.EngineType.FSengine)                  {                      rotationSpeed = engine.fsengine.maxRPM;                      currentRPM = engine.fsengine.RPM / engine.fsengine.maxRPM;                      //Debug.Log("Fsengine found");                  }                  else                  {                      //check if the engine is running' or the airplane is moving through the air                      if (!engine.getIgnitionState || engine.getFlameoutState)                      {                                                  if (FlightGlobals.ship_srfSpeed > windmillMinAirspeed && vessel.atmDensity > 0.1f)                              targetRPM = windmillRPM + (windmillRPM * FlightInputHandler.state.mainThrottle); //spins depending on the blade angle                          else                              targetRPM = 0f;                      }                      else                      {                          targetRPM = 1f;                      }                      currentRPM = Mathf.Lerp(currentRPM' targetRPM' engine.engineAccelerationSpeed / spinUpTime * TimeWarp.deltaTime);                  }                    if (currentRPM != 0f)                  {                      //Debug.Log("RPM not 0' prop null: " + (propeller == null) + "' disc null: " + (rotorDisc == null));                        float finalRotationSpeed = rotationSpeed;                      if (thrustRPM != 0f)                      {                          float normalizedThrustRPM = (engine.finalThrust / maxThrust);                          smoothedThrustRPM = Mathf.Lerp(smoothedThrustRPM' normalizedThrustRPM' 0.1f);                          finalRotationSpeed += (thrustRPM * normalizedThrustRPM);                      }                        if (useRotorDiscSwap == 1)                      {                          // if you are using duplicated blades' you don't use a rotor disc' but blur sections for each blade' and need to slow down the rotor itself.                          if (!duplicatedBlades && rotorDisc != null)                           {                              if (currentRPM > rotorDiscFadeInStart)                              {                                  setBladeRendererState(false);                                  rotorDisc.Rotate(Vector3.forward * ((rotorDiscSpeed * 6) * TimeWarp.deltaTime));                              }                              else                              {                                  setBladeRendererState(true);                                  propeller.transform.Rotate(Vector3.forward * ((finalRotationSpeed * 6) * TimeWarp.deltaTime * currentRPM));                                 }                          }                          else                          {                              if (currentRPM > rotorDiscFadeInStart)                              {                                  setBladeRendererState(false);                                  propeller.Rotate(Vector3.forward * ((rotorDiscSpeed * (1 + (5 * engine.fsengine.RPMnormalized))) * TimeWarp.deltaTime));                              }                              else                              {                                  setBladeRendererState(true);                                  propeller.transform.Rotate(Vector3.forward * ((finalRotationSpeed * 6) * TimeWarp.deltaTime * currentRPM));                                                              }                          }                      }                      else                      {                          propeller.transform.Rotate(Vector3.forward * ((finalRotationSpeed * 6) * TimeWarp.deltaTime * currentRPM));                      }                  }                                  }
Magic Number,Firespitter.engine,FSplanePropellerSpinner,C:\repos\snjo_Firespitter\Firespitter\engine\FSplanePropellerSpinner.cs,OnUpdate,The following statement contains a magic number: if (engine != null)              {                    if (usesDeployAnimation)                  {                      if (deployAnimationStartsDeployed && deployAnimation.animTime > 0)                          engine.EngineIgnited = false;                      else if (!deployAnimationStartsDeployed && deployAnimation.animTime < 1)                      {                          engine.EngineIgnited = false;                      }                  }                    if (engine.type == Firespitter.engine.FSengineWrapper.EngineType.FSengine)                  {                      rotationSpeed = engine.fsengine.maxRPM;                      currentRPM = engine.fsengine.RPM / engine.fsengine.maxRPM;                      //Debug.Log("Fsengine found");                  }                  else                  {                      //check if the engine is running' or the airplane is moving through the air                      if (!engine.getIgnitionState || engine.getFlameoutState)                      {                                                  if (FlightGlobals.ship_srfSpeed > windmillMinAirspeed && vessel.atmDensity > 0.1f)                              targetRPM = windmillRPM + (windmillRPM * FlightInputHandler.state.mainThrottle); //spins depending on the blade angle                          else                              targetRPM = 0f;                      }                      else                      {                          targetRPM = 1f;                      }                      currentRPM = Mathf.Lerp(currentRPM' targetRPM' engine.engineAccelerationSpeed / spinUpTime * TimeWarp.deltaTime);                  }                    if (currentRPM != 0f)                  {                      //Debug.Log("RPM not 0' prop null: " + (propeller == null) + "' disc null: " + (rotorDisc == null));                        float finalRotationSpeed = rotationSpeed;                      if (thrustRPM != 0f)                      {                          float normalizedThrustRPM = (engine.finalThrust / maxThrust);                          smoothedThrustRPM = Mathf.Lerp(smoothedThrustRPM' normalizedThrustRPM' 0.1f);                          finalRotationSpeed += (thrustRPM * normalizedThrustRPM);                      }                        if (useRotorDiscSwap == 1)                      {                          // if you are using duplicated blades' you don't use a rotor disc' but blur sections for each blade' and need to slow down the rotor itself.                          if (!duplicatedBlades && rotorDisc != null)                           {                              if (currentRPM > rotorDiscFadeInStart)                              {                                  setBladeRendererState(false);                                  rotorDisc.Rotate(Vector3.forward * ((rotorDiscSpeed * 6) * TimeWarp.deltaTime));                              }                              else                              {                                  setBladeRendererState(true);                                  propeller.transform.Rotate(Vector3.forward * ((finalRotationSpeed * 6) * TimeWarp.deltaTime * currentRPM));                                 }                          }                          else                          {                              if (currentRPM > rotorDiscFadeInStart)                              {                                  setBladeRendererState(false);                                  propeller.Rotate(Vector3.forward * ((rotorDiscSpeed * (1 + (5 * engine.fsengine.RPMnormalized))) * TimeWarp.deltaTime));                              }                              else                              {                                  setBladeRendererState(true);                                  propeller.transform.Rotate(Vector3.forward * ((finalRotationSpeed * 6) * TimeWarp.deltaTime * currentRPM));                                                              }                          }                      }                      else                      {                          propeller.transform.Rotate(Vector3.forward * ((finalRotationSpeed * 6) * TimeWarp.deltaTime * currentRPM));                      }                  }                                  }
Magic Number,Firespitter.engine,FSplanePropellerSpinner,C:\repos\snjo_Firespitter\Firespitter\engine\FSplanePropellerSpinner.cs,OnUpdate,The following statement contains a magic number: if (engine != null)              {                    if (usesDeployAnimation)                  {                      if (deployAnimationStartsDeployed && deployAnimation.animTime > 0)                          engine.EngineIgnited = false;                      else if (!deployAnimationStartsDeployed && deployAnimation.animTime < 1)                      {                          engine.EngineIgnited = false;                      }                  }                    if (engine.type == Firespitter.engine.FSengineWrapper.EngineType.FSengine)                  {                      rotationSpeed = engine.fsengine.maxRPM;                      currentRPM = engine.fsengine.RPM / engine.fsengine.maxRPM;                      //Debug.Log("Fsengine found");                  }                  else                  {                      //check if the engine is running' or the airplane is moving through the air                      if (!engine.getIgnitionState || engine.getFlameoutState)                      {                                                  if (FlightGlobals.ship_srfSpeed > windmillMinAirspeed && vessel.atmDensity > 0.1f)                              targetRPM = windmillRPM + (windmillRPM * FlightInputHandler.state.mainThrottle); //spins depending on the blade angle                          else                              targetRPM = 0f;                      }                      else                      {                          targetRPM = 1f;                      }                      currentRPM = Mathf.Lerp(currentRPM' targetRPM' engine.engineAccelerationSpeed / spinUpTime * TimeWarp.deltaTime);                  }                    if (currentRPM != 0f)                  {                      //Debug.Log("RPM not 0' prop null: " + (propeller == null) + "' disc null: " + (rotorDisc == null));                        float finalRotationSpeed = rotationSpeed;                      if (thrustRPM != 0f)                      {                          float normalizedThrustRPM = (engine.finalThrust / maxThrust);                          smoothedThrustRPM = Mathf.Lerp(smoothedThrustRPM' normalizedThrustRPM' 0.1f);                          finalRotationSpeed += (thrustRPM * normalizedThrustRPM);                      }                        if (useRotorDiscSwap == 1)                      {                          // if you are using duplicated blades' you don't use a rotor disc' but blur sections for each blade' and need to slow down the rotor itself.                          if (!duplicatedBlades && rotorDisc != null)                           {                              if (currentRPM > rotorDiscFadeInStart)                              {                                  setBladeRendererState(false);                                  rotorDisc.Rotate(Vector3.forward * ((rotorDiscSpeed * 6) * TimeWarp.deltaTime));                              }                              else                              {                                  setBladeRendererState(true);                                  propeller.transform.Rotate(Vector3.forward * ((finalRotationSpeed * 6) * TimeWarp.deltaTime * currentRPM));                                 }                          }                          else                          {                              if (currentRPM > rotorDiscFadeInStart)                              {                                  setBladeRendererState(false);                                  propeller.Rotate(Vector3.forward * ((rotorDiscSpeed * (1 + (5 * engine.fsengine.RPMnormalized))) * TimeWarp.deltaTime));                              }                              else                              {                                  setBladeRendererState(true);                                  propeller.transform.Rotate(Vector3.forward * ((finalRotationSpeed * 6) * TimeWarp.deltaTime * currentRPM));                                                              }                          }                      }                      else                      {                          propeller.transform.Rotate(Vector3.forward * ((finalRotationSpeed * 6) * TimeWarp.deltaTime * currentRPM));                      }                  }                                  }
Magic Number,Firespitter.engine,FSplanePropellerSpinner,C:\repos\snjo_Firespitter\Firespitter\engine\FSplanePropellerSpinner.cs,OnUpdate,The following statement contains a magic number: if (engine != null)              {                    if (usesDeployAnimation)                  {                      if (deployAnimationStartsDeployed && deployAnimation.animTime > 0)                          engine.EngineIgnited = false;                      else if (!deployAnimationStartsDeployed && deployAnimation.animTime < 1)                      {                          engine.EngineIgnited = false;                      }                  }                    if (engine.type == Firespitter.engine.FSengineWrapper.EngineType.FSengine)                  {                      rotationSpeed = engine.fsengine.maxRPM;                      currentRPM = engine.fsengine.RPM / engine.fsengine.maxRPM;                      //Debug.Log("Fsengine found");                  }                  else                  {                      //check if the engine is running' or the airplane is moving through the air                      if (!engine.getIgnitionState || engine.getFlameoutState)                      {                                                  if (FlightGlobals.ship_srfSpeed > windmillMinAirspeed && vessel.atmDensity > 0.1f)                              targetRPM = windmillRPM + (windmillRPM * FlightInputHandler.state.mainThrottle); //spins depending on the blade angle                          else                              targetRPM = 0f;                      }                      else                      {                          targetRPM = 1f;                      }                      currentRPM = Mathf.Lerp(currentRPM' targetRPM' engine.engineAccelerationSpeed / spinUpTime * TimeWarp.deltaTime);                  }                    if (currentRPM != 0f)                  {                      //Debug.Log("RPM not 0' prop null: " + (propeller == null) + "' disc null: " + (rotorDisc == null));                        float finalRotationSpeed = rotationSpeed;                      if (thrustRPM != 0f)                      {                          float normalizedThrustRPM = (engine.finalThrust / maxThrust);                          smoothedThrustRPM = Mathf.Lerp(smoothedThrustRPM' normalizedThrustRPM' 0.1f);                          finalRotationSpeed += (thrustRPM * normalizedThrustRPM);                      }                        if (useRotorDiscSwap == 1)                      {                          // if you are using duplicated blades' you don't use a rotor disc' but blur sections for each blade' and need to slow down the rotor itself.                          if (!duplicatedBlades && rotorDisc != null)                           {                              if (currentRPM > rotorDiscFadeInStart)                              {                                  setBladeRendererState(false);                                  rotorDisc.Rotate(Vector3.forward * ((rotorDiscSpeed * 6) * TimeWarp.deltaTime));                              }                              else                              {                                  setBladeRendererState(true);                                  propeller.transform.Rotate(Vector3.forward * ((finalRotationSpeed * 6) * TimeWarp.deltaTime * currentRPM));                                 }                          }                          else                          {                              if (currentRPM > rotorDiscFadeInStart)                              {                                  setBladeRendererState(false);                                  propeller.Rotate(Vector3.forward * ((rotorDiscSpeed * (1 + (5 * engine.fsengine.RPMnormalized))) * TimeWarp.deltaTime));                              }                              else                              {                                  setBladeRendererState(true);                                  propeller.transform.Rotate(Vector3.forward * ((finalRotationSpeed * 6) * TimeWarp.deltaTime * currentRPM));                                                              }                          }                      }                      else                      {                          propeller.transform.Rotate(Vector3.forward * ((finalRotationSpeed * 6) * TimeWarp.deltaTime * currentRPM));                      }                  }                                  }
Magic Number,Firespitter.engine,FSengineSounds,C:\repos\snjo_Firespitter\Firespitter\engine\FSengineSounds.cs,OnGUI,The following statement contains a magic number: if (useDebug)              {                  if (!HighLogic.LoadedSceneIsEditor)                      return;                  Rect menuItemRect = new Rect(250f' 200f' 300f' 150f);                  Vector2 buttonSize = new Vector2(30f' 30f);                  Vector2 menuItemSize = new Vector2(200f' 35f);                  if (GUI.Button(new Rect(menuItemRect.x' menuItemRect.y' buttonSize.x' buttonSize.y)' "OK"))                  {                      if (GameDatabase.Instance.ExistsAudioClip(warning))                      {                          doesExist = "Yes";                          createGroup(warningGroup' warning' false);                      }                      else                      {                          doesExist = "No";                      }                  }                    if (GUI.Button(new Rect(menuItemRect.x + buttonSize.x + 10f' menuItemRect.y' buttonSize.x' buttonSize.y)' "C"))                  {                      doesExist = "clear";                  }                    if (GUI.Button(new Rect(menuItemRect.x + ((buttonSize.x + 10f) * 2)' menuItemRect.y' buttonSize.x' buttonSize.y)' ">"))                  {                      if (warningAssigned)                          warningGroup.audio.Play();                  }                    GUI.Label(new Rect(menuItemRect.x + ((buttonSize.x + 10f) * 3)' menuItemRect.y' menuItemSize.x - buttonSize.x - 10f' buttonSize.y)'                          "exists: " + doesExist);                  menuItemRect.y += 30;                  warning = GUI.TextField(new Rect(menuItemRect.x + buttonSize.x + 10f' menuItemRect.y' menuItemSize.x - buttonSize.x - 10f' buttonSize.y)' warning);              }
Magic Number,Firespitter.engine,FSengineSounds,C:\repos\snjo_Firespitter\Firespitter\engine\FSengineSounds.cs,OnGUI,The following statement contains a magic number: if (useDebug)              {                  if (!HighLogic.LoadedSceneIsEditor)                      return;                  Rect menuItemRect = new Rect(250f' 200f' 300f' 150f);                  Vector2 buttonSize = new Vector2(30f' 30f);                  Vector2 menuItemSize = new Vector2(200f' 35f);                  if (GUI.Button(new Rect(menuItemRect.x' menuItemRect.y' buttonSize.x' buttonSize.y)' "OK"))                  {                      if (GameDatabase.Instance.ExistsAudioClip(warning))                      {                          doesExist = "Yes";                          createGroup(warningGroup' warning' false);                      }                      else                      {                          doesExist = "No";                      }                  }                    if (GUI.Button(new Rect(menuItemRect.x + buttonSize.x + 10f' menuItemRect.y' buttonSize.x' buttonSize.y)' "C"))                  {                      doesExist = "clear";                  }                    if (GUI.Button(new Rect(menuItemRect.x + ((buttonSize.x + 10f) * 2)' menuItemRect.y' buttonSize.x' buttonSize.y)' ">"))                  {                      if (warningAssigned)                          warningGroup.audio.Play();                  }                    GUI.Label(new Rect(menuItemRect.x + ((buttonSize.x + 10f) * 3)' menuItemRect.y' menuItemSize.x - buttonSize.x - 10f' buttonSize.y)'                          "exists: " + doesExist);                  menuItemRect.y += 30;                  warning = GUI.TextField(new Rect(menuItemRect.x + buttonSize.x + 10f' menuItemRect.y' menuItemSize.x - buttonSize.x - 10f' buttonSize.y)' warning);              }
Magic Number,Firespitter.engine,FSengineSounds,C:\repos\snjo_Firespitter\Firespitter\engine\FSengineSounds.cs,OnGUI,The following statement contains a magic number: if (useDebug)              {                  if (!HighLogic.LoadedSceneIsEditor)                      return;                  Rect menuItemRect = new Rect(250f' 200f' 300f' 150f);                  Vector2 buttonSize = new Vector2(30f' 30f);                  Vector2 menuItemSize = new Vector2(200f' 35f);                  if (GUI.Button(new Rect(menuItemRect.x' menuItemRect.y' buttonSize.x' buttonSize.y)' "OK"))                  {                      if (GameDatabase.Instance.ExistsAudioClip(warning))                      {                          doesExist = "Yes";                          createGroup(warningGroup' warning' false);                      }                      else                      {                          doesExist = "No";                      }                  }                    if (GUI.Button(new Rect(menuItemRect.x + buttonSize.x + 10f' menuItemRect.y' buttonSize.x' buttonSize.y)' "C"))                  {                      doesExist = "clear";                  }                    if (GUI.Button(new Rect(menuItemRect.x + ((buttonSize.x + 10f) * 2)' menuItemRect.y' buttonSize.x' buttonSize.y)' ">"))                  {                      if (warningAssigned)                          warningGroup.audio.Play();                  }                    GUI.Label(new Rect(menuItemRect.x + ((buttonSize.x + 10f) * 3)' menuItemRect.y' menuItemSize.x - buttonSize.x - 10f' buttonSize.y)'                          "exists: " + doesExist);                  menuItemRect.y += 30;                  warning = GUI.TextField(new Rect(menuItemRect.x + buttonSize.x + 10f' menuItemRect.y' menuItemSize.x - buttonSize.x - 10f' buttonSize.y)' warning);              }
Magic Number,Firespitter.engine,FSrotorTrim,C:\repos\snjo_Firespitter\Firespitter\engine\FSrotorTrim.cs,RadianToDegree,The following statement contains a magic number: return angle * (180.0 / Math.PI);
Magic Number,Firespitter.engine,FSrotorTrim,C:\repos\snjo_Firespitter\Firespitter\engine\FSrotorTrim.cs,DegreeToRadian,The following statement contains a magic number: return Math.PI * angle / 180.0;
Magic Number,Firespitter.engine,FSrotorTrim,C:\repos\snjo_Firespitter\Firespitter\engine\FSrotorTrim.cs,autoHover,The following statement contains a magic number: {                  Vector3 heading = (Vector3d)this.vessel.transform.up;                  Vector3d up = (this.vessel.GetComponent<Rigidbody>().position - this.vessel.mainBody.position).normalized;                    modifiedUp.rotation = Quaternion.LookRotation(up' heading);                  modifiedUp.Rotate(new Vector3(-90' 0' 180));                    partTransform.localRotation = Quaternion.Euler(currentRotation + new Vector3(defaultRotationX' defaultRotationY' defaultRotationZ));                  partTransform.rotation = Quaternion.RotateTowards(partTransform.rotation' modifiedUp.rotation' steerAmount * 4);              }
Magic Number,Firespitter.engine,FSrotorTrim,C:\repos\snjo_Firespitter\Firespitter\engine\FSrotorTrim.cs,autoHover,The following statement contains a magic number: {                  Vector3 heading = (Vector3d)this.vessel.transform.up;                  Vector3d up = (this.vessel.GetComponent<Rigidbody>().position - this.vessel.mainBody.position).normalized;                    modifiedUp.rotation = Quaternion.LookRotation(up' heading);                  modifiedUp.Rotate(new Vector3(-90' 0' 180));                    partTransform.localRotation = Quaternion.Euler(currentRotation + new Vector3(defaultRotationX' defaultRotationY' defaultRotationZ));                  partTransform.rotation = Quaternion.RotateTowards(partTransform.rotation' modifiedUp.rotation' steerAmount * 4);              }
Magic Number,Firespitter.engine,FSrotorTrim,C:\repos\snjo_Firespitter\Firespitter\engine\FSrotorTrim.cs,autoHover,The following statement contains a magic number: {                  Vector3 heading = (Vector3d)this.vessel.transform.up;                  Vector3d up = (this.vessel.GetComponent<Rigidbody>().position - this.vessel.mainBody.position).normalized;                    modifiedUp.rotation = Quaternion.LookRotation(up' heading);                  modifiedUp.Rotate(new Vector3(-90' 0' 180));                    partTransform.localRotation = Quaternion.Euler(currentRotation + new Vector3(defaultRotationX' defaultRotationY' defaultRotationZ));                  partTransform.rotation = Quaternion.RotateTowards(partTransform.rotation' modifiedUp.rotation' steerAmount * 4);              }
Magic Number,Firespitter.engine,FStailRotorThrust,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FStailRotorThrust.cs,setThrust,The following statement contains a magic number: if (modifier == 1)              {                  maxThrust *= 2;              }              else if (modifier == -1)              {                  maxThrust /= 2;              }
Magic Number,Firespitter.engine,FStailRotorThrust,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FStailRotorThrust.cs,setThrust,The following statement contains a magic number: if (modifier == 1)              {                  maxThrust *= 2;              }              else if (modifier == -1)              {                  maxThrust /= 2;              }
Magic Number,Firespitter.engine,FStailRotorThrust,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FStailRotorThrust.cs,FixedUpdate,The following statement contains a magic number: if (initialized)              {                  if (!HighLogic.LoadedSceneIsFlight || !vessel.isActiveVessel) return;                  FlightCtrlState ctrl = vessel.ctrlState;                  Vector3 steeringInput = new Vector3(0' 0' 0);                    if (altInputModeEnabled)                  {                      steeringInput.y = ctrl.roll;                  }                  else                  {                      steeringInput.y = ctrl.yaw;                  }                    //bool inputReceived = steeringInput.y != 0f;                  //Debug.Log("Force: " + steeringInput.y);                    if (invertInput) steeringInput *= -1; // if the part is upside down' you can toggle inverse controls for it.                                engine.throttleLocked = true;                    if (steeringInput.y > 0)                  {                      partTransform.localRotation = Quaternion.FromToRotation(new Vector3(0' 1' 0)' new Vector3(0' -1' 0)) * defaultRotation;                  }                  else                  {                      partTransform.localRotation = defaultRotation;                  }                    if (steeringInput.y == 0)                  {                      engine.maxThrust = idleThrust;                  }                  else                  {                      engine.maxThrust = maxThrust * Mathf.Abs(steeringInput.y);                  }                    // blade rotation                    bool engineActive = engine && engine.getIgnitionState && !engine.getFlameoutState;                    if (engineActive && timeCount < 1000)                  {                      timeCount += spinUpTime;                  }                  else if (!engineActive && timeCount > 0)                  {                      timeCount -= spinUpTime;                  }                    if (timeCount < 0) timeCount = 0; // in case people give the spinUpTime in an unexpected way                    float currentSpeed = ((rotationSpeed * 6) * TimeWarp.deltaTime * ((float)timeCount / 1000));                  if (rotorParentTransform != null)                  {                      rotorParentTransform.transform.Rotate(Vector3.forward * currentSpeed);                  }              }
Magic Number,Firespitter.engine,FStailRotorThrust,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FStailRotorThrust.cs,FixedUpdate,The following statement contains a magic number: if (initialized)              {                  if (!HighLogic.LoadedSceneIsFlight || !vessel.isActiveVessel) return;                  FlightCtrlState ctrl = vessel.ctrlState;                  Vector3 steeringInput = new Vector3(0' 0' 0);                    if (altInputModeEnabled)                  {                      steeringInput.y = ctrl.roll;                  }                  else                  {                      steeringInput.y = ctrl.yaw;                  }                    //bool inputReceived = steeringInput.y != 0f;                  //Debug.Log("Force: " + steeringInput.y);                    if (invertInput) steeringInput *= -1; // if the part is upside down' you can toggle inverse controls for it.                                engine.throttleLocked = true;                    if (steeringInput.y > 0)                  {                      partTransform.localRotation = Quaternion.FromToRotation(new Vector3(0' 1' 0)' new Vector3(0' -1' 0)) * defaultRotation;                  }                  else                  {                      partTransform.localRotation = defaultRotation;                  }                    if (steeringInput.y == 0)                  {                      engine.maxThrust = idleThrust;                  }                  else                  {                      engine.maxThrust = maxThrust * Mathf.Abs(steeringInput.y);                  }                    // blade rotation                    bool engineActive = engine && engine.getIgnitionState && !engine.getFlameoutState;                    if (engineActive && timeCount < 1000)                  {                      timeCount += spinUpTime;                  }                  else if (!engineActive && timeCount > 0)                  {                      timeCount -= spinUpTime;                  }                    if (timeCount < 0) timeCount = 0; // in case people give the spinUpTime in an unexpected way                    float currentSpeed = ((rotationSpeed * 6) * TimeWarp.deltaTime * ((float)timeCount / 1000));                  if (rotorParentTransform != null)                  {                      rotorParentTransform.transform.Rotate(Vector3.forward * currentSpeed);                  }              }
Magic Number,Firespitter.engine,FStailRotorThrust,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FStailRotorThrust.cs,FixedUpdate,The following statement contains a magic number: if (initialized)              {                  if (!HighLogic.LoadedSceneIsFlight || !vessel.isActiveVessel) return;                  FlightCtrlState ctrl = vessel.ctrlState;                  Vector3 steeringInput = new Vector3(0' 0' 0);                    if (altInputModeEnabled)                  {                      steeringInput.y = ctrl.roll;                  }                  else                  {                      steeringInput.y = ctrl.yaw;                  }                    //bool inputReceived = steeringInput.y != 0f;                  //Debug.Log("Force: " + steeringInput.y);                    if (invertInput) steeringInput *= -1; // if the part is upside down' you can toggle inverse controls for it.                                engine.throttleLocked = true;                    if (steeringInput.y > 0)                  {                      partTransform.localRotation = Quaternion.FromToRotation(new Vector3(0' 1' 0)' new Vector3(0' -1' 0)) * defaultRotation;                  }                  else                  {                      partTransform.localRotation = defaultRotation;                  }                    if (steeringInput.y == 0)                  {                      engine.maxThrust = idleThrust;                  }                  else                  {                      engine.maxThrust = maxThrust * Mathf.Abs(steeringInput.y);                  }                    // blade rotation                    bool engineActive = engine && engine.getIgnitionState && !engine.getFlameoutState;                    if (engineActive && timeCount < 1000)                  {                      timeCount += spinUpTime;                  }                  else if (!engineActive && timeCount > 0)                  {                      timeCount -= spinUpTime;                  }                    if (timeCount < 0) timeCount = 0; // in case people give the spinUpTime in an unexpected way                    float currentSpeed = ((rotationSpeed * 6) * TimeWarp.deltaTime * ((float)timeCount / 1000));                  if (rotorParentTransform != null)                  {                      rotorParentTransform.transform.Rotate(Vector3.forward * currentSpeed);                  }              }
Magic Number,Firespitter.engine,FSVTOLrotator,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSVTOLrotator.cs,OnStart,The following statement contains a magic number: if (HighLogic.LoadedSceneIsEditor)              {                  elementInfoText = new PopupElement("Presets set to 0 are excluded.");                  popup = new FSGUIPopup(part' "FSVTOLrotator"' 0' popupWindowID' new Rect(550f' 200f' 325f' 150f)' "VTOL presets"' elementInfoText); //FSGUIwindowID.VTOLrotator                  popup.sections[0].elements.Add(new PopupElement("Settings are per engine!"));                    elementTestAngle = new PopupElement(new PopupButton("Use Preset " + selectedListAngle' 100f' testUseAngle));                  popup.sections[0].elements.Add(elementTestAngle);                  elementTestAngle.buttons.Add(new PopupButton("Next"' 40f' testNextAngle));                  elementTestAngle.buttons.Add(new PopupButton("Reset"' 50f' testReset));                    elementStepSize = new PopupElement("Step size"' stepAngle.ToString());                  elementStepSize.titleSize = 135f;                  elementStepSize.inputSize = 55f;                  popup.sections[0].elements.Add(elementStepSize);                    elementMaxDownAngle = new PopupElement("Max negative rot.'"' maxDownAngle.ToString());                  elementMaxDownAngle.titleSize = 135f;                  elementMaxDownAngle.inputSize = 55f;                  popup.sections[0].elements.Add(elementMaxDownAngle);                    for (int i = 0; i <= 5; i++) // ------------- hard coded ---------------------------                  {                      elementPresets.Add(new PopupElement());                      float presetAngle = 0f;                      if (i < availableAnglesList.Count)                      {                          presetAngle = availableAnglesList[i];                      }                      elementPresets[i] = new PopupElement("Preset " + i' presetAngle.ToString());                      elementPresets[i].titleSize = 135f;                      elementPresets[i].inputSize = 55f;                      popup.sections[0].elements.Add(elementPresets[i]);                  }                    popup.sections[0].elements.Add(new PopupElement("--- VTOL steering ---"));                  popup.sections[0].elements.Add(elementVTOLSteeringMode);                  popup.sections[0].elements.Add(elementSteerRoll);                  popup.sections[0].elements.Add(elementSteerYaw);                  popup.sections[0].elements.Add(elementSteerPitch);                  popup.sections[0].elements.Add(elementSteerPitchType);                  updateButtonTexts();                    popup.useInFlight = false;                  popup.useInEditor = true;                  //popup.useInActionEditor = true;                          }
Magic Number,Firespitter.engine,FSVTOLrotator,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSVTOLrotator.cs,OnGUI,The following statement contains a magic number: if (popup != null)              {                  if (HighLogic.LoadedSceneIsEditor)                  {                      //elementCurrentAngle.inputText = "Current rot.: " + currentAngle;                      popup.popup();                      stepAngle = float.Parse(elementStepSize.inputText);                      maxDownAngle = float.Parse(elementMaxDownAngle.inputText);                        // fill the kspfield preset values from the popup                      if (elementPresets.Count > 0)                          availableAngles1.x = float.Parse(elementPresets[0].inputText);                      if (elementPresets.Count > 1)                          availableAngles1.y = float.Parse(elementPresets[1].inputText);                      if (elementPresets.Count > 2)                          availableAngles1.z = float.Parse(elementPresets[2].inputText);                      if (elementPresets.Count > 3)                          availableAngles2.x = float.Parse(elementPresets[3].inputText);                      if (elementPresets.Count > 4)                          availableAngles2.y = float.Parse(elementPresets[4].inputText);                      if (elementPresets.Count > 5)                          availableAngles2.z = float.Parse(elementPresets[5].inputText);                      elementTestAngle.buttons[0].buttonText = "Use Preset " + selectedListAngle;                  }                    if (HighLogic.LoadedSceneIsFlight && popup.useInFlight)                  {                      popup.popup();                  }              }
Magic Number,Firespitter.engine,FSVTOLrotator,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSVTOLrotator.cs,OnGUI,The following statement contains a magic number: if (popup != null)              {                  if (HighLogic.LoadedSceneIsEditor)                  {                      //elementCurrentAngle.inputText = "Current rot.: " + currentAngle;                      popup.popup();                      stepAngle = float.Parse(elementStepSize.inputText);                      maxDownAngle = float.Parse(elementMaxDownAngle.inputText);                        // fill the kspfield preset values from the popup                      if (elementPresets.Count > 0)                          availableAngles1.x = float.Parse(elementPresets[0].inputText);                      if (elementPresets.Count > 1)                          availableAngles1.y = float.Parse(elementPresets[1].inputText);                      if (elementPresets.Count > 2)                          availableAngles1.z = float.Parse(elementPresets[2].inputText);                      if (elementPresets.Count > 3)                          availableAngles2.x = float.Parse(elementPresets[3].inputText);                      if (elementPresets.Count > 4)                          availableAngles2.y = float.Parse(elementPresets[4].inputText);                      if (elementPresets.Count > 5)                          availableAngles2.z = float.Parse(elementPresets[5].inputText);                      elementTestAngle.buttons[0].buttonText = "Use Preset " + selectedListAngle;                  }                    if (HighLogic.LoadedSceneIsFlight && popup.useInFlight)                  {                      popup.popup();                  }              }
Magic Number,Firespitter.engine,FSVTOLrotator,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSVTOLrotator.cs,OnGUI,The following statement contains a magic number: if (popup != null)              {                  if (HighLogic.LoadedSceneIsEditor)                  {                      //elementCurrentAngle.inputText = "Current rot.: " + currentAngle;                      popup.popup();                      stepAngle = float.Parse(elementStepSize.inputText);                      maxDownAngle = float.Parse(elementMaxDownAngle.inputText);                        // fill the kspfield preset values from the popup                      if (elementPresets.Count > 0)                          availableAngles1.x = float.Parse(elementPresets[0].inputText);                      if (elementPresets.Count > 1)                          availableAngles1.y = float.Parse(elementPresets[1].inputText);                      if (elementPresets.Count > 2)                          availableAngles1.z = float.Parse(elementPresets[2].inputText);                      if (elementPresets.Count > 3)                          availableAngles2.x = float.Parse(elementPresets[3].inputText);                      if (elementPresets.Count > 4)                          availableAngles2.y = float.Parse(elementPresets[4].inputText);                      if (elementPresets.Count > 5)                          availableAngles2.z = float.Parse(elementPresets[5].inputText);                      elementTestAngle.buttons[0].buttonText = "Use Preset " + selectedListAngle;                  }                    if (HighLogic.LoadedSceneIsFlight && popup.useInFlight)                  {                      popup.popup();                  }              }
Magic Number,Firespitter.engine,FSVTOLrotator,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSVTOLrotator.cs,OnGUI,The following statement contains a magic number: if (popup != null)              {                  if (HighLogic.LoadedSceneIsEditor)                  {                      //elementCurrentAngle.inputText = "Current rot.: " + currentAngle;                      popup.popup();                      stepAngle = float.Parse(elementStepSize.inputText);                      maxDownAngle = float.Parse(elementMaxDownAngle.inputText);                        // fill the kspfield preset values from the popup                      if (elementPresets.Count > 0)                          availableAngles1.x = float.Parse(elementPresets[0].inputText);                      if (elementPresets.Count > 1)                          availableAngles1.y = float.Parse(elementPresets[1].inputText);                      if (elementPresets.Count > 2)                          availableAngles1.z = float.Parse(elementPresets[2].inputText);                      if (elementPresets.Count > 3)                          availableAngles2.x = float.Parse(elementPresets[3].inputText);                      if (elementPresets.Count > 4)                          availableAngles2.y = float.Parse(elementPresets[4].inputText);                      if (elementPresets.Count > 5)                          availableAngles2.z = float.Parse(elementPresets[5].inputText);                      elementTestAngle.buttons[0].buttonText = "Use Preset " + selectedListAngle;                  }                    if (HighLogic.LoadedSceneIsFlight && popup.useInFlight)                  {                      popup.popup();                  }              }
Magic Number,Firespitter.engine,FSVTOLrotator,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSVTOLrotator.cs,OnGUI,The following statement contains a magic number: if (popup != null)              {                  if (HighLogic.LoadedSceneIsEditor)                  {                      //elementCurrentAngle.inputText = "Current rot.: " + currentAngle;                      popup.popup();                      stepAngle = float.Parse(elementStepSize.inputText);                      maxDownAngle = float.Parse(elementMaxDownAngle.inputText);                        // fill the kspfield preset values from the popup                      if (elementPresets.Count > 0)                          availableAngles1.x = float.Parse(elementPresets[0].inputText);                      if (elementPresets.Count > 1)                          availableAngles1.y = float.Parse(elementPresets[1].inputText);                      if (elementPresets.Count > 2)                          availableAngles1.z = float.Parse(elementPresets[2].inputText);                      if (elementPresets.Count > 3)                          availableAngles2.x = float.Parse(elementPresets[3].inputText);                      if (elementPresets.Count > 4)                          availableAngles2.y = float.Parse(elementPresets[4].inputText);                      if (elementPresets.Count > 5)                          availableAngles2.z = float.Parse(elementPresets[5].inputText);                      elementTestAngle.buttons[0].buttonText = "Use Preset " + selectedListAngle;                  }                    if (HighLogic.LoadedSceneIsFlight && popup.useInFlight)                  {                      popup.popup();                  }              }
Magic Number,Firespitter.engine,FSVTOLrotator,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSVTOLrotator.cs,OnGUI,The following statement contains a magic number: if (popup != null)              {                  if (HighLogic.LoadedSceneIsEditor)                  {                      //elementCurrentAngle.inputText = "Current rot.: " + currentAngle;                      popup.popup();                      stepAngle = float.Parse(elementStepSize.inputText);                      maxDownAngle = float.Parse(elementMaxDownAngle.inputText);                        // fill the kspfield preset values from the popup                      if (elementPresets.Count > 0)                          availableAngles1.x = float.Parse(elementPresets[0].inputText);                      if (elementPresets.Count > 1)                          availableAngles1.y = float.Parse(elementPresets[1].inputText);                      if (elementPresets.Count > 2)                          availableAngles1.z = float.Parse(elementPresets[2].inputText);                      if (elementPresets.Count > 3)                          availableAngles2.x = float.Parse(elementPresets[3].inputText);                      if (elementPresets.Count > 4)                          availableAngles2.y = float.Parse(elementPresets[4].inputText);                      if (elementPresets.Count > 5)                          availableAngles2.z = float.Parse(elementPresets[5].inputText);                      elementTestAngle.buttons[0].buttonText = "Use Preset " + selectedListAngle;                  }                    if (HighLogic.LoadedSceneIsFlight && popup.useInFlight)                  {                      popup.popup();                  }              }
Magic Number,Firespitter.engine,FSVTOLrotator,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSVTOLrotator.cs,OnGUI,The following statement contains a magic number: if (popup != null)              {                  if (HighLogic.LoadedSceneIsEditor)                  {                      //elementCurrentAngle.inputText = "Current rot.: " + currentAngle;                      popup.popup();                      stepAngle = float.Parse(elementStepSize.inputText);                      maxDownAngle = float.Parse(elementMaxDownAngle.inputText);                        // fill the kspfield preset values from the popup                      if (elementPresets.Count > 0)                          availableAngles1.x = float.Parse(elementPresets[0].inputText);                      if (elementPresets.Count > 1)                          availableAngles1.y = float.Parse(elementPresets[1].inputText);                      if (elementPresets.Count > 2)                          availableAngles1.z = float.Parse(elementPresets[2].inputText);                      if (elementPresets.Count > 3)                          availableAngles2.x = float.Parse(elementPresets[3].inputText);                      if (elementPresets.Count > 4)                          availableAngles2.y = float.Parse(elementPresets[4].inputText);                      if (elementPresets.Count > 5)                          availableAngles2.z = float.Parse(elementPresets[5].inputText);                      elementTestAngle.buttons[0].buttonText = "Use Preset " + selectedListAngle;                  }                    if (HighLogic.LoadedSceneIsFlight && popup.useInFlight)                  {                      popup.popup();                  }              }
Magic Number,Firespitter.engine,FSVTOLrotator,C:\repos\snjo_Firespitter\Firespitter\engine\Stock based modules\FSVTOLrotator.cs,OnGUI,The following statement contains a magic number: if (popup != null)              {                  if (HighLogic.LoadedSceneIsEditor)                  {                      //elementCurrentAngle.inputText = "Current rot.: " + currentAngle;                      popup.popup();                      stepAngle = float.Parse(elementStepSize.inputText);                      maxDownAngle = float.Parse(elementMaxDownAngle.inputText);                        // fill the kspfield preset values from the popup                      if (elementPresets.Count > 0)                          availableAngles1.x = float.Parse(elementPresets[0].inputText);                      if (elementPresets.Count > 1)                          availableAngles1.y = float.Parse(elementPresets[1].inputText);                      if (elementPresets.Count > 2)                          availableAngles1.z = float.Parse(elementPresets[2].inputText);                      if (elementPresets.Count > 3)                          availableAngles2.x = float.Parse(elementPresets[3].inputText);                      if (elementPresets.Count > 4)                          availableAngles2.y = float.Parse(elementPresets[4].inputText);                      if (elementPresets.Count > 5)                          availableAngles2.z = float.Parse(elementPresets[5].inputText);                      elementTestAngle.buttons[0].buttonText = "Use Preset " + selectedListAngle;                  }                    if (HighLogic.LoadedSceneIsFlight && popup.useInFlight)                  {                      popup.popup();                  }              }
Magic Number,Firespitter.info,FSpartDirectionGuide,C:\repos\snjo_Firespitter\Firespitter\info\FSpartDirectionGuide.cs,createLineRenderer,The following statement contains a magic number: guideLine.SetVertexCount(5);
Magic Number,Firespitter.info,FSpartDirectionGuide,C:\repos\snjo_Firespitter\Firespitter\info\FSpartDirectionGuide.cs,updateLinePosition,The following statement contains a magic number: guideLine.SetPosition(2' guidePointArrowLineLeft);
Magic Number,Firespitter.info,FSpartDirectionGuide,C:\repos\snjo_Firespitter\Firespitter\info\FSpartDirectionGuide.cs,updateLinePosition,The following statement contains a magic number: guideLine.SetPosition(3' guidePointForward);
Magic Number,Firespitter.info,FSpartDirectionGuide,C:\repos\snjo_Firespitter\Firespitter\info\FSpartDirectionGuide.cs,updateLinePosition,The following statement contains a magic number: guideLine.SetPosition(4' guidePointArrowLineRight);
Magic Number,Firespitter.info,FSinputVisualizer,C:\repos\snjo_Firespitter\Firespitter\info\FSinputVisualizer.cs,createStyles,The following statement contains a magic number: buttonPassive.padding = new RectOffset(2' 2' 2' 2);
Magic Number,Firespitter.info,FSinputVisualizer,C:\repos\snjo_Firespitter\Firespitter\info\FSinputVisualizer.cs,createStyles,The following statement contains a magic number: buttonPassive.padding = new RectOffset(2' 2' 2' 2);
Magic Number,Firespitter.info,FSinputVisualizer,C:\repos\snjo_Firespitter\Firespitter\info\FSinputVisualizer.cs,createStyles,The following statement contains a magic number: buttonPassive.padding = new RectOffset(2' 2' 2' 2);
Magic Number,Firespitter.info,FSinputVisualizer,C:\repos\snjo_Firespitter\Firespitter\info\FSinputVisualizer.cs,createStyles,The following statement contains a magic number: buttonPassive.padding = new RectOffset(2' 2' 2' 2);
Magic Number,Firespitter.info,FSinputVisualizer,C:\repos\snjo_Firespitter\Firespitter\info\FSinputVisualizer.cs,createStyles,The following statement contains a magic number: buttonActive.padding = new RectOffset(2' 2' 2' 2);
Magic Number,Firespitter.info,FSinputVisualizer,C:\repos\snjo_Firespitter\Firespitter\info\FSinputVisualizer.cs,createStyles,The following statement contains a magic number: buttonActive.padding = new RectOffset(2' 2' 2' 2);
Magic Number,Firespitter.info,FSinputVisualizer,C:\repos\snjo_Firespitter\Firespitter\info\FSinputVisualizer.cs,createStyles,The following statement contains a magic number: buttonActive.padding = new RectOffset(2' 2' 2' 2);
Magic Number,Firespitter.info,FSinputVisualizer,C:\repos\snjo_Firespitter\Firespitter\info\FSinputVisualizer.cs,createStyles,The following statement contains a magic number: buttonActive.padding = new RectOffset(2' 2' 2' 2);
Magic Number,Firespitter.info,FSinputVisualizer,C:\repos\snjo_Firespitter\Firespitter\info\FSinputVisualizer.cs,OnGUI,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight)              {                  if (!stylesCreated)                      createStyles();                  windowRect = GUI.Window(windowID' windowRect' drawWindow' "Input Visualizer"' buttonActive);                    float letterKeysXpos = windowRect.x + buttonSize.x * 2 + padding * 2;                  drawPosition.x = letterKeysXpos;                  drawPosition.y = windowRect.y + windowRect.height + padding;                    GUI.Button(drawPosition' "Q"' getButtonStyle(KeyCode.Q));                  nextButtonPos();                  GUI.Button(drawPosition' "W"' getButtonStyle(KeyCode.W));                  nextButtonPos();                  GUI.Button(drawPosition' "E"' getButtonStyle(KeyCode.E));                  newLine(letterKeysXpos);                    GUI.Button(drawPosition' "A"' getButtonStyle(KeyCode.A));                  nextButtonPos();                  GUI.Button(drawPosition' "S"' getButtonStyle(KeyCode.S));                  nextButtonPos();                  GUI.Button(drawPosition' "D"' getButtonStyle(KeyCode.D));                  newLine(letterKeysXpos);                    GUI.Button(drawPosition' "Z"' getButtonStyle(KeyCode.Z));                  nextButtonPos();                  GUI.Button(drawPosition' "X"' getButtonStyle(KeyCode.X));                  nextButtonPos();                  GUI.Button(drawPosition' "C"' getButtonStyle(KeyCode.C));                  newLine(letterKeysXpos);                    drawPosition.x = windowRect.x;                  drawPosition.y = windowRect.y + windowRect.height + padding * 2 + buttonSize.y;                  GUI.Button(longButtonRect(2)' "Caps"' getButtonStyle(KeyCode.CapsLock));                  drawPosition.y += buttonSize.y + padding;                  GUI.Button(longButtonRect(2)' "Shift"' getButtonStyle(KeyCode.LeftShift));                  drawPosition.y += buttonSize.y + padding;                  GUI.Button(longButtonRect(2)' "Ctrl"' getButtonStyle(KeyCode.LeftControl));              }
Magic Number,Firespitter.info,FSinputVisualizer,C:\repos\snjo_Firespitter\Firespitter\info\FSinputVisualizer.cs,OnGUI,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight)              {                  if (!stylesCreated)                      createStyles();                  windowRect = GUI.Window(windowID' windowRect' drawWindow' "Input Visualizer"' buttonActive);                    float letterKeysXpos = windowRect.x + buttonSize.x * 2 + padding * 2;                  drawPosition.x = letterKeysXpos;                  drawPosition.y = windowRect.y + windowRect.height + padding;                    GUI.Button(drawPosition' "Q"' getButtonStyle(KeyCode.Q));                  nextButtonPos();                  GUI.Button(drawPosition' "W"' getButtonStyle(KeyCode.W));                  nextButtonPos();                  GUI.Button(drawPosition' "E"' getButtonStyle(KeyCode.E));                  newLine(letterKeysXpos);                    GUI.Button(drawPosition' "A"' getButtonStyle(KeyCode.A));                  nextButtonPos();                  GUI.Button(drawPosition' "S"' getButtonStyle(KeyCode.S));                  nextButtonPos();                  GUI.Button(drawPosition' "D"' getButtonStyle(KeyCode.D));                  newLine(letterKeysXpos);                    GUI.Button(drawPosition' "Z"' getButtonStyle(KeyCode.Z));                  nextButtonPos();                  GUI.Button(drawPosition' "X"' getButtonStyle(KeyCode.X));                  nextButtonPos();                  GUI.Button(drawPosition' "C"' getButtonStyle(KeyCode.C));                  newLine(letterKeysXpos);                    drawPosition.x = windowRect.x;                  drawPosition.y = windowRect.y + windowRect.height + padding * 2 + buttonSize.y;                  GUI.Button(longButtonRect(2)' "Caps"' getButtonStyle(KeyCode.CapsLock));                  drawPosition.y += buttonSize.y + padding;                  GUI.Button(longButtonRect(2)' "Shift"' getButtonStyle(KeyCode.LeftShift));                  drawPosition.y += buttonSize.y + padding;                  GUI.Button(longButtonRect(2)' "Ctrl"' getButtonStyle(KeyCode.LeftControl));              }
Magic Number,Firespitter.info,FSinputVisualizer,C:\repos\snjo_Firespitter\Firespitter\info\FSinputVisualizer.cs,OnGUI,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight)              {                  if (!stylesCreated)                      createStyles();                  windowRect = GUI.Window(windowID' windowRect' drawWindow' "Input Visualizer"' buttonActive);                    float letterKeysXpos = windowRect.x + buttonSize.x * 2 + padding * 2;                  drawPosition.x = letterKeysXpos;                  drawPosition.y = windowRect.y + windowRect.height + padding;                    GUI.Button(drawPosition' "Q"' getButtonStyle(KeyCode.Q));                  nextButtonPos();                  GUI.Button(drawPosition' "W"' getButtonStyle(KeyCode.W));                  nextButtonPos();                  GUI.Button(drawPosition' "E"' getButtonStyle(KeyCode.E));                  newLine(letterKeysXpos);                    GUI.Button(drawPosition' "A"' getButtonStyle(KeyCode.A));                  nextButtonPos();                  GUI.Button(drawPosition' "S"' getButtonStyle(KeyCode.S));                  nextButtonPos();                  GUI.Button(drawPosition' "D"' getButtonStyle(KeyCode.D));                  newLine(letterKeysXpos);                    GUI.Button(drawPosition' "Z"' getButtonStyle(KeyCode.Z));                  nextButtonPos();                  GUI.Button(drawPosition' "X"' getButtonStyle(KeyCode.X));                  nextButtonPos();                  GUI.Button(drawPosition' "C"' getButtonStyle(KeyCode.C));                  newLine(letterKeysXpos);                    drawPosition.x = windowRect.x;                  drawPosition.y = windowRect.y + windowRect.height + padding * 2 + buttonSize.y;                  GUI.Button(longButtonRect(2)' "Caps"' getButtonStyle(KeyCode.CapsLock));                  drawPosition.y += buttonSize.y + padding;                  GUI.Button(longButtonRect(2)' "Shift"' getButtonStyle(KeyCode.LeftShift));                  drawPosition.y += buttonSize.y + padding;                  GUI.Button(longButtonRect(2)' "Ctrl"' getButtonStyle(KeyCode.LeftControl));              }
Magic Number,Firespitter.info,FSinputVisualizer,C:\repos\snjo_Firespitter\Firespitter\info\FSinputVisualizer.cs,OnGUI,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight)              {                  if (!stylesCreated)                      createStyles();                  windowRect = GUI.Window(windowID' windowRect' drawWindow' "Input Visualizer"' buttonActive);                    float letterKeysXpos = windowRect.x + buttonSize.x * 2 + padding * 2;                  drawPosition.x = letterKeysXpos;                  drawPosition.y = windowRect.y + windowRect.height + padding;                    GUI.Button(drawPosition' "Q"' getButtonStyle(KeyCode.Q));                  nextButtonPos();                  GUI.Button(drawPosition' "W"' getButtonStyle(KeyCode.W));                  nextButtonPos();                  GUI.Button(drawPosition' "E"' getButtonStyle(KeyCode.E));                  newLine(letterKeysXpos);                    GUI.Button(drawPosition' "A"' getButtonStyle(KeyCode.A));                  nextButtonPos();                  GUI.Button(drawPosition' "S"' getButtonStyle(KeyCode.S));                  nextButtonPos();                  GUI.Button(drawPosition' "D"' getButtonStyle(KeyCode.D));                  newLine(letterKeysXpos);                    GUI.Button(drawPosition' "Z"' getButtonStyle(KeyCode.Z));                  nextButtonPos();                  GUI.Button(drawPosition' "X"' getButtonStyle(KeyCode.X));                  nextButtonPos();                  GUI.Button(drawPosition' "C"' getButtonStyle(KeyCode.C));                  newLine(letterKeysXpos);                    drawPosition.x = windowRect.x;                  drawPosition.y = windowRect.y + windowRect.height + padding * 2 + buttonSize.y;                  GUI.Button(longButtonRect(2)' "Caps"' getButtonStyle(KeyCode.CapsLock));                  drawPosition.y += buttonSize.y + padding;                  GUI.Button(longButtonRect(2)' "Shift"' getButtonStyle(KeyCode.LeftShift));                  drawPosition.y += buttonSize.y + padding;                  GUI.Button(longButtonRect(2)' "Ctrl"' getButtonStyle(KeyCode.LeftControl));              }
Magic Number,Firespitter.info,FSinputVisualizer,C:\repos\snjo_Firespitter\Firespitter\info\FSinputVisualizer.cs,OnGUI,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight)              {                  if (!stylesCreated)                      createStyles();                  windowRect = GUI.Window(windowID' windowRect' drawWindow' "Input Visualizer"' buttonActive);                    float letterKeysXpos = windowRect.x + buttonSize.x * 2 + padding * 2;                  drawPosition.x = letterKeysXpos;                  drawPosition.y = windowRect.y + windowRect.height + padding;                    GUI.Button(drawPosition' "Q"' getButtonStyle(KeyCode.Q));                  nextButtonPos();                  GUI.Button(drawPosition' "W"' getButtonStyle(KeyCode.W));                  nextButtonPos();                  GUI.Button(drawPosition' "E"' getButtonStyle(KeyCode.E));                  newLine(letterKeysXpos);                    GUI.Button(drawPosition' "A"' getButtonStyle(KeyCode.A));                  nextButtonPos();                  GUI.Button(drawPosition' "S"' getButtonStyle(KeyCode.S));                  nextButtonPos();                  GUI.Button(drawPosition' "D"' getButtonStyle(KeyCode.D));                  newLine(letterKeysXpos);                    GUI.Button(drawPosition' "Z"' getButtonStyle(KeyCode.Z));                  nextButtonPos();                  GUI.Button(drawPosition' "X"' getButtonStyle(KeyCode.X));                  nextButtonPos();                  GUI.Button(drawPosition' "C"' getButtonStyle(KeyCode.C));                  newLine(letterKeysXpos);                    drawPosition.x = windowRect.x;                  drawPosition.y = windowRect.y + windowRect.height + padding * 2 + buttonSize.y;                  GUI.Button(longButtonRect(2)' "Caps"' getButtonStyle(KeyCode.CapsLock));                  drawPosition.y += buttonSize.y + padding;                  GUI.Button(longButtonRect(2)' "Shift"' getButtonStyle(KeyCode.LeftShift));                  drawPosition.y += buttonSize.y + padding;                  GUI.Button(longButtonRect(2)' "Ctrl"' getButtonStyle(KeyCode.LeftControl));              }
Magic Number,Firespitter.info,FSinputVisualizer,C:\repos\snjo_Firespitter\Firespitter\info\FSinputVisualizer.cs,OnGUI,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight)              {                  if (!stylesCreated)                      createStyles();                  windowRect = GUI.Window(windowID' windowRect' drawWindow' "Input Visualizer"' buttonActive);                    float letterKeysXpos = windowRect.x + buttonSize.x * 2 + padding * 2;                  drawPosition.x = letterKeysXpos;                  drawPosition.y = windowRect.y + windowRect.height + padding;                    GUI.Button(drawPosition' "Q"' getButtonStyle(KeyCode.Q));                  nextButtonPos();                  GUI.Button(drawPosition' "W"' getButtonStyle(KeyCode.W));                  nextButtonPos();                  GUI.Button(drawPosition' "E"' getButtonStyle(KeyCode.E));                  newLine(letterKeysXpos);                    GUI.Button(drawPosition' "A"' getButtonStyle(KeyCode.A));                  nextButtonPos();                  GUI.Button(drawPosition' "S"' getButtonStyle(KeyCode.S));                  nextButtonPos();                  GUI.Button(drawPosition' "D"' getButtonStyle(KeyCode.D));                  newLine(letterKeysXpos);                    GUI.Button(drawPosition' "Z"' getButtonStyle(KeyCode.Z));                  nextButtonPos();                  GUI.Button(drawPosition' "X"' getButtonStyle(KeyCode.X));                  nextButtonPos();                  GUI.Button(drawPosition' "C"' getButtonStyle(KeyCode.C));                  newLine(letterKeysXpos);                    drawPosition.x = windowRect.x;                  drawPosition.y = windowRect.y + windowRect.height + padding * 2 + buttonSize.y;                  GUI.Button(longButtonRect(2)' "Caps"' getButtonStyle(KeyCode.CapsLock));                  drawPosition.y += buttonSize.y + padding;                  GUI.Button(longButtonRect(2)' "Shift"' getButtonStyle(KeyCode.LeftShift));                  drawPosition.y += buttonSize.y + padding;                  GUI.Button(longButtonRect(2)' "Ctrl"' getButtonStyle(KeyCode.LeftControl));              }
Magic Number,Firespitter.info,FSinfoPopup,C:\repos\snjo_Firespitter\Firespitter\info\FSinfoPopup.cs,drawWindow,The following statement contains a magic number: if (GUI.Button(new Rect(menuItemRect.x + (menuItemSize.x / 2)' menuItemRect.y' buttonSize.x' buttonSize.y)' useHotkeyString))              {                  useHotkey = !useHotkey;              }
Magic Number,Firespitter.info,FSinfoPopup,C:\repos\snjo_Firespitter\Firespitter\info\FSinfoPopup.cs,drawWindow,The following statement contains a magic number: GUI.Label(new Rect(menuItemRect.x + buttonSize.x + 10f + (menuItemSize.x / 2)' menuItemRect.y' menuItemSize.x - buttonSize.x - 10f' buttonSize.y)' "Use hotkey (" + toggleKey + ")");
Magic Number,Firespitter.info,FSinfoPopup,C:\repos\snjo_Firespitter\Firespitter\info\FSinfoPopup.cs,drawWindow,The following statement contains a magic number: if (GUI.Button(new Rect(menuItemRect.x' menuItemRect.y' buttonSize.x * 2' buttonSize.y)' "Edit"))              {                  editMode = !editMode;                  shownByUser = true;              }
Magic Number,Firespitter.info,FSinfoPopup,C:\repos\snjo_Firespitter\Firespitter\info\FSinfoPopup.cs,drawWindow,The following statement contains a magic number: if (!shownByUser)                  GUI.Label(new Rect(menuItemRect.x + (buttonSize.x * 2) + 20f' menuItemRect.y' menuItemRect.width' menuItemRect.height)' "Hiding this window in " + (int)countDown);
Magic Number,Firespitter.info,FSinfoPopup,C:\repos\snjo_Firespitter\Firespitter\info\FSinfoPopup.cs,OnGUI,The following statement contains a magic number: if (HighLogic.LoadedSceneIsEditor)              {                  EditorLogic editor = EditorLogic.fetch;                  if (editor)                  {                      if (editorButtonCooldown > 0)                          editorButtonCooldown--;                      if (Input.GetKeyDown(toggleKey) && editorButtonCooldown <= 0)                      {                          showInfo = !showInfo;                          shownByUser = true;                          editorButtonCooldown = 20;                      }                      shownByUser = true;                      //if (editor.editorScreen == EditorLogic.EditorScreen.Actions)                      //{                      //    if (EditorActionGroups.Instance.GetSelectedParts().Find(p => p.Modules.Contains("FSinfoPopup")))                      //    {                      //        showInfo = true;                      //    }                      //}                  }              }
Magic Number,Firespitter,MeshCreator,C:\repos\snjo_Firespitter\Firespitter\tools\MeshCreator.cs,createDisc,The following statement contains a magic number: float angleIncrement = Mathf.PI * 2 / sides;
Magic Number,Firespitter,MeshCreator,C:\repos\snjo_Firespitter\Firespitter\tools\MeshCreator.cs,createDisc,The following statement contains a magic number: int[] triangles = new int[sides * 3];
Magic Number,Firespitter,MeshCreator,C:\repos\snjo_Firespitter\Firespitter\tools\MeshCreator.cs,createDisc,The following statement contains a magic number: for (int i = 0; i < sides; ++i)              {                  if (i < sides - 1)                  {                      //Debug.Log("i == " + i + " / tri: 0' " + (i + 1) + "' " + (i + 2));                      triangles[3 * i + 0] = 0; //first corner is always the top                      triangles[3 * i + 1] = i + 1;                      triangles[3 * i + 2] = i + 2;                  }                  else                  {                      //Debug.Log("i == " + i + " / tri: 0' " + (i + 1) + "' " + 1);                      triangles[3 * i + 0] = 0; //first corner is always the top                      triangles[3 * i + 1] = i + 1;                      triangles[3 * i + 2] = 1;                  }              }
Magic Number,Firespitter,MeshCreator,C:\repos\snjo_Firespitter\Firespitter\tools\MeshCreator.cs,createDisc,The following statement contains a magic number: for (int i = 0; i < sides; ++i)              {                  if (i < sides - 1)                  {                      //Debug.Log("i == " + i + " / tri: 0' " + (i + 1) + "' " + (i + 2));                      triangles[3 * i + 0] = 0; //first corner is always the top                      triangles[3 * i + 1] = i + 1;                      triangles[3 * i + 2] = i + 2;                  }                  else                  {                      //Debug.Log("i == " + i + " / tri: 0' " + (i + 1) + "' " + 1);                      triangles[3 * i + 0] = 0; //first corner is always the top                      triangles[3 * i + 1] = i + 1;                      triangles[3 * i + 2] = 1;                  }              }
Magic Number,Firespitter,MeshCreator,C:\repos\snjo_Firespitter\Firespitter\tools\MeshCreator.cs,createDisc,The following statement contains a magic number: for (int i = 0; i < sides; ++i)              {                  if (i < sides - 1)                  {                      //Debug.Log("i == " + i + " / tri: 0' " + (i + 1) + "' " + (i + 2));                      triangles[3 * i + 0] = 0; //first corner is always the top                      triangles[3 * i + 1] = i + 1;                      triangles[3 * i + 2] = i + 2;                  }                  else                  {                      //Debug.Log("i == " + i + " / tri: 0' " + (i + 1) + "' " + 1);                      triangles[3 * i + 0] = 0; //first corner is always the top                      triangles[3 * i + 1] = i + 1;                      triangles[3 * i + 2] = 1;                  }              }
Magic Number,Firespitter,MeshCreator,C:\repos\snjo_Firespitter\Firespitter\tools\MeshCreator.cs,createDisc,The following statement contains a magic number: for (int i = 0; i < sides; ++i)              {                  if (i < sides - 1)                  {                      //Debug.Log("i == " + i + " / tri: 0' " + (i + 1) + "' " + (i + 2));                      triangles[3 * i + 0] = 0; //first corner is always the top                      triangles[3 * i + 1] = i + 1;                      triangles[3 * i + 2] = i + 2;                  }                  else                  {                      //Debug.Log("i == " + i + " / tri: 0' " + (i + 1) + "' " + 1);                      triangles[3 * i + 0] = 0; //first corner is always the top                      triangles[3 * i + 1] = i + 1;                      triangles[3 * i + 2] = 1;                  }              }
Magic Number,Firespitter,MeshCreator,C:\repos\snjo_Firespitter\Firespitter\tools\MeshCreator.cs,createDisc,The following statement contains a magic number: for (int i = 0; i < sides; ++i)              {                  if (i < sides - 1)                  {                      //Debug.Log("i == " + i + " / tri: 0' " + (i + 1) + "' " + (i + 2));                      triangles[3 * i + 0] = 0; //first corner is always the top                      triangles[3 * i + 1] = i + 1;                      triangles[3 * i + 2] = i + 2;                  }                  else                  {                      //Debug.Log("i == " + i + " / tri: 0' " + (i + 1) + "' " + 1);                      triangles[3 * i + 0] = 0; //first corner is always the top                      triangles[3 * i + 1] = i + 1;                      triangles[3 * i + 2] = 1;                  }              }
Magic Number,Firespitter,MeshCreator,C:\repos\snjo_Firespitter\Firespitter\tools\MeshCreator.cs,createDisc,The following statement contains a magic number: for (int i = 0; i < sides; ++i)              {                  if (i < sides - 1)                  {                      //Debug.Log("i == " + i + " / tri: 0' " + (i + 1) + "' " + (i + 2));                      triangles[3 * i + 0] = 0; //first corner is always the top                      triangles[3 * i + 1] = i + 1;                      triangles[3 * i + 2] = i + 2;                  }                  else                  {                      //Debug.Log("i == " + i + " / tri: 0' " + (i + 1) + "' " + 1);                      triangles[3 * i + 0] = 0; //first corner is always the top                      triangles[3 * i + 1] = i + 1;                      triangles[3 * i + 2] = 1;                  }              }
Magic Number,Firespitter,MeshCreator,C:\repos\snjo_Firespitter\Firespitter\tools\MeshCreator.cs,createDisc,The following statement contains a magic number: for (int i = 0; i < sides; ++i)              {                  if (i < sides - 1)                  {                      //Debug.Log("i == " + i + " / tri: 0' " + (i + 1) + "' " + (i + 2));                      triangles[3 * i + 0] = 0; //first corner is always the top                      triangles[3 * i + 1] = i + 1;                      triangles[3 * i + 2] = i + 2;                  }                  else                  {                      //Debug.Log("i == " + i + " / tri: 0' " + (i + 1) + "' " + 1);                      triangles[3 * i + 0] = 0; //first corner is always the top                      triangles[3 * i + 1] = i + 1;                      triangles[3 * i + 2] = 1;                  }              }
Magic Number,Firespitter,MeshCreator,C:\repos\snjo_Firespitter\Firespitter\tools\MeshCreator.cs,createDisc,The following statement contains a magic number: for (int i = 0; i < sides; ++i)              {                  if (i < sides - 1)                  {                      //Debug.Log("i == " + i + " / tri: 0' " + (i + 1) + "' " + (i + 2));                      triangles[3 * i + 0] = 0; //first corner is always the top                      triangles[3 * i + 1] = i + 1;                      triangles[3 * i + 2] = i + 2;                  }                  else                  {                      //Debug.Log("i == " + i + " / tri: 0' " + (i + 1) + "' " + 1);                      triangles[3 * i + 0] = 0; //first corner is always the top                      triangles[3 * i + 1] = i + 1;                      triangles[3 * i + 2] = 1;                  }              }
Magic Number,Firespitter,MeshCreator,C:\repos\snjo_Firespitter\Firespitter\tools\MeshCreator.cs,createDisc,The following statement contains a magic number: for (int i = 0; i < sides; ++i)              {                  if (i < sides - 1)                  {                      //Debug.Log("i == " + i + " / tri: 0' " + (i + 1) + "' " + (i + 2));                      triangles[3 * i + 0] = 0; //first corner is always the top                      triangles[3 * i + 1] = i + 1;                      triangles[3 * i + 2] = i + 2;                  }                  else                  {                      //Debug.Log("i == " + i + " / tri: 0' " + (i + 1) + "' " + 1);                      triangles[3 * i + 0] = 0; //first corner is always the top                      triangles[3 * i + 1] = i + 1;                      triangles[3 * i + 2] = 1;                  }              }
Magic Number,Firespitter,FSparticleFX,C:\repos\snjo_Firespitter\Firespitter\engine\FSparticleFX.cs,setupFXValues,The following statement contains a magic number: colorAnimation[2] = AnimatorColor2;
Magic Number,Firespitter,FSparticleFX,C:\repos\snjo_Firespitter\Firespitter\engine\FSparticleFX.cs,setupFXValues,The following statement contains a magic number: colorAnimation[3] = AnimatorColor3;
Magic Number,Firespitter,FSparticleFX,C:\repos\snjo_Firespitter\Firespitter\engine\FSparticleFX.cs,setupFXValues,The following statement contains a magic number: colorAnimation[4] = AnimatorColor4;
Magic Number,Firespitter,Tools,C:\repos\snjo_Firespitter\Firespitter\tools\FStools.cs,stringToFloatCurve,The following statement contains a magic number: for (int i = 0; i < keyString.Length; i++)              {                  string[] valueString = keyString[i].Split(''');                  if (valueString.Length >= 2)                  {                                         Vector4 key = Vector4.zero;                      float.TryParse(valueString[0]' out key.x);                      float.TryParse(valueString[1]' out key.y);                      if (valueString.Length == 4)                      {                          float.TryParse(valueString[2]' out key.z);                          float.TryParse(valueString[3]' out key.w);                      }                        resultCurve.Add(key.x' key.y' key.z' key.w);                                      }              }
Magic Number,Firespitter,Tools,C:\repos\snjo_Firespitter\Firespitter\tools\FStools.cs,stringToFloatCurve,The following statement contains a magic number: for (int i = 0; i < keyString.Length; i++)              {                  string[] valueString = keyString[i].Split(''');                  if (valueString.Length >= 2)                  {                                         Vector4 key = Vector4.zero;                      float.TryParse(valueString[0]' out key.x);                      float.TryParse(valueString[1]' out key.y);                      if (valueString.Length == 4)                      {                          float.TryParse(valueString[2]' out key.z);                          float.TryParse(valueString[3]' out key.w);                      }                        resultCurve.Add(key.x' key.y' key.z' key.w);                                      }              }
Magic Number,Firespitter,Tools,C:\repos\snjo_Firespitter\Firespitter\tools\FStools.cs,stringToFloatCurve,The following statement contains a magic number: for (int i = 0; i < keyString.Length; i++)              {                  string[] valueString = keyString[i].Split(''');                  if (valueString.Length >= 2)                  {                                         Vector4 key = Vector4.zero;                      float.TryParse(valueString[0]' out key.x);                      float.TryParse(valueString[1]' out key.y);                      if (valueString.Length == 4)                      {                          float.TryParse(valueString[2]' out key.z);                          float.TryParse(valueString[3]' out key.w);                      }                        resultCurve.Add(key.x' key.y' key.z' key.w);                                      }              }
Magic Number,Firespitter,Tools,C:\repos\snjo_Firespitter\Firespitter\tools\FStools.cs,stringToFloatCurve,The following statement contains a magic number: for (int i = 0; i < keyString.Length; i++)              {                  string[] valueString = keyString[i].Split(''');                  if (valueString.Length >= 2)                  {                                         Vector4 key = Vector4.zero;                      float.TryParse(valueString[0]' out key.x);                      float.TryParse(valueString[1]' out key.y);                      if (valueString.Length == 4)                      {                          float.TryParse(valueString[2]' out key.z);                          float.TryParse(valueString[3]' out key.w);                      }                        resultCurve.Add(key.x' key.y' key.z' key.w);                                      }              }
Magic Number,Firespitter.wheel,FSwheelAlignment,C:\repos\snjo_Firespitter\Firespitter\wheel\FSwheelAlignment.cs,OnStart,The following statement contains a magic number: guideLine.SetVertexCount(14);
Magic Number,Firespitter.wheel,FSwheelAlignment,C:\repos\snjo_Firespitter\Firespitter\wheel\FSwheelAlignment.cs,OnStart,The following statement contains a magic number: wheelLine.SetVertexCount(4);
Magic Number,Firespitter.wheel,FSwheelAlignment,C:\repos\snjo_Firespitter\Firespitter\wheel\FSwheelAlignment.cs,updateLinePositions,The following statement contains a magic number: if (wheel != null)              {                  centerPoint = wheel.transform.position;                  guidePointForward = wheel.transform.position + Vector3.forward.normalized * lineLength;                  guidePointBack = wheel.transform.position - Vector3.forward.normalized * lineLength;                  guidePointUp = wheel.transform.position + Vector3.up.normalized * lineLength;                    wheelPointForward = wheel.transform.position + wheel.transform.forward.normalized * lineLength;                  wheelPointBack = wheel.transform.position - wheel.transform.forward.normalized * lineLength;                  wheelPointUp = wheel.transform.position + wheel.transform.up.normalized * lineLength;                    if (Vector3.Distance(wheelPointForward' guidePointForward) < Vector3.Distance(wheelPointForward' guidePointBack))                  {                      anglePointForwardHorizontal = new Vector3(wheelPointForward.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointForward.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointBack.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointBack.y' guidePointBack.z);                    }                  else                  {                      anglePointForwardHorizontal = new Vector3(wheelPointBack.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointBack.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointForward.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointForward.y' guidePointBack.z);                  }                  anglePointUpX = new Vector3(wheelPointUp.x' guidePointUp.y' guidePointUp.z);                  anglePointUpZ = new Vector3(guidePointUp.x' guidePointUp.y' wheelPointUp.z);                    //Debug.Log("guideLine " + part.GetInstanceID());                    guideLine.SetPosition(0' anglePointUpX);                  guideLine.SetPosition(1' guidePointUp);                  guideLine.SetPosition(2' anglePointUpZ);                  guideLine.SetPosition(3' guidePointUp);                  guideLine.SetPosition(4' centerPoint);                  guideLine.SetPosition(5' guidePointForward);                  guideLine.SetPosition(6' anglePointForwardHorizontal);                  guideLine.SetPosition(7' guidePointForward);                  guideLine.SetPosition(8' anglePointForwardVertical);                  guideLine.SetPosition(9' guidePointForward);                  guideLine.SetPosition(10' guidePointBack);                  guideLine.SetPosition(11' anglePointBackHorizontal);                  guideLine.SetPosition(12' guidePointBack);                  guideLine.SetPosition(13' anglePointBackVertical);                    //Debug.Log("wheelLine " + part.GetInstanceID());                    wheelLine.SetPosition(0' wheelPointUp);                  wheelLine.SetPosition(1' centerPoint);                  wheelLine.SetPosition(2' wheelPointForward);                  wheelLine.SetPosition(3' wheelPointBack);                    Vector3 forwardLineHorizontal = new Vector3(anglePointForwardHorizontal.x' centerPoint.y' anglePointForwardHorizontal.z) - centerPoint;                  forwardAngleHorizontal = Vector3.Angle(Vector3.forward' forwardLineHorizontal);                  Vector3 forwardLineVertical = new Vector3(centerPoint.x' anglePointForwardVertical.y' anglePointForwardVertical.z) - centerPoint;                  forwardAngleVertical = Vector3.Angle(Vector3.forward' forwardLineVertical);                    Vector3 upLineX = new Vector3(anglePointUpX.x' anglePointUpX.y' centerPoint.z) - centerPoint;                  upAngleX = Vector3.Angle(Vector3.up' upLineX);                  Vector3 upLineZ = new Vector3(centerPoint.x' anglePointUpZ.y' anglePointUpZ.z) - centerPoint;                  upAngleZ = Vector3.Angle(Vector3.up' upLineZ);                }
Magic Number,Firespitter.wheel,FSwheelAlignment,C:\repos\snjo_Firespitter\Firespitter\wheel\FSwheelAlignment.cs,updateLinePositions,The following statement contains a magic number: if (wheel != null)              {                  centerPoint = wheel.transform.position;                  guidePointForward = wheel.transform.position + Vector3.forward.normalized * lineLength;                  guidePointBack = wheel.transform.position - Vector3.forward.normalized * lineLength;                  guidePointUp = wheel.transform.position + Vector3.up.normalized * lineLength;                    wheelPointForward = wheel.transform.position + wheel.transform.forward.normalized * lineLength;                  wheelPointBack = wheel.transform.position - wheel.transform.forward.normalized * lineLength;                  wheelPointUp = wheel.transform.position + wheel.transform.up.normalized * lineLength;                    if (Vector3.Distance(wheelPointForward' guidePointForward) < Vector3.Distance(wheelPointForward' guidePointBack))                  {                      anglePointForwardHorizontal = new Vector3(wheelPointForward.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointForward.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointBack.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointBack.y' guidePointBack.z);                    }                  else                  {                      anglePointForwardHorizontal = new Vector3(wheelPointBack.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointBack.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointForward.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointForward.y' guidePointBack.z);                  }                  anglePointUpX = new Vector3(wheelPointUp.x' guidePointUp.y' guidePointUp.z);                  anglePointUpZ = new Vector3(guidePointUp.x' guidePointUp.y' wheelPointUp.z);                    //Debug.Log("guideLine " + part.GetInstanceID());                    guideLine.SetPosition(0' anglePointUpX);                  guideLine.SetPosition(1' guidePointUp);                  guideLine.SetPosition(2' anglePointUpZ);                  guideLine.SetPosition(3' guidePointUp);                  guideLine.SetPosition(4' centerPoint);                  guideLine.SetPosition(5' guidePointForward);                  guideLine.SetPosition(6' anglePointForwardHorizontal);                  guideLine.SetPosition(7' guidePointForward);                  guideLine.SetPosition(8' anglePointForwardVertical);                  guideLine.SetPosition(9' guidePointForward);                  guideLine.SetPosition(10' guidePointBack);                  guideLine.SetPosition(11' anglePointBackHorizontal);                  guideLine.SetPosition(12' guidePointBack);                  guideLine.SetPosition(13' anglePointBackVertical);                    //Debug.Log("wheelLine " + part.GetInstanceID());                    wheelLine.SetPosition(0' wheelPointUp);                  wheelLine.SetPosition(1' centerPoint);                  wheelLine.SetPosition(2' wheelPointForward);                  wheelLine.SetPosition(3' wheelPointBack);                    Vector3 forwardLineHorizontal = new Vector3(anglePointForwardHorizontal.x' centerPoint.y' anglePointForwardHorizontal.z) - centerPoint;                  forwardAngleHorizontal = Vector3.Angle(Vector3.forward' forwardLineHorizontal);                  Vector3 forwardLineVertical = new Vector3(centerPoint.x' anglePointForwardVertical.y' anglePointForwardVertical.z) - centerPoint;                  forwardAngleVertical = Vector3.Angle(Vector3.forward' forwardLineVertical);                    Vector3 upLineX = new Vector3(anglePointUpX.x' anglePointUpX.y' centerPoint.z) - centerPoint;                  upAngleX = Vector3.Angle(Vector3.up' upLineX);                  Vector3 upLineZ = new Vector3(centerPoint.x' anglePointUpZ.y' anglePointUpZ.z) - centerPoint;                  upAngleZ = Vector3.Angle(Vector3.up' upLineZ);                }
Magic Number,Firespitter.wheel,FSwheelAlignment,C:\repos\snjo_Firespitter\Firespitter\wheel\FSwheelAlignment.cs,updateLinePositions,The following statement contains a magic number: if (wheel != null)              {                  centerPoint = wheel.transform.position;                  guidePointForward = wheel.transform.position + Vector3.forward.normalized * lineLength;                  guidePointBack = wheel.transform.position - Vector3.forward.normalized * lineLength;                  guidePointUp = wheel.transform.position + Vector3.up.normalized * lineLength;                    wheelPointForward = wheel.transform.position + wheel.transform.forward.normalized * lineLength;                  wheelPointBack = wheel.transform.position - wheel.transform.forward.normalized * lineLength;                  wheelPointUp = wheel.transform.position + wheel.transform.up.normalized * lineLength;                    if (Vector3.Distance(wheelPointForward' guidePointForward) < Vector3.Distance(wheelPointForward' guidePointBack))                  {                      anglePointForwardHorizontal = new Vector3(wheelPointForward.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointForward.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointBack.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointBack.y' guidePointBack.z);                    }                  else                  {                      anglePointForwardHorizontal = new Vector3(wheelPointBack.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointBack.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointForward.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointForward.y' guidePointBack.z);                  }                  anglePointUpX = new Vector3(wheelPointUp.x' guidePointUp.y' guidePointUp.z);                  anglePointUpZ = new Vector3(guidePointUp.x' guidePointUp.y' wheelPointUp.z);                    //Debug.Log("guideLine " + part.GetInstanceID());                    guideLine.SetPosition(0' anglePointUpX);                  guideLine.SetPosition(1' guidePointUp);                  guideLine.SetPosition(2' anglePointUpZ);                  guideLine.SetPosition(3' guidePointUp);                  guideLine.SetPosition(4' centerPoint);                  guideLine.SetPosition(5' guidePointForward);                  guideLine.SetPosition(6' anglePointForwardHorizontal);                  guideLine.SetPosition(7' guidePointForward);                  guideLine.SetPosition(8' anglePointForwardVertical);                  guideLine.SetPosition(9' guidePointForward);                  guideLine.SetPosition(10' guidePointBack);                  guideLine.SetPosition(11' anglePointBackHorizontal);                  guideLine.SetPosition(12' guidePointBack);                  guideLine.SetPosition(13' anglePointBackVertical);                    //Debug.Log("wheelLine " + part.GetInstanceID());                    wheelLine.SetPosition(0' wheelPointUp);                  wheelLine.SetPosition(1' centerPoint);                  wheelLine.SetPosition(2' wheelPointForward);                  wheelLine.SetPosition(3' wheelPointBack);                    Vector3 forwardLineHorizontal = new Vector3(anglePointForwardHorizontal.x' centerPoint.y' anglePointForwardHorizontal.z) - centerPoint;                  forwardAngleHorizontal = Vector3.Angle(Vector3.forward' forwardLineHorizontal);                  Vector3 forwardLineVertical = new Vector3(centerPoint.x' anglePointForwardVertical.y' anglePointForwardVertical.z) - centerPoint;                  forwardAngleVertical = Vector3.Angle(Vector3.forward' forwardLineVertical);                    Vector3 upLineX = new Vector3(anglePointUpX.x' anglePointUpX.y' centerPoint.z) - centerPoint;                  upAngleX = Vector3.Angle(Vector3.up' upLineX);                  Vector3 upLineZ = new Vector3(centerPoint.x' anglePointUpZ.y' anglePointUpZ.z) - centerPoint;                  upAngleZ = Vector3.Angle(Vector3.up' upLineZ);                }
Magic Number,Firespitter.wheel,FSwheelAlignment,C:\repos\snjo_Firespitter\Firespitter\wheel\FSwheelAlignment.cs,updateLinePositions,The following statement contains a magic number: if (wheel != null)              {                  centerPoint = wheel.transform.position;                  guidePointForward = wheel.transform.position + Vector3.forward.normalized * lineLength;                  guidePointBack = wheel.transform.position - Vector3.forward.normalized * lineLength;                  guidePointUp = wheel.transform.position + Vector3.up.normalized * lineLength;                    wheelPointForward = wheel.transform.position + wheel.transform.forward.normalized * lineLength;                  wheelPointBack = wheel.transform.position - wheel.transform.forward.normalized * lineLength;                  wheelPointUp = wheel.transform.position + wheel.transform.up.normalized * lineLength;                    if (Vector3.Distance(wheelPointForward' guidePointForward) < Vector3.Distance(wheelPointForward' guidePointBack))                  {                      anglePointForwardHorizontal = new Vector3(wheelPointForward.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointForward.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointBack.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointBack.y' guidePointBack.z);                    }                  else                  {                      anglePointForwardHorizontal = new Vector3(wheelPointBack.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointBack.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointForward.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointForward.y' guidePointBack.z);                  }                  anglePointUpX = new Vector3(wheelPointUp.x' guidePointUp.y' guidePointUp.z);                  anglePointUpZ = new Vector3(guidePointUp.x' guidePointUp.y' wheelPointUp.z);                    //Debug.Log("guideLine " + part.GetInstanceID());                    guideLine.SetPosition(0' anglePointUpX);                  guideLine.SetPosition(1' guidePointUp);                  guideLine.SetPosition(2' anglePointUpZ);                  guideLine.SetPosition(3' guidePointUp);                  guideLine.SetPosition(4' centerPoint);                  guideLine.SetPosition(5' guidePointForward);                  guideLine.SetPosition(6' anglePointForwardHorizontal);                  guideLine.SetPosition(7' guidePointForward);                  guideLine.SetPosition(8' anglePointForwardVertical);                  guideLine.SetPosition(9' guidePointForward);                  guideLine.SetPosition(10' guidePointBack);                  guideLine.SetPosition(11' anglePointBackHorizontal);                  guideLine.SetPosition(12' guidePointBack);                  guideLine.SetPosition(13' anglePointBackVertical);                    //Debug.Log("wheelLine " + part.GetInstanceID());                    wheelLine.SetPosition(0' wheelPointUp);                  wheelLine.SetPosition(1' centerPoint);                  wheelLine.SetPosition(2' wheelPointForward);                  wheelLine.SetPosition(3' wheelPointBack);                    Vector3 forwardLineHorizontal = new Vector3(anglePointForwardHorizontal.x' centerPoint.y' anglePointForwardHorizontal.z) - centerPoint;                  forwardAngleHorizontal = Vector3.Angle(Vector3.forward' forwardLineHorizontal);                  Vector3 forwardLineVertical = new Vector3(centerPoint.x' anglePointForwardVertical.y' anglePointForwardVertical.z) - centerPoint;                  forwardAngleVertical = Vector3.Angle(Vector3.forward' forwardLineVertical);                    Vector3 upLineX = new Vector3(anglePointUpX.x' anglePointUpX.y' centerPoint.z) - centerPoint;                  upAngleX = Vector3.Angle(Vector3.up' upLineX);                  Vector3 upLineZ = new Vector3(centerPoint.x' anglePointUpZ.y' anglePointUpZ.z) - centerPoint;                  upAngleZ = Vector3.Angle(Vector3.up' upLineZ);                }
Magic Number,Firespitter.wheel,FSwheelAlignment,C:\repos\snjo_Firespitter\Firespitter\wheel\FSwheelAlignment.cs,updateLinePositions,The following statement contains a magic number: if (wheel != null)              {                  centerPoint = wheel.transform.position;                  guidePointForward = wheel.transform.position + Vector3.forward.normalized * lineLength;                  guidePointBack = wheel.transform.position - Vector3.forward.normalized * lineLength;                  guidePointUp = wheel.transform.position + Vector3.up.normalized * lineLength;                    wheelPointForward = wheel.transform.position + wheel.transform.forward.normalized * lineLength;                  wheelPointBack = wheel.transform.position - wheel.transform.forward.normalized * lineLength;                  wheelPointUp = wheel.transform.position + wheel.transform.up.normalized * lineLength;                    if (Vector3.Distance(wheelPointForward' guidePointForward) < Vector3.Distance(wheelPointForward' guidePointBack))                  {                      anglePointForwardHorizontal = new Vector3(wheelPointForward.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointForward.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointBack.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointBack.y' guidePointBack.z);                    }                  else                  {                      anglePointForwardHorizontal = new Vector3(wheelPointBack.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointBack.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointForward.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointForward.y' guidePointBack.z);                  }                  anglePointUpX = new Vector3(wheelPointUp.x' guidePointUp.y' guidePointUp.z);                  anglePointUpZ = new Vector3(guidePointUp.x' guidePointUp.y' wheelPointUp.z);                    //Debug.Log("guideLine " + part.GetInstanceID());                    guideLine.SetPosition(0' anglePointUpX);                  guideLine.SetPosition(1' guidePointUp);                  guideLine.SetPosition(2' anglePointUpZ);                  guideLine.SetPosition(3' guidePointUp);                  guideLine.SetPosition(4' centerPoint);                  guideLine.SetPosition(5' guidePointForward);                  guideLine.SetPosition(6' anglePointForwardHorizontal);                  guideLine.SetPosition(7' guidePointForward);                  guideLine.SetPosition(8' anglePointForwardVertical);                  guideLine.SetPosition(9' guidePointForward);                  guideLine.SetPosition(10' guidePointBack);                  guideLine.SetPosition(11' anglePointBackHorizontal);                  guideLine.SetPosition(12' guidePointBack);                  guideLine.SetPosition(13' anglePointBackVertical);                    //Debug.Log("wheelLine " + part.GetInstanceID());                    wheelLine.SetPosition(0' wheelPointUp);                  wheelLine.SetPosition(1' centerPoint);                  wheelLine.SetPosition(2' wheelPointForward);                  wheelLine.SetPosition(3' wheelPointBack);                    Vector3 forwardLineHorizontal = new Vector3(anglePointForwardHorizontal.x' centerPoint.y' anglePointForwardHorizontal.z) - centerPoint;                  forwardAngleHorizontal = Vector3.Angle(Vector3.forward' forwardLineHorizontal);                  Vector3 forwardLineVertical = new Vector3(centerPoint.x' anglePointForwardVertical.y' anglePointForwardVertical.z) - centerPoint;                  forwardAngleVertical = Vector3.Angle(Vector3.forward' forwardLineVertical);                    Vector3 upLineX = new Vector3(anglePointUpX.x' anglePointUpX.y' centerPoint.z) - centerPoint;                  upAngleX = Vector3.Angle(Vector3.up' upLineX);                  Vector3 upLineZ = new Vector3(centerPoint.x' anglePointUpZ.y' anglePointUpZ.z) - centerPoint;                  upAngleZ = Vector3.Angle(Vector3.up' upLineZ);                }
Magic Number,Firespitter.wheel,FSwheelAlignment,C:\repos\snjo_Firespitter\Firespitter\wheel\FSwheelAlignment.cs,updateLinePositions,The following statement contains a magic number: if (wheel != null)              {                  centerPoint = wheel.transform.position;                  guidePointForward = wheel.transform.position + Vector3.forward.normalized * lineLength;                  guidePointBack = wheel.transform.position - Vector3.forward.normalized * lineLength;                  guidePointUp = wheel.transform.position + Vector3.up.normalized * lineLength;                    wheelPointForward = wheel.transform.position + wheel.transform.forward.normalized * lineLength;                  wheelPointBack = wheel.transform.position - wheel.transform.forward.normalized * lineLength;                  wheelPointUp = wheel.transform.position + wheel.transform.up.normalized * lineLength;                    if (Vector3.Distance(wheelPointForward' guidePointForward) < Vector3.Distance(wheelPointForward' guidePointBack))                  {                      anglePointForwardHorizontal = new Vector3(wheelPointForward.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointForward.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointBack.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointBack.y' guidePointBack.z);                    }                  else                  {                      anglePointForwardHorizontal = new Vector3(wheelPointBack.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointBack.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointForward.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointForward.y' guidePointBack.z);                  }                  anglePointUpX = new Vector3(wheelPointUp.x' guidePointUp.y' guidePointUp.z);                  anglePointUpZ = new Vector3(guidePointUp.x' guidePointUp.y' wheelPointUp.z);                    //Debug.Log("guideLine " + part.GetInstanceID());                    guideLine.SetPosition(0' anglePointUpX);                  guideLine.SetPosition(1' guidePointUp);                  guideLine.SetPosition(2' anglePointUpZ);                  guideLine.SetPosition(3' guidePointUp);                  guideLine.SetPosition(4' centerPoint);                  guideLine.SetPosition(5' guidePointForward);                  guideLine.SetPosition(6' anglePointForwardHorizontal);                  guideLine.SetPosition(7' guidePointForward);                  guideLine.SetPosition(8' anglePointForwardVertical);                  guideLine.SetPosition(9' guidePointForward);                  guideLine.SetPosition(10' guidePointBack);                  guideLine.SetPosition(11' anglePointBackHorizontal);                  guideLine.SetPosition(12' guidePointBack);                  guideLine.SetPosition(13' anglePointBackVertical);                    //Debug.Log("wheelLine " + part.GetInstanceID());                    wheelLine.SetPosition(0' wheelPointUp);                  wheelLine.SetPosition(1' centerPoint);                  wheelLine.SetPosition(2' wheelPointForward);                  wheelLine.SetPosition(3' wheelPointBack);                    Vector3 forwardLineHorizontal = new Vector3(anglePointForwardHorizontal.x' centerPoint.y' anglePointForwardHorizontal.z) - centerPoint;                  forwardAngleHorizontal = Vector3.Angle(Vector3.forward' forwardLineHorizontal);                  Vector3 forwardLineVertical = new Vector3(centerPoint.x' anglePointForwardVertical.y' anglePointForwardVertical.z) - centerPoint;                  forwardAngleVertical = Vector3.Angle(Vector3.forward' forwardLineVertical);                    Vector3 upLineX = new Vector3(anglePointUpX.x' anglePointUpX.y' centerPoint.z) - centerPoint;                  upAngleX = Vector3.Angle(Vector3.up' upLineX);                  Vector3 upLineZ = new Vector3(centerPoint.x' anglePointUpZ.y' anglePointUpZ.z) - centerPoint;                  upAngleZ = Vector3.Angle(Vector3.up' upLineZ);                }
Magic Number,Firespitter.wheel,FSwheelAlignment,C:\repos\snjo_Firespitter\Firespitter\wheel\FSwheelAlignment.cs,updateLinePositions,The following statement contains a magic number: if (wheel != null)              {                  centerPoint = wheel.transform.position;                  guidePointForward = wheel.transform.position + Vector3.forward.normalized * lineLength;                  guidePointBack = wheel.transform.position - Vector3.forward.normalized * lineLength;                  guidePointUp = wheel.transform.position + Vector3.up.normalized * lineLength;                    wheelPointForward = wheel.transform.position + wheel.transform.forward.normalized * lineLength;                  wheelPointBack = wheel.transform.position - wheel.transform.forward.normalized * lineLength;                  wheelPointUp = wheel.transform.position + wheel.transform.up.normalized * lineLength;                    if (Vector3.Distance(wheelPointForward' guidePointForward) < Vector3.Distance(wheelPointForward' guidePointBack))                  {                      anglePointForwardHorizontal = new Vector3(wheelPointForward.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointForward.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointBack.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointBack.y' guidePointBack.z);                    }                  else                  {                      anglePointForwardHorizontal = new Vector3(wheelPointBack.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointBack.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointForward.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointForward.y' guidePointBack.z);                  }                  anglePointUpX = new Vector3(wheelPointUp.x' guidePointUp.y' guidePointUp.z);                  anglePointUpZ = new Vector3(guidePointUp.x' guidePointUp.y' wheelPointUp.z);                    //Debug.Log("guideLine " + part.GetInstanceID());                    guideLine.SetPosition(0' anglePointUpX);                  guideLine.SetPosition(1' guidePointUp);                  guideLine.SetPosition(2' anglePointUpZ);                  guideLine.SetPosition(3' guidePointUp);                  guideLine.SetPosition(4' centerPoint);                  guideLine.SetPosition(5' guidePointForward);                  guideLine.SetPosition(6' anglePointForwardHorizontal);                  guideLine.SetPosition(7' guidePointForward);                  guideLine.SetPosition(8' anglePointForwardVertical);                  guideLine.SetPosition(9' guidePointForward);                  guideLine.SetPosition(10' guidePointBack);                  guideLine.SetPosition(11' anglePointBackHorizontal);                  guideLine.SetPosition(12' guidePointBack);                  guideLine.SetPosition(13' anglePointBackVertical);                    //Debug.Log("wheelLine " + part.GetInstanceID());                    wheelLine.SetPosition(0' wheelPointUp);                  wheelLine.SetPosition(1' centerPoint);                  wheelLine.SetPosition(2' wheelPointForward);                  wheelLine.SetPosition(3' wheelPointBack);                    Vector3 forwardLineHorizontal = new Vector3(anglePointForwardHorizontal.x' centerPoint.y' anglePointForwardHorizontal.z) - centerPoint;                  forwardAngleHorizontal = Vector3.Angle(Vector3.forward' forwardLineHorizontal);                  Vector3 forwardLineVertical = new Vector3(centerPoint.x' anglePointForwardVertical.y' anglePointForwardVertical.z) - centerPoint;                  forwardAngleVertical = Vector3.Angle(Vector3.forward' forwardLineVertical);                    Vector3 upLineX = new Vector3(anglePointUpX.x' anglePointUpX.y' centerPoint.z) - centerPoint;                  upAngleX = Vector3.Angle(Vector3.up' upLineX);                  Vector3 upLineZ = new Vector3(centerPoint.x' anglePointUpZ.y' anglePointUpZ.z) - centerPoint;                  upAngleZ = Vector3.Angle(Vector3.up' upLineZ);                }
Magic Number,Firespitter.wheel,FSwheelAlignment,C:\repos\snjo_Firespitter\Firespitter\wheel\FSwheelAlignment.cs,updateLinePositions,The following statement contains a magic number: if (wheel != null)              {                  centerPoint = wheel.transform.position;                  guidePointForward = wheel.transform.position + Vector3.forward.normalized * lineLength;                  guidePointBack = wheel.transform.position - Vector3.forward.normalized * lineLength;                  guidePointUp = wheel.transform.position + Vector3.up.normalized * lineLength;                    wheelPointForward = wheel.transform.position + wheel.transform.forward.normalized * lineLength;                  wheelPointBack = wheel.transform.position - wheel.transform.forward.normalized * lineLength;                  wheelPointUp = wheel.transform.position + wheel.transform.up.normalized * lineLength;                    if (Vector3.Distance(wheelPointForward' guidePointForward) < Vector3.Distance(wheelPointForward' guidePointBack))                  {                      anglePointForwardHorizontal = new Vector3(wheelPointForward.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointForward.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointBack.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointBack.y' guidePointBack.z);                    }                  else                  {                      anglePointForwardHorizontal = new Vector3(wheelPointBack.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointBack.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointForward.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointForward.y' guidePointBack.z);                  }                  anglePointUpX = new Vector3(wheelPointUp.x' guidePointUp.y' guidePointUp.z);                  anglePointUpZ = new Vector3(guidePointUp.x' guidePointUp.y' wheelPointUp.z);                    //Debug.Log("guideLine " + part.GetInstanceID());                    guideLine.SetPosition(0' anglePointUpX);                  guideLine.SetPosition(1' guidePointUp);                  guideLine.SetPosition(2' anglePointUpZ);                  guideLine.SetPosition(3' guidePointUp);                  guideLine.SetPosition(4' centerPoint);                  guideLine.SetPosition(5' guidePointForward);                  guideLine.SetPosition(6' anglePointForwardHorizontal);                  guideLine.SetPosition(7' guidePointForward);                  guideLine.SetPosition(8' anglePointForwardVertical);                  guideLine.SetPosition(9' guidePointForward);                  guideLine.SetPosition(10' guidePointBack);                  guideLine.SetPosition(11' anglePointBackHorizontal);                  guideLine.SetPosition(12' guidePointBack);                  guideLine.SetPosition(13' anglePointBackVertical);                    //Debug.Log("wheelLine " + part.GetInstanceID());                    wheelLine.SetPosition(0' wheelPointUp);                  wheelLine.SetPosition(1' centerPoint);                  wheelLine.SetPosition(2' wheelPointForward);                  wheelLine.SetPosition(3' wheelPointBack);                    Vector3 forwardLineHorizontal = new Vector3(anglePointForwardHorizontal.x' centerPoint.y' anglePointForwardHorizontal.z) - centerPoint;                  forwardAngleHorizontal = Vector3.Angle(Vector3.forward' forwardLineHorizontal);                  Vector3 forwardLineVertical = new Vector3(centerPoint.x' anglePointForwardVertical.y' anglePointForwardVertical.z) - centerPoint;                  forwardAngleVertical = Vector3.Angle(Vector3.forward' forwardLineVertical);                    Vector3 upLineX = new Vector3(anglePointUpX.x' anglePointUpX.y' centerPoint.z) - centerPoint;                  upAngleX = Vector3.Angle(Vector3.up' upLineX);                  Vector3 upLineZ = new Vector3(centerPoint.x' anglePointUpZ.y' anglePointUpZ.z) - centerPoint;                  upAngleZ = Vector3.Angle(Vector3.up' upLineZ);                }
Magic Number,Firespitter.wheel,FSwheelAlignment,C:\repos\snjo_Firespitter\Firespitter\wheel\FSwheelAlignment.cs,updateLinePositions,The following statement contains a magic number: if (wheel != null)              {                  centerPoint = wheel.transform.position;                  guidePointForward = wheel.transform.position + Vector3.forward.normalized * lineLength;                  guidePointBack = wheel.transform.position - Vector3.forward.normalized * lineLength;                  guidePointUp = wheel.transform.position + Vector3.up.normalized * lineLength;                    wheelPointForward = wheel.transform.position + wheel.transform.forward.normalized * lineLength;                  wheelPointBack = wheel.transform.position - wheel.transform.forward.normalized * lineLength;                  wheelPointUp = wheel.transform.position + wheel.transform.up.normalized * lineLength;                    if (Vector3.Distance(wheelPointForward' guidePointForward) < Vector3.Distance(wheelPointForward' guidePointBack))                  {                      anglePointForwardHorizontal = new Vector3(wheelPointForward.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointForward.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointBack.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointBack.y' guidePointBack.z);                    }                  else                  {                      anglePointForwardHorizontal = new Vector3(wheelPointBack.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointBack.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointForward.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointForward.y' guidePointBack.z);                  }                  anglePointUpX = new Vector3(wheelPointUp.x' guidePointUp.y' guidePointUp.z);                  anglePointUpZ = new Vector3(guidePointUp.x' guidePointUp.y' wheelPointUp.z);                    //Debug.Log("guideLine " + part.GetInstanceID());                    guideLine.SetPosition(0' anglePointUpX);                  guideLine.SetPosition(1' guidePointUp);                  guideLine.SetPosition(2' anglePointUpZ);                  guideLine.SetPosition(3' guidePointUp);                  guideLine.SetPosition(4' centerPoint);                  guideLine.SetPosition(5' guidePointForward);                  guideLine.SetPosition(6' anglePointForwardHorizontal);                  guideLine.SetPosition(7' guidePointForward);                  guideLine.SetPosition(8' anglePointForwardVertical);                  guideLine.SetPosition(9' guidePointForward);                  guideLine.SetPosition(10' guidePointBack);                  guideLine.SetPosition(11' anglePointBackHorizontal);                  guideLine.SetPosition(12' guidePointBack);                  guideLine.SetPosition(13' anglePointBackVertical);                    //Debug.Log("wheelLine " + part.GetInstanceID());                    wheelLine.SetPosition(0' wheelPointUp);                  wheelLine.SetPosition(1' centerPoint);                  wheelLine.SetPosition(2' wheelPointForward);                  wheelLine.SetPosition(3' wheelPointBack);                    Vector3 forwardLineHorizontal = new Vector3(anglePointForwardHorizontal.x' centerPoint.y' anglePointForwardHorizontal.z) - centerPoint;                  forwardAngleHorizontal = Vector3.Angle(Vector3.forward' forwardLineHorizontal);                  Vector3 forwardLineVertical = new Vector3(centerPoint.x' anglePointForwardVertical.y' anglePointForwardVertical.z) - centerPoint;                  forwardAngleVertical = Vector3.Angle(Vector3.forward' forwardLineVertical);                    Vector3 upLineX = new Vector3(anglePointUpX.x' anglePointUpX.y' centerPoint.z) - centerPoint;                  upAngleX = Vector3.Angle(Vector3.up' upLineX);                  Vector3 upLineZ = new Vector3(centerPoint.x' anglePointUpZ.y' anglePointUpZ.z) - centerPoint;                  upAngleZ = Vector3.Angle(Vector3.up' upLineZ);                }
Magic Number,Firespitter.wheel,FSwheelAlignment,C:\repos\snjo_Firespitter\Firespitter\wheel\FSwheelAlignment.cs,updateLinePositions,The following statement contains a magic number: if (wheel != null)              {                  centerPoint = wheel.transform.position;                  guidePointForward = wheel.transform.position + Vector3.forward.normalized * lineLength;                  guidePointBack = wheel.transform.position - Vector3.forward.normalized * lineLength;                  guidePointUp = wheel.transform.position + Vector3.up.normalized * lineLength;                    wheelPointForward = wheel.transform.position + wheel.transform.forward.normalized * lineLength;                  wheelPointBack = wheel.transform.position - wheel.transform.forward.normalized * lineLength;                  wheelPointUp = wheel.transform.position + wheel.transform.up.normalized * lineLength;                    if (Vector3.Distance(wheelPointForward' guidePointForward) < Vector3.Distance(wheelPointForward' guidePointBack))                  {                      anglePointForwardHorizontal = new Vector3(wheelPointForward.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointForward.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointBack.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointBack.y' guidePointBack.z);                    }                  else                  {                      anglePointForwardHorizontal = new Vector3(wheelPointBack.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointBack.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointForward.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointForward.y' guidePointBack.z);                  }                  anglePointUpX = new Vector3(wheelPointUp.x' guidePointUp.y' guidePointUp.z);                  anglePointUpZ = new Vector3(guidePointUp.x' guidePointUp.y' wheelPointUp.z);                    //Debug.Log("guideLine " + part.GetInstanceID());                    guideLine.SetPosition(0' anglePointUpX);                  guideLine.SetPosition(1' guidePointUp);                  guideLine.SetPosition(2' anglePointUpZ);                  guideLine.SetPosition(3' guidePointUp);                  guideLine.SetPosition(4' centerPoint);                  guideLine.SetPosition(5' guidePointForward);                  guideLine.SetPosition(6' anglePointForwardHorizontal);                  guideLine.SetPosition(7' guidePointForward);                  guideLine.SetPosition(8' anglePointForwardVertical);                  guideLine.SetPosition(9' guidePointForward);                  guideLine.SetPosition(10' guidePointBack);                  guideLine.SetPosition(11' anglePointBackHorizontal);                  guideLine.SetPosition(12' guidePointBack);                  guideLine.SetPosition(13' anglePointBackVertical);                    //Debug.Log("wheelLine " + part.GetInstanceID());                    wheelLine.SetPosition(0' wheelPointUp);                  wheelLine.SetPosition(1' centerPoint);                  wheelLine.SetPosition(2' wheelPointForward);                  wheelLine.SetPosition(3' wheelPointBack);                    Vector3 forwardLineHorizontal = new Vector3(anglePointForwardHorizontal.x' centerPoint.y' anglePointForwardHorizontal.z) - centerPoint;                  forwardAngleHorizontal = Vector3.Angle(Vector3.forward' forwardLineHorizontal);                  Vector3 forwardLineVertical = new Vector3(centerPoint.x' anglePointForwardVertical.y' anglePointForwardVertical.z) - centerPoint;                  forwardAngleVertical = Vector3.Angle(Vector3.forward' forwardLineVertical);                    Vector3 upLineX = new Vector3(anglePointUpX.x' anglePointUpX.y' centerPoint.z) - centerPoint;                  upAngleX = Vector3.Angle(Vector3.up' upLineX);                  Vector3 upLineZ = new Vector3(centerPoint.x' anglePointUpZ.y' anglePointUpZ.z) - centerPoint;                  upAngleZ = Vector3.Angle(Vector3.up' upLineZ);                }
Magic Number,Firespitter.wheel,FSwheelAlignment,C:\repos\snjo_Firespitter\Firespitter\wheel\FSwheelAlignment.cs,updateLinePositions,The following statement contains a magic number: if (wheel != null)              {                  centerPoint = wheel.transform.position;                  guidePointForward = wheel.transform.position + Vector3.forward.normalized * lineLength;                  guidePointBack = wheel.transform.position - Vector3.forward.normalized * lineLength;                  guidePointUp = wheel.transform.position + Vector3.up.normalized * lineLength;                    wheelPointForward = wheel.transform.position + wheel.transform.forward.normalized * lineLength;                  wheelPointBack = wheel.transform.position - wheel.transform.forward.normalized * lineLength;                  wheelPointUp = wheel.transform.position + wheel.transform.up.normalized * lineLength;                    if (Vector3.Distance(wheelPointForward' guidePointForward) < Vector3.Distance(wheelPointForward' guidePointBack))                  {                      anglePointForwardHorizontal = new Vector3(wheelPointForward.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointForward.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointBack.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointBack.y' guidePointBack.z);                    }                  else                  {                      anglePointForwardHorizontal = new Vector3(wheelPointBack.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointBack.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointForward.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointForward.y' guidePointBack.z);                  }                  anglePointUpX = new Vector3(wheelPointUp.x' guidePointUp.y' guidePointUp.z);                  anglePointUpZ = new Vector3(guidePointUp.x' guidePointUp.y' wheelPointUp.z);                    //Debug.Log("guideLine " + part.GetInstanceID());                    guideLine.SetPosition(0' anglePointUpX);                  guideLine.SetPosition(1' guidePointUp);                  guideLine.SetPosition(2' anglePointUpZ);                  guideLine.SetPosition(3' guidePointUp);                  guideLine.SetPosition(4' centerPoint);                  guideLine.SetPosition(5' guidePointForward);                  guideLine.SetPosition(6' anglePointForwardHorizontal);                  guideLine.SetPosition(7' guidePointForward);                  guideLine.SetPosition(8' anglePointForwardVertical);                  guideLine.SetPosition(9' guidePointForward);                  guideLine.SetPosition(10' guidePointBack);                  guideLine.SetPosition(11' anglePointBackHorizontal);                  guideLine.SetPosition(12' guidePointBack);                  guideLine.SetPosition(13' anglePointBackVertical);                    //Debug.Log("wheelLine " + part.GetInstanceID());                    wheelLine.SetPosition(0' wheelPointUp);                  wheelLine.SetPosition(1' centerPoint);                  wheelLine.SetPosition(2' wheelPointForward);                  wheelLine.SetPosition(3' wheelPointBack);                    Vector3 forwardLineHorizontal = new Vector3(anglePointForwardHorizontal.x' centerPoint.y' anglePointForwardHorizontal.z) - centerPoint;                  forwardAngleHorizontal = Vector3.Angle(Vector3.forward' forwardLineHorizontal);                  Vector3 forwardLineVertical = new Vector3(centerPoint.x' anglePointForwardVertical.y' anglePointForwardVertical.z) - centerPoint;                  forwardAngleVertical = Vector3.Angle(Vector3.forward' forwardLineVertical);                    Vector3 upLineX = new Vector3(anglePointUpX.x' anglePointUpX.y' centerPoint.z) - centerPoint;                  upAngleX = Vector3.Angle(Vector3.up' upLineX);                  Vector3 upLineZ = new Vector3(centerPoint.x' anglePointUpZ.y' anglePointUpZ.z) - centerPoint;                  upAngleZ = Vector3.Angle(Vector3.up' upLineZ);                }
Magic Number,Firespitter.wheel,FSwheelAlignment,C:\repos\snjo_Firespitter\Firespitter\wheel\FSwheelAlignment.cs,updateLinePositions,The following statement contains a magic number: if (wheel != null)              {                  centerPoint = wheel.transform.position;                  guidePointForward = wheel.transform.position + Vector3.forward.normalized * lineLength;                  guidePointBack = wheel.transform.position - Vector3.forward.normalized * lineLength;                  guidePointUp = wheel.transform.position + Vector3.up.normalized * lineLength;                    wheelPointForward = wheel.transform.position + wheel.transform.forward.normalized * lineLength;                  wheelPointBack = wheel.transform.position - wheel.transform.forward.normalized * lineLength;                  wheelPointUp = wheel.transform.position + wheel.transform.up.normalized * lineLength;                    if (Vector3.Distance(wheelPointForward' guidePointForward) < Vector3.Distance(wheelPointForward' guidePointBack))                  {                      anglePointForwardHorizontal = new Vector3(wheelPointForward.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointForward.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointBack.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointBack.y' guidePointBack.z);                    }                  else                  {                      anglePointForwardHorizontal = new Vector3(wheelPointBack.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointBack.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointForward.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointForward.y' guidePointBack.z);                  }                  anglePointUpX = new Vector3(wheelPointUp.x' guidePointUp.y' guidePointUp.z);                  anglePointUpZ = new Vector3(guidePointUp.x' guidePointUp.y' wheelPointUp.z);                    //Debug.Log("guideLine " + part.GetInstanceID());                    guideLine.SetPosition(0' anglePointUpX);                  guideLine.SetPosition(1' guidePointUp);                  guideLine.SetPosition(2' anglePointUpZ);                  guideLine.SetPosition(3' guidePointUp);                  guideLine.SetPosition(4' centerPoint);                  guideLine.SetPosition(5' guidePointForward);                  guideLine.SetPosition(6' anglePointForwardHorizontal);                  guideLine.SetPosition(7' guidePointForward);                  guideLine.SetPosition(8' anglePointForwardVertical);                  guideLine.SetPosition(9' guidePointForward);                  guideLine.SetPosition(10' guidePointBack);                  guideLine.SetPosition(11' anglePointBackHorizontal);                  guideLine.SetPosition(12' guidePointBack);                  guideLine.SetPosition(13' anglePointBackVertical);                    //Debug.Log("wheelLine " + part.GetInstanceID());                    wheelLine.SetPosition(0' wheelPointUp);                  wheelLine.SetPosition(1' centerPoint);                  wheelLine.SetPosition(2' wheelPointForward);                  wheelLine.SetPosition(3' wheelPointBack);                    Vector3 forwardLineHorizontal = new Vector3(anglePointForwardHorizontal.x' centerPoint.y' anglePointForwardHorizontal.z) - centerPoint;                  forwardAngleHorizontal = Vector3.Angle(Vector3.forward' forwardLineHorizontal);                  Vector3 forwardLineVertical = new Vector3(centerPoint.x' anglePointForwardVertical.y' anglePointForwardVertical.z) - centerPoint;                  forwardAngleVertical = Vector3.Angle(Vector3.forward' forwardLineVertical);                    Vector3 upLineX = new Vector3(anglePointUpX.x' anglePointUpX.y' centerPoint.z) - centerPoint;                  upAngleX = Vector3.Angle(Vector3.up' upLineX);                  Vector3 upLineZ = new Vector3(centerPoint.x' anglePointUpZ.y' anglePointUpZ.z) - centerPoint;                  upAngleZ = Vector3.Angle(Vector3.up' upLineZ);                }
Magic Number,Firespitter.wheel,FSwheelAlignment,C:\repos\snjo_Firespitter\Firespitter\wheel\FSwheelAlignment.cs,updateLinePositions,The following statement contains a magic number: if (wheel != null)              {                  centerPoint = wheel.transform.position;                  guidePointForward = wheel.transform.position + Vector3.forward.normalized * lineLength;                  guidePointBack = wheel.transform.position - Vector3.forward.normalized * lineLength;                  guidePointUp = wheel.transform.position + Vector3.up.normalized * lineLength;                    wheelPointForward = wheel.transform.position + wheel.transform.forward.normalized * lineLength;                  wheelPointBack = wheel.transform.position - wheel.transform.forward.normalized * lineLength;                  wheelPointUp = wheel.transform.position + wheel.transform.up.normalized * lineLength;                    if (Vector3.Distance(wheelPointForward' guidePointForward) < Vector3.Distance(wheelPointForward' guidePointBack))                  {                      anglePointForwardHorizontal = new Vector3(wheelPointForward.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointForward.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointBack.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointBack.y' guidePointBack.z);                    }                  else                  {                      anglePointForwardHorizontal = new Vector3(wheelPointBack.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointBack.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointForward.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointForward.y' guidePointBack.z);                  }                  anglePointUpX = new Vector3(wheelPointUp.x' guidePointUp.y' guidePointUp.z);                  anglePointUpZ = new Vector3(guidePointUp.x' guidePointUp.y' wheelPointUp.z);                    //Debug.Log("guideLine " + part.GetInstanceID());                    guideLine.SetPosition(0' anglePointUpX);                  guideLine.SetPosition(1' guidePointUp);                  guideLine.SetPosition(2' anglePointUpZ);                  guideLine.SetPosition(3' guidePointUp);                  guideLine.SetPosition(4' centerPoint);                  guideLine.SetPosition(5' guidePointForward);                  guideLine.SetPosition(6' anglePointForwardHorizontal);                  guideLine.SetPosition(7' guidePointForward);                  guideLine.SetPosition(8' anglePointForwardVertical);                  guideLine.SetPosition(9' guidePointForward);                  guideLine.SetPosition(10' guidePointBack);                  guideLine.SetPosition(11' anglePointBackHorizontal);                  guideLine.SetPosition(12' guidePointBack);                  guideLine.SetPosition(13' anglePointBackVertical);                    //Debug.Log("wheelLine " + part.GetInstanceID());                    wheelLine.SetPosition(0' wheelPointUp);                  wheelLine.SetPosition(1' centerPoint);                  wheelLine.SetPosition(2' wheelPointForward);                  wheelLine.SetPosition(3' wheelPointBack);                    Vector3 forwardLineHorizontal = new Vector3(anglePointForwardHorizontal.x' centerPoint.y' anglePointForwardHorizontal.z) - centerPoint;                  forwardAngleHorizontal = Vector3.Angle(Vector3.forward' forwardLineHorizontal);                  Vector3 forwardLineVertical = new Vector3(centerPoint.x' anglePointForwardVertical.y' anglePointForwardVertical.z) - centerPoint;                  forwardAngleVertical = Vector3.Angle(Vector3.forward' forwardLineVertical);                    Vector3 upLineX = new Vector3(anglePointUpX.x' anglePointUpX.y' centerPoint.z) - centerPoint;                  upAngleX = Vector3.Angle(Vector3.up' upLineX);                  Vector3 upLineZ = new Vector3(centerPoint.x' anglePointUpZ.y' anglePointUpZ.z) - centerPoint;                  upAngleZ = Vector3.Angle(Vector3.up' upLineZ);                }
Magic Number,Firespitter.wheel,FSwheelAlignment,C:\repos\snjo_Firespitter\Firespitter\wheel\FSwheelAlignment.cs,updateLinePositions,The following statement contains a magic number: if (wheel != null)              {                  centerPoint = wheel.transform.position;                  guidePointForward = wheel.transform.position + Vector3.forward.normalized * lineLength;                  guidePointBack = wheel.transform.position - Vector3.forward.normalized * lineLength;                  guidePointUp = wheel.transform.position + Vector3.up.normalized * lineLength;                    wheelPointForward = wheel.transform.position + wheel.transform.forward.normalized * lineLength;                  wheelPointBack = wheel.transform.position - wheel.transform.forward.normalized * lineLength;                  wheelPointUp = wheel.transform.position + wheel.transform.up.normalized * lineLength;                    if (Vector3.Distance(wheelPointForward' guidePointForward) < Vector3.Distance(wheelPointForward' guidePointBack))                  {                      anglePointForwardHorizontal = new Vector3(wheelPointForward.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointForward.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointBack.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointBack.y' guidePointBack.z);                    }                  else                  {                      anglePointForwardHorizontal = new Vector3(wheelPointBack.x' guidePointBack.y' guidePointForward.z);                      anglePointForwardVertical = new Vector3(guidePointBack.x' wheelPointBack.y' guidePointForward.z);                      anglePointBackHorizontal = new Vector3(wheelPointForward.x' guidePointForward.y' guidePointBack.z);                      anglePointBackVertical = new Vector3(guidePointForward.x' wheelPointForward.y' guidePointBack.z);                  }                  anglePointUpX = new Vector3(wheelPointUp.x' guidePointUp.y' guidePointUp.z);                  anglePointUpZ = new Vector3(guidePointUp.x' guidePointUp.y' wheelPointUp.z);                    //Debug.Log("guideLine " + part.GetInstanceID());                    guideLine.SetPosition(0' anglePointUpX);                  guideLine.SetPosition(1' guidePointUp);                  guideLine.SetPosition(2' anglePointUpZ);                  guideLine.SetPosition(3' guidePointUp);                  guideLine.SetPosition(4' centerPoint);                  guideLine.SetPosition(5' guidePointForward);                  guideLine.SetPosition(6' anglePointForwardHorizontal);                  guideLine.SetPosition(7' guidePointForward);                  guideLine.SetPosition(8' anglePointForwardVertical);                  guideLine.SetPosition(9' guidePointForward);                  guideLine.SetPosition(10' guidePointBack);                  guideLine.SetPosition(11' anglePointBackHorizontal);                  guideLine.SetPosition(12' guidePointBack);                  guideLine.SetPosition(13' anglePointBackVertical);                    //Debug.Log("wheelLine " + part.GetInstanceID());                    wheelLine.SetPosition(0' wheelPointUp);                  wheelLine.SetPosition(1' centerPoint);                  wheelLine.SetPosition(2' wheelPointForward);                  wheelLine.SetPosition(3' wheelPointBack);                    Vector3 forwardLineHorizontal = new Vector3(anglePointForwardHorizontal.x' centerPoint.y' anglePointForwardHorizontal.z) - centerPoint;                  forwardAngleHorizontal = Vector3.Angle(Vector3.forward' forwardLineHorizontal);                  Vector3 forwardLineVertical = new Vector3(centerPoint.x' anglePointForwardVertical.y' anglePointForwardVertical.z) - centerPoint;                  forwardAngleVertical = Vector3.Angle(Vector3.forward' forwardLineVertical);                    Vector3 upLineX = new Vector3(anglePointUpX.x' anglePointUpX.y' centerPoint.z) - centerPoint;                  upAngleX = Vector3.Angle(Vector3.up' upLineX);                  Vector3 upLineZ = new Vector3(centerPoint.x' anglePointUpZ.y' anglePointUpZ.z) - centerPoint;                  upAngleZ = Vector3.Angle(Vector3.up' upLineZ);                }
Missing Default,Firespitter.cockpit,FSActionGroupSwitch,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSActionGroupSwitch.cs,buttonClick,The following switch statement is missing a default case: switch (groupName)                  {                      case "engine":                          foreach (Part part in vessel.Parts)                          {                              engine.FSengineWrapper engine = new engine.FSengineWrapper(part);                              engine.EngineIgnited = !engine.EngineIgnited;                          }                          break;                      case "hover":                          foreach (Part part in vessel.Parts)                          {                              engine.FScopterThrottle copterEngine = part.Modules.OfType<engine.FScopterThrottle>().FirstOrDefault();                              if (copterEngine != null)                              {                                  copterEngine.toggleHover();                                  if (postMessagesToScreen == 1)                                      ScreenMessages.PostScreenMessage(new ScreenMessage("hover height set to " + Math.Round(copterEngine.hoverHeight' 1)' 2f' ScreenMessageStyle.UPPER_CENTER));                                  Debug.Log("FS: hover height set to " + copterEngine.hoverHeight);                              }                                IEnumerable<engine.FSengineBladed> bladedEngines = part.Modules.OfType<engine.FSengineBladed>();                              using (var bladedEngineEnum = bladedEngines.GetEnumerator())                              {                                  while (bladedEngineEnum.MoveNext())                                  {                                      bladedEngineEnum.Current.toggleHover();                                  }                              }                          }                          break;                      case "Stage":                          //FlightGlobals.ActiveVessel.ResumeStaging();                          //StageManager.ActivateNextStage();                                             break;                      case "resetTrim":                          FlightInputHandler.state.yawTrim = 0f;                          break;                  }
Missing Default,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuMainMenu,The following switch statement is missing a default case: switch (menuSelection)                  {                      case (int)MainMenuItems.flightdata + 2:                          menuState = menuFlightData;                          break;                      case (int)MainMenuItems.settings + 2:                          menuState = menuSettings;                          break;                      case (int)MainMenuItems.abort + 2:                          pauseInitialized = false;                          menuState = menuAbort;                          break;                      case (int)MainMenuItems.fuel + 2:                          menuState = menuFuel;                          break;                      case (int)MainMenuItems.gear + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Gear);                          break;                      case (int)MainMenuItems.brakes + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Brakes);                          break;                      case (int)MainMenuItems.SAS + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.SAS);                          break;                      case (int)MainMenuItems.light + 2:                          FlightGlobals.ActiveVessel.ActionGroups.ToggleGroup(KSPActionGroup.Light);                          break;                      case (int)MainMenuItems.hover + 2:                          toggleHover();                          break;                      case (int)MainMenuItems.reboot + 2:                          menuState = menuSplashScreen;                          RAMcount = 0;                          break;                  }
Missing Default,Firespitter.cockpit,FSmonitorInterface,C:\repos\snjo_Firespitter\Firespitter\cockpit\FSmonitorInterface.cs,menuSettings,The following switch statement is missing a default case: switch (menuSelection)                  {                      case 2:                          if (unitType == "Metric") unitType = "Aviation";                          else unitType = "Metric";                          break;                      case 3:                          if (speedMode == "Surface") speedMode = "Orbit";                          else if (speedMode == "Orbit") speedMode = "Target";                          else if (speedMode == "Target") speedMode = "Surface";                          break;                      case 4:                          if (useInfoPopup)                          {                              getInfoPopupText();                              menuState = menuInfo;                          }                          break;                  }
Missing Default,Firespitter.info,FSdebugMessages,C:\repos\snjo_Firespitter\Firespitter\info\FSdebugMessages.cs,debugMessage,The following switch statement is missing a default case: switch (outputMode)                  {                      case OutputMode.both:                          debugMessage(input' true' postToScreenDuration);                          break;                      case OutputMode.log:                          debugMessage(input' true' 0f);                          break;                      case OutputMode.screen:                          debugMessage(input' false' postToScreenDuration);                          break;                  }
Missing Default,Firespitter.info,FSdebugMessages,C:\repos\snjo_Firespitter\Firespitter\info\FSdebugMessages.cs,debugMessage,The following switch statement is missing a default case: switch (outputMode)                  {                      case OutputMode.both:                          debugMessage(input' true' postToScreenDuration);                          break;                      case OutputMode.log:                          debugMessage(input' true' postToScreenDuration);                          break;                      case OutputMode.screen:                          debugMessage(input' false' postToScreenDuration);                          break;                  }
