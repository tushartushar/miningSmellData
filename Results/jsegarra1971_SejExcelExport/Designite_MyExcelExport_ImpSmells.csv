Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,SetStructure,Cyclomatic complexity of the method is 10
Complex Method,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ExtractFile,Cyclomatic complexity of the method is 8
Long Parameter List,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,AddStream,The method has 5 parameters. Parameters: _method' _filenameInZip' _source' _modTime' _comment
Long Statement,MyExcelExport,OoXmlStringsStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Initialize,The length of the statement  "            sw.Write("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\""+nl+"\" uniqueCount=\""+nl+"\">\n"); " is 189.
Long Statement,MyExcelExport,OoXmlStringsStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Initialize,The length of the statement  "            foreach (KeyValuePair<string' int> p in dStrings) v[p.Value] = p.Key;           // Get the dictionary sorted (it should already be sorted' but just in case) " is 156.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Save,The length of the statement  "            ZipStorer result = ZipStorer.Create(file_name' "");                                                                 // Create the output filename " is 145.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Save,The length of the statement  "            Stream data;                                                                                                        // This will be out stream " is 142.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Save,The length of the statement  "            foreach (gStream g in streams)                                                                                      // Loop all the streams in the template     " is 155.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Save,The length of the statement  "                string name = g.zfe.FilenameInZip;                                                                              // This is the stream name         " is 138.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Save,The length of the statement  "                if (name != "xl/sharedStrings.xml")                                                                             // If this is not the shared strings stream " is 155.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Save,The length of the statement  "                    if (!sources.TryGetValue(name' out data)) data = g.ReadAsMemory();                                          // Get data stream either from memory or from Sources         " is 161.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Save,The length of the statement  "                    result.AddStream(ZipStorer.Compression.Deflate' name' data' DateTime.Now' "");                              // Add to our ZIP file " is 130.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Save,The length of the statement  "            if (!sources.TryGetValue("xl/sharedStrings.xml"' out data)) data = sst.ReadAsMemory();                              // Get data stream either from memory or from Sources         " is 169.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Save,The length of the statement  "            result.AddStream(ZipStorer.Compression.Deflate' "xl/sharedStrings.xml"' data' DateTime.Now' "");                    // Add to our ZIP file " is 138.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Save,The length of the statement  "            result.Close();                                                                                                     // Close the ZIP file " is 137.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,SetStructure,The length of the statement  "            foreach (gStream s in streams)                                                                                      // Loop all the streams and get " is 147.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,SetStructure,The length of the statement  "                if (s.zfe.FilenameInZip == "xl/_rels/workbook.xml.rels") rd = s.ReadAsXml();                                    //      Stream for Relations " is 140.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,SetStructure,The length of the statement  "                if (s.zfe.FilenameInZip == "xl/workbook.xml") sd = s.ReadAsXml();                                               //      Stream for structure " is 140.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,SetStructure,The length of the statement  "                if (s.zfe.FilenameInZip == "xl/sharedStrings.xml") st = s.ReadAsXml();                                          //      Stream for strings  " is 138.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,SetStructure,The length of the statement  "            if ((rd == null) || (sd == null) || (st == null)) throw new Exception("Bad WorkBook");                              // If ay of them could not be found' then raise an error " is 172.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,SetStructure,The length of the statement  "            XmlNode tn = st.FirstChild.NextSibling.FirstChild;                                                                  // This is the first node with strings " is 154.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,SetStructure,The length of the statement  "            while (tn != null) { words.Add(tn.FirstChild.InnerText); tn = tn.NextSibling; }                                     // Add all strings to dictionary         " is 148.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,SetStructure,The length of the statement  "            XmlNamespaceManager nsmgr0 = new System.Xml.XmlNamespaceManager(sd.NameTable);                                      // Add namespaces    " is 133.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,SetStructure,The length of the statement  "            foreach (XmlNode n in sd.SelectNodes("main:workbook/main:sheets/main:sheet"' nsmgr0))                               // For each sheet    " is 133.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,SetStructure,The length of the statement  "                string rId = n.Attributes["r:id"].Value;                                                                        // Get its RelationID " is 133.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,SetStructure,The length of the statement  "                XmlNode r = rd.SelectSingleNode("rels:Relationships/rels:Relationship[@Id='" + rId + "']"' nsmgr1);             // Use RelationID to find it in Relations  " is 153.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,SetStructure,The length of the statement  "                if (r != null)                                                                                                  // If found'  " is 124.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,SetStructure,The length of the statement  "                    gStream sr = streams.Find(element => element.zfe.FilenameInZip== "xl/" + r.Attributes["Target"].Value);     // Use Target to find the stream implementing the relation    " is 166.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,SetStructure,The length of the statement  "                    if (sr == null) throw new Exception("Could not find [" + r.Attributes["Target"].Value + "] in streams");    // Raise and error if fail " is 134.
Long Statement,MyExcelExport,OoXml,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,SetStructure,The length of the statement  "                    sr.Sheet = new gSheet(this' Int32.Parse(n.Attributes["sheetId"].Value)' n.Attributes["name"].Value' sr);    // Create the stream structure " is 138.
Long Statement,MyExcelExport,gStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,ReadAsXml,The length of the statement  "            Stream Content = new MemoryStream((int)zfe.FileSize);                                                               // Create a memory stream that will hold the data " is 165.
Long Statement,MyExcelExport,gStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,ReadAsXml,The length of the statement  "            if (!Document.zip.ExtractFile(zfe' Content)) throw new Exception("Error reading template stream");                  // Extract the data to this memory stream " is 157.
Long Statement,MyExcelExport,gStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,ReadAsXml,The length of the statement  "            Content.Position = 0;                                                                                               // Go to the beggining of the stream " is 152.
Long Statement,MyExcelExport,gStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,ReadAsXml,The length of the statement  "            XmlDocument node = new XmlDocument();                                                                               // Create a XML document " is 140.
Long Statement,MyExcelExport,gStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,ReadAsXml,The length of the statement  "            node.Load(Content);                                                                                                 // And parse the extracted data as XML " is 154.
Long Statement,MyExcelExport,gStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,ReadAsXml,The length of the statement  "            return node;                                                                                                        // Return the node " is 134.
Long Statement,MyExcelExport,gStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,ReadAsMemory,The length of the statement  "            MemoryStream Content = new MemoryStream((int)zfe.FileSize);                                                         // Unzip the stream from the template " is 153.
Long Statement,MyExcelExport,gStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,ReadAsMemory,The length of the statement  "            if (!Document.zip.ExtractFile(zfe' Content)) throw new Exception("Error reading template stream");                  // Fail if cannot unzip " is 139.
Long Statement,MyExcelExport,gSheet,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,MaxColumnIndex,The length of the statement  "            while (cell != null)                                                                                         // Loop all cells " is 126.
Long Statement,MyExcelExport,gSheet,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,MaxColumnIndex,The length of the statement  "                int tc = CellRefToColIndex(cell.Attributes["r"].Value);                                                 // Get column index for this cell " is 137.
Long Statement,MyExcelExport,gSheet,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,MaxColumnIndex,The length of the statement  "                if (tc > mc) mc = tc;                                                                                   // If this cell index is greater than MC " is 144.
Long Statement,MyExcelExport,gSheet,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,MaxColumnIndex,The length of the statement  "                cell = cell.NextSibling;                                                                                // Move to next cell " is 124.
Long Statement,MyExcelExport,gSheet,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,MaxColumnIndex,The length of the statement  "            return mc;                                                                                                  // Return MC " is 120.
Long Statement,MyExcelExport,gSheet,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Row,The length of the statement  "            XmlNode r;                                                                                                  // Get row from dictionary " is 134.
Long Statement,MyExcelExport,gSheet,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Row,The length of the statement  "            if (rows == null) LoadInMemory();                                                                           // If data has not been parsed' do it " is 145.
Long Statement,MyExcelExport,gSheet,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Row,The length of the statement  "            if (!rows.TryGetValue(rowindex + 1' out r)) return null;                                                    // If row is not in list of rows return null " is 152.
Long Statement,MyExcelExport,gSheet,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Row,The length of the statement  "            r = r.FirstChild;                                                                                           // This is the first cell " is 133.
Long Statement,MyExcelExport,gSheet,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Row,The length of the statement  "            string[] v = new string[MaxColumnIndex(r)];                                                                 // Create our output array " is 134.
Long Statement,MyExcelExport,gSheet,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Row,The length of the statement  "            for (int i = 0; i < v.Length; i++) v[i] = "";                                                               // Reset all values     " is 127.
Long Statement,MyExcelExport,gSheet,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Row,The length of the statement  "            while (r != null)                                                                                           // Loop all cells " is 125.
Long Statement,MyExcelExport,gSheet,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Row,The length of the statement  "                if (r1 != null)                                                                                         // If there is a V node " is 127.
Long Statement,MyExcelExport,gSheet,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Row,The length of the statement  "                    int t = CellRefToColIndex(r.Attributes["r"].Value) - 1;                                             // Get its column index             " is 123.
Long Statement,MyExcelExport,gSheet,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Row,The length of the statement  "                    if (r.Attributes["t"].Value == "s") v[t] = StrIndex(r1.InnerText); else v[t] = r1.InnerText;        // And set its value " is 120.
Long Statement,MyExcelExport,gSheet,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Row,The length of the statement  "                r = r.NextSibling;                                                                                      // Move to next value " is 125.
Long Statement,MyExcelExport,gSheet,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Row,The length of the statement  "            return v;                                                                                                   // Return the node " is 126.
Long Statement,MyExcelExport,OoXmlDataStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXmlDataStream.cs,InitializeColumns,The length of the statement  "            XmlNode c = r.FirstChild;                                                                                           // This is the first column " is 143.
Long Statement,MyExcelExport,OoXmlDataStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXmlDataStream.cs,InitializeColumns,The length of the statement  "            while (c != null) { if (c.Name == "c") columns.Add(new Column(c)); c = c.NextSibling; }                             // Loop all columns an initialize their format " is 162.
Long Statement,MyExcelExport,OoXmlDataStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXmlDataStream.cs,InitializeColumns,The length of the statement  "            while (r.NextSibling != null) r.ParentNode.RemoveChild(r.NextSibling);                                              // Remove all rows after r " is 142.
Long Statement,MyExcelExport,OoXmlDataStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXmlDataStream.cs,InitializeColumns,The length of the statement  "            r.ParentNode.RemoveChild(r);                                                                                        // Remove r " is 127.
Long Statement,MyExcelExport,OoXmlDataStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXmlDataStream.cs,InitializeHeaderAndFooter,The length of the statement  "            int i= s.IndexOf(r);                                                                                                // Use separator to split XML " is 145.
Long Statement,MyExcelExport,OoXmlDataStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXmlDataStream.cs,InitializeHeaderAndFooter,The length of the statement  "            while (s[i] != '<') i--;header=ASCIIEncoding.ASCII.GetBytes(s.Substring(0' i));                                     // First part will be header " is 144.
Long Statement,MyExcelExport,OoXmlDataStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXmlDataStream.cs,InitializeHeaderAndFooter,The length of the statement  "            while (s[i] != '>') i++;footer=ASCIIEncoding.ASCII.GetBytes(s.Substring(i+1));                                      // Second part will be footer             " is 145.
Long Statement,MyExcelExport,OoXmlDataStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXmlDataStream.cs,Read,The length of the statement  "            if (header != null) { d = header; header = null; return WriteBytes(d' buffer' 0); }                                 // If header has not been written. Write it and return " is 170.
Long Statement,MyExcelExport,OoXmlDataStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXmlDataStream.cs,Read,The length of the statement  "            if (!datadone)                                                                                                      // If all data has not been written     " is 151.
Long Statement,MyExcelExport,OoXmlDataStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXmlDataStream.cs,Read,The length of the statement  "                nbytes = 0; nbuffer = buffer;                                                                                   // Reset the number of bytes written " is 148.
Long Statement,MyExcelExport,OoXmlDataStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXmlDataStream.cs,Read,The length of the statement  "                onrow(srsheet);                                                                                                 // Ask the host to write the data " is 145.
Long Statement,MyExcelExport,OoXmlDataStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXmlDataStream.cs,Read,The length of the statement  "                if (nbytes>0) return nbytes;                                                                                    // If host writted something then return it " is 155.
Long Statement,MyExcelExport,OoXmlDataStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXmlDataStream.cs,Read,The length of the statement  "            datadone = true;                                                                                                    // If we ever get here' all data has already been written " is 173.
Long Statement,MyExcelExport,OoXmlDataStream,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXmlDataStream.cs,Read,The length of the statement  "            if (footer != null) { d = footer; footer = null; return WriteBytes(d' buffer' 0); }                                 // If footer has not been written. Write it and return " is 170.
Long Statement,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,Open,The length of the statement  "            Stream stream = (Stream)new FileStream(_filename' FileMode.Open' _access == FileAccess.Read ? FileAccess.Read : FileAccess.ReadWrite); " is 134.
Long Statement,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,AddStream,The length of the statement  "            if (this.Files.Count == 0) offset = 0; else { ZipFileEntry last = this.Files[this.Files.Count - 1]; offset = last.HeaderOffset + last.HeaderSize; } " is 147.
Long Statement,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ExtractFile,The length of the statement  "            else if (_zfe.Method == Compression.Deflate) inStream = new DeflateStream(this.ZipFileStream' CompressionMode.Decompress' true); " is 128.
Long Statement,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,GetStream,The length of the statement  "            else if (_zfe.Method == Compression.Deflate) inStream = new DeflateStream(this.ZipFileStream' CompressionMode.Decompress' true); else throw new Exception("Unsupoorted comprension"); " is 181.
Long Statement,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The length of the statement  "            this.ZipFileStream.Write(BitConverter.GetBytes((ushort)(_zfe.EncodeUTF8 ? 0x0800 : 0))' 0' 2); // filename and comment encoding  " is 127.
Long Statement,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The length of the statement  "            this.ZipFileStream.Write(new byte[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' 0' 12); // unused CRC' un/compressed size' updated later " is 132.
Long Statement,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The length of the statement  "            this.ZipFileStream.Write(BitConverter.GetBytes((ushort)(_zfe.EncodeUTF8 ? 0x0800 : 0))' 0' 2); // filename and comment encoding  " is 127.
Long Statement,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The length of the statement  "            this.ZipFileStream.Write(new byte[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' 0' 12); // unused CRC' un/compressed size' updated later " is 132.
Long Statement,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The length of the statement  "            this.ZipFileStream.Write(BitConverter.GetBytes((ushort)(_zfe.EncodeUTF8 ? 0x0800 : 0))' 0' 2); // filename and comment encoding  " is 127.
Long Statement,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,Store,The length of the statement  "            if (_zfe.Method == Compression.Store) outStream = this.ZipFileStream; else outStream = new DeflateStream(this.ZipFileStream' CompressionMode.Compress' true); " is 157.
Long Statement,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,Store,The length of the statement  "                    for (uint i = 0; i < bytesRead; i++) _zfe.Crc32 = ZipStorer.CrcTable[(_zfe.Crc32 ^ buffer[i]) & 0xFF] ^ (_zfe.Crc32 >> 8); " is 122.
Long Statement,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,Store,The length of the statement  "            if (_zfe.Method == Compression.Deflate && !this.ForceDeflating && _source.CanSeek && _zfe.CompressedSize > _zfe.FileSize) " is 121.
Complex Conditional,MyExcelExport,gSheet,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,WriteCell,The conditional expression  "value is sbyte  || value is byte     || value is short ||                      value is ushort || value is int      || value is uint  ||                       value is long   || value is ulong"  is complex.
Complex Conditional,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,Store,The conditional expression  "_zfe.Method == Compression.Deflate && !this.ForceDeflating && _source.CanSeek && _zfe.CompressedSize > _zfe.FileSize"  is complex.
Empty Catch Block,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadFileInfo,The method has an empty catch block.
Magic Number,MyExcelExport,gSheet,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,CellRefToColIndex,The following statement contains a magic number: while (c[i] >= 'A' && c[i] <= 'Z') { sum *= 26; sum += (c[i] - 'A' + 1); i++; }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ZipStorer,The following statement contains a magic number: CrcTable = new UInt32[256];
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ZipStorer,The following statement contains a magic number: for (int i = 0; i < CrcTable.Length; i++)              {                  UInt32 c = (UInt32)i;                  for (int j = 0; j < 8; j++)                  {                      if ((c & 1) != 0)                          c = 3988292384 ^ (c >> 1);                      else                          c >>= 1;                  }                  CrcTable[i] = c;              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ZipStorer,The following statement contains a magic number: for (int i = 0; i < CrcTable.Length; i++)              {                  UInt32 c = (UInt32)i;                  for (int j = 0; j < 8; j++)                  {                      if ((c & 1) != 0)                          c = 3988292384 ^ (c >> 1);                      else                          c >>= 1;                  }                  CrcTable[i] = c;              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ExtractFile,The following statement contains a magic number: byte[] signature = new byte[4];
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ExtractFile,The following statement contains a magic number: this.ZipFileStream.Read(signature' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ExtractFile,The following statement contains a magic number: byte[] buffer = new byte[2 * 16384];
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ExtractFile,The following statement contains a magic number: byte[] buffer = new byte[2 * 16384];
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,GetStream,The following statement contains a magic number: byte[] signature = new byte[4];
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,GetStream,The following statement contains a magic number: this.ZipFileStream.Read(signature' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,GetFileOffset,The following statement contains a magic number: byte[] buffer = new byte[2];
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,GetFileOffset,The following statement contains a magic number: this.ZipFileStream.Seek(_headerOffset + 26' SeekOrigin.Begin);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,GetFileOffset,The following statement contains a magic number: this.ZipFileStream.Read(buffer' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,GetFileOffset,The following statement contains a magic number: this.ZipFileStream.Read(buffer' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,GetFileOffset,The following statement contains a magic number: return (uint)(30 + filenameSize + extraSize + _headerOffset);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 3' 4' 20' 0 }' 0' 6);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 3' 4' 20' 0 }' 0' 6);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 3' 4' 20' 0 }' 0' 6);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 3' 4' 20' 0 }' 0' 6);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 3' 4' 20' 0 }' 0' 6);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 3' 4' 20' 0 }' 0' 6);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)(_zfe.EncodeUTF8 ? 0x0800 : 0))' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)_zfe.Method)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(DateTimeToDosTime(_zfe.ModifyTime))' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' 0' 12);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)encodedFilename.Length)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)0)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 3' 4' 20' 0 }' 0' 6);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 3' 4' 20' 0 }' 0' 6);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 3' 4' 20' 0 }' 0' 6);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 3' 4' 20' 0 }' 0' 6);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 3' 4' 20' 0 }' 0' 6);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 3' 4' 20' 0 }' 0' 6);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)(_zfe.EncodeUTF8 ? 0x0800 : 0))' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)_zfe.Method)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(DateTimeToDosTime(_zfe.ModifyTime))' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' 0' 12);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)encodedFilename.Length)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)0)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 1' 2' 23' 0xB' 20' 0 }' 0' 8);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 1' 2' 23' 0xB' 20' 0 }' 0' 8);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 1' 2' 23' 0xB' 20' 0 }' 0' 8);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 1' 2' 23' 0xB' 20' 0 }' 0' 8);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 1' 2' 23' 0xB' 20' 0 }' 0' 8);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 1' 2' 23' 0xB' 20' 0 }' 0' 8);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)(_zfe.EncodeUTF8 ? 0x0800 : 0))' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)_zfe.Method)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(DateTimeToDosTime(_zfe.ModifyTime))' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(_zfe.Crc32)' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(_zfe.CompressedSize)' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(_zfe.FileSize)' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)encodedFilename.Length)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)0)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)encodedComment.Length)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)0)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)0)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)0)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)0x8100)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(_zfe.HeaderOffset)' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 5' 6' 0' 0' 0' 0 }' 0' 8);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 5' 6' 0' 0' 0' 0 }' 0' 8);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 5' 6' 0' 0' 0' 0 }' 0' 8);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 5' 6' 0' 0' 0' 0 }' 0' 8);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 5' 6' 0' 0' 0' 0 }' 0' 8);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)Files.Count + ExistingFiles)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)Files.Count + ExistingFiles)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(_size)' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(_offset)' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)encodedComment.Length)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,Store,The following statement contains a magic number: byte[] buffer = new byte[16384];
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,Store,The following statement contains a magic number: do              {                  bytesRead = _source.Read(buffer' 0' buffer.Length);                  totalRead += (uint)bytesRead;                  if (bytesRead > 0)                  {                      outStream.Write(buffer' 0' bytesRead);                      for (uint i = 0; i < bytesRead; i++) _zfe.Crc32 = ZipStorer.CrcTable[(_zfe.Crc32 ^ buffer[i]) & 0xFF] ^ (_zfe.Crc32 >> 8);                      outStream.Flush();                  }              } while (bytesRead > 0);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)(                  (_dt.Second / 2) | (_dt.Minute << 5) | (_dt.Hour << 11) |                  (_dt.Day << 16) | (_dt.Month << 21) | ((_dt.Year - 1980) << 25));
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)(                  (_dt.Second / 2) | (_dt.Minute << 5) | (_dt.Hour << 11) |                  (_dt.Day << 16) | (_dt.Month << 21) | ((_dt.Year - 1980) << 25));
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)(                  (_dt.Second / 2) | (_dt.Minute << 5) | (_dt.Hour << 11) |                  (_dt.Day << 16) | (_dt.Month << 21) | ((_dt.Year - 1980) << 25));
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)(                  (_dt.Second / 2) | (_dt.Minute << 5) | (_dt.Hour << 11) |                  (_dt.Day << 16) | (_dt.Month << 21) | ((_dt.Year - 1980) << 25));
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)(                  (_dt.Second / 2) | (_dt.Minute << 5) | (_dt.Hour << 11) |                  (_dt.Day << 16) | (_dt.Month << 21) | ((_dt.Year - 1980) << 25));
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)(                  (_dt.Second / 2) | (_dt.Minute << 5) | (_dt.Hour << 11) |                  (_dt.Day << 16) | (_dt.Month << 21) | ((_dt.Year - 1980) << 25));
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)(                  (_dt.Second / 2) | (_dt.Minute << 5) | (_dt.Hour << 11) |                  (_dt.Day << 16) | (_dt.Month << 21) | ((_dt.Year - 1980) << 25));
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizes,The following statement contains a magic number: this.ZipFileStream.Position = _zfe.HeaderOffset + 8;
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizes,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)_zfe.Method)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizes,The following statement contains a magic number: this.ZipFileStream.Position = _zfe.HeaderOffset + 14;
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizes,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(_zfe.Crc32)' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizes,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(_zfe.CompressedSize)' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizes,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(_zfe.FileSize)' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizesNoRef,The following statement contains a magic number: this.ZipFileStream.Position = _zfe.HeaderOffset + 8;
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizesNoRef,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)_zfe.Method)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizesNoRef,The following statement contains a magic number: this.ZipFileStream.Position = _zfe.HeaderOffset + 14;
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizesNoRef,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(_zfe.Crc32)' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizesNoRef,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(_zfe.CompressedSize)' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizesNoRef,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(_zfe.FileSize)' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadFileInfo,The following statement contains a magic number: if (this.ZipFileStream.Length < 22)                  return false;
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadFileInfo,The following statement contains a magic number: try              {                  this.ZipFileStream.Seek(-17' SeekOrigin.End);                  BinaryReader br = new BinaryReader(this.ZipFileStream);                  do                  {                      this.ZipFileStream.Seek(-5' SeekOrigin.Current);                      UInt32 sig = br.ReadUInt32();                      if (sig == 0x06054b50)                      {                          this.ZipFileStream.Seek(6' SeekOrigin.Current);                            UInt16 entries = br.ReadUInt16();                          Int32 centralSize = br.ReadInt32();                          UInt32 centralDirOffset = br.ReadUInt32();                          UInt16 commentSize = br.ReadUInt16();                            // check if comment field is the very last data in file                          if (this.ZipFileStream.Position + commentSize != this.ZipFileStream.Length)                              return false;                            // Copy entire central directory to a memory buffer                          this.ExistingFiles = entries;                          this.CentralDirImage = new byte[centralSize];                          this.ZipFileStream.Seek(centralDirOffset' SeekOrigin.Begin);                          this.ZipFileStream.Read(this.CentralDirImage' 0' centralSize);                            // Leave the pointer at the begining of central dir' to append new files                          this.ZipFileStream.Seek(centralDirOffset' SeekOrigin.Begin);                          return true;                      }                  } while (this.ZipFileStream.Position > 0);              }              catch { }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadFileInfo,The following statement contains a magic number: try              {                  this.ZipFileStream.Seek(-17' SeekOrigin.End);                  BinaryReader br = new BinaryReader(this.ZipFileStream);                  do                  {                      this.ZipFileStream.Seek(-5' SeekOrigin.Current);                      UInt32 sig = br.ReadUInt32();                      if (sig == 0x06054b50)                      {                          this.ZipFileStream.Seek(6' SeekOrigin.Current);                            UInt16 entries = br.ReadUInt16();                          Int32 centralSize = br.ReadInt32();                          UInt32 centralDirOffset = br.ReadUInt32();                          UInt16 commentSize = br.ReadUInt16();                            // check if comment field is the very last data in file                          if (this.ZipFileStream.Position + commentSize != this.ZipFileStream.Length)                              return false;                            // Copy entire central directory to a memory buffer                          this.ExistingFiles = entries;                          this.CentralDirImage = new byte[centralSize];                          this.ZipFileStream.Seek(centralDirOffset' SeekOrigin.Begin);                          this.ZipFileStream.Read(this.CentralDirImage' 0' centralSize);                            // Leave the pointer at the begining of central dir' to append new files                          this.ZipFileStream.Seek(centralDirOffset' SeekOrigin.Begin);                          return true;                      }                  } while (this.ZipFileStream.Position > 0);              }              catch { }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadFileInfo,The following statement contains a magic number: try              {                  this.ZipFileStream.Seek(-17' SeekOrigin.End);                  BinaryReader br = new BinaryReader(this.ZipFileStream);                  do                  {                      this.ZipFileStream.Seek(-5' SeekOrigin.Current);                      UInt32 sig = br.ReadUInt32();                      if (sig == 0x06054b50)                      {                          this.ZipFileStream.Seek(6' SeekOrigin.Current);                            UInt16 entries = br.ReadUInt16();                          Int32 centralSize = br.ReadInt32();                          UInt32 centralDirOffset = br.ReadUInt32();                          UInt16 commentSize = br.ReadUInt16();                            // check if comment field is the very last data in file                          if (this.ZipFileStream.Position + commentSize != this.ZipFileStream.Length)                              return false;                            // Copy entire central directory to a memory buffer                          this.ExistingFiles = entries;                          this.CentralDirImage = new byte[centralSize];                          this.ZipFileStream.Seek(centralDirOffset' SeekOrigin.Begin);                          this.ZipFileStream.Read(this.CentralDirImage' 0' centralSize);                            // Leave the pointer at the begining of central dir' to append new files                          this.ZipFileStream.Seek(centralDirOffset' SeekOrigin.Begin);                          return true;                      }                  } while (this.ZipFileStream.Position > 0);              }              catch { }
