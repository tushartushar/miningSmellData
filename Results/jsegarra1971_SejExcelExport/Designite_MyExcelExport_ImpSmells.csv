Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MyExcelExport,OoXml,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,SetStructure,Cyclomatic complexity of the method is 10
Complex Method,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,Store,Cyclomatic complexity of the method is 10
Long Parameter List,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,AddStream,The method has 5 parameters.
Long Statement,MyExcelExport,OoXmlStringsStream,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,Initialize,The length of the statement  "	sw.Write ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"" + nl + "\" uniqueCount=\"" + nl + "\">\n"); " is 198.
Long Statement,MyExcelExport,gSheet,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,WriteCell,The length of the statement  "	if (value is sbyte || value is byte || value is short || value is ushort || value is int || value is uint || value is long || value is ulong) { " is 143.
Long Statement,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,Open,The length of the statement  "	Stream stream = (Stream)new FileStream (_filename' FileMode.Open' _access == FileAccess.Read ? FileAccess.Read : FileAccess.ReadWrite); " is 135.
Long Statement,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,Store,The length of the statement  "	if (_zfe.Method == Compression.Deflate && !this.ForceDeflating && _source.CanSeek && _zfe.CompressedSize > _zfe.FileSize) { " is 123.
Long Statement,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DateTimeToDosTime,The length of the statement  "	return (uint)((_dt.Second / 2) | (_dt.Minute << 5) | (_dt.Hour << 11) | (_dt.Day << 16) | (_dt.Month << 21) | ((_dt.Year - 1980) << 25)); " is 137.
Long Statement,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The length of the statement  "	return new DateTime ((int)(_dt >> 25) + 1980' (int)(_dt >> 21) & 15' (int)(_dt >> 16) & 31' (int)(_dt >> 11) & 31' (int)(_dt >> 5) & 63' (int)(_dt & 31) * 2); " is 158.
Complex Conditional,MyExcelExport,gSheet,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,WriteCell,The conditional expression  "value is sbyte || value is byte || value is short || value is ushort || value is int || value is uint || value is long || value is ulong"  is complex.
Complex Conditional,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,Store,The conditional expression  "_zfe.Method == Compression.Deflate && !this.ForceDeflating && _source.CanSeek && _zfe.CompressedSize > _zfe.FileSize"  is complex.
Empty Catch Block,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadFileInfo,The method has an empty catch block.
Magic Number,MyExcelExport,gSheet,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,CellRefToColIndex,The following statement contains a magic number: while (c [i] >= 'A' && c [i] <= 'Z') {  	sum *= 26;  	sum += (c [i] - 'A' + 1);  	i++;  }  
Magic Number,MyExcelExport,gSheet,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\OoXml.cs,CellRefToColIndex,The following statement contains a magic number: sum *= 26;  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ZipStorer,The following statement contains a magic number: CrcTable = new UInt32[256];  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ZipStorer,The following statement contains a magic number: for (int i = 0; i < CrcTable.Length; i++) {  	UInt32 c = (UInt32)i;  	for (int j = 0; j < 8; j++) {  		if ((c & 1) != 0)  			c = 3988292384 ^ (c >> 1);  		else  			c >>= 1;  	}  	CrcTable [i] = c;  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ZipStorer,The following statement contains a magic number: for (int i = 0; i < CrcTable.Length; i++) {  	UInt32 c = (UInt32)i;  	for (int j = 0; j < 8; j++) {  		if ((c & 1) != 0)  			c = 3988292384 ^ (c >> 1);  		else  			c >>= 1;  	}  	CrcTable [i] = c;  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ZipStorer,The following statement contains a magic number: for (int j = 0; j < 8; j++) {  	if ((c & 1) != 0)  		c = 3988292384 ^ (c >> 1);  	else  		c >>= 1;  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ZipStorer,The following statement contains a magic number: for (int j = 0; j < 8; j++) {  	if ((c & 1) != 0)  		c = 3988292384 ^ (c >> 1);  	else  		c >>= 1;  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ZipStorer,The following statement contains a magic number: if ((c & 1) != 0)  	c = 3988292384 ^ (c >> 1);  else  	c >>= 1;  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ZipStorer,The following statement contains a magic number: c = 3988292384 ^ (c >> 1);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (CentralDirImage' pointer);  	if (signature != 0x02014b50)  		break;  	bool encodeUTF8 = (BitConverter.ToUInt16 (CentralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (CentralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (CentralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (CentralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (CentralDirImage' pointer + 42);  	uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	ZipFileEntry zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (CentralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0)  		zfe.Comment = encoder.GetString (CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	result.Add (zfe);  	pointer += (46 + filenameSize + extraSize + commentSize);  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (CentralDirImage' pointer);  	if (signature != 0x02014b50)  		break;  	bool encodeUTF8 = (BitConverter.ToUInt16 (CentralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (CentralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (CentralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (CentralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (CentralDirImage' pointer + 42);  	uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	ZipFileEntry zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (CentralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0)  		zfe.Comment = encoder.GetString (CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	result.Add (zfe);  	pointer += (46 + filenameSize + extraSize + commentSize);  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (CentralDirImage' pointer);  	if (signature != 0x02014b50)  		break;  	bool encodeUTF8 = (BitConverter.ToUInt16 (CentralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (CentralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (CentralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (CentralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (CentralDirImage' pointer + 42);  	uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	ZipFileEntry zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (CentralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0)  		zfe.Comment = encoder.GetString (CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	result.Add (zfe);  	pointer += (46 + filenameSize + extraSize + commentSize);  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (CentralDirImage' pointer);  	if (signature != 0x02014b50)  		break;  	bool encodeUTF8 = (BitConverter.ToUInt16 (CentralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (CentralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (CentralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (CentralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (CentralDirImage' pointer + 42);  	uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	ZipFileEntry zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (CentralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0)  		zfe.Comment = encoder.GetString (CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	result.Add (zfe);  	pointer += (46 + filenameSize + extraSize + commentSize);  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (CentralDirImage' pointer);  	if (signature != 0x02014b50)  		break;  	bool encodeUTF8 = (BitConverter.ToUInt16 (CentralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (CentralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (CentralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (CentralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (CentralDirImage' pointer + 42);  	uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	ZipFileEntry zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (CentralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0)  		zfe.Comment = encoder.GetString (CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	result.Add (zfe);  	pointer += (46 + filenameSize + extraSize + commentSize);  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (CentralDirImage' pointer);  	if (signature != 0x02014b50)  		break;  	bool encodeUTF8 = (BitConverter.ToUInt16 (CentralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (CentralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (CentralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (CentralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (CentralDirImage' pointer + 42);  	uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	ZipFileEntry zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (CentralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0)  		zfe.Comment = encoder.GetString (CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	result.Add (zfe);  	pointer += (46 + filenameSize + extraSize + commentSize);  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (CentralDirImage' pointer);  	if (signature != 0x02014b50)  		break;  	bool encodeUTF8 = (BitConverter.ToUInt16 (CentralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (CentralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (CentralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (CentralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (CentralDirImage' pointer + 42);  	uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	ZipFileEntry zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (CentralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0)  		zfe.Comment = encoder.GetString (CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	result.Add (zfe);  	pointer += (46 + filenameSize + extraSize + commentSize);  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (CentralDirImage' pointer);  	if (signature != 0x02014b50)  		break;  	bool encodeUTF8 = (BitConverter.ToUInt16 (CentralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (CentralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (CentralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (CentralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (CentralDirImage' pointer + 42);  	uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	ZipFileEntry zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (CentralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0)  		zfe.Comment = encoder.GetString (CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	result.Add (zfe);  	pointer += (46 + filenameSize + extraSize + commentSize);  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (CentralDirImage' pointer);  	if (signature != 0x02014b50)  		break;  	bool encodeUTF8 = (BitConverter.ToUInt16 (CentralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (CentralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (CentralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (CentralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (CentralDirImage' pointer + 42);  	uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	ZipFileEntry zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (CentralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0)  		zfe.Comment = encoder.GetString (CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	result.Add (zfe);  	pointer += (46 + filenameSize + extraSize + commentSize);  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (CentralDirImage' pointer);  	if (signature != 0x02014b50)  		break;  	bool encodeUTF8 = (BitConverter.ToUInt16 (CentralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (CentralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (CentralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (CentralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (CentralDirImage' pointer + 42);  	uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	ZipFileEntry zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (CentralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0)  		zfe.Comment = encoder.GetString (CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	result.Add (zfe);  	pointer += (46 + filenameSize + extraSize + commentSize);  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (CentralDirImage' pointer);  	if (signature != 0x02014b50)  		break;  	bool encodeUTF8 = (BitConverter.ToUInt16 (CentralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (CentralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (CentralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (CentralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (CentralDirImage' pointer + 42);  	uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	ZipFileEntry zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (CentralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0)  		zfe.Comment = encoder.GetString (CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	result.Add (zfe);  	pointer += (46 + filenameSize + extraSize + commentSize);  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (CentralDirImage' pointer);  	if (signature != 0x02014b50)  		break;  	bool encodeUTF8 = (BitConverter.ToUInt16 (CentralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (CentralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (CentralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (CentralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (CentralDirImage' pointer + 42);  	uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	ZipFileEntry zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (CentralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0)  		zfe.Comment = encoder.GetString (CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	result.Add (zfe);  	pointer += (46 + filenameSize + extraSize + commentSize);  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (CentralDirImage' pointer);  	if (signature != 0x02014b50)  		break;  	bool encodeUTF8 = (BitConverter.ToUInt16 (CentralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (CentralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (CentralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (CentralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (CentralDirImage' pointer + 42);  	uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	ZipFileEntry zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (CentralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0)  		zfe.Comment = encoder.GetString (CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	result.Add (zfe);  	pointer += (46 + filenameSize + extraSize + commentSize);  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length;) {  	uint signature = BitConverter.ToUInt32 (CentralDirImage' pointer);  	if (signature != 0x02014b50)  		break;  	bool encodeUTF8 = (BitConverter.ToUInt16 (CentralDirImage' pointer + 8) & 0x0800) != 0;  	ushort method = BitConverter.ToUInt16 (CentralDirImage' pointer + 10);  	uint modifyTime = BitConverter.ToUInt32 (CentralDirImage' pointer + 12);  	uint crc32 = BitConverter.ToUInt32 (CentralDirImage' pointer + 16);  	uint comprSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 20);  	uint fileSize = BitConverter.ToUInt32 (CentralDirImage' pointer + 24);  	ushort filenameSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 28);  	ushort extraSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 30);  	ushort commentSize = BitConverter.ToUInt16 (CentralDirImage' pointer + 32);  	uint headerOffset = BitConverter.ToUInt32 (CentralDirImage' pointer + 42);  	uint headerSize = (uint)(46 + filenameSize + extraSize + commentSize);  	Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;  	ZipFileEntry zfe = new ZipFileEntry ();  	zfe.Method = (Compression)method;  	zfe.FilenameInZip = encoder.GetString (CentralDirImage' pointer + 46' filenameSize);  	zfe.FileOffset = GetFileOffset (headerOffset);  	zfe.FileSize = fileSize;  	zfe.CompressedSize = comprSize;  	zfe.HeaderOffset = headerOffset;  	zfe.HeaderSize = headerSize;  	zfe.Crc32 = crc32;  	zfe.ModifyTime = DosTimeToDateTime (modifyTime);  	if (commentSize > 0)  		zfe.Comment = encoder.GetString (CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  	result.Add (zfe);  	pointer += (46 + filenameSize + extraSize + commentSize);  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: zfe.FilenameInZip = encoder.GetString (CentralDirImage' pointer + 46' filenameSize);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: if (commentSize > 0)  	zfe.Comment = encoder.GetString (CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: zfe.Comment = encoder.GetString (CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadCentralDir,The following statement contains a magic number: pointer += (46 + filenameSize + extraSize + commentSize);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ExtractFile,The following statement contains a magic number: this.ZipFileStream.Read (signature' 0' 4);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,GetStream,The following statement contains a magic number: this.ZipFileStream.Read (signature' 0' 4);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,GetFileOffset,The following statement contains a magic number: this.ZipFileStream.Seek (_headerOffset + 26' SeekOrigin.Begin);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,GetFileOffset,The following statement contains a magic number: this.ZipFileStream.Read (buffer' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,GetFileOffset,The following statement contains a magic number: this.ZipFileStream.Read (buffer' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,GetFileOffset,The following statement contains a magic number: return (uint)(30 + filenameSize + extraSize + _headerOffset);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	3'  	4'  	20'  	0  }' 0' 6);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	3'  	4'  	20'  	0  }' 0' 6);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	3'  	4'  	20'  	0  }' 0' 6);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	3'  	4'  	20'  	0  }' 0' 6);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	3'  	4'  	20'  	0  }' 0' 6);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	3'  	4'  	20'  	0  }' 0' 6);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes ((ushort)(_zfe.EncodeUTF8 ? 0x0800 : 0))' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes ((ushort)_zfe.Method)' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes (DateTimeToDosTime (_zfe.ModifyTime))' 0' 4);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0  }' 0' 12);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes ((ushort)encodedFilename.Length)' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes ((ushort)0)' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	3'  	4'  	20'  	0  }' 0' 6);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	3'  	4'  	20'  	0  }' 0' 6);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	3'  	4'  	20'  	0  }' 0' 6);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	3'  	4'  	20'  	0  }' 0' 6);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	3'  	4'  	20'  	0  }' 0' 6);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	3'  	4'  	20'  	0  }' 0' 6);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes ((ushort)(_zfe.EncodeUTF8 ? 0x0800 : 0))' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes ((ushort)_zfe.Method)' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes (DateTimeToDosTime (_zfe.ModifyTime))' 0' 4);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0  }' 0' 12);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes ((ushort)encodedFilename.Length)' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteLocalHeaderNoRef,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes ((ushort)0)' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	1'  	2'  	23'  	0xB'  	20'  	0  }' 0' 8);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	1'  	2'  	23'  	0xB'  	20'  	0  }' 0' 8);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	1'  	2'  	23'  	0xB'  	20'  	0  }' 0' 8);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	1'  	2'  	23'  	0xB'  	20'  	0  }' 0' 8);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	1'  	2'  	23'  	0xB'  	20'  	0  }' 0' 8);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	1'  	2'  	23'  	0xB'  	20'  	0  }' 0' 8);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes ((ushort)(_zfe.EncodeUTF8 ? 0x0800 : 0))' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes ((ushort)_zfe.Method)' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes (DateTimeToDosTime (_zfe.ModifyTime))' 0' 4);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes (_zfe.Crc32)' 0' 4);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes (_zfe.CompressedSize)' 0' 4);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes (_zfe.FileSize)' 0' 4);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes ((ushort)encodedFilename.Length)' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes ((ushort)0)' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes ((ushort)encodedComment.Length)' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes ((ushort)0)' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes ((ushort)0)' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes ((ushort)0)' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes ((ushort)0x8100)' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes (_zfe.HeaderOffset)' 0' 4);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	5'  	6'  	0'  	0'  	0'  	0  }' 0' 8);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	5'  	6'  	0'  	0'  	0'  	0  }' 0' 8);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	5'  	6'  	0'  	0'  	0'  	0  }' 0' 8);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	5'  	6'  	0'  	0'  	0'  	0  }' 0' 8);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write (new byte[] {  	80'  	75'  	5'  	6'  	0'  	0'  	0'  	0  }' 0' 8);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes ((ushort)Files.Count + ExistingFiles)' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes ((ushort)Files.Count + ExistingFiles)' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes (_size)' 0' 4);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes (_offset)' 0' 4);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes ((ushort)encodedComment.Length)' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,Store,The following statement contains a magic number: do {  	bytesRead = _source.Read (buffer' 0' buffer.Length);  	totalRead += (uint)bytesRead;  	if (bytesRead > 0) {  		outStream.Write (buffer' 0' bytesRead);  		for (uint i = 0; i < bytesRead; i++)  			_zfe.Crc32 = ZipStorer.CrcTable [(_zfe.Crc32 ^ buffer [i]) & 0xFF] ^ (_zfe.Crc32 >> 8);  		outStream.Flush ();  	}  } while (bytesRead > 0);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,Store,The following statement contains a magic number: if (bytesRead > 0) {  	outStream.Write (buffer' 0' bytesRead);  	for (uint i = 0; i < bytesRead; i++)  		_zfe.Crc32 = ZipStorer.CrcTable [(_zfe.Crc32 ^ buffer [i]) & 0xFF] ^ (_zfe.Crc32 >> 8);  	outStream.Flush ();  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,Store,The following statement contains a magic number: for (uint i = 0; i < bytesRead; i++)  	_zfe.Crc32 = ZipStorer.CrcTable [(_zfe.Crc32 ^ buffer [i]) & 0xFF] ^ (_zfe.Crc32 >> 8);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,Store,The following statement contains a magic number: _zfe.Crc32 = ZipStorer.CrcTable [(_zfe.Crc32 ^ buffer [i]) & 0xFF] ^ (_zfe.Crc32 >> 8);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)((_dt.Second / 2) | (_dt.Minute << 5) | (_dt.Hour << 11) | (_dt.Day << 16) | (_dt.Month << 21) | ((_dt.Year - 1980) << 25));  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)((_dt.Second / 2) | (_dt.Minute << 5) | (_dt.Hour << 11) | (_dt.Day << 16) | (_dt.Month << 21) | ((_dt.Year - 1980) << 25));  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)((_dt.Second / 2) | (_dt.Minute << 5) | (_dt.Hour << 11) | (_dt.Day << 16) | (_dt.Month << 21) | ((_dt.Year - 1980) << 25));  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)((_dt.Second / 2) | (_dt.Minute << 5) | (_dt.Hour << 11) | (_dt.Day << 16) | (_dt.Month << 21) | ((_dt.Year - 1980) << 25));  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)((_dt.Second / 2) | (_dt.Minute << 5) | (_dt.Hour << 11) | (_dt.Day << 16) | (_dt.Month << 21) | ((_dt.Year - 1980) << 25));  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)((_dt.Second / 2) | (_dt.Minute << 5) | (_dt.Hour << 11) | (_dt.Day << 16) | (_dt.Month << 21) | ((_dt.Year - 1980) << 25));  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)((_dt.Second / 2) | (_dt.Minute << 5) | (_dt.Hour << 11) | (_dt.Day << 16) | (_dt.Month << 21) | ((_dt.Year - 1980) << 25));  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(_dt >> 25) + 1980' (int)(_dt >> 21) & 15' (int)(_dt >> 16) & 31' (int)(_dt >> 11) & 31' (int)(_dt >> 5) & 63' (int)(_dt & 31) * 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(_dt >> 25) + 1980' (int)(_dt >> 21) & 15' (int)(_dt >> 16) & 31' (int)(_dt >> 11) & 31' (int)(_dt >> 5) & 63' (int)(_dt & 31) * 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(_dt >> 25) + 1980' (int)(_dt >> 21) & 15' (int)(_dt >> 16) & 31' (int)(_dt >> 11) & 31' (int)(_dt >> 5) & 63' (int)(_dt & 31) * 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(_dt >> 25) + 1980' (int)(_dt >> 21) & 15' (int)(_dt >> 16) & 31' (int)(_dt >> 11) & 31' (int)(_dt >> 5) & 63' (int)(_dt & 31) * 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(_dt >> 25) + 1980' (int)(_dt >> 21) & 15' (int)(_dt >> 16) & 31' (int)(_dt >> 11) & 31' (int)(_dt >> 5) & 63' (int)(_dt & 31) * 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(_dt >> 25) + 1980' (int)(_dt >> 21) & 15' (int)(_dt >> 16) & 31' (int)(_dt >> 11) & 31' (int)(_dt >> 5) & 63' (int)(_dt & 31) * 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(_dt >> 25) + 1980' (int)(_dt >> 21) & 15' (int)(_dt >> 16) & 31' (int)(_dt >> 11) & 31' (int)(_dt >> 5) & 63' (int)(_dt & 31) * 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(_dt >> 25) + 1980' (int)(_dt >> 21) & 15' (int)(_dt >> 16) & 31' (int)(_dt >> 11) & 31' (int)(_dt >> 5) & 63' (int)(_dt & 31) * 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(_dt >> 25) + 1980' (int)(_dt >> 21) & 15' (int)(_dt >> 16) & 31' (int)(_dt >> 11) & 31' (int)(_dt >> 5) & 63' (int)(_dt & 31) * 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(_dt >> 25) + 1980' (int)(_dt >> 21) & 15' (int)(_dt >> 16) & 31' (int)(_dt >> 11) & 31' (int)(_dt >> 5) & 63' (int)(_dt & 31) * 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(_dt >> 25) + 1980' (int)(_dt >> 21) & 15' (int)(_dt >> 16) & 31' (int)(_dt >> 11) & 31' (int)(_dt >> 5) & 63' (int)(_dt & 31) * 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime ((int)(_dt >> 25) + 1980' (int)(_dt >> 21) & 15' (int)(_dt >> 16) & 31' (int)(_dt >> 11) & 31' (int)(_dt >> 5) & 63' (int)(_dt & 31) * 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizes,The following statement contains a magic number: this.ZipFileStream.Position = _zfe.HeaderOffset + 8;  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizes,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes ((ushort)_zfe.Method)' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizes,The following statement contains a magic number: this.ZipFileStream.Position = _zfe.HeaderOffset + 14;  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizes,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes (_zfe.Crc32)' 0' 4);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizes,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes (_zfe.CompressedSize)' 0' 4);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizes,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes (_zfe.FileSize)' 0' 4);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizesNoRef,The following statement contains a magic number: this.ZipFileStream.Position = _zfe.HeaderOffset + 8;  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizesNoRef,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes ((ushort)_zfe.Method)' 0' 2);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizesNoRef,The following statement contains a magic number: this.ZipFileStream.Position = _zfe.HeaderOffset + 14;  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizesNoRef,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes (_zfe.Crc32)' 0' 4);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizesNoRef,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes (_zfe.CompressedSize)' 0' 4);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,UpdateCrcAndSizesNoRef,The following statement contains a magic number: this.ZipFileStream.Write (BitConverter.GetBytes (_zfe.FileSize)' 0' 4);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadFileInfo,The following statement contains a magic number: if (this.ZipFileStream.Length < 22)  	return false;  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadFileInfo,The following statement contains a magic number: try {  	this.ZipFileStream.Seek (-17' SeekOrigin.End);  	BinaryReader br = new BinaryReader (this.ZipFileStream);  	do {  		this.ZipFileStream.Seek (-5' SeekOrigin.Current);  		UInt32 sig = br.ReadUInt32 ();  		if (sig == 0x06054b50) {  			this.ZipFileStream.Seek (6' SeekOrigin.Current);  			UInt16 entries = br.ReadUInt16 ();  			Int32 centralSize = br.ReadInt32 ();  			UInt32 centralDirOffset = br.ReadUInt32 ();  			UInt16 commentSize = br.ReadUInt16 ();  			// check if comment field is the very last data in file  			if (this.ZipFileStream.Position + commentSize != this.ZipFileStream.Length)  				return false;  			// Copy entire central directory to a memory buffer  			this.ExistingFiles = entries;  			this.CentralDirImage = new byte[centralSize];  			this.ZipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  			this.ZipFileStream.Read (this.CentralDirImage' 0' centralSize);  			// Leave the pointer at the begining of central dir' to append new files  			this.ZipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  			return true;  		}  	} while (this.ZipFileStream.Position > 0);  } catch {  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadFileInfo,The following statement contains a magic number: try {  	this.ZipFileStream.Seek (-17' SeekOrigin.End);  	BinaryReader br = new BinaryReader (this.ZipFileStream);  	do {  		this.ZipFileStream.Seek (-5' SeekOrigin.Current);  		UInt32 sig = br.ReadUInt32 ();  		if (sig == 0x06054b50) {  			this.ZipFileStream.Seek (6' SeekOrigin.Current);  			UInt16 entries = br.ReadUInt16 ();  			Int32 centralSize = br.ReadInt32 ();  			UInt32 centralDirOffset = br.ReadUInt32 ();  			UInt16 commentSize = br.ReadUInt16 ();  			// check if comment field is the very last data in file  			if (this.ZipFileStream.Position + commentSize != this.ZipFileStream.Length)  				return false;  			// Copy entire central directory to a memory buffer  			this.ExistingFiles = entries;  			this.CentralDirImage = new byte[centralSize];  			this.ZipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  			this.ZipFileStream.Read (this.CentralDirImage' 0' centralSize);  			// Leave the pointer at the begining of central dir' to append new files  			this.ZipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  			return true;  		}  	} while (this.ZipFileStream.Position > 0);  } catch {  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadFileInfo,The following statement contains a magic number: try {  	this.ZipFileStream.Seek (-17' SeekOrigin.End);  	BinaryReader br = new BinaryReader (this.ZipFileStream);  	do {  		this.ZipFileStream.Seek (-5' SeekOrigin.Current);  		UInt32 sig = br.ReadUInt32 ();  		if (sig == 0x06054b50) {  			this.ZipFileStream.Seek (6' SeekOrigin.Current);  			UInt16 entries = br.ReadUInt16 ();  			Int32 centralSize = br.ReadInt32 ();  			UInt32 centralDirOffset = br.ReadUInt32 ();  			UInt16 commentSize = br.ReadUInt16 ();  			// check if comment field is the very last data in file  			if (this.ZipFileStream.Position + commentSize != this.ZipFileStream.Length)  				return false;  			// Copy entire central directory to a memory buffer  			this.ExistingFiles = entries;  			this.CentralDirImage = new byte[centralSize];  			this.ZipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  			this.ZipFileStream.Read (this.CentralDirImage' 0' centralSize);  			// Leave the pointer at the begining of central dir' to append new files  			this.ZipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  			return true;  		}  	} while (this.ZipFileStream.Position > 0);  } catch {  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadFileInfo,The following statement contains a magic number: this.ZipFileStream.Seek (-17' SeekOrigin.End);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadFileInfo,The following statement contains a magic number: do {  	this.ZipFileStream.Seek (-5' SeekOrigin.Current);  	UInt32 sig = br.ReadUInt32 ();  	if (sig == 0x06054b50) {  		this.ZipFileStream.Seek (6' SeekOrigin.Current);  		UInt16 entries = br.ReadUInt16 ();  		Int32 centralSize = br.ReadInt32 ();  		UInt32 centralDirOffset = br.ReadUInt32 ();  		UInt16 commentSize = br.ReadUInt16 ();  		// check if comment field is the very last data in file  		if (this.ZipFileStream.Position + commentSize != this.ZipFileStream.Length)  			return false;  		// Copy entire central directory to a memory buffer  		this.ExistingFiles = entries;  		this.CentralDirImage = new byte[centralSize];  		this.ZipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  		this.ZipFileStream.Read (this.CentralDirImage' 0' centralSize);  		// Leave the pointer at the begining of central dir' to append new files  		this.ZipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  		return true;  	}  } while (this.ZipFileStream.Position > 0);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadFileInfo,The following statement contains a magic number: do {  	this.ZipFileStream.Seek (-5' SeekOrigin.Current);  	UInt32 sig = br.ReadUInt32 ();  	if (sig == 0x06054b50) {  		this.ZipFileStream.Seek (6' SeekOrigin.Current);  		UInt16 entries = br.ReadUInt16 ();  		Int32 centralSize = br.ReadInt32 ();  		UInt32 centralDirOffset = br.ReadUInt32 ();  		UInt16 commentSize = br.ReadUInt16 ();  		// check if comment field is the very last data in file  		if (this.ZipFileStream.Position + commentSize != this.ZipFileStream.Length)  			return false;  		// Copy entire central directory to a memory buffer  		this.ExistingFiles = entries;  		this.CentralDirImage = new byte[centralSize];  		this.ZipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  		this.ZipFileStream.Read (this.CentralDirImage' 0' centralSize);  		// Leave the pointer at the begining of central dir' to append new files  		this.ZipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  		return true;  	}  } while (this.ZipFileStream.Position > 0);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadFileInfo,The following statement contains a magic number: this.ZipFileStream.Seek (-5' SeekOrigin.Current);  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadFileInfo,The following statement contains a magic number: if (sig == 0x06054b50) {  	this.ZipFileStream.Seek (6' SeekOrigin.Current);  	UInt16 entries = br.ReadUInt16 ();  	Int32 centralSize = br.ReadInt32 ();  	UInt32 centralDirOffset = br.ReadUInt32 ();  	UInt16 commentSize = br.ReadUInt16 ();  	// check if comment field is the very last data in file  	if (this.ZipFileStream.Position + commentSize != this.ZipFileStream.Length)  		return false;  	// Copy entire central directory to a memory buffer  	this.ExistingFiles = entries;  	this.CentralDirImage = new byte[centralSize];  	this.ZipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  	this.ZipFileStream.Read (this.CentralDirImage' 0' centralSize);  	// Leave the pointer at the begining of central dir' to append new files  	this.ZipFileStream.Seek (centralDirOffset' SeekOrigin.Begin);  	return true;  }  
Magic Number,System.IO.Compression,ZipStorer,F:\newReposMay17\jsegarra1971_SejExcelExport\MyExcelExport\Unzip.cs,ReadFileInfo,The following statement contains a magic number: this.ZipFileStream.Seek (6' SeekOrigin.Current);  
