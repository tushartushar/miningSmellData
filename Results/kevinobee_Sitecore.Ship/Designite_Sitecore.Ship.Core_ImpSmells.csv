Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Sitecore.Ship.Core,HttpRequestAuthoriser,F:\newReposMay17\kevinobee_Sitecore.Ship\src\Sitecore.Ship.Core\HttpRequestAuthoriser.cs,IsAllowed,The length of the statement  "	//            if ((_context.Request.HttpMethod == "POST") && (!_configurationProvider.Settings.AllowPackageStreaming)) return false; " is 132.
Long Statement,Sitecore.Ship.Core,HttpRequestAuthoriser,F:\newReposMay17\kevinobee_Sitecore.Ship\src\Sitecore.Ship.Core\HttpRequestAuthoriser.cs,IsAllowed,The length of the statement  "		var foundAddress = _packageInstallationSettings.AddressWhitelist.Any (x => string.Compare (x' _checkRequests.UserHostAddress' StringComparison.InvariantCultureIgnoreCase) == 0); " is 177.
Long Statement,Sitecore.Ship.Core,HttpRequestAuthoriser,F:\newReposMay17\kevinobee_Sitecore.Ship\src\Sitecore.Ship.Core\HttpRequestAuthoriser.cs,IsAllowed,The length of the statement  "			LogAccessDenial (string.Format ("packageInstallation whitelist is denying access to {0}"' _checkRequests.UserHostAddress)); " is 123.
Magic Number,Sitecore.Ship.Core.Services,ZipEntryDataParser,F:\newReposMay17\kevinobee_Sitecore.Ship\src\Sitecore.Ship.Core\Services\ZipEntryDataParser.cs,GetManifestEntry,The following statement contains a magic number: if (dataKey.EndsWith ("}"' StringComparison.InvariantCultureIgnoreCase)) {  	var elements = dataKey.Split (new[] {  		"_{"  	}' 2' StringSplitOptions.None);  	return new PackageManifestEntry {  		ID = new Guid (elements [1].Trim (new[] {  			'{''  			'}'  		}))'  		Path = elements [0]  	};  }  
Magic Number,Sitecore.Ship.Core.Services,ZipEntryDataParser,F:\newReposMay17\kevinobee_Sitecore.Ship\src\Sitecore.Ship.Core\Services\ZipEntryDataParser.cs,GetManifestEntry,The following statement contains a magic number: if (dataKey.EndsWith ("/xml"' StringComparison.InvariantCultureIgnoreCase)) {  	var elements = dataKey.Split (new[] {  		"/{"  	}' 2' StringSplitOptions.None);  	// fix - support XML folders  	if (elements.Length > 1) {  		return new PackageManifestEntry {  			ID = new Guid (elements [1].Split (new[] {  				'}'  			}) [0])'  			Path = elements [0]  		};  	}  }  
