Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MemoryMapBridgeProxy,AssignProcessors,C:\repos\darcythomas_HaywireOwin\HaywireOwin\HaywireBridge\AssignProcessors.cs,SetDefaultIncomingEventProcessor,Cyclomatic complexity of the method is 12
Complex Method,MemoryMapBridgeProxy,AssignProcessors,C:\repos\darcythomas_HaywireOwin\HaywireOwin\HaywireBridge\AssignProcessors.cs,PerformanceTestProcessIncomingEvent,Cyclomatic complexity of the method is 13
Complex Method,MemoryMapBridgeProxy,HaywireBridge,C:\repos\darcythomas_HaywireOwin\HaywireOwin\HaywireBridge\HaywireBridge.cs,SetDefaultIncomingEventProcessor,Cyclomatic complexity of the method is 12
Complex Method,MemoryMapBridgeProxy,HaywireBridge,C:\repos\darcythomas_HaywireOwin\HaywireOwin\HaywireBridge\HaywireBridge.cs,PerformanceTestProcessIncomingEvent,Cyclomatic complexity of the method is 13
Long Statement,MemoryMapBridgeProxy,HaywireBridge,C:\repos\darcythomas_HaywireOwin\HaywireOwin\HaywireBridge\HaywireBridge.cs,SetupMemoryMappedFileSecurity,The length of the statement  "	customSecurity.AddAccessRule (new AccessRule<MemoryMappedFileRights> ("everyone"' MemoryMappedFileRights.FullControl' AccessControlType.Allow)); " is 144.
Long Statement,MemoryMapBridgeProxy,HaywireBridge,C:\repos\darcythomas_HaywireOwin\HaywireOwin\HaywireBridge\HaywireBridge.cs,SetupMemoryMappedFiles,The length of the statement  "		MemoryMappedIn = MemoryMappedFile.CreateNew (FileName + "-MasterInSlaveOut"' BridgeSize' MemoryMappedFileAccess.ReadWrite' MemoryMappedFileOptions.DelayAllocatePages' customSecurity' HandleInheritability.Inheritable); " is 217.
Long Statement,MemoryMapBridgeProxy,HaywireBridge,C:\repos\darcythomas_HaywireOwin\HaywireOwin\HaywireBridge\HaywireBridge.cs,SetupMemoryMappedFiles,The length of the statement  "		MemoryMappedIn = MemoryMappedFile.CreateOrOpen (FileName + "-SlaveInMasterOut"' BridgeSize' MemoryMappedFileAccess.ReadWrite' MemoryMappedFileOptions.DelayAllocatePages' customSecurity' HandleInheritability.Inheritable); " is 220.
Long Statement,MemoryMapBridgeProxy,HaywireBridge,C:\repos\darcythomas_HaywireOwin\HaywireOwin\HaywireBridge\HaywireBridge.cs,SetupMemoryMappedFiles,The length of the statement  "		MemoryMappedOut = MemoryMappedFile.CreateNew (FileName + "-SlaveInMasterOut"' BridgeSize' MemoryMappedFileAccess.ReadWrite' MemoryMappedFileOptions.DelayAllocatePages' customSecurity' HandleInheritability.Inheritable); " is 218.
Long Statement,MemoryMapBridgeProxy,HaywireBridge,C:\repos\darcythomas_HaywireOwin\HaywireOwin\HaywireBridge\HaywireBridge.cs,SetupMemoryMappedFiles,The length of the statement  "		MemoryMappedOut = MemoryMappedFile.CreateOrOpen (FileName + "-MasterInSlaveOut"' BridgeSize' MemoryMappedFileAccess.ReadWrite' MemoryMappedFileOptions.DelayAllocatePages' customSecurity' HandleInheritability.Inheritable); " is 221.
Long Statement,MemoryMapBridgeProxy,HaywireBridge,C:\repos\darcythomas_HaywireOwin\HaywireOwin\HaywireBridge\HaywireBridge.cs,SetupMemoryMappedFiles,The length of the statement  "	ProcessorMappedFile = MemoryMappedFile.CreateOrOpen (FileName + "-Processor"' BridgeSize' MemoryMappedFileAccess.ReadWrite' MemoryMappedFileOptions.DelayAllocatePages' customSecurity' HandleInheritability.Inheritable); " is 218.
Magic Number,MemoryMapBridgeProxy,AssignProcessors,C:\repos\darcythomas_HaywireOwin\HaywireOwin\HaywireBridge\AssignProcessors.cs,PerformanceTestProcessIncomingEvent,The following statement contains a magic number: if (eventObject.MessageType % 2 == 0) {  	//is a response; ignore  	if (eventObject.MessageType != 0) {  		_haywireBridge._memoryManagmentFactory.ReturnAllocation (new MemoryAllocation (eventObject));  	}  	//TODO memory pool release   }  else {  	MessageType messageType = (MessageType)eventObject.MessageType;  	switch (messageType) {  	case MessageType.Echo:  		Byte[] data = new byte[eventObject.MessageLength];  		_haywireBridge._processorViewAccessor.ReadArray (eventObject.OffsetPosition' data' 0' eventObject.MessageLength);  		_haywireBridge._memoryManagmentFactory.ReturnAllocation (new MemoryAllocation (eventObject));  		String message = Helpers.GetString (data);  		Console.WriteLine (message);  		_haywireBridge.RaiseEvent (message' MessageType.EchoReply);  		break;  	case MessageType.Default:  	default:  		//ignore  		break;  	}  }  
Magic Number,MemoryMapBridgeProxy,EventSpinners,C:\repos\darcythomas_HaywireOwin\HaywireOwin\HaywireBridge\EventSpinners.cs,EventspinnerOut,The following statement contains a magic number: using (var viewAccessor = _haywireBridge.GetOutAccessor ()) {  	bool ackd = true;  	viewAccessor.Write (sizeof(Int32) * 3' true);  	while (_eventSpinnerThreadsRunning) {  		//check if anything in outgoing queue  		//check if last message was processed  		//if processed write new item to queue  		//HINT: try writing to a set of slots not just one' may be more efficient with thread time slicing  		if (ackd) {  			EventCaller q;  			if (!_haywireBridge.EventLoaderUnloader.EventsToSendQueue.TryDequeue (out q))  				continue;  			viewAccessor.Write (0' ref q);  			ackd = false;  		}  		else {  			viewAccessor.Read (0' out ackd);  			if (ackd)  				continue;  			Thread.Yield ();  			//Release thread slice so that we don't consume 100% of a core  		}  	}  }  
Magic Number,MemoryMapBridgeProxy,EventSpinners,C:\repos\darcythomas_HaywireOwin\HaywireOwin\HaywireBridge\EventSpinners.cs,EventspinnerOut,The following statement contains a magic number: viewAccessor.Write (sizeof(Int32) * 3' true);  
Magic Number,MemoryMapBridgeProxy,EventSpinners,C:\repos\darcythomas_HaywireOwin\HaywireOwin\HaywireBridge\EventSpinners.cs,Dispose,The following statement contains a magic number: _eventSpinnerThreadIn.Join (500);  
Magic Number,MemoryMapBridgeProxy,EventSpinners,C:\repos\darcythomas_HaywireOwin\HaywireOwin\HaywireBridge\EventSpinners.cs,Dispose,The following statement contains a magic number: _eventSpinnerThreadOut.Join (500);  
Magic Number,MemoryMapBridgeProxy,HaywireBridge,C:\repos\darcythomas_HaywireOwin\HaywireOwin\HaywireBridge\HaywireBridge.cs,PerformanceTestProcessIncomingEvent,The following statement contains a magic number: if (eventObject.MessageType % 2 == 0) {  	//is a response; ignore  	if (eventObject.MessageType != 0) {  		_memoryManagmentFactory.ReturnAllocation (new MemoryAllocation (eventObject));  	}  	//TODO memory pool release   }  else {  	MessageType messageType = (MessageType)eventObject.MessageType;  	switch (messageType) {  	case MessageType.Echo:  		Byte[] data = new byte[eventObject.MessageLength];  		_processorViewAccessor.ReadArray (eventObject.OffsetPosition' data' 0' eventObject.MessageLength);  		_memoryManagmentFactory.ReturnAllocation (new MemoryAllocation (eventObject));  		String message = data.GetString ();  		Console.WriteLine (message);  		RaiseEvent (message' MessageType.EchoReply);  		break;  	case MessageType.Default:  	default:  		//ignore  		break;  	}  }  
Magic Number,MemoryMapBridgeProxy,MemoryManagmentFactory,C:\repos\darcythomas_HaywireOwin\HaywireOwin\HaywireBridge\MemoryManagmentFactory.cs,MemoryManagmentFactory,The following statement contains a magic number: while (maxSize > 129) {  	int length = maxSize;  	// rand.Next(128' maxItemsize);  	MemoryAllocation allocation;  	allocation.Offset = currentOffset;  	allocation.Lenght = length;  	currentOffset += length;  	allocation.NextBlock = currentOffset;  	maxSize -= length;  	numberOfBlockInPool++;  	_allocationPool.Enqueue (allocation);  }  
Magic Number,MemoryMapBridgeProxy,MemoryManagmentFactory,C:\repos\darcythomas_HaywireOwin\HaywireOwin\HaywireBridge\MemoryManagmentFactory.cs,ReturnAllocation,The following statement contains a magic number: if (count <= numberOfBlockInPool / 10)  	return;  
Missing Default,MemoryMapBridgeProxy,AssignProcessors,C:\repos\darcythomas_HaywireOwin\HaywireOwin\HaywireBridge\AssignProcessors.cs,SetDefaultIncomingEventProcessor,The following switch statement is missing a default case: switch (mode) {  case HaywireStartUpMode.Default:  	#if (DEBUG)  	//If a debug release then use the debug processor' otherwise fall through and use the normal one  	ProcessEventDelegate = DebugProcessIncomingEvent;  	break;  #endif  case HaywireStartUpMode.Normal:  	ProcessEventDelegate = NormalProcessIncomingEvent;  	break;  case HaywireStartUpMode.Debug:  	ProcessEventDelegate = DebugProcessIncomingEvent;  	break;  case HaywireStartUpMode.PerformanceTest:  	ProcessEventDelegate = PerformanceTestProcessIncomingEvent;  	break;  }  
Missing Default,MemoryMapBridgeProxy,HaywireBridge,C:\repos\darcythomas_HaywireOwin\HaywireOwin\HaywireBridge\HaywireBridge.cs,SetDefaultIncomingEventProcessor,The following switch statement is missing a default case: switch (mode) {  case HaywireStartUpMode.Default:  	#if (DEBUG)  	//If a debug release then use the debug processor' otherwise fall through and use the normal one  	ProcessEventDelegate = DebugProcessIncomingEvent;  	break;  #endif  case HaywireStartUpMode.Normal:  	ProcessEventDelegate = NormalProcessIncomingEvent;  	break;  case HaywireStartUpMode.Debug:  	ProcessEventDelegate = DebugProcessIncomingEvent;  	break;  case HaywireStartUpMode.PerformanceTest:  	ProcessEventDelegate = PerformanceTestProcessIncomingEvent;  	break;  }  
