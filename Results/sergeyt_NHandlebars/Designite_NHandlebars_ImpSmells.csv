Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NHandlebars.Core,Context,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Core\Context.cs,GetValues,Cyclomatic complexity of the method is 13
Complex Method,NHandlebars.Core,Extensions,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Core\Extensions.cs,HtmlEncode,Cyclomatic complexity of the method is 21
Complex Method,NHandlebars,Handlebars,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Handlebars.cs,CompileNode,Cyclomatic complexity of the method is 12
Complex Method,NHandlebars,Handlebars,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Handlebars.cs,Scan,Cyclomatic complexity of the method is 14
Long Parameter List,NHandlebars.Core,CachedDataRecord,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Core\CachedDataRecord.cs,GetBytes,The method has 5 parameters.
Long Parameter List,NHandlebars.Core,CachedDataRecord,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Core\CachedDataRecord.cs,GetChars,The method has 5 parameters.
Long Statement,NHandlebars,Handlebars,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Handlebars.cs,CompileNode,The length of the statement  "			stack.Peek ().Add (token.Kind == TokenKind.UnescapedExpression ? (Node)new UnescapedExpressionNode (expr) : new ExpressionNode (expr)); " is 135.
Magic Number,NHandlebars.Core,Context,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Core\Context.cs,SplitPath,The following statement contains a magic number: for (int i = 0; i < path.Length; i++) {  	if (path [i] == '.') {  		// '../' segment gets parent scope  		if (i + 2 < path.Length && path [i + 1] == '.' && path [i + 2] == '/') {  			if (start < i) {  				var name = path.Substring (start' i - start);  				yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  			}  			yield return new KeyValuePair<PathKind' string> (PathKind.Parent' null);  			start = i + 3;  			i += 2;  		}  		else {  			var name = path.Substring (start' i - start);  			yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  			start = i + 1;  		}  	}  }  
Magic Number,NHandlebars.Core,Context,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Core\Context.cs,SplitPath,The following statement contains a magic number: for (int i = 0; i < path.Length; i++) {  	if (path [i] == '.') {  		// '../' segment gets parent scope  		if (i + 2 < path.Length && path [i + 1] == '.' && path [i + 2] == '/') {  			if (start < i) {  				var name = path.Substring (start' i - start);  				yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  			}  			yield return new KeyValuePair<PathKind' string> (PathKind.Parent' null);  			start = i + 3;  			i += 2;  		}  		else {  			var name = path.Substring (start' i - start);  			yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  			start = i + 1;  		}  	}  }  
Magic Number,NHandlebars.Core,Context,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Core\Context.cs,SplitPath,The following statement contains a magic number: for (int i = 0; i < path.Length; i++) {  	if (path [i] == '.') {  		// '../' segment gets parent scope  		if (i + 2 < path.Length && path [i + 1] == '.' && path [i + 2] == '/') {  			if (start < i) {  				var name = path.Substring (start' i - start);  				yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  			}  			yield return new KeyValuePair<PathKind' string> (PathKind.Parent' null);  			start = i + 3;  			i += 2;  		}  		else {  			var name = path.Substring (start' i - start);  			yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  			start = i + 1;  		}  	}  }  
Magic Number,NHandlebars.Core,Context,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Core\Context.cs,SplitPath,The following statement contains a magic number: for (int i = 0; i < path.Length; i++) {  	if (path [i] == '.') {  		// '../' segment gets parent scope  		if (i + 2 < path.Length && path [i + 1] == '.' && path [i + 2] == '/') {  			if (start < i) {  				var name = path.Substring (start' i - start);  				yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  			}  			yield return new KeyValuePair<PathKind' string> (PathKind.Parent' null);  			start = i + 3;  			i += 2;  		}  		else {  			var name = path.Substring (start' i - start);  			yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  			start = i + 1;  		}  	}  }  
Magic Number,NHandlebars.Core,Context,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Core\Context.cs,SplitPath,The following statement contains a magic number: if (path [i] == '.') {  	// '../' segment gets parent scope  	if (i + 2 < path.Length && path [i + 1] == '.' && path [i + 2] == '/') {  		if (start < i) {  			var name = path.Substring (start' i - start);  			yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  		}  		yield return new KeyValuePair<PathKind' string> (PathKind.Parent' null);  		start = i + 3;  		i += 2;  	}  	else {  		var name = path.Substring (start' i - start);  		yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  		start = i + 1;  	}  }  
Magic Number,NHandlebars.Core,Context,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Core\Context.cs,SplitPath,The following statement contains a magic number: if (path [i] == '.') {  	// '../' segment gets parent scope  	if (i + 2 < path.Length && path [i + 1] == '.' && path [i + 2] == '/') {  		if (start < i) {  			var name = path.Substring (start' i - start);  			yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  		}  		yield return new KeyValuePair<PathKind' string> (PathKind.Parent' null);  		start = i + 3;  		i += 2;  	}  	else {  		var name = path.Substring (start' i - start);  		yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  		start = i + 1;  	}  }  
Magic Number,NHandlebars.Core,Context,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Core\Context.cs,SplitPath,The following statement contains a magic number: if (path [i] == '.') {  	// '../' segment gets parent scope  	if (i + 2 < path.Length && path [i + 1] == '.' && path [i + 2] == '/') {  		if (start < i) {  			var name = path.Substring (start' i - start);  			yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  		}  		yield return new KeyValuePair<PathKind' string> (PathKind.Parent' null);  		start = i + 3;  		i += 2;  	}  	else {  		var name = path.Substring (start' i - start);  		yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  		start = i + 1;  	}  }  
Magic Number,NHandlebars.Core,Context,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Core\Context.cs,SplitPath,The following statement contains a magic number: if (path [i] == '.') {  	// '../' segment gets parent scope  	if (i + 2 < path.Length && path [i + 1] == '.' && path [i + 2] == '/') {  		if (start < i) {  			var name = path.Substring (start' i - start);  			yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  		}  		yield return new KeyValuePair<PathKind' string> (PathKind.Parent' null);  		start = i + 3;  		i += 2;  	}  	else {  		var name = path.Substring (start' i - start);  		yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  		start = i + 1;  	}  }  
Magic Number,NHandlebars.Core,Context,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Core\Context.cs,SplitPath,The following statement contains a magic number: if (i + 2 < path.Length && path [i + 1] == '.' && path [i + 2] == '/') {  	if (start < i) {  		var name = path.Substring (start' i - start);  		yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  	}  	yield return new KeyValuePair<PathKind' string> (PathKind.Parent' null);  	start = i + 3;  	i += 2;  }  else {  	var name = path.Substring (start' i - start);  	yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  	start = i + 1;  }  
Magic Number,NHandlebars.Core,Context,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Core\Context.cs,SplitPath,The following statement contains a magic number: if (i + 2 < path.Length && path [i + 1] == '.' && path [i + 2] == '/') {  	if (start < i) {  		var name = path.Substring (start' i - start);  		yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  	}  	yield return new KeyValuePair<PathKind' string> (PathKind.Parent' null);  	start = i + 3;  	i += 2;  }  else {  	var name = path.Substring (start' i - start);  	yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  	start = i + 1;  }  
Magic Number,NHandlebars.Core,Context,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Core\Context.cs,SplitPath,The following statement contains a magic number: if (i + 2 < path.Length && path [i + 1] == '.' && path [i + 2] == '/') {  	if (start < i) {  		var name = path.Substring (start' i - start);  		yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  	}  	yield return new KeyValuePair<PathKind' string> (PathKind.Parent' null);  	start = i + 3;  	i += 2;  }  else {  	var name = path.Substring (start' i - start);  	yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  	start = i + 1;  }  
Magic Number,NHandlebars.Core,Context,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Core\Context.cs,SplitPath,The following statement contains a magic number: if (i + 2 < path.Length && path [i + 1] == '.' && path [i + 2] == '/') {  	if (start < i) {  		var name = path.Substring (start' i - start);  		yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  	}  	yield return new KeyValuePair<PathKind' string> (PathKind.Parent' null);  	start = i + 3;  	i += 2;  }  else {  	var name = path.Substring (start' i - start);  	yield return new KeyValuePair<PathKind' string> (PathKind.Name' name);  	start = i + 1;  }  
Magic Number,NHandlebars.Core,Context,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Core\Context.cs,SplitPath,The following statement contains a magic number: start = i + 3;  
Magic Number,NHandlebars.Core,Context,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Core\Context.cs,SplitPath,The following statement contains a magic number: i += 2;  
Magic Number,NHandlebars.Core,Extensions,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Core\Extensions.cs,HtmlEncode,The following statement contains a magic number: foreach (char c in text) {  	switch (c) {  	case '<':  		sb.Append ("&lt;");  		break;  	case '>':  		sb.Append ("&gt;");  		break;  	case '"':  		sb.Append ("&quot;");  		break;  	case '\'':  		sb.Append ("&apos;");  		break;  	case '&':  		sb.Append ("&amp;");  		break;  	default:  		if (c > 159) {  			sb.Append ("&#");  			sb.Append (((int)c).ToString (CultureInfo.InvariantCulture));  			sb.Append (";");  		}  		else {  			sb.Append (c);  		}  		break;  	}  }  
Magic Number,NHandlebars.Core,Extensions,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Core\Extensions.cs,HtmlEncode,The following statement contains a magic number: switch (c) {  case '<':  	sb.Append ("&lt;");  	break;  case '>':  	sb.Append ("&gt;");  	break;  case '"':  	sb.Append ("&quot;");  	break;  case '\'':  	sb.Append ("&apos;");  	break;  case '&':  	sb.Append ("&amp;");  	break;  default:  	if (c > 159) {  		sb.Append ("&#");  		sb.Append (((int)c).ToString (CultureInfo.InvariantCulture));  		sb.Append (";");  	}  	else {  		sb.Append (c);  	}  	break;  }  
Magic Number,NHandlebars.Core,Extensions,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Core\Extensions.cs,HtmlEncode,The following statement contains a magic number: if (c > 159) {  	sb.Append ("&#");  	sb.Append (((int)c).ToString (CultureInfo.InvariantCulture));  	sb.Append (";");  }  else {  	sb.Append (c);  }  
Magic Number,NHandlebars,Handlebars,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Handlebars.cs,CompileNode,The following statement contains a magic number: foreach (var token in Scan (input)) {  	if (token.Kind == TokenKind.Text) {  		stack.Peek ().Add (new TextNode (token.Value));  		continue;  	}  	var expr = token.Value;  	if (expr [0] == '#') {  		var type = "";  		for (var i = 1; i < expr.Length; i++) {  			if (char.IsWhiteSpace (expr [i])) {  				expr = expr.Substring (i + 1);  				break;  			}  			type += expr [i];  		}  		stack.Push (Block.Create (type' expr));  	}  	else if (expr [0] == '/')// end of block  	 {  		if (stack.Count < 2)  			throw new FormatException ("Unbalanced blocks");  		var type = expr.Substring (1).Trim ();  		var block = stack.Pop ();  		if (block.Type != type)  			throw new FormatException ("Unmatched close tag");  		stack.Peek ().Add (block.ToNode ());  	}  	else if (expr == "else") {  		var block = stack.Peek ();  		if (block.Kind == BlockKind.If || block.Kind == BlockKind.Unless) {  			block.EnterElse ();  		}  		else {  			throw new FormatException ("Invalid else usage");  		}  	}  	else {  		stack.Peek ().Add (token.Kind == TokenKind.UnescapedExpression ? (Node)new UnescapedExpressionNode (expr) : new ExpressionNode (expr));  	}  }  
Magic Number,NHandlebars,Handlebars,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Handlebars.cs,CompileNode,The following statement contains a magic number: if (expr [0] == '#') {  	var type = "";  	for (var i = 1; i < expr.Length; i++) {  		if (char.IsWhiteSpace (expr [i])) {  			expr = expr.Substring (i + 1);  			break;  		}  		type += expr [i];  	}  	stack.Push (Block.Create (type' expr));  }  else if (expr [0] == '/')// end of block   {  	if (stack.Count < 2)  		throw new FormatException ("Unbalanced blocks");  	var type = expr.Substring (1).Trim ();  	var block = stack.Pop ();  	if (block.Type != type)  		throw new FormatException ("Unmatched close tag");  	stack.Peek ().Add (block.ToNode ());  }  else if (expr == "else") {  	var block = stack.Peek ();  	if (block.Kind == BlockKind.If || block.Kind == BlockKind.Unless) {  		block.EnterElse ();  	}  	else {  		throw new FormatException ("Invalid else usage");  	}  }  else {  	stack.Peek ().Add (token.Kind == TokenKind.UnescapedExpression ? (Node)new UnescapedExpressionNode (expr) : new ExpressionNode (expr));  }  
Magic Number,NHandlebars,Handlebars,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Handlebars.cs,CompileNode,The following statement contains a magic number: if (expr [0] == '/')// end of block   {  	if (stack.Count < 2)  		throw new FormatException ("Unbalanced blocks");  	var type = expr.Substring (1).Trim ();  	var block = stack.Pop ();  	if (block.Type != type)  		throw new FormatException ("Unmatched close tag");  	stack.Peek ().Add (block.ToNode ());  }  else if (expr == "else") {  	var block = stack.Peek ();  	if (block.Kind == BlockKind.If || block.Kind == BlockKind.Unless) {  		block.EnterElse ();  	}  	else {  		throw new FormatException ("Invalid else usage");  	}  }  else {  	stack.Peek ().Add (token.Kind == TokenKind.UnescapedExpression ? (Node)new UnescapedExpressionNode (expr) : new ExpressionNode (expr));  }  
Magic Number,NHandlebars,Handlebars,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Handlebars.cs,CompileNode,The following statement contains a magic number: if (stack.Count < 2)  	throw new FormatException ("Unbalanced blocks");  
Magic Number,NHandlebars,Handlebars,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Handlebars.cs,Scan,The following statement contains a magic number: while (c >= 0) {  	int n = 0;  	while (c == '{' && n < 3) {  		c = input.Read ();  		n++;  	}  	if (n > 1) {  		if (token.Length > 0) {  			var val = token.ToString ();  			token.Length = 0;  			yield return new Token (TokenKind.Text' val);  		}  		// read expression  		while (c >= 0) {  			var k = 0;  			while (c == '}' && k < n) {  				c = input.Read ();  				k++;  			}  			if (k == n) {  				if (token.Length == 0)  					throw new FormatException ("Empty expression");  				var kind = n == 3 ? TokenKind.UnescapedExpression : TokenKind.Expression;  				var expr = token.ToString ();  				n = 0;  				token.Length = 0;  				yield return new Token (kind' expr);  				break;  			}  			token.Append ((char)c);  			c = input.Read ();  		}  		if (token.Length > 0)  			throw new FormatException ("Expression is not closed");  	}  	for (var i = 0; i < n; i++)  		token.Append ('{');  	if (c >= 0 && c != '{') {  		token.Append ((char)c);  		c = input.Read ();  	}  }  
Magic Number,NHandlebars,Handlebars,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Handlebars.cs,Scan,The following statement contains a magic number: while (c >= 0) {  	int n = 0;  	while (c == '{' && n < 3) {  		c = input.Read ();  		n++;  	}  	if (n > 1) {  		if (token.Length > 0) {  			var val = token.ToString ();  			token.Length = 0;  			yield return new Token (TokenKind.Text' val);  		}  		// read expression  		while (c >= 0) {  			var k = 0;  			while (c == '}' && k < n) {  				c = input.Read ();  				k++;  			}  			if (k == n) {  				if (token.Length == 0)  					throw new FormatException ("Empty expression");  				var kind = n == 3 ? TokenKind.UnescapedExpression : TokenKind.Expression;  				var expr = token.ToString ();  				n = 0;  				token.Length = 0;  				yield return new Token (kind' expr);  				break;  			}  			token.Append ((char)c);  			c = input.Read ();  		}  		if (token.Length > 0)  			throw new FormatException ("Expression is not closed");  	}  	for (var i = 0; i < n; i++)  		token.Append ('{');  	if (c >= 0 && c != '{') {  		token.Append ((char)c);  		c = input.Read ();  	}  }  
Magic Number,NHandlebars,Handlebars,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Handlebars.cs,Scan,The following statement contains a magic number: while (c == '{' && n < 3) {  	c = input.Read ();  	n++;  }  
Magic Number,NHandlebars,Handlebars,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Handlebars.cs,Scan,The following statement contains a magic number: if (n > 1) {  	if (token.Length > 0) {  		var val = token.ToString ();  		token.Length = 0;  		yield return new Token (TokenKind.Text' val);  	}  	// read expression  	while (c >= 0) {  		var k = 0;  		while (c == '}' && k < n) {  			c = input.Read ();  			k++;  		}  		if (k == n) {  			if (token.Length == 0)  				throw new FormatException ("Empty expression");  			var kind = n == 3 ? TokenKind.UnescapedExpression : TokenKind.Expression;  			var expr = token.ToString ();  			n = 0;  			token.Length = 0;  			yield return new Token (kind' expr);  			break;  		}  		token.Append ((char)c);  		c = input.Read ();  	}  	if (token.Length > 0)  		throw new FormatException ("Expression is not closed");  }  
Magic Number,NHandlebars,Handlebars,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Handlebars.cs,Scan,The following statement contains a magic number: while (c >= 0) {  	var k = 0;  	while (c == '}' && k < n) {  		c = input.Read ();  		k++;  	}  	if (k == n) {  		if (token.Length == 0)  			throw new FormatException ("Empty expression");  		var kind = n == 3 ? TokenKind.UnescapedExpression : TokenKind.Expression;  		var expr = token.ToString ();  		n = 0;  		token.Length = 0;  		yield return new Token (kind' expr);  		break;  	}  	token.Append ((char)c);  	c = input.Read ();  }  
Magic Number,NHandlebars,Handlebars,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Handlebars.cs,Scan,The following statement contains a magic number: if (k == n) {  	if (token.Length == 0)  		throw new FormatException ("Empty expression");  	var kind = n == 3 ? TokenKind.UnescapedExpression : TokenKind.Expression;  	var expr = token.ToString ();  	n = 0;  	token.Length = 0;  	yield return new Token (kind' expr);  	break;  }  
Magic Number,NHandlebars.Tests,ContextTests,C:\repos\sergeyt_NHandlebars\src\NHandlebars\Tests\ContextTests.cs,CheckValueCaching,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	Assert.AreEqual (name' context.GetValue ("Name"));  	Assert.AreEqual (1' root.NameCalls);  }  
