Implementation smell,Namespace,Class,File,Method,Description
Long Method,WCell.PacketAnalysis,SimpleTypes,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\SimpleTypes.cs,InitReaders,The method has 171 lines of code.
Long Method,WCell.PacketAnalysis.Logs,KSnifferLogConverter,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Logs\KSnifferLogConverter.cs,Extract,The method has 126 lines of code.
Complex Method,WCell.PacketAnalysis.Logs,KSnifferLogConverter,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Logs\KSnifferLogConverter.cs,Extract,Cyclomatic complexity of the method is 14
Complex Method,WCell.PacketAnalysis.Updates,MovementBlock,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\MovementBlock.cs,Dump,Cyclomatic complexity of the method is 17
Complex Method,WCell.PacketAnalysis.Updates,MovementBlockHelper,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\MovementBlock.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,WCell.PacketAnalysis.Updates,MovementBlockHelper,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\MovementBlock.cs,ParseLiving,Cyclomatic complexity of the method is 9
Complex Method,WCell.PacketAnalysis.Updates,UpdateBlock,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateBlock.cs,Dump,Cyclomatic complexity of the method is 9
Long Parameter List,WCell.PacketAnalysis.Updates,ParsedUpdatePacket,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\ParsedUpdatePacket.cs,Dump,The method has 5 parameters. Parameters: timeStamp' packetContent' isSingleBlock' writer' isCompressed
Long Statement,WCell.PacketAnalysis,ListPacketSegmentStructure,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\PacketSegments.cs,Init,The length of the statement  "				throw new Exception("List " + Name + " in Defintion for " + def.PacketIds.ToString("' ") + " has no structure defined."); " is 121.
Long Statement,WCell.PacketAnalysis,ListPacketSegmentStructure,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\PacketSegments.cs,Init,The length of the statement  "						throw new ArgumentException("Length-Segment \"" + LengthSegmentName + "\" for ListSegment " + this + " does not exist."); " is 121.
Long Statement,WCell.PacketAnalysis,ListPacketSegmentStructure,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\PacketSegments.cs,ParseLengthExpr,The length of the statement  "				throw new Exception("Length Expression for List " + this + " does not contain variable replacement (" + LenExprVarName + ")"); " is 126.
Long Statement,WCell.PacketAnalysis,SwitchPacketSegmentStructure,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\PacketSegments.cs,Init,The length of the statement  "					throw new ArgumentException("CompareWith-Segment \"" + ReferenceName + "\" for SwitchSegment " + this + " does not exist."); " is 124.
Long Statement,WCell.PacketAnalysis,SwitchCase,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\SwitchCase.cs,Matches,The length of the statement  "				throw new Exception(string.Format("Switch {0} could not match its value '{1}' against parsed value: {2}"' m_switch' m_value' value)' e); " is 136.
Long Statement,WCell.PacketAnalysis.Samples,GOSerializer,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Samples\GOSerializer.cs,HandlePacket,The length of the statement  "				"VALUES ({0}' {1}' {2}' {3})"' pac["Entry"].UIntValue' pac["Type"].UIntValue' pac["DisplayId"].UIntValue' pac["Name"].StringValue); " is 131.
Long Statement,WCell.PacketAnalysis.Samples,MixedPASample,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Samples\MixedSample.cs,Main,The length of the statement  "			// Parse all files in the dir "/logs" using the KSniffer-log-format (with all of a packet's content in a single line) and  " is 121.
Long Statement,WCell.PacketAnalysis.Samples,MixedPASample,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Samples\MixedSample.cs,HandleGOQueryPackets,The length of the statement  "				"VALUES ({0}' {1}' {2}' {3})"' pac["Entry"].UIntValue' pac["Type"].UIntValue' pac["DisplayId"].UIntValue' pac["Name"].StringValue); " is 131.
Long Statement,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupPlayerRenderers,The length of the statement  "				strVal = string.Format("{0} (#{1}{2}) - {3}/{4}"' skillId' (int)skillId' abandonable ? " /CanAbandon" : ""' current' max); " is 122.
Complex Conditional,WCell.PacketAnalysis.Logs,KSnifferLogConverter,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Logs\KSnifferLogConverter.cs,Extract,The conditional expression  "((line.Length > 5 && line[start = 4] == ':') || (start = line.IndexOf('|')) >= 0) &&  							   (end = line.IndexOf('|'' start += 1)) > 0"  is complex.
Magic Number,WCell.PacketAnalysis,PacketParser,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\PacketParser.cs,ParseCompressedMove,The following statement contains a magic number: try  			{  				Compression.DecompressZLib(packet.ReadBytes(packet.RemainingLength)' arr);    				ushort length = arr[0];  				RealmServerOpCode opCode = (RealmServerOpCode) (arr[1] | arr[2] << 8);  				return new DisposableRealmPacketIn(segment' 1' length' length - 3' opCode);  			}  			catch (Exception e)  			{  				LogUtil.ErrorException(e' "Unable to parse packet: " + packet);  			}
Magic Number,WCell.PacketAnalysis,PacketParser,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\PacketParser.cs,ParseCompressedMove,The following statement contains a magic number: try  			{  				Compression.DecompressZLib(packet.ReadBytes(packet.RemainingLength)' arr);    				ushort length = arr[0];  				RealmServerOpCode opCode = (RealmServerOpCode) (arr[1] | arr[2] << 8);  				return new DisposableRealmPacketIn(segment' 1' length' length - 3' opCode);  			}  			catch (Exception e)  			{  				LogUtil.ErrorException(e' "Unable to parse packet: " + packet);  			}
Magic Number,WCell.PacketAnalysis,PacketParser,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\PacketParser.cs,ParseCompressedMove,The following statement contains a magic number: try  			{  				Compression.DecompressZLib(packet.ReadBytes(packet.RemainingLength)' arr);    				ushort length = arr[0];  				RealmServerOpCode opCode = (RealmServerOpCode) (arr[1] | arr[2] << 8);  				return new DisposableRealmPacketIn(segment' 1' length' length - 3' opCode);  			}  			catch (Exception e)  			{  				LogUtil.ErrorException(e' "Unable to parse packet: " + packet);  			}
Magic Number,WCell.PacketAnalysis,SimpleTypes,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\SimpleTypes.cs,InitReaders,The following statement contains a magic number: SimpleReaders[(uint)SimpleType.UShort] = (segment' parser) => {  				if (parser.Packet.RemainingLength < 2)  				{  					WarnLength(SimpleType.UShort' segment' parser);  					return (ushort)0;  				}  				return parser.Packet.ReadUInt16();  			};
Magic Number,WCell.PacketAnalysis,SimpleTypes,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\SimpleTypes.cs,InitReaders,The following statement contains a magic number: SimpleReaders[(uint)SimpleType.Short] = (segment' parser) => {  				if (parser.Packet.RemainingLength < 2)  				{  					WarnLength(SimpleType.Short' segment' parser);  					return (short)0;  				}  				return parser.Packet.ReadInt16();  			};
Magic Number,WCell.PacketAnalysis,SimpleTypes,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\SimpleTypes.cs,InitReaders,The following statement contains a magic number: SimpleReaders[(uint)SimpleType.UInt] = (segment' parser) => {  				if (parser.Packet.RemainingLength < 4)  				{  					WarnLength(SimpleType.UInt' segment' parser);  					return (uint)0;  				}  				return parser.Packet.ReadUInt32();  			};
Magic Number,WCell.PacketAnalysis,SimpleTypes,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\SimpleTypes.cs,InitReaders,The following statement contains a magic number: SimpleReaders[(uint)SimpleType.Int] = (segment' parser) => {  				if (parser.Packet.RemainingLength < 4)  				{  					WarnLength(SimpleType.Int' segment' parser);  					return 0;  				}  				return parser.Packet.ReadInt32();  			};
Magic Number,WCell.PacketAnalysis,SimpleTypes,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\SimpleTypes.cs,InitReaders,The following statement contains a magic number: SimpleReaders[(uint)SimpleType.ULong] = (segment' parser) => {  				if (parser.Packet.RemainingLength < 8)  				{  					WarnLength(SimpleType.ULong' segment' parser);  					return 0ul;  				}  				return parser.Packet.ReadUInt64();  			};
Magic Number,WCell.PacketAnalysis,SimpleTypes,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\SimpleTypes.cs,InitReaders,The following statement contains a magic number: SimpleReaders[(uint)SimpleType.Long] = (segment' parser) => {  				if (parser.Packet.RemainingLength < 8)  				{  					WarnLength(SimpleType.Long' segment' parser);  					return 0L;  				}  				return parser.Packet.ReadInt64();  			};
Magic Number,WCell.PacketAnalysis,SimpleTypes,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\SimpleTypes.cs,InitReaders,The following statement contains a magic number: SimpleReaders[(uint)SimpleType.Float] = (segment' parser) => {  				if (parser.Packet.RemainingLength < 4)  				{  					WarnLength(SimpleType.Float' segment' parser);  					return 0f;  				}  				return parser.Packet.ReadFloat();  			};
Magic Number,WCell.PacketAnalysis,SimpleTypes,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\SimpleTypes.cs,InitReaders,The following statement contains a magic number: SimpleReaders[(uint)SimpleType.Vector3] = (segment' parser) => {  				if (parser.Packet.RemainingLength < 12)  				{  					WarnLength(SimpleType.Vector3' segment' parser);  					return new Vector3();  				}  				return new Vector3(  					parser.Packet.ReadFloat()'  					parser.Packet.ReadFloat()'  					parser.Packet.ReadFloat());  			};
Magic Number,WCell.PacketAnalysis,SimpleTypes,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\SimpleTypes.cs,InitReaders,The following statement contains a magic number: SimpleReaders[(uint)SimpleType.PackedVector3] = (segment' parser) => {  				if (parser.Packet.RemainingLength < 4)  				{  					WarnLength(SimpleType.PackedVector3' segment' parser);  					return new Vector3();  				}                  return Vector3.FromPacked(parser.Packet.ReadUInt32());              };
Magic Number,WCell.PacketAnalysis,SimpleTypes,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\SimpleTypes.cs,InitReaders,The following statement contains a magic number: SimpleReaders[(uint)SimpleType.Vector4] = (segment' parser) => {  				if (parser.Packet.RemainingLength < 16)  				{  					WarnLength(SimpleType.Vector4' segment' parser);  					return new Vector4();  				}  				return new Vector4(  					parser.Packet.ReadFloat()'  					parser.Packet.ReadFloat()'  					parser.Packet.ReadFloat()'  					parser.Packet.ReadFloat());  			};
Magic Number,WCell.PacketAnalysis,SimpleTypes,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\SimpleTypes.cs,InitReaders,The following statement contains a magic number: SimpleReaders[(uint)SimpleType.Guid] = (segment' parser) => {  				if (parser.Packet.RemainingLength < 8)  				{  					WarnLength(SimpleType.Guid' segment' parser);  					return EntityId.Zero;  				}  				return new EntityId(parser.Packet.ReadUInt64());  			};
Magic Number,WCell.PacketAnalysis,SimpleTypes,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\SimpleTypes.cs,InitReaders,The following statement contains a magic number: SimpleReaders[(uint)SimpleType.PascalStringUShort] = (segment' parser) => {  				if (parser.Packet.RemainingLength < 2)  				{  					WarnLength(SimpleType.PascalStringUShort' segment' parser);  					return "";  				}  				return parser.Packet.ReadPascalStringUShort();  			};
Magic Number,WCell.PacketAnalysis,SimpleTypes,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\SimpleTypes.cs,InitReaders,The following statement contains a magic number: SimpleReaders[(uint)SimpleType.PascalStringUInt] = (segment' parser) => {  				if (parser.Packet.RemainingLength < 4)  				{  					WarnLength(SimpleType.PascalStringUInt' segment' parser);  					return "";  				}  				return parser.Packet.ReadPascalStringUInt();  			};
Magic Number,WCell.PacketAnalysis,SimpleTypes,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\SimpleTypes.cs,InitReaders,The following statement contains a magic number: SimpleReaders[(int) SimpleType.PackedDate] =  		        (segment' parser) =>  		            {  		                if (parser.Packet.RemainingLength < 4)  						{  							WarnLength(SimpleType.PackedDate' segment' parser);  		                    return "";  		                }  		                return  		                    Utility.GetGameTimeToDateTime(  		                        parser.Packet.ReadUInt32()).  		                        ToString();  		            };
Magic Number,WCell.PacketAnalysis,SimpleTypes,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\SimpleTypes.cs,InitReaders,The following statement contains a magic number: SimpleReaders[(int) SimpleType.UnixTime] =  		        (segment' parser) =>  		            {  		                if (parser.Packet.RemainingLength < 4)  		                {  		                	WarnLength(SimpleType.UnixTime' segment' parser);  		                    return "";  		                }  		                return Utility.GetDateTimeFromUnixTime(parser.Packet.ReadUInt32()).ToString();  		            };
Magic Number,WCell.PacketAnalysis,SimpleTypes,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\SimpleTypes.cs,InitStringReaders,The following statement contains a magic number: SimpleStringReaders[(uint)SimpleType.Guid] = (str) => {  				ulong val;  				if (str.StartsWith("0x"))  				{  					val = ulong.Parse(str.Substring(2)' System.Globalization.NumberStyles.HexNumber);  				}  				else  				{  					val = ulong.Parse(str);  				}  				return new EntityId(val);  			};
Magic Number,WCell.PacketAnalysis,PacketAnalyzer,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\PacketAnalyzer.cs,RegisterDefintion,The following statement contains a magic number: foreach (var id in def.PacketIds)  			{  				var arr = PacketDefinitions[(uint)id.Service];  				if (def.Sender == PacketSender.Any || def.Sender == PacketSender.Client)  				{  					arr[id.RawId * 2] = def;  				}  				if (def.Sender == PacketSender.Any || def.Sender == PacketSender.Server)  				{  					arr[id.RawId * 2 + 1] = def;  				}  				s_defCount++;  			}
Magic Number,WCell.PacketAnalysis,PacketAnalyzer,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\PacketAnalyzer.cs,RegisterDefintion,The following statement contains a magic number: foreach (var id in def.PacketIds)  			{  				var arr = PacketDefinitions[(uint)id.Service];  				if (def.Sender == PacketSender.Any || def.Sender == PacketSender.Client)  				{  					arr[id.RawId * 2] = def;  				}  				if (def.Sender == PacketSender.Any || def.Sender == PacketSender.Server)  				{  					arr[id.RawId * 2 + 1] = def;  				}  				s_defCount++;  			}
Magic Number,WCell.PacketAnalysis,PacketAnalyzer,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\PacketAnalyzer.cs,GetDefinition,The following statement contains a magic number: if (rawId * 2 >= arr.Length)  			{  				//Debugger.Break();  				log.Error("Invalid Packet definition: " + rawId);  				return arr[0];  			}
Magic Number,WCell.PacketAnalysis,PacketAnalyzer,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\PacketAnalyzer.cs,GetDefinition,The following statement contains a magic number: if (sender == PacketSender.Any || sender == PacketSender.Client)  			{  				return arr[rawId * 2];  			}
Magic Number,WCell.PacketAnalysis,PacketAnalyzer,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\PacketAnalyzer.cs,GetDefinition,The following statement contains a magic number: return arr[rawId * 2 + 1];
Magic Number,WCell.PacketAnalysis,PacketAnalyzer,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\PacketAnalyzer.cs,LoadDefinitions,The following statement contains a magic number: PacketDefinitions[(int)ServiceType.Authentication] = new PacketDefinition[((uint)AuthServerOpCode.Maximum * 2) + 1];
Magic Number,WCell.PacketAnalysis,PacketAnalyzer,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\PacketAnalyzer.cs,LoadDefinitions,The following statement contains a magic number: PacketDefinitions[(int)ServiceType.Realm] = new PacketDefinition[((uint)RealmServerOpCode.Maximum * 2) + 1];
Magic Number,WCell.PacketAnalysis.Logs,KSnifferLogConverter,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Logs\KSnifferLogConverter.cs,Extract,The following statement contains a magic number: for (lineNo = 0; lineNo < lines.Length; lineNo++)  			{  				try  				{  					var timestamp = DateTime.Now;  					var line = lines[lineNo];    					if (line.Length == 0 || (singleLinePackets && !line.StartsWith("{")))  					{  						continue;  					}    					// find sender  					if (line.IndexOf("SERVER"' StringComparison.InvariantCultureIgnoreCase) > -1)  					{  						sender = PacketSender.Server;  					}  					else  					{  						sender = PacketSender.Client;  					}    					// find opcode and timestamp  					var match = Regex.Match(line' @"\(0x(.{4})\)");  					if (match.Success)  					{  						var timestampIndex = line.IndexOf("TimeStamp"' StringComparison.InvariantCultureIgnoreCase) + timeStrLen;  						if (timestampIndex >= 0)  						{  							uint x;  							while (!uint.TryParse(line[timestampIndex].ToString()' out x))  							{  								timestampIndex++;  							}  							var timestampStr = line.Substring(timestampIndex).Trim();  							long seconds;  							if (long.TryParse(timestampStr' out seconds))  							{  								timestamp = Utility.GetUTCTimeMillis(seconds);  							}  						}  						opCode = (RealmServerOpCode)Int32.Parse(match.Groups[1].Value' NumberStyles.HexNumber);  					}  					else  					{  						match = Regex.Match(line' @"\(([^\)]+)\)");  						if (match.Success)  						{  							opCode = (RealmServerOpCode)Enum.Parse(typeof(RealmServerOpCode)' match.Groups[1].Value);  						}  						else  						{  							Console.WriteLine("Could not parse Packet Header: " + line);  							continue;  						}  					}    					lineNo++; // one line for the packet-header    					var opcodeHandler = handlers.Where(handler => handler.Validator(opCode)).FirstOrDefault();  					var buildPacket = opcodeHandler != null;    					var sb = new StringBuilder();  					if (singleLinePackets)  					{  						if (buildPacket)  						{  							sb.Append(lines[lineNo]);  						}  						lineNo++;  					}  					else  					{  						// skip the column count  						while (string.IsNullOrEmpty(line = lines[lineNo]) ||  								line.StartsWith("|00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F") ||  								line.StartsWith("|--------------------------------"))  						{  							lineNo++;  						}    						int start' end;  						while (((line.Length > 5 && line[start = 4] == ':') || (start = line.IndexOf('|')) >= 0) &&  							   (end = line.IndexOf('|'' start += 1)) > 0)  						{  							++lineNo;  							if (buildPacket)  							{  								end -= 1;    								var str = line.Substring(start' end - start);    								var fillerStart = str.IndexOf("--");  								if (fillerStart >= 0)  								{  									str = str.Substring(0' fillerStart - 1);  								}    								sb.Append(str + " ");  								while ((line = lines[lineNo]).Length == 0)	// skip empty lines  								{  									++lineNo;  								}	  							}  						}  					}    					if (buildPacket)  					{  						if (!Enum.IsDefined(typeof(RealmServerOpCode)' opCode))  						{  							log.Warn("Packet at line #{0} had undefined Opcode: " + opCode' lineNo);  							continue;  						}    						var bytes = UpdateFieldsUtil.ParseBytes(sb.ToString()' true);  						var packet = DisposableRealmPacketIn.Create(opCode' bytes);  						if (packet != null)  						{  							if (packet.PacketId == RealmServerOpCode.SMSG_COMPRESSED_UPDATE_OBJECT && packet.Length < 20)  							{  								throw new Exception("Format error - Did you specify singlePackets although its not single-line packets?");  							}    							opcodeHandler.PacketParser(new ParsablePacketInfo(packet' sender' timestamp));  						}  					}  				}  				catch (Exception e)  				{  					LogUtil.ErrorException(e' "Error in KSniffer-log at line {0} ({1})"' lineNo' opCode);  				}  			}
Magic Number,WCell.PacketAnalysis.Logs,KSnifferLogConverter,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Logs\KSnifferLogConverter.cs,Extract,The following statement contains a magic number: for (lineNo = 0; lineNo < lines.Length; lineNo++)  			{  				try  				{  					var timestamp = DateTime.Now;  					var line = lines[lineNo];    					if (line.Length == 0 || (singleLinePackets && !line.StartsWith("{")))  					{  						continue;  					}    					// find sender  					if (line.IndexOf("SERVER"' StringComparison.InvariantCultureIgnoreCase) > -1)  					{  						sender = PacketSender.Server;  					}  					else  					{  						sender = PacketSender.Client;  					}    					// find opcode and timestamp  					var match = Regex.Match(line' @"\(0x(.{4})\)");  					if (match.Success)  					{  						var timestampIndex = line.IndexOf("TimeStamp"' StringComparison.InvariantCultureIgnoreCase) + timeStrLen;  						if (timestampIndex >= 0)  						{  							uint x;  							while (!uint.TryParse(line[timestampIndex].ToString()' out x))  							{  								timestampIndex++;  							}  							var timestampStr = line.Substring(timestampIndex).Trim();  							long seconds;  							if (long.TryParse(timestampStr' out seconds))  							{  								timestamp = Utility.GetUTCTimeMillis(seconds);  							}  						}  						opCode = (RealmServerOpCode)Int32.Parse(match.Groups[1].Value' NumberStyles.HexNumber);  					}  					else  					{  						match = Regex.Match(line' @"\(([^\)]+)\)");  						if (match.Success)  						{  							opCode = (RealmServerOpCode)Enum.Parse(typeof(RealmServerOpCode)' match.Groups[1].Value);  						}  						else  						{  							Console.WriteLine("Could not parse Packet Header: " + line);  							continue;  						}  					}    					lineNo++; // one line for the packet-header    					var opcodeHandler = handlers.Where(handler => handler.Validator(opCode)).FirstOrDefault();  					var buildPacket = opcodeHandler != null;    					var sb = new StringBuilder();  					if (singleLinePackets)  					{  						if (buildPacket)  						{  							sb.Append(lines[lineNo]);  						}  						lineNo++;  					}  					else  					{  						// skip the column count  						while (string.IsNullOrEmpty(line = lines[lineNo]) ||  								line.StartsWith("|00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F") ||  								line.StartsWith("|--------------------------------"))  						{  							lineNo++;  						}    						int start' end;  						while (((line.Length > 5 && line[start = 4] == ':') || (start = line.IndexOf('|')) >= 0) &&  							   (end = line.IndexOf('|'' start += 1)) > 0)  						{  							++lineNo;  							if (buildPacket)  							{  								end -= 1;    								var str = line.Substring(start' end - start);    								var fillerStart = str.IndexOf("--");  								if (fillerStart >= 0)  								{  									str = str.Substring(0' fillerStart - 1);  								}    								sb.Append(str + " ");  								while ((line = lines[lineNo]).Length == 0)	// skip empty lines  								{  									++lineNo;  								}	  							}  						}  					}    					if (buildPacket)  					{  						if (!Enum.IsDefined(typeof(RealmServerOpCode)' opCode))  						{  							log.Warn("Packet at line #{0} had undefined Opcode: " + opCode' lineNo);  							continue;  						}    						var bytes = UpdateFieldsUtil.ParseBytes(sb.ToString()' true);  						var packet = DisposableRealmPacketIn.Create(opCode' bytes);  						if (packet != null)  						{  							if (packet.PacketId == RealmServerOpCode.SMSG_COMPRESSED_UPDATE_OBJECT && packet.Length < 20)  							{  								throw new Exception("Format error - Did you specify singlePackets although its not single-line packets?");  							}    							opcodeHandler.PacketParser(new ParsablePacketInfo(packet' sender' timestamp));  						}  					}  				}  				catch (Exception e)  				{  					LogUtil.ErrorException(e' "Error in KSniffer-log at line {0} ({1})"' lineNo' opCode);  				}  			}
Magic Number,WCell.PacketAnalysis.Logs,KSnifferLogConverter,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Logs\KSnifferLogConverter.cs,Extract,The following statement contains a magic number: for (lineNo = 0; lineNo < lines.Length; lineNo++)  			{  				try  				{  					var timestamp = DateTime.Now;  					var line = lines[lineNo];    					if (line.Length == 0 || (singleLinePackets && !line.StartsWith("{")))  					{  						continue;  					}    					// find sender  					if (line.IndexOf("SERVER"' StringComparison.InvariantCultureIgnoreCase) > -1)  					{  						sender = PacketSender.Server;  					}  					else  					{  						sender = PacketSender.Client;  					}    					// find opcode and timestamp  					var match = Regex.Match(line' @"\(0x(.{4})\)");  					if (match.Success)  					{  						var timestampIndex = line.IndexOf("TimeStamp"' StringComparison.InvariantCultureIgnoreCase) + timeStrLen;  						if (timestampIndex >= 0)  						{  							uint x;  							while (!uint.TryParse(line[timestampIndex].ToString()' out x))  							{  								timestampIndex++;  							}  							var timestampStr = line.Substring(timestampIndex).Trim();  							long seconds;  							if (long.TryParse(timestampStr' out seconds))  							{  								timestamp = Utility.GetUTCTimeMillis(seconds);  							}  						}  						opCode = (RealmServerOpCode)Int32.Parse(match.Groups[1].Value' NumberStyles.HexNumber);  					}  					else  					{  						match = Regex.Match(line' @"\(([^\)]+)\)");  						if (match.Success)  						{  							opCode = (RealmServerOpCode)Enum.Parse(typeof(RealmServerOpCode)' match.Groups[1].Value);  						}  						else  						{  							Console.WriteLine("Could not parse Packet Header: " + line);  							continue;  						}  					}    					lineNo++; // one line for the packet-header    					var opcodeHandler = handlers.Where(handler => handler.Validator(opCode)).FirstOrDefault();  					var buildPacket = opcodeHandler != null;    					var sb = new StringBuilder();  					if (singleLinePackets)  					{  						if (buildPacket)  						{  							sb.Append(lines[lineNo]);  						}  						lineNo++;  					}  					else  					{  						// skip the column count  						while (string.IsNullOrEmpty(line = lines[lineNo]) ||  								line.StartsWith("|00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F") ||  								line.StartsWith("|--------------------------------"))  						{  							lineNo++;  						}    						int start' end;  						while (((line.Length > 5 && line[start = 4] == ':') || (start = line.IndexOf('|')) >= 0) &&  							   (end = line.IndexOf('|'' start += 1)) > 0)  						{  							++lineNo;  							if (buildPacket)  							{  								end -= 1;    								var str = line.Substring(start' end - start);    								var fillerStart = str.IndexOf("--");  								if (fillerStart >= 0)  								{  									str = str.Substring(0' fillerStart - 1);  								}    								sb.Append(str + " ");  								while ((line = lines[lineNo]).Length == 0)	// skip empty lines  								{  									++lineNo;  								}	  							}  						}  					}    					if (buildPacket)  					{  						if (!Enum.IsDefined(typeof(RealmServerOpCode)' opCode))  						{  							log.Warn("Packet at line #{0} had undefined Opcode: " + opCode' lineNo);  							continue;  						}    						var bytes = UpdateFieldsUtil.ParseBytes(sb.ToString()' true);  						var packet = DisposableRealmPacketIn.Create(opCode' bytes);  						if (packet != null)  						{  							if (packet.PacketId == RealmServerOpCode.SMSG_COMPRESSED_UPDATE_OBJECT && packet.Length < 20)  							{  								throw new Exception("Format error - Did you specify singlePackets although its not single-line packets?");  							}    							opcodeHandler.PacketParser(new ParsablePacketInfo(packet' sender' timestamp));  						}  					}  				}  				catch (Exception e)  				{  					LogUtil.ErrorException(e' "Error in KSniffer-log at line {0} ({1})"' lineNo' opCode);  				}  			}
Magic Number,WCell.PacketAnalysis.Logs,WlpConverter,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Logs\WlpConverter.cs,Extract,The following statement contains a magic number: using (var reader = new BinaryReader(file))  			{  				reader.ReadBytes(3);  				reader.ReadBytes(2);  				reader.ReadByte();  				reader.ReadInt16();  				reader.ReadBytes(4);  				reader.ReadBytes(20);  				reader.ReadBytes(64);    				while (reader.BaseStream.Position != reader.BaseStream.Length)  				{  					var direction = reader.ReadByte() != 0xFF ? PacketSender.Client : PacketSender.Server;  					var time = Utility.GetUTCTimeSeconds(reader.ReadUInt32());  					var length = reader.ReadInt32();  					var opcode = (RealmServerOpCode) (direction == PacketSender.Client  					                                  	? reader.ReadInt32()  					                                  	: reader.ReadInt16());    					var data = reader.ReadBytes(length - (direction == PacketSender.Client ? 4 : 2));    					var opcodeHandlers = handlers.Where(handler => handler.Validator(opcode)).ToList();  					if (opcodeHandlers.Count() <= 0)  						continue;    					if (!Enum.IsDefined(typeof (RealmServerOpCode)' opcode))  					{  						Log.Warn("Packet had undefined Opcode: " + opcode);  						continue;  					}    					var rawPacket = DisposableRealmPacketIn.Create(opcode' data);  					if (rawPacket != null)  						foreach (var handler in opcodeHandlers)  							handler.PacketParser(new ParsablePacketInfo(rawPacket' direction' time));  				}  			}
Magic Number,WCell.PacketAnalysis.Logs,WlpConverter,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Logs\WlpConverter.cs,Extract,The following statement contains a magic number: using (var reader = new BinaryReader(file))  			{  				reader.ReadBytes(3);  				reader.ReadBytes(2);  				reader.ReadByte();  				reader.ReadInt16();  				reader.ReadBytes(4);  				reader.ReadBytes(20);  				reader.ReadBytes(64);    				while (reader.BaseStream.Position != reader.BaseStream.Length)  				{  					var direction = reader.ReadByte() != 0xFF ? PacketSender.Client : PacketSender.Server;  					var time = Utility.GetUTCTimeSeconds(reader.ReadUInt32());  					var length = reader.ReadInt32();  					var opcode = (RealmServerOpCode) (direction == PacketSender.Client  					                                  	? reader.ReadInt32()  					                                  	: reader.ReadInt16());    					var data = reader.ReadBytes(length - (direction == PacketSender.Client ? 4 : 2));    					var opcodeHandlers = handlers.Where(handler => handler.Validator(opcode)).ToList();  					if (opcodeHandlers.Count() <= 0)  						continue;    					if (!Enum.IsDefined(typeof (RealmServerOpCode)' opcode))  					{  						Log.Warn("Packet had undefined Opcode: " + opcode);  						continue;  					}    					var rawPacket = DisposableRealmPacketIn.Create(opcode' data);  					if (rawPacket != null)  						foreach (var handler in opcodeHandlers)  							handler.PacketParser(new ParsablePacketInfo(rawPacket' direction' time));  				}  			}
Magic Number,WCell.PacketAnalysis.Logs,WlpConverter,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Logs\WlpConverter.cs,Extract,The following statement contains a magic number: using (var reader = new BinaryReader(file))  			{  				reader.ReadBytes(3);  				reader.ReadBytes(2);  				reader.ReadByte();  				reader.ReadInt16();  				reader.ReadBytes(4);  				reader.ReadBytes(20);  				reader.ReadBytes(64);    				while (reader.BaseStream.Position != reader.BaseStream.Length)  				{  					var direction = reader.ReadByte() != 0xFF ? PacketSender.Client : PacketSender.Server;  					var time = Utility.GetUTCTimeSeconds(reader.ReadUInt32());  					var length = reader.ReadInt32();  					var opcode = (RealmServerOpCode) (direction == PacketSender.Client  					                                  	? reader.ReadInt32()  					                                  	: reader.ReadInt16());    					var data = reader.ReadBytes(length - (direction == PacketSender.Client ? 4 : 2));    					var opcodeHandlers = handlers.Where(handler => handler.Validator(opcode)).ToList();  					if (opcodeHandlers.Count() <= 0)  						continue;    					if (!Enum.IsDefined(typeof (RealmServerOpCode)' opcode))  					{  						Log.Warn("Packet had undefined Opcode: " + opcode);  						continue;  					}    					var rawPacket = DisposableRealmPacketIn.Create(opcode' data);  					if (rawPacket != null)  						foreach (var handler in opcodeHandlers)  							handler.PacketParser(new ParsablePacketInfo(rawPacket' direction' time));  				}  			}
Magic Number,WCell.PacketAnalysis.Logs,WlpConverter,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Logs\WlpConverter.cs,Extract,The following statement contains a magic number: using (var reader = new BinaryReader(file))  			{  				reader.ReadBytes(3);  				reader.ReadBytes(2);  				reader.ReadByte();  				reader.ReadInt16();  				reader.ReadBytes(4);  				reader.ReadBytes(20);  				reader.ReadBytes(64);    				while (reader.BaseStream.Position != reader.BaseStream.Length)  				{  					var direction = reader.ReadByte() != 0xFF ? PacketSender.Client : PacketSender.Server;  					var time = Utility.GetUTCTimeSeconds(reader.ReadUInt32());  					var length = reader.ReadInt32();  					var opcode = (RealmServerOpCode) (direction == PacketSender.Client  					                                  	? reader.ReadInt32()  					                                  	: reader.ReadInt16());    					var data = reader.ReadBytes(length - (direction == PacketSender.Client ? 4 : 2));    					var opcodeHandlers = handlers.Where(handler => handler.Validator(opcode)).ToList();  					if (opcodeHandlers.Count() <= 0)  						continue;    					if (!Enum.IsDefined(typeof (RealmServerOpCode)' opcode))  					{  						Log.Warn("Packet had undefined Opcode: " + opcode);  						continue;  					}    					var rawPacket = DisposableRealmPacketIn.Create(opcode' data);  					if (rawPacket != null)  						foreach (var handler in opcodeHandlers)  							handler.PacketParser(new ParsablePacketInfo(rawPacket' direction' time));  				}  			}
Magic Number,WCell.PacketAnalysis.Logs,WlpConverter,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Logs\WlpConverter.cs,Extract,The following statement contains a magic number: using (var reader = new BinaryReader(file))  			{  				reader.ReadBytes(3);  				reader.ReadBytes(2);  				reader.ReadByte();  				reader.ReadInt16();  				reader.ReadBytes(4);  				reader.ReadBytes(20);  				reader.ReadBytes(64);    				while (reader.BaseStream.Position != reader.BaseStream.Length)  				{  					var direction = reader.ReadByte() != 0xFF ? PacketSender.Client : PacketSender.Server;  					var time = Utility.GetUTCTimeSeconds(reader.ReadUInt32());  					var length = reader.ReadInt32();  					var opcode = (RealmServerOpCode) (direction == PacketSender.Client  					                                  	? reader.ReadInt32()  					                                  	: reader.ReadInt16());    					var data = reader.ReadBytes(length - (direction == PacketSender.Client ? 4 : 2));    					var opcodeHandlers = handlers.Where(handler => handler.Validator(opcode)).ToList();  					if (opcodeHandlers.Count() <= 0)  						continue;    					if (!Enum.IsDefined(typeof (RealmServerOpCode)' opcode))  					{  						Log.Warn("Packet had undefined Opcode: " + opcode);  						continue;  					}    					var rawPacket = DisposableRealmPacketIn.Create(opcode' data);  					if (rawPacket != null)  						foreach (var handler in opcodeHandlers)  							handler.PacketParser(new ParsablePacketInfo(rawPacket' direction' time));  				}  			}
Magic Number,WCell.PacketAnalysis.Logs,WlpConverter,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Logs\WlpConverter.cs,Extract,The following statement contains a magic number: using (var reader = new BinaryReader(file))  			{  				reader.ReadBytes(3);  				reader.ReadBytes(2);  				reader.ReadByte();  				reader.ReadInt16();  				reader.ReadBytes(4);  				reader.ReadBytes(20);  				reader.ReadBytes(64);    				while (reader.BaseStream.Position != reader.BaseStream.Length)  				{  					var direction = reader.ReadByte() != 0xFF ? PacketSender.Client : PacketSender.Server;  					var time = Utility.GetUTCTimeSeconds(reader.ReadUInt32());  					var length = reader.ReadInt32();  					var opcode = (RealmServerOpCode) (direction == PacketSender.Client  					                                  	? reader.ReadInt32()  					                                  	: reader.ReadInt16());    					var data = reader.ReadBytes(length - (direction == PacketSender.Client ? 4 : 2));    					var opcodeHandlers = handlers.Where(handler => handler.Validator(opcode)).ToList();  					if (opcodeHandlers.Count() <= 0)  						continue;    					if (!Enum.IsDefined(typeof (RealmServerOpCode)' opcode))  					{  						Log.Warn("Packet had undefined Opcode: " + opcode);  						continue;  					}    					var rawPacket = DisposableRealmPacketIn.Create(opcode' data);  					if (rawPacket != null)  						foreach (var handler in opcodeHandlers)  							handler.PacketParser(new ParsablePacketInfo(rawPacket' direction' time));  				}  			}
Magic Number,WCell.PacketAnalysis.Logs,WlpConverter,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Logs\WlpConverter.cs,Extract,The following statement contains a magic number: using (var reader = new BinaryReader(file))  			{  				reader.ReadBytes(3);  				reader.ReadBytes(2);  				reader.ReadByte();  				reader.ReadInt16();  				reader.ReadBytes(4);  				reader.ReadBytes(20);  				reader.ReadBytes(64);    				while (reader.BaseStream.Position != reader.BaseStream.Length)  				{  					var direction = reader.ReadByte() != 0xFF ? PacketSender.Client : PacketSender.Server;  					var time = Utility.GetUTCTimeSeconds(reader.ReadUInt32());  					var length = reader.ReadInt32();  					var opcode = (RealmServerOpCode) (direction == PacketSender.Client  					                                  	? reader.ReadInt32()  					                                  	: reader.ReadInt16());    					var data = reader.ReadBytes(length - (direction == PacketSender.Client ? 4 : 2));    					var opcodeHandlers = handlers.Where(handler => handler.Validator(opcode)).ToList();  					if (opcodeHandlers.Count() <= 0)  						continue;    					if (!Enum.IsDefined(typeof (RealmServerOpCode)' opcode))  					{  						Log.Warn("Packet had undefined Opcode: " + opcode);  						continue;  					}    					var rawPacket = DisposableRealmPacketIn.Create(opcode' data);  					if (rawPacket != null)  						foreach (var handler in opcodeHandlers)  							handler.PacketParser(new ParsablePacketInfo(rawPacket' direction' time));  				}  			}
Magic Number,WCell.PacketAnalysis.Samples,TrainerInfoExtractor,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Samples\TrainerInfoExtractor.cs,HandleTrainerList,The following statement contains a magic number: foreach (var spellSegment in spells)  			{  				var id = (SpellId)spellSegment["Spell"].UIntValue;  				var moneyCost = spellSegment["MoneyCost"].IntValue;  				var talentCost = spellSegment["TalentCost"].IntValue;  				var profCost = spellSegment["ProfessionPointCost"].IntValue;  				int reqLevel = spellSegment["RequiredLevel"].ByteValue;  				var reqSkill = (SkillId)spellSegment["RequiredSkill"].UIntValue;  				var reqSkillValue = spellSegment["RequiredSkillLevel"].IntValue;  				var reqSpells = new SpellId[3];    				reqSpells[0] = (SpellId)spellSegment["RequiredSpellId1"].UIntValue;  				reqSpells[1] = (SpellId)spellSegment["RequiredSpellId2"].UIntValue;  				reqSpells[2] = (SpellId)spellSegment["RequiredSpellId3"].UIntValue;    				// TODO: Calc exact money cost' depending on the faction  			}
Magic Number,WCell.PacketAnalysis.Samples,TrainerInfoExtractor,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Samples\TrainerInfoExtractor.cs,HandleTrainerList,The following statement contains a magic number: foreach (var spellSegment in spells)  			{  				var id = (SpellId)spellSegment["Spell"].UIntValue;  				var moneyCost = spellSegment["MoneyCost"].IntValue;  				var talentCost = spellSegment["TalentCost"].IntValue;  				var profCost = spellSegment["ProfessionPointCost"].IntValue;  				int reqLevel = spellSegment["RequiredLevel"].ByteValue;  				var reqSkill = (SkillId)spellSegment["RequiredSkill"].UIntValue;  				var reqSkillValue = spellSegment["RequiredSkillLevel"].IntValue;  				var reqSpells = new SpellId[3];    				reqSpells[0] = (SpellId)spellSegment["RequiredSpellId1"].UIntValue;  				reqSpells[1] = (SpellId)spellSegment["RequiredSpellId2"].UIntValue;  				reqSpells[2] = (SpellId)spellSegment["RequiredSpellId3"].UIntValue;    				// TODO: Calc exact money cost' depending on the faction  			}
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderer,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderer.cs,Render,The following statement contains a magic number: var fieldNum = index / 4;
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,GetSizeof,The following statement contains a magic number: if (//type == UpdateFieldType.UInt64 ||   				type == UpdateFieldType.Guid)  			{  				return 2;  			}
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,RenderTwoInt16,The following statement contains a magic number: byte[] rawField = values.GetBytes(field.Index' 4);
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,RenderTwoInt16,The following statement contains a magic number: var val2 = BitConverter.ToUInt16(rawField' 2);
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,RenderByteArray,The following statement contains a magic number: var bytes = values.GetBytes(field.Index' 4);
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,RenderByteArray,The following statement contains a magic number: string[] s = new string[4];
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,RenderUInt64,The following statement contains a magic number: return 2;
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,RenderGUID,The following statement contains a magic number: return 2;
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupUnitRenderers,The following statement contains a magic number: CustomRenderers[UnitFields.BYTES_0] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				var str = new List<string>();  				str.Add("Race: " + (RaceId)val[0]);  				str.Add("Class: " + (ClassId)val[1]);  				str.Add("Gender: " + (GenderType)val[2]);  				str.Add("PowerType: " + (PowerType)val[3]);  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupUnitRenderers,The following statement contains a magic number: CustomRenderers[UnitFields.BYTES_0] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				var str = new List<string>();  				str.Add("Race: " + (RaceId)val[0]);  				str.Add("Class: " + (ClassId)val[1]);  				str.Add("Gender: " + (GenderType)val[2]);  				str.Add("PowerType: " + (PowerType)val[3]);  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupUnitRenderers,The following statement contains a magic number: CustomRenderers[UnitFields.BYTES_0] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				var str = new List<string>();  				str.Add("Race: " + (RaceId)val[0]);  				str.Add("Class: " + (ClassId)val[1]);  				str.Add("Gender: " + (GenderType)val[2]);  				str.Add("PowerType: " + (PowerType)val[3]);  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupUnitRenderers,The following statement contains a magic number: CustomRenderers[UnitFields.BYTES_1] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				var str = new List<string>();  				str.Add("StandState: " + (StandState)val[0]);  				str.Add("PetTalentPoints: " + val[1]);                  str.Add("StateFlag: " + (StateFlag)val[2]);  				str.Add("UFB_1_4: " + val[3]);  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupUnitRenderers,The following statement contains a magic number: CustomRenderers[UnitFields.BYTES_1] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				var str = new List<string>();  				str.Add("StandState: " + (StandState)val[0]);  				str.Add("PetTalentPoints: " + val[1]);                  str.Add("StateFlag: " + (StateFlag)val[2]);  				str.Add("UFB_1_4: " + val[3]);  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupUnitRenderers,The following statement contains a magic number: CustomRenderers[UnitFields.BYTES_1] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				var str = new List<string>();  				str.Add("StandState: " + (StandState)val[0]);  				str.Add("PetTalentPoints: " + val[1]);                  str.Add("StateFlag: " + (StateFlag)val[2]);  				str.Add("UFB_1_4: " + val[3]);  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupUnitRenderers,The following statement contains a magic number: CustomRenderers[UnitFields.BYTES_2] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				var str = new List<string>();  				str.Add("SheathType: " + (SheathType)val[0]);  				str.Add("PVP State: " + (PvPState)val[1]);  				str.Add("PetState: " + (PetState)val[2]);                  str.Add("ShapeShift: " + (ShapeshiftForm)val[3]);  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupUnitRenderers,The following statement contains a magic number: CustomRenderers[UnitFields.BYTES_2] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				var str = new List<string>();  				str.Add("SheathType: " + (SheathType)val[0]);  				str.Add("PVP State: " + (PvPState)val[1]);  				str.Add("PetState: " + (PetState)val[2]);                  str.Add("ShapeShift: " + (ShapeshiftForm)val[3]);  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupUnitRenderers,The following statement contains a magic number: CustomRenderers[UnitFields.BYTES_2] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				var str = new List<string>();  				str.Add("SheathType: " + (SheathType)val[0]);  				str.Add("PVP State: " + (PvPState)val[1]);  				str.Add("PetState: " + (PetState)val[2]);                  str.Add("ShapeShift: " + (ShapeshiftForm)val[3]);  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupPlayerRenderers,The following statement contains a magic number: CustomRenderers[PlayerFields.BYTES] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				List<string> str = new List<string>();    				str.Add("Skin: " + val[0]);  				str.Add("Face: " + val[1]);  				str.Add("HairStyle: " + val[2]);  				str.Add("HairColor: " + val[3]);  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupPlayerRenderers,The following statement contains a magic number: CustomRenderers[PlayerFields.BYTES] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				List<string> str = new List<string>();    				str.Add("Skin: " + val[0]);  				str.Add("Face: " + val[1]);  				str.Add("HairStyle: " + val[2]);  				str.Add("HairColor: " + val[3]);  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupPlayerRenderers,The following statement contains a magic number: CustomRenderers[PlayerFields.BYTES] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				List<string> str = new List<string>();    				str.Add("Skin: " + val[0]);  				str.Add("Face: " + val[1]);  				str.Add("HairStyle: " + val[2]);  				str.Add("HairColor: " + val[3]);  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupPlayerRenderers,The following statement contains a magic number: CustomRenderers[PlayerFields.BYTES_2] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				List<string> str = new List<string>();    				str.Add("FacialHair: " + val[0]);  				str.Add("PB2_2: " + val[1]);  				str.Add("Bankbag Slots: " + val[2]);  				str.Add("RestState: " + (RestState)val[3]);  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupPlayerRenderers,The following statement contains a magic number: CustomRenderers[PlayerFields.BYTES_2] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				List<string> str = new List<string>();    				str.Add("FacialHair: " + val[0]);  				str.Add("PB2_2: " + val[1]);  				str.Add("Bankbag Slots: " + val[2]);  				str.Add("RestState: " + (RestState)val[3]);  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupPlayerRenderers,The following statement contains a magic number: CustomRenderers[PlayerFields.BYTES_2] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				List<string> str = new List<string>();    				str.Add("FacialHair: " + val[0]);  				str.Add("PB2_2: " + val[1]);  				str.Add("Bankbag Slots: " + val[2]);  				str.Add("RestState: " + (RestState)val[3]);  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupPlayerRenderers,The following statement contains a magic number: CustomRenderers[PlayerFields.BYTES_3] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				List<string> str = new List<string>();    				str.Add("Gender: " + (GenderType)val[0]);  				str.Add("Drunkeness: " + val[1]);  				str.Add("PB3_3: " + val[2]);  				str.Add("PvPRank: " + val[3]);  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupPlayerRenderers,The following statement contains a magic number: CustomRenderers[PlayerFields.BYTES_3] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				List<string> str = new List<string>();    				str.Add("Gender: " + (GenderType)val[0]);  				str.Add("Drunkeness: " + val[1]);  				str.Add("PB3_3: " + val[2]);  				str.Add("PvPRank: " + val[3]);  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupPlayerRenderers,The following statement contains a magic number: CustomRenderers[PlayerFields.BYTES_3] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				List<string> str = new List<string>();    				str.Add("Gender: " + (GenderType)val[0]);  				str.Add("Drunkeness: " + val[1]);  				str.Add("PB3_3: " + val[2]);  				str.Add("PvPRank: " + val[3]);  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupPlayerRenderers,The following statement contains a magic number: CustomRenderers[PlayerFields.PLAYER_FIELD_BYTES] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				List<string> str = new List<string>();    				str.Add("PFB_1: " + val[0]);  				str.Add("PFB_2: " + val[1]);  				str.Add("PFB_3: " + val[2]);  				str.Add("PFB_4: " + val[3]);  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupPlayerRenderers,The following statement contains a magic number: CustomRenderers[PlayerFields.PLAYER_FIELD_BYTES] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				List<string> str = new List<string>();    				str.Add("PFB_1: " + val[0]);  				str.Add("PFB_2: " + val[1]);  				str.Add("PFB_3: " + val[2]);  				str.Add("PFB_4: " + val[3]);  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupPlayerRenderers,The following statement contains a magic number: CustomRenderers[PlayerFields.PLAYER_FIELD_BYTES] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				List<string> str = new List<string>();    				str.Add("PFB_1: " + val[0]);  				str.Add("PFB_2: " + val[1]);  				str.Add("PFB_3: " + val[2]);  				str.Add("PFB_4: " + val[3]);  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupPlayerRenderers,The following statement contains a magic number: CustomRenderers[PlayerFields.PLAYER_FIELD_BYTES2] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				var str = new List<string>  				          	{  				          		"PFB2_1: " + val[0]'   								"PFB2_2: " + val[1]'   								"PFB2_3: " + val[2]'   								"PFB2_4: " + val[3]  				          	};    				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupPlayerRenderers,The following statement contains a magic number: CustomRenderers[PlayerFields.PLAYER_FIELD_BYTES2] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				var str = new List<string>  				          	{  				          		"PFB2_1: " + val[0]'   								"PFB2_2: " + val[1]'   								"PFB2_3: " + val[2]'   								"PFB2_4: " + val[3]  				          	};    				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupPlayerRenderers,The following statement contains a magic number: CustomRenderers[PlayerFields.PLAYER_FIELD_BYTES2] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				var str = new List<string>  				          	{  				          		"PFB2_1: " + val[0]'   								"PFB2_2: " + val[1]'   								"PFB2_3: " + val[2]'   								"PFB2_4: " + val[3]  				          	};    				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupPlayerRenderers,The following statement contains a magic number: SetRenderer(PlayerFields.SKILL_INFO_1_1' 384' (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var i = renderer.Index * 4;  				var skillId = (SkillId)value.GetUInt16AtByte(i);  				var abandonable = value.GetUInt16AtByte(i += 2) != 0;  				var current = value.GetUInt16AtByte(i += 2);  				var max = value.GetUInt16AtByte(i);    				strVal = string.Format("{0} (#{1}{2}) - {3}/{4}"' skillId' (int)skillId' abandonable ? " /CanAbandon" : ""' current' max);  				return 2;  			});
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupPlayerRenderers,The following statement contains a magic number: SetRenderer(PlayerFields.SKILL_INFO_1_1' 384' (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var i = renderer.Index * 4;  				var skillId = (SkillId)value.GetUInt16AtByte(i);  				var abandonable = value.GetUInt16AtByte(i += 2) != 0;  				var current = value.GetUInt16AtByte(i += 2);  				var max = value.GetUInt16AtByte(i);    				strVal = string.Format("{0} (#{1}{2}) - {3}/{4}"' skillId' (int)skillId' abandonable ? " /CanAbandon" : ""' current' max);  				return 2;  			});
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupPlayerRenderers,The following statement contains a magic number: SetRenderer(PlayerFields.SKILL_INFO_1_1' 384' (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var i = renderer.Index * 4;  				var skillId = (SkillId)value.GetUInt16AtByte(i);  				var abandonable = value.GetUInt16AtByte(i += 2) != 0;  				var current = value.GetUInt16AtByte(i += 2);  				var max = value.GetUInt16AtByte(i);    				strVal = string.Format("{0} (#{1}{2}) - {3}/{4}"' skillId' (int)skillId' abandonable ? " /CanAbandon" : ""' current' max);  				return 2;  			});
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupPlayerRenderers,The following statement contains a magic number: SetRenderer(PlayerFields.SKILL_INFO_1_1' 384' (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var i = renderer.Index * 4;  				var skillId = (SkillId)value.GetUInt16AtByte(i);  				var abandonable = value.GetUInt16AtByte(i += 2) != 0;  				var current = value.GetUInt16AtByte(i += 2);  				var max = value.GetUInt16AtByte(i);    				strVal = string.Format("{0} (#{1}{2}) - {3}/{4}"' skillId' (int)skillId' abandonable ? " /CanAbandon" : ""' current' max);  				return 2;  			});
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupPlayerRenderers,The following statement contains a magic number: SetRenderer(PlayerFields.SKILL_INFO_1_1' 384' (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var i = renderer.Index * 4;  				var skillId = (SkillId)value.GetUInt16AtByte(i);  				var abandonable = value.GetUInt16AtByte(i += 2) != 0;  				var current = value.GetUInt16AtByte(i += 2);  				var max = value.GetUInt16AtByte(i);    				strVal = string.Format("{0} (#{1}{2}) - {3}/{4}"' skillId' (int)skillId' abandonable ? " /CanAbandon" : ""' current' max);  				return 2;  			});
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupGameObjectRenderers,The following statement contains a magic number: CustomRenderers[GameObjectFields.BYTES_1] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				var str = new List<string>                            	{                            		"State: " + val[0]'                            		"TypeId: " + (GameObjectType) val[1]'                            		"ArtKit: " + val[2]'                            		"AnimProgress: " + val[3]                            	};  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupGameObjectRenderers,The following statement contains a magic number: CustomRenderers[GameObjectFields.BYTES_1] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				var str = new List<string>                            	{                            		"State: " + val[0]'                            		"TypeId: " + (GameObjectType) val[1]'                            		"ArtKit: " + val[2]'                            		"AnimProgress: " + val[3]                            	};  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,FieldRenderUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\FieldRenderUtil.cs,SetupGameObjectRenderers,The following statement contains a magic number: CustomRenderers[GameObjectFields.BYTES_1] = (FieldRenderInfo renderer' byte[] value' out string strVal) => {  				var val = value.GetBytes(renderer.Index' 4);  				var str = new List<string>                            	{                            		"State: " + val[0]'                            		"TypeId: " + (GameObjectType) val[1]'                            		"ArtKit: " + val[2]'                            		"AnimProgress: " + val[3]                            	};  				strVal = str.ToString("' ");  				return 1;  			};
Magic Number,WCell.PacketAnalysis.Updates,MovementBlockHelper,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\MovementBlock.cs,Parse,The following statement contains a magic number: if (block.UpdateFlags.HasFlag(UpdateFlags.Flag_0x10))  			{  				block.Flag0x10 = block.Update.ReadUInt();  				block.Update.packet.index -= 4;  				block.Flag0x10F = block.Update.ReadFloat();  			}
Magic Number,WCell.PacketAnalysis.Updates,ParsedUpdatePacket,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\ParsedUpdatePacket.cs,ParsedUpdatePacket,The following statement contains a magic number: if (SingleBlock)  			{  				m_blocks = new UpdateBlock[1];  			}  			else  			{  				var count = Bytes.GetUInt32(0);  				m_blocks = new UpdateBlock[count];  				index = 4;  			}
Magic Number,WCell.PacketAnalysis.Updates,UpdateBlock,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateBlock.cs,GetByte,The following statement contains a magic number: var i = (uint)id.RawId * 4;
Magic Number,WCell.PacketAnalysis.Updates,UpdateBlock,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateBlock.cs,IsSet,The following statement contains a magic number: var i = (uint)id.RawId * 4;
Magic Number,WCell.PacketAnalysis.Updates,UpdateBlock,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateBlock.cs,ReadUShort,The following statement contains a magic number: for (int j = 0; j < sizeof(ushort); j++)  			{  				x = (ushort)(x + (packet.Bytes[packet.index++] << (j * 8)));  			}
Magic Number,WCell.PacketAnalysis.Updates,UpdateBlock,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateBlock.cs,ReadUIntAmount,The following statement contains a magic number: for (int j = 0; j < amount; j++)  			{  				x = x + (uint)(packet.Bytes[packet.index++] << (j * 8));  			}
Magic Number,WCell.PacketAnalysis.Updates,UpdateBlock,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateBlock.cs,ReadIntAmount,The following statement contains a magic number: for (int j = 0; j < amount; j++)  			{  				x = x + (packet.Bytes[packet.index++] << (j * 8));  			}
Magic Number,WCell.PacketAnalysis.Updates,UpdateBlock,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateBlock.cs,ReadUInt,The following statement contains a magic number: for (int j = 0; j < sizeof(uint); j++)  			{  				x = x + (uint)(packet.Bytes[packet.index++] << (j * 8));  			}
Magic Number,WCell.PacketAnalysis.Updates,UpdateBlock,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateBlock.cs,ReadInt,The following statement contains a magic number: for (int j = 0; j < sizeof(int); j++)  			{  				x = x + (packet.Bytes[packet.index++] << (j * 8));  			}
Magic Number,WCell.PacketAnalysis.Updates,UpdateBlock,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateBlock.cs,ReadUInt,The following statement contains a magic number: for (int j = 0; j < sizeof(uint); j++)  			{  				x = x + (uint)(packet.Bytes[index++] << (j * 8));  			}
Magic Number,WCell.PacketAnalysis.Updates,UpdateBlock,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateBlock.cs,ReadInt,The following statement contains a magic number: for (int j = 0; j < sizeof(int); j++)  			{  				x = x + (packet.Bytes[index++] << (j * 8));  			}
Magic Number,WCell.PacketAnalysis.Updates,UpdateBlock,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateBlock.cs,ReadUInt64,The following statement contains a magic number: for (int i = 0; i < sizeof(ulong); i++)  			{  				x += (ulong)(packet.Bytes[packet.index++] << (i * 8));  			}
Magic Number,WCell.PacketAnalysis.Updates,UpdateBlock,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateBlock.cs,ReadEntityId,The following statement contains a magic number: return new EntityId(ReadBytes(8));
Magic Number,WCell.PacketAnalysis.Updates,UpdateBlock,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateBlock.cs,ReadValues,The following statement contains a magic number: var values = ReadMask(blockCount' 4' "Values"' (index' bytes) =>  			{  				for (int i = 0; i < 4; i++)  				{  					bytes[index + i] = ReadByte();  				}  				list.Add(index);  			});
Magic Number,WCell.PacketAnalysis.Updates,UpdateBlock,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateBlock.cs,ReadValues,The following statement contains a magic number: var values = ReadMask(blockCount' 4' "Values"' (index' bytes) =>  			{  				for (int i = 0; i < 4; i++)  				{  					bytes[index + i] = ReadByte();  				}  				list.Add(index);  			});
Magic Number,WCell.PacketAnalysis.Updates,UpdateBlock,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateBlock.cs,ReadMask,The following statement contains a magic number: var fieldCount = 8 * valueSize;
Magic Number,WCell.PacketAnalysis.Updates,UpdateBlock,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateBlock.cs,Dump,The following statement contains a magic number: if (Values != null)  			{  				writer.WriteLine(indent + "Fields:");  				var renderer = FieldRenderUtil.GetRenderer(EntityId.ObjectType);  				// use the exact if its available  				if (m_movement != null)  				{  					renderer = FieldRenderUtil.GetRenderer(m_movement.ObjectTypeId); //  				}    				writer.IndentLevel++;  				uint size = 0;  				for (uint i = 0; i < SetIndices.Length; i++)  				{  					var index = SetIndices[i];  					size = renderer.Render(index' Values' writer);  					while (size > 1 && SetIndices.Length > i + 1)  					{  						// check if we can skip the next indices  						var next = SetIndices[i + 1];  						if (next != index + 4)  						{  							break;  						}    						size--;  						i++;  					}  				}  				writer.IndentLevel--;  			}
Magic Number,WCell.PacketAnalysis.Updates,UpdateBlock,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateBlock.cs,ToString,The following statement contains a magic number: return index + " " + Type + (Values != null ? " (Values: " + Values.Length / 4 + ")" : "");
Magic Number,WCell.PacketAnalysis.Updates,UpdateFieldsUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateFieldsUtil.cs,Decompress,The following statement contains a magic number: byte[] compdata = new byte[bytes.Length - 4];
Magic Number,WCell.PacketAnalysis.Updates,UpdateFieldsUtil,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateFieldsUtil.cs,Decompress,The following statement contains a magic number: Array.Copy(bytes' 4' compdata' 0' compdata.Length);
Magic Number,WCell.PacketAnalysis.Updates,HexStringConverter,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateFieldsUtil.cs,ToByteArray,The following statement contains a magic number: byte[] bytes = new byte[length / 2];
Magic Number,WCell.PacketAnalysis.Updates,HexStringConverter,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateFieldsUtil.cs,ToByteArray,The following statement contains a magic number: for (int i = 0; i < length; i += 2)  				{  					bytes[i / 2] = Convert.ToByte(hexString.Substring(i' 2)' 16);  				}
Magic Number,WCell.PacketAnalysis.Updates,HexStringConverter,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateFieldsUtil.cs,ToByteArray,The following statement contains a magic number: for (int i = 0; i < length; i += 2)  				{  					bytes[i / 2] = Convert.ToByte(hexString.Substring(i' 2)' 16);  				}
Magic Number,WCell.PacketAnalysis.Updates,HexStringConverter,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateFieldsUtil.cs,ToByteArray,The following statement contains a magic number: for (int i = 0; i < length; i += 2)  				{  					bytes[i / 2] = Convert.ToByte(hexString.Substring(i' 2)' 16);  				}
Magic Number,WCell.PacketAnalysis.Updates,HexStringConverter,C:\repos\WCell_WCell\Utilities\WCell.PacketAnalyzer\Updates\UpdateFieldsUtil.cs,ToByteArray,The following statement contains a magic number: for (int i = 0; i < length; i += 2)  				{  					bytes[i / 2] = Convert.ToByte(hexString.Substring(i' 2)' 16);  				}
