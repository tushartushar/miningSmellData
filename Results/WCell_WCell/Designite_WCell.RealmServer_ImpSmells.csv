Implementation smell,Namespace,Class,File,Method,Description
Long Method,WCell.RealmServer.Commands,ListPlayersCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\MiscCommands.cs,Process,The method has 139 lines of code.
Long Method,WCell.RealmServer.Gossips,GossipMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Gossips\GossipMgr.cs,AddDefaultGossipOptions,The method has 109 lines of code.
Long Method,WCell.RealmServer.Handlers,GroupHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GroupHandler.cs,SendPartyMemberStatsInternal,The method has 126 lines of code.
Long Method,WCell.RealmServer.Handlers,CombatLogHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatLogHandler.cs,SendSpellLogExecute,The method has 115 lines of code.
Long Method,WCell.RealmServer.Handlers,MailHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MailHandler.cs,SendMailList,The method has 153 lines of code.
Long Method,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,HandlePetitionBuy,The method has 121 lines of code.
Long Method,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendCharEnum,The method has 124 lines of code.
Long Method,WCell.RealmServer.Handlers,ItemHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ItemHandler.cs,SendItemQueryResponse,The method has 120 lines of code.
Long Method,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ReadMovementInfo,The method has 125 lines of code.
Long Method,WCell.RealmServer.Handlers,QuestHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QuestHandler.cs,SendQuestQueryResponse,The method has 139 lines of code.
Long Method,WCell.RealmServer.Handlers,QuestHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QuestHandler.cs,SendDetails,The method has 102 lines of code.
Long Method,WCell.RealmServer.Spells.Auras,AuraHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AuraHandler.cs,AuraHandler,The method has 181 lines of code.
Long Method,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,CheckCasterConstraints,The method has 136 lines of code.
Long Method,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,Init2,The method has 233 lines of code.
Long Method,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,Dump,The method has 335 lines of code.
Long Method,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,Impact,The method has 122 lines of code.
Long Method,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The method has 108 lines of code.
Long Method,WCell.RealmServer.Spells,SpellLines,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellLines.cs,SetupSpellLines,The method has 5864 lines of code.
Long Method,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,Convert,The method has 186 lines of code.
Long Method,WCell.RealmServer.Spells,SpellEffect,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellEffect.Fields.cs,Init2,The method has 148 lines of code.
Long Method,WCell.RealmServer.Spells,SpellEffect,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellEffect.Fields.cs,DumpInfo,The method has 110 lines of code.
Long Method,WCell.RealmServer.Spells.Targeting,DefaultTargetDefinitions,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Targeting\DefaultTargetDefinitions.cs,InitTargetHandlers,The method has 179 lines of code.
Long Method,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,Load,The method has 114 lines of code.
Long Method,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,InitializeCharacter,The method has 146 lines of code.
Long Method,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,SaveNow,The method has 150 lines of code.
Long Method,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,UpdateEnvironment,The method has 110 lines of code.
Long Method,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,SetEntry,The method has 129 lines of code.
Long Method,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,DealSpellDamage,The method has 112 lines of code.
Long Method,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,CombatTick,The method has 159 lines of code.
Long Method,WCell.RealmServer.Global,Map,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Map.cs,MapUpdateCallback,The method has 130 lines of code.
Long Method,WCell.RealmServer.Items,ItemTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\ItemEvents.cs,InitializeTemplate,The method has 154 lines of code.
Long Method,WCell.RealmServer.Items,ItemTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\ItemEvents.cs,Dump,The method has 263 lines of code.
Long Method,WCell.RealmServer.Items,PlayerInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\PlayerInventory.cs,TrySwap,The method has 154 lines of code.
Long Method,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,DoAttack,The method has 102 lines of code.
Long Method,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,FinalizeDataHolder,The method has 116 lines of code.
Long Method,WCell.RealmServer.NPCs,NPCEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\NPCEvents.cs,FinalizeDataHolder,The method has 183 lines of code.
Long Method,WCell.RealmServer.NPCs,NPCEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\NPCEvents.cs,Dump,The method has 137 lines of code.
Long Method,WCell.RealmServer.Guilds,GuildBank,C:\repos\WCell_WCell\Services\WCell.RealmServer\Guilds\GuildBank.cs,SwapItemsManualBankToChar,The method has 123 lines of code.
Long Method,WCell.RealmServer.Taxi,TaxiMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Taxi\TaxiMgr.cs,Initialize,The method has 107 lines of code.
Complex Method,WCell.RealmServer.Achievements,ExploreAreaAchievementCriteriaEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCriteria.cs,OnUpdate,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Commands,BattlegroundCreateCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\BattlegroundCommand.cs,Process,Cyclomatic complexity of the method is 11
Complex Method,WCell.RealmServer.Commands,RealmCommandHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\RealmCommandHandler.cs,HandleCommand,Cyclomatic complexity of the method is 12
Complex Method,WCell.RealmServer.Commands,InstanceCreateCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\InstanceCommand.cs,Process,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Commands,ListPlayersCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\MiscCommands.cs,Process,Cyclomatic complexity of the method is 22
Complex Method,WCell.RealmServer.Commands,LearnCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\SkillCommands.cs,Process,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Commands,SpellGetCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\SpellCommands.cs,RetrieveSpells,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Commands,SpellAddCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\SpellCommands.cs,Process,Cyclomatic complexity of the method is 12
Complex Method,WCell.RealmServer.Gossips,GossipMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Gossips\GossipMgr.cs,AddDefaultGossipOptions,Cyclomatic complexity of the method is 16
Complex Method,WCell.RealmServer.Handlers,GuildHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GuildHandler.cs,CreateGuildRosterPacket,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,HandleCharCreateRequest,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,IsNameValid,Cyclomatic complexity of the method is 15
Complex Method,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ReadMovementInfo,Cyclomatic complexity of the method is 15
Complex Method,WCell.RealmServer.Instances,GlobalInstanceTimer,C:\repos\WCell_WCell\Services\WCell.RealmServer\Instances\GlobalInstanceTimer.cs,LoadTimers,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Instances,InstanceMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Instances\InstanceMgr.cs,EnterInstance,Cyclomatic complexity of the method is 11
Complex Method,WCell.RealmServer.NPCs.Trainers,TrainerSpellEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Trainers\TrainerSpellEntry.cs,GetTrainerSpellState,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Spells.Auras,PlayerAuraCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\PlayerAuraCollection.cs,OnCasted,Cyclomatic complexity of the method is 14
Complex Method,WCell.RealmServer.Spells.Auras,AreaAura,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\AreaAura.cs,RevalidateTargetsAndApply,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Spells.Effects,DispelEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\Dispel.cs,Apply,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Spells.Effects,OpenLockEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\OpenLock.cs,Initialize,Cyclomatic complexity of the method is 16
Complex Method,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,CheckCasterConstraints,Cyclomatic complexity of the method is 16
Complex Method,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,CheckItemRestrictions,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,CheckGeneralItemRestrictions,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,CheckValidTarget,Cyclomatic complexity of the method is 15
Complex Method,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,CanProcBeTriggeredBy,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,Initialize,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,Init2,Cyclomatic complexity of the method is 20
Complex Method,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,Dump,Cyclomatic complexity of the method is 83
Complex Method,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,PrepAuras,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,CreateAuras,Cyclomatic complexity of the method is 14
Complex Method,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,PrePerform,Cyclomatic complexity of the method is 13
Complex Method,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,Impact,Cyclomatic complexity of the method is 23
Complex Method,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,OnUnitCasted,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,ReadTargetInfoFromPacket,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,Prepare,Cyclomatic complexity of the method is 14
Complex Method,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,CheckPlayerCast,Cyclomatic complexity of the method is 13
Complex Method,WCell.RealmServer.Spells,ProcEventHelper,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellProcEventEntry.cs,PatchSpell,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Spells,RuneSet,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\RuneSet.cs,ConsumeRunes,Cyclomatic complexity of the method is 12
Complex Method,WCell.RealmServer.Spells,SpellChannel,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\SpellChannel.cs,Tick,Cyclomatic complexity of the method is 12
Complex Method,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,WriteTargets,Cyclomatic complexity of the method is 12
Complex Method,WCell.RealmServer.Spells,PlayerSpellCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\PlayerSpellCollection.cs,AddSpellRequirements,Cyclomatic complexity of the method is 13
Complex Method,WCell.RealmServer.Spells,PlayerSpellCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\PlayerSpellCollection.cs,IsReady,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Spells,PlayerSpellCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\PlayerSpellCollection.cs,AddCooldown,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,Convert,Cyclomatic complexity of the method is 18
Complex Method,WCell.RealmServer.Spells,SpellEffect,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellEffect.Fields.cs,Init2,Cyclomatic complexity of the method is 14
Complex Method,WCell.RealmServer.Spells,SpellEffect,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellEffect.Fields.cs,DumpInfo,Cyclomatic complexity of the method is 23
Complex Method,WCell.RealmServer.Spells.Targeting,DefaultTargetAdders,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Targeting\DefaultTargetAdders.cs,AddSelection,Cyclomatic complexity of the method is 11
Complex Method,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,OnMove,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,OnOutOfRange,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,SetZoneExplored,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,InitGlyphsForLevel,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,LoadPets,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,InitializeCharacter,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,SaveNow,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,DoFinishLogout,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,Dispose,Cyclomatic complexity of the method is 13
Complex Method,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,UpdateEnvironment,Cyclomatic complexity of the method is 13
Complex Method,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,SetEntry,Cyclomatic complexity of the method is 16
Complex Method,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,UpdateUnitState,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,OnDeath,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,OnEnterMap,Cyclomatic complexity of the method is 13
Complex Method,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,Heal,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,CanSee,Cyclomatic complexity of the method is 14
Complex Method,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,HandleStealthDetection,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,Proc,Cyclomatic complexity of the method is 12
Complex Method,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,GetWeaponDamage,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,DealSpellDamage,Cyclomatic complexity of the method is 13
Complex Method,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,CombatTick,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,OnDamageAction,Cyclomatic complexity of the method is 15
Complex Method,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,DoRawDamage,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,IncMechanicCount,Cyclomatic complexity of the method is 14
Complex Method,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,DecMechanicCount,Cyclomatic complexity of the method is 12
Complex Method,WCell.RealmServer.Entities,GameTables,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\GameTables.cs,LoadGtDBCs,Cyclomatic complexity of the method is 11
Complex Method,WCell.RealmServer.Entities,WorldObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\WorldObject.Update.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Entities,WorldObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\WorldObject.Update.cs,IsFriendlyWith,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Entities,WorldObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\WorldObject.Update.cs,IsHostileWith,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Entities,WorldObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\WorldObject.Update.cs,MayAttack,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Entities,WorldObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\WorldObject.Update.cs,IsAlliedWith,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Entities,Item,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Item.Update.cs,ApplyGems,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Entities,Item,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Item.Update.cs,ApplyRandomEnchants,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Entities,Item,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Item.Update.cs,OnEquip,Cyclomatic complexity of the method is 21
Complex Method,WCell.RealmServer.Entities,Item,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Item.Update.cs,OnUnEquip,Cyclomatic complexity of the method is 21
Complex Method,WCell.RealmServer.GameObjects.Spawns,GOSpawnEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\Spawns\GOSpawnEntry.cs,FinalizeDataHolder,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Global,WorldEventMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldEventMgr.cs,ApplyEventNPCData,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Global,WorldEventMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldEventMgr.cs,ResetEventNPCData,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Global,Map,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Map.cs,SpawnMap,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Global,Map,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Map.cs,MapUpdateCallback,Cyclomatic complexity of the method is 12
Complex Method,WCell.RealmServer.Global,Map,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Map.cs,AddObjectNow,Cyclomatic complexity of the method is 11
Complex Method,WCell.RealmServer.Global,Zone,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Zone.cs,UpdateChannels,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Global,ZoneSpacePartitionNode,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\ZoneSpacePartitionNode.cs,GetEntitiesInArea,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Global,ZoneSpacePartitionNode,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\ZoneSpacePartitionNode.cs,GetEntitiesInArea,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Items,ScalingStatValues,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ScalingStats.cs,GetSsdMultiplier,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Items,ScalingStatValues,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ScalingStats.cs,GetArmorMod,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Items,ScalingStatValues,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ScalingStats.cs,GetDpsMod,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Items,ItemTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\ItemEvents.cs,InitializeTemplate,Cyclomatic complexity of the method is 22
Complex Method,WCell.RealmServer.Items,ItemTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\ItemEvents.cs,CheckQuestConstraints,Cyclomatic complexity of the method is 15
Complex Method,WCell.RealmServer.Items,ItemTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\ItemEvents.cs,CheckEquip,Cyclomatic complexity of the method is 18
Complex Method,WCell.RealmServer.Items,ItemTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\ItemEvents.cs,Dump,Cyclomatic complexity of the method is 62
Complex Method,WCell.RealmServer.Items,ItemSetDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ItemSet.cs,ConvertTo,Cyclomatic complexity of the method is 13
Complex Method,WCell.RealmServer.Items,ItemMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ItemMgr.cs,EnsureItemQuestRelations,Cyclomatic complexity of the method is 11
Complex Method,WCell.RealmServer.Items,BaseInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\BaseInventory.cs,CheckUniqueness,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Items,BaseInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\BaseInventory.cs,Iterate,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Items,PlayerInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\PlayerInventory.cs,FindFreeSlot,Cyclomatic complexity of the method is 11
Complex Method,WCell.RealmServer.Items,PlayerInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\PlayerInventory.cs,FindFreeBankSlot,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Items,PlayerInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\PlayerInventory.cs,GetEquipSlot,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Items,PlayerInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\PlayerInventory.cs,AddOwnedItems,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,DoStrike,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Misc,Duel,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\Duel.cs,CheckRequirements,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.NPCs.Spawns,NPCSpawnEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\NPCEvents.cs,FinalizeDataHolder,Cyclomatic complexity of the method is 12
Complex Method,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,CheckBasicRequirements,Cyclomatic complexity of the method is 13
Complex Method,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,CheckRequiredFinishedQuests,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,GiveRewards,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,FinalizeDataHolder,Cyclomatic complexity of the method is 15
Complex Method,WCell.RealmServer.Quests,Quest,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\Quest.cs,CheckCompletedStatus,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Quests,Quest,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\Quest.cs,TryFinish,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Quests,QuestLog,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestLog.cs,AddQuest,Cyclomatic complexity of the method is 15
Complex Method,WCell.RealmServer.Quests,QuestLog,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestLog.cs,RemoveQuest,Cyclomatic complexity of the method is 13
Complex Method,WCell.RealmServer.Quests,QuestLog,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestLog.cs,OnItemAmountChanged,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Quests,QuestMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestMgr.cs,CreateQuestRelationGraph,Cyclomatic complexity of the method is 16
Complex Method,WCell.RealmServer.Spawns,SpawnPool<T;E;O;POINT;POOL>,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spawns\SpawnPool.cs,GetRandomInactiveSpawnPoint,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Talents,TalentCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\TalentCollection.cs,RemoveTalents,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Talents,TalentMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\TalentMgr.cs,Initialize,Cyclomatic complexity of the method is 14
Complex Method,WCell.RealmServer.NPCs,NPCAddonData,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPCAddonData.cs,InitAddonData,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.NPCs,NPCEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\NPCEvents.cs,FinalizeDataHolder,Cyclomatic complexity of the method is 36
Complex Method,WCell.RealmServer.NPCs,NPCEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\NPCEvents.cs,Dump,Cyclomatic complexity of the method is 21
Complex Method,WCell.RealmServer.NPCs.Pets,PetMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Pets\PetMgr.cs,ValidatePetName,Cyclomatic complexity of the method is 16
Complex Method,WCell.RealmServer.Network,RealmPacketMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Network\RealmPacketMgr.cs,CheckConstraints,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.RacesClasses,ArchetypeMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\ArchetypeMgr.cs,GetArchetypes,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Interaction,RelationMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Social\RelationMgr.cs,RemoveRelations,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Interaction,RelationMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Social\RelationMgr.cs,GetFlatRelations,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Interaction,WhoSearch,C:\repos\WCell_WCell\Services\WCell.RealmServer\Social\WhoSearch.cs,IncludeCharacter,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Chat,ChatChannel,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatChannel.cs,TryJoin,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Chat,ChatChannel,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatChannel.cs,SetBanned,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,WhisperParser,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.GameObjects,GOEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\GOEvents.cs,FinalizeDataHolder,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Looting,Loot,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\Loot.cs,CheckTakeItemConditions,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Looting,LootMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootMgr.cs,CreateLootItems,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Guilds,GuildBank,C:\repos\WCell_WCell\Services\WCell.RealmServer\Guilds\GuildBank.cs,SwapItemsManualBankToBank,Cyclomatic complexity of the method is 17
Complex Method,WCell.RealmServer.Guilds,GuildBank,C:\repos\WCell_WCell\Services\WCell.RealmServer\Guilds\GuildBank.cs,SwapItemsAutoStoreBankToChar,Cyclomatic complexity of the method is 12
Complex Method,WCell.RealmServer.Guilds,GuildBank,C:\repos\WCell_WCell\Services\WCell.RealmServer\Guilds\GuildBank.cs,SwapItemsManualBankToChar,Cyclomatic complexity of the method is 17
Complex Method,WCell.RealmServer.Guilds,GuildBank,C:\repos\WCell_WCell\Services\WCell.RealmServer\Guilds\GuildBank.cs,SwapItemsAutoStoreCharToBank,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Guilds,GuildBank,C:\repos\WCell_WCell\Services\WCell.RealmServer\Guilds\GuildBank.cs,SwapItemsManualCharToBank,Cyclomatic complexity of the method is 14
Complex Method,WCell.RealmServer.Guilds,GuildBank,C:\repos\WCell_WCell\Services\WCell.RealmServer\Guilds\GuildBank.cs,BuyTab,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Mail,MailAccount,C:\repos\WCell_WCell\Services\WCell.RealmServer\Mail\MailAccount.cs,SendMail,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Mail,MailAccount,C:\repos\WCell_WCell\Services\WCell.RealmServer\Mail\MailAccount.cs,SendMail,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Mail,MailAccount,C:\repos\WCell_WCell\Services\WCell.RealmServer\Mail\MailAccount.cs,CollectMail,Cyclomatic complexity of the method is 8
Complex Method,WCell.RealmServer.Mail,MailAccount,C:\repos\WCell_WCell\Services\WCell.RealmServer\Mail\MailAccount.cs,TakeItem,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.NPCs.Vendors,VendorEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Vendors\VendorEntry.cs,BuyItem,Cyclomatic complexity of the method is 13
Complex Method,WCell.RealmServer.NPCs.Vendors,VendorEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Vendors\VendorEntry.cs,CanPlayerBuyItem,Cyclomatic complexity of the method is 12
Complex Method,WCell.RealmServer.Skills,SkillHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Skills\Skills.DBC.cs,Initialize,Cyclomatic complexity of the method is 12
Complex Method,WCell.RealmServer.Skills,SkillHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Skills\Skills.DBC.cs,Initialize2,Cyclomatic complexity of the method is 12
Complex Method,WCell.RealmServer.Skills,SkillRaceClassInfoConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Skills\Skills.DBC.cs,ConvertTo,Cyclomatic complexity of the method is 10
Complex Method,WCell.RealmServer.Taxi,TaxiMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Taxi\TaxiMgr.cs,Initialize,Cyclomatic complexity of the method is 13
Complex Method,WCell.RealmServer.Taxi,TaxiMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Taxi\TaxiMgr.cs,PreFlightCheatChecks,Cyclomatic complexity of the method is 9
Complex Method,WCell.RealmServer.Factions,Faction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Factions\Faction.cs,Init,Cyclomatic complexity of the method is 16
Complex Method,WCell.RealmServer.Factions,FactionMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Factions\FactionMgr.cs,InitFactionTemplateDBC,Cyclomatic complexity of the method is 9
Long Parameter List,WCell.RealmServer.Commands,ItemAddCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\ItemCommands.cs,AddItem,The method has 5 parameters. Parameters: chr' templ' amount' autoEquip' ensureOnly
Long Parameter List,WCell.RealmServer.Gossips,LocalizedGossipMenuItem,C:\repos\WCell_WCell\Services\WCell.RealmServer\Gossips\GossipMenuItem.cs,LocalizedGossipMenuItem,The method has 5 parameters. Parameters: callback' decider' confirmLangKey' msgKey' msgArgs
Long Parameter List,WCell.RealmServer.Handlers,WorldStateHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\WorldStateHandler.cs,SendInitWorldStates,The method has 5 parameters. Parameters: rcv' map' zone' areaId' states
Long Parameter List,WCell.RealmServer.Handlers,ArenaTeamHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ArenaTeamHandler.cs,SendResult,The method has 5 parameters. Parameters: client' commandId' team' player' resultCode
Long Parameter List,WCell.RealmServer.Handlers,GroupHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GroupHandler.cs,SendRoll,The method has 5 parameters. Parameters: client' min' max' value' guid
Long Parameter List,WCell.RealmServer.Handlers,CombatLogHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatLogHandler.cs,SendPeriodicAuraLog,The method has 7 parameters. Parameters: client' caster' target' spellId' extra' flags' amount
Long Parameter List,WCell.RealmServer.Handlers,CombatLogHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatLogHandler.cs,SendPeriodicDamage,The method has 5 parameters. Parameters: caster' target' spellId' type' amount
Long Parameter List,WCell.RealmServer.Handlers,CombatLogHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatLogHandler.cs,SendSpellOrDamageImmune,The method has 5 parameters. Parameters: client' obj1' obj2' spellId' b1
Long Parameter List,WCell.RealmServer.Handlers,CombatLogHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatLogHandler.cs,SendEnergizeLog,The method has 5 parameters. Parameters: caster' target' spellId' powerType' value
Long Parameter List,WCell.RealmServer.Handlers,CombatLogHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatLogHandler.cs,SendSpellLogExecute,The method has 5 parameters. Parameters: caster' spellId' effect' target' value
Long Parameter List,WCell.RealmServer.Handlers,CombatLogHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatLogHandler.cs,SendHealLog,The method has 6 parameters. Parameters: caster' target' spellId' value' critical' overheal
Long Parameter List,WCell.RealmServer.Handlers,CombatLogHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatLogHandler.cs,SendMagicDamage,The method has 11 parameters. Parameters: victim' attacker' spell' damage' overkill' schools' absorbed' resisted' blocked' unkBool' flags
Long Parameter List,WCell.RealmServer.Handlers,GuildHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GuildHandler.cs,SendGuildBankList,The method has 5 parameters. Parameters: chr' bank' tabId' hasTabNames' hasItemInfo
Long Parameter List,WCell.RealmServer.Handlers,LootHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\LootHandler.cs,SendRoll,The method has 5 parameters. Parameters: looter' loot' item' rollNumber' rollType
Long Parameter List,WCell.RealmServer.Handlers,MailHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MailHandler.cs,SendResult,The method has 5 parameters. Parameters: client' mailId' result' err' invErr
Long Parameter List,WCell.RealmServer.Handlers,MailHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MailHandler.cs,SendResult,The method has 6 parameters. Parameters: client' mailId' result' err' itemId' itemCount
Long Parameter List,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendBuyItem,The method has 5 parameters. Parameters: client' vendor' itemId' numItemsPurchased' remainingAmount
Long Parameter List,WCell.RealmServer.Handlers,PetHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\PetHandler.cs,SendMode,The method has 5 parameters. Parameters: receiver' pet' attackMode' action' flags
Long Parameter List,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendLevelUpInfo,The method has 9 parameters. Parameters: client' level' hpGain' manaGain' strBonus' agiBonus' staBonus' intBonus' sprBonus
Long Parameter List,WCell.RealmServer.Handlers,ItemHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ItemHandler.cs,SendItemPushResult,The method has 5 parameters. Parameters: owner' item' templ' amount' reception
Long Parameter List,WCell.RealmServer.Handlers,GossipHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GossipHandler.cs,SendGossipPOI,The method has 7 parameters. Parameters: rcv' Flags' X' Y' Data' Icon' Name
Long Parameter List,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendMoveToPacket,The method has 5 parameters. Parameters: movingUnit' pos' orientation' moveTime' moveFlags
Long Parameter List,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendMoveToPacketToSingleClient,The method has 5 parameters. Parameters: client' movingUnit' moveTime' moveFlags' waypoints
Long Parameter List,WCell.RealmServer.Handlers,QuestHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QuestHandler.cs,SendUpdateInteractionCount,The method has 5 parameters. Parameters: quest' obj' interaction' currentCount' chr
Long Parameter List,WCell.RealmServer.Spells.Auras,Aura,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Aura.cs,Aura,The method has 6 parameters. Parameters: auras' casterReference' spell' handlers' index' beneficial
Long Parameter List,WCell.RealmServer.Spells.Auras,Aura,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Aura.cs,Aura,The method has 5 parameters. Parameters: auras' caster' record' handlers' index
Long Parameter List,WCell.RealmServer.Spells.Auras,AuraCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\AuraCollection.cs,CreateAura,The method has 5 parameters. Parameters: casterReference' spell' handlers' usedItem' beneficial
Long Parameter List,WCell.RealmServer.Spells.Auras,AuraCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\AuraCollection.cs,PrepareStackOrOverride,The method has 5 parameters. Parameters: caster' id' spell' err' triggeringCast
Long Parameter List,WCell.RealmServer.Spells.Auras,AuraCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\AuraCollection.cs,PrepareStackOrOverride,The method has 5 parameters. Parameters: caster' oldAura' spell' err' triggeringCast
Long Parameter List,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,CreateHandler,The method has 5 parameters. Parameters: effect' h' handlers' targets' failReason
Long Parameter List,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,Trigger,The method has 5 parameters. Parameters: caster' spell' targetLoc' selected' casterItem
Long Parameter List,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,Start,The method has 5 parameters. Parameters: spell' packet' castId' unkFlags' glyphSlot
Long Parameter List,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,ValidateAndTriggerNew,The method has 7 parameters. Parameters: spell' caster' target' usedChannel' usedItem' action' triggerEffect
Long Parameter List,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,ValidateAndTriggerNew,The method has 8 parameters. Parameters: spell' caster' triggerOwner' target' usedChannel' usedItem' action' triggerEffect
Long Parameter List,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,ValidateAndTriggerNew,The method has 5 parameters. Parameters: spell' triggerOwner' target' action' triggerEffect
Long Parameter List,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,ValidateAndTrigger,The method has 5 parameters. Parameters: spell' triggerOwner' target' action' triggerEffect
Long Parameter List,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendSpellGo,The method has 5 parameters. Parameters: caster2' cast' hitTargets' missedTargets' previousRuneMask
Long Parameter List,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendSpellModifier,The method has 5 parameters. Parameters: chr' groupBitNumber' type' amount' isPercent
Long Parameter List,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadReagent,The method has 5 parameters. Parameters: rawData' reagentStart' reagentNum' currentIndex' list
Long Parameter List,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadEffect,The method has 5 parameters. Parameters: spell' rawData' effectStartIndex' effectNum' currentIndex
Long Parameter List,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,SpawnCorpse,The method has 5 parameters. Parameters: bones' lootable' map' pos' o
Long Parameter List,WCell.RealmServer.Entities,Targeting,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Targeting.cs,GetObjectsInRadius,The method has 5 parameters. Parameters: wObj' radius' filter' checkVisible' limit
Long Parameter List,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,Proc,The method has 5 parameters. Parameters: flags' triggerer' action' active' hitFlags
Long Parameter List,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,DealSpellDamage,The method has 6 parameters. Parameters: attacker' effect' dmg' addDamageBonuses' mayCrit' forceCrit
Long Parameter List,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,WriteSpontaneousUpdate,The method has 5 parameters. Parameters: mask' packet' receiver' indices' visible
Long Parameter List,WCell.RealmServer.Entities,Item,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Item.Update.cs,ApplyEnchant,The method has 5 parameters. Parameters: enchantEntryId' enchantSlot' duration' charges' applyBoni
Long Parameter List,WCell.RealmServer.Entities,Item,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Item.Update.cs,ApplyEnchant,The method has 5 parameters. Parameters: enchantEntry' enchantSlot' duration' charges' applyBoni
Long Parameter List,WCell.RealmServer.Entities,Corpse,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Corpse.cs,Corpse,The method has 14 parameters. Parameters: owner' pos' orientation' displayId' face' skin' hairStyle' hairColor' facialHair' guildId' gender' race' flags' dynFlags
Long Parameter List,WCell.RealmServer.Entities,DynamicObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\DynamicObject.cs,DynamicObject,The method has 5 parameters. Parameters: creator' spellId' radius' map' pos
Long Parameter List,WCell.RealmServer.GameObjects.Spawns,GOSpawnEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\Spawns\GOSpawnEntry.cs,GOSpawnEntry,The method has 8 parameters. Parameters: entry' state' mapId' pos' orientation' scale' rotations' respawnTimeSecs
Long Parameter List,WCell.RealmServer.Global,Map,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Map.cs,GetObjectsInRadius,The method has 5 parameters. Parameters: origin' radius' filter' phase' limit
Long Parameter List,WCell.RealmServer.Global,Map,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Map.cs,GetObjectsInRadius,The method has 5 parameters. Parameters: origin' radius' filter' phase' limit
Long Parameter List,WCell.RealmServer.Global,Map,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Map.cs,GetObjectsInRadius,The method has 5 parameters. Parameters: origin' radius' filter' phase' limit
Long Parameter List,WCell.RealmServer.Global,Map,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Map.cs,GetObjectsInBox,The method has 5 parameters. Parameters: origin' box' filter' limit' phase
Long Parameter List,WCell.RealmServer.Global,Map,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Map.cs,GetObjectsInBox,The method has 5 parameters. Parameters: origin' box' filter' phase' limit
Long Parameter List,WCell.RealmServer.Global,Map,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Map.cs,GetObjectsInBox,The method has 5 parameters. Parameters: origin' box' filter' phase' limit
Long Parameter List,WCell.RealmServer.Global,ZoneSpacePartitionNode,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\ZoneSpacePartitionNode.cs,GetEntitiesInArea,The method has 5 parameters. Parameters: box' entities' filter' phase' limitCounter
Long Parameter List,WCell.RealmServer.Global,ZoneSpacePartitionNode,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\ZoneSpacePartitionNode.cs,GetEntitiesInArea,The method has 5 parameters. Parameters: box' entities' filter' phase' limitCounter
Long Parameter List,WCell.RealmServer.Global,ZoneSpacePartitionNode,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\ZoneSpacePartitionNode.cs,GetEntitiesInArea,The method has 5 parameters. Parameters: box' entities' filter' phase' limitCounter
Long Parameter List,WCell.RealmServer.Global,ZoneSpacePartitionNode,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\ZoneSpacePartitionNode.cs,GetEntitiesInArea,The method has 5 parameters. Parameters: sphere' entities' filter' phase' limitCounter
Long Parameter List,WCell.RealmServer.Global,ZoneSpacePartitionNode,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\ZoneSpacePartitionNode.cs,GetEntitiesInArea,The method has 5 parameters. Parameters: sphere' entities' filter' phase' limitCounter
Long Parameter List,WCell.RealmServer.Global,ZoneSpacePartitionNode,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\ZoneSpacePartitionNode.cs,GetEntitiesInArea,The method has 5 parameters. Parameters: sphere' entities' filter' phase' limitCounter
Long Parameter List,WCell.RealmServer.Global,RealmMessage3<T1;T2;T3>,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Messaging.cs,RealmMessage3,The method has 5 parameters. Parameters: param1' param2' param3' callback' boundary
Long Parameter List,WCell.RealmServer.Global,RealmMessage4<T1;T2;T3;T4>,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Messaging.cs,RealmMessage4,The method has 6 parameters. Parameters: callback' param1' param2' param3' param4' boundary
Long Parameter List,WCell.RealmServer.Items,GenericWeapon,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\GenericWeapon.cs,GenericWeapon,The method has 5 parameters. Parameters: slot' minDmg' maxDmg' attackTime' dmgType
Long Parameter List,WCell.RealmServer.Items,GenericWeapon,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\GenericWeapon.cs,GenericWeapon,The method has 6 parameters. Parameters: slot' damages' skill' minRange' maxRange' attackTime
Long Parameter List,WCell.RealmServer.Items,PlayerInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\PlayerInventory.cs,Split,The method has 5 parameters. Parameters: srcBagSlot' srcSlot' destBagSlot' destSlot' amount
Long Parameter List,WCell.RealmServer.Items,PlayerInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\PlayerInventory.cs,Split,The method has 5 parameters. Parameters: srcCont' srcSlot' destCont' destSlot' amount
Long Parameter List,WCell.RealmServer.Items,PlayerInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\PlayerInventory.cs,SetEquipmentSet,The method has 5 parameters. Parameters: setEntityId' setId' name' icon' itemList
Long Parameter List,WCell.RealmServer.Misc,ActionButton,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\ActionBar.cs,Set,The method has 5 parameters. Parameters: actions' index' action' type' info
Long Parameter List,WCell.RealmServer.Misc,ProcHandlerTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\ProcHandler.cs,ProcHandlerTemplate,The method has 5 parameters. Parameters: triggerFlags' hitFlags' procAction' procChance' stackCount
Long Parameter List,WCell.RealmServer.Misc,ProcHandlerTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\ProcHandler.cs,ProcHandlerTemplate,The method has 6 parameters. Parameters: triggerFlags' hitFlags' procAction' validator' procChance' stackCount
Long Parameter List,WCell.RealmServer.Misc,TriggerSpellProcHandlerTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\ProcHandler.cs,TriggerSpellProcHandlerTemplate,The method has 5 parameters. Parameters: spell' triggerFlags' hitFlags' procChance' stackCount
Long Parameter List,WCell.RealmServer.Misc,TriggerSpellProcHandlerTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\ProcHandler.cs,TriggerSpellProcHandlerTemplate,The method has 6 parameters. Parameters: spell' triggerFlags' validator' hitFlags' procChance' stackCount
Long Parameter List,WCell.RealmServer.RacesClasses,BaseClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\BaseClass.cs,CalculateDodge,The method has 6 parameters. Parameters: level' agility' baseAgility' defenseSkill' dodgeRating' defenseRating
Long Parameter List,WCell.RealmServer.RacesClasses,HunterClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\HunterClass.cs,CalculateDodge,The method has 6 parameters. Parameters: level' agility' baseAgility' defenseSkill' dodgeRating' defense
Long Parameter List,WCell.RealmServer.RacesClasses,RogueClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\RogueClass.cs,CalculateDodge,The method has 6 parameters. Parameters: level' agility' baseAgility' defenseSkill' dodgeRating' defense
Long Parameter List,WCell.RealmServer.Chat,ChatChannel,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatChannel.cs,ChatChannel,The method has 5 parameters. Parameters: group' name' flags' constant' joinValidator
Long Parameter List,WCell.RealmServer.Chat,ChatChannel,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatChannel.cs,ChatChannel,The method has 5 parameters. Parameters: group' name' flags' constant' joinValidator
Long Parameter List,WCell.RealmServer.Chat,ChatChannel,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatChannel.cs,EnsurePresence,The method has 5 parameters. Parameters: user' channelName' targetName' userMember' targetMember
Long Parameter List,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,SayYellEmote,The method has 5 parameters. Parameters: sender' type' language' msg' radius
Long Parameter List,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,CreateObjectChatMessage,The method has 5 parameters. Parameters: type' language' obj' msg' tag
Long Parameter List,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,CreateCharChatMessage,The method has 7 parameters. Parameters: type' language' id1' id2' target' msg' tag
Long Parameter List,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,CreateCharChatMessage,The method has 6 parameters. Parameters: type' language' id1' id2' target' msg
Long Parameter List,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,CreateCharChatMessage,The method has 7 parameters. Parameters: type' language' id1' id2' target' msg' tag
Long Parameter List,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,SendMonsterMessage,The method has 5 parameters. Parameters: obj' chatType' language' message' radius
Long Parameter List,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,SendMonsterMessage,The method has 5 parameters. Parameters: chatter' chatType' language' localizedMsgs' radius
Long Parameter List,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,ChatNotify,The method has 5 parameters. Parameters: chatter' message' language' chatType' target
Long Parameter List,WCell.RealmServer.Chat,ChatUtility,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatUtility.cs,Colorize,The method has 5 parameters. Parameters: msg' red' green' blue' enclose
Long Parameter List,WCell.RealmServer.AreaTriggers,AreaTrigger,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\AreaTrigger.cs,AreaTrigger,The method has 10 parameters. Parameters: id' mapId' x' y' z' radius' boxLength' boxWidth' boxHeight' boxYaw
Long Parameter List,WCell.RealmServer.Looting,LootMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootMgr.cs,CreateLoot,The method has 5 parameters. Parameters: lootable' initialLooter' type' heroic' mapid
Long Parameter List,WCell.RealmServer.Guilds,GuildBank,C:\repos\WCell_WCell\Services\WCell.RealmServer\Guilds\GuildBank.cs,SwapItemsManualBankToBank,The method has 8 parameters. Parameters: chr' bankObj' fromBankTabId' fromTabSlot' toBankTabId' toTabSlot' itemEntryId' amount
Long Parameter List,WCell.RealmServer.Guilds,GuildBank,C:\repos\WCell_WCell\Services\WCell.RealmServer\Guilds\GuildBank.cs,SwapItemsAutoStoreBankToChar,The method has 6 parameters. Parameters: chr' bank' fromBankTabId' fromTabSlot' itemEntryId' autoStoreCount
Long Parameter List,WCell.RealmServer.Guilds,GuildBank,C:\repos\WCell_WCell\Services\WCell.RealmServer\Guilds\GuildBank.cs,SwapItemsManualBankToChar,The method has 8 parameters. Parameters: chr' bank' fromBankTabId' fromTabSlot' bagSlot' slot' itemEntryId' amount
Long Parameter List,WCell.RealmServer.Guilds,GuildBank,C:\repos\WCell_WCell\Services\WCell.RealmServer\Guilds\GuildBank.cs,SwapItemsAutoStoreCharToBank,The method has 7 parameters. Parameters: chr' bank' toBankTabId' bagSlot' slot' itemEntryId' autoStoreCount
Long Parameter List,WCell.RealmServer.Guilds,GuildBank,C:\repos\WCell_WCell\Services\WCell.RealmServer\Guilds\GuildBank.cs,SwapItemsManualCharToBank,The method has 8 parameters. Parameters: chr' bank' bagSlot' slot' itemEntryId' toBankTabId' toTabSlot' amount
Long Parameter List,WCell.RealmServer.Guilds,GuildBank,C:\repos\WCell_WCell\Services\WCell.RealmServer\Guilds\GuildBank.cs,ModifyTabInfo,The method has 5 parameters. Parameters: chr' bank' tabId' newName' newIcon
Long Parameter List,WCell.RealmServer.Guilds,GuildBankLog,C:\repos\WCell_WCell\Services\WCell.RealmServer\Guilds\GuildBankLog.cs,LogEvent,The method has 5 parameters. Parameters: type' chr' item' amount' intoTab
Long Parameter List,WCell.RealmServer.Guilds,GuildBankLog,C:\repos\WCell_WCell\Services\WCell.RealmServer\Guilds\GuildBankLog.cs,LogEvent,The method has 6 parameters. Parameters: type' member' money' item' amount' intoTab
Long Parameter List,WCell.RealmServer.Guilds,GuildBankLog,C:\repos\WCell_WCell\Services\WCell.RealmServer\Guilds\GuildBankLog.cs,LogItemEvent,The method has 5 parameters. Parameters: type' actor' record' amount' intoTab
Long Parameter List,WCell.RealmServer.Guilds,Guild,C:\repos\WCell_WCell\Services\WCell.RealmServer\Database\Guild.cs,CheckAction,The method has 6 parameters. Parameters: reqChar' targetChar' targetName' commandId' reqPrivs' canAffectSelf
Long Parameter List,WCell.RealmServer.Guilds,Guild,C:\repos\WCell_WCell\Services\WCell.RealmServer\Database\Guild.cs,CheckAction,The method has 6 parameters. Parameters: reqChar' targetName' targetGM' commandId' reqPrivs' canAffectSelf
Long Parameter List,WCell.RealmServer.Guilds,GuildEventLogEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Database\GuildEventLogEntry.cs,GuildEventLogEntry,The method has 6 parameters. Parameters: guild' type' character1LowId' character2LowId' newRankId' timeStamp
Long Parameter List,WCell.RealmServer.NPCs.Auctioneer,AuctionMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Auctioneer\AuctionMgr.cs,AuctionSellItem,The method has 7 parameters. Parameters: chr' auctioneer' itemId' bid' buyout' time' stackSize
Long Parameter List,WCell.RealmServer.Debugging,DebugUtil,C:\repos\WCell_WCell\Services\WCell.RealmServer\Debugging\DebugUtil.cs,DumpPacketOut,The method has 5 parameters. Parameters: acc' packetOut' offset' length' sender
Long Parameter List,WCell.RealmServer.Mail,MailAccount,C:\repos\WCell_WCell\Services\WCell.RealmServer\Mail\MailAccount.cs,SendMail,The method has 7 parameters. Parameters: recipientName' subject' body' stationary' items' money' cod
Long Parameter List,WCell.RealmServer.Mail,MailAccount,C:\repos\WCell_WCell\Services\WCell.RealmServer\Mail\MailAccount.cs,SendMail,The method has 7 parameters. Parameters: recipient' subject' body' stationary' items' money' cod
Long Parameter List,WCell.RealmServer.Mail,MailMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Mail\MailMgr.cs,SendMail,The method has 8 parameters. Parameters: recipientName' subject' body' stationary' items' money' cod' sender
Long Parameter List,WCell.RealmServer.Mail,MailMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Mail\MailMgr.cs,SendMail,The method has 8 parameters. Parameters: recipientLowId' subject' body' stationary' items' money' cod' sender
Long Parameter List,WCell.RealmServer.NPCs.Vendors,VendorEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Vendors\VendorEntry.cs,BuyItem,The method has 5 parameters. Parameters: chr' itemEntryId' bag' amount' slot
Long Parameter List,WCell.RealmServer.Skills,Skill,C:\repos\WCell_WCell\Services\WCell.RealmServer\Skills\Skill.cs,Skill,The method has 5 parameters. Parameters: skills' field' skill' value' max
Long Parameter List,WCell.RealmServer.Waypoints,RandomWaypointGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Waypoints\RandomWaypointGenerator.cs,GenerateWaypoints,The method has 6 parameters. Parameters: terrain' lastPos' min' max' minDist' maxDist
Long Parameter List,WCell.RealmServer.Waypoints,RandomWaypointGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Waypoints\RandomWaypointGenerator.cs,GenerateWaypoints,The method has 5 parameters. Parameters: terrain' lastPos' minDist' maxDist' count
Long Identifier,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,,The length of the parameter AchievementCriteriaRequirementCreators is 38.
Long Identifier,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,,The length of the parameter CompletedRealmFirstAchievements is 31.
Long Identifier,WCell.RealmServer.Commands,RealmCommandHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\RealmCommandHandler.cs,,The length of the parameter AutoExecAllCharsFirstLoginFile is 30.
Long Identifier,WCell.RealmServer.Spells.Auras,Aura,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Aura.cs,,The length of the parameter m_hasPeriodicallyUpdatedEffectHandler is 37.
Long Identifier,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,,The length of the parameter IsModalShapeshiftDependentAura is 30.
Long Identifier,WCell.RealmServer.Battlegrounds,GlobalBattlegroundQueue,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\GlobalBattlegroundQueue.cs,,The length of the parameter defaultBGCreationPlayerThresholdPct is 35.
Long Identifier,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,,The length of the parameter ResurrectionSicknessStartLevel is 30.
Long Identifier,WCell.RealmServer.Global,Map,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Map.cs,,The length of the parameter CharacterUpdateEnvironmentTicks is 31.
Long Identifier,WCell.RealmServer.Talents,TalentMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\TalentMgr.cs,,The length of the parameter PlayerTalentResetPricesPerTier is 30.
Long Identifier,WCell.RealmServer.NPCs,NPCMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPCMgr.cs,,The length of the parameter DefaultMaxHomeDistanceInCombatSq is 32.
Long Identifier,WCell.RealmServer.Guilds,GuildMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Guilds\GuildMgr.cs,,The length of the parameter UNLIMITED_BANK_MONEY_WITHDRAWL is 30.
Long Statement,WCell.RealmServer.Achievements,ReachLevelAchievementCriteriaEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCriteria.cs,OnUpdate,The length of the statement  "            if (!AchievementEntry.IsRealmFirstType() || AchievementCollection.ClassSpecificAchievementId[(int)achievements.Owner.Class] == AchievementEntryId " is 145.
Long Statement,WCell.RealmServer.Achievements,GainExaltedReputationAchievementCriteriaEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCriteria.cs,OnUpdate,The length of the statement  "            achievements.SetCriteriaProgress(this' achievements.Owner.Reputations.GetExaltedReputations()' ProgressType.ProgressHighest); " is 125.
Long Statement,WCell.RealmServer.Achievements,GainReveredReputationAchievementCriteriaEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCriteria.cs,OnUpdate,The length of the statement  "			achievements.SetCriteriaProgress(this' achievements.Owner.Reputations.GetReveredReputations()' ProgressType.ProgressHighest); " is 125.
Long Statement,WCell.RealmServer.Achievements,GainHonoredReputationAchievementCriteriaEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCriteria.cs,OnUpdate,The length of the statement  "			achievements.SetCriteriaProgress(this' achievements.Owner.Reputations.GetHonoredReputations()' ProgressType.ProgressHighest); " is 125.
Long Statement,WCell.RealmServer.Achievements,KnownFactionsAchievementCriteriaEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCriteria.cs,OnUpdate,The length of the statement  "			achievements.SetCriteriaProgress(this' achievements.Owner.Reputations.GetVisibleReputations()' ProgressType.ProgressHighest); " is 125.
Long Statement,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,IsAchieveable,The length of the statement  "			if (achievementCriteriaEntry.AchievementEntry.FactionFlag == (int)AchievementFactionGroup.Alliance && Owner.FactionGroup != FactionGroup.Alliance) " is 146.
Long Statement,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,IsAchieveable,The length of the statement  "			if (achievementCriteriaEntry.AchievementEntry.FactionFlag == (int)AchievementFactionGroup.Horde && Owner.FactionGroup != FactionGroup.Horde) " is 140.
Long Statement,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,IsAchieveable,The length of the statement  "			if (achievementCriteriaEntry.GroupFlag.HasFlag(AchievementCriteriaGroupFlags.AchievementCriteriaGroupNotInGroup) && Owner.IsInGroup) " is 132.
Long Statement,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,Load,The length of the statement  "						log.Warn("Character {0} had progress for Achievement Criteria {1} more than once."' m_owner' achievementProgress.AchievementCriteriaId); " is 136.
Long Statement,WCell.RealmServer.Achievements,AchievementRecord,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementRecord.cs,ToString,The length of the statement  "			return string.Format("{0} - Char: {1}' Achievement: {2}' RecordId: {3}"' GetType()' _characterGuid' _achievementEntryId' RecordId); " is 131.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.KillCreature' () => new KillCreatureAchievementCriteriaEntry());                            // 0 " is 136.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.WinBg' () => new WinBattleGroundAchievementCriteriaEntry());                                // 1 " is 136.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.ReachLevel' () => new ReachLevelAchievementCriteriaEntry());                                // 5 " is 136.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.ReachSkillLevel' () => new ReachSkillLevelAchievementCriteriaEntry());                      // 7 " is 136.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.CompleteAchievement' () => new CompleteAchievementAchievementCriteriaEntry());              // 8 " is 136.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.CompleteQuestCount' () => new CompleteQuestCountAchievementCriteriaEntry());                // 9 " is 136.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.CompleteDailyQuestDaily' () => new CompleteDailyQuestDailyAchievementCriteriaEntry());      // 10 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.CompleteQuestsInZone' () => new CompleteQuestsInZoneAchievementCriteriaEntry());            // 11 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.CompleteDailyQuest' () => new CompleteDailyQuestAchievementCriteriaEntry());                // 14 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.CompleteBattleground' () => new CompleteBattlegroundAchievementCriteriaEntry());            // 15 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.DeathAtMap' () => new DeathAtMapAchievementCriteriaEntry());                                // 16 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.DeathInDungeon' () => new DeathInDungeonAchievementCriteriaEntry());                        // 18 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.CompleteRaid' () => new CompleteRaidAchievementCriteriaEntry());                            // 19 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.KilledByCreature' () => new KilledByCreatureAchievementCriteriaEntry());                    // 20 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.FallWithoutDying' () => new FallWithoutDyingAchievementCriteriaEntry());                    // 24 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.DeathsFrom' () => new DeathsFromAchievementCriteriaEntry());                                // 26 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.CompleteQuest' () => new CompleteQuestAchievementCriteriaEntry());                          // 27 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.BeSpellTarget' () => new BeSpellTargetAchievementCriteriaEntry());                          // 28 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.BeSpellTarget2' () => new BeSpellTargetAchievementCriteriaEntry());                         // 69 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.CastSpell' () => new CastSpellAchievementCriteriaEntry());                                  // 29 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.HonorableKillAtArea' () => new HonorableKillAtAreaAchievementCriteriaEntry());              // 31 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.WinArena' () => new WinArenaAchievementCriteriaEntry());                                    // 32 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.PlayArena' () => new PlayArenaAchievementCriteriaEntry());                                  // 33 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.LearnSpell' () => new LearnSpellAchievementCriteriaEntry());                                // 34 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.OwnItem' () => new OwnItemAchievementCriteriaEntry());                                      // 36 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.WinRatedArena' () => new WinRatedArenaAchievementCriteriaEntry());                          // 37 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.HighestTeamRating' () => new HighestTeamRatingAchievementCriteriaEntry());                  // 38 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.ReachTeamRating' () => new ReachTeamRatingAchievementCriteriaEntry());                      // 39 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "            SetEntryCreator(AchievementCriteriaType.LearnSkillLevel' () => new LearnSkillLevelAchievementCriteriaEntry());                      // 40 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "            SetEntryCreator(AchievementCriteriaType.LootItem' () => new LootItemAchievementCriteriaEntry());                                    // 42 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "            SetEntryCreator(AchievementCriteriaType.ExploreArea' () => new ExploreAreaAchievementCriteriaEntry());                              // 43 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "            SetEntryCreator(AchievementCriteriaType.BuyBankSlot' () => new BuyBankSlotAchievementCriteriaEntry());                              // 45 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "            SetEntryCreator(AchievementCriteriaType.GainReputation' () => new GainReputationAchievementCriteriaEntry());                        // 46 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "            SetEntryCreator(AchievementCriteriaType.GainExaltedReputation' () => new GainExaltedReputationAchievementCriteriaEntry());          // 47 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.VisitBarberShop' () => new VisitBarberShopAchievementCriteriaEntry());						// 48 " is 121.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.MoneyFromVendors' () => new IncrementAtValue1AchievementCriteriaEntry());                   // 59 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "            SetEntryCreator(AchievementCriteriaType.GoldSpentForTalents' () => new IncrementAtValue1AchievementCriteriaEntry());                // 60 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "            SetEntryCreator(AchievementCriteriaType.MoneyFromQuestReward' () => new IncrementAtValue1AchievementCriteriaEntry());               // 62 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "            SetEntryCreator(AchievementCriteriaType.GoldSpentForTravelling' () => new IncrementAtValue1AchievementCriteriaEntry());             // 63 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "            SetEntryCreator(AchievementCriteriaType.GoldSpentAtBarber' () => new IncrementAtValue1AchievementCriteriaEntry());                  // 65 " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "            SetEntryCreator(AchievementCriteriaType.GoldSpentForMail' () => new IncrementAtValue1AchievementCriteriaEntry());                   // 66                                       " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "            SetEntryCreator(AchievementCriteriaType.LootMoney' () => new IncrementAtValue1AchievementCriteriaEntry());                          // 67           " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.GainReveredReputation' () => new GainReveredReputationAchievementCriteriaEntry());			// 87 " is 130.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.GainHonoredReputation' () => new GainHonoredReputationAchievementCriteriaEntry());			// 88 " is 130.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "			SetEntryCreator(AchievementCriteriaType.TotalDamageReceived' () => new IncrementAtValue1AchievementCriteriaEntry());                // 103 " is 138.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "            SetEntryCreator(AchievementCriteriaType.TotalHealingReceived' () => new IncrementAtValue1AchievementCriteriaEntry());               // 105 " is 138.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteria,The length of the statement  "            SetEntryCreator(AchievementCriteriaType.FlightPathsTaken' () => new FlightPathsTakenAchievementCriteriaEntry());                    // 108 " is 138.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,LoadDBCs,The length of the statement  "			new DBCReader<AchievementCategoryEntryConverter>(RealmServerConfiguration.GetDBCFile(WCellConstants.DBC_ACHIEVEMENT_CATEGORIES)); " is 129.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,LoadDBCs,The length of the statement  "			new DBCReader<AchievementCriteriaConverter>(RealmServerConfiguration.GetDBCFile(WCellConstants.DBC_ACHIEVEMENT_CRITERIAS)); " is 123.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteriaRequirements,The length of the statement  "            SetRequirementCreator(AchievementCriteriaRequirementType.PlayerClassRace' () => new AchievementCriteriaRequirementPlayerClassRace()); " is 133.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteriaRequirements,The length of the statement  "            SetRequirementCreator(AchievementCriteriaRequirementType.PlayerLessHealth' () => new AchievementCriteriaRequirementPlayerLessHealth()); " is 135.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteriaRequirements,The length of the statement  "            SetRequirementCreator(AchievementCriteriaRequirementType.PlayerDead' () => new AchievementCriteriaRequirementPlayerDead()); " is 123.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteriaRequirements,The length of the statement  "            SetRequirementCreator(AchievementCriteriaRequirementType.MapDifficulty' () => new AchievementCriteriaRequirementMapDifficulty()); " is 129.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteriaRequirements,The length of the statement  "            SetRequirementCreator(AchievementCriteriaRequirementType.MapPlayerCount' () => new AchievementCriteriaRequirementMapPlayerCount()); " is 131.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteriaRequirements,The length of the statement  "            SetRequirementCreator(AchievementCriteriaRequirementType.BgLossTeamScore' () => new AchievementCriteriaRequirementBgLossTeamScore()); " is 133.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteriaRequirements,The length of the statement  "            SetRequirementCreator(AchievementCriteriaRequirementType.InstanceScript' () => new AchievementCriteriaRequirementInstanceScript()); " is 131.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteriaRequirements,The length of the statement  "            SetRequirementCreator(AchievementCriteriaRequirementType.EquippedItemLevel' () => new AchievementCriteriaRequirementEquippedItemLevel()); " is 137.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteriaRequirements,The length of the statement  "            SetRequirementCreator(AchievementCriteriaRequirementType.NthBirthday' () => new AchievementCriteriaRequirementNthBirthday()); " is 125.
Long Statement,WCell.RealmServer.Achievements,AchievementMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementMgr.cs,InitCriteriaRequirements,The length of the statement  "            SetRequirementCreator(AchievementCriteriaRequirementType.KnownTitle' () => new AchievementCriteriaRequirementKnownTitle()); " is 123.
Long Statement,WCell.RealmServer.AI.Actions.Movement,AIOrientedTargetMoveAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\AI\Actions\Movement\AIOrientedMoveAction.cs,CreateStayBehindAction,The length of the statement  "			return new AIOrientedTargetMoveAction(owner) { MinAngle = WorldObject.BehindAngleMin' MaxAngle = WorldObject.BehindAngleMax }; " is 126.
Long Statement,WCell.RealmServer.AI.Actions.Movement,AIOrientedTargetMoveAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\AI\Actions\Movement\AIOrientedMoveAction.cs,CreateStayInFrontAction,The length of the statement  "			return new AIOrientedTargetMoveAction(owner) { MinAngle = WorldObject.InFrontAngleMin' MaxAngle = WorldObject.InFrontAngleMax }; " is 128.
Long Statement,WCell.RealmServer.AI.Brains,BaseBrain,C:\repos\WCell_WCell\Services\WCell.RealmServer\AI\Brains\BaseBrain.cs,CheckCombat,The length of the statement  "			if ((owner.ThreatCollection.CurrentAggressor != null && owner.CanReachForCombat(owner.ThreatCollection.CurrentAggressor)) || " is 124.
Long Statement,WCell.RealmServer.Commands,StartEventCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\WorldEventCommands.cs,Initialize,The length of the statement  "                    "Example: Use '.Event Start -t -m 20 4' to start event 4 for 20 minutes' or '.Event Start 4' to start event 4 with the default duration "; " is 138.
Long Statement,WCell.RealmServer.Commands,EditOccuranceEventCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\WorldEventCommands.cs,Process,The length of the statement  "                    trigger.Reply("Invalid Occurence {0} specified' must be greater than the duration {1}"' occurence' worldEvent.Duration); " is 120.
Long Statement,WCell.RealmServer.Commands,DumpAurasCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\AuraCommands.cs,Process,The length of the statement  "							trigger.Reply("	{0}{1}"' aura.Spell' aura.HasTimeout ? " [" + TimeSpan.FromMilliseconds(aura.TimeLeft).Format() + "]" : ""); " is 124.
Long Statement,WCell.RealmServer.Commands,BattlegroundDeleteCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\BattlegroundCommand.cs,Initialize,The length of the statement  "				EnglishDescription = "Deletes the Battleground of the given Map with the given Id' or the current one if no arguments are supplied."; " is 133.
Long Statement,WCell.RealmServer.Commands,BankCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\CharacterCommands.cs,Initialize,The length of the statement  "			EnglishDescription = "Opens the bank for the target through oneself (if one leaves the target' it won't be allowed to continue using the Bank)."; " is 145.
Long Statement,WCell.RealmServer.Commands,ExploreCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\CharacterCommands.cs,Initialize,The length of the statement  "			EnglishDescription = "Explores the map. If zone is given it will toggle exploration of that zone' else it will explore all zones."; " is 131.
Long Statement,WCell.RealmServer.Commands,ContentLoadCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\ContentCommands.cs,Initialize,The length of the statement  "				EnglishDescription = "Reloads the content-definitions. This is useful when applying changes to the underlying content system."; " is 127.
Long Statement,WCell.RealmServer.Commands,ContentCheckCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\ContentCommands.cs,Initialize,The length of the statement  "				EnglishDescription = "Checks whether all currently loaded content-definitions are correctly reflecting the DB-structure."; " is 122.
Long Statement,WCell.RealmServer.Commands,SendSpellDamageLogCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\DevCommands.cs,Initialize,The length of the statement  "				EnglishParamInfo = "[<unkBool> [<flags> [<spell> [<damage> [<overkill> [<schools> [<absorbed> [<resisted> [<blocked>]]]]]]]]]"; " is 127.
Long Statement,WCell.RealmServer.Commands,SendSpellDamageLogCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\DevCommands.cs,Initialize,The length of the statement  "				EnglishDescription = "Sends a SpellMissLog packet to everyone in the area where you are the caster and everyone within 10y radius is the targets."; " is 147.
Long Statement,WCell.RealmServer.Commands,SendSpellDamageLogCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\DevCommands.cs,Process,The length of the statement  "				CombatLogHandler.SendMagicDamage(trigger.Args.Target' trigger.Args.User' spell' damage' overkill' schools' absorbed' resisted' blocked' unkBool' flags); " is 152.
Long Statement,WCell.RealmServer.Commands,LoadNPCsCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\DevCommands.cs,Initialize,The length of the statement  "				EnglishDescription = "Loads all NPC definitions from files and/or DB. e: Load entries; s: Load Spawns; w: Load Waypoints (together with s)"; " is 140.
Long Statement,WCell.RealmServer.Commands,ReloadNPCsCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\DevCommands.cs,Initialize,The length of the statement  "				EnglishDescription = "Reloads all NPC definitions from files and/or DB. e: Load entries; s: Load Spawns; w: Load Waypoints (together with s)"; " is 142.
Long Statement,WCell.RealmServer.Commands,GCCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\DevCommands.cs,Initialize,The length of the statement  "				EnglishDescription = "Don't use this unless you are well aware of the stages and heuristics involved in the GC process!"; " is 121.
Long Statement,WCell.RealmServer.Commands,InfoCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\DevCommands.cs,Process,The length of the statement  "			trigger.Reply(RealmServer.Title + " located at: " + RealmServerConfiguration.ExternalAddress + " (Required Client: " + WCellInfo.RequiredVersion.BasicString + ")"); " is 164.
Long Statement,WCell.RealmServer.Commands,ObjectPoolCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\DevCommands.cs,ShowInfo,The length of the statement  "				trigger.Reply("Biggest Pool ({0}): {1} - Pool with most Objects checked out ({2}): {3}"' biggest.AvailableCount' biggest' sparsest.ObtainedCount' sparsest); " is 156.
Long Statement,WCell.RealmServer.Commands,CreateGuildCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\GuildCommands.cs,Process,The length of the statement  "						trigger.Reply("Could not create Guild. You did not select a Character to be the Guild leader. Use the -n switch to specify the leader by name."); " is 145.
Long Statement,WCell.RealmServer.Commands,GuildChatCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\GuildCommands.cs,Initialize,The length of the statement  "				EnglishDescription = "Sends the given text to your' your target's or the specified Guild. -n can be ommited if not used by/on a Character."; " is 140.
Long Statement,WCell.RealmServer.Commands,InstanceCreateCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\InstanceCommand.cs,Initialize,The length of the statement  "				EnglishDescription = "Creates a new Instance of the given Map. -d allows to specify the difficulty (value between 0 and 3). -e enters it right away."; " is 150.
Long Statement,WCell.RealmServer.Commands,InstanceDeleteCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\InstanceCommand.cs,Initialize,The length of the statement  "				EnglishDescription = "Delets the Instance of the given Map with the given Id' or the current one if no arguments are supplied."; " is 128.
Long Statement,WCell.RealmServer.Commands,StripCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\ItemCommands.cs,Initialize,The length of the statement  "				EnglishDescription = "Strips the Target naked and puts all the equipment into his/her bag (given there is enough space)"; " is 121.
Long Statement,WCell.RealmServer.Commands,CreateSetCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\ItemCommands.cs,Initialize,The length of the statement  "				EnglishDescription = "Creates all items of the set with the given id and puts them into a new bag which gets auto-equipped (requires free bag-slot)"; " is 149.
Long Statement,WCell.RealmServer.Commands,EnchantItemCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\ItemCommands.cs,Initialize,The length of the statement  "				EnglishDescription = "Enchants the Item at the given slot. Alternatively the -l switch lists all enchants which match the given text"; " is 134.
Long Statement,WCell.RealmServer.Commands,WhereCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\PlayerCommands.cs,Process,The length of the statement  "			trigger.Reply("Position X: " + obj.Position.X + "' Y: " + obj.Position.Y + "' Z: " + obj.Position.Z + "' O: " + obj.Orientation + " is 129.
Long Statement,WCell.RealmServer.Commands,SendQuestPushResultCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\QuestCommands.cs,Initialize,The length of the statement  "				EnglishDescription = "Sends the SendQuestPushResult packet with the given reason' currently sends from triggering char"; " is 120.
Long Statement,WCell.RealmServer.Commands,KickCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\AdminCommands.cs,Initialize,The length of the statement  "			EnglishDescription = "Kicks your current target with an optional delay in seconds (default: 20 - can be 0) and an optional reason."; " is 132.
Long Statement,WCell.RealmServer.Commands,KickCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\AdminCommands.cs,Process,The length of the statement  "				// Sits the char down and renders him/her unable to do anything for the given delay' after which he/she gets disconnected " is 121.
Long Statement,WCell.RealmServer.Commands,RealmIPCCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\AdminCommands.cs,Initialize,The length of the statement  "			//Description = "Provides commands to manage the IPC-device that connects Realm- and Auth-Server. Use -0 to turn it off and -1 to turn it on."; " is 143.
Long Statement,WCell.RealmServer.Commands,ToggleLevelCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\AdminCommands.cs,Initialize,The length of the statement  "				EnglishDescription = "Globally toggles whether messages of the corresponding level should be logged (to console' as well as to file or any other target that is specified)."; " is 173.
Long Statement,WCell.RealmServer.Commands,ClearAreaCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\MiscCommands.cs,Initialize,The length of the statement  "			EnglishDescription = "Clears all Objects' Corpses and NPCs around yourself in the given or default radius (" + DefaultRadius + ")' up to a max of 100 yards."; " is 158.
Long Statement,WCell.RealmServer.Commands,ListPlayersCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\MiscCommands.cs,Initialize,The length of the statement  "			EnglishDescription = "Lists all currently logged in Players' or only those that match the given filter(s) - Example: ListPlayers -m kalimdor"; " is 142.
Long Statement,WCell.RealmServer.Commands,TeleportCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\MovementCommands.cs,Process,The length of the statement  "							var perfectMatch = locs.FirstOrDefault(loc => loc.DefaultName.Equals(targetName' StringComparison.InvariantCultureIgnoreCase)); " is 127.
Long Statement,WCell.RealmServer.Commands,GoToCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\MovementCommands.cs,Initialize,The length of the statement  "				"Teleports the Target to Character/Unit/GameObject. If Unit or GO are specified' target will be teleported to the nearest one [NYI]."; " is 134.
Long Statement,WCell.RealmServer.Commands,NPCSpawnCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\NPCCommands.cs,Initialize,The length of the statement  "				EnglishDescription = "Creates the NPC-spawnpoint with the given id. -c switch simply creates the spawnpoint that is closest to you"; " is 132.
Long Statement,WCell.RealmServer.Content,ContentMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Content\ContentMgr.cs,GetMapper,The length of the statement  "					"DataHolder Type \"{0}\" was not registered - Make sure that it's XML definition was defined and associated correctly. " + " is 122.
Long Statement,WCell.RealmServer.Content,ContentMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Content\ContentMgr.cs,CheckVersion,The length of the statement  "				//    throw new ContentException(string.Format("Unable to read version from Database due to an invalid format: " + versionStr)); " is 128.
Long Statement,WCell.RealmServer.Content,ContentMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Content\ContentMgr.cs,CheckVersion,The length of the statement  "				//    throw new ContentException(string.Format("Supplied database's version is {0}' while content provider only supports versions {1} through {2}"' " is 147.
Long Statement,WCell.RealmServer.Editor.Menus,MapEditorMenu,C:\repos\WCell_WCell\Services\WCell.RealmServer\Editor\Menus\MapEditorMenu.cs,GetText,The length of the statement  "			var text = RealmLocalizer.Instance.Translate(convo.Character.Locale' RealmLangKey.EditorMapMenuText) + GossipTextHelper.Newline; " is 128.
Long Statement,WCell.RealmServer.Gossips,StaticGossipEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Gossips\GossipEntry.cs,FinalizeDataHolder,The length of the statement  "					entry => !string.IsNullOrEmpty(((StaticGossipText)entry).TextFemale) || !string.IsNullOrEmpty(((StaticGossipText)entry).TextMale) " is 129.
Long Statement,WCell.RealmServer.Handlers,GroupHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GroupHandler.cs,GroupPromoteFlagRequest,The length of the statement  "			if (group.CheckAction(member' targetMember' targetMember != null ? targetMember.Name : String.Empty' GroupPrivs.Leader) == " is 122.
Long Statement,WCell.RealmServer.Handlers,AchievementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AchievementHandler.cs,SendAchievementData,The length of the statement  "//			using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ALL_ACHIEVEMENT_DATA' 4 * 2 + chr.Achievements.AchievementsCount * 4 * 2 + chr.Achievements.m_achivement_progress .Count* 7 * 4)) " is 196.
Long Statement,WCell.RealmServer.Handlers,AchievementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AchievementHandler.cs,SendAchievementData,The length of the statement  "			using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ALL_ACHIEVEMENT_DATA' chr.Achievements.AchievementsCount * 2 * 4 + 4)) " is 132.
Long Statement,WCell.RealmServer.Handlers,AchievementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AchievementHandler.cs,SendServerFirstAchievement,The length of the statement  "            using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SERVER_FIRST_ACHIEVEMENT' chr.Name.Length + 1 + 8 + 4 + 4)) " is 121.
Long Statement,WCell.RealmServer.Handlers,AchievementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AchievementHandler.cs,SendRespondInspectAchievements,The length of the statement  "			using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_RESPOND_INSPECT_ACHIEVEMENTS' chr.Achievements.AchievementsCount * 2 * 4 + 4 + 8)) " is 144.
Long Statement,WCell.RealmServer.Handlers,LFGHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\LFGHandler.cs,SendSearchResults,The length of the statement  "			// uint' uint' if (byte) { uint count' for (count) { long} }' uint count2' uint' for (count2) { long' uint flags' if (flags & 0x2) {string}' if (flags & 0x10) {for (3) byte}' if (flags & 0x80) {long' uint}}' uint count3' uint' for (count3) {long' uint flags' if (flags & 0x1) {byte' byte' byte' for (3) byte' uint' uint' uint' uint' uint' uint' float' float' uint' uint' uint' uint' uint' float' uint' uint' uint' uint' uint' uint}' if (flags&0x2) string' if (flags&0x4) byte' if (flags&0x8) long' if (flags&0x10) byte' if (flags&0x20) uint' if (flags&0x40) byte' if (flags& 0x80) {long' uint}} " is 594.
Long Statement,WCell.RealmServer.Handlers,AccountDataHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AccountDataHandler.cs,SendAccountDataTimes,The length of the statement  "					LogManager.GetCurrentClassLogger().Debug("Client was not properly logged in when sending ACCOUNT_DATA_TIMES: " + client); " is 121.
Long Statement,WCell.RealmServer.Handlers,CombatLogHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatLogHandler.cs,SendSpellMiss,The length of the statement  "				packet.Write(display);// TODO: test this value. Its a bool that seems to determine whether to display this packet in the combat log " is 131.
Long Statement,WCell.RealmServer.Handlers,LootHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\LootHandler.cs,SendRoll,The length of the statement  "				packet.Write((int)(item.Template.RandomSuffixFactor > 0 ? -item.Template.RandomSuffixId : item.Template.RandomPropertiesId)); " is 125.
Long Statement,WCell.RealmServer.Handlers,LootHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\LootHandler.cs,SendRollWon,The length of the statement  "				packet.Write((int)(item.Template.RandomSuffixFactor > 0 ? -item.Template.RandomSuffixId : item.Template.RandomPropertiesId)); " is 125.
Long Statement,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,HandlePetitionOffer,The length of the statement  "                    ArenaTeamHandler.SendResult(client' ArenaTeamCommandId.CREATE' string.Empty' namePlayer' ArenaTeamResult.ALREADY_IN_ARENA_TEAM_S); " is 130.
Long Statement,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,HandlePetitionOffer,The length of the statement  "                    ArenaTeamHandler.SendResult(client' ArenaTeamCommandId.CREATE' string.Empty' namePlayer' ArenaTeamResult.TARGET_TOO_LOW); " is 121.
Long Statement,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,HandlePetitionTurnIn,The length of the statement  "                ArenaTeamHandler.SendResult(client' ArenaTeamCommandId.CREATE' name' string.Empty' ArenaTeamResult.ALREADY_IN_ARENA_TEAM); " is 122.
Long Statement,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendPetitionQueryResponse,The length of the statement  "            using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PETITION_QUERY_RESPONSE' 4 + 8 + name.Length + 1 + 1 + 4 * 12 + 2 + 10)) " is 134.
Long Statement,WCell.RealmServer.Handlers,PetHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\PetHandler.cs,SendSpells,The length of the statement  "		    using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PET_SPELLS' 20 + (PetConstants.PetActionCount * 4) + 1 + (pet.Spells.Count) + 1 + (0))) " is 149.
Long Statement,WCell.RealmServer.Handlers,PetHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\PetHandler.cs,SendPlayerPossessedPetSpells,The length of the statement  "            using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PET_SPELLS' 20 + (PetConstants.PetActionCount * 4) + 1 + (0) + 1 + (0))) " is 134.
Long Statement,WCell.RealmServer.Handlers,ItemHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ItemHandler.cs,SendItemNameQueryResponse,The length of the statement  "			using (var outPacket = new RealmPacketOut(RealmServerOpCode.SMSG_ITEM_NAME_QUERY_RESPONSE' 4 + item.DefaultName.Length)) " is 120.
Long Statement,WCell.RealmServer.Handlers,GossipHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GossipHandler.cs,HandleGossipSelectOption,The length of the statement  "			var unknown = packet.ReadUInt32();				// usually Zero' sometimes in the thousands for quest givers' Same as the first int sent in SMSG_GOSSIP_MESSAGE " is 149.
Long Statement,WCell.RealmServer.Handlers,ChannelHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ChannelHandler.cs,HandleOwnerChange,The length of the statement  "			var chan = ChatChannel.EnsurePresence(client.ActiveCharacter' channelName' newOwner' out senderMember' out targetMember); " is 121.
Long Statement,WCell.RealmServer.Handlers,ChannelHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ChannelHandler.cs,HandleSetModeratorRequest,The length of the statement  "			var chan = ChatChannel.EnsurePresence(client.ActiveCharacter' channelName' targetName' out senderMember' out targetMember); " is 123.
Long Statement,WCell.RealmServer.Handlers,ChannelHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ChannelHandler.cs,HandleUnsetModeratorRequest,The length of the statement  "			var chan = ChatChannel.EnsurePresence(client.ActiveCharacter' channelName' targetName' out senderMember' out targetMember); " is 123.
Long Statement,WCell.RealmServer.Handlers,ChannelHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ChannelHandler.cs,HandleMuteRequest,The length of the statement  "			var chan = ChatChannel.EnsurePresence(client.ActiveCharacter' channelName' targetName' out senderMember' out targetMember); " is 123.
Long Statement,WCell.RealmServer.Handlers,ChannelHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ChannelHandler.cs,HandleUnMuteRequest,The length of the statement  "			var chan = ChatChannel.EnsurePresence(client.ActiveCharacter' channelName' targetName' out senderMember' out targetMember); " is 123.
Long Statement,WCell.RealmServer.Instances,InstanceBinding,C:\repos\WCell_WCell\Services\WCell.RealmServer\Instances\InstanceBinding.cs,Equals,The length of the statement  "			return obj._difficultyIndex == _difficultyIndex && obj.BindTime.Equals(BindTime) && Equals(obj.MapId' MapId) && obj.InstanceId == InstanceId; " is 141.
Long Statement,WCell.RealmServer.Spells.Auras,AuraHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AuraHandler.cs,AddAuraGroupEvaluator,The length of the statement  "				throw new InvalidOperationException("Cannot set an Aura Group Evaluator at runtime because Aura Group IDs cannot be re-evaluated at this time. " + " is 146.
Long Statement,WCell.RealmServer.Spells.Auras,Aura,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Aura.cs,RemoveVisibleEffects,The length of the statement  "					//SpellHandler.SendSpellCooldown(m_auras.Owner' ((Character)m_auras.Owner).Client' m_spell.Id' (ushort)m_spell.GetCooldown(m_auras.Owner)); " is 139.
Long Statement,WCell.RealmServer.Spells.Auras,AuraCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\AuraCollection.cs,AddAura,The length of the statement  "				LogManager.GetCurrentClassLogger().Warn("Tried to add Aura \"{0}\" by \"{1}\" when it was already added' to: {2}"' aura' aura.CasterReference' Owner); " is 150.
Long Statement,WCell.RealmServer.Spells.Auras,AuraCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\AuraCollection.cs,DumpTo,The length of the statement  "						receiver.SendMessage("	{0}{1}"' aura.Spell' aura.HasTimeout ? " [" + TimeSpan.FromMilliseconds(aura.TimeLeft).Format() + "]" : ""); " is 131.
Long Statement,WCell.RealmServer.Spells.Auras.Misc,ToggleAuraHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Misc\ToggleAuraHandler.cs,Apply,The length of the statement  "				LogManager.GetCurrentClassLogger().Warn("Tried to toggle on already created Aura \"{0}\" on {1}"' activeToggleAura' Owner); " is 123.
Long Statement,WCell.RealmServer.Spells.Auras.Misc,TriggerDelayedEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Misc\TriggerDelayedEffectHandler.cs,CheckInitialize,The length of the statement  "				log.Warn("Tried to cast Spell \"{0}\" which has invalid TriggerSpellId {1}"' m_spellEffect.Spell' m_spellEffect.TriggerSpellId); " is 128.
Long Statement,WCell.RealmServer.Spells.Auras.Misc,ModAPByArmorHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Mod\ModAPByArmorHandler.cs,Apply,The length of the statement  "			//    LogManager.GetCurrentClassLogger().Error("ModAPByArmorHandler is missing dummy mod effect in Spell {0}"' SpellEffect.Spell); " is 130.
Long Statement,WCell.RealmServer.Spells.Auras.Misc,CharmAuraHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Misc\CharmAuraHandler.cs,CheckInitialize,The length of the statement  "					LogManager.GetCurrentClassLogger().Warn("{0} tried to Charm {1} which is not an NPC' but Player charming is not yet supported."' caster' target); " is 145.
Long Statement,WCell.RealmServer.Spells.Effects,ApplyGlyphEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\ApplyGlyph.cs,Apply,The length of the statement  "			chr.ApplyGlyph((byte)m_cast.GlyphSlot' GlyphInfoHolder.GetPropertiesEntryForGlyph((uint)m_cast.Spell.Effects[0].MiscValue)); " is 124.
Long Statement,WCell.RealmServer.Spells.Effects,RemoveImpairingEffectsHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\RemoveImpairingEffects.cs,Apply,The length of the statement  "                chr.Auras.RemoveWhere(aura => SpellConstants.MoveMechanics[(int)aura.Spell.Mechanic] || aura.Handlers.Any(handler => SpellConstants.MoveMechanics[(int)handler.SpellEffect.Mechanic])); " is 183.
Long Statement,WCell.RealmServer.Spells.Effects,AddProficiencyHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\AddProficiencyHandler.cs,Apply,The length of the statement  "			if (Effect.Spell.RequiredItemClass == ItemClass.Weapon && !chr.Skills.WeaponProficiency.HasAnyFlag(Effect.Spell.RequiredItemSubClassMask)) " is 138.
Long Statement,WCell.RealmServer.Spells.Effects,AddProficiencyHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\AddProficiencyHandler.cs,Apply,The length of the statement  "			else if (Effect.Spell.RequiredItemClass == ItemClass.Armor && !chr.Skills.ArmorProficiency.HasAnyFlag(Effect.Spell.RequiredItemSubClassMask)) " is 141.
Long Statement,WCell.RealmServer.Spells.Effects,BindEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\Bind.cs,Apply,The length of the statement  "				location = new WorldZoneLocation(m_cast.TargetMap' m_cast.TargetLoc' m_cast.TargetMap.GetZone(m_cast.TargetLoc.X' m_cast.TargetLoc.Y).Template); " is 144.
Long Statement,WCell.RealmServer.Spells.Effects,ChargeEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\Charge.cs,Apply,The length of the statement  "			MovementHandler.SendMoveToPacket(m_cast.CasterUnit' ref direction' m_cast.CasterUnit.Orientation' 3' MonsterMoveFlags.Walk); " is 124.
Long Statement,WCell.RealmServer.Spells.Effects,PortalHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\PortalHandler.cs,Apply,The length of the statement  "			var portal = Portal.Create(new WorldLocation(m_cast.TargetMap' m_cast.CasterObject.Position)' new WorldLocation(m_cast.TargetMap' m_cast.TargetLoc)); " is 149.
Long Statement,WCell.RealmServer.Spells.Effects,DispelEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\Dispel.cs,Apply,The length of the statement  "						var dispelResistance = auraCaster.Auras.GetModifiedInt(SpellModifierType.DispelResistance' aura.Spell' 1);	// base chance of 1% " is 127.
Long Statement,WCell.RealmServer.Spells.Effects,EnergizeEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\Energize.cs,InitializeTarget,The length of the statement  "				return ((Unit)target).PowerType == PowerType.Mana ? SpellFailedReason.AlreadyAtFullMana : SpellFailedReason.AlreadyAtFullPower; " is 127.
Long Statement,WCell.RealmServer.Spells.Effects,SummonEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\Summon\Summon.cs,Initialize,The length of the statement  "				LogManager.GetCurrentClassLogger().Warn("The NPC for Summon-Spell {0} does not exist: {1} (Are NPCs loaded?)"' Effect.Spell' id); " is 129.
Long Statement,WCell.RealmServer.Spells.Effects,TriggerSpellEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\TriggerSpell.cs,TriggerSpell,The length of the statement  "			m_cast.Trigger(triggerSpell' Effect' (triggerSpell.Effects.Length == 1 && m_targets != null) ? m_targets.ToArray() : null); " is 123.
Long Statement,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,CreateAuraEffectHandlers,The length of the statement  "				LogUtil.ErrorException(e' "Failed to create AuraEffectHandlers for: " + effects.GetWhere(effect => effect != null).Spell); " is 122.
Long Statement,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,CheckItemRestrictionsWithout,The length of the statement  "					if (inv.Iterate(ItemMgr.EquippableInvSlotsByClass[(int)RequiredItemClass]' i => i == exclude || !CheckItemRestriction(i))) " is 122.
Long Statement,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,CheckItemRestrictionsWithout,The length of the statement  "				if (inv.Iterate(RequiredItemInventorySlotMask' item => item == exclude || (item.Template.InventorySlotMask & RequiredItemInventorySlotMask) == 0 " is 144.
Long Statement,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,Init2,The length of the statement  "			RequiresDeadTarget = HasEffect(SpellEffectType.Resurrect) || HasEffect(SpellEffectType.ResurrectFlat) || HasEffect(SpellEffectType.SelfResurrect); " is 146.
Long Statement,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,Init2,The length of the statement  "			// unreliable: TargetFlags.HasAnyFlag(SpellTargetFlags.Corpse | SpellTargetFlags.PvPCorpse | SpellTargetFlags.UnitCorpse); " is 122.
Long Statement,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,Dump,The length of the statement  "				writer.WriteLine(indent + "SpellClassMask: {0}{1}{2}"' SpellClassMask[0].ToString("X8")' SpellClassMask[1].ToString("X8")' SpellClassMask[2].ToString("X8")); " is 157.
Long Statement,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,InitDbcs,The length of the statement  "			mappeddbcDurationReader = new MappedDBCReader<DurationEntry' DBCDurationConverter>(RealmServerConfiguration.GetDBCFile(WCellConstants.DBC_SPELLDURATION)); " is 154.
Long Statement,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,InitDbcs,The length of the statement  "			mappeddbcRadiusReader = new MappedDBCReader<float' DBCRadiusConverter>(RealmServerConfiguration.GetDBCFile(WCellConstants.DBC_SPELLRADIUS)); " is 140.
Long Statement,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,InitDbcs,The length of the statement  "			mappeddbcCastTimeReader = new MappedDBCReader<uint' DBCCastTimeConverter>(RealmServerConfiguration.GetDBCFile(WCellConstants.DBC_SPELLCASTTIMES)); " is 146.
Long Statement,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,InitDbcs,The length of the statement  "			mappeddbcRangeReader = new MappedDBCReader<SimpleRange' DBCRangeConverter>(RealmServerConfiguration.GetDBCFile(WCellConstants.DBC_SPELLRANGE)); " is 143.
Long Statement,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,InitDbcs,The length of the statement  "			//DBCMechanicReader = new DBCReader<SpellMechanic' DBCMechanicConverter>(RealmServerConfiguration.GetDBCFile(WCellDef.DBC_SPELLMECHANIC)); " is 138.
Long Statement,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,InitDbcs,The length of the statement  "			mappeddbcMechanicReader = new MappedDBCReader<string' DBCMechanicConverter>(RealmServerConfiguration.GetDBCFile(WCellConstants.DBC_SPELLMECHANIC)); " is 147.
Long Statement,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,InitDbcs,The length of the statement  "			mappeddbcRuneCostReader = new MappedDBCReader<RuneCostEntry' DBCSpellRuneCostConverter>(RealmServerConfiguration.GetDBCFile(WCellConstants.DBC_SPELLRUNECOST)); " is 159.
Long Statement,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,CreateAuras,The length of the statement  "					var newAura = target.Auras.CreateAura(CasterReference' Spell' info.Handlers' TargetItem' !Spell.IsPreventionDebuff && !hostile); " is 128.
Long Statement,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,CreateAuras,The length of the statement  "						if (!Spell.IsPreventionDebuff && !((Spell.AttributesExC & SpellAttributesExC.NoInitialAggro) != 0) && hostile && target.IsInWorld && target.IsAlive) " is 148.
Long Statement,WCell.RealmServer.Spells,RuneSet,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\RuneSet.cs,PackRuneSetMask,The length of the statement  "				setMask |= (((int)ActiveRunes[i] + 1) << (SpellConstants.BitsPerRune * i));	// always add one (since the lowest rune starts at 0) " is 129.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendSpellGo,The length of the statement  "			int len = 24 + (hitTargets != null ? hitTargets.Count * 8 : 0) + (missedTargets != null ? missedTargets.Count * 10 : 0); " is 120.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.InstantKill] = (cast' effect) => new InstantKillEffectHandler(cast' effect);								// 1 " is 129.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.SchoolDamage] = (cast' effect) => new SchoolDamageEffectHandler(cast' effect);								// 2 " is 131.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.TeleportUnits] = (cast' effect) => new TeleportUnitsEffectHandler(cast' effect);							// 5 " is 132.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.ApplyAura] = (cast' effect) => new ApplyAuraEffectHandler(cast' effect);									// 6 " is 126.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.EnvironmentalDamage] = (cast' effect) => new EnvironmentalDamageEffectHandler(cast' effect);				// 7 " is 141.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.PowerDrain] = (cast' effect) => new PowerDrainEffectHandler(cast' effect);									// 8 " is 128.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.HealthLeech] = (cast' effect) => new HealthLeechEffectHandler(cast' effect);								// 9 " is 129.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.Heal] = (cast' effect) => new HealEffectHandler(cast' effect);												// 10 " is 120.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.Bind] = (cast' effect) => new BindEffectHandler(cast' effect);												// 11 " is 120.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.QuestComplete] = (cast' effect) => new QuestCompleteEffectHandler(cast' effect);							// 16 " is 133.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.WeaponDamageNoSchool] = (cast' effect) => new WeaponDamageNoSchoolEffectHandler(cast' effect);				// 17 " is 144.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.Resurrect] = (cast' effect) => new ResurrectEffectHandler(cast' effect);									// 18 " is 127.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.AddExtraAttacks] = (cast' effect) => new AddExtraAttacksEffectHandler(cast' effect);						// 19 " is 136.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.CreateItem] = (cast' effect) => new CreateItemEffectHandler(cast' effect);									// 24 " is 129.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.Weapon] = (cast' effect) => new WeaponEffectHandler(cast' effect);											// 25 " is 123.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.PersistantAreaAura] = (cast' effect) => new PersistantAreaAuraEffectHandler(cast' effect);					// 27 " is 141.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.Summon] = (cast' effect) => new SummonEffectHandler(cast' effect);											// 28 " is 123.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.Energize] = (cast' effect) => new EnergizeEffectHandler(cast' effect);										// 30 " is 126.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.WeaponPercentDamage] = (cast' effect) => new WeaponDamageEffectHandler(cast' effect);						// 31 " is 137.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.OpenLock] = (cast' effect) => new OpenLockEffectHandler(cast' effect);										// 33 " is 126.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.ApplyAreaAura] = (cast' effect) => new ApplyAreaAuraEffectHandler(cast' effect);							// 35 " is 133.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.ApplyRaidAura] = (cast' effect) => new ApplyAreaAura2EffectHandler(cast' effect);							// 65 " is 134.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.LearnSpell] = (cast' effect) => new LearnSpellEffectHandler(cast' effect);									// 36 " is 129.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.Dispel] = (cast' effect) => new DispelEffectHandler(cast' effect);											// 38 " is 123.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.Language] = (cast' effect) => new LanguageEffectHandler(cast' effect);										// 39 " is 126.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.DualWeild] = (cast' effect) => new DualWeildEffectHandler(cast' effect);									// 40 " is 127.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.SkillStep] = (cast' effect) => new SkillStepEffectHandler(cast' effect);									// 44 " is 127.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.Stealth] = (cast' effect) => new StealthEffectHandler(cast' effect);										// 48 " is 124.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.SummonObject] = (cast' effect) => new SummonObjectEffectHandler(cast' effect);								// 50 " is 132.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.SummonObjectWild] = (cast' effect) => new SummonObjectWildEffectHandler(cast' effect);						// 76 " is 138.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.EnchantItem] = (cast' effect) => new EnchantItemEffectHandler(cast' effect);								// 53 " is 130.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.EnchantItemTemporary] = (cast' effect) => new EnchantItemTemporaryEffectHandler(cast' effect);				// 54 " is 144.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.TameCreature] = (cast' effect) => new TameCreatureEffectHandler(cast' effect);								// 55 " is 132.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.SummonPet] = (cast' effect) => new SummonPetEffectHandler(cast' effect);									// 56 " is 127.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.WeaponDamage] = (cast' effect) => new WeaponDamageEffectHandler(cast' effect);								// 58 " is 132.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.Proficiency] = (cast' effect) => new AddProficiencyHandler(cast' effect);									// 60 " is 128.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.SendEvent] = (cast' effect) => new SendEventEffectHandler(cast' effect);									// 61 " is 127.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.TriggerSpell] = (cast' effect) => new TriggerSpellEffectHandler(cast' effect);								// 64 " is 132.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.CreateManaGem] = (cast' effect) => new CreateManaGemEffectHandler(cast' effect);							// 66 " is 133.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.HealMaxHealth] = (cast' effect) => new HealMaxHealthEffectHandler(cast' effect);							// 67 " is 133.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.InterruptCast] = (cast' effect) => new InterruptCastEffectHandler(cast' effect);							// 68 " is 133.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.Distract] = (cast' effect) => new DistractEffectHandler(cast' effect);										// 69 " is 126.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.ApplyGlyph] = (cast' effect) => new ApplyGlyphEffectHandler(cast' effect);									// 74 " is 129.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.ScriptEffect] = (cast' effect) => new ScriptEffectHandler(cast' effect);									// 77 " is 127.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.Sanctuary] = (cast' effect) => new RemoveImpairingEffectsHandler(cast' effect);							// 79 " is 132.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.AddComboPoints] = (cast' effect) => new AddComboPointsEffectHandler(cast' effect);							// 80 " is 135.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.Duel] = (cast' effect) => new DuelEffectHandler(cast' effect);												// 83 " is 120.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.SummonPlayer] = (cast' effect) => new SummonPlayerEffectHandler(cast' effect);								// 85 " is 132.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.KillCreditPersonal] = (cast' effect) => new KillCreditPersonal(cast' effect);								// 90 " is 131.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.SelfResurrect] = (cast' effect) => new SelfResurrectEffectHandler(cast' effect);							// 94 " is 133.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.Skinning] = (cast' effect) => new SkinningEffectHandler(cast' effect);										// 95 " is 126.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.Charge] = (cast' effect) => new ChargeEffectHandler(cast' effect);											// 96 " is 123.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.SummonAllTotems] = (cast' effect) => new SummonAllTotemsHandler(cast' effect);								// 97 " is 132.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.KnockBack] = (cast' effect) => new KnockBackEffectHandler(cast' effect);									// 98 " is 127.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.Disenchant] = (cast' effect) => new DisenchantEffectHandler(cast' effect);									// 99 " is 129.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.DismissPet] = (cast' effect) => new DismissPetEffectHandler(cast' effect);									// 102 " is 130.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.DispelMechanic] = (cast' effect) => new DispelMechanicEffectHandler(cast' effect);							// 108 " is 136.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.SummonDeadPet] = (cast' effect) => new SummonDeadPetEffectHandler(cast' effect);							// 109 " is 134.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.ResurrectFlat] = (cast' effect) => new ResurrectFlatEffectHandler(cast' effect);							// 113 " is 134.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.Skill] = (cast' effect) => new SkillEffectHandler(cast' effect);											// 118 " is 122.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.ApplyPetAura] = (cast' effect) => new ApplyPetAuraEffectHandler(cast' effect);								// 119 " is 133.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.NormalizedWeaponDamagePlus] = (cast' effect) => new NormalizedWeaponDamagePlusEffectHandler(cast' effect); // 121 " is 154.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.Video] = (cast' effect) => new VideoEffectHandler(cast' effect);											// 123 " is 122.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.StealBeneficialBuff] = (cast' effect) => new StealBeneficialBuffEffectHandler(cast' effect);				// 126 " is 143.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.Prospecting] = (cast' effect) => new ProspectingEffectHandler(cast' effect);								// 127 " is 131.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.ApplyStatAura] = (cast' effect) => new ApplyStatAuraEffectHandler(cast' effect);							// 128 " is 134.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.ApplyStatAuraPercent] = (cast' effect) => new ApplyStatAuraPercentEffectHandler(cast' effect);				// 129 " is 145.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.PlayMusic] = (cast' effect) => new PlayMusicEffectHandler(cast' effect);									// 132 " is 128.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.ForgetSpecialization] = (cast' effect) => new ForgetSpecializationEffectHandler(cast' effect);				// 133 " is 145.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.RestoreHealthPercent] = (cast' effect) => new RestoreHealthPercentEffectHandler(cast' effect);				// 136 " is 145.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.RestoreManaPercent] = (cast' effect) => new RestoreManaPercentEffectHandler(cast' effect);					// 137 " is 142.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.ClearQuest] = (cast' effect) => new ClearQuestEffectHandler(cast' effect);									// 139 " is 130.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.TriggerSpellFromTargetWithCasterAsTarget] = (cast' effect) => new TriggerSpellFromTargetWithCasterAsTargetHandler(cast' effect);					//140 " is 179.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.ApplyAuraToMaster] = (cast' effect) => new ApplyAuraToMasterEffectHandler(cast' effect);					// 143 " is 140.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.TriggerRitualOfSummoning] = (cast' effect) => new TriggerRitualOfSummoningEffectHandler(cast' effect);		// 151 " is 151.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.TeachFlightPath] = (cast' effect) => new TeachFlightPathEffectHandler(cast' effect);						// 154 " is 137.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.FeedPet] = (cast' effect) => new FeedPetEffectHandler(cast' effect);										// 101 " is 125.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.SummonObjectSlot1] = (cast' effect) => new SummonObjectSlot1Handler(cast' effect);							// 104 " is 136.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.SummonObjectSlot2] = (cast' effect) => new SummonObjectSlot2Handler(cast' effect);							// 105 " is 136.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.SummonObjectSlot3] = (cast' effect) => new SummonObjectSlot1Handler(cast' effect);							// 106 " is 136.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.SummonObjectSlot4] = (cast' effect) => new SummonObjectSlot2Handler(cast' effect);							// 107 " is 136.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.DestroyAllTotems] = (cast' effect) => new DestroyAllTotemsHandler(cast' effect);							// 110 " is 134.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.SetNumberOfTalentGroups] = (cast' effect) => new SetNumberOfTalentGroupsHandler(cast' effect);				// 161 " is 145.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,InitEffectHandlers,The length of the statement  "			SpellEffectCreators[(int)SpellEffectType.ActivateTalentGroup] = (cast' effect) => new ActivateTalentGroupHandler(cast' effect);						// 162 " is 139.
Long Statement,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,UnsetHandler,The length of the statement  "			//if (SpellEffectCreators[(int)type] != null && SpellEffectCreators[(int)type].GetType() == typeof(NotImplementedEffectHandler)) " is 128.
Long Statement,WCell.RealmServer.Spells,SpellEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellEffectHandler.cs,ToString,The length of the statement  "			return GetType().Name + " - Spell: " + Effect.Spell.FullName + (m_cast != null ? ("' Caster: " + m_cast.CasterObject) : ""); " is 124.
Long Statement,WCell.RealmServer.Spells,SpellTargetCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Targeting\SpellTargetCollection.cs,AddSingleTarget,The length of the statement  "					"Consider using an \"AddArea*\" adder to add the best choice from any possible nearby target for spell: " + FirstHandler.Effect.Spell); " is 135.
Long Statement,WCell.RealmServer.Spells,SpellTargetCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Targeting\SpellTargetCollection.cs,RevalidateAll,The length of the statement  "						if (ValidateTarget(target' DefaultTargetDefinitions.GetTargetFilter(firstHandler.Effect.ImplicitTargetA)) == SpellFailedReason.Ok) " is 130.
Long Statement,WCell.RealmServer.Spells.Targeting,DefaultTargetAdders,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Targeting\DefaultTargetAdders.cs,AddTargetsInArea,The length of the statement  "				//if IsAllied (used by group/raid spell targeting) it's save to asume the limit is the raid max size (40 players) since some spells have wrong dbc values " is 153.
Long Statement,WCell.RealmServer.Spells.Targeting,DefaultTargetAdders,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Targeting\DefaultTargetAdders.cs,AddAllParty,The length of the statement  "				targets.AddAreaSource(cast.Spell.HasHarmfulEffects ? (TargetFilter)DefaultTargetFilters.IsFriendly : DefaultTargetFilters.IsHostile' ref  failReason' radius); " is 158.
Long Statement,WCell.RealmServer.Battlegrounds,Battleground,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\Battleground.cs,CreateAllianceTeam,The length of the statement  "				_instanceQueue != null ? _instanceQueue.GetTeamQueue(BattlegroundSide.Alliance) : null' BattlegroundSide.Alliance' this); " is 121.
Long Statement,WCell.RealmServer.Battlegrounds,BattlegroundTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\BattlegroundTemplate.cs,FinalizeDataHolder,The length of the statement  "			Difficulties = new PvPDifficultyEntry[BattlegroundMgr.PVPDifficultyReader.Entries.Values.Count(entry => (entry.mapId == MapId))]; " is 129.
Long Statement,WCell.RealmServer.Battlegrounds,BattlegroundMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\BattlegroundMgr.cs,InitializeBGs,The length of the statement  "            BattlemasterListReader = new MappedDBCReader<BattlemasterList' BattlemasterConverter>(RealmServerConfiguration.GetDBCFile(WCellConstants.DBC_BATTLEMASTERLIST)); " is 160.
Long Statement,WCell.RealmServer.Battlegrounds,BattlegroundMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\BattlegroundMgr.cs,InitializeBGs,The length of the statement  "            PVPDifficultyReader = new MappedDBCReader<PvPDifficultyEntry' PvPDifficultyConverter>(RealmServerConfiguration.GetDBCFile(WCellConstants.DBC_PVPDIFFICULTY)); " is 157.
Long Statement,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,OnMove,The length of the statement  "							Achievements.CheckPossibleAchievementUpdates(AchievementCriteriaType.FallWithoutDying' (uint)(m_fallStartHeight - m_position.Z)); " is 129.
Long Statement,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,SetArenaTeamInfoField,The length of the statement  "			SetUInt32((int)PlayerFields.ARENA_TEAM_INFO_1_1 + ((int)slot * (int)ArenaTeamInfoType.ARENA_TEAM_END) + (int)type' value); " is 122.
Long Statement,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,SetQuestCount,The length of the statement  "			var field = (slot * QuestConstants.UpdateFieldCountPerQuest) + PlayerFields.QUEST_LOG_1_3 + ((int)interactionIndex >> 1); " is 121.
Long Statement,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,GetInstanceDifficulty,The length of the statement  "			return m_groupMember == null ? (isRaid ? (uint)m_record.RaidDifficulty : (uint)m_record.DungeonDifficulty) : m_groupMember.Group.DungeonDifficulty; " is 147.
Long Statement,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,OnKilled,The length of the statement  "					Achievements.CheckPossibleAchievementUpdates(AchievementCriteriaType.KilledByCreature' (uint)((NPC)action.Attacker).Entry.NPCId); " is 129.
Long Statement,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,MayAttack,The length of the statement  "			return m_faction.Enemies.Contains(opFaction) || (!m_faction.Friends.Contains(opFaction) && m_reputations.CanAttack(opFaction)); " is 127.
Long Statement,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,SetExploredZones,The length of the statement  "				for (var field = PlayerFields.EXPLORED_ZONES_1; field < PlayerFields.EXPLORED_ZONES_1 + UpdateFieldMgr.ExplorationZoneFieldSize; field++) " is 137.
Long Statement,WCell.RealmServer.Entities,Targeting,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Targeting.cs,GetNearbyHordeCharacters,The length of the statement  "				return obj.Map.GetObjectsInRadius<Character>(obj.Position' radius' otherObj => otherObj.FactionGroup == FactionGroup.Horde' obj.Phase); " is 135.
Long Statement,WCell.RealmServer.Entities,Targeting,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Targeting.cs,GetNearbyAllianceCharacters,The length of the statement  "				return obj.Map.GetObjectsInRadius<Character>(obj.Position' radius' otherObj => otherObj.FactionGroup == FactionGroup.Alliance' obj.Phase); " is 138.
Long Statement,WCell.RealmServer.Entities,Targeting,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Targeting.cs,GetNearbyRandomHostileCharacter,The length of the statement  "				LogManager.GetCurrentClassLogger().Warn("Called GetNearbyRandomHostileCharacter with radius = {0} > BroadcastRange = {1}"' radius' WorldObject.BroadcastRange); " is 159.
Long Statement,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,OnResistanceChanged,The length of the statement  "			SetInt32(UnitFields.RESISTANCES + (int)school' GetBaseResistance(school) + GetResistanceBuffPositive(school) - GetResistanceBuffNegative(school)); " is 146.
Long Statement,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,UpdateHealthAuraState,The length of the statement  "				AuraState = (AuraState & ~(AuraStateMask.Health35Percent | AuraStateMask.Health20Percent | AuraStateMask.HealthAbove75Pct)); " is 124.
Long Statement,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,UpdatePower,The length of the statement  "			internalPower += (PowerRegenPerTickActual * delayMillis) / (float)RegenerationFormulas.RegenTickDelayMillis;	// rounding " is 120.
Long Statement,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,CanSee,The length of the statement  "			if (this is Character && ((Character)this).Role.IsStaff && (!(obj is Character) || ((Character)obj).Role < ((Character)this).Role)) " is 131.
Long Statement,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,SpawnMinion,The length of the statement  "			//return SpawnMinion(entry' summonSpell' ref position' durationMillis != 0 ? DateTime.Now.AddMilliseconds(durationMillis) : (DateTime?)null); " is 141.
Long Statement,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,Proc,The length of the statement  "			for (var i = m_procHandlers.Count - 1; i >= 0; i--)	// need to reverse iteration because procs can be removed in the process " is 124.
Long Statement,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,DealSpellDamage,The length of the statement  "			//Your average resistance can still be anywhere betweeen 0% and 75%. If your average resistance is maxed out' then there's a really good chance of having 75% of the spell's damage be resisted.  " is 192.
Long Statement,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,DealSpellDamage,The length of the statement  "			//There's also a fairly good chance of having 100% of the spell's damage be resisted' a slightly lower chance of 50% of its damage being resisted' a small chances of only 25%' or even 0% of the damage being resisted.  " is 216.
Long Statement,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,GetAggroRange,The length of the statement  "			return Math.Max(AggroBaseRange + ((Level - victim.Level) * NPCEntry.AggroRangePerLevel)' NPCEntry.AggroRangeMinDefault); " is 120.
Long Statement,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,DecMechanicCount,The length of the statement  "						if (!m_canInteract && SpellConstants.InteractMechanics[(int)mechanic] && !IsAnySetNoCheck(SpellConstants.InteractMechanics)) " is 124.
Long Statement,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,IncMechImmunityCount,The length of the statement  "					((mechanic != SpellMechanic.Invulnerable && mechanic != SpellMechanic.Invulnerable_2) || !aura.Spell.Attributes.HasFlag(SpellAttributes.UnaffectedByInvulnerability))); " is 167.
Long Statement,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,WriteObjectCreationUpdate,The length of the statement  "             *       - Contents: PackedGuid transportGuid' Vector3 position' Vector3 transportPosition' float facing' float transportFacing " is 126.
Long Statement,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,WriteObjectCreationUpdate,The length of the statement  "            if (updateFlags.HasAnyFlag(UpdateFlags.Living | UpdateFlags.StationaryObject | UpdateFlags.StationaryObjectOnTransport)) " is 120.
Long Statement,WCell.RealmServer.Entities,Transport,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Transport.Update.cs,GenerateWaypoints,The length of the statement  "			LinkedList<TransportPathTempVertex> tempVertices = GetTempVertices(path' out pathFirstStop' out pathLastStop' out mapIds); " is 122.
Long Statement,WCell.RealmServer.Entities,GOMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GameObjectHandler.cs,HandleGameObjectUse,The length of the statement  "			if (go != null && go.CanUseInstantly(chr) && (chr.LooterEntry.Loot == null || !object.ReferenceEquals(chr.LooterEntry.Loot.Lootable' go) )) " is 139.
Long Statement,WCell.RealmServer.Formulas,RegenerationFormulas,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\RegenerationFormulas.cs,CalculateManaRegen,The length of the statement  "			var regen = (int)((0.001f + unit.Spirit * (float)Math.Sqrt(unit.Intellect) * GameTables.GetBaseRegenForLevel(unit.Level)) * 0.6f + 0.9f);  // rounded up " is 152.
Long Statement,WCell.RealmServer.Global,WorldInstanceCollection<TE;TM>,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldInstanceCollection.cs,GetOrCreateInstances,The length of the statement  "		        // get again' to make sure that the list was not already created while the lock was being acquiredinstances = Instances.Get(map.ToUInt32(null)); " is 144.
Long Statement,WCell.RealmServer.Global,WorldEvent,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldEvent.cs,CalculateEventDelays,The length of the statement  "                        if ((timeToCheck + worldEvent.Duration) > time && (timeToCheck + worldEvent.Duration) < (timeToCheck + worldEvent.Occurence)) " is 125.
Long Statement,WCell.RealmServer.Global,Map,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Map.cs,InitMap,The length of the statement  "			//                                        new Vector3(-(TerrainConstants.MapLength / 2)' -(TerrainConstants.MapLength / 2)' -MAP_HEIGHT)' " is 137.
Long Statement,WCell.RealmServer.Global,Map,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Map.cs,InitMap,The length of the statement  "			//                                        new Vector3((TerrainConstants.MapLength / 2)' (TerrainConstants.MapLength / 2)' MAP_HEIGHT) " is 133.
Long Statement,WCell.RealmServer.Global,Map,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Map.cs,OnPlayerDeath,The length of the statement  "                chr.Achievements.CheckPossibleAchievementUpdates(AchievementCriteriaType.KilledByPlayer' (uint)action.Attacker.FactionGroup' 1); " is 128.
Long Statement,WCell.RealmServer.Global,ZoneTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Global\ZoneEvents.cs,IsHostileTo,The length of the statement  "                    return chr.FactionGroup != FactionGroup.Alliance && (RealmServerConfiguration.ServerType.HasAnyFlag(RealmServerType.PVP | RealmServerType.RPPVP) || IsCity || IsArena); " is 167.
Long Statement,WCell.RealmServer.Global,ZoneTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Global\ZoneEvents.cs,IsHostileTo,The length of the statement  "                    return chr.FactionGroup != FactionGroup.Horde && (RealmServerConfiguration.ServerType.HasAnyFlag(RealmServerType.PVP | RealmServerType.RPPVP) || IsCity || IsArena); " is 164.
Long Statement,WCell.RealmServer.Global,WorldMapOverlayConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\World.DBC.cs,Convert,The length of the statement  "                        "Invalid ZoneId #{0} found at WorldMapOverlay #{1} during the DBC loading."' zoneId' worldMapOverlayEntry.WorldMapOverlayId)); " is 126.
Long Statement,WCell.RealmServer.Items,ItemTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\ItemEvents.cs,GetSpell,The length of the statement  "			return Spells.Where(itemSpell => itemSpell != null && itemSpell.Trigger == trigger && itemSpell.Id != 0).FirstOrDefault(); " is 122.
Long Statement,WCell.RealmServer.Items,ItemTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\ItemEvents.cs,InitializeTemplate,The length of the statement  "			UseSpell = Spells.Where(itemSpell => itemSpell.Trigger == ItemSpellTrigger.Use && itemSpell.Spell != null).FirstOrDefault(); " is 124.
Long Statement,WCell.RealmServer.Items,ItemTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\ItemEvents.cs,InitializeTemplate,The length of the statement  "			SoulstoneSpell = Spells.Where(spell => spell.Trigger == ItemSpellTrigger.Soulstone && spell.Spell != null).Select(itemSpell => " is 126.
Long Statement,WCell.RealmServer.Items,ItemTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\ItemEvents.cs,InitializeTemplate,The length of the statement  "			HitSpells = Spells.Where(spell => spell.Trigger == ItemSpellTrigger.ChanceOnHit && spell.Spell != null).Select(itemSpell => " is 123.
Long Statement,WCell.RealmServer.Items,ItemTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\ItemEvents.cs,CheckId,The length of the statement  "				throw new Exception("Found item-template (" + Id + ") with Id > " + ItemMgr.MaxId + ". Items with such a high ID would blow the item storage array."); " is 150.
Long Statement,WCell.RealmServer.Items,ItemMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ItemMgr.cs,GetEqByCl,The length of the statement  "			slots[(int)ItemClass.Armor] = new[] { InventorySlot.Chest' InventorySlot.Boots' InventorySlot.Gloves' InventorySlot.Head' " is 121.
Long Statement,WCell.RealmServer.Items,ItemMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ItemMgr.cs,LoadDBCs,The length of the statement  "            ScalingStatDistributionReader = new MappedDBCReader<ScalingStatDistributionEntry' ScalingStatDistributionConverter>(RealmServerConfiguration.GetDBCFile( " is 152.
Long Statement,WCell.RealmServer.Items,ItemMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ItemMgr.cs,LoadDBCs,The length of the statement  "            ScalingStatValuesReader = new MappedDBCReader<ScalingStatValues' ScalingStatValuesConverter>(RealmServerConfiguration.GetDBCFile( " is 129.
Long Statement,WCell.RealmServer.Items,BaseInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\BaseInventory.cs,AddLoadedItem,The length of the statement  "						LogManager.GetCurrentClassLogger().Warn("Ignoring loaded Item {0} in {1} because it has an invalid Slot: {2}"' item' this' item.Slot); " is 134.
Long Statement,WCell.RealmServer.Items,PlayerInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\PlayerInventory.cs,GetContainer,The length of the statement  "			if ((inclBank && ItemMgr.ContainerSlotsWithBank[(int)slot]) || (!inclBank && ItemMgr.ContainerSlotsWithoutBank[(int)slot])) " is 123.
Long Statement,WCell.RealmServer.Misc,BugReport,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\BugReport.cs,ToString,The length of the statement  "            return string.Format("{0} - ID : {1}' Type : {2}' Content : {3}' Created : {4}"' GetType()' _id' _type' _content' _reportDate); " is 127.
Long Statement,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcHitChance,The length of the statement  "			var attackHitChanceMod = Victim.GetIntMod(IsRangedAttack ? StatModifierInt.AttackerRangedHitChance : StatModifierInt.AttackerMeleeHitChance); " is 141.
Long Statement,WCell.RealmServer.Misc,Duel,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\Duel.cs,Initialize,The length of the statement  "				ContentMgr.OnInvalidDBData("Cannot start Duel: DuelFlag-GameObject (ID: {0}) does not exist."' (int)GOEntryId.DuelFlag); " is 120.
Long Statement,WCell.RealmServer.Misc,CfgCategories,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\CfgCategories.cs,ReadCategories,The length of the statement  "			var reader = new MappedDBCReader<string' DBCCtfCategoriesConverter>(RealmServerConfiguration.GetDBCFile(WCellConstants.DBC_CFGCATEGORIES)); " is 139.
Long Statement,WCell.RealmServer.Misc,LockOpeningMethod,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\Locks.cs,ToString,The length of the statement  "			return InteractionType + (RequiredSkillValue > 0 ? " (Requires: " + RequiredSkillValue + " " + RequiredSkill + ")" : ""); " is 121.
Long Statement,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,Dump,The length of the statement  "				writer.WriteLineNotDefault(ReqAllFinishedQuests.Count' "ReqAllFinishedQuests: " + MakeQuestString(ReqAllFinishedQuests)); " is 121.
Long Statement,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,Dump,The length of the statement  "				writer.WriteLineNotDefault(ReqAnyFinishedQuests.Count' "ReqAnyFinishedQuests: " + MakeQuestString(ReqAnyFinishedQuests)); " is 121.
Long Statement,WCell.RealmServer.Quests,QuestLog,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestLog.cs,OnSpellCast,The length of the statement  "									var go = cast.Targets.FirstOrDefault(target => target is GameObject && interaction.TemplateId.Contains(target.EntryId)); " is 120.
Long Statement,WCell.RealmServer.Quests,QuestInteractionTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestTemplate.cs,ToString,The length of the statement  "			return (Amount != 1 ? Amount + "x " : "") + ObjectType + " " + ObjectType.ToString(TemplateId' "' ") + (RequiredSpellId != 0 ? (" - Spell: " + RequiredSpellId) : ""); " is 166.
Long Statement,WCell.RealmServer.Spawns,SpawnPoolTemplate<T;E;O;POINT;POOL>,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spawns\SpawnPoolTemplate.cs,AddEntry,The length of the statement  "				LogManager.GetCurrentClassLogger().Warn("Tried to add \"{0}\" with map = \"{1}\" to a pool that contains Entries of Map \"{2}\""' " is 129.
Long Statement,WCell.RealmServer.Spawns,SpawnPool<T;E;O;POINT;POOL>,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spawns\SpawnPool.cs,SpawnFull,The length of the statement  "			for (var i = SpawnedObjects.Count; i < Template.RealMaxSpawnAmount && (point = GetRandomInactiveSpawnPoint()) != null; i++) " is 123.
Long Statement,WCell.RealmServer.Talents,SpecProfile,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\SpecProfile.cs,LoadAllOfCharacter,The length of the statement  "					LogManager.GetCurrentClassLogger().Warn("Found SpecProfile for \"{0}\" with invalid SpecIndex {1} (should be {2})"' spec.SpecIndex' i); " is 135.
Long Statement,WCell.RealmServer.NPCs,NPCAddonData,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPCAddonData.cs,InitAddonData,The length of the statement  "						LogManager.GetCurrentClassLogger().Warn("Invalidly formatted Aura ({0}) in AuraString for SpawnEntry: {1}"' idStr' this); " is 121.
Long Statement,WCell.RealmServer.NPCs,NPCEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\NPCEvents.cs,GetPetLevelStatInfo,The length of the statement  "				//LogManager.GetCurrentClassLogger().Warn("Tried to get PetLevelStatInfo for NPCEntry {0} (Level {1})' which has no PetLevelStatInfos"' this' level); " is 149.
Long Statement,WCell.RealmServer.NPCs,NPCEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\NPCEvents.cs,GetPetLevelStatInfo,The length of the statement  "					//LogManager.GetCurrentClassLogger().Warn("Tried to get PetLevelStatInfo for NPCEntry {0} (Level {1})' which has no PetLevelStatInfos"' this' level); " is 149.
Long Statement,WCell.RealmServer.NPCs,NPCEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\NPCEvents.cs,Dump,The length of the statement  "			writer.WriteLineNotDefault(AttackTime + OffhandAttackTime' "AttackTime: " + AttackTime' "Offhand: " + OffhandAttackTime); " is 121.
Long Statement,WCell.RealmServer.NPCs,NPCEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\NPCEvents.cs,Dump,The length of the statement  "							parts.Add(string.Format("{0} ({1}) = " + id + " (" + (uint)id + ")"' diff.IsHeroic ? "Heroic" : "Normal"' diff.MaxPlayerCount)); " is 128.
Long Statement,WCell.RealmServer.NPCs,NPCAiTextMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPCAiTextMgr.cs,GetFirstTextByEnglishPrefix,The length of the statement  "			var text = Entries.Values.FirstOrDefault(entry => entry.Texts.Localize(Constants.ClientLocale.English).StartsWith(englishPrefix)); " is 130.
Long Statement,WCell.RealmServer,RealmAccount,C:\repos\WCell_WCell\Services\WCell.RealmServer\RealmAccount.cs,ValidateAuthentication,The length of the statement  "					BigInteger clientVerifier = srp.Hash(srp.Username' new byte[4]' client.ClientSeed' RealmServer.Instance.AuthSeed' client.SessionKey); " is 133.
Long Statement,WCell.RealmServer.RacesClasses,BaseClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\BaseClass.cs,CalculateDodge,The length of the statement  "            var baseDodge = baseAgility / (1f / (GameTables.BaseMeleeCritChance[(int)Id] * GameTables.CritAgiMod[(int)Id - 1])) + (defenseSkill - level * 5) * 0.04f; " is 153.
Long Statement,WCell.RealmServer.RacesClasses,BaseClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\BaseClass.cs,CalculateDodge,The length of the statement  "            var dodgeFromGearAgi = (agility - baseAgility) / GameTables.BaseMeleeCritChance[(int)Id - 1] * GameTables.CritAgiMod[(int)Id]; " is 126.
Long Statement,WCell.RealmServer.RacesClasses,Archetype,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\Archetype.cs,FinalizeDataHolder,The length of the statement  "				LogManager.GetCurrentClassLogger().Warn("Failed to initialize Archetype \"" + this + "\" - StartMap does not exist: " + StartMapId); " is 132.
Long Statement,WCell.RealmServer.RacesClasses,ArchetypeMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\ArchetypeMgr.cs,InitRaces,The length of the statement  "			var reader = new ListDBCReader<BaseRace' DBCRaceConverter>(RealmServerConfiguration.GetDBCFile(WCellConstants.DBC_CHRRACES)); " is 125.
Long Statement,WCell.RealmServer.Groups,Group,C:\repos\WCell_WCell\Services\WCell.RealmServer\Groups\Group.cs,CheckInvite,The length of the statement  "			else if (group != null && group.Flags.HasFlag(GroupFlags.Raid) && targetChar != null && targetChar.IsAllowedLowLevelRaid && targetChar.Level < MinLevelToBeInvitedInRaid) " is 169.
Long Statement,WCell.RealmServer.Interaction,RelationMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Social\RelationMgr.cs,AddRelation,The length of the statement  "						m_passiveRelations[(int)relation.Type].Add(relation.RelatedCharacterId' relatedRelations = new HashSet<IBaseRelation>()); " is 121.
Long Statement,WCell.RealmServer.Interaction,MutedRelation,C:\repos\WCell_WCell\Services\WCell.RealmServer\Social\MutedRelation.cs,Validate,The length of the statement  "			//if (Factions.FactionMgr.GetFactionGroup(charInfo.Race) != Factions.FactionMgr.GetFactionGroup((RaceType)relatedCharInfo.Race)) " is 128.
Long Statement,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,SayYellEmote,The length of the statement  "				using (var packetOut = CreateCharChatMessage(type' language' sender.EntityId' sender.EntityId' null' msg' sender.ChatTag)) " is 122.
Long Statement,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,WhisperParser,The length of the statement  "				using (var packetOut = CreateCharChatMessage(ChatMsgType.Ignored' ChatLanguage.Universal' targetChr' sender' null' msg)) " is 120.
Long Statement,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,WhisperParser,The length of the statement  "				using (var packetOut = CreateCharChatMessage(ChatMsgType.Whisper' ChatLanguage.Universal' sender' targetChr' null' msg)) " is 120.
Long Statement,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,WhisperParser,The length of the statement  "			using (var packetOut = CreateCharChatMessage(ChatMsgType.MsgReply' ChatLanguage.Universal' targetChr' targetChr' null' msg' sender.ChatTag)) " is 140.
Long Statement,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,WhisperParser,The length of the statement  "				using (var packetOut = CreateCharChatMessage(ChatMsgType.AFK' ChatLanguage.Universal' targetChr' sender' null' targetChr.AFKReason' targetChr.ChatTag)) " is 151.
Long Statement,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,WhisperParser,The length of the statement  "				using (var packetOut = CreateCharChatMessage(ChatMsgType.DND' ChatLanguage.Universal' targetChr' sender' null' string.Empty' targetChr.ChatTag)) " is 144.
Long Statement,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,SendSystemMessage,The length of the statement  "			using (var packet = CreateCharChatMessage(ChatMsgType.System' ChatLanguage.Universal' EntityId.Zero' EntityId.Zero' null' message' ChatTag.None)) " is 145.
Long Statement,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,SendSystemMessage,The length of the statement  "			using (var packet = CreateCharChatMessage(ChatMsgType.System' ChatLanguage.Universal' EntityId.Zero' EntityId.Zero' null' message' ChatTag.None)) " is 145.
Long Statement,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,SendCombatLogExperienceMessage,The length of the statement  "			using (var packet = CreateCharChatMessage(ChatMsgType.CombatXPGain' ChatLanguage.Universal' EntityId.Zero' EntityId.Zero' null' " is 127.
Long Statement,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,SendWhisper,The length of the statement  "			using (var chatPacket = CreateCharChatMessage(ChatMsgType.Whisper' sender.SpokenLanguage' sender' receiver' null' message)) " is 123.
Long Statement,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,SendWhisper,The length of the statement  "			using (var chatPacket = CreateCharChatMessage(ChatMsgType.WhisperInform' sender.SpokenLanguage' sender' receiver' null' message)) " is 129.
Long Statement,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,SendRaidBossWhisper,The length of the statement  "			using (var chatPacket = CreateCharChatMessage(ChatMsgType.RaidBossWhisper' ChatLanguage.Universal' sender.EntityId' receiver.EntityId' sender.Name' message' ChatTag.None)) " is 171.
Long Statement,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,SendGuildOfficerMessage,The length of the statement  "			using (var chatPacket = CreateCharChatMessage(ChatMsgType.Officer' sender.SpokenLanguage' sender' sender' null' message)) " is 121.
Long Statement,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,SendMonsterMessage,The length of the statement  "			SendMonsterMessage(obj' chatType' language' message' chatType == ChatMsgType.MonsterYell ? YellRadius : ListeningRadius); " is 121.
Long Statement,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,SendMonsterMessage,The length of the statement  "			SendMonsterMessage(obj' chatType' language' localizedMsgs' chatType == ChatMsgType.MonsterYell ? YellRadius : ListeningRadius); " is 127.
Long Statement,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,SendMonsterMessage,The length of the statement  "			using (var packetOut = CreateObjectChatMessage(chatType' language' obj' message' obj is Unit ? ((Unit)obj).ChatTag : ChatTag.None)) " is 131.
Long Statement,WCell.RealmServer.Chat,EmoteDBC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\EmoteDBC.cs,LoadEmotes,The length of the statement  "            EmoteRelationReader = new MappedDBCReader<EmoteType' EmoteRelationConverter>(RealmServerConfiguration.GetDBCFile(WCellConstants.DBC_EMOTESTEXT)); " is 145.
Long Statement,WCell.RealmServer.Spells.Auras.Handlers,ModIncreaseSwimSpeedHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Mod\ModIncreaseSwimSpeed.cs,Apply,The length of the statement  "			m_aura.Auras.Owner.SwimSpeedFactor = UnitUpdates.GetMultiMod(val = EffectValue / 100f' m_aura.Auras.Owner.SwimSpeedFactor); " is 123.
Long Statement,WCell.RealmServer.Spells.Auras.Handlers,ProcTriggerDamageHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Passive\ProcTriggerDamage.cs,OnProc,The length of the statement  "				LogManager.GetCurrentClassLogger().Warn("Invalid damage effect on Spell {0} was triggered by {1} who cannot be attacked by Aura-Owner {2}."' " is 140.
Long Statement,WCell.RealmServer.Spells.Auras.Handlers,PeriodicTriggerSpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Periodic\PeriodicTriggerSpell.cs,TriggerSpell,The length of the statement  "			SpellCast.ValidateAndTriggerNew(spell' m_aura.CasterReference' Owner' Owner'  m_aura.Controller as SpellChannel' cast != null ? cast.TargetItem : null' " is 151.
Long Statement,WCell.RealmServer.Spells.Effects.Custom,RemoveCooldownEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\Custom\RemoveCooldownEffectHandler.cs,Initialize,The length of the statement  "				LogManager.GetCurrentClassLogger().Warn("Tried to use {0} in Spell \"{1}\" with an empty SpellEffect.AffectSpellSet"' GetType()' Effect.Spell); " is 143.
Long Statement,WCell.RealmServer.UpdateFields,UpdatePacket,C:\repos\WCell_WCell\Services\WCell.RealmServer\UpdateFields\UpdatePacket.cs,SendTo,The length of the statement  "				//Compression.CompressZLib(packetBuffer' outputBuffer' RealmServer.Instance.Configuration.CompressionLevel' out deflatedLength); " is 128.
Long Statement,WCell.RealmServer.AI.Actions.States,AIRoamAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\AI\Actions\States\AIRoamAction.cs,Update,The length of the statement  "				if (UsesSpells && HasSpellReady && m_owner.CanCastSpells && _lastSpellCast + TimeSpan.FromMilliseconds(MinimumRoamSpellCastDelay) < DateTime.Now) " is 145.
Long Statement,WCell.RealmServer.AreaTriggers,AreaTrigger,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\AreaTrigger.cs,CheckTrigger,The length of the statement  "				Handlers.AreaTriggerHandler.SendAreaTriggerMessage(chr.Client' "You need at least level " + Template.RequiredLevel + "."); " is 122.
Long Statement,WCell.RealmServer.AreaTriggers,AreaTriggerMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\AreaTriggers\AreaTriggerMgr.cs,Initialize,The length of the statement  "            var reader = new MappedDBCReader<AreaTrigger' ATConverter>(RealmServerConfiguration.GetDBCFile(WCellConstants.DBC_AREATRIGGER)); " is 128.
Long Statement,WCell.RealmServer.GameObjects,GOMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GameObjectHandler.cs,HandleGameObjectUse,The length of the statement  "			if (go != null && go.CanUseInstantly(chr) && (chr.LooterEntry.Loot == null || !object.ReferenceEquals(chr.LooterEntry.Loot.Lootable' go) )) " is 139.
Long Statement,WCell.RealmServer.Looting,Loot,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\Loot.cs,HandoutItem,The length of the statement  "                chr.Achievements.CheckPossibleAchievementUpdates(Constants.Achievements.AchievementCriteriaType.LootItem' (uint)lootItem.Template.ItemId' (uint)lootItem.Amount); " is 161.
Long Statement,WCell.RealmServer.Guilds,Guild,C:\repos\WCell_WCell\Services\WCell.RealmServer\Database\Guild.cs,SendMessage,The length of the statement  "			LogManager.GetCurrentClassLogger().Warn("Tried to send message to guild {0} but Guild.SendMessage(string) is not implemented yet: {1}"' Name' message); " is 151.
Long Statement,WCell.RealmServer.NPCs.Vehicles,Vehicle,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Vehicles\Vehicle.cs,FindSeatOccupiedBy,The length of the statement  "			return Seats.Where(vehicleSeat => vehicleSeat != null && vehicleSeat.Passenger != null && vehicleSeat.Passenger.EntityId == entityId).FirstOrDefault(); " is 151.
Long Statement,WCell.RealmServer.NPCs.Vehicles,Vehicle,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Vehicles\Vehicle.cs,FindSeatOccupiedBy,The length of the statement  "			return Seats.Where(vehicleSeat => vehicleSeat != null && vehicleSeat.Passenger != null && vehicleSeat.Passenger == passenger).FirstOrDefault(); " is 143.
Long Statement,WCell.RealmServer.Help.Tickets,Ticket,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Help\Tickets\Ticket.cs,DisplayFormat,The length of the statement  "			triggerer.ReplyFormat("| by " + m_ownerName + (m_owner == null ? ChatUtility.Colorize(" (Offline)"' Color.Red' true) : "") + "' " + Age + " ago."); " is 147.
Long Statement,WCell.RealmServer.Help.Tickets,Ticket,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Help\Tickets\Ticket.cs,OnOwnerLogin,The length of the statement  "					m_handler.SendMessage("Owner of the Ticket you are handling came back -{0}-."' ChatUtility.Colorize("online"' Color.Green)); " is 124.
Long Statement,WCell.RealmServer.NPCs.Vendors,VendorEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Vendors\VendorEntry.cs,BuyItem,The length of the statement  "						LogManager.GetCurrentClassLogger().Warn("Unable to remove required item \"{0}\" from player \"{1}\" when purchasing item: {2}"' " is 127.
Long Statement,WCell.RealmServer.NPCs.Vendors,VendorEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Vendors\VendorEntry.cs,CanPlayerBuyItem,The length of the statement  "				if (chr.Reputations.GetStandingLevel(vendorItem.Template.RequiredFaction.ReputationIndex) < vendorItem.Template.RequiredFactionStanding) " is 136.
Long Statement,WCell.RealmServer.Skills,SkillAbility,C:\repos\WCell_WCell\Services\WCell.RealmServer\Skills\SkillAbility.cs,ToString,The length of the statement  "			return Spell + string.Format(" - {3}(Skill: {0}' Yellow: {1}' Grey: {2})"' Skill.Name' YellowValue' GreyValue' AcquireMethod != 0 ? AcquireMethod + " " : ""); " is 158.
Long Statement,WCell.RealmServer.Skills,SkillHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Skills\Skills.DBC.cs,Initialize,The length of the statement  "            TierReader = new MappedDBCReader<SkillTiers' SkillTierConverter>(RealmServerConfiguration.GetDBCFile(WCellConstants.DBC_SKILLTIERS)); " is 133.
Long Statement,WCell.RealmServer.Taxi,TaxiMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Taxi\TaxiMgr.cs,Initialize,The length of the statement  "                        var isTeleport = current.Value.HasMapChange = current.Previous != null && (current.Value.MapId != current.Previous.Value.MapId || " is 129.
Long Statement,WCell.RealmServer.Taxi,TaxiMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Taxi\TaxiMgr.cs,PreFlightMoneyCheck,The length of the statement  "            client.ActiveCharacter.Achievements.CheckPossibleAchievementUpdates(AchievementCriteriaType.GoldSpentForTravelling' totalCost); " is 127.
Long Statement,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdatePowerRegen,The length of the statement  "					regen += (unit.IntMods[(int)StatModifierInt.PowerRegenPercent] * regen + 50) / 100;	// e.g. multipliers from auras & rounding " is 125.
Long Statement,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdatePowerRegen,The length of the statement  "						interruptedRegen += (unit.IntMods[(int)StatModifierInt.PowerRegenPercent] * regen + 50) / 100; // multipliers from auras " is 120.
Long Statement,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdateParryChance,The length of the statement  "				parryChance += 5f + chr.Archetype.Class.CalculateParry(chr.Level' (chr.GetCombatRating(CombatRating.Parry))' chr.Strength); " is 123.
Long Statement,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdateExpertise,The length of the statement  "				expertise += (uint)(chr.GetCombatRating(CombatRating.Expertise) / GameTables.GetCRTable(CombatRating.Expertise)[chr.Level - 1]); " is 128.
Complex Conditional,WCell.RealmServer.AI.Brains,BaseBrain,C:\repos\WCell_WCell\Services\WCell.RealmServer\AI\Brains\BaseBrain.cs,CheckCombat,The conditional expression  "(owner.ThreatCollection.CurrentAggressor != null && owner.CanReachForCombat(owner.ThreatCollection.CurrentAggressor)) ||  				 (m_IsAggressive && ScanAndAttack())"  is complex.
Complex Conditional,WCell.RealmServer.AI.Brains,BaseBrain,C:\repos\WCell_WCell\Services\WCell.RealmServer\AI\Brains\BaseBrain.cs,ScanAndAttack,The conditional expression  "unit.CanGenerateThreat &&  					m_owner.IsHostileWith(unit) &&  					m_owner.CanSee(unit) &&  					unit.IsInRadiusSq(owner' owner.GetAggroRangeSq(unit))"  is complex.
Complex Conditional,WCell.RealmServer.Commands,GlobalCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\AdminCommands.cs,Process,The conditional expression  "cmd == null || !cmd.Enabled ||  				(trigger.Args.User != null && !trigger.Args.User.Role.MayUse(cmd.RootCmd))"  is complex.
Complex Conditional,WCell.RealmServer.Commands,GlobalCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\AdminCommands.cs,Process,The conditional expression  "(!playersOnly || chr.Role.Status == RoleStatus.Player) &&  						(inclSelf || !object.ReferenceEquals(chr' trigger.Args.User))"  is complex.
Complex Conditional,WCell.RealmServer.Handlers,GuildHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GuildHandler.cs,SendGuildBankLog,The conditional expression  "entry.Type == GuildBankLogEntryType.DepositMoney ||  						entry.Type == GuildBankLogEntryType.WithdrawMoney ||  						entry.Type == GuildBankLogEntryType.MoneyUsedForRepairs ||  						entry.Type == GuildBankLogEntryType.Unknown1 ||  						entry.Type == GuildBankLogEntryType.Unknown2"  is complex.
Complex Conditional,WCell.RealmServer.Handlers,LootHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\LootHandler.cs,HandleRoll,The conditional expression  "looted != null && looted.Loot != null &&  				looted.Loot.Method == LootMethod.NeedBeforeGreed &&  				index < looted.Loot.Items.Length"  is complex.
Complex Conditional,WCell.RealmServer.Handlers,LootHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\LootHandler.cs,HandleMasterGive,The conditional expression  "looted != null && looted.Loot != null &&                   looted.Loot.Method == LootMethod.MasterLoot &&                  lootSlot < looted.Loot.Items.Length"  is complex.
Complex Conditional,WCell.RealmServer.Handlers,LootHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\LootHandler.cs,SendLootResponse,The conditional expression  "!item.Taken &&  						((looters == null && templ.CheckLootConstraints(looter)) ||  						(looters != null && looters.Contains(looterEntry)))"  is complex.
Complex Conditional,WCell.RealmServer.Handlers,PetHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\PetHandler.cs,HandleSetAction,The conditional expression  "pet == null || pet.PermanentPetRecord == null || (pet != chr.ActivePet && !chr.GodMode)"  is complex.
Complex Conditional,WCell.RealmServer.Handlers,PetHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\PetHandler.cs,HandlePetCastSpell,The conditional expression  "pet == chr.ActivePet || chr.Vehicle == pet || chr.Charm == pet || chr.GodMode"  is complex.
Complex Conditional,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,HandleSetSelection,The conditional expression  "targetUnit != null &&  					(client.ActiveCharacter.CanSee(targetUnit) ||  					(targetUnit is Character && client.ActiveCharacter.Group == ((Character)targetUnit).Group))"  is complex.
Complex Conditional,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,HandleSpiritHealerActivate,The conditional expression  "healer != null && healer.IsSpiritHealer && chr.IsCorpseReclaimable && healer.CheckVendorInteraction(chr)"  is complex.
Complex Conditional,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,HandleAlterAppearance,The conditional expression  "style == null || style.Type != 0 || style.Race != chr.Race || style.Gender != chr.Gender"  is complex.
Complex Conditional,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,HandleAlterAppearance,The conditional expression  "facial == null || facial.Type != 2 || facial.Race != chr.Race || facial.Gender != chr.Gender"  is complex.
Complex Conditional,WCell.RealmServer.Spells.Auras,PlayerAuraCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\PlayerAuraCollection.cs,OnCasted,The conditional expression  "effect.MatchesSpell(spell) &&   						cast.Spell != effect.Spell &&  						(cast.TriggerEffect == null || cast.TriggerEffect.Spell != effect.Spell)"  is complex.
Complex Conditional,WCell.RealmServer.Spells.Auras,PlayerAuraCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\PlayerAuraCollection.cs,OnCasted,The conditional expression  "effect.MatchesSpell(spell) &&  						cast.Spell != effect.Spell &&  						(cast.TriggerEffect == null || cast.TriggerEffect.Spell != effect.Spell)"  is complex.
Complex Conditional,WCell.RealmServer.Spells.Auras,PlayerAuraCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\PlayerAuraCollection.cs,MayActivate,The conditional expression  "(effect.RequiredShapeshiftMask == 0 ||  						(effect.RequiredShapeshiftMask.HasAnyFlag(Owner.ShapeshiftMask))) &&  				(effect.RequiredActivationAuras == null || ContainsAny(effect.RequiredActivationAuras))"  is complex.
Complex Conditional,WCell.RealmServer.Spells.Auras,AreaAura,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\AreaAura.cs,RevalidateTargetsAndApply,The conditional expression  "obj != m_holder &&  						((exclMobs && obj.IsPlayerOwned) || (!exclMobs && obj is Unit)) &&  						(m_spell.HasHarmfulEffects == m_holder.MayAttack(obj)) &&  						m_spell.CheckValidTarget(m_holder' obj) == SpellFailedReason.Ok"  is complex.
Complex Conditional,WCell.RealmServer.Spells.Auras,AuraCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\AuraCollection.cs,ReApplyAffectedAuras,The conditional expression  "aura.Spell.IsPassive &&  					!aura.HasTimeout &&  					aura.Spell != spell &&  					aura.Spell.IsAffectedBy(spell)"  is complex.
Complex Conditional,WCell.RealmServer.Spells.Auras,AuraCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\AuraCollection.cs,SaveAurasNow,The conditional expression  "aura != null && aura.CanBeSaved && (!aura.HasTimeout || aura.TimeLeft > 5000)"  is complex.
Complex Conditional,WCell.RealmServer.Spells.Effects,StealBeneficialBuffEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\StealBeneficialBuff.cs,InitializeTarget,The conditional expression  "aura.IsBeneficial &&   					aura.CanBeStolen &&   					aura.TimeLeft > 100 &&  					auras.GetAura(caster' aura.Id' aura.Spell) == null"  is complex.
Complex Conditional,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,CheckCasterConstraints,The conditional expression  "CostsPower &&  				PowerType != caster.PowerType &&  				PowerType != PowerType.Health &&  				!AttributesExB.HasFlag(SpellAttributesExB.DoesNotNeedShapeshift)"  is complex.
Complex Conditional,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,CheckCasterConstraints,The conditional expression  "!caster.CanCastSpells &&  					(!IsPhysicalAbility ||  					(InterruptFlags.HasFlag(InterruptFlags.OnSilence) &&  					 caster.IsUnderInfluenceOf(SpellMechanic.Silenced)))"  is complex.
Complex Conditional,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,CheckCasterConstraints,The conditional expression  "(!caster.CanDoPhysicalActivity && IsPhysicalAbility) ||  					(!caster.CanDoHarm && HasHarmfulEffects)"  is complex.
Complex Conditional,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,CheckCasterConstraints,The conditional expression  "(RequiredCasterAuraState != 0 && !state.HasAnyFlag(RequiredCasterAuraState)) ||  					(ExcludeCasterAuraState != 0 && state.HasAnyFlag(ExcludeCasterAuraState))"  is complex.
Complex Conditional,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,CheckCasterConstraints,The conditional expression  "(ExcludeCasterAuraId != 0 && caster.Auras.Contains(ExcludeCasterAuraId)) ||  				(RequiredCasterAuraId != 0 && !caster.Auras.Contains(RequiredCasterAuraId))"  is complex.
Complex Conditional,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,CheckValidTarget,The conditional expression  "(RequiredTargetAuraState != 0 && !state.HasAnyFlag(RequiredTargetAuraState)) ||  						(ExcludeTargetAuraState != 0 && state.HasAnyFlag(ExcludeTargetAuraState))"  is complex.
Complex Conditional,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,CheckValidTarget,The conditional expression  "(ExcludeTargetAuraId != 0 && ((Unit)target).Auras.Contains(ExcludeTargetAuraId)) ||  					(RequiredTargetAuraId != 0 && !((Unit)target).Auras.Contains(RequiredTargetAuraId))"  is complex.
Complex Conditional,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,CheckValidTarget,The conditional expression  "!(target is Corpse) ||  						(TargetFlags.HasAnyFlag(SpellTargetFlags.PvPCorpse) && caster != null && !caster.IsHostileWith(target))"  is complex.
Complex Conditional,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,CreateAuras,The conditional expression  "dynObj != null || (CasterObject != null && (allowDead || !(CasterObject is Unit) || ((Unit)CasterObject).IsAlive))"  is complex.
Complex Conditional,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,CreateAuras,The conditional expression  "!Spell.IsPreventionDebuff && !((Spell.AttributesExC & SpellAttributesExC.NoInitialAggro) != 0) && hostile && target.IsInWorld && target.IsAlive"  is complex.
Complex Conditional,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,CheckSelectedTarget,The conditional expression  "!SelectedTarget.IsInWorld || !Utility.IsInRange(sqDistance' chr.GetSpellMaxRange(Spell' SelectedTarget)) ||  							(SelectedTarget != null && SelectedTarget.Map != CasterObject.Map)"  is complex.
Complex Conditional,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,SendSpellGo,The conditional expression  "!Spell.IsPassive && !Spell.Attributes.HasAnyFlag(SpellAttributes.InvisibleAura) &&  				!Spell.HasEffectWith(effect => effect.EffectType == SpellEffectType.OpenLock) &&  				Spell.IsVisibleToClient"  is complex.
Complex Conditional,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,WriteTargets,The conditional expression  "cast.SelectedTarget is Unit && !spell.IsAreaSpell &&  					(spell.Visual != 0 || spell.IsPhysicalAbility)"  is complex.
Complex Conditional,WCell.RealmServer.Spells,SpellCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCollection.cs,TriggerSpellsFor,The conditional expression  "spell.SpellClassSet == effect.Spell.SpellClassSet &&  					effect.MatchesSpell(spell) &&  					(((val = effect.CalcEffectValue(Owner)) >= 100) || Utility.Random(0' 101) <= val) &&  					spell != effect.TriggerSpell"  is complex.
Complex Conditional,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,Convert,The conditional expression  "effect != null &&  							(effect.EffectType != SpellEffectType.None ||  								effect.BasePoints > 0 ||  								effect.AuraType != 0 ||  								effect.TriggerSpellId != 0)"  is complex.
Complex Conditional,WCell.RealmServer.Spells,SpellEffect,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellEffect.Fields.cs,Init2,The conditional expression  "(HasTarget(ImplicitSpellTargetType.AllEnemiesAroundCaster'  								ImplicitSpellTargetType.AllEnemiesInArea'  								ImplicitSpellTargetType.AllEnemiesInAreaChanneled'  								ImplicitSpellTargetType.AllEnemiesInAreaInstant'  								ImplicitSpellTargetType.CurrentSelection) ||  					  HasTarget(ImplicitSpellTargetType.InFrontOfCaster'  								ImplicitSpellTargetType.InvisibleOrHiddenEnemiesAtLocationRadius'  								ImplicitSpellTargetType.LocationInFrontCaster'  								ImplicitSpellTargetType.NetherDrakeSummonLocation'  								ImplicitSpellTargetType.SelectedEnemyChanneled'  								ImplicitSpellTargetType.SelectedEnemyDeadlyPoison'  								ImplicitSpellTargetType.SingleEnemy'  								ImplicitSpellTargetType.SpreadableDesease'  								ImplicitSpellTargetType.TargetAtOrientationOfCaster)) &&  					 (!HasTarget(  						ImplicitSpellTargetType.Self'  						ImplicitSpellTargetType.AllFriendlyInAura'  						ImplicitSpellTargetType.AllParty'  						ImplicitSpellTargetType.AllPartyAroundCaster'  						ImplicitSpellTargetType.AllPartyInArea'  						ImplicitSpellTargetType.PartyAroundCaster'  						ImplicitSpellTargetType.AllPartyInAreaChanneled) ||  					  Spell.Mechanic.IsNegative())"  is complex.
Complex Conditional,WCell.RealmServer.Spells,SpellTargetCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Targeting\SpellTargetCollection.cs,FindChain,The conditional expression  "(harmful && !caster.MayAttack(target)) ||  					(!harmful && !caster.IsInSameDivision(target))"  is complex.
Complex Conditional,WCell.RealmServer.Battlegrounds,BattlegroundInfo,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\BattlegroundInfo.cs,RemoveRelation,The conditional expression  "bg != null &&  				bg.Template.Id == bgId &&  				!relation.IsEnqueued &&  				!_chr.IsTeleporting &&  				isCharActive"  is complex.
Complex Conditional,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,OnMove,The conditional expression  "IsAlive && Flying == 0 && Hovering == 0 && FeatherFalling == 0 && !IsImmune(DamageSchool.Physical)"  is complex.
Complex Conditional,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,CheckCombatState,The conditional expression  "NPCAttackerCount == 0 &&  					(m_activePet == null || m_activePet.NPCAttackerCount == 0) &&  					!m_auras.HasHarmfulAura()"  is complex.
Complex Conditional,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,LoadAndLogin,The conditional expression  "m_Map.IsDisposed ||  					(m_Map.IsInstance && !isStaff && (m_Map.CreationTime > m_record.LastLogout || !m_Map.CanEnter(this)))"  is complex.
Complex Conditional,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,InitializeCharacter,The conditional expression  "vertex != null &&  							vertex.MapId == m_Map.Id &&  							vertex.ListEntry.Next != null &&  							IsInRadius(vertex.Pos' vertex.ListEntry.Next.Value.DistFromPrevious)"  is complex.
Complex Conditional,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,SendPacketToArea,The conditional expression  "obj is Character && (includeSelf || obj != this) && obj.IsInWorld"  is complex.
Complex Conditional,WCell.RealmServer.Entities,Targeting,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Targeting.cs,GetNearbyRandomHostileCharacter,The conditional expression  "!wObj.CanSee(obj) ||  						!((Character)obj).IsAlive ||  						!wObj.IsHostileWith(obj) ||  						!wObj.IsInRadiusSq(obj' radiusSq)"  is complex.
Complex Conditional,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,CanSee,The conditional expression  "this is Character && ((Character)this).Role.IsStaff && (!(obj is Character) || ((Character)obj).Role < ((Character)this).Role)"  is complex.
Complex Conditional,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,CanSee,The conditional expression  "chr.Role.IsStaff && chr.Stealthed > 0 &&  					(!(this is Character) || ((Character)this).Role < chr.Role)"  is complex.
Complex Conditional,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,Proc,The conditional expression  "proc.NextProcTime <= now &&  					procFlagsMatch &&  					procHitFlagsMatch &&  					proc.CanBeTriggeredBy(triggerer' action' active)"  is complex.
Complex Conditional,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,DealSpellDamage,The conditional expression  "IsEvading || IsImmune(school) || IsInvulnerable || !IsAlive"  is complex.
Complex Conditional,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,CanCastSpellOn,The conditional expression  "(canHarm && !spell.HasHarmfulEffects) || (!canHarm && !spell.HasBeneficialEffects)"  is complex.
Complex Conditional,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,IsImmuneToSpell,The conditional expression  "spell.Mechanic.IsNegative() && spell.IsAffectedByInvulnerability &&                  (spell.Mechanic == SpellMechanic.Invulnerable_2 || spell.Mechanic == SpellMechanic.Invulnerable) &&                  (                      IsInvulnerable ||                      IsImmune(SpellMechanic.Invulnerable_2) ||                      IsImmune(SpellMechanic.Invulnerable) ||                      IsImmune(spell.Mechanic) ||                      IsImmune(spell.DispelType)                  )"  is complex.
Complex Conditional,WCell.RealmServer.Entities,GameObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\GameObject.cs,Use,The conditional expression  "(Lock == null || Lock.IsUnlocked || Lock.Keys.Length > 0) &&  				Handler.TryUse(chr)"  is complex.
Complex Conditional,WCell.RealmServer.Entities,GOMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GameObjectHandler.cs,HandleGameObjectUse,The conditional expression  "go != null && go.CanUseInstantly(chr) && (chr.LooterEntry.Loot == null || !object.ReferenceEquals(chr.LooterEntry.Loot.Lootable' go) )"  is complex.
Complex Conditional,WCell.RealmServer.Global,WorldEventMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldEventMgr.cs,Update,The conditional expression  "!Loaded || !QuestMgr.Loaded || !NPCMgr.Loaded || !GOMgr.Loaded"  is complex.
Complex Conditional,WCell.RealmServer.Items,BaseInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\BaseInventory.cs,CheckUniqueness,The conditional expression  "enchant != null &&  							enchant.Entry.GemTemplate != null &&  							enchant.Entry.GemTemplate.UniqueCount > 0 &&  							OwnerInventory.GetUniqueCount(enchant.Entry.GemTemplate.ItemId) >= enchant.Entry.GemTemplate.UniqueCount"  is complex.
Complex Conditional,WCell.RealmServer.Items,PlayerInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\PlayerInventory.cs,GetContainer,The conditional expression  "(inclBank && ItemMgr.ContainerSlotsWithBank[(int)slot]) || (!inclBank && ItemMgr.ContainerSlotsWithoutBank[(int)slot])"  is complex.
Complex Conditional,WCell.RealmServer.Items,PlayerInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\PlayerInventory.cs,TrySwap,The conditional expression  "srcItem.IsEquippedContainer &&  					!((Container)srcItem).BaseInventory.IsEmpty &&  					!ItemMgr.IsContainerEquipmentSlot(destSlot) &&  					!Owner.GodMode"  is complex.
Complex Conditional,WCell.RealmServer.Quests,Quest,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\Quest.cs,CheckCompletedStatus,The conditional expression  "(!reqAmount && count == 0) ||  						(reqAmount && count < Template.ObjectOrSpellInteractions[i].Amount)"  is complex.
Complex Conditional,WCell.RealmServer.Talents,TalentCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\TalentCollection.cs,CanLearn,The conditional expression  "tree.Class != Owner.Class || m_treePoints[tree.TabIndex] < entry.RequiredTreePoints ||  				rank > entry.Spells.Length || diff < 1"  is complex.
Complex Conditional,WCell.RealmServer.Groups,Group,C:\repos\WCell_WCell\Services\WCell.RealmServer\Groups\Group.cs,CheckInvite,The conditional expression  "group != null && group.Flags.HasFlag(GroupFlags.Raid) && targetChar != null && targetChar.IsAllowedLowLevelRaid && targetChar.Level < MinLevelToBeInvitedInRaid"  is complex.
Complex Conditional,WCell.RealmServer.Groups,Group,C:\repos\WCell_WCell\Services\WCell.RealmServer\Groups\Group.cs,CheckInvite,The conditional expression  "target == null || inviter == target ||  					(target.Role.IsStaff && !inviter.Role.IsStaff)"  is complex.
Complex Conditional,WCell.RealmServer.Groups,Group,C:\repos\WCell_WCell\Services\WCell.RealmServer\Groups\Group.cs,CheckAction,The conditional expression  "(reqPrivs == GroupPrivs.Leader && m_leader != requestMember) ||  				(reqPrivs == GroupPrivs.MainAsisstant && !requestMember.IsAtLeastMainAssistant) ||  				(reqPrivs == GroupPrivs.Assistant && !requestMember.IsAtLeastAssistant)"  is complex.
Complex Conditional,WCell.RealmServer.Groups,Group,C:\repos\WCell_WCell\Services\WCell.RealmServer\Groups\Group.cs,CheckPrivs,The conditional expression  "(reqPrivs == GroupPrivs.Leader && m_leader != member) ||  				(reqPrivs == GroupPrivs.MainAsisstant && !member.IsAtLeastMainAssistant) ||  				(reqPrivs == GroupPrivs.Assistant && !member.IsAtLeastAssistant)"  is complex.
Complex Conditional,WCell.RealmServer.Groups,Group,C:\repos\WCell_WCell\Services\WCell.RealmServer\Groups\Group.cs,GetNearbyLooters,The conditional expression  "chr.IsAlive && (chr == initialLooter ||  					((otherMember = chr.GroupMember) != null && otherMember.Group == this))"  is complex.
Complex Conditional,WCell.RealmServer.Groups,Group,C:\repos\WCell_WCell\Services\WCell.RealmServer\Groups\Group.cs,UpdateOutOfRangeMembers,The conditional expression  "chr != member.Character && chr != null  					&& !chr.IsInUpdateRange(member.Character)  					&& member.Character.GroupUpdateFlags != GroupUpdateFlags.None"  is complex.
Complex Conditional,WCell.RealmServer.Interaction,RelationMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Social\RelationMgr.cs,SetRelationNote,The conditional expression  "charId == 0 || relatedCharId == 0 || string.IsNullOrEmpty(note) || relationType == CharacterRelationType.Invalid"  is complex.
Complex Conditional,WCell.RealmServer.AI.Actions.States,AIRoamAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\AI\Actions\States\AIRoamAction.cs,Update,The conditional expression  "UsesSpells && HasSpellReady && m_owner.CanCastSpells && _lastSpellCast + TimeSpan.FromMilliseconds(MinimumRoamSpellCastDelay) < DateTime.Now"  is complex.
Complex Conditional,WCell.RealmServer.GameObjects,GOMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GameObjectHandler.cs,HandleGameObjectUse,The conditional expression  "go != null && go.CanUseInstantly(chr) && (chr.LooterEntry.Loot == null || !object.ReferenceEquals(chr.LooterEntry.Loot.Lootable' go) )"  is complex.
Complex Conditional,WCell.RealmServer.Looting,Loot,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\Loot.cs,GiveMoney,The conditional expression  "chr.IsAlive && (chr == looter.Owner ||  									((otherMember = chr.GroupMember) != null && otherMember.Group == Group))"  is complex.
Complex Conditional,WCell.RealmServer.Looting,Loot,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\Loot.cs,CheckTakeItemConditions,The conditional expression  "(item.Template.Quality > Group.LootThreshold && !item.Passed) ||  					(Group.MasterLooter != null &&  					 Group.MasterLooter != looter.Owner.GroupMember)"  is complex.
Complex Conditional,WCell.RealmServer.Looting,LooterEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LooterEntry.cs,MayLoot,The conditional expression  "((loot.Looters.Count == 0 || loot.Looters.Contains(this))) ||							// we are one of the initial looters OR:  				 m_owner.GodMode ||  				 (loot.Group != null && m_owner.Group == loot.Group && (								// we are part of the group AND:  					 (loot.FreelyAvailableCount > 0) ||													//	there are freely available items or  					 m_owner.GroupMember == loot.Group.MasterLooter))"  is complex.
Complex Conditional,WCell.RealmServer.NPCs.Auctioneer,AuctionMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Auctioneer\AuctionMgr.cs,AuctionCheatChecks,The conditional expression  "IsAlreadyAuctioned(auctioneer' item) ||  				(item.IsContainer && !((Container)item).BaseInventory.IsEmpty) ||  				!item.CanBeTraded ||  				item.Duration > 0 ||  				item.IsConjured"  is complex.
Complex Conditional,WCell.RealmServer.Mail,MailAccount,C:\repos\WCell_WCell\Services\WCell.RealmServer\Mail\MailAccount.cs,SendMail,The conditional expression  "(money > 0 || (items != null && items.Count > 0)) && (m_chr.Account.AccountId != recipient.AccountId)"  is complex.
Complex Conditional,WCell.RealmServer.Taxi,TaxiMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Taxi\TaxiMgr.cs,TryFly,The conditional expression  "PreFlightCheatChecks(client' destinations) &&  				PreFlightValidPathCheck(client' destinations) &&  				(client.ActiveCharacter.GodMode || PreFlightMoneyCheck(client))"  is complex.
Complex Conditional,WCell.RealmServer.Taxi,TaxiMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Taxi\TaxiMgr.cs,PreFlightCheatChecks,The conditional expression  "!(curChar.ShapeshiftForm == ShapeshiftForm.Normal ||  				   curChar.ShapeshiftForm == ShapeshiftForm.BattleStance ||  				   curChar.ShapeshiftForm == ShapeshiftForm.BerserkerStance ||  				   curChar.ShapeshiftForm == ShapeshiftForm.DefensiveStance ||  				   curChar.ShapeshiftForm == ShapeshiftForm.Shadow)"  is complex.
Complex Conditional,WCell.RealmServer.Factions,ReputationCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Factions\ReputationCollection.cs,GetDefaultReputationFlags,The conditional expression  "(entry.ClassMask[i] == 0 || entry.ClassMask[i].HasAnyFlag(Owner.ClassMask)) &&  					(entry.RaceMask[i] == 0 || entry.RaceMask[i].HasAnyFlag(Owner.RaceMask))"  is complex.
Complex Conditional,WCell.RealmServer.Factions,ReputationCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Factions\ReputationCollection.cs,GetDefaultReputationValue,The conditional expression  "(entry.ClassMask[i] == 0 || entry.ClassMask[i].HasAnyFlag(Owner.ClassMask)) &&  					(entry.RaceMask[i] == 0 || entry.RaceMask[i].HasAnyFlag(Owner.RaceMask))"  is complex.
Virtual Method Call from Constructor,WCell.RealmServer.Spells.Auras,Aura,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Aura.cs,Aura,The constructor "Aura" calls a virtual method "GetModifiedInt".
Virtual Method Call from Constructor,WCell.RealmServer.Battlegrounds,Battleground,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\Battleground.cs,Battleground,The constructor "Battleground" calls a virtual method "Delete".
Virtual Method Call from Constructor,WCell.RealmServer.Battlegrounds,BattlegroundQueue,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\BattlegroundQueue.cs,BattlegroundQueue,The constructor "BattlegroundQueue" calls a virtual method "CreateTeamQueue".
Virtual Method Call from Constructor,WCell.RealmServer.Battlegrounds,BattlegroundQueue,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\BattlegroundQueue.cs,BattlegroundQueue,The constructor "BattlegroundQueue" calls a virtual method "CreateTeamQueue".
Empty Catch Block,WCell.RealmServer.Network,AuthenticationClient,C:\repos\WCell_WCell\Services\WCell.RealmServer\Network\AuthenticationClient.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,WCell.RealmServer.Database,RealmDBMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Database\RealmDBMgr.cs,Initialize,The method has an empty catch block.
Magic Number,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,AchievementCollection,The following statement contains a magic number: ClassSpecificAchievementId[(int) ClassId.Warrior] = 459;
Magic Number,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,AchievementCollection,The following statement contains a magic number: ClassSpecificAchievementId[(int) ClassId.Paladin] = 465;
Magic Number,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,AchievementCollection,The following statement contains a magic number: ClassSpecificAchievementId[(int) ClassId.Hunter] = 462;
Magic Number,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,AchievementCollection,The following statement contains a magic number: ClassSpecificAchievementId[(int) ClassId.Rogue] = 458;
Magic Number,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,AchievementCollection,The following statement contains a magic number: ClassSpecificAchievementId[(int) ClassId.Priest] = 464;
Magic Number,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,AchievementCollection,The following statement contains a magic number: ClassSpecificAchievementId[(int) ClassId.DeathKnight] = 461;
Magic Number,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,AchievementCollection,The following statement contains a magic number: ClassSpecificAchievementId[(int) ClassId.Shaman] = 467;
Magic Number,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,AchievementCollection,The following statement contains a magic number: ClassSpecificAchievementId[(int) ClassId.Mage] = 460;
Magic Number,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,AchievementCollection,The following statement contains a magic number: ClassSpecificAchievementId[(int) ClassId.Warlock] = 463;
Magic Number,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,AchievementCollection,The following statement contains a magic number: ClassSpecificAchievementId[(int) ClassId.Druid] = 466;
Magic Number,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,AchievementCollection,The following statement contains a magic number: RaceSpecificAchievementId[(int) RaceId.Human] = 1408;
Magic Number,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,AchievementCollection,The following statement contains a magic number: RaceSpecificAchievementId[(int) RaceId.Orc] = 1410;
Magic Number,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,AchievementCollection,The following statement contains a magic number: RaceSpecificAchievementId[(int) RaceId.Dwarf] = 1407;
Magic Number,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,AchievementCollection,The following statement contains a magic number: RaceSpecificAchievementId[(int) RaceId.NightElf] = 1409;
Magic Number,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,AchievementCollection,The following statement contains a magic number: RaceSpecificAchievementId[(int) RaceId.Undead] = 1413;
Magic Number,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,AchievementCollection,The following statement contains a magic number: RaceSpecificAchievementId[(int) RaceId.Tauren] = 1411;
Magic Number,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,AchievementCollection,The following statement contains a magic number: RaceSpecificAchievementId[(int) RaceId.Gnome] = 1404;
Magic Number,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,AchievementCollection,The following statement contains a magic number: RaceSpecificAchievementId[(int) RaceId.Troll] = 1412;
Magic Number,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,AchievementCollection,The following statement contains a magic number: RaceSpecificAchievementId[(int) RaceId.BloodElf] = 1405;
Magic Number,WCell.RealmServer.Achievements,AchievementCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCollection.cs,AchievementCollection,The following statement contains a magic number: RaceSpecificAchievementId[(int) RaceId.Draenei] = 1406;
Magic Number,WCell.RealmServer.Achievements,AchievementCriteriaRequirementLevel,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\AchievementCriteriaRequirement.cs,Meets,The following statement contains a magic number: if (charTarget != null)              {                  if (charTarget.Class == ClassId.DeathKnight)                      if (Value1 < 55)                          return false; // Do not reward achievement for death knights when level < 55              }
Magic Number,WCell.RealmServer.Achievements,AchievementEntryConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\Achievements.DBC.cs,Convert,The following statement contains a magic number: achievementEntry.MapID = (MapId)GetUInt32(rawData' 2);
Magic Number,WCell.RealmServer.Achievements,AchievementEntryConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\Achievements.DBC.cs,Convert,The following statement contains a magic number: achievementEntry.Names = GetStrings(rawData' 4);
Magic Number,WCell.RealmServer.Achievements,AchievementEntryConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\Achievements.DBC.cs,Convert,The following statement contains a magic number: var category = (AchievementCategoryEntryId)GetUInt32(rawData' 38);
Magic Number,WCell.RealmServer.Achievements,AchievementEntryConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\Achievements.DBC.cs,Convert,The following statement contains a magic number: achievementEntry.Points = GetUInt32(rawData' 39);
Magic Number,WCell.RealmServer.Achievements,AchievementEntryConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\Achievements.DBC.cs,Convert,The following statement contains a magic number: achievementEntry.Flags = (AchievementFlags)GetUInt32(rawData' 41);
Magic Number,WCell.RealmServer.Achievements,AchievementEntryConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\Achievements.DBC.cs,Convert,The following statement contains a magic number: achievementEntry.Count = GetUInt32(rawData' 60);
Magic Number,WCell.RealmServer.Achievements,AchievementEntryConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\Achievements.DBC.cs,Convert,The following statement contains a magic number: achievementEntry.RefAchievement = (uint)GetUInt32(rawData' 61);
Magic Number,WCell.RealmServer.Achievements,AchievementCriteriaConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\Achievements.DBC.cs,Convert,The following statement contains a magic number: var criteriaType = (AchievementCriteriaType)GetUInt32(rawData' 2);
Magic Number,WCell.RealmServer.Achievements,AchievementCriteriaConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\Achievements.DBC.cs,Convert,The following statement contains a magic number: CopyTo(rawData' entry' 3);
Magic Number,WCell.RealmServer.Achievements,AchievementCriteriaConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\Achievements.DBC.cs,Convert,The following statement contains a magic number: entry.CompletionFlag = GetUInt32(rawData' 26);
Magic Number,WCell.RealmServer.Achievements,AchievementCriteriaConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\Achievements.DBC.cs,Convert,The following statement contains a magic number: entry.GroupFlag = (AchievementCriteriaGroupFlags) GetUInt32(rawData' 27);
Magic Number,WCell.RealmServer.Achievements,AchievementCriteriaConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Achievements\Achievements.DBC.cs,Convert,The following statement contains a magic number: entry.TimeLimit = GetUInt32(rawData' 29);
Magic Number,WCell.RealmServer.AI.Brains,TestBrain,C:\repos\WCell_WCell\Services\WCell.RealmServer\AI\Brains\TestBrain.cs,GoToNextWP,The following statement contains a magic number: if (m_waypoints == null || m_waypoints.Count < 2)  				return;
Magic Number,WCell.RealmServer.AI.Brains,MobBrain,C:\repos\WCell_WCell\Services\WCell.RealmServer\AI\Brains\MobBrain.cs,OnHeal,The following statement contains a magic number: if (m_owner is NPC && m_owner.IsInCombat && m_owner.CanBeAggroedBy(healer))  			{  				((NPC) m_owner).ThreatCollection[healer] += amtHealed/2;  			}
Magic Number,WCell.RealmServer.Commands,TaxiInfoCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\TaxiCommands.cs,Process,The following statement contains a magic number: if (trigger.Args.Target == null)  				{  					trigger.Reply("Nothing selected.");  				}  				else  				{  					if (!trigger.Args.Target.IsOnTaxi)  					{  						trigger.Reply("{0} is not on a Taxi."' trigger.Args.Target.Name);  					}  					else  					{  						var path = trigger.Args.Target.TaxiPaths.Peek();  						trigger.Reply("Flying on: " + path);  						trigger.Reply("Flying for {0}m {1}s / {2}m {3}s ({4}%)"'  							trigger.Args.Target.TaxiTime / (60 * 1000)'  							(trigger.Args.Target.TaxiTime / 1000) % 60'  							path.PathTime / (60 * 1000)'  							(path.PathTime / 1000) % 60'  							(100 * trigger.Args.Target.TaxiTime) / path.PathTime);  					}  				}
Magic Number,WCell.RealmServer.Commands,TaxiInfoCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\TaxiCommands.cs,Process,The following statement contains a magic number: if (trigger.Args.Target == null)  				{  					trigger.Reply("Nothing selected.");  				}  				else  				{  					if (!trigger.Args.Target.IsOnTaxi)  					{  						trigger.Reply("{0} is not on a Taxi."' trigger.Args.Target.Name);  					}  					else  					{  						var path = trigger.Args.Target.TaxiPaths.Peek();  						trigger.Reply("Flying on: " + path);  						trigger.Reply("Flying for {0}m {1}s / {2}m {3}s ({4}%)"'  							trigger.Args.Target.TaxiTime / (60 * 1000)'  							(trigger.Args.Target.TaxiTime / 1000) % 60'  							path.PathTime / (60 * 1000)'  							(path.PathTime / 1000) % 60'  							(100 * trigger.Args.Target.TaxiTime) / path.PathTime);  					}  				}
Magic Number,WCell.RealmServer.Commands,TaxiInfoCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\TaxiCommands.cs,Process,The following statement contains a magic number: if (trigger.Args.Target == null)  				{  					trigger.Reply("Nothing selected.");  				}  				else  				{  					if (!trigger.Args.Target.IsOnTaxi)  					{  						trigger.Reply("{0} is not on a Taxi."' trigger.Args.Target.Name);  					}  					else  					{  						var path = trigger.Args.Target.TaxiPaths.Peek();  						trigger.Reply("Flying on: " + path);  						trigger.Reply("Flying for {0}m {1}s / {2}m {3}s ({4}%)"'  							trigger.Args.Target.TaxiTime / (60 * 1000)'  							(trigger.Args.Target.TaxiTime / 1000) % 60'  							path.PathTime / (60 * 1000)'  							(path.PathTime / 1000) % 60'  							(100 * trigger.Args.Target.TaxiTime) / path.PathTime);  					}  				}
Magic Number,WCell.RealmServer.Commands,TaxiInfoCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\TaxiCommands.cs,Process,The following statement contains a magic number: if (trigger.Args.Target == null)  				{  					trigger.Reply("Nothing selected.");  				}  				else  				{  					if (!trigger.Args.Target.IsOnTaxi)  					{  						trigger.Reply("{0} is not on a Taxi."' trigger.Args.Target.Name);  					}  					else  					{  						var path = trigger.Args.Target.TaxiPaths.Peek();  						trigger.Reply("Flying on: " + path);  						trigger.Reply("Flying for {0}m {1}s / {2}m {3}s ({4}%)"'  							trigger.Args.Target.TaxiTime / (60 * 1000)'  							(trigger.Args.Target.TaxiTime / 1000) % 60'  							path.PathTime / (60 * 1000)'  							(path.PathTime / 1000) % 60'  							(100 * trigger.Args.Target.TaxiTime) / path.PathTime);  					}  				}
Magic Number,WCell.RealmServer.Commands,TaxiInfoCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\TaxiCommands.cs,Process,The following statement contains a magic number: if (trigger.Args.Target == null)  				{  					trigger.Reply("Nothing selected.");  				}  				else  				{  					if (!trigger.Args.Target.IsOnTaxi)  					{  						trigger.Reply("{0} is not on a Taxi."' trigger.Args.Target.Name);  					}  					else  					{  						var path = trigger.Args.Target.TaxiPaths.Peek();  						trigger.Reply("Flying on: " + path);  						trigger.Reply("Flying for {0}m {1}s / {2}m {3}s ({4}%)"'  							trigger.Args.Target.TaxiTime / (60 * 1000)'  							(trigger.Args.Target.TaxiTime / 1000) % 60'  							path.PathTime / (60 * 1000)'  							(path.PathTime / 1000) % 60'  							(100 * trigger.Args.Target.TaxiTime) / path.PathTime);  					}  				}
Magic Number,WCell.RealmServer.Commands,TaxiInfoCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\TaxiCommands.cs,Process,The following statement contains a magic number: if (trigger.Args.Target == null)  				{  					trigger.Reply("Nothing selected.");  				}  				else  				{  					if (!trigger.Args.Target.IsOnTaxi)  					{  						trigger.Reply("{0} is not on a Taxi."' trigger.Args.Target.Name);  					}  					else  					{  						var path = trigger.Args.Target.TaxiPaths.Peek();  						trigger.Reply("Flying on: " + path);  						trigger.Reply("Flying for {0}m {1}s / {2}m {3}s ({4}%)"'  							trigger.Args.Target.TaxiTime / (60 * 1000)'  							(trigger.Args.Target.TaxiTime / 1000) % 60'  							path.PathTime / (60 * 1000)'  							(path.PathTime / 1000) % 60'  							(100 * trigger.Args.Target.TaxiTime) / path.PathTime);  					}  				}
Magic Number,WCell.RealmServer.Commands,TaxiInfoCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\TaxiCommands.cs,Process,The following statement contains a magic number: if (trigger.Args.Target == null)  				{  					trigger.Reply("Nothing selected.");  				}  				else  				{  					if (!trigger.Args.Target.IsOnTaxi)  					{  						trigger.Reply("{0} is not on a Taxi."' trigger.Args.Target.Name);  					}  					else  					{  						var path = trigger.Args.Target.TaxiPaths.Peek();  						trigger.Reply("Flying on: " + path);  						trigger.Reply("Flying for {0}m {1}s / {2}m {3}s ({4}%)"'  							trigger.Args.Target.TaxiTime / (60 * 1000)'  							(trigger.Args.Target.TaxiTime / 1000) % 60'  							path.PathTime / (60 * 1000)'  							(path.PathTime / 1000) % 60'  							(100 * trigger.Args.Target.TaxiTime) / path.PathTime);  					}  				}
Magic Number,WCell.RealmServer.Commands,TaxiInfoCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\TaxiCommands.cs,Process,The following statement contains a magic number: if (trigger.Args.Target == null)  				{  					trigger.Reply("Nothing selected.");  				}  				else  				{  					if (!trigger.Args.Target.IsOnTaxi)  					{  						trigger.Reply("{0} is not on a Taxi."' trigger.Args.Target.Name);  					}  					else  					{  						var path = trigger.Args.Target.TaxiPaths.Peek();  						trigger.Reply("Flying on: " + path);  						trigger.Reply("Flying for {0}m {1}s / {2}m {3}s ({4}%)"'  							trigger.Args.Target.TaxiTime / (60 * 1000)'  							(trigger.Args.Target.TaxiTime / 1000) % 60'  							path.PathTime / (60 * 1000)'  							(path.PathTime / 1000) % 60'  							(100 * trigger.Args.Target.TaxiTime) / path.PathTime);  					}  				}
Magic Number,WCell.RealmServer.Commands,TaxiInfoCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\TaxiCommands.cs,Process,The following statement contains a magic number: if (trigger.Args.Target == null)  				{  					trigger.Reply("Nothing selected.");  				}  				else  				{  					if (!trigger.Args.Target.IsOnTaxi)  					{  						trigger.Reply("{0} is not on a Taxi."' trigger.Args.Target.Name);  					}  					else  					{  						var path = trigger.Args.Target.TaxiPaths.Peek();  						trigger.Reply("Flying on: " + path);  						trigger.Reply("Flying for {0}m {1}s / {2}m {3}s ({4}%)"'  							trigger.Args.Target.TaxiTime / (60 * 1000)'  							(trigger.Args.Target.TaxiTime / 1000) % 60'  							path.PathTime / (60 * 1000)'  							(path.PathTime / 1000) % 60'  							(100 * trigger.Args.Target.TaxiTime) / path.PathTime);  					}  				}
Magic Number,WCell.RealmServer.Commands,RealmCommandHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\RealmCommandHandler.cs,HandleCommand,The following statement contains a magic number: if (msg.Length > 0 && user.Role.Commands.Count > 0)  			{  				bool isCall;  				char prefix;  				if (!(isCall = !IsCommandPrefix(prefix = msg[0])) || (prefix == ExecCommandPrefix))  				{  					if (msg.Length != 2 || msg[1] != '?')	// help command is special!  					{  						var found = false;  						foreach (var c in msg)  						{  							if (c >= 'A')  							{  								// only try to parse command if it contains any actual characters  								// (which can form a Command-alias)  								found = true;  								break;  							}  						}  						if (!found)  						{  							return false;  						}  					}    					var dbl = false;  					var offset = 1;    					if (msg[1] == prefix)  					{  						// double prefix  						if (!user.Role.CanUseCommandsOnOthers)  						{  							user.SendMessage("You are not allowed to use Commands on others.");  							return true;  						}  						else  						{  							if (user.Target == null)  							{  								user.SendMessage("Invalid target.");  								return true;  							}  							else  							{  								dbl = true;  								offset++;  							}  						}  					}    					var trigger = new IngameCmdTrigger(new StringStream(msg.Substring(offset))' user' target' dbl);    					if (trigger.InitTrigger())  					{  						if (trigger.Args.Context != null)  						{  							trigger.Args.Context.ExecuteInContext(() =>  							{  								if (!isCall)  								{  									Instance.Execute(trigger' false);  								}  								else  								{  									Call(trigger);  								}  							});  						}  						else  						{  							if (!isCall)  							{  								Instance.Execute(trigger' false);  							}  							else  							{  								Call(trigger);  							}  						}  					}  					return true;  				}    				if (prefix == SelectCommandPrefix && user.Role.IsStaff)  				{  					return SelectCommand(user' msg.Substring(1));  				}  			}
Magic Number,WCell.RealmServer.Commands,SendSpellDamageLogCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\DevCommands.cs,Process,The following statement contains a magic number: var damage = trigger.Text.NextUInt(10);
Magic Number,WCell.RealmServer.Commands,POICommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\DevCommands.cs,Process,The following statement contains a magic number: var Icon = 7;
Magic Number,WCell.RealmServer.Commands,LoadAllCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\DevCommands.cs,LoadAll,The following statement contains a magic number: GC.Collect(2' GCCollectionMode.Optimized);
Magic Number,WCell.RealmServer.Commands,QuestLookupCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\QuestCommands.cs,Process,The following statement contains a magic number: var cap = 100;
Magic Number,WCell.RealmServer.Commands,ShutdownCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\AdminCommands.cs,Process,The following statement contains a magic number: if (RealmServer.IsPreparingShutdown)  			{  				RealmServer.Instance.CancelShutdown();  			}  			else  			{  				var delay = trigger.Text.NextUInt(10);  				RealmServer.Instance.ShutdownIn(delay * 1000);  			}
Magic Number,WCell.RealmServer.Commands,ShutdownCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\AdminCommands.cs,Process,The following statement contains a magic number: if (RealmServer.IsPreparingShutdown)  			{  				RealmServer.Instance.CancelShutdown();  			}  			else  			{  				var delay = trigger.Text.NextUInt(10);  				RealmServer.Instance.ShutdownIn(delay * 1000);  			}
Magic Number,WCell.RealmServer.Commands,KickCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\AdminCommands.cs,Process,The following statement contains a magic number: if (trigger is IngameCmdTrigger && trigger.Args.Target == trigger.Args.Character)  			{  				// make sure you don't kick yourself by accident  				trigger.Reply("You cannot kick yourself.");  			}  			else  			{  				var chr = trigger.Args.Target as Character;    				var mod = trigger.Text.NextModifiers();  				if (chr == null)  				{  					if (!mod.Contains("n") || !trigger.Text.HasNext)  					{  						trigger.Reply(RealmLangKey.CmdKickMustProvideName);  						return;  					}  					else  					{  						var name = trigger.Text.NextWord();  						chr = World.GetCharacter(name' false);  						if (chr == null)  						{  							trigger.Reply(RealmLangKey.PlayerNotOnline' name);  							return;  						}  					}  				}    				var delay = Character.DefaultLogoutDelayMillis;    				// check for different delay  				if (mod.Contains("d"))  				{  					delay = trigger.Text.NextInt(delay) * 1000;  				}    				// optional reason  				var reason = trigger.Text.Remainder.Trim();    				// kick:   				// Sits the char down and renders him/her unable to do anything for the given delay' after which he/she gets disconnected  				chr.Kick(trigger.Args.User' reason' delay);  			}
Magic Number,WCell.RealmServer.Commands,BanCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\AdminCommands.cs,Process,The following statement contains a magic number: RealmServer.IOQueue.AddMessage(new Message(() =>  			{  				var context = chr.ContextHandler;  				var acc = chr.Account;  				if (acc == null || context == null)  				{  					trigger.Reply("Character logged off.");  					return;  				}    				if (acc.SetAccountActive(false' until))  				{  					context.AddMessage(() =>  					{  						if (chr.IsInWorld)  						{  							chr.Kick(banner' "Banned " + timeStr' 5);  						}  						trigger.Reply("Done.");  					});  				}  				else  				{  					trigger.Reply("Could not ban Account.");  				}  			}));
Magic Number,WCell.RealmServer.Commands,ClearAreaCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\MiscCommands.cs,Process,The following statement contains a magic number: radius = Math.Min(100' radius);
Magic Number,WCell.RealmServer.Commands,SpawnDOCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\DOCommands.cs,Process,The following statement contains a magic number: var radius = trigger.Text.NextFloat(5);
Magic Number,WCell.RealmServer.Commands,HighlightGOCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\GOCommands.cs,Process,The following statement contains a magic number: if (!create)  			{  				if (exists)  				{  					foreach (var dynObj in highlighters.Keys)  					{  						dynObj.Delete();  					}  					highlighters.Clear();  					Highlighters.Remove(trigger.Args.Character);  				}  				trigger.Reply("GO Highlighters OFF");  			}  			else  			{  				if (!exists)  				{  					Highlighters.Add(trigger.Args.Character' highlighters = new Dictionary<DynamicObject' GameObject>());  				}  				else  				{  					foreach (var dynObj in highlighters.Keys)  					{  						dynObj.Delete();  					}  					highlighters.Clear();  				}    				var caster = trigger.Args.Character;    				var gos = caster.GetObjectsInRadius(50f' ObjectTypes.GameObject' false' 0);  				foreach (GameObject go in gos)  				{  					var map = go.Map;  					var pos = go.Position;  					pos.Z += 7 * go.ScaleX;						// make it appear above the object    					var dO = new DynamicObject(caster' SpellId.ABOUTTOSPAWN' 5' map' pos);  					highlighters.Add(dO' go);  				}  				trigger.Reply("Highlighting {0} GameObjects"' highlighters.Count);  			}
Magic Number,WCell.RealmServer.Commands,HighlightGOCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\GOCommands.cs,Process,The following statement contains a magic number: if (!create)  			{  				if (exists)  				{  					foreach (var dynObj in highlighters.Keys)  					{  						dynObj.Delete();  					}  					highlighters.Clear();  					Highlighters.Remove(trigger.Args.Character);  				}  				trigger.Reply("GO Highlighters OFF");  			}  			else  			{  				if (!exists)  				{  					Highlighters.Add(trigger.Args.Character' highlighters = new Dictionary<DynamicObject' GameObject>());  				}  				else  				{  					foreach (var dynObj in highlighters.Keys)  					{  						dynObj.Delete();  					}  					highlighters.Clear();  				}    				var caster = trigger.Args.Character;    				var gos = caster.GetObjectsInRadius(50f' ObjectTypes.GameObject' false' 0);  				foreach (GameObject go in gos)  				{  					var map = go.Map;  					var pos = go.Position;  					pos.Z += 7 * go.ScaleX;						// make it appear above the object    					var dO = new DynamicObject(caster' SpellId.ABOUTTOSPAWN' 5' map' pos);  					highlighters.Add(dO' go);  				}  				trigger.Reply("Highlighting {0} GameObjects"' highlighters.Count);  			}
Magic Number,WCell.RealmServer.Commands,PortalCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\GOCommands.cs,Process,The following statement contains a magic number: if (locationName.Length < 2)  			{  				trigger.Reply("Invalid search term: " + locationName);  			}  			else if (trigger.Args.Character != null)  			{  				var locs = WorldLocationMgr.GetMatches(locationName);    				if (locs.Count == 0)  				{  					trigger.Reply("No matches found for: " + locationName);  					return;  				}  				else if (locs.Count > 20)  				{  					trigger.Reply("Found too many matches ({0})' please narrow down the location."' locs.Count);  					return;  				}  				else if (locs.Count == 1)  				{  					// single location  					CreatePortal(target' locs[0]);  				}  				else  				{  					// multiple locations  					trigger.Args.Character.StartGossip(WorldLocationMgr.CreateTeleMenu(locs' (convo' loc) => CreatePortal(target' loc)));  				}  			}  			else  			{  				var loc = WorldLocationMgr.GetFirstMatch(locationName);  				if (loc != null)  				{  					CreatePortal(target' loc);  				}  				else  				{  					trigger.Reply("No matches found for: " + locationName);  				}  			}
Magic Number,WCell.RealmServer.Commands,PortalCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\GOCommands.cs,Process,The following statement contains a magic number: if (locationName.Length < 2)  			{  				trigger.Reply("Invalid search term: " + locationName);  			}  			else if (trigger.Args.Character != null)  			{  				var locs = WorldLocationMgr.GetMatches(locationName);    				if (locs.Count == 0)  				{  					trigger.Reply("No matches found for: " + locationName);  					return;  				}  				else if (locs.Count > 20)  				{  					trigger.Reply("Found too many matches ({0})' please narrow down the location."' locs.Count);  					return;  				}  				else if (locs.Count == 1)  				{  					// single location  					CreatePortal(target' locs[0]);  				}  				else  				{  					// multiple locations  					trigger.Args.Character.StartGossip(WorldLocationMgr.CreateTeleMenu(locs' (convo' loc) => CreatePortal(target' loc)));  				}  			}  			else  			{  				var loc = WorldLocationMgr.GetFirstMatch(locationName);  				if (loc != null)  				{  					CreatePortal(target' loc);  				}  				else  				{  					trigger.Reply("No matches found for: " + locationName);  				}  			}
Magic Number,WCell.RealmServer.Commands,MultiplySpeedCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\MovementCommands.cs,Process,The following statement contains a magic number: if (factor > 0.01)  			{  				trigger.Args.Target.SpeedFactor = factor;  				trigger.Reply("SpeedFactor set to: " + factor);  			}  			else  			{  				trigger.Reply("The argument must be a positive number");  			}
Magic Number,WCell.RealmServer.Commands,TeleportCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\MovementCommands.cs,Process,The following statement contains a magic number: if (mod == "c")  			{  				float? o = null;  				Map map = null;    				var x = trigger.Text.NextFloat(-50001);  				var y = trigger.Text.NextFloat(-50001);  				var z = trigger.Text.NextFloat(-50001);    				if (trigger.Text.HasNext)  				{  					var mapId = trigger.Text.NextEnum(MapId.End);  					map = World.GetNonInstancedMap(mapId);  					if (map == null)  					{  						trigger.Reply("Invalid map: " + mapId);  						return;  					}  				}    				if (x < -50000 || y < -50000 || z < -50000)  				{  					trigger.Reply("Invalid position. Usage: " + EnglishParamInfo);  					return;  				}  				if (map == null)  				{  					map = trigger.Args.Character.Map;  				}    				var pos = new Vector3(x' y' z);  				trigger.Args.Target.TeleportTo(map' ref pos' o);  			}  			else  			{  				// Named Teleport Location  				var targetName = trigger.Text.Remainder;    				if (trigger.Args.Character != null)  				{  					// TODO: Use localization  					var locs = WorldLocationMgr.GetMatches(targetName);    					if (locs.Count == 0)  					{  						trigger.Reply("No matches found for: " + targetName);  						return;  					}  					else  					{  						if (locs.Count == 1)  						{  							target.TeleportTo(locs[0]);  						}  						else  						{  							var perfectMatch = locs.FirstOrDefault(loc => loc.DefaultName.Equals(targetName' StringComparison.InvariantCultureIgnoreCase));  							if (perfectMatch != null)  							{  								target.TeleportTo(perfectMatch);  							}  							else  							{  								trigger.Args.Character.StartGossip(WorldLocationMgr.CreateTeleMenu(locs));  							}  						}  					}  				}  				else  				{  					var loc = WorldLocationMgr.GetFirstMatch(targetName);  					if (loc != null)  					{  						target.TeleportTo(loc);  					}  					else  					{  						trigger.Reply("No matches found for: " + targetName);  					}  				}    				// var loc = WorldLocationMgr.GetFirstMatch(targetName);  				//if (loc != null)  				//{  				//    var map = World.GetMap(loc.MapId);  				//    trigger.Args.Target.TeleportTo(map' loc.Position);  				//}  				//else  				//{  				//    trigger.Reply("Teleport failed - Invalid location: " + targetName);  				//}  			}
Magic Number,WCell.RealmServer.Commands,TeleportCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\MovementCommands.cs,Process,The following statement contains a magic number: if (mod == "c")  			{  				float? o = null;  				Map map = null;    				var x = trigger.Text.NextFloat(-50001);  				var y = trigger.Text.NextFloat(-50001);  				var z = trigger.Text.NextFloat(-50001);    				if (trigger.Text.HasNext)  				{  					var mapId = trigger.Text.NextEnum(MapId.End);  					map = World.GetNonInstancedMap(mapId);  					if (map == null)  					{  						trigger.Reply("Invalid map: " + mapId);  						return;  					}  				}    				if (x < -50000 || y < -50000 || z < -50000)  				{  					trigger.Reply("Invalid position. Usage: " + EnglishParamInfo);  					return;  				}  				if (map == null)  				{  					map = trigger.Args.Character.Map;  				}    				var pos = new Vector3(x' y' z);  				trigger.Args.Target.TeleportTo(map' ref pos' o);  			}  			else  			{  				// Named Teleport Location  				var targetName = trigger.Text.Remainder;    				if (trigger.Args.Character != null)  				{  					// TODO: Use localization  					var locs = WorldLocationMgr.GetMatches(targetName);    					if (locs.Count == 0)  					{  						trigger.Reply("No matches found for: " + targetName);  						return;  					}  					else  					{  						if (locs.Count == 1)  						{  							target.TeleportTo(locs[0]);  						}  						else  						{  							var perfectMatch = locs.FirstOrDefault(loc => loc.DefaultName.Equals(targetName' StringComparison.InvariantCultureIgnoreCase));  							if (perfectMatch != null)  							{  								target.TeleportTo(perfectMatch);  							}  							else  							{  								trigger.Args.Character.StartGossip(WorldLocationMgr.CreateTeleMenu(locs));  							}  						}  					}  				}  				else  				{  					var loc = WorldLocationMgr.GetFirstMatch(targetName);  					if (loc != null)  					{  						target.TeleportTo(loc);  					}  					else  					{  						trigger.Reply("No matches found for: " + targetName);  					}  				}    				// var loc = WorldLocationMgr.GetFirstMatch(targetName);  				//if (loc != null)  				//{  				//    var map = World.GetMap(loc.MapId);  				//    trigger.Args.Target.TeleportTo(map' loc.Position);  				//}  				//else  				//{  				//    trigger.Reply("Teleport failed - Invalid location: " + targetName);  				//}  			}
Magic Number,WCell.RealmServer.Commands,TeleportCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\MovementCommands.cs,Process,The following statement contains a magic number: if (mod == "c")  			{  				float? o = null;  				Map map = null;    				var x = trigger.Text.NextFloat(-50001);  				var y = trigger.Text.NextFloat(-50001);  				var z = trigger.Text.NextFloat(-50001);    				if (trigger.Text.HasNext)  				{  					var mapId = trigger.Text.NextEnum(MapId.End);  					map = World.GetNonInstancedMap(mapId);  					if (map == null)  					{  						trigger.Reply("Invalid map: " + mapId);  						return;  					}  				}    				if (x < -50000 || y < -50000 || z < -50000)  				{  					trigger.Reply("Invalid position. Usage: " + EnglishParamInfo);  					return;  				}  				if (map == null)  				{  					map = trigger.Args.Character.Map;  				}    				var pos = new Vector3(x' y' z);  				trigger.Args.Target.TeleportTo(map' ref pos' o);  			}  			else  			{  				// Named Teleport Location  				var targetName = trigger.Text.Remainder;    				if (trigger.Args.Character != null)  				{  					// TODO: Use localization  					var locs = WorldLocationMgr.GetMatches(targetName);    					if (locs.Count == 0)  					{  						trigger.Reply("No matches found for: " + targetName);  						return;  					}  					else  					{  						if (locs.Count == 1)  						{  							target.TeleportTo(locs[0]);  						}  						else  						{  							var perfectMatch = locs.FirstOrDefault(loc => loc.DefaultName.Equals(targetName' StringComparison.InvariantCultureIgnoreCase));  							if (perfectMatch != null)  							{  								target.TeleportTo(perfectMatch);  							}  							else  							{  								trigger.Args.Character.StartGossip(WorldLocationMgr.CreateTeleMenu(locs));  							}  						}  					}  				}  				else  				{  					var loc = WorldLocationMgr.GetFirstMatch(targetName);  					if (loc != null)  					{  						target.TeleportTo(loc);  					}  					else  					{  						trigger.Reply("No matches found for: " + targetName);  					}  				}    				// var loc = WorldLocationMgr.GetFirstMatch(targetName);  				//if (loc != null)  				//{  				//    var map = World.GetMap(loc.MapId);  				//    trigger.Args.Target.TeleportTo(map' loc.Position);  				//}  				//else  				//{  				//    trigger.Reply("Teleport failed - Invalid location: " + targetName);  				//}  			}
Magic Number,WCell.RealmServer.Commands,TeleportCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\MovementCommands.cs,Process,The following statement contains a magic number: if (mod == "c")  			{  				float? o = null;  				Map map = null;    				var x = trigger.Text.NextFloat(-50001);  				var y = trigger.Text.NextFloat(-50001);  				var z = trigger.Text.NextFloat(-50001);    				if (trigger.Text.HasNext)  				{  					var mapId = trigger.Text.NextEnum(MapId.End);  					map = World.GetNonInstancedMap(mapId);  					if (map == null)  					{  						trigger.Reply("Invalid map: " + mapId);  						return;  					}  				}    				if (x < -50000 || y < -50000 || z < -50000)  				{  					trigger.Reply("Invalid position. Usage: " + EnglishParamInfo);  					return;  				}  				if (map == null)  				{  					map = trigger.Args.Character.Map;  				}    				var pos = new Vector3(x' y' z);  				trigger.Args.Target.TeleportTo(map' ref pos' o);  			}  			else  			{  				// Named Teleport Location  				var targetName = trigger.Text.Remainder;    				if (trigger.Args.Character != null)  				{  					// TODO: Use localization  					var locs = WorldLocationMgr.GetMatches(targetName);    					if (locs.Count == 0)  					{  						trigger.Reply("No matches found for: " + targetName);  						return;  					}  					else  					{  						if (locs.Count == 1)  						{  							target.TeleportTo(locs[0]);  						}  						else  						{  							var perfectMatch = locs.FirstOrDefault(loc => loc.DefaultName.Equals(targetName' StringComparison.InvariantCultureIgnoreCase));  							if (perfectMatch != null)  							{  								target.TeleportTo(perfectMatch);  							}  							else  							{  								trigger.Args.Character.StartGossip(WorldLocationMgr.CreateTeleMenu(locs));  							}  						}  					}  				}  				else  				{  					var loc = WorldLocationMgr.GetFirstMatch(targetName);  					if (loc != null)  					{  						target.TeleportTo(loc);  					}  					else  					{  						trigger.Reply("No matches found for: " + targetName);  					}  				}    				// var loc = WorldLocationMgr.GetFirstMatch(targetName);  				//if (loc != null)  				//{  				//    var map = World.GetMap(loc.MapId);  				//    trigger.Args.Target.TeleportTo(map' loc.Position);  				//}  				//else  				//{  				//    trigger.Reply("Teleport failed - Invalid location: " + targetName);  				//}  			}
Magic Number,WCell.RealmServer.Commands,TeleportCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\MovementCommands.cs,Process,The following statement contains a magic number: if (mod == "c")  			{  				float? o = null;  				Map map = null;    				var x = trigger.Text.NextFloat(-50001);  				var y = trigger.Text.NextFloat(-50001);  				var z = trigger.Text.NextFloat(-50001);    				if (trigger.Text.HasNext)  				{  					var mapId = trigger.Text.NextEnum(MapId.End);  					map = World.GetNonInstancedMap(mapId);  					if (map == null)  					{  						trigger.Reply("Invalid map: " + mapId);  						return;  					}  				}    				if (x < -50000 || y < -50000 || z < -50000)  				{  					trigger.Reply("Invalid position. Usage: " + EnglishParamInfo);  					return;  				}  				if (map == null)  				{  					map = trigger.Args.Character.Map;  				}    				var pos = new Vector3(x' y' z);  				trigger.Args.Target.TeleportTo(map' ref pos' o);  			}  			else  			{  				// Named Teleport Location  				var targetName = trigger.Text.Remainder;    				if (trigger.Args.Character != null)  				{  					// TODO: Use localization  					var locs = WorldLocationMgr.GetMatches(targetName);    					if (locs.Count == 0)  					{  						trigger.Reply("No matches found for: " + targetName);  						return;  					}  					else  					{  						if (locs.Count == 1)  						{  							target.TeleportTo(locs[0]);  						}  						else  						{  							var perfectMatch = locs.FirstOrDefault(loc => loc.DefaultName.Equals(targetName' StringComparison.InvariantCultureIgnoreCase));  							if (perfectMatch != null)  							{  								target.TeleportTo(perfectMatch);  							}  							else  							{  								trigger.Args.Character.StartGossip(WorldLocationMgr.CreateTeleMenu(locs));  							}  						}  					}  				}  				else  				{  					var loc = WorldLocationMgr.GetFirstMatch(targetName);  					if (loc != null)  					{  						target.TeleportTo(loc);  					}  					else  					{  						trigger.Reply("No matches found for: " + targetName);  					}  				}    				// var loc = WorldLocationMgr.GetFirstMatch(targetName);  				//if (loc != null)  				//{  				//    var map = World.GetMap(loc.MapId);  				//    trigger.Args.Target.TeleportTo(map' loc.Position);  				//}  				//else  				//{  				//    trigger.Reply("Teleport failed - Invalid location: " + targetName);  				//}  			}
Magic Number,WCell.RealmServer.Commands,TeleportCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\MovementCommands.cs,Process,The following statement contains a magic number: if (mod == "c")  			{  				float? o = null;  				Map map = null;    				var x = trigger.Text.NextFloat(-50001);  				var y = trigger.Text.NextFloat(-50001);  				var z = trigger.Text.NextFloat(-50001);    				if (trigger.Text.HasNext)  				{  					var mapId = trigger.Text.NextEnum(MapId.End);  					map = World.GetNonInstancedMap(mapId);  					if (map == null)  					{  						trigger.Reply("Invalid map: " + mapId);  						return;  					}  				}    				if (x < -50000 || y < -50000 || z < -50000)  				{  					trigger.Reply("Invalid position. Usage: " + EnglishParamInfo);  					return;  				}  				if (map == null)  				{  					map = trigger.Args.Character.Map;  				}    				var pos = new Vector3(x' y' z);  				trigger.Args.Target.TeleportTo(map' ref pos' o);  			}  			else  			{  				// Named Teleport Location  				var targetName = trigger.Text.Remainder;    				if (trigger.Args.Character != null)  				{  					// TODO: Use localization  					var locs = WorldLocationMgr.GetMatches(targetName);    					if (locs.Count == 0)  					{  						trigger.Reply("No matches found for: " + targetName);  						return;  					}  					else  					{  						if (locs.Count == 1)  						{  							target.TeleportTo(locs[0]);  						}  						else  						{  							var perfectMatch = locs.FirstOrDefault(loc => loc.DefaultName.Equals(targetName' StringComparison.InvariantCultureIgnoreCase));  							if (perfectMatch != null)  							{  								target.TeleportTo(perfectMatch);  							}  							else  							{  								trigger.Args.Character.StartGossip(WorldLocationMgr.CreateTeleMenu(locs));  							}  						}  					}  				}  				else  				{  					var loc = WorldLocationMgr.GetFirstMatch(targetName);  					if (loc != null)  					{  						target.TeleportTo(loc);  					}  					else  					{  						trigger.Reply("No matches found for: " + targetName);  					}  				}    				// var loc = WorldLocationMgr.GetFirstMatch(targetName);  				//if (loc != null)  				//{  				//    var map = World.GetMap(loc.MapId);  				//    trigger.Args.Target.TeleportTo(map' loc.Position);  				//}  				//else  				//{  				//    trigger.Reply("Teleport failed - Invalid location: " + targetName);  				//}  			}
Magic Number,WCell.RealmServer.Commands,RespawnCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\NPCCommands.cs,Process,The following statement contains a magic number: var radius = trigger.Text.NextFloat(50);
Magic Number,WCell.RealmServer.Commands,PushbackCommand,C:\repos\WCell_WCell\Services\WCell.RealmServer\Commands\SpellCommands.cs,Process,The following statement contains a magic number: if (target == null)  			{  				trigger.Reply(RealmLangKey.NoValidTarget);  			}  			else  			{  				target.SpellCast.Pushback(trigger.Text.NextInt(1000));  			}
Magic Number,WCell.RealmServer.Content,ContentMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Content\ContentMgr.cs,GetCacheFilename,The following statement contains a magic number: var str = new StringBuilder(mapper.Mapping.DataHolderDefinitions.Length * 12);
Magic Number,WCell.RealmServer.Editor.Menus,PeriodicLoadMapTimer,C:\repos\WCell_WCell\Services\WCell.RealmServer\Editor\Menus\MapEditorMenu.cs,PeriodicLoadMapTimer,The following statement contains a magic number: Delay = 1000;
Magic Number,WCell.RealmServer.Gossips,StaticGossipEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Gossips\GossipEntry.cs,StaticGossipEntry,The following statement contains a magic number: GossipTexts = new StaticGossipText[8];
Magic Number,WCell.RealmServer.Handlers,MirrorImageHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MirrorImageHandler.cs,SendMirrorImageData,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MIRRORIMAGE_DATA' 68))  			{  				packet.Write(mirrorimage.EntityId);  				packet.Write(owner.DisplayId);  				if (owner != null) //player  				{  					packet.Write((byte)owner.Race);  					packet.Write((byte)owner.Gender);  					packet.Write((byte)owner.Class);  					packet.Write(owner.Skin);  					packet.Write(owner.Facial);  					packet.Write(owner.HairStyle);  					packet.Write(owner.HairColor);  					packet.Write(owner.FacialHair);  					packet.Write(owner.GuildId);    					foreach(VisibleEquipmentSlot slot in Enum.GetValues(typeof(VisibleEquipmentSlot)))  					{  						var item = owner.Inventory.Equipment[(EquipmentSlot)slot];  						if (slot == VisibleEquipmentSlot.Head && ((owner.PlayerFlags & PlayerFlags.HideHelm) != 0))  						{  							packet.Write(0);  						}  						else if (slot == VisibleEquipmentSlot.Back && ((owner.PlayerFlags & PlayerFlags.HideCloak) != 0))  						{  							packet.Write(0);  						}  						else if (item != null)  						{  							packet.Write(item.Template.DisplayId);  						}  						else  							packet.Write(0);  					}  					  				}  				else //creature  				{  					for (int i = 0; i < 14; i++)  					{  						packet.Write(0);  					}    				}  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MirrorImageHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MirrorImageHandler.cs,SendMirrorImageData,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MIRRORIMAGE_DATA' 68))  			{  				packet.Write(mirrorimage.EntityId);  				packet.Write(owner.DisplayId);  				if (owner != null) //player  				{  					packet.Write((byte)owner.Race);  					packet.Write((byte)owner.Gender);  					packet.Write((byte)owner.Class);  					packet.Write(owner.Skin);  					packet.Write(owner.Facial);  					packet.Write(owner.HairStyle);  					packet.Write(owner.HairColor);  					packet.Write(owner.FacialHair);  					packet.Write(owner.GuildId);    					foreach(VisibleEquipmentSlot slot in Enum.GetValues(typeof(VisibleEquipmentSlot)))  					{  						var item = owner.Inventory.Equipment[(EquipmentSlot)slot];  						if (slot == VisibleEquipmentSlot.Head && ((owner.PlayerFlags & PlayerFlags.HideHelm) != 0))  						{  							packet.Write(0);  						}  						else if (slot == VisibleEquipmentSlot.Back && ((owner.PlayerFlags & PlayerFlags.HideCloak) != 0))  						{  							packet.Write(0);  						}  						else if (item != null)  						{  							packet.Write(item.Template.DisplayId);  						}  						else  							packet.Write(0);  					}  					  				}  				else //creature  				{  					for (int i = 0; i < 14; i++)  					{  						packet.Write(0);  					}    				}  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,WorldStateHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\WorldStateHandler.cs,SendInitWorldStates,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_INIT_WORLD_STATES' 300))  			{  				packet.Write((uint)newZone.Map.Id);  				packet.Write((uint)newZone.ParentZoneId);  				packet.Write((uint)newZone.Id);    				var countPos = packet.Position;  				packet.Position += 2;    				var count = AppendWorldStates(packet' newZone);    				packet.Position = countPos;  				packet.Write((ushort)count);    				rcv.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,WorldStateHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\WorldStateHandler.cs,SendInitWorldStates,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_INIT_WORLD_STATES' 300))  			{  				packet.Write((uint)newZone.Map.Id);  				packet.Write((uint)newZone.ParentZoneId);  				packet.Write((uint)newZone.Id);    				var countPos = packet.Position;  				packet.Position += 2;    				var count = AppendWorldStates(packet' newZone);    				packet.Position = countPos;  				packet.Write((ushort)count);    				rcv.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,WorldStateHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\WorldStateHandler.cs,SendInitWorldStates,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_INIT_WORLD_STATES' 300))  			{  				packet.Write((uint)map);  				packet.Write((uint)zone);  				packet.Write(areaId);  				packet.Write((ushort)states.Length);  				foreach (var state in states)  				{  					packet.Write((uint)state.Key);  					packet.Write(state.DefaultValue);  				}  				rcv.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,WorldStateHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\WorldStateHandler.cs,SendUpdateWorldState,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_UPDATE_WORLD_STATE' 300))  			{  				packet.Write((uint)key);  				packet.Write(value);  				rcv.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,ArenaTeamHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ArenaTeamHandler.cs,CreateArenaTeamQueryResponsePacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ARENA_TEAM_QUERY_RESPONSE' 4*7+team.Name.Length+1);
Magic Number,WCell.RealmServer.Handlers,ArenaTeamHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ArenaTeamHandler.cs,CreateArenaTeamQueryResponsePacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ARENA_TEAM_QUERY_RESPONSE' 4*7+team.Name.Length+1);
Magic Number,WCell.RealmServer.Handlers,ArenaTeamHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ArenaTeamHandler.cs,CreateArenaTeamStatsResponsePacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ARENA_TEAM_STATS' 4*7);
Magic Number,WCell.RealmServer.Handlers,ArenaTeamHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ArenaTeamHandler.cs,CreateArenaTeamStatsResponsePacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ARENA_TEAM_STATS' 4*7);
Magic Number,WCell.RealmServer.Handlers,ArenaTeamHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ArenaTeamHandler.cs,CreateArenaTeamRosterResponsePacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ARENA_TEAM_ROSTER' 100);
Magic Number,WCell.RealmServer.Handlers,TitleHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TitleHandler.cs,SendTitleEarned,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_TITLE_EARNED' 4 + 4))              {                  packet.WriteUInt((uint) titleEntry.BitIndex);                  packet.WriteUInt(lost ? 0 : 1);                  character.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,TitleHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TitleHandler.cs,SendTitleEarned,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_TITLE_EARNED' 4 + 4))              {                  packet.WriteUInt((uint) titleEntry.BitIndex);                  packet.WriteUInt(lost ? 0 : 1);                  character.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,GroupHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GroupHandler.cs,RandomRollRequest,The following statement contains a magic number: if (min > max || max > 10000)  				return;
Magic Number,WCell.RealmServer.Handlers,GroupHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GroupHandler.cs,SendResult,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PARTY_COMMAND_RESULT' 4 + name.Length + 4 + 4))              {                  packet.Write((uint)resultType);                  packet.WriteCString(name);                  packet.Write((uint)resultCode);                  packet.Write((uint)0); // 3.3.3' lfg cooldown?                    client.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,GroupHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GroupHandler.cs,SendResult,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PARTY_COMMAND_RESULT' 4 + name.Length + 4 + 4))              {                  packet.Write((uint)resultType);                  packet.WriteCString(name);                  packet.Write((uint)resultCode);                  packet.Write((uint)0); // 3.3.3' lfg cooldown?                    client.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,GroupHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GroupHandler.cs,SendResult,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PARTY_COMMAND_RESULT' 4 + name.Length + 4 + 4))              {                  packet.Write((uint)resultType);                  packet.WriteCString(name);                  packet.Write((uint)resultCode);                  packet.Write((uint)0); // 3.3.3' lfg cooldown?                    client.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,GroupHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GroupHandler.cs,SendGroupInvite,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GROUP_INVITE' inviter.Length + 10))  			{  				packet.Write((byte)1);		// unknown since Wotlk  				packet.WriteCString(inviter);                  packet.Write((uint)0); //333a                  packet.Write((byte)0); //333a  			    packet.Write((uint)0); //333a  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,GroupHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GroupHandler.cs,SendRoll,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_RANDOM_ROLL' 20))  			{  				packet.Write(min);  				packet.Write(max);  				packet.Write(value);  				packet.Write(guid.Full);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,GroupHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GroupHandler.cs,SendMeetingStoneSetQueue,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MEETINGSTONE_SETQUEUE))  			{  				packet.Write((uint)0);  				packet.Write((byte)6);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,AchievementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AchievementHandler.cs,SendAchievementData,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ALL_ACHIEVEMENT_DATA' chr.Achievements.AchievementsCount * 2 * 4 + 4))              {  				if (chr.Achievements.AchievementsCount > 0)  				{  					CreateAchievementData(packet' chr);  					chr.Client.Send(packet);  				}              }
Magic Number,WCell.RealmServer.Handlers,AchievementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AchievementHandler.cs,SendAchievementData,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ALL_ACHIEVEMENT_DATA' chr.Achievements.AchievementsCount * 2 * 4 + 4))              {  				if (chr.Achievements.AchievementsCount > 0)  				{  					CreateAchievementData(packet' chr);  					chr.Client.Send(packet);  				}              }
Magic Number,WCell.RealmServer.Handlers,AchievementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AchievementHandler.cs,SendAchievementData,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ALL_ACHIEVEMENT_DATA' chr.Achievements.AchievementsCount * 2 * 4 + 4))              {  				if (chr.Achievements.AchievementsCount > 0)  				{  					CreateAchievementData(packet' chr);  					chr.Client.Send(packet);  				}              }
Magic Number,WCell.RealmServer.Handlers,AchievementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AchievementHandler.cs,SendAchievementEarned,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ACHIEVEMENT_EARNED' 8 + 4 + 4))              {                  chr.EntityId.WritePacked(packet);                  packet.WriteUInt(achievementEntryId);                  packet.WriteDateTime(DateTime.Now);                  packet.WriteUInt(0);                  chr.SendPacketToArea(packet' true);              }
Magic Number,WCell.RealmServer.Handlers,AchievementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AchievementHandler.cs,SendAchievementEarned,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ACHIEVEMENT_EARNED' 8 + 4 + 4))              {                  chr.EntityId.WritePacked(packet);                  packet.WriteUInt(achievementEntryId);                  packet.WriteDateTime(DateTime.Now);                  packet.WriteUInt(0);                  chr.SendPacketToArea(packet' true);              }
Magic Number,WCell.RealmServer.Handlers,AchievementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AchievementHandler.cs,SendAchievementEarned,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ACHIEVEMENT_EARNED' 8 + 4 + 4))              {                  chr.EntityId.WritePacked(packet);                  packet.WriteUInt(achievementEntryId);                  packet.WriteDateTime(DateTime.Now);                  packet.WriteUInt(0);                  chr.SendPacketToArea(packet' true);              }
Magic Number,WCell.RealmServer.Handlers,AchievementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AchievementHandler.cs,SendServerFirstAchievement,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SERVER_FIRST_ACHIEVEMENT' chr.Name.Length + 1 + 8 + 4 + 4))              {                  packet.WriteCString(chr.Name);                  packet.Write(chr.EntityId);                  packet.WriteUInt(achievementEntryId);                  packet.WriteUInt(0);                  World.Broadcast(packet);              }
Magic Number,WCell.RealmServer.Handlers,AchievementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AchievementHandler.cs,SendServerFirstAchievement,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SERVER_FIRST_ACHIEVEMENT' chr.Name.Length + 1 + 8 + 4 + 4))              {                  packet.WriteCString(chr.Name);                  packet.Write(chr.EntityId);                  packet.WriteUInt(achievementEntryId);                  packet.WriteUInt(0);                  World.Broadcast(packet);              }
Magic Number,WCell.RealmServer.Handlers,AchievementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AchievementHandler.cs,SendServerFirstAchievement,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SERVER_FIRST_ACHIEVEMENT' chr.Name.Length + 1 + 8 + 4 + 4))              {                  packet.WriteCString(chr.Name);                  packet.Write(chr.EntityId);                  packet.WriteUInt(achievementEntryId);                  packet.WriteUInt(0);                  World.Broadcast(packet);              }
Magic Number,WCell.RealmServer.Handlers,AchievementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AchievementHandler.cs,CreateAchievementEarnedToGuild,The following statement contains a magic number: packet.WriteUInt(5);
Magic Number,WCell.RealmServer.Handlers,AchievementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AchievementHandler.cs,SendAchievmentStatus,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_CRITERIA_UPDATE' 4*5+8*2))  			{  				packet.WriteUInt((uint)achievementProgressRecord.AchievementCriteriaId);  				packet.WritePackedUInt64(achievementProgressRecord.Counter);					//	amount  				chr.EntityId.WritePacked(packet);  				packet.Write(0);  				packet.WriteDateTime(DateTime.Now);				// start time?  				packet.Write(0);								// Duration  				packet.Write(0);								// Duration left    				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,AchievementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AchievementHandler.cs,SendAchievmentStatus,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_CRITERIA_UPDATE' 4*5+8*2))  			{  				packet.WriteUInt((uint)achievementProgressRecord.AchievementCriteriaId);  				packet.WritePackedUInt64(achievementProgressRecord.Counter);					//	amount  				chr.EntityId.WritePacked(packet);  				packet.Write(0);  				packet.WriteDateTime(DateTime.Now);				// start time?  				packet.Write(0);								// Duration  				packet.Write(0);								// Duration left    				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,AchievementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AchievementHandler.cs,SendAchievmentStatus,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_CRITERIA_UPDATE' 4*5+8*2))  			{  				packet.WriteUInt((uint)achievementProgressRecord.AchievementCriteriaId);  				packet.WritePackedUInt64(achievementProgressRecord.Counter);					//	amount  				chr.EntityId.WritePacked(packet);  				packet.Write(0);  				packet.WriteDateTime(DateTime.Now);				// start time?  				packet.Write(0);								// Duration  				packet.Write(0);								// Duration left    				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,AchievementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AchievementHandler.cs,SendAchievmentStatus,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_CRITERIA_UPDATE' 4*5+8*2))  			{  				packet.WriteUInt((uint)achievementProgressRecord.AchievementCriteriaId);  				packet.WritePackedUInt64(achievementProgressRecord.Counter);					//	amount  				chr.EntityId.WritePacked(packet);  				packet.Write(0);  				packet.WriteDateTime(DateTime.Now);				// start time?  				packet.Write(0);								// Duration  				packet.Write(0);								// Duration left    				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,AchievementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AchievementHandler.cs,SendRespondInspectAchievements,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_RESPOND_INSPECT_ACHIEVEMENTS' chr.Achievements.AchievementsCount * 2 * 4 + 4 + 8))  			{  				chr.EntityId.WritePacked(packet);  				CreateAchievementData(packet' chr);  				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,AchievementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AchievementHandler.cs,SendRespondInspectAchievements,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_RESPOND_INSPECT_ACHIEVEMENTS' chr.Achievements.AchievementsCount * 2 * 4 + 4 + 8))  			{  				chr.EntityId.WritePacked(packet);  				CreateAchievementData(packet' chr);  				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,AchievementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AchievementHandler.cs,SendRespondInspectAchievements,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_RESPOND_INSPECT_ACHIEVEMENTS' chr.Achievements.AchievementsCount * 2 * 4 + 4 + 8))  			{  				chr.EntityId.WritePacked(packet);  				CreateAchievementData(packet' chr);  				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,AchievementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AchievementHandler.cs,SendRespondInspectAchievements,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_RESPOND_INSPECT_ACHIEVEMENTS' chr.Achievements.AchievementsCount * 2 * 4 + 4 + 8))  			{  				chr.EntityId.WritePacked(packet);  				CreateAchievementData(packet' chr);  				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,LFGHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\LFGHandler.cs,HandleJoin,The following statement contains a magic number: packet.SkipBytes(2);
Magic Number,WCell.RealmServer.Handlers,AccountDataHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AccountDataHandler.cs,HandleRequestAccountData,The following statement contains a magic number: if (type > 8)  			{  				s_log.Error("{0} sent data type > 8"' client);  				client.Disconnect();  				return;  			}
Magic Number,WCell.RealmServer.Handlers,AccountDataHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AccountDataHandler.cs,HandleUpdateAccountData,The following statement contains a magic number: if (compressedSize > 65535)  			{  				s_log.Warn("{0} sent a too large data update: " + compressedSize' client.Account);  				client.Disconnect();  				return;  			}
Magic Number,WCell.RealmServer.Handlers,AccountDataHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AccountDataHandler.cs,SendAccountDataTimes,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ACCOUNT_DATA_TIMES))  			{  				var now = Utility.GetEpochTimeFromDT(DateTime.Now);  				packet.Write(now);		// current server time  				packet.Write((byte)1);	// unknown  				packet.Write((uint)mask);    				if (client.Account != null &&  					client.Account.AccountData != null &&  					client.Account.AccountData.TimeStamps != null)  				{  					for (var i = 0; i < 8; i++)  					{  						if ((((uint)mask) & (1 << i)) != 0)  						{  							packet.Write(client.Account.AccountData.TimeStamps[i]);  						}  					}  				}  				else  				{  					LogManager.GetCurrentClassLogger().Debug("Client was not properly logged in when sending ACCOUNT_DATA_TIMES: " + client);  				}    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,AccountDataHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AccountDataHandler.cs,SendAccountData,The following statement contains a magic number: using (var dataPacket = new RealmPacketOut(RealmServerOpCode.SMSG_UPDATE_ACCOUNT_DATA' deCompressedSize + 20))  			{  			    var guid = client.ActiveCharacter != null ? client.ActiveCharacter.EntityId.Full : EntityId.Zero;  				dataPacket.Write(guid);  				dataPacket.Write(type);  				dataPacket.Write(client.Account.AccountData.TimeStamps[type]);    				dataPacket.Write(deCompressedSize);    				if (client.Account.AccountData.DataHolder[type] != null)  				{  					dataPacket.Write(client.Account.AccountData.DataHolder[type]);  				}    				client.Send(dataPacket);  			}
Magic Number,WCell.RealmServer.Handlers,BattlegroundHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\BattlegroundHandler.cs,SendBattlefieldList,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_BATTLEFIELD_LIST))              {                  var fromGUI = true;                    packet.Write((long)0);                  packet.Write(fromGUI);							// since 3.1.1  				packet.Write((uint)queue.Template.Id);  				packet.Write((byte)queue.BracketId);			// BracketId  				packet.Write((byte)0);							// since 3.3                    var pos = packet.Position;                  packet.Position += 4;                    var count = 0;                  for (var i = 0; i < queue.Instances.Count; i++)                  {                      var bg = queue.Instances[i];                      if (chr.Role.IsStaff || bg.CanEnter(chr))                      {                          packet.Write(bg.InstanceId);                          count++;                      }                  }                    packet.Position = pos;                  packet.Write(count);                    chr.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,BattlegroundHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\BattlegroundHandler.cs,SendStatusEnqueued,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_BATTLEFIELD_STATUS))              {  				packet.Write(index);                    var bgId = queue.Template.Id;                    // 64-bit guid start                  packet.Write((byte)ArenaType.None);                  packet.Write((byte)1);              // affects level range calculation?                  packet.Write((uint)bgId);                  packet.Write((ushort)8080);                  // 64-bit guid stop    				packet.Write((byte)0);				// since 3.3  				packet.Write((byte)0);				// since 3.3                  packet.Write(queue.InstanceId);     // instance id                  packet.Write(false);                // bool isRatedMatch                  packet.Write((int)status);                    packet.Write(queue.AverageWaitTime);					// avg wait time for queue' in ms                  packet.Write((int)relation.QueueTime.TotalMilliseconds); // time in the queue' also in ms                    chr.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,BattlegroundHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\BattlegroundHandler.cs,SendStatusInvited,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_BATTLEFIELD_STATUS))              {                  packet.Write(invite.QueueIndex);                    var bg = invite.Team.Battleground;                  var bgId = bg.Template.Id;                    // 64-bit guid start                  packet.Write((byte)ArenaType.None);                  packet.Write((byte)1); // affects level range calculation?                  packet.Write((uint)bgId);                  packet.Write((ushort)8080);                  // 64-bit guid stop    				packet.Write((byte)0);				// since 3.3  				packet.Write((byte)0);				// since 3.3                  packet.Write(bg.InstanceId); // instance id                  packet.Write((byte)chr.FactionGroup.GetBattlegroundSide()); // bool isRatedMatch                  packet.Write((int)status);    				packet.Write((int)bg.Id);                  packet.Write(inviteTimeout);                    chr.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,BattlegroundHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\BattlegroundHandler.cs,SendStatusActive,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_BATTLEFIELD_STATUS))              {  				packet.Write(queueIndex);                    var bgId = bg.Template.Id;                    // 64-bit guid start                  packet.Write((byte)ArenaType.None);                  packet.Write((byte)1); // affects level range calculation?                  packet.Write((uint)bgId);                  packet.Write((ushort)8080);                  // 64-bit guid stop    				packet.Write((byte)0);				// since 3.3  				packet.Write((byte)0);				// since 3.3                  packet.Write(bg.InstanceId); // instance id                  packet.Write((byte)0); // bool isRatedMatch                  packet.Write((int)status);                    packet.Write((int)bg.Id);                    // the number of milliseconds before the Battlefield will close after a battle is finished.                  // This is 0 before the battle is finished                  packet.Write(bg.RemainingShutdownDelay);                    // start time' in ms. clientGetTickCount - this = instance runtime                  packet.Write(bg.RuntimeMillis);                  packet.Write((byte)side); // arena faction - 0 or 1                  chr.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,BattlegroundHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\BattlegroundHandler.cs,SendPvpData,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_PVP_LOG_DATA' 10 + bg.PlayerCount * 40))              {              	var winner = bg.Winner;                    packet.Write(bg.IsArena);                  if (bg.IsArena)                  {                      // TODO: Arena                      for (var i = 0; i < 2; i++)                      {                          packet.Write(0); // old rating                          packet.Write(3999); // new rating (3000 + diff)                          packet.Write(0); // matchmaking value (lvl group/rank?)                      }                        packet.WriteCString(string.Empty); // arena team names                      packet.WriteCString(string.Empty);                  }                    var isFinished = bg.Winner != null;                  packet.Write(isFinished);                  if (isFinished)                  {                      packet.Write((byte)bg.Winner.Side);                  }    				var chrs = bg.Characters;                  List<BattlegroundStats> listStats = new List<BattlegroundStats>(chrs.Count);                  chrs.ForEach(chr => listStats.Add(chr.Battlegrounds.Stats));                  packet.Write(listStats.Count);                    for (var i = 0; i < listStats.Count; i++)                  {                  	var chr = chrs[i];  					if (!chr.IsInBattleground)  					{  						continue;  					}                    	var stats = chr.Battlegrounds.Stats;                        packet.Write(chr.EntityId); // player guid  					packet.Write(stats.KillingBlows);                        if (bg.IsArena)  					{                          packet.Write(winner != null && chr.Battlegrounds.Team == winner); // is on the winning team                      }                      else                      {  						packet.Write(stats.HonorableKills);  						packet.Write(stats.Deaths);  						packet.Write(stats.BonusHonor);                      }    					packet.Write(stats.TotalDamage);  					packet.Write(stats.TotalHealing);                        packet.Write(stats.SpecialStatCount);                    	stats.WriteSpecialStats(packet);                  }                    reciever.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,BattlegroundHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\BattlegroundHandler.cs,SendPvpData,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_PVP_LOG_DATA' 10 + bg.PlayerCount * 40))              {              	var winner = bg.Winner;                    packet.Write(bg.IsArena);                  if (bg.IsArena)                  {                      // TODO: Arena                      for (var i = 0; i < 2; i++)                      {                          packet.Write(0); // old rating                          packet.Write(3999); // new rating (3000 + diff)                          packet.Write(0); // matchmaking value (lvl group/rank?)                      }                        packet.WriteCString(string.Empty); // arena team names                      packet.WriteCString(string.Empty);                  }                    var isFinished = bg.Winner != null;                  packet.Write(isFinished);                  if (isFinished)                  {                      packet.Write((byte)bg.Winner.Side);                  }    				var chrs = bg.Characters;                  List<BattlegroundStats> listStats = new List<BattlegroundStats>(chrs.Count);                  chrs.ForEach(chr => listStats.Add(chr.Battlegrounds.Stats));                  packet.Write(listStats.Count);                    for (var i = 0; i < listStats.Count; i++)                  {                  	var chr = chrs[i];  					if (!chr.IsInBattleground)  					{  						continue;  					}                    	var stats = chr.Battlegrounds.Stats;                        packet.Write(chr.EntityId); // player guid  					packet.Write(stats.KillingBlows);                        if (bg.IsArena)  					{                          packet.Write(winner != null && chr.Battlegrounds.Team == winner); // is on the winning team                      }                      else                      {  						packet.Write(stats.HonorableKills);  						packet.Write(stats.Deaths);  						packet.Write(stats.BonusHonor);                      }    					packet.Write(stats.TotalDamage);  					packet.Write(stats.TotalHealing);                        packet.Write(stats.SpecialStatCount);                    	stats.WriteSpecialStats(packet);                  }                    reciever.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,BattlegroundHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\BattlegroundHandler.cs,SendPvpData,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_PVP_LOG_DATA' 10 + bg.PlayerCount * 40))              {              	var winner = bg.Winner;                    packet.Write(bg.IsArena);                  if (bg.IsArena)                  {                      // TODO: Arena                      for (var i = 0; i < 2; i++)                      {                          packet.Write(0); // old rating                          packet.Write(3999); // new rating (3000 + diff)                          packet.Write(0); // matchmaking value (lvl group/rank?)                      }                        packet.WriteCString(string.Empty); // arena team names                      packet.WriteCString(string.Empty);                  }                    var isFinished = bg.Winner != null;                  packet.Write(isFinished);                  if (isFinished)                  {                      packet.Write((byte)bg.Winner.Side);                  }    				var chrs = bg.Characters;                  List<BattlegroundStats> listStats = new List<BattlegroundStats>(chrs.Count);                  chrs.ForEach(chr => listStats.Add(chr.Battlegrounds.Stats));                  packet.Write(listStats.Count);                    for (var i = 0; i < listStats.Count; i++)                  {                  	var chr = chrs[i];  					if (!chr.IsInBattleground)  					{  						continue;  					}                    	var stats = chr.Battlegrounds.Stats;                        packet.Write(chr.EntityId); // player guid  					packet.Write(stats.KillingBlows);                        if (bg.IsArena)  					{                          packet.Write(winner != null && chr.Battlegrounds.Team == winner); // is on the winning team                      }                      else                      {  						packet.Write(stats.HonorableKills);  						packet.Write(stats.Deaths);  						packet.Write(stats.BonusHonor);                      }    					packet.Write(stats.TotalDamage);  					packet.Write(stats.TotalHealing);                        packet.Write(stats.SpecialStatCount);                    	stats.WriteSpecialStats(packet);                  }                    reciever.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,BattlegroundHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\BattlegroundHandler.cs,SendPvpData,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_PVP_LOG_DATA' 10 + bg.PlayerCount * 40))              {              	var winner = bg.Winner;                    packet.Write(bg.IsArena);                  if (bg.IsArena)                  {                      // TODO: Arena                      for (var i = 0; i < 2; i++)                      {                          packet.Write(0); // old rating                          packet.Write(3999); // new rating (3000 + diff)                          packet.Write(0); // matchmaking value (lvl group/rank?)                      }                        packet.WriteCString(string.Empty); // arena team names                      packet.WriteCString(string.Empty);                  }                    var isFinished = bg.Winner != null;                  packet.Write(isFinished);                  if (isFinished)                  {                      packet.Write((byte)bg.Winner.Side);                  }    				var chrs = bg.Characters;                  List<BattlegroundStats> listStats = new List<BattlegroundStats>(chrs.Count);                  chrs.ForEach(chr => listStats.Add(chr.Battlegrounds.Stats));                  packet.Write(listStats.Count);                    for (var i = 0; i < listStats.Count; i++)                  {                  	var chr = chrs[i];  					if (!chr.IsInBattleground)  					{  						continue;  					}                    	var stats = chr.Battlegrounds.Stats;                        packet.Write(chr.EntityId); // player guid  					packet.Write(stats.KillingBlows);                        if (bg.IsArena)  					{                          packet.Write(winner != null && chr.Battlegrounds.Team == winner); // is on the winning team                      }                      else                      {  						packet.Write(stats.HonorableKills);  						packet.Write(stats.Deaths);  						packet.Write(stats.BonusHonor);                      }    					packet.Write(stats.TotalDamage);  					packet.Write(stats.TotalHealing);                        packet.Write(stats.SpecialStatCount);                    	stats.WriteSpecialStats(packet);                  }                    reciever.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,BattlegroundHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\BattlegroundHandler.cs,SendPlayerJoined,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_BATTLEGROUND_PLAYER_JOINED' 8))              {                  packet.Write(joiningCharacter.EntityId);                    rcv.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,BattlegroundHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\BattlegroundHandler.cs,SendPlayerLeft,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_BATTLEGROUND_PLAYER_LEFT' 8))              {                  packet.Write(leavingCharacter.EntityId);                    rcv.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,BattlegroundHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\BattlegroundHandler.cs,SendBattlegroundError,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GROUP_JOINED_BATTLEGROUND' 4))              {                  packet.Write((int)err);                    if (err == BattlegroundJoinError.JoinTimedOut || err == BattlegroundJoinError.JoinFailed)                      packet.Write((ulong)0);                    rcv.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,BattlegroundHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\BattlegroundHandler.cs,SendGroupJoinedBattleground,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GROUP_JOINED_BATTLEGROUND' 4))              {                  packet.Write((int)battleground);                    rcv.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,CombatLogHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatLogHandler.cs,SendPeriodicAuraLog,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PERIODICAURALOG' 32))  			{  				caster.EntityId.WritePacked(packet);  				target.EntityId.WritePacked(packet);  				packet.WriteUInt(spellId);  				packet.WriteUInt(extra);  				packet.WriteUInt((uint)flags);  				packet.WriteUInt(amount);    				target.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,CombatLogHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatLogHandler.cs,SendPeriodicDamage,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PERIODICAURALOG' 32))  			{  				caster.EntityId.WritePacked(packet);  				target.EntityId.WritePacked(packet);  				packet.WriteUInt(spellId);    				packet.WriteUInt(1);				// count  				packet.WriteUInt((uint)type);  				packet.WriteUInt(amount);    				target.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,CombatLogHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatLogHandler.cs,SendSpellMiss,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SPELLLOGMISS' 34))  			{  				packet.Write(cast.Spell.Id);  				packet.Write(cast.CasterReference.EntityId);  				packet.Write(display);// TODO: test this value. Its a bool that seems to determine whether to display this packet in the combat log  				packet.Write(missedTargets.Count);  				foreach (var miss in missedTargets)  				{  					packet.Write(miss.Target.EntityId);  					packet.Write((byte)miss.Reason);  				}  				cast.SendPacketToArea(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CombatLogHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatLogHandler.cs,SendSpellOrDamageImmune,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SPELLORDAMAGE_IMMUNE' 21))  			{  				packet.Write(obj1.EntityId);  				packet.Write(obj2.EntityId);  				packet.Write(spellId);  				packet.Write(b1);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CombatLogHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatLogHandler.cs,SendEnergizeLog,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SPELLENERGIZELOG' 25))  			{  				target.EntityId.WritePacked(packet);  				caster.EntityId.WritePacked(packet);  				packet.Write(spellId);  				packet.Write((int)powerType);  				packet.Write(value);  				caster.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,CombatLogHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatLogHandler.cs,SendSpellLogExecute,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SPELLLOGEXECUTE' 37);
Magic Number,WCell.RealmServer.Handlers,CombatLogHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatLogHandler.cs,SendHealLog,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SPELLHEALLOG' 25))  			{  				target.EntityId.WritePacked(packet);  				caster.EntityId.WritePacked(packet);    				packet.Write(spellId);  				packet.Write(value);  				packet.Write(overheal);		// overheal  				packet.Write(0);			// absorb  				packet.Write((byte)(critical ? 1 : 0));  				packet.Write((byte)0);		// unused    				target.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,CombatLogHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatLogHandler.cs,SendEnvironmentalDamage,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ENVIRONMENTALDAMAGELOG' 21))  			{  				target.EntityId.WritePacked(packet);    				packet.WriteByte((byte)type);  				packet.WriteUInt(totalDamage);  				packet.WriteULong(0);    				target.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,CombatLogHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatLogHandler.cs,SendMagicDamage,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SPELLNONMELEEDAMAGELOG' 40))  			{  				state.Victim.EntityId.WritePacked(packet);  				if (state.Attacker != null)  				{  					state.Attacker.EntityId.WritePacked(packet);  				}  				else  				{  					packet.Write((byte)0);  				}  				packet.Write(state.SpellEffect != null ? state.SpellEffect.Spell.Id : 0);    				packet.Write(state.Damage);  				packet.Write(0); // overkill?  				packet.Write((byte)state.Schools);  				packet.Write(state.Absorbed);  				packet.Write(state.Resisted);  				//packet.Write(0);				// is always 0  			    packet.Write(state.Schools.HasAnyFlag(DamageSchoolMask.Physical));  				packet.Write((byte)0);			// 0 or 1  				packet.Write(state.Blocked);    				// also flags 0x8' 0x10'   				var hitFlags = state.IsCritical ? SpellLogFlags.Critical : SpellLogFlags.None;  				packet.Write((int)hitFlags);  				packet.Write((byte)0);// unused by client    				state.Victim.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,CombatLogHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatLogHandler.cs,SendMagicDamage,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SPELLNONMELEEDAMAGELOG' 40))  			{  				victim.EntityId.WritePacked(packet);  				if (attacker != null)  				{  					attacker.EntityId.WritePacked(packet);  				}  				else  				{  					packet.Write((byte)0);  				}  				packet.Write((uint)spell);    				packet.Write(damage);  				packet.Write(overkill);  				packet.Write((byte)schools);  				packet.Write(absorbed);  				packet.Write(resisted);  				packet.Write(0);				// apparently always 0  				packet.Write(unkBool);			// 0 or 1  				packet.Write(blocked);  				// also flags 0x8' 0x10'   				packet.Write((uint)flags);  				packet.Write((byte)0);// unused by client    				victim.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,VehicleHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\VehicleHandler.cs,SendBreakTarget,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_BREAK_TARGET' 8))  			{  				packet.Write(target.EntityId);  				rcvr.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,AreaTriggerHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AreaTriggerHandler.cs,SendAreaTriggerMessage,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_AREA_TRIGGER_MESSAGE' (msg.Length * 2) + 4))  			{  				packet.WriteUIntPascalString(msg);  				packet.Write((byte)0);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,AreaTriggerHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AreaTriggerHandler.cs,SendAreaTriggerMessage,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_AREA_TRIGGER_MESSAGE' (msg.Length * 2) + 4))  			{  				packet.WriteUIntPascalString(msg);  				packet.Write((byte)0);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,AuctionHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AuctionHandler.cs,HandleAuctionListPendingSales,The following statement contains a magic number: using (var packetOut = new RealmPacketOut(RealmServerOpCode.SMSG_AUCTION_LIST_PENDING_SALES' 14 * (int)count))              {                                   packetOut.Write(count);                  for (var i = 0; i < count; ++i)                  {                      packetOut.Write("");                      packetOut.Write("");                      packetOut.WriteUInt(0);                      packetOut.WriteUInt(0);                      packetOut.WriteFloat(0f);                      client.Send(packetOut);                  }              }
Magic Number,WCell.RealmServer.Handlers,AuctionHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AuctionHandler.cs,SendAuctionHello,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_AUCTION_HELLO' 12))  			{  				packet.Write(auctioneer.EntityId);  				packet.Write((uint)auctioneer.AuctioneerEntry.LinkedHouseFaction); // id from AuctionHouse.dbc  			    packet.Write(true); // auction enabled/disabled    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,AuctionHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AuctionHandler.cs,SendAuctionCommandResult,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_AUCTION_COMMAND_RESULT' 12))  			{  				if (auction != null)  				{  					packet.Write(auction.ItemLowId);  				}  				else  				{  					packet.Write(0u);  				}  				packet.Write((uint)action);  				packet.Write((uint)error);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,AuctionHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AuctionHandler.cs,SendAuctionOutbidNotification,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_AUCTION_BIDDER_NOTIFICATION' 8 * 4))  			{  				packet.Write((uint)auction.HouseFaction);  				packet.Write(auction.ItemLowId);  				packet.Write(auction.BidderLowId);  				packet.Write(newBid);  				packet.Write(minBidInc);  				packet.Write(auction.ItemTemplateId);  				packet.Write(0u);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,AuctionHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AuctionHandler.cs,SendAuctionOutbidNotification,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_AUCTION_BIDDER_NOTIFICATION' 8 * 4))  			{  				packet.Write((uint)auction.HouseFaction);  				packet.Write(auction.ItemLowId);  				packet.Write(auction.BidderLowId);  				packet.Write(newBid);  				packet.Write(minBidInc);  				packet.Write(auction.ItemTemplateId);  				packet.Write(0u);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,AuctionHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AuctionHandler.cs,SendAuctionListOwnerItems,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_AUCTION_OWNER_LIST_RESULT' 1024);
Magic Number,WCell.RealmServer.Handlers,AuctionHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AuctionHandler.cs,SendAuctionListBidderItems,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_AUCTION_BIDDER_LIST_RESULT' 1024);
Magic Number,WCell.RealmServer.Handlers,AuctionHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AuctionHandler.cs,SendAuctionListItems,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_AUCTION_LIST_RESULT' 7000);
Magic Number,WCell.RealmServer.Handlers,AuctionHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AuctionHandler.cs,SendAuctionListItems,The following statement contains a magic number: packet.Write(300);
Magic Number,WCell.RealmServer.Handlers,AuctionHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AuctionHandler.cs,BuildAuctionPacket,The following statement contains a magic number: for (var i = 0; i < 7; i++)  			{  				if (item.EnchantIds != null)  				{  					packet.Write(item.EnchantIds[i]);  					packet.Write(i);					// enchant duration  					packet.Write(item.GetEnchant((EnchantSlot)i).Charges);	// TODO: Fix enchant charges  				}  				else  				{  					packet.Write(0);  					packet.Write(0);  					packet.Write(0);  				}  			}
Magic Number,WCell.RealmServer.Handlers,DuelHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\DuelHandler.cs,SendCountdown,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_DUEL_COUNTDOWN' 4))              {                  packet.Write(millis);                    duelist.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,DuelHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\DuelHandler.cs,SendOutOfBounds,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_DUEL_OUTOFBOUNDS' 4))              {                  packet.Write(cancelDelayMillis);                    duelist.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,DuelHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\DuelHandler.cs,SendInBounds,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_DUEL_INBOUNDS' 4))              {                  duelist.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,GuildHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GuildHandler.cs,HandleGuildBankSwapItems,The following statement contains a magic number: if (isBankToBank)  			{  				toBankTab = packet.ReadByte();  				toTabSlot = packet.ReadByte();  				unknown1 = packet.ReadUInt32();  				fromBankTab = packet.ReadByte();  				fromTabSlot = packet.ReadByte();  				itemEntryId = packet.ReadUInt32();  				unknown2 = packet.ReadByte();  				amount = packet.ReadByte();    				if (toTabSlot >= GuildMgr.MAX_BANK_TAB_SLOTS) return;  				if ((toBankTab == fromBankTab) && (toTabSlot == fromTabSlot)) return;  			}  			else  			{  				fromBankTab = packet.ReadByte();  				fromTabSlot = packet.ReadByte();  				itemEntryId = packet.ReadUInt32();  				isAutoStore = packet.ReadBoolean();  				autoStoreCount = (byte)0;  				if (isAutoStore)  				{  					autoStoreCount = packet.ReadByte();  					packet.SkipBytes(5);  				}  				else  				{  					bagSlot = packet.ReadByte();  					slot = packet.ReadByte();  				}  				isBankToChar = packet.ReadBoolean();  				amount = packet.ReadByte();    				if ((fromTabSlot >= GuildMgr.MAX_BANK_TAB_SLOTS) && fromTabSlot != 0xFF) return;  			}
Magic Number,WCell.RealmServer.Handlers,GuildHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GuildHandler.cs,AddRank,The following statement contains a magic number: if (rankName.Length < 2 || rankName.Length > GuildMgr.MaxGuildRankNameLength)  				return;
Magic Number,WCell.RealmServer.Handlers,GuildHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GuildHandler.cs,CreateEventPacket,The following statement contains a magic number: switch (guildEvent)  			{  				case GuildEvents.PROMOTION:  				case GuildEvents.DEMOTION:  					packet.Write((byte)3);  					packet.WriteCString(influencer.Name);  					packet.WriteCString(affectedMember.Name);  					packet.WriteCString(affectedMember.Rank.Name);  					break;    				case GuildEvents.MOTD:  					if (guild.MOTD != null)  					{  						packet.Write((byte)1);  						packet.WriteCString(guild.MOTD);  					}  					else  					{  						packet.Write((byte)0);  					}  					break;    				case GuildEvents.JOINED:  				case GuildEvents.LEFT:  				case GuildEvents.ONLINE:  				case GuildEvents.OFFLINE:  					packet.Write((byte)1);  					packet.WriteCString(affectedMember.Name);  					break;    				case GuildEvents.REMOVED:  					packet.Write((byte)2);  					packet.WriteCString(influencer.Name);  					packet.WriteCString(affectedMember.Name);  					break;    				case GuildEvents.LEADER_CHANGED:  					packet.Write((byte)2);  					packet.WriteCString(affectedMember.Name);  					packet.WriteCString(influencer.Name);  					break;    				default:  					packet.Write((byte)0);  					break;  			}
Magic Number,WCell.RealmServer.Handlers,GuildHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GuildHandler.cs,CreateEventPacket,The following statement contains a magic number: switch (guildEvent)  			{  				case GuildEvents.PROMOTION:  				case GuildEvents.DEMOTION:  					packet.Write((byte)3);  					packet.WriteCString(influencer.Name);  					packet.WriteCString(affectedMember.Name);  					packet.WriteCString(affectedMember.Rank.Name);  					break;    				case GuildEvents.MOTD:  					if (guild.MOTD != null)  					{  						packet.Write((byte)1);  						packet.WriteCString(guild.MOTD);  					}  					else  					{  						packet.Write((byte)0);  					}  					break;    				case GuildEvents.JOINED:  				case GuildEvents.LEFT:  				case GuildEvents.ONLINE:  				case GuildEvents.OFFLINE:  					packet.Write((byte)1);  					packet.WriteCString(affectedMember.Name);  					break;    				case GuildEvents.REMOVED:  					packet.Write((byte)2);  					packet.WriteCString(influencer.Name);  					packet.WriteCString(affectedMember.Name);  					break;    				case GuildEvents.LEADER_CHANGED:  					packet.Write((byte)2);  					packet.WriteCString(affectedMember.Name);  					packet.WriteCString(influencer.Name);  					break;    				default:  					packet.Write((byte)0);  					break;  			}
Magic Number,WCell.RealmServer.Handlers,GuildHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GuildHandler.cs,CreateEventPacket,The following statement contains a magic number: switch (guildEvent)  			{  				case GuildEvents.PROMOTION:  				case GuildEvents.DEMOTION:  					packet.Write((byte)3);  					packet.WriteCString(influencer.Name);  					packet.WriteCString(affectedMember.Name);  					packet.WriteCString(affectedMember.Rank.Name);  					break;    				case GuildEvents.MOTD:  					if (guild.MOTD != null)  					{  						packet.Write((byte)1);  						packet.WriteCString(guild.MOTD);  					}  					else  					{  						packet.Write((byte)0);  					}  					break;    				case GuildEvents.JOINED:  				case GuildEvents.LEFT:  				case GuildEvents.ONLINE:  				case GuildEvents.OFFLINE:  					packet.Write((byte)1);  					packet.WriteCString(affectedMember.Name);  					break;    				case GuildEvents.REMOVED:  					packet.Write((byte)2);  					packet.WriteCString(influencer.Name);  					packet.WriteCString(affectedMember.Name);  					break;    				case GuildEvents.LEADER_CHANGED:  					packet.Write((byte)2);  					packet.WriteCString(affectedMember.Name);  					packet.WriteCString(influencer.Name);  					break;    				default:  					packet.Write((byte)0);  					break;  			}
Magic Number,WCell.RealmServer.Handlers,GuildHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GuildHandler.cs,SendGuildBankTabContentUpdate,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GUILD_BANK_LIST))  			{  				packet.Write(guild.Money);  				packet.Write(tabId);    				packet.Write(rank.BankTabRights[tabId].WithdrawlAllowance);  				packet.Write(false); // hasTabnames = false;    				var list = new List<int>   				{  					slot1                  };    				if (slot2 != -1)  				{  					list.Add(slot2);  					list.Sort();  				}    				packet.WriteByte((byte)list.Count);  				foreach (var slot in list)  				{  					packet.Write((byte)slot);  					var item = guild.Bank[tabId][slot];    					if (item == null)  					{  						packet.Write(0);  						continue;  					}  					packet.Write(item.EntryId);  					packet.Write((uint)0);    					var randomPropId = item.RandomProperty;  					packet.Write(randomPropId);  					if (randomPropId != 0)  					{  						packet.Write(item.RandomSuffix);  					}    					packet.Write(item.Amount);  					packet.Write((uint)0);  					packet.Write((byte)0);    					if (item.EnchantIds == null)  					{  						packet.Write((byte)0);  						continue;  					}    					var pos = packet.Position;  					var count = 0;  					for (var i = 0; i < 3; ++i)  					{  						if (item.EnchantIds[i] == 0) continue;  						packet.Write((byte)i);  						packet.Write(item.EnchantIds[i]);  						count++;  					}  					packet.InsertByteAt((byte)count' pos' true);    				} // end foreach    				guild.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,GuildHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GuildHandler.cs,SendGuildBankList,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GUILD_BANK_LIST))  			{  				packet.Write(guild.Money);  				packet.Write(tabId);  				packet.Write(chr.GuildMember.Rank.BankTabRights[tabId].WithdrawlAllowance);  				var sendHasTabNames = tabId == 0 ? hasTabNames : false;  				packet.Write(sendHasTabNames);    				if (sendHasTabNames)  				{  					packet.Write((byte)guild.PurchasedBankTabCount);  					for (var i = 0; i < guild.PurchasedBankTabCount; ++i)  					{  						packet.Write(gBank[i].Name);  						packet.Write(gBank[i].Icon);  					}  				}    				if (!hasItemInfo)  				{  					chr.Client.Send(packet);  					return;  				}    				var bankTab = gBank[tabId];    				var bankTabItemCount = bankTab.ItemRecords.Where(record => record != null).Count();  				packet.Write((byte)bankTabItemCount);    				foreach (var item in bankTab.ItemRecords.Where(record => record != null))  				{  					packet.Write((byte)item.Slot);    					packet.Write(item.EntryId);    					packet.Write((uint)0);                  // 3.3.0 (0x8000' 0x8020)  					var randPropId = item.RandomProperty;  					packet.Write(randPropId);  					if (randPropId > 0)  					{  						packet.Write(item.RandomSuffix);  					}    					packet.Write(item.Amount);  					packet.Write((uint)0);  					packet.Write((byte)0);    					if (item.EnchantIds == null)  					{  						packet.Write((byte)0);  						continue;  					}    					var pos = packet.Position;  					var count = 0;  					for (var i = 0; i < 3; ++i)  					{  						if (item.EnchantIds[i] == 0) continue;  						packet.Write((byte)i);  						packet.Write(item.EnchantIds[i]);  						count++;  					}  					packet.InsertByteAt((byte)count' pos' true);    				}    				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,LootHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\LootHandler.cs,SendLootResponse,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_LOOT_RESPONSE' 14 + (loot.RemainingCount * 22)))  			{  				var looterEntry = looter.LooterEntry;    				packet.Write(loot.Lootable.EntityId);  				packet.Write((byte)loot.ResponseType);  				packet.Write(loot.IsMoneyLooted ? 0 : loot.Money);    				var countPos = packet.Position;  				var count = 0;  				packet.Position++;  				for (var i = 0; i < loot.Items.Length; i++)  				{  					var item = loot.Items[i];  					var templ = item.Template;  					var looters = item.MultiLooters;  					if (!item.Taken &&  						((looters == null && templ.CheckLootConstraints(looter)) ||  						(looters != null && looters.Contains(looterEntry))))  					{  						packet.Write((byte)i);  						packet.Write(templ.Id);  						packet.Write(item.Amount);  						packet.Write(templ.DisplayId);  						packet.Write(templ.RandomSuffixFactor);  						packet.Write(templ.RandomSuffixFactor > 0 ? -(int)templ.RandomSuffixId : (int)templ.RandomPropertiesId);  						packet.Write((byte)item.Decision);  						count++;  					}  				}    				packet.Position = countPos;  				packet.Write((byte)count);    				looter.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,LootHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\LootHandler.cs,SendLootResponse,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_LOOT_RESPONSE' 14 + (loot.RemainingCount * 22)))  			{  				var looterEntry = looter.LooterEntry;    				packet.Write(loot.Lootable.EntityId);  				packet.Write((byte)loot.ResponseType);  				packet.Write(loot.IsMoneyLooted ? 0 : loot.Money);    				var countPos = packet.Position;  				var count = 0;  				packet.Position++;  				for (var i = 0; i < loot.Items.Length; i++)  				{  					var item = loot.Items[i];  					var templ = item.Template;  					var looters = item.MultiLooters;  					if (!item.Taken &&  						((looters == null && templ.CheckLootConstraints(looter)) ||  						(looters != null && looters.Contains(looterEntry))))  					{  						packet.Write((byte)i);  						packet.Write(templ.Id);  						packet.Write(item.Amount);  						packet.Write(templ.DisplayId);  						packet.Write(templ.RandomSuffixFactor);  						packet.Write(templ.RandomSuffixFactor > 0 ? -(int)templ.RandomSuffixId : (int)templ.RandomPropertiesId);  						packet.Write((byte)item.Decision);  						count++;  					}  				}    				packet.Position = countPos;  				packet.Write((byte)count);    				looter.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MailHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MailHandler.cs,SendResult,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SEND_MAIL_RESULT' 12))  			{  				packet.Write(mailId);  				packet.Write((uint)result);  				packet.Write((uint)err);  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MailHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MailHandler.cs,SendResult,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SEND_MAIL_RESULT' 12 + 4))  			{  				packet.Write(mailId);  				packet.Write((uint)result);  				packet.Write((uint)err);  				packet.Write((uint)invErr);  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MailHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MailHandler.cs,SendResult,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SEND_MAIL_RESULT' 12 + 4))  			{  				packet.Write(mailId);  				packet.Write((uint)result);  				packet.Write((uint)err);  				packet.Write((uint)invErr);  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MailHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MailHandler.cs,SendResult,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SEND_MAIL_RESULT' 12 + 4 + 4))  			{  				packet.Write(mailId);  				packet.Write((uint)result);  				packet.Write((uint)err);  				packet.Write(itemId);  				packet.Write(itemCount);  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MailHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MailHandler.cs,SendResult,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SEND_MAIL_RESULT' 12 + 4 + 4))  			{  				packet.Write(mailId);  				packet.Write((uint)result);  				packet.Write((uint)err);  				packet.Write(itemId);  				packet.Write(itemCount);  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MailHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MailHandler.cs,SendResult,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SEND_MAIL_RESULT' 12 + 4 + 4))  			{  				packet.Write(mailId);  				packet.Write((uint)result);  				packet.Write((uint)err);  				packet.Write(itemId);  				packet.Write(itemCount);  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MailHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MailHandler.cs,SendMailList,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MAIL_LIST_RESULT' 128 * messages.Count))  			{  				const int enchantCount = (int)EnchantSlot.Prismatic + 1;    				packet.Write(messages.Count);  				var count = Math.Min(messages.Count' 0xFF);    				packet.Write((byte)count);  				for (var m = 0; m < count; m++)  				{  					var letter = messages[m];                        // Skip deleted mails                      if(letter.IsDeleted)                          continue;    					var sizePos = packet.Position;  					packet.Position = sizePos + 2; // size of message  					packet.Write((uint) letter.Guid);  					packet.Write((byte) letter.MessageType);    					switch (letter.MessageType)  					{  						case MailType.Normal:  							packet.Write(letter.SenderEntityId);  							break;  						case MailType.Creature:  							packet.Write(letter.SenderEntityId.Low);  							break;  						case MailType.GameObject:  							packet.Write(letter.SenderEntityId.Low);  							break;  						case MailType.Auction:  							packet.Write(letter.SenderEntityId.Low);  							break;  						case MailType.Item:  							packet.WriteUInt(0); // ? 3.2.2  							// What should go here?  							break;  						default:  							break;  					}    					packet.Write(letter.CashOnDelivery);  					//packet.Write(letter.TextId);    					packet.Write(0u);  					packet.Write((uint) letter.MessageStationary);  					packet.Write(letter.IncludedMoney);    					var flags = letter.ReadTime != null ? MailListFlags.Read : MailListFlags.NotRead;  					switch (letter.MessageType)  					{  						case MailType.Normal:  							flags |= MailListFlags.Delete;  							if (letter.IncludedItemCount > 0)  							{  								flags |= MailListFlags.Return;  							}  							break;  						case MailType.Auction:  							flags |= MailListFlags.Auction;  							break;  					}  					packet.Write((uint) flags);    					packet.Write((float) ((letter.ExpireTime - DateTime.Now).TotalMilliseconds/(24*60*60*1000)));  					packet.Write(0u);                      packet.Write(letter.Subject);                      packet.Write(letter.Body);    					if (letter.IncludedItemCount == 0)  					{  						// No items  						packet.Write((byte) 0);  					}  					else  					{  						// There are items to display  						var items = letter.IncludedItems;  						packet.Write((byte) items.Count);  						byte i = 0;  						foreach (var record in items)  						{  							packet.Write(i++);  							if (record != null)  							{  								packet.Write(record.EntityLowId);  								packet.Write(record.EntryId);    								if (record.EnchantIds != null)  								{  									for (var j = 0; j < enchantCount; ++j)  									{  										var enchantId = record.EnchantIds[j];  										if (enchantId != 0)  										{  											var enchant = EnchantMgr.GetEnchantmentEntry((uint) enchantId);  											if (enchant != null)  											{  												packet.Write(0); // charges  												if (j == (int) EnchantSlot.Temporary)  												{  													packet.Write(record.EnchantTempTime);  												}  												else  												{  													packet.Write(0);  												}  												packet.Write(enchantId);  												continue;  											}  										}  										packet.Write(0);  										packet.Write(0);  										packet.Write(0);  									}  								}  								else  								{  									for (var j = 0; j < enchantCount; ++j)  									{  										packet.Write(0u);  										packet.Write(0);  										packet.Write(0u);  									}  								}    								packet.Write(record.RandomProperty);  								packet.Write(record.RandomSuffix);  								packet.Write(record.Amount);  								packet.Write((uint) record.Charges);  								packet.Write(record.Template.MaxDurability);  								packet.Write(record.Durability);  								packet.Write((byte) 0);  							}  							else  							{  								packet.Write(0u);  								packet.Write(0u);    								for (byte j = 0; j < enchantCount; ++j)  								{  									packet.Write(0u);  									packet.Write(0u);  									packet.Write(0u);  								}    								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write((byte)0);  							}  						}  					}    					var endPos = packet.Position;  					packet.Position = sizePos;  					packet.Write((ushort) (endPos - sizePos));  					packet.Position = endPos;  				}  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MailHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MailHandler.cs,SendMailList,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MAIL_LIST_RESULT' 128 * messages.Count))  			{  				const int enchantCount = (int)EnchantSlot.Prismatic + 1;    				packet.Write(messages.Count);  				var count = Math.Min(messages.Count' 0xFF);    				packet.Write((byte)count);  				for (var m = 0; m < count; m++)  				{  					var letter = messages[m];                        // Skip deleted mails                      if(letter.IsDeleted)                          continue;    					var sizePos = packet.Position;  					packet.Position = sizePos + 2; // size of message  					packet.Write((uint) letter.Guid);  					packet.Write((byte) letter.MessageType);    					switch (letter.MessageType)  					{  						case MailType.Normal:  							packet.Write(letter.SenderEntityId);  							break;  						case MailType.Creature:  							packet.Write(letter.SenderEntityId.Low);  							break;  						case MailType.GameObject:  							packet.Write(letter.SenderEntityId.Low);  							break;  						case MailType.Auction:  							packet.Write(letter.SenderEntityId.Low);  							break;  						case MailType.Item:  							packet.WriteUInt(0); // ? 3.2.2  							// What should go here?  							break;  						default:  							break;  					}    					packet.Write(letter.CashOnDelivery);  					//packet.Write(letter.TextId);    					packet.Write(0u);  					packet.Write((uint) letter.MessageStationary);  					packet.Write(letter.IncludedMoney);    					var flags = letter.ReadTime != null ? MailListFlags.Read : MailListFlags.NotRead;  					switch (letter.MessageType)  					{  						case MailType.Normal:  							flags |= MailListFlags.Delete;  							if (letter.IncludedItemCount > 0)  							{  								flags |= MailListFlags.Return;  							}  							break;  						case MailType.Auction:  							flags |= MailListFlags.Auction;  							break;  					}  					packet.Write((uint) flags);    					packet.Write((float) ((letter.ExpireTime - DateTime.Now).TotalMilliseconds/(24*60*60*1000)));  					packet.Write(0u);                      packet.Write(letter.Subject);                      packet.Write(letter.Body);    					if (letter.IncludedItemCount == 0)  					{  						// No items  						packet.Write((byte) 0);  					}  					else  					{  						// There are items to display  						var items = letter.IncludedItems;  						packet.Write((byte) items.Count);  						byte i = 0;  						foreach (var record in items)  						{  							packet.Write(i++);  							if (record != null)  							{  								packet.Write(record.EntityLowId);  								packet.Write(record.EntryId);    								if (record.EnchantIds != null)  								{  									for (var j = 0; j < enchantCount; ++j)  									{  										var enchantId = record.EnchantIds[j];  										if (enchantId != 0)  										{  											var enchant = EnchantMgr.GetEnchantmentEntry((uint) enchantId);  											if (enchant != null)  											{  												packet.Write(0); // charges  												if (j == (int) EnchantSlot.Temporary)  												{  													packet.Write(record.EnchantTempTime);  												}  												else  												{  													packet.Write(0);  												}  												packet.Write(enchantId);  												continue;  											}  										}  										packet.Write(0);  										packet.Write(0);  										packet.Write(0);  									}  								}  								else  								{  									for (var j = 0; j < enchantCount; ++j)  									{  										packet.Write(0u);  										packet.Write(0);  										packet.Write(0u);  									}  								}    								packet.Write(record.RandomProperty);  								packet.Write(record.RandomSuffix);  								packet.Write(record.Amount);  								packet.Write((uint) record.Charges);  								packet.Write(record.Template.MaxDurability);  								packet.Write(record.Durability);  								packet.Write((byte) 0);  							}  							else  							{  								packet.Write(0u);  								packet.Write(0u);    								for (byte j = 0; j < enchantCount; ++j)  								{  									packet.Write(0u);  									packet.Write(0u);  									packet.Write(0u);  								}    								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write((byte)0);  							}  						}  					}    					var endPos = packet.Position;  					packet.Position = sizePos;  					packet.Write((ushort) (endPos - sizePos));  					packet.Position = endPos;  				}  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MailHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MailHandler.cs,SendMailList,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MAIL_LIST_RESULT' 128 * messages.Count))  			{  				const int enchantCount = (int)EnchantSlot.Prismatic + 1;    				packet.Write(messages.Count);  				var count = Math.Min(messages.Count' 0xFF);    				packet.Write((byte)count);  				for (var m = 0; m < count; m++)  				{  					var letter = messages[m];                        // Skip deleted mails                      if(letter.IsDeleted)                          continue;    					var sizePos = packet.Position;  					packet.Position = sizePos + 2; // size of message  					packet.Write((uint) letter.Guid);  					packet.Write((byte) letter.MessageType);    					switch (letter.MessageType)  					{  						case MailType.Normal:  							packet.Write(letter.SenderEntityId);  							break;  						case MailType.Creature:  							packet.Write(letter.SenderEntityId.Low);  							break;  						case MailType.GameObject:  							packet.Write(letter.SenderEntityId.Low);  							break;  						case MailType.Auction:  							packet.Write(letter.SenderEntityId.Low);  							break;  						case MailType.Item:  							packet.WriteUInt(0); // ? 3.2.2  							// What should go here?  							break;  						default:  							break;  					}    					packet.Write(letter.CashOnDelivery);  					//packet.Write(letter.TextId);    					packet.Write(0u);  					packet.Write((uint) letter.MessageStationary);  					packet.Write(letter.IncludedMoney);    					var flags = letter.ReadTime != null ? MailListFlags.Read : MailListFlags.NotRead;  					switch (letter.MessageType)  					{  						case MailType.Normal:  							flags |= MailListFlags.Delete;  							if (letter.IncludedItemCount > 0)  							{  								flags |= MailListFlags.Return;  							}  							break;  						case MailType.Auction:  							flags |= MailListFlags.Auction;  							break;  					}  					packet.Write((uint) flags);    					packet.Write((float) ((letter.ExpireTime - DateTime.Now).TotalMilliseconds/(24*60*60*1000)));  					packet.Write(0u);                      packet.Write(letter.Subject);                      packet.Write(letter.Body);    					if (letter.IncludedItemCount == 0)  					{  						// No items  						packet.Write((byte) 0);  					}  					else  					{  						// There are items to display  						var items = letter.IncludedItems;  						packet.Write((byte) items.Count);  						byte i = 0;  						foreach (var record in items)  						{  							packet.Write(i++);  							if (record != null)  							{  								packet.Write(record.EntityLowId);  								packet.Write(record.EntryId);    								if (record.EnchantIds != null)  								{  									for (var j = 0; j < enchantCount; ++j)  									{  										var enchantId = record.EnchantIds[j];  										if (enchantId != 0)  										{  											var enchant = EnchantMgr.GetEnchantmentEntry((uint) enchantId);  											if (enchant != null)  											{  												packet.Write(0); // charges  												if (j == (int) EnchantSlot.Temporary)  												{  													packet.Write(record.EnchantTempTime);  												}  												else  												{  													packet.Write(0);  												}  												packet.Write(enchantId);  												continue;  											}  										}  										packet.Write(0);  										packet.Write(0);  										packet.Write(0);  									}  								}  								else  								{  									for (var j = 0; j < enchantCount; ++j)  									{  										packet.Write(0u);  										packet.Write(0);  										packet.Write(0u);  									}  								}    								packet.Write(record.RandomProperty);  								packet.Write(record.RandomSuffix);  								packet.Write(record.Amount);  								packet.Write((uint) record.Charges);  								packet.Write(record.Template.MaxDurability);  								packet.Write(record.Durability);  								packet.Write((byte) 0);  							}  							else  							{  								packet.Write(0u);  								packet.Write(0u);    								for (byte j = 0; j < enchantCount; ++j)  								{  									packet.Write(0u);  									packet.Write(0u);  									packet.Write(0u);  								}    								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write((byte)0);  							}  						}  					}    					var endPos = packet.Position;  					packet.Position = sizePos;  					packet.Write((ushort) (endPos - sizePos));  					packet.Position = endPos;  				}  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MailHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MailHandler.cs,SendMailList,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MAIL_LIST_RESULT' 128 * messages.Count))  			{  				const int enchantCount = (int)EnchantSlot.Prismatic + 1;    				packet.Write(messages.Count);  				var count = Math.Min(messages.Count' 0xFF);    				packet.Write((byte)count);  				for (var m = 0; m < count; m++)  				{  					var letter = messages[m];                        // Skip deleted mails                      if(letter.IsDeleted)                          continue;    					var sizePos = packet.Position;  					packet.Position = sizePos + 2; // size of message  					packet.Write((uint) letter.Guid);  					packet.Write((byte) letter.MessageType);    					switch (letter.MessageType)  					{  						case MailType.Normal:  							packet.Write(letter.SenderEntityId);  							break;  						case MailType.Creature:  							packet.Write(letter.SenderEntityId.Low);  							break;  						case MailType.GameObject:  							packet.Write(letter.SenderEntityId.Low);  							break;  						case MailType.Auction:  							packet.Write(letter.SenderEntityId.Low);  							break;  						case MailType.Item:  							packet.WriteUInt(0); // ? 3.2.2  							// What should go here?  							break;  						default:  							break;  					}    					packet.Write(letter.CashOnDelivery);  					//packet.Write(letter.TextId);    					packet.Write(0u);  					packet.Write((uint) letter.MessageStationary);  					packet.Write(letter.IncludedMoney);    					var flags = letter.ReadTime != null ? MailListFlags.Read : MailListFlags.NotRead;  					switch (letter.MessageType)  					{  						case MailType.Normal:  							flags |= MailListFlags.Delete;  							if (letter.IncludedItemCount > 0)  							{  								flags |= MailListFlags.Return;  							}  							break;  						case MailType.Auction:  							flags |= MailListFlags.Auction;  							break;  					}  					packet.Write((uint) flags);    					packet.Write((float) ((letter.ExpireTime - DateTime.Now).TotalMilliseconds/(24*60*60*1000)));  					packet.Write(0u);                      packet.Write(letter.Subject);                      packet.Write(letter.Body);    					if (letter.IncludedItemCount == 0)  					{  						// No items  						packet.Write((byte) 0);  					}  					else  					{  						// There are items to display  						var items = letter.IncludedItems;  						packet.Write((byte) items.Count);  						byte i = 0;  						foreach (var record in items)  						{  							packet.Write(i++);  							if (record != null)  							{  								packet.Write(record.EntityLowId);  								packet.Write(record.EntryId);    								if (record.EnchantIds != null)  								{  									for (var j = 0; j < enchantCount; ++j)  									{  										var enchantId = record.EnchantIds[j];  										if (enchantId != 0)  										{  											var enchant = EnchantMgr.GetEnchantmentEntry((uint) enchantId);  											if (enchant != null)  											{  												packet.Write(0); // charges  												if (j == (int) EnchantSlot.Temporary)  												{  													packet.Write(record.EnchantTempTime);  												}  												else  												{  													packet.Write(0);  												}  												packet.Write(enchantId);  												continue;  											}  										}  										packet.Write(0);  										packet.Write(0);  										packet.Write(0);  									}  								}  								else  								{  									for (var j = 0; j < enchantCount; ++j)  									{  										packet.Write(0u);  										packet.Write(0);  										packet.Write(0u);  									}  								}    								packet.Write(record.RandomProperty);  								packet.Write(record.RandomSuffix);  								packet.Write(record.Amount);  								packet.Write((uint) record.Charges);  								packet.Write(record.Template.MaxDurability);  								packet.Write(record.Durability);  								packet.Write((byte) 0);  							}  							else  							{  								packet.Write(0u);  								packet.Write(0u);    								for (byte j = 0; j < enchantCount; ++j)  								{  									packet.Write(0u);  									packet.Write(0u);  									packet.Write(0u);  								}    								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write((byte)0);  							}  						}  					}    					var endPos = packet.Position;  					packet.Position = sizePos;  					packet.Write((ushort) (endPos - sizePos));  					packet.Position = endPos;  				}  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MailHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MailHandler.cs,SendMailList,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MAIL_LIST_RESULT' 128 * messages.Count))  			{  				const int enchantCount = (int)EnchantSlot.Prismatic + 1;    				packet.Write(messages.Count);  				var count = Math.Min(messages.Count' 0xFF);    				packet.Write((byte)count);  				for (var m = 0; m < count; m++)  				{  					var letter = messages[m];                        // Skip deleted mails                      if(letter.IsDeleted)                          continue;    					var sizePos = packet.Position;  					packet.Position = sizePos + 2; // size of message  					packet.Write((uint) letter.Guid);  					packet.Write((byte) letter.MessageType);    					switch (letter.MessageType)  					{  						case MailType.Normal:  							packet.Write(letter.SenderEntityId);  							break;  						case MailType.Creature:  							packet.Write(letter.SenderEntityId.Low);  							break;  						case MailType.GameObject:  							packet.Write(letter.SenderEntityId.Low);  							break;  						case MailType.Auction:  							packet.Write(letter.SenderEntityId.Low);  							break;  						case MailType.Item:  							packet.WriteUInt(0); // ? 3.2.2  							// What should go here?  							break;  						default:  							break;  					}    					packet.Write(letter.CashOnDelivery);  					//packet.Write(letter.TextId);    					packet.Write(0u);  					packet.Write((uint) letter.MessageStationary);  					packet.Write(letter.IncludedMoney);    					var flags = letter.ReadTime != null ? MailListFlags.Read : MailListFlags.NotRead;  					switch (letter.MessageType)  					{  						case MailType.Normal:  							flags |= MailListFlags.Delete;  							if (letter.IncludedItemCount > 0)  							{  								flags |= MailListFlags.Return;  							}  							break;  						case MailType.Auction:  							flags |= MailListFlags.Auction;  							break;  					}  					packet.Write((uint) flags);    					packet.Write((float) ((letter.ExpireTime - DateTime.Now).TotalMilliseconds/(24*60*60*1000)));  					packet.Write(0u);                      packet.Write(letter.Subject);                      packet.Write(letter.Body);    					if (letter.IncludedItemCount == 0)  					{  						// No items  						packet.Write((byte) 0);  					}  					else  					{  						// There are items to display  						var items = letter.IncludedItems;  						packet.Write((byte) items.Count);  						byte i = 0;  						foreach (var record in items)  						{  							packet.Write(i++);  							if (record != null)  							{  								packet.Write(record.EntityLowId);  								packet.Write(record.EntryId);    								if (record.EnchantIds != null)  								{  									for (var j = 0; j < enchantCount; ++j)  									{  										var enchantId = record.EnchantIds[j];  										if (enchantId != 0)  										{  											var enchant = EnchantMgr.GetEnchantmentEntry((uint) enchantId);  											if (enchant != null)  											{  												packet.Write(0); // charges  												if (j == (int) EnchantSlot.Temporary)  												{  													packet.Write(record.EnchantTempTime);  												}  												else  												{  													packet.Write(0);  												}  												packet.Write(enchantId);  												continue;  											}  										}  										packet.Write(0);  										packet.Write(0);  										packet.Write(0);  									}  								}  								else  								{  									for (var j = 0; j < enchantCount; ++j)  									{  										packet.Write(0u);  										packet.Write(0);  										packet.Write(0u);  									}  								}    								packet.Write(record.RandomProperty);  								packet.Write(record.RandomSuffix);  								packet.Write(record.Amount);  								packet.Write((uint) record.Charges);  								packet.Write(record.Template.MaxDurability);  								packet.Write(record.Durability);  								packet.Write((byte) 0);  							}  							else  							{  								packet.Write(0u);  								packet.Write(0u);    								for (byte j = 0; j < enchantCount; ++j)  								{  									packet.Write(0u);  									packet.Write(0u);  									packet.Write(0u);  								}    								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write((byte)0);  							}  						}  					}    					var endPos = packet.Position;  					packet.Position = sizePos;  					packet.Write((ushort) (endPos - sizePos));  					packet.Position = endPos;  				}  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MailHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MailHandler.cs,SendMailList,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MAIL_LIST_RESULT' 128 * messages.Count))  			{  				const int enchantCount = (int)EnchantSlot.Prismatic + 1;    				packet.Write(messages.Count);  				var count = Math.Min(messages.Count' 0xFF);    				packet.Write((byte)count);  				for (var m = 0; m < count; m++)  				{  					var letter = messages[m];                        // Skip deleted mails                      if(letter.IsDeleted)                          continue;    					var sizePos = packet.Position;  					packet.Position = sizePos + 2; // size of message  					packet.Write((uint) letter.Guid);  					packet.Write((byte) letter.MessageType);    					switch (letter.MessageType)  					{  						case MailType.Normal:  							packet.Write(letter.SenderEntityId);  							break;  						case MailType.Creature:  							packet.Write(letter.SenderEntityId.Low);  							break;  						case MailType.GameObject:  							packet.Write(letter.SenderEntityId.Low);  							break;  						case MailType.Auction:  							packet.Write(letter.SenderEntityId.Low);  							break;  						case MailType.Item:  							packet.WriteUInt(0); // ? 3.2.2  							// What should go here?  							break;  						default:  							break;  					}    					packet.Write(letter.CashOnDelivery);  					//packet.Write(letter.TextId);    					packet.Write(0u);  					packet.Write((uint) letter.MessageStationary);  					packet.Write(letter.IncludedMoney);    					var flags = letter.ReadTime != null ? MailListFlags.Read : MailListFlags.NotRead;  					switch (letter.MessageType)  					{  						case MailType.Normal:  							flags |= MailListFlags.Delete;  							if (letter.IncludedItemCount > 0)  							{  								flags |= MailListFlags.Return;  							}  							break;  						case MailType.Auction:  							flags |= MailListFlags.Auction;  							break;  					}  					packet.Write((uint) flags);    					packet.Write((float) ((letter.ExpireTime - DateTime.Now).TotalMilliseconds/(24*60*60*1000)));  					packet.Write(0u);                      packet.Write(letter.Subject);                      packet.Write(letter.Body);    					if (letter.IncludedItemCount == 0)  					{  						// No items  						packet.Write((byte) 0);  					}  					else  					{  						// There are items to display  						var items = letter.IncludedItems;  						packet.Write((byte) items.Count);  						byte i = 0;  						foreach (var record in items)  						{  							packet.Write(i++);  							if (record != null)  							{  								packet.Write(record.EntityLowId);  								packet.Write(record.EntryId);    								if (record.EnchantIds != null)  								{  									for (var j = 0; j < enchantCount; ++j)  									{  										var enchantId = record.EnchantIds[j];  										if (enchantId != 0)  										{  											var enchant = EnchantMgr.GetEnchantmentEntry((uint) enchantId);  											if (enchant != null)  											{  												packet.Write(0); // charges  												if (j == (int) EnchantSlot.Temporary)  												{  													packet.Write(record.EnchantTempTime);  												}  												else  												{  													packet.Write(0);  												}  												packet.Write(enchantId);  												continue;  											}  										}  										packet.Write(0);  										packet.Write(0);  										packet.Write(0);  									}  								}  								else  								{  									for (var j = 0; j < enchantCount; ++j)  									{  										packet.Write(0u);  										packet.Write(0);  										packet.Write(0u);  									}  								}    								packet.Write(record.RandomProperty);  								packet.Write(record.RandomSuffix);  								packet.Write(record.Amount);  								packet.Write((uint) record.Charges);  								packet.Write(record.Template.MaxDurability);  								packet.Write(record.Durability);  								packet.Write((byte) 0);  							}  							else  							{  								packet.Write(0u);  								packet.Write(0u);    								for (byte j = 0; j < enchantCount; ++j)  								{  									packet.Write(0u);  									packet.Write(0u);  									packet.Write(0u);  								}    								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write(0);  								packet.Write((byte)0);  							}  						}  					}    					var endPos = packet.Position;  					packet.Position = sizePos;  					packet.Write((ushort) (endPos - sizePos));  					packet.Position = endPos;  				}  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MailHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MailHandler.cs,SendNotify,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_RECEIVED_MAIL' 4))  			{  				packet.Write(0);  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MailHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MailHandler.cs,SendNextMailTime,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_QUERY_NEXT_MAIL_TIME' 8))  			{  				if (mail.Count <= 0)  				{  					packet.Write(0xC7A8C000);  					packet.Write(0u);  					client.Send(packet);  					return;  				}    				packet.Write(0u);  				packet.Write((uint)mail.Count);    				foreach (var letter in mail)  				{  					packet.Write(letter.SenderEntityId);  					switch (letter.MessageType)  					{  						case MailType.Auction:  							packet.Write(2u);  							packet.Write(2u);  							break;  						default:  							packet.Write(0u);  							packet.Write(0u);  							break;  					}  					packet.Write((uint)letter.MessageStationary);  					packet.Write(0xC6000000u); // what does this represent ??  				}  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendBankSlotResult,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_BUY_BANK_SLOT_RESULT' 4))  			{  				packet.Write((uint)response);  				chr.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendPetitionList,The following statement contains a magic number: using (  				var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PETITION_SHOWLIST' 8 + 4 * 6))  			{  				packet.Write(petitioner.EntityId);  				if (petitioner.IsGuildPetitioner)  				{  					// Guild petitioner  					packet.Write(1);  					packet.Write((uint)PetitionerEntry.GuildPetitionEntry.ItemId);  					packet.Write(PetitionerEntry.GuildPetitionEntry.DisplayId);  					packet.Write(PetitionerEntry.GuildPetitionEntry.Cost);  					packet.Write(0);  					packet.Write(PetitionerEntry.GuildPetitionEntry.RequiredSignatures);  				}  				else if (petitioner.IsArenaPetitioner)  				{  					// Arena petitioner  					packet.Write((uint)PetitionerEntry.ArenaPetition2v2Entry.Index);  					packet.Write((uint)PetitionerEntry.ArenaPetition2v2Entry.ItemId);  					packet.Write((uint)PetitionerEntry.ArenaPetition2v2Entry.DisplayId);  					packet.Write((uint)PetitionerEntry.ArenaPetition2v2Entry.Cost);  					packet.Write((uint)PetitionerEntry.ArenaPetition2v2Entry.RequiredSignatures);    					packet.Write((uint)PetitionerEntry.ArenaPetition3v3Entry.Index);  					packet.Write((uint)PetitionerEntry.ArenaPetition3v3Entry.ItemId);  					packet.Write((uint)PetitionerEntry.ArenaPetition3v3Entry.DisplayId);  					packet.Write((uint)PetitionerEntry.ArenaPetition3v3Entry.Cost);  					packet.Write((uint)PetitionerEntry.ArenaPetition3v3Entry.RequiredSignatures);    					packet.Write((uint)PetitionerEntry.ArenaPetition5v5Entry.Index);  					packet.Write((uint)PetitionerEntry.ArenaPetition5v5Entry.ItemId);  					packet.Write((uint)PetitionerEntry.ArenaPetition5v5Entry.DisplayId);  					packet.Write((uint)PetitionerEntry.ArenaPetition5v5Entry.Cost);  					packet.Write((uint)PetitionerEntry.ArenaPetition5v5Entry.RequiredSignatures);  				}  				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendPetitionList,The following statement contains a magic number: using (  				var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PETITION_SHOWLIST' 8 + 4 * 6))  			{  				packet.Write(petitioner.EntityId);  				if (petitioner.IsGuildPetitioner)  				{  					// Guild petitioner  					packet.Write(1);  					packet.Write((uint)PetitionerEntry.GuildPetitionEntry.ItemId);  					packet.Write(PetitionerEntry.GuildPetitionEntry.DisplayId);  					packet.Write(PetitionerEntry.GuildPetitionEntry.Cost);  					packet.Write(0);  					packet.Write(PetitionerEntry.GuildPetitionEntry.RequiredSignatures);  				}  				else if (petitioner.IsArenaPetitioner)  				{  					// Arena petitioner  					packet.Write((uint)PetitionerEntry.ArenaPetition2v2Entry.Index);  					packet.Write((uint)PetitionerEntry.ArenaPetition2v2Entry.ItemId);  					packet.Write((uint)PetitionerEntry.ArenaPetition2v2Entry.DisplayId);  					packet.Write((uint)PetitionerEntry.ArenaPetition2v2Entry.Cost);  					packet.Write((uint)PetitionerEntry.ArenaPetition2v2Entry.RequiredSignatures);    					packet.Write((uint)PetitionerEntry.ArenaPetition3v3Entry.Index);  					packet.Write((uint)PetitionerEntry.ArenaPetition3v3Entry.ItemId);  					packet.Write((uint)PetitionerEntry.ArenaPetition3v3Entry.DisplayId);  					packet.Write((uint)PetitionerEntry.ArenaPetition3v3Entry.Cost);  					packet.Write((uint)PetitionerEntry.ArenaPetition3v3Entry.RequiredSignatures);    					packet.Write((uint)PetitionerEntry.ArenaPetition5v5Entry.Index);  					packet.Write((uint)PetitionerEntry.ArenaPetition5v5Entry.ItemId);  					packet.Write((uint)PetitionerEntry.ArenaPetition5v5Entry.DisplayId);  					packet.Write((uint)PetitionerEntry.ArenaPetition5v5Entry.Cost);  					packet.Write((uint)PetitionerEntry.ArenaPetition5v5Entry.RequiredSignatures);  				}  				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendPetitionList,The following statement contains a magic number: using (  				var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PETITION_SHOWLIST' 8 + 4 * 6))  			{  				packet.Write(petitioner.EntityId);  				if (petitioner.IsGuildPetitioner)  				{  					// Guild petitioner  					packet.Write(1);  					packet.Write((uint)PetitionerEntry.GuildPetitionEntry.ItemId);  					packet.Write(PetitionerEntry.GuildPetitionEntry.DisplayId);  					packet.Write(PetitionerEntry.GuildPetitionEntry.Cost);  					packet.Write(0);  					packet.Write(PetitionerEntry.GuildPetitionEntry.RequiredSignatures);  				}  				else if (petitioner.IsArenaPetitioner)  				{  					// Arena petitioner  					packet.Write((uint)PetitionerEntry.ArenaPetition2v2Entry.Index);  					packet.Write((uint)PetitionerEntry.ArenaPetition2v2Entry.ItemId);  					packet.Write((uint)PetitionerEntry.ArenaPetition2v2Entry.DisplayId);  					packet.Write((uint)PetitionerEntry.ArenaPetition2v2Entry.Cost);  					packet.Write((uint)PetitionerEntry.ArenaPetition2v2Entry.RequiredSignatures);    					packet.Write((uint)PetitionerEntry.ArenaPetition3v3Entry.Index);  					packet.Write((uint)PetitionerEntry.ArenaPetition3v3Entry.ItemId);  					packet.Write((uint)PetitionerEntry.ArenaPetition3v3Entry.DisplayId);  					packet.Write((uint)PetitionerEntry.ArenaPetition3v3Entry.Cost);  					packet.Write((uint)PetitionerEntry.ArenaPetition3v3Entry.RequiredSignatures);    					packet.Write((uint)PetitionerEntry.ArenaPetition5v5Entry.Index);  					packet.Write((uint)PetitionerEntry.ArenaPetition5v5Entry.ItemId);  					packet.Write((uint)PetitionerEntry.ArenaPetition5v5Entry.DisplayId);  					packet.Write((uint)PetitionerEntry.ArenaPetition5v5Entry.Cost);  					packet.Write((uint)PetitionerEntry.ArenaPetition5v5Entry.RequiredSignatures);  				}  				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,HandlePetitionBuy,The following statement contains a magic number: packet.Position += 4 + 8;
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,HandlePetitionBuy,The following statement contains a magic number: packet.Position += 4 + 8;
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,HandlePetitionBuy,The following statement contains a magic number: packet.Position += 4 * 10;
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,HandlePetitionBuy,The following statement contains a magic number: packet.Position += 4 * 10;
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,HandlePetitionBuy,The following statement contains a magic number: packet.Position += 4;
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,HandlePetitionBuy,The following statement contains a magic number: if (petitioner != null && petitioner.IsPetitioner && petitioner.CheckVendorInteraction(chr))  			{  				ItemId itemId = 0;  				uint cost = 0;                  PetitionType type = PetitionType.None;    				if (petitioner.IsGuildPetitioner)  				{  					if (chr.IsInGuild)  					{                          GuildHandler.SendResult(chr' GuildCommandId.CREATE' name' GuildResult.ALREADY_IN_GUILD);  						return;  					}  					if (!GuildMgr.IsValidGuildName(name))  					{  						GuildHandler.SendResult(chr' GuildCommandId.CREATE' name' GuildResult.NAME_INVALID);  						return;  					}  					else if (GuildMgr.DoesGuildExist(name))  					{  						GuildHandler.SendResult(chr' GuildCommandId.CREATE' name' GuildResult.NAME_EXISTS);  						return;  					}  					itemId = PetitionerEntry.GuildPetitionEntry.ItemId;  					cost = GuildMgr.GuildCharterCost;                      type = PetitionType.Guild;  				}  				else if (petitioner.IsArenaPetitioner)  				{  					switch (choice)  					{  						case 1:  							itemId = PetitionerEntry.ArenaPetition2v2Entry.ItemId;  							cost = PetitionerEntry.ArenaPetition2v2Entry.Cost;                              type = PetitionType.Arena2vs2;  							break;  						case 2:  							itemId = PetitionerEntry.ArenaPetition3v3Entry.ItemId;  							cost = PetitionerEntry.ArenaPetition3v3Entry.Cost;                              type = PetitionType.Arena3vs3;  							break;  						case 3:  							itemId = PetitionerEntry.ArenaPetition5v5Entry.ItemId;  							cost = PetitionerEntry.ArenaPetition5v5Entry.Cost;                              type = PetitionType.Arena5vs5;  							break;  						default:  							return;  					}                      if (!ArenaMgr.IsValidArenaTeamName(name))                      {                          ArenaTeamHandler.SendResult(chr' ArenaTeamCommandId.CREATE' name' string.Empty' ArenaTeamResult.NAME_INVALID);                          return;                      }                      else if (ArenaMgr.DoesArenaTeamExist(name))                      {                          ArenaTeamHandler.SendResult(chr' ArenaTeamCommandId.CREATE' name' string.Empty' ArenaTeamResult.NAME_EXISTS);                          return;                      }  				}  				if (itemId != 0 && cost != 0 && type != PetitionType.None)  				{  					var templ = ItemMgr.GetTemplate(itemId);  					if (templ == null)  					{  						SendBuyError(chr' petitioner' itemId' BuyItemError.CantFindItem);  					}  					else if (chr.Money < cost)  					{  						SendBuyError(chr' petitioner' itemId' BuyItemError.NotEnoughMoney);  					}                      else if (!PetitionRecord.CanBuyPetition(chr.EntityId.Low))                      {                          chr.SendSystemMessage("You can't buy another petition !");                      }  					else  					{  						var slotId = chr.Inventory.FindFreeSlot(templ' 1);  						if (slotId.Container == null)  						{  							SendBuyError(chr' petitioner' itemId' BuyItemError.CantCarryAnymore);  						}  						else  						{  							var item = slotId.Container.AddUnchecked(slotId.Slot' templ' 1' true) as PetitionCharter;                              item.Petition = new PetitionRecord(name' chr.EntityId.Low' item.EntityId.Low' type);                              item.Petition.Create();    							chr.Money -= cost;                                							item.SetEnchantId(EnchantSlot.Permanent' item.EntityId.Low);                               						}  					}  				}  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,HandlePetitionBuy,The following statement contains a magic number: if (petitioner != null && petitioner.IsPetitioner && petitioner.CheckVendorInteraction(chr))  			{  				ItemId itemId = 0;  				uint cost = 0;                  PetitionType type = PetitionType.None;    				if (petitioner.IsGuildPetitioner)  				{  					if (chr.IsInGuild)  					{                          GuildHandler.SendResult(chr' GuildCommandId.CREATE' name' GuildResult.ALREADY_IN_GUILD);  						return;  					}  					if (!GuildMgr.IsValidGuildName(name))  					{  						GuildHandler.SendResult(chr' GuildCommandId.CREATE' name' GuildResult.NAME_INVALID);  						return;  					}  					else if (GuildMgr.DoesGuildExist(name))  					{  						GuildHandler.SendResult(chr' GuildCommandId.CREATE' name' GuildResult.NAME_EXISTS);  						return;  					}  					itemId = PetitionerEntry.GuildPetitionEntry.ItemId;  					cost = GuildMgr.GuildCharterCost;                      type = PetitionType.Guild;  				}  				else if (petitioner.IsArenaPetitioner)  				{  					switch (choice)  					{  						case 1:  							itemId = PetitionerEntry.ArenaPetition2v2Entry.ItemId;  							cost = PetitionerEntry.ArenaPetition2v2Entry.Cost;                              type = PetitionType.Arena2vs2;  							break;  						case 2:  							itemId = PetitionerEntry.ArenaPetition3v3Entry.ItemId;  							cost = PetitionerEntry.ArenaPetition3v3Entry.Cost;                              type = PetitionType.Arena3vs3;  							break;  						case 3:  							itemId = PetitionerEntry.ArenaPetition5v5Entry.ItemId;  							cost = PetitionerEntry.ArenaPetition5v5Entry.Cost;                              type = PetitionType.Arena5vs5;  							break;  						default:  							return;  					}                      if (!ArenaMgr.IsValidArenaTeamName(name))                      {                          ArenaTeamHandler.SendResult(chr' ArenaTeamCommandId.CREATE' name' string.Empty' ArenaTeamResult.NAME_INVALID);                          return;                      }                      else if (ArenaMgr.DoesArenaTeamExist(name))                      {                          ArenaTeamHandler.SendResult(chr' ArenaTeamCommandId.CREATE' name' string.Empty' ArenaTeamResult.NAME_EXISTS);                          return;                      }  				}  				if (itemId != 0 && cost != 0 && type != PetitionType.None)  				{  					var templ = ItemMgr.GetTemplate(itemId);  					if (templ == null)  					{  						SendBuyError(chr' petitioner' itemId' BuyItemError.CantFindItem);  					}  					else if (chr.Money < cost)  					{  						SendBuyError(chr' petitioner' itemId' BuyItemError.NotEnoughMoney);  					}                      else if (!PetitionRecord.CanBuyPetition(chr.EntityId.Low))                      {                          chr.SendSystemMessage("You can't buy another petition !");                      }  					else  					{  						var slotId = chr.Inventory.FindFreeSlot(templ' 1);  						if (slotId.Container == null)  						{  							SendBuyError(chr' petitioner' itemId' BuyItemError.CantCarryAnymore);  						}  						else  						{  							var item = slotId.Container.AddUnchecked(slotId.Slot' templ' 1' true) as PetitionCharter;                              item.Petition = new PetitionRecord(name' chr.EntityId.Low' item.EntityId.Low' type);                              item.Petition.Create();    							chr.Money -= cost;                                							item.SetEnchantId(EnchantSlot.Permanent' item.EntityId.Low);                               						}  					}  				}  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,HandlePetitionOffer,The following statement contains a magic number: if (petition.Type == PetitionType.Guild)              {                  if (player.IsInGuild)                  {                      GuildHandler.SendResult(client' GuildCommandId.INVITE' namePlayer' GuildResult.ALREADY_IN_GUILD_S);                      return;                  }              }              else               {                  if (player.ArenaTeamMember[(uint)ArenaMgr.GetSlotByType((uint)petition.Type)] != null)                  {                      ArenaTeamHandler.SendResult(client' ArenaTeamCommandId.CREATE' string.Empty' namePlayer' ArenaTeamResult.ALREADY_IN_ARENA_TEAM_S);                      return;                  }                  else if (player.Level < 80)                  {                      ArenaTeamHandler.SendResult(client' ArenaTeamCommandId.CREATE' string.Empty' namePlayer' ArenaTeamResult.TARGET_TOO_LOW);                      return;                  }              }
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendPetitionSignatures,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PETITION_SHOW_SIGNATURES' 8+8+4+1+signs.Count*12))  			{                  packet.WriteULong(charter.EntityId.Full);                  packet.WriteULong(charter.Owner.EntityId.Full);                  packet.WriteUInt(charter.EntityId.Low);                  packet.WriteByte(signs.Count);                                    foreach(var guid in signs)                  {                      packet.WriteULong(guid);                      packet.WriteUInt(0);                  }    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendPetitionSignatures,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PETITION_SHOW_SIGNATURES' 8+8+4+1+signs.Count*12))  			{                  packet.WriteULong(charter.EntityId.Full);                  packet.WriteULong(charter.Owner.EntityId.Full);                  packet.WriteUInt(charter.EntityId.Low);                  packet.WriteByte(signs.Count);                                    foreach(var guid in signs)                  {                      packet.WriteULong(guid);                      packet.WriteUInt(0);                  }    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendPetitionSignatures,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PETITION_SHOW_SIGNATURES' 8+8+4+1+signs.Count*12))  			{                  packet.WriteULong(charter.EntityId.Full);                  packet.WriteULong(charter.Owner.EntityId.Full);                  packet.WriteUInt(charter.EntityId.Low);                  packet.WriteByte(signs.Count);                                    foreach(var guid in signs)                  {                      packet.WriteULong(guid);                      packet.WriteUInt(0);                  }    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendPetitionSignatures,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PETITION_SHOW_SIGNATURES' 8+8+4+1+signs.Count*12))  			{                  packet.WriteULong(charter.EntityId.Full);                  packet.WriteULong(charter.Owner.EntityId.Full);                  packet.WriteUInt(charter.EntityId.Low);                  packet.WriteByte(signs.Count);                                    foreach(var guid in signs)                  {                      packet.WriteULong(guid);                      packet.WriteUInt(0);                  }    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendPetitionDecline,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_PETITION_DECLINE' 8))  			{                  var character = World.GetCharacter(record.OwnerId);                  if(character != null)                  {  				    packet.WriteULong(chr.EntityId.Full);    				    character.Client.Send(packet);                  }  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendPetitionTurnInResults,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_TURN_IN_PETITION_RESULTS' 4))  			{  				packet.WriteUInt((uint)result);   				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendPetitionRename,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_PETITION_RENAME' 8 + name.Length + 1))              {                  packet.WriteULong(petition.EntityId.Full);                  packet.WriteCString(name);                    client.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendPetitionQueryResponse,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PETITION_QUERY_RESPONSE' 4 + 8 + name.Length + 1 + 1 + 4 * 12 + 2 + 10))  			{                  packet.WriteUInt(charter.EntityId.Low);                  packet.WriteULong(charter.Owner.EntityId.Full);                  packet.WriteCString(name);                  packet.WriteByte(0);                    var type = (uint)charter.Petition.Type;                  if(type == (uint)PetitionType.Guild)                  {                      packet.WriteUInt(type);                      packet.WriteUInt(type);                      packet.WriteUInt(0);                  }                  else                  {                      packet.WriteUInt(type-1);                      packet.WriteUInt(type-1);                      packet.WriteUInt(type);                  }                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUShort(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                    for(int i = 0; i < 10; ++i)                      packet.WriteByte(0);                    packet.WriteUInt(0);                    if(type == (uint)PetitionType.Guild)                      packet.WriteUInt(0);                  else                      packet.WriteUInt(1);                    client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendPetitionQueryResponse,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PETITION_QUERY_RESPONSE' 4 + 8 + name.Length + 1 + 1 + 4 * 12 + 2 + 10))  			{                  packet.WriteUInt(charter.EntityId.Low);                  packet.WriteULong(charter.Owner.EntityId.Full);                  packet.WriteCString(name);                  packet.WriteByte(0);                    var type = (uint)charter.Petition.Type;                  if(type == (uint)PetitionType.Guild)                  {                      packet.WriteUInt(type);                      packet.WriteUInt(type);                      packet.WriteUInt(0);                  }                  else                  {                      packet.WriteUInt(type-1);                      packet.WriteUInt(type-1);                      packet.WriteUInt(type);                  }                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUShort(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                    for(int i = 0; i < 10; ++i)                      packet.WriteByte(0);                    packet.WriteUInt(0);                    if(type == (uint)PetitionType.Guild)                      packet.WriteUInt(0);                  else                      packet.WriteUInt(1);                    client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendPetitionQueryResponse,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PETITION_QUERY_RESPONSE' 4 + 8 + name.Length + 1 + 1 + 4 * 12 + 2 + 10))  			{                  packet.WriteUInt(charter.EntityId.Low);                  packet.WriteULong(charter.Owner.EntityId.Full);                  packet.WriteCString(name);                  packet.WriteByte(0);                    var type = (uint)charter.Petition.Type;                  if(type == (uint)PetitionType.Guild)                  {                      packet.WriteUInt(type);                      packet.WriteUInt(type);                      packet.WriteUInt(0);                  }                  else                  {                      packet.WriteUInt(type-1);                      packet.WriteUInt(type-1);                      packet.WriteUInt(type);                  }                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUShort(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                    for(int i = 0; i < 10; ++i)                      packet.WriteByte(0);                    packet.WriteUInt(0);                    if(type == (uint)PetitionType.Guild)                      packet.WriteUInt(0);                  else                      packet.WriteUInt(1);                    client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendPetitionQueryResponse,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PETITION_QUERY_RESPONSE' 4 + 8 + name.Length + 1 + 1 + 4 * 12 + 2 + 10))  			{                  packet.WriteUInt(charter.EntityId.Low);                  packet.WriteULong(charter.Owner.EntityId.Full);                  packet.WriteCString(name);                  packet.WriteByte(0);                    var type = (uint)charter.Petition.Type;                  if(type == (uint)PetitionType.Guild)                  {                      packet.WriteUInt(type);                      packet.WriteUInt(type);                      packet.WriteUInt(0);                  }                  else                  {                      packet.WriteUInt(type-1);                      packet.WriteUInt(type-1);                      packet.WriteUInt(type);                  }                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUShort(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                    for(int i = 0; i < 10; ++i)                      packet.WriteByte(0);                    packet.WriteUInt(0);                    if(type == (uint)PetitionType.Guild)                      packet.WriteUInt(0);                  else                      packet.WriteUInt(1);                    client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendPetitionQueryResponse,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PETITION_QUERY_RESPONSE' 4 + 8 + name.Length + 1 + 1 + 4 * 12 + 2 + 10))  			{                  packet.WriteUInt(charter.EntityId.Low);                  packet.WriteULong(charter.Owner.EntityId.Full);                  packet.WriteCString(name);                  packet.WriteByte(0);                    var type = (uint)charter.Petition.Type;                  if(type == (uint)PetitionType.Guild)                  {                      packet.WriteUInt(type);                      packet.WriteUInt(type);                      packet.WriteUInt(0);                  }                  else                  {                      packet.WriteUInt(type-1);                      packet.WriteUInt(type-1);                      packet.WriteUInt(type);                  }                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUShort(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                    for(int i = 0; i < 10; ++i)                      packet.WriteByte(0);                    packet.WriteUInt(0);                    if(type == (uint)PetitionType.Guild)                      packet.WriteUInt(0);                  else                      packet.WriteUInt(1);                    client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendPetitionQueryResponse,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PETITION_QUERY_RESPONSE' 4 + 8 + name.Length + 1 + 1 + 4 * 12 + 2 + 10))  			{                  packet.WriteUInt(charter.EntityId.Low);                  packet.WriteULong(charter.Owner.EntityId.Full);                  packet.WriteCString(name);                  packet.WriteByte(0);                    var type = (uint)charter.Petition.Type;                  if(type == (uint)PetitionType.Guild)                  {                      packet.WriteUInt(type);                      packet.WriteUInt(type);                      packet.WriteUInt(0);                  }                  else                  {                      packet.WriteUInt(type-1);                      packet.WriteUInt(type-1);                      packet.WriteUInt(type);                  }                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUShort(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                    for(int i = 0; i < 10; ++i)                      packet.WriteByte(0);                    packet.WriteUInt(0);                    if(type == (uint)PetitionType.Guild)                      packet.WriteUInt(0);                  else                      packet.WriteUInt(1);                    client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendPetitionQueryResponse,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PETITION_QUERY_RESPONSE' 4 + 8 + name.Length + 1 + 1 + 4 * 12 + 2 + 10))  			{                  packet.WriteUInt(charter.EntityId.Low);                  packet.WriteULong(charter.Owner.EntityId.Full);                  packet.WriteCString(name);                  packet.WriteByte(0);                    var type = (uint)charter.Petition.Type;                  if(type == (uint)PetitionType.Guild)                  {                      packet.WriteUInt(type);                      packet.WriteUInt(type);                      packet.WriteUInt(0);                  }                  else                  {                      packet.WriteUInt(type-1);                      packet.WriteUInt(type-1);                      packet.WriteUInt(type);                  }                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUShort(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                  packet.WriteUInt(0);                    for(int i = 0; i < 10; ++i)                      packet.WriteByte(0);                    packet.WriteUInt(0);                    if(type == (uint)PetitionType.Guild)                      packet.WriteUInt(0);                  else                      packet.WriteUInt(1);                    client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendNPCError,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_LIST_INVENTORY' 10))  			{  				packet.Write(vendor.EntityId);  				packet.Write((byte)0);  				packet.Write((byte)error);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendVendorInventoryList,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_LIST_INVENTORY' 10 + (28 * itemsForSale.Count())))  			{  				packet.Write(vendor.EntityId);  				var countPos = packet.Position;  				packet.WriteByte(0);  				var count = 0;  				foreach(var item in itemsForSale.Where(item => item != null))  				{  					  					// Exclude items that the buyer may never purchase  					if(!buyer.GodMode)  					{  						if(!item.Template.RequiredClassMask.HasAnyFlag(buyer.Class) &&  item.Template.BondType == ItemBondType.OnPickup)  							continue;  						if (item.Template.Flags2.HasAnyFlag(ItemFlags2.HordeOnly) && buyer.Faction.IsAlliance)  							continue;    						if (item.Template.Flags2.HasAnyFlag(ItemFlags2.AllianceOnly) && buyer.Faction.IsHorde)  							continue;  					}    					count++;  					if (count > 0xFF)  						break;  					// Write in the item number (1 - 256)  					packet.Write(count);    					var price = buyer.Reputations.GetDiscountedCost(vendor.Faction.ReputationIndex' item.Template.BuyPrice);    					packet.Write(item.Template.Id);  					packet.Write(item.Template.DisplayId);  					packet.Write(item.RemainingStockAmount);  					packet.Write(price);  					packet.Write(item.Template.MaxDurability);  					packet.Write(item.BuyStackSize);  					packet.Write(item.ExtendedCostId);  				}    				packet.Position = countPos;  				packet.WriteByte(count);  				if (count == 0)  				{  					packet.Write((byte) VendorInventoryError.NoInventory);  				}  				buyer.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendVendorInventoryList,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_LIST_INVENTORY' 10 + (28 * itemsForSale.Count())))  			{  				packet.Write(vendor.EntityId);  				var countPos = packet.Position;  				packet.WriteByte(0);  				var count = 0;  				foreach(var item in itemsForSale.Where(item => item != null))  				{  					  					// Exclude items that the buyer may never purchase  					if(!buyer.GodMode)  					{  						if(!item.Template.RequiredClassMask.HasAnyFlag(buyer.Class) &&  item.Template.BondType == ItemBondType.OnPickup)  							continue;  						if (item.Template.Flags2.HasAnyFlag(ItemFlags2.HordeOnly) && buyer.Faction.IsAlliance)  							continue;    						if (item.Template.Flags2.HasAnyFlag(ItemFlags2.AllianceOnly) && buyer.Faction.IsHorde)  							continue;  					}    					count++;  					if (count > 0xFF)  						break;  					// Write in the item number (1 - 256)  					packet.Write(count);    					var price = buyer.Reputations.GetDiscountedCost(vendor.Faction.ReputationIndex' item.Template.BuyPrice);    					packet.Write(item.Template.Id);  					packet.Write(item.Template.DisplayId);  					packet.Write(item.RemainingStockAmount);  					packet.Write(price);  					packet.Write(item.Template.MaxDurability);  					packet.Write(item.BuyStackSize);  					packet.Write(item.ExtendedCostId);  				}    				packet.Position = countPos;  				packet.WriteByte(count);  				if (count == 0)  				{  					packet.Write((byte) VendorInventoryError.NoInventory);  				}  				buyer.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendSellError,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SELL_ITEM' 8 + 8 + 1))  			{  				packet.Write(vendorId);  				packet.Write(itemId);  				packet.Write((byte)error);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendSellError,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SELL_ITEM' 8 + 8 + 1))  			{  				packet.Write(vendorId);  				packet.Write(itemId);  				packet.Write((byte)error);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendBuyError,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_BUY_FAILED' 8 + 4 + 1))  			{  				packet.Write(vendor.EntityId);  				packet.Write((uint)itemEntryId);  				packet.Write((byte)error);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendBuyError,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_BUY_FAILED' 8 + 4 + 1))  			{  				packet.Write(vendor.EntityId);  				packet.Write((uint)itemEntryId);  				packet.Write((byte)error);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendBuyItem,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_BUY_ITEM' 8 + 4 + 4 + 4))  			{  				packet.Write(vendor.EntityId);  				packet.Write((uint)itemId);  				packet.Write(numItemsPurchased);                  packet.Write(remainingAmount);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendBuyItem,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_BUY_ITEM' 8 + 4 + 4 + 4))  			{  				packet.Write(vendor.EntityId);  				packet.Write((uint)itemId);  				packet.Write(numItemsPurchased);                  packet.Write(remainingAmount);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendBuyItem,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_BUY_ITEM' 8 + 4 + 4 + 4))  			{  				packet.Write(vendor.EntityId);  				packet.Write((uint)itemId);  				packet.Write(numItemsPurchased);                  packet.Write(remainingAmount);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendBuyItem,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_BUY_ITEM' 8 + 4 + 4 + 4))  			{  				packet.Write(vendor.EntityId);  				packet.Write((uint)itemId);  				packet.Write(numItemsPurchased);                  packet.Write(remainingAmount);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendTrainerList,The following statement contains a magic number: using (  				var packet = new RealmPacketOut(RealmServerOpCode.SMSG_TRAINER_LIST' 8 + 4 + 4 + (30 * 38) + msg.Length + 1))  			{  				packet.Write(trainer.EntityId);  				packet.Write((uint)trainer.TrainerEntry.TrainerType);    				var countPos = packet.Position;  				packet.Position += 4;    				var spellCount = 0;  				foreach (var trainerSpell in spells)  				{  					//if (!chr.CanLearn(trainerSpell))  					if (trainerSpell.Spell == null)  					{  						continue;  					}    					var spell = trainerSpell.Spell;  					if (spell.IsTeachSpell)  					{  						spell = spell.LearnSpell;  					}    					//packet.Position = offset  + (spell.Index * entryLength);  					packet.Write(trainerSpell.Spell.Id);  					packet.Write((byte)trainerSpell.GetTrainerSpellState(chr));  					packet.Write(trainerSpell.GetDiscountedCost(chr' trainer));  					packet.Write(spell.Talent != null ? 1u : 0u);						// talent cost  					packet.Write(trainerSpell.Spell.IsProfession && spell.TeachesApprenticeAbility ? 1 : 0);	// Profession cost  					packet.Write((byte)trainerSpell.RequiredLevel);  					packet.Write((uint)trainerSpell.RequiredSkillId);  					packet.Write(trainerSpell.RequiredSkillAmount);  					packet.Write((uint)trainerSpell.RequiredSpellId);    					// The following are infrequent Ids of some sort - Possibly spell replacements?  					packet.Write(0u);  					packet.Write(0u);  					++spellCount;  				}    				packet.Write(msg);    				packet.Position = countPos;  				packet.Write(spellCount);    				chr.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendTrainerList,The following statement contains a magic number: using (  				var packet = new RealmPacketOut(RealmServerOpCode.SMSG_TRAINER_LIST' 8 + 4 + 4 + (30 * 38) + msg.Length + 1))  			{  				packet.Write(trainer.EntityId);  				packet.Write((uint)trainer.TrainerEntry.TrainerType);    				var countPos = packet.Position;  				packet.Position += 4;    				var spellCount = 0;  				foreach (var trainerSpell in spells)  				{  					//if (!chr.CanLearn(trainerSpell))  					if (trainerSpell.Spell == null)  					{  						continue;  					}    					var spell = trainerSpell.Spell;  					if (spell.IsTeachSpell)  					{  						spell = spell.LearnSpell;  					}    					//packet.Position = offset  + (spell.Index * entryLength);  					packet.Write(trainerSpell.Spell.Id);  					packet.Write((byte)trainerSpell.GetTrainerSpellState(chr));  					packet.Write(trainerSpell.GetDiscountedCost(chr' trainer));  					packet.Write(spell.Talent != null ? 1u : 0u);						// talent cost  					packet.Write(trainerSpell.Spell.IsProfession && spell.TeachesApprenticeAbility ? 1 : 0);	// Profession cost  					packet.Write((byte)trainerSpell.RequiredLevel);  					packet.Write((uint)trainerSpell.RequiredSkillId);  					packet.Write(trainerSpell.RequiredSkillAmount);  					packet.Write((uint)trainerSpell.RequiredSpellId);    					// The following are infrequent Ids of some sort - Possibly spell replacements?  					packet.Write(0u);  					packet.Write(0u);  					++spellCount;  				}    				packet.Write(msg);    				packet.Position = countPos;  				packet.Write(spellCount);    				chr.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendTrainerList,The following statement contains a magic number: using (  				var packet = new RealmPacketOut(RealmServerOpCode.SMSG_TRAINER_LIST' 8 + 4 + 4 + (30 * 38) + msg.Length + 1))  			{  				packet.Write(trainer.EntityId);  				packet.Write((uint)trainer.TrainerEntry.TrainerType);    				var countPos = packet.Position;  				packet.Position += 4;    				var spellCount = 0;  				foreach (var trainerSpell in spells)  				{  					//if (!chr.CanLearn(trainerSpell))  					if (trainerSpell.Spell == null)  					{  						continue;  					}    					var spell = trainerSpell.Spell;  					if (spell.IsTeachSpell)  					{  						spell = spell.LearnSpell;  					}    					//packet.Position = offset  + (spell.Index * entryLength);  					packet.Write(trainerSpell.Spell.Id);  					packet.Write((byte)trainerSpell.GetTrainerSpellState(chr));  					packet.Write(trainerSpell.GetDiscountedCost(chr' trainer));  					packet.Write(spell.Talent != null ? 1u : 0u);						// talent cost  					packet.Write(trainerSpell.Spell.IsProfession && spell.TeachesApprenticeAbility ? 1 : 0);	// Profession cost  					packet.Write((byte)trainerSpell.RequiredLevel);  					packet.Write((uint)trainerSpell.RequiredSkillId);  					packet.Write(trainerSpell.RequiredSkillAmount);  					packet.Write((uint)trainerSpell.RequiredSpellId);    					// The following are infrequent Ids of some sort - Possibly spell replacements?  					packet.Write(0u);  					packet.Write(0u);  					++spellCount;  				}    				packet.Write(msg);    				packet.Position = countPos;  				packet.Write(spellCount);    				chr.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendTrainerList,The following statement contains a magic number: using (  				var packet = new RealmPacketOut(RealmServerOpCode.SMSG_TRAINER_LIST' 8 + 4 + 4 + (30 * 38) + msg.Length + 1))  			{  				packet.Write(trainer.EntityId);  				packet.Write((uint)trainer.TrainerEntry.TrainerType);    				var countPos = packet.Position;  				packet.Position += 4;    				var spellCount = 0;  				foreach (var trainerSpell in spells)  				{  					//if (!chr.CanLearn(trainerSpell))  					if (trainerSpell.Spell == null)  					{  						continue;  					}    					var spell = trainerSpell.Spell;  					if (spell.IsTeachSpell)  					{  						spell = spell.LearnSpell;  					}    					//packet.Position = offset  + (spell.Index * entryLength);  					packet.Write(trainerSpell.Spell.Id);  					packet.Write((byte)trainerSpell.GetTrainerSpellState(chr));  					packet.Write(trainerSpell.GetDiscountedCost(chr' trainer));  					packet.Write(spell.Talent != null ? 1u : 0u);						// talent cost  					packet.Write(trainerSpell.Spell.IsProfession && spell.TeachesApprenticeAbility ? 1 : 0);	// Profession cost  					packet.Write((byte)trainerSpell.RequiredLevel);  					packet.Write((uint)trainerSpell.RequiredSkillId);  					packet.Write(trainerSpell.RequiredSkillAmount);  					packet.Write((uint)trainerSpell.RequiredSpellId);    					// The following are infrequent Ids of some sort - Possibly spell replacements?  					packet.Write(0u);  					packet.Write(0u);  					++spellCount;  				}    				packet.Write(msg);    				packet.Position = countPos;  				packet.Write(spellCount);    				chr.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendTrainerList,The following statement contains a magic number: using (  				var packet = new RealmPacketOut(RealmServerOpCode.SMSG_TRAINER_LIST' 8 + 4 + 4 + (30 * 38) + msg.Length + 1))  			{  				packet.Write(trainer.EntityId);  				packet.Write((uint)trainer.TrainerEntry.TrainerType);    				var countPos = packet.Position;  				packet.Position += 4;    				var spellCount = 0;  				foreach (var trainerSpell in spells)  				{  					//if (!chr.CanLearn(trainerSpell))  					if (trainerSpell.Spell == null)  					{  						continue;  					}    					var spell = trainerSpell.Spell;  					if (spell.IsTeachSpell)  					{  						spell = spell.LearnSpell;  					}    					//packet.Position = offset  + (spell.Index * entryLength);  					packet.Write(trainerSpell.Spell.Id);  					packet.Write((byte)trainerSpell.GetTrainerSpellState(chr));  					packet.Write(trainerSpell.GetDiscountedCost(chr' trainer));  					packet.Write(spell.Talent != null ? 1u : 0u);						// talent cost  					packet.Write(trainerSpell.Spell.IsProfession && spell.TeachesApprenticeAbility ? 1 : 0);	// Profession cost  					packet.Write((byte)trainerSpell.RequiredLevel);  					packet.Write((uint)trainerSpell.RequiredSkillId);  					packet.Write(trainerSpell.RequiredSkillAmount);  					packet.Write((uint)trainerSpell.RequiredSpellId);    					// The following are infrequent Ids of some sort - Possibly spell replacements?  					packet.Write(0u);  					packet.Write(0u);  					++spellCount;  				}    				packet.Write(msg);    				packet.Position = countPos;  				packet.Write(spellCount);    				chr.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendTrainerList,The following statement contains a magic number: using (  				var packet = new RealmPacketOut(RealmServerOpCode.SMSG_TRAINER_LIST' 8 + 4 + 4 + (30 * 38) + msg.Length + 1))  			{  				packet.Write(trainer.EntityId);  				packet.Write((uint)trainer.TrainerEntry.TrainerType);    				var countPos = packet.Position;  				packet.Position += 4;    				var spellCount = 0;  				foreach (var trainerSpell in spells)  				{  					//if (!chr.CanLearn(trainerSpell))  					if (trainerSpell.Spell == null)  					{  						continue;  					}    					var spell = trainerSpell.Spell;  					if (spell.IsTeachSpell)  					{  						spell = spell.LearnSpell;  					}    					//packet.Position = offset  + (spell.Index * entryLength);  					packet.Write(trainerSpell.Spell.Id);  					packet.Write((byte)trainerSpell.GetTrainerSpellState(chr));  					packet.Write(trainerSpell.GetDiscountedCost(chr' trainer));  					packet.Write(spell.Talent != null ? 1u : 0u);						// talent cost  					packet.Write(trainerSpell.Spell.IsProfession && spell.TeachesApprenticeAbility ? 1 : 0);	// Profession cost  					packet.Write((byte)trainerSpell.RequiredLevel);  					packet.Write((uint)trainerSpell.RequiredSkillId);  					packet.Write(trainerSpell.RequiredSkillAmount);  					packet.Write((uint)trainerSpell.RequiredSpellId);    					// The following are infrequent Ids of some sort - Possibly spell replacements?  					packet.Write(0u);  					packet.Write(0u);  					++spellCount;  				}    				packet.Write(msg);    				packet.Position = countPos;  				packet.Write(spellCount);    				chr.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendTrainerBuySucceeded,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_TRAINER_BUY_SUCCEEDED' 8 + 4))  			{  				packet.Write(trainer.EntityId);  				packet.Write(spell.Spell.Id);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendTrainerBuySucceeded,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_TRAINER_BUY_SUCCEEDED' 8 + 4))  			{  				packet.Write(trainer.EntityId);  				packet.Write(spell.Spell.Id);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendBindConfirm,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_BINDER_CONFIRM' 8 + 4))  			{  				packet.Write(binder.EntityId);  				packet.Write((uint)zone);    				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendBindConfirm,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_BINDER_CONFIRM' 8 + 4))  			{  				packet.Write(binder.EntityId);  				packet.Write((uint)zone);    				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendPlayerBound,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PLAYERBOUND' 8 + 4))  			{  				packet.Write(binder.EntityId);  				packet.Write((uint)zone);    				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,NPCHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\NPCHandler.cs,SendPlayerBound,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PLAYERBOUND' 8 + 4))  			{  				packet.Write(binder.EntityId);  				packet.Write((uint)zone);    				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,PetHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\PetHandler.cs,HandleSetAction,The following statement contains a magic number: while (packet.Length - packet.Position >= 8)	// a button has 8 bytes in the packet  			{  				ReadButton(pet' packet);  			}
Magic Number,WCell.RealmServer.Handlers,PetHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\PetHandler.cs,SendPetGUIDs,The following statement contains a magic number: if (chr.ActivePet == null)  			{  				using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PET_GUIDS' 12))  				{  					packet.Write(0); // list count  					chr.Send(packet);  				}  			}  			else  			{  				using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PET_GUIDS' 12))  				{  					packet.Write(1); // list count  					packet.Write(chr.ActivePet.EntityId);  					chr.Send(packet);  				}  			}
Magic Number,WCell.RealmServer.Handlers,PetHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\PetHandler.cs,SendPetGUIDs,The following statement contains a magic number: if (chr.ActivePet == null)  			{  				using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PET_GUIDS' 12))  				{  					packet.Write(0); // list count  					chr.Send(packet);  				}  			}  			else  			{  				using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PET_GUIDS' 12))  				{  					packet.Write(1); // list count  					packet.Write(chr.ActivePet.EntityId);  					chr.Send(packet);  				}  			}
Magic Number,WCell.RealmServer.Handlers,PetHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\PetHandler.cs,SendSpells,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PET_SPELLS' 20 + (PetConstants.PetActionCount * 4) + 1 + (pet.Spells.Count) + 1 + (0)))  			{  				packet.Write(pet.EntityId);  				packet.Write((ushort)pet.Entry.FamilyId);  				packet.Write(pet.RemainingDecayDelayMillis);			// duration  				packet.Write((byte)mode);  				packet.Write((byte)currentAction);  				packet.Write((ushort)flags);    				for (var i = 0; i < PetConstants.PetActionCount; i++)  				{  					var action = actions[i];  					packet.Write(action);  				}    				var spellPos = packet.Position;  				++packet.Position;  				var spellCount = 0;  				foreach (var spell in pet.Spells)  				{  					if (!spell.IsPassive)  					{  						packet.Write((ushort)spell.Id);                          packet.Write((ushort)PetSpellState.Enabled);  						++spellCount;  					}  				}    				packet.Write((byte)0);		// TODO: Cooldowns    				packet.Position = spellPos;  				packet.Write((byte)spellCount);    				owner.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,PetHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\PetHandler.cs,SendSpells,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PET_SPELLS' 20 + (PetConstants.PetActionCount * 4) + 1 + (pet.Spells.Count) + 1 + (0)))  			{  				packet.Write(pet.EntityId);  				packet.Write((ushort)pet.Entry.FamilyId);  				packet.Write(pet.RemainingDecayDelayMillis);			// duration  				packet.Write((byte)mode);  				packet.Write((byte)currentAction);  				packet.Write((ushort)flags);    				for (var i = 0; i < PetConstants.PetActionCount; i++)  				{  					var action = actions[i];  					packet.Write(action);  				}    				var spellPos = packet.Position;  				++packet.Position;  				var spellCount = 0;  				foreach (var spell in pet.Spells)  				{  					if (!spell.IsPassive)  					{  						packet.Write((ushort)spell.Id);                          packet.Write((ushort)PetSpellState.Enabled);  						++spellCount;  					}  				}    				packet.Write((byte)0);		// TODO: Cooldowns    				packet.Position = spellPos;  				packet.Write((byte)spellCount);    				owner.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,PetHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\PetHandler.cs,SendPlayerPossessedPetSpells,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PET_SPELLS' 20 + (PetConstants.PetActionCount * 4) + 1 + (0) + 1 + (0)))              {                  packet.Write(possessed.EntityId);                  packet.Write((ushort) CreatureFamilyId.None);                  packet.Write(0); // duration                  packet.Write((byte) PetAttackMode.Passive);                  packet.Write((byte) PetAction.Stay);                  packet.Write((ushort) PetFlags.None);                    var action = new PetActionEntry                                   {                                       Action = PetAction.Attack'                                       Type = PetActionType.SetAction                                   }.Raw;                    packet.Write(action);                    for (var i = 1; i < PetConstants.PetActionCount; i++)                  {                      action = new PetActionEntry                                   {                                       Type = PetActionType.SetAction                                   }.Raw;                      packet.Write(action);                  }                    packet.Write((byte) 0); // No Spells                    packet.Write((byte) 0); // No Cooldowns                    owner.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,PetHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\PetHandler.cs,SendPlayerPossessedPetSpells,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PET_SPELLS' 20 + (PetConstants.PetActionCount * 4) + 1 + (0) + 1 + (0)))              {                  packet.Write(possessed.EntityId);                  packet.Write((ushort) CreatureFamilyId.None);                  packet.Write(0); // duration                  packet.Write((byte) PetAttackMode.Passive);                  packet.Write((byte) PetAction.Stay);                  packet.Write((ushort) PetFlags.None);                    var action = new PetActionEntry                                   {                                       Action = PetAction.Attack'                                       Type = PetActionType.SetAction                                   }.Raw;                    packet.Write(action);                    for (var i = 1; i < PetConstants.PetActionCount; i++)                  {                      action = new PetActionEntry                                   {                                       Type = PetActionType.SetAction                                   }.Raw;                      packet.Write(action);                  }                    packet.Write((byte) 0); // No Spells                    packet.Write((byte) 0); // No Cooldowns                    owner.Send(packet);              }
Magic Number,WCell.RealmServer.Handlers,PetHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\PetHandler.cs,SendEmptySpells,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PET_SPELLS' 8))  			{  				packet.Write(0L);  				receiver.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,PetHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\PetHandler.cs,SendVehicleSpells,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PET_SPELLS' 18))  			{  				packet.Write(vehicle.EntityId);  				packet.Write((ushort)CreatureFamilyId.None);  				packet.Write(0); //duration                  packet.Write((byte)PetAttackMode.Defensive);                  packet.Write((byte)PetAction.Follow);                  packet.Write((ushort)PetFlags.None);                    //action bar                  for (var i = 0; i < PetConstants.PetActionCount; i++)                  {                      var action = actions[i];                      packet.Write(action);                  }                    packet.Write((byte)0); // No Spells                    packet.Write((byte)0); // No Cooldowns    				receiver.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,PetHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\PetHandler.cs,SendCastFailed,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PET_CAST_FAILED' 8))  			{  				packet.Write(0);				// unkown  				packet.Write((uint)spellId);  				packet.Write((byte)reason);  				receiver.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,PetHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\PetHandler.cs,SendPetLearnedSpell,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PET_LEARNED_SPELL' 4))  			{  				packet.Write((uint)spellId);    				receiver.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,PetHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\PetHandler.cs,SendUnlearnedSpell,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PET_REMOVED_SPELL' 4))  			{  				packet.Write(spell);    				receiver.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,PetHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\PetHandler.cs,SendName,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PET_NAME_QUERY_RESPONSE' 9 + name.Length))  			{  				packet.Write(petId);  				packet.WriteCString(name);  				packet.Write(timestamp);  				packet.Write((byte)0);			// 3.2.0    				receiver.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,PetHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\PetHandler.cs,SendActionSound,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PET_ACTION_SOUND' 12))  			{  				packet.Write(pet.EntityId);  				packet.Write(soundId);    				receiver.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,PetHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\PetHandler.cs,SendMode,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PET_MODE' 12))  			{  				packet.Write(pet.EntityId);  				packet.Write((byte)attackMode);  				packet.Write((byte)action);  				packet.Write((ushort)flags);    				receiver.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,TicketHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TicketHandler.cs,HandleSystemStatusPacket,The following statement contains a magic number: using (var repPacket = new RealmPacketOut(RealmServerOpCode.SMSG_GMTICKET_SYSTEMSTATUS' 4))  			{  				// TODO: Add indicator to Account for whether person may use ticket system  				repPacket.Write(1);  				client.Send(repPacket);  			}
Magic Number,WCell.RealmServer.Handlers,TicketHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TicketHandler.cs,SendResolveResponse,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GMTICKET_RESOLVE_RESPONSE' 4))  			{  				packet.WriteByte(0);  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,ClientAddonHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ClientAddonHandler.cs,SendAddOnInfoPacket,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ADDON_INFO))  			{  				//Fix for reading past the end of stream  				//Due to fake clients!  				if (client.Addons.Length > 0)  				{  					int unk;  					using (var binReader = new BinaryReader(new MemoryStream(client.Addons)))  					{  						var addonCount = binReader.ReadInt32();  						for (var i = 0; i < addonCount; i++)  						{  							var addon = ReadAddOn(binReader);  							WriteAddOnInfo(packet' addon);  						}    						unk = binReader.ReadInt32();  					}  					Console.WriteLine("CMSG ADDON Unk: " + unk);  				}    				    				const int count = 0;  				packet.Write(count);    				for (int i = 0; i < count; i++)  				{  					packet.Write(0);  					packet.Write(new byte[16]);  					packet.Write(new byte[16]);  					packet.Write(0);  					packet.Write(0);  				}    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,ClientAddonHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ClientAddonHandler.cs,SendAddOnInfoPacket,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ADDON_INFO))  			{  				//Fix for reading past the end of stream  				//Due to fake clients!  				if (client.Addons.Length > 0)  				{  					int unk;  					using (var binReader = new BinaryReader(new MemoryStream(client.Addons)))  					{  						var addonCount = binReader.ReadInt32();  						for (var i = 0; i < addonCount; i++)  						{  							var addon = ReadAddOn(binReader);  							WriteAddOnInfo(packet' addon);  						}    						unk = binReader.ReadInt32();  					}  					Console.WriteLine("CMSG ADDON Unk: " + unk);  				}    				    				const int count = 0;  				packet.Write(count);    				for (int i = 0; i < count; i++)  				{  					packet.Write(0);  					packet.Write(new byte[16]);  					packet.Write(new byte[16]);  					packet.Write(0);  					packet.Write(0);  				}    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,ClientAddonHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ClientAddonHandler.cs,ReadAddOn,The following statement contains a magic number: if (binReader.BaseStream.Position + 9 > binReader.BaseStream.Length)  			{  				return new ClientAddOn {Name = name};  			}
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendTickQuery,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_TIME_SYNC_REQ' 4))  			{  				packet.WriteUInt(client.TickCount);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendTimeSpeed,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_LOGIN_SETTIMESPEED' 8))  			{  				packet.WriteDateTime(time);  				packet.WriteFloat(timeSpeed);  				packet.WriteInt(0);				// new' unknown    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendPlayedTime,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PLAYED_TIME' 8))  			{  				packet.WriteUInt(client.ActiveCharacter.TotalPlayTime);  				packet.WriteUInt(client.ActiveCharacter.LevelPlayTime);  				packet.WriteByte(display);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendLevelUpInfo,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_LEVELUP_INFO))  			{  				packet.Write(level);  				packet.Write(hpGain);    				packet.Write(manaGain);  				for (int i = 1; i < 7; i++)  				{  					packet.Write(0);  				}    				packet.Write(strBonus);  				packet.Write(agiBonus);  				packet.Write(staBonus);  				packet.Write(intBonus);  				packet.Write(sprBonus);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendClearTarget,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_CLEAR_TARGET' 8))  			{  				packet.Write(target.EntityId);  				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,HandleSetActionButtons,The following statement contains a magic number: var type = (byte)((actionAndType & 0xFF000000) >> 24);
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendRessurectFailed,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_RESURRECT_FAILED' 4))  			{  				packet.Write(error);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendHealerPosition,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_DEATH_RELEASE_LOC' 16))  			{  				packet.Write((uint)healer.Map.Id);  				packet.Write(healer.Position);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendCorpseReclaimDelay,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_CORPSE_RECLAIM_DELAY' 4))  			{  				packet.Write(millis);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendCorpseQueryReply,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_CORPSE_QUERY' 21))  			{  				// TODO: instance id    				packet.Write((byte)1);  				packet.Write((uint)obj.Map.Id);  				packet.Write(obj.Position);  				packet.Write((uint)obj.Map.Id);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendCorpseMapQueryResponse,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE' 16))  			{  				for (var i = 0; i < 4; i++)  					packet.WriteFloat(0.0f); // unk    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendCorpseMapQueryResponse,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE' 16))  			{  				for (var i = 0; i < 4; i++)  					packet.WriteFloat(0.0f); // unk    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendDeclinedNamesResult,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SET_PLAYER_DECLINED_NAMES_RESULT' 9))  			{  				packet.Write(failed ? 1 : 0);  				packet.Write(chr);  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendCharacterRename,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_CHAR_RENAME' 10 + newName.Length))  			{  				packet.WriteByte((byte)LoginErrorCode.RESPONSE_SUCCESS);  				packet.Write(guid);  				packet.WriteCString(newName);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendExplorationExperience,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_EXPLORATION_EXPERIENCE' 8))  			{  				packet.Write((uint)zone);  				packet.Write(xpAmount);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendLogoutReply,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_LOGOUT_RESPONSE' 5))  			{                  packet.WriteUInt(0);                  packet.WriteByte((byte)error);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendSummonRequest,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SUMMON_REQUEST' 16))  			{  				packet.Write(summoner.EntityId);  				packet.Write((uint)zone);  				packet.Write(decisionTimeout);    				target.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,HandleAlterAppearance,The following statement contains a magic number: if (facial == null || facial.Type != 2 || facial.Race != chr.Race || facial.Gender != chr.Gender)  				return;
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendVerifyWorld,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_LOGIN_VERIFY_WORLD' 20))  			{  				packet.Write((int)chr.Map.Id);  				packet.Write(chr.Position);  				packet.WriteFloat(chr.Orientation);    				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendProficiency,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SET_PROFICIENCY' 5))  			{  				packet.Write((byte)itemClass);  				packet.Write((uint)value);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendCinematic,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_TRIGGER_CINEMATIC' 4))  			{  				packet.WriteUInt(chr.Archetype.Race.IntroductionMovie);  				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendPhaseShift,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SET_PHASE_SHIFT' 4))  			{  				packet.WriteUInt(phase);  				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendControlUpdate,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_CLIENT_CONTROL_UPDATE' 9))  			{  				target.EntityId.WritePacked(packet);  				packet.Write(canControl);  				rcvr.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CharacterHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CharacterHandler.cs,SendBindUpdate,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_BINDPOINTUPDATE' 20))  			{  				packet.Write(location.Position.X);  				packet.Write(location.Position.Y);  				packet.Write(location.Position.Z);  				packet.Write((uint)location.MapId);  				packet.Write((uint)location.ZoneId);    				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CombatHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatHandler.cs,SendCombatStart,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ATTACKSTART' 16))  			{  				packet.Write(unit.EntityId);  				packet.Write(opponent.EntityId);    				unit.SendPacketToArea(packet' includeSelf);  			}
Magic Number,WCell.RealmServer.Handlers,CombatHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatHandler.cs,SendCombatStop,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ATTACKSTOP' 22))  			{  				attacker.EntityId.WritePacked(packet);    				if (opponent != null)  				{  					opponent.EntityId.WritePacked(packet);  				}  				else  				{  					packet.Write((byte)0); // null packed guid mask  				}    				packet.Write(extraArg);    				attacker.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,CombatHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatHandler.cs,SendAttackerStateUpdate,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ATTACKERSTATEUPDATE' 100))  			{  				var evade = action.VictimState == VictimState.Evade;  				if (evade)  				{  					//action.HitFlags |= HitFlags.HitFlag_0x800 | HitFlags.Absorb_1;  				}  				packet.Write((uint)action.HitFlags);    				action.Attacker.EntityId.WritePacked(packet);  				action.Victim.EntityId.WritePacked(packet);    				var dmg = action.ActualDamage;    				packet.Write(dmg);  				packet.Write(0);					// unknown (overkill?)    				//damage count  				const byte damageCount = 1;  				packet.Write(damageCount);    				for (byte i = 0; i < damageCount; i++)  				{  					packet.Write((uint)action.Schools);  					packet.Write((float)dmg);  					packet.Write(dmg);  				}    				if (action.HitFlags.HasAnyFlag(HitFlags.AbsorbType1 | HitFlags.AbsorbType2))  				{  					for (byte i = 0; i < damageCount; i++)  					{  						packet.Write(action.Absorbed);  					}  				}    				if (action.HitFlags.HasAnyFlag(HitFlags.ResistType1 | HitFlags.ResistType2))  				{  					for (byte i = 0; i < damageCount; i++)  					{  						packet.Write(action.Resisted);  					}  				}    				packet.Write((byte)action.VictimState);  				if (evade)  				{  					packet.Write(0x1000002);  				}  				else  				{  					packet.Write(dmg > 0 ? -1 : 0); // 0 if no damage' else -1 or 1000 or very rarely something else (eg when evading)  				}    				packet.Write(0);// this is a spell id    				if (action.HitFlags.HasAnyFlag(HitFlags.Block))  				{  					packet.Write(action.Blocked);  				}    				//if ((hitFlags & HitFlags.HitFlag_0x800000) != 0)  				//{  				//    packet.Write(0);  				//}    				//if ((hitFlags & HitFlags.HitFlag_0x1) != 0)  				//{  				//    packet.Write(0);  				//    packet.Write((float)0);  				//    packet.Write((float)0);  				//    packet.Write((float)0);  				//    packet.Write((float)0);  				//    packet.Write((float)0);  				//    packet.Write((float)0);  				//    packet.Write((float)0);  				//    packet.Write((float)0);  				//    for (int i = 0; i < 5; i++)  				//    {  				//        packet.Write(0);  				//        packet.Write(0);  				//    }  				//    packet.Write(0);  				//}    				action.Victim.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,CombatHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatHandler.cs,SendComboPoints,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_UPDATE_COMBO_POINTS' 9))  			{  				if (chr.ComboTarget != null)  				{  					chr.ComboTarget.EntityId.WritePacked(packet);  				}  				else  				{  					packet.Write((byte)0);  				}  				packet.Write((byte)chr.ComboPoints);    				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,CombatHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatHandler.cs,SendAIReaction,The following statement contains a magic number: using (var pkt = new RealmPacketOut(RealmServerOpCode.SMSG_AI_REACTION' 8 + 4))  			{  				pkt.Write(guid);  				pkt.Write((uint)reaction);  				recv.Send(pkt);  			}
Magic Number,WCell.RealmServer.Handlers,CombatHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatHandler.cs,SendAIReaction,The following statement contains a magic number: using (var pkt = new RealmPacketOut(RealmServerOpCode.SMSG_AI_REACTION' 8 + 4))  			{  				pkt.Write(guid);  				pkt.Write((uint)reaction);  				recv.Send(pkt);  			}
Magic Number,WCell.RealmServer.Handlers,ItemHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ItemHandler.cs,SendItemNameQueryResponse,The following statement contains a magic number: using (var outPacket = new RealmPacketOut(RealmServerOpCode.SMSG_ITEM_NAME_QUERY_RESPONSE' 4 + item.DefaultName.Length))  			{  				outPacket.WriteInt(item.Id);  				outPacket.WriteCString(item.DefaultName);    				client.Send(outPacket);  			}
Magic Number,WCell.RealmServer.Handlers,ItemHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ItemHandler.cs,SendItemPushResult,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ITEM_PUSH_RESULT' 45))  			{  				packet.Write(owner.EntityId);  				packet.Write((ulong)reception);    				//packet.Write(received ? 1 : 0);										// 0 = "You looted..."' 1 = "You received..."  				//packet.Write(isNew ? 1 : 0);										// 0 = "You received/looted..."' 1 = "You created..."    				packet.Write(1);													// log message  				packet.Write((byte)contSlot);  				packet.Write(isStacked ? -1 : item.Slot);  				packet.Write(templ.Id);  				packet.Write(propertySeed);  				packet.Write(randomPropid);  				packet.Write(amount);												// amount added  				packet.Write(owner.Inventory.GetAmount(templ.ItemId));				// amount of that type of item in inventory    				owner.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,ItemHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ItemHandler.cs,SendInventoryError,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_INVENTORY_CHANGE_FAILURE'  				error == InventoryError.YOU_MUST_REACH_LEVEL_N ? 22 : 18))  			{  				packet.WriteByte((byte)error);    				if (item1 != null)  				{  					packet.Write(item1.EntityId.Full);  				}  				else  				{  					packet.Write((long)0);  				}    				if (item2 != null)  				{  					packet.Write(item2.EntityId.Full);  				}  				else  				{  					packet.Write((long)0);  				}    				packet.Write((byte)0);    				if (error == InventoryError.YOU_MUST_REACH_LEVEL_N && item1 != null)  				{  					packet.WriteUInt(item1.Template.RequiredLevel);  				}    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,ItemHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ItemHandler.cs,SendInventoryError,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_INVENTORY_CHANGE_FAILURE'  				error == InventoryError.YOU_MUST_REACH_LEVEL_N ? 22 : 18))  			{  				packet.WriteByte((byte)error);    				if (item1 != null)  				{  					packet.Write(item1.EntityId.Full);  				}  				else  				{  					packet.Write((long)0);  				}    				if (item2 != null)  				{  					packet.Write(item2.EntityId.Full);  				}  				else  				{  					packet.Write((long)0);  				}    				packet.Write((byte)0);    				if (error == InventoryError.YOU_MUST_REACH_LEVEL_N && item1 != null)  				{  					packet.WriteUInt(item1.Template.RequiredLevel);  				}    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,ItemHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ItemHandler.cs,SendInventoryError,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_INVENTORY_CHANGE_FAILURE'  				error == InventoryError.YOU_MUST_REACH_LEVEL_N ? 22 : 18))  			{  				packet.WriteByte((byte)error);    				packet.WriteULong(0);  				packet.WriteULong(0);  				packet.WriteByte(0);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,ItemHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ItemHandler.cs,SendInventoryError,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_INVENTORY_CHANGE_FAILURE'  				error == InventoryError.YOU_MUST_REACH_LEVEL_N ? 22 : 18))  			{  				packet.WriteByte((byte)error);    				packet.WriteULong(0);  				packet.WriteULong(0);  				packet.WriteByte(0);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,ItemHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ItemHandler.cs,SendEnchantLog,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ENCHANTMENTLOG' 25))  			{  				packet.Write(owner.EntityId);  				packet.Write(owner.EntityId);  				packet.Write((uint)entryId);  				packet.Write((uint)enchantId); // cast maybe unneeded  				packet.Write((byte)0);    				owner.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,ItemHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ItemHandler.cs,SendEnchantTimeUpdate,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ITEM_ENCHANT_TIME_UPDATE' 24))  			{  				packet.Write(item.EntityId);  				packet.Write(item.Slot);  				packet.Write(duration);  				packet.Write(owner.EntityId);    				owner.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,ItemHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ItemHandler.cs,SendItemQueryResponse,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ITEM_QUERY_SINGLE_RESPONSE' 630))  			{  				packet.Write(item.Id);  				packet.Write((uint)item.Class);  				packet.Write((uint)item.SubClass);  				packet.Write(item.Unk0); // unknown    				packet.WriteCString(item.Names.Localize(locale));  				packet.Write((byte)0);// name2  				packet.Write((byte)0);// name3  				packet.Write((byte)0);// name4    				packet.Write(item.DisplayId);  				packet.Write((uint)item.Quality);  				packet.Write((uint)item.Flags);  				packet.Write((uint)item.Flags2);		// new 3.2.0  				packet.Write(item.BuyPrice);  				packet.Write(item.SellPrice);  				packet.Write((uint)item.InventorySlotType);  				packet.Write((uint)item.RequiredClassMask);  				packet.Write((uint)item.RequiredRaceMask);  				packet.Write(item.Level);  				packet.Write(item.RequiredLevel);  				packet.Write(item.RequiredSkill != null ? (int)item.RequiredSkill.Id : 0);  				packet.Write(item.RequiredSkillValue);  				packet.Write(item.RequiredProfession != null ? item.RequiredProfession.Id : 0);  				packet.Write(item.RequiredPvPRank);  				packet.Write(item.UnknownRank);// PVP Medal  				packet.Write(item.RequiredFaction != null ? (int)item.RequiredFaction.Id : 0);  				packet.Write((uint)item.RequiredFactionStanding);  				packet.Write(item.UniqueCount);  				packet.Write(item.MaxAmount);  				packet.Write(item.ContainerSlots);    				packet.Write(item.Mods.Length);  				for (var m = 0; m < item.Mods.Length; m++)  				{  					packet.Write((uint)item.Mods[m].Type);  					packet.Write(item.Mods[m].Value);  				}    				packet.Write(item.ScalingStatDistributionId);// NEW 3.0.2 ScalingStatDistribution.dbc  				packet.Write(item.ScalingStatValueFlags);// NEW 3.0.2 ScalingStatFlags      				// In 3.1 there are only 2 damages instead of 5  				for (var i = 0; i < ItemConstants.MaxDmgCount; i++)  				{                      if(i >= item.Damages.Length)                      {                          packet.WriteFloat(0f);                          packet.WriteFloat(0f);                          packet.WriteUInt(0u);                          continue;                      }    					var dmg = item.Damages[i];    					packet.Write(dmg.Minimum);  					packet.Write(dmg.Maximum);  					packet.Write((uint)dmg.School);  				}    				for (var i = 0; i < ItemConstants.MaxResCount; i++)  				{  					var res = item.Resistances[i];  					packet.Write(res);  				}    				packet.Write(item.AttackTime);  				packet.Write((uint)item.ProjectileType);  				packet.Write(item.RangeModifier);    				for (var s = 0; s < ItemConstants.MaxSpellCount; s++)  				{  				    ItemSpell spell;                      if(s < item.Spells.Length && (spell = item.Spells[s]) != null)                      {                          packet.Write((uint)spell.Id);                          packet.Write((uint)spell.Trigger);                          packet.Write((uint)Math.Abs(spell.Charges));                          packet.Write(spell.Cooldown);                          packet.Write(spell.CategoryId);                          packet.Write(spell.CategoryCooldown);                      }                      else                      {                          packet.WriteUInt(0u);                          packet.WriteUInt(0u);                          packet.WriteUInt(0u);                          packet.Write(-1);                          packet.WriteUInt(0u);                          packet.Write(-1);                      }  				}    				packet.Write((uint)item.BondType);  				packet.WriteCString(item.Descriptions.Localize(locale));    				packet.Write(item.PageTextId);  				packet.Write((uint)item.LanguageId);  				packet.Write((uint)item.PageMaterial);  				packet.Write(item.QuestId);  				packet.Write(item.LockId);  				packet.Write((int)item.Material);  				packet.Write((uint)item.SheathType);  				packet.Write(item.RandomPropertiesId);  				packet.Write(item.RandomSuffixId);  				packet.Write(item.BlockValue);  				packet.Write((uint)item.SetId);  				packet.Write(item.MaxDurability);  				packet.Write((uint)item.ZoneId);  				packet.Write((uint)item.MapId);  				packet.Write((uint)item.BagFamily);  				packet.Write((uint)item.ToolCategory);    				for (var i = 0; i < ItemConstants.MaxSocketCount; i++)  				{  					packet.Write((uint)item.Sockets[i].Color);  					packet.Write(item.Sockets[i].Content);  				}    				packet.Write(item.SocketBonusEnchantId);  				packet.Write(item.GemPropertiesId);  				packet.Write(item.RequiredDisenchantingLevel);  				packet.Write(item.ArmorModifier);    				packet.Write(item.Duration);// Exisiting duration in seconds  				packet.Write(item.ItemLimitCategoryId);// NEW 3.0.2 ItemLimitCategory.dbc    				packet.Write(item.HolidayId); // NEW 3.1.0 Holidays.dbc    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,ItemHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ItemHandler.cs,SendEquipmentSetList,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_EQUIPMENT_SET_LIST))  			{  				packet.Write(setList.Count);  				foreach (var set in setList)  				{  					set.SetGuid.WritePacked(packet);  					packet.Write(set.Id);  					packet.Write(set.Name);  					packet.Write(set.Icon);    					var items = set.Items ?? new EquipmentSetItemMapping[19];  					for (var i = 0; i < 19; i++)  					{  						var item = items[i];  						if (item != null)  						{  							item.ItemEntityId.WritePacked(packet);  							continue;  						}    						EntityId.Zero.WritePacked(packet);  					}  				}    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,ItemHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ItemHandler.cs,SendEquipmentSetList,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_EQUIPMENT_SET_LIST))  			{  				packet.Write(setList.Count);  				foreach (var set in setList)  				{  					set.SetGuid.WritePacked(packet);  					packet.Write(set.Id);  					packet.Write(set.Name);  					packet.Write(set.Icon);    					var items = set.Items ?? new EquipmentSetItemMapping[19];  					for (var i = 0; i < 19; i++)  					{  						var item = items[i];  						if (item != null)  						{  							item.ItemEntityId.WritePacked(packet);  							continue;  						}    						EntityId.Zero.WritePacked(packet);  					}  				}    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,ItemHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ItemHandler.cs,HandleSetEquipmentSet,The following statement contains a magic number: var itemList = new EntityId[19];
Magic Number,WCell.RealmServer.Handlers,ItemHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ItemHandler.cs,HandleSetEquipmentSet,The following statement contains a magic number: for (var i = 0; i < 19; i++)  			{  				itemList[i] = packet.ReadPackedEntityId();  			}
Magic Number,WCell.RealmServer.Handlers,ItemHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ItemHandler.cs,HandleUseEquipmentSet,The following statement contains a magic number: var equipmentSwap = new EquipmentSwapHolder[19];
Magic Number,WCell.RealmServer.Handlers,ItemHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\ItemHandler.cs,HandleUseEquipmentSet,The following statement contains a magic number: for (var i = 0; i < 19; i++)  			{  				equipmentSwap[i] = new EquipmentSwapHolder  				{  					ItemGuid = packet.ReadPackedEntityId()'  					SrcContainer = (InventorySlot)packet.ReadByte()'  					SrcSlot = packet.ReadByte()  				};  			}
Magic Number,WCell.RealmServer.Handlers,TaxiHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TaxiHandler.cs,HandleTaxiActivate,The following statement contains a magic number: var destinations = new PathNode[2];
Magic Number,WCell.RealmServer.Handlers,TaxiHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TaxiHandler.cs,SendTaxiPathUpdate,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_TAXINODE_STATUS' 9))  			{  				packet.Write(vendorId.Full);  				packet.Write(activated);  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,TaxiHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TaxiHandler.cs,ShowTaxiList,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SHOWTAXINODES' (4 + 8 + 4 + 8 * 4)))  			{  				packet.Write(1);  				if (vendor != null)  				{  					packet.Write(vendor.EntityId.Full);  				}  				else  				{  					packet.Write(EntityId.Zero);  				}  				packet.Write(curNode.Id);    				for (var i = 0; i < chr.TaxiNodes.Mask.Length; ++i)  				{  					packet.Write(chr.TaxiNodes.Mask[i]);  				}  				chr.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,TaxiHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TaxiHandler.cs,ShowTaxiList,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SHOWTAXINODES' (4 + 8 + 4 + 8 * 4)))  			{  				packet.Write(1);  				if (vendor != null)  				{  					packet.Write(vendor.EntityId.Full);  				}  				else  				{  					packet.Write(EntityId.Zero);  				}  				packet.Write(curNode.Id);    				for (var i = 0; i < chr.TaxiNodes.Mask.Length; ++i)  				{  					packet.Write(chr.TaxiNodes.Mask[i]);  				}  				chr.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,TaxiHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TaxiHandler.cs,ShowTaxiList,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SHOWTAXINODES' (4 + 8 + 4 + 8 * 4)))  			{  				packet.Write(1);  				if (vendor != null)  				{  					packet.Write(vendor.EntityId.Full);  				}  				else  				{  					packet.Write(EntityId.Zero);  				}  				packet.Write(curNode.Id);    				for (var i = 0; i < chr.TaxiNodes.Mask.Length; ++i)  				{  					packet.Write(chr.TaxiNodes.Mask[i]);  				}  				chr.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,TaxiHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TaxiHandler.cs,ShowTaxiList,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SHOWTAXINODES' (4 + 8 + 4 + 8 * 4)))  			{  				packet.Write(1);  				if (vendor != null)  				{  					packet.Write(vendor.EntityId.Full);  				}  				else  				{  					packet.Write(EntityId.Zero);  				}  				packet.Write(curNode.Id);    				for (var i = 0; i < chr.TaxiNodes.Mask.Length; ++i)  				{  					packet.Write(chr.TaxiNodes.Mask[i]);  				}  				chr.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,TaxiHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TaxiHandler.cs,ShowTaxiList,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SHOWTAXINODES' (4 + 8 + 4 + 8 * 4)))  			{  				packet.Write(1);  				if (vendor != null)  				{  					packet.Write(vendor.EntityId.Full);  				}  				else  				{  					packet.Write(EntityId.Zero);  				}  				packet.Write(curNode.Id);    				for (var i = 0; i < chr.TaxiNodes.Mask.Length; ++i)  				{  					packet.Write(chr.TaxiNodes.Mask[i]);  				}  				chr.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,TaxiHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TaxiHandler.cs,SendActivateTaxiReply,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ACTIVATETAXIREPLY' 4))  			{  				packet.Write((uint)response);  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,GossipHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GossipHandler.cs,SendPageToCharacter,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GOSSIP_MESSAGE))  			{  				packet.Write(speaker.EntityId);  				packet.Write(0);				// new Flag field since 2.4.0 - menu id  				packet.Write(gossipEntry.GossipId);    				var countPos = packet.Position;  				packet.Position += 4;  				var count = 0;  				if (gossipItems != null)  				{  					for (var i = 0; i < gossipItems.Count; i++)  					{  						var item = gossipItems[i];  						if (item.Action != null && !item.Action.CanUse(convo))  						{  							continue;  						}    						packet.Write(i);  						packet.Write((byte)item.Icon);  						packet.Write(item.Input);  						packet.Write((uint)item.RequiredMoney);  						packet.WriteCString(item.GetText(convo));  						packet.WriteCString(item.GetConfirmText(convo));  						count++;  					}  				}    				if (questItems != null)  				{  					packet.WriteUInt(questItems.Count);  					for (int i = 0; i < questItems.Count; i++)  					{  						var item = questItems[i];  						packet.Write(item.ID);  						packet.Write(item.Status);  						packet.Write(item.Level);  					    packet.Write(0); // quest flags  					    packet.Write((byte)0); // 3.3.3 flag (blue question or yelloe exclamation mark)  						packet.WriteCString(item.Text);  					}  				}  				else  					packet.Write(0);    				packet.Position = countPos;  				packet.Write(count);    				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,TutorialHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TutorialHandler.cs,HandleSetTutorialFlag,The following statement contains a magic number: if (flagIndex >= 256)  			{  				// seems to be 10242 sometimes    				// client.Disconnect();  				// return;  			}  			else  			{  				client.ActiveCharacter.TutorialFlags.SetFlag(flagIndex);  			}
Magic Number,WCell.RealmServer.Handlers,TutorialHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TutorialHandler.cs,SendTutorialFlags,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_TUTORIAL_FLAGS' 32))  			{  				packet.Write(chr.TutorialFlags.FlagData);    				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,InstanceHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\InstanceHandler.cs,SendInstanceReset,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_UPDATE_LAST_INSTANCE' 4))  			{  				packet.Write((int)mapId);  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,InstanceHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\InstanceHandler.cs,SendInstanceSave,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_UPDATE_LAST_INSTANCE'4))  			{  				packet.Write((int)mapId);  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,InstanceHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\InstanceHandler.cs,SendRequiresRaid,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_RAID_GROUP_ONLY' 8))  			{  				packet.Write(time);  				packet.Write(1);  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,InstanceHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\InstanceHandler.cs,SendRaidTimerReset,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_RAID_GROUP_ONLY' 8))  			{  				packet.Write(0);  				packet.Write(0);  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,InstanceHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\InstanceHandler.cs,SendRaidInfo,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_RAID_INSTANCE_INFO))  			{  				if (chr.HasInstanceCollection)  				{  					packet.Position += 4;  					uint count = 0;  					chr.Instances.ForeachBinding(BindingType.Hard' binding =>  					{  						var timeLeft = binding.NextResetTime - DateTime.Now;  						if (timeLeft.Ticks > 0)  						{  							count++;  							packet.Write((uint)binding.MapId);                              packet.Write(binding.DifficultyIndex);  							packet.Write(binding.InstanceId);                              packet.WriteByte(0x1); // expired = 0                              packet.WriteByte(0x0); // extended = 1                              packet.Write((uint)timeLeft.TotalSeconds);                              //packet.Write(0); // unk' extended?  						}  					});  					packet.Position = packet.HeaderSize;  					packet.Write(count);  				}  				else  				{  					packet.Write(0);  				}    				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,InstanceHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\InstanceHandler.cs,SendResetFailure,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_INSTANCE_RESET_FAILED' 8))  			{  				packet.Write((uint)reason);  				packet.Write((uint)map);  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,InstanceHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\InstanceHandler.cs,SendResetWarning,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_RESET_FAILED_NOTIFY' 4))  			{  				packet.Write((uint)map);  				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,InstanceHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\InstanceHandler.cs,SendRaidDifficulty,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_SET_RAID_DIFFICULTY' 12))  			{  				var group = chr.Group;  				if (group is RaidGroup)  				{  					packet.Write(group.DungeonDifficulty);  					packet.Write(1); // val  					packet.Write(1); // isingroup  				}  				else // this is wrong? one packet def should be enough  				{  					packet.Write((int)chr.Record.DungeonDifficulty);  					packet.Write(1);  					packet.Write(0);  				}  			}
Magic Number,WCell.RealmServer.Handlers,InstanceHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\InstanceHandler.cs,SendDungeonDifficulty,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_SET_DUNGEON_DIFFICULTY' 12))  			{  				var group = chr.Group;                  if (group != null && !group.Flags.HasFlag(GroupFlags.Raid))  				{  					packet.Write(group.DungeonDifficulty);  					packet.Write(1); // val  					packet.Write(1); // isingroup  				}  				else // this is wrong? one packet def should be enough  				{  					packet.Write((int) chr.Record.DungeonDifficulty);  					packet.Write(1);  					packet.Write(0);  				}    				chr.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,LoginHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\LoginHandler.cs,AuthSessionRequest,The following statement contains a magic number: if (client.ActiveCharacter != null || client.Account != null)  			{  				// Already logged in  				SendAuthSessionErrorReply(client' LoginErrorCode.AUTH_ALREADY_ONLINE);  				client.Disconnect();  			}  			else if (!client.IsEncrypted)  			{  				var builtNumberClient = packet.ReadUInt32();  				var new302 = packet.ReadUInt32(); // NEW 0.0.2.8970  				var accName = packet.ReadCString();  				var unk322 = packet.ReadUInt32();    				client.ClientSeed = packet.ReadUInt32();    				var unk1 = packet.ReadUInt32(); // 3.3.5a  				var unk2 = packet.ReadUInt32(); // 3.3.5a  				var unk3 = packet.ReadUInt32(); // 3.3.5a  				var unk4 = packet.ReadUInt64();    				client.ClientDigest = packet.ReadBigInteger(20);    #if DEBUG  				log.Debug("builtNumberClient:{0} new302:{1} accName:{2} unk322:{3} client.ClientSeed:{4} unk4:{5} ClientDigest:{6}"'  					builtNumberClient'  					new302' accName' unk322' client.ClientSeed' unk4' client.ClientDigest);  #endif    				var decompressedDataLength = packet.ReadInt32();  				var compressedData = packet.ReadBytes(packet.RemainingLength);  				client.Addons = new byte[decompressedDataLength];  				Compression.DecompressZLib(compressedData' client.Addons);    				var acctLoadTask = Message.Obtain(() => RealmAccount.InitializeAccount(client' accName));  				RealmServer.IOQueue.AddMessage(acctLoadTask);  			}
Magic Number,WCell.RealmServer.Handlers,LoginHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\LoginHandler.cs,SendAuthSuccessful,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_AUTH_RESPONSE' 11))  			{  				packet.WriteByte((byte)LoginErrorCode.AUTH_OK);    				//BillingTimeRemaining  				packet.Write(0);    				packet.Write((byte)0x02);// BillingPlan Flags  				// 0x2' 0x4' 0x10 mutually exclusive. Order of Precedence: 0x2 > 0x4 > 0x10  				// 0x2 -> No Time left?  				// 0x20  				// 0x8    				// BillingTimeRested  				packet.Write(0);  				packet.Write((byte)client.Account.ClientId);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,QueryHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QueryHandler.cs,SendQueryTimeReply,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_QUERY_TIME_RESPONSE' 4))  			{  				packet.Write(Utility.GetEpochTime());  				//packet.Write(Utility.GetSystemTime());    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,QueryHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QueryHandler.cs,SendCreatureQueryResponse,The following statement contains a magic number: using (  				var pkt = new RealmPacketOut(RealmServerOpCode.SMSG_CREATURE_QUERY_RESPONSE'  											 48 + name.Length + title.Length))  			{  				pkt.WriteUInt(entry.Id);  				pkt.WriteCString(name);  				pkt.Write((byte)0); // Name2  				pkt.Write((byte)0); // Name3  				pkt.Write((byte)0); // Name4  				pkt.WriteCString(title);  				pkt.WriteCString(entry.InfoString);  				pkt.Write((uint)entry.EntryFlags);  				pkt.Write((uint)entry.Type);  				pkt.Write((uint)entry.FamilyId);  				pkt.Write((uint)entry.Rank);  				var i = 0;  				for (; i < entry.KillCreditIds.Length; i++)  				{  					pkt.Write(entry.KillCreditIds[i]);  				}  				for (i = 0; i < entry.DisplayIds.Length; i++)  				{  					pkt.Write(entry.DisplayIds[i]);  				}    				pkt.Write(entry.ModHealth);						// hp mod?  				pkt.Write(entry.ModMana);						// mana mod?  				pkt.Write(entry.IsLeader);    				for (i = 0; i < 6; i++)  				{  					pkt.Write(entry.QuestItems[i]);  				}  				pkt.Write(entry.MovementId); // id from CreatureMovementInfo.dbc    				client.Send(pkt);  			}
Magic Number,WCell.RealmServer.Handlers,QueryHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QueryHandler.cs,SendCreatureQueryResponse,The following statement contains a magic number: using (  				var pkt = new RealmPacketOut(RealmServerOpCode.SMSG_CREATURE_QUERY_RESPONSE'  											 48 + name.Length + title.Length))  			{  				pkt.WriteUInt(entry.Id);  				pkt.WriteCString(name);  				pkt.Write((byte)0); // Name2  				pkt.Write((byte)0); // Name3  				pkt.Write((byte)0); // Name4  				pkt.WriteCString(title);  				pkt.WriteCString(entry.InfoString);  				pkt.Write((uint)entry.EntryFlags);  				pkt.Write((uint)entry.Type);  				pkt.Write((uint)entry.FamilyId);  				pkt.Write((uint)entry.Rank);  				var i = 0;  				for (; i < entry.KillCreditIds.Length; i++)  				{  					pkt.Write(entry.KillCreditIds[i]);  				}  				for (i = 0; i < entry.DisplayIds.Length; i++)  				{  					pkt.Write(entry.DisplayIds[i]);  				}    				pkt.Write(entry.ModHealth);						// hp mod?  				pkt.Write(entry.ModMana);						// mana mod?  				pkt.Write(entry.IsLeader);    				for (i = 0; i < 6; i++)  				{  					pkt.Write(entry.QuestItems[i]);  				}  				pkt.Write(entry.MovementId); // id from CreatureMovementInfo.dbc    				client.Send(pkt);  			}
Magic Number,WCell.RealmServer.Handlers,QueryHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QueryHandler.cs,SendNPCTextUpdate,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_NPC_TEXT_UPDATE))  			{  				packet.Write(text.GossipId);    				var i = 0;  				for (; i < text.GossipTexts.Length; i++)  				{  					var entry = text.GossipTexts[i];  					packet.WriteFloat(entry.Probability);    					var maleText = entry.GetTextMale(character.GossipConversation);  					string femaleText;  					if (text.IsDynamic)  					{  						// generated dynamically anyway  						femaleText = maleText;  					}  					else  					{  						femaleText = entry.GetTextFemale(character.GossipConversation);  					}  					packet.WriteCString(maleText);  					packet.WriteCString(femaleText);      					packet.Write((uint)entry.Language);    					for (int emoteIndex = 0; emoteIndex < 3; emoteIndex++)  					{  						// TODO: Emotes  						//packet.Write((uint)entry.Emotes[emoteIndex]);  						//packet.Write(entry.EmoteDelays[emoteIndex]);  						packet.Write(0L);  					}  				}    				for (; i < 8; i++)  				{  					packet.WriteFloat(0);  					packet.WriteByte(0);  					packet.WriteByte(0);  					packet.Fill(0' 4 * 7);  				}    				character.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,QueryHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QueryHandler.cs,SendNPCTextUpdate,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_NPC_TEXT_UPDATE))  			{  				packet.Write(text.GossipId);    				var i = 0;  				for (; i < text.GossipTexts.Length; i++)  				{  					var entry = text.GossipTexts[i];  					packet.WriteFloat(entry.Probability);    					var maleText = entry.GetTextMale(character.GossipConversation);  					string femaleText;  					if (text.IsDynamic)  					{  						// generated dynamically anyway  						femaleText = maleText;  					}  					else  					{  						femaleText = entry.GetTextFemale(character.GossipConversation);  					}  					packet.WriteCString(maleText);  					packet.WriteCString(femaleText);      					packet.Write((uint)entry.Language);    					for (int emoteIndex = 0; emoteIndex < 3; emoteIndex++)  					{  						// TODO: Emotes  						//packet.Write((uint)entry.Emotes[emoteIndex]);  						//packet.Write(entry.EmoteDelays[emoteIndex]);  						packet.Write(0L);  					}  				}    				for (; i < 8; i++)  				{  					packet.WriteFloat(0);  					packet.WriteByte(0);  					packet.WriteByte(0);  					packet.Fill(0' 4 * 7);  				}    				character.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,QueryHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QueryHandler.cs,SendNPCTextUpdate,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_NPC_TEXT_UPDATE))  			{  				packet.Write(text.GossipId);    				var i = 0;  				for (; i < text.GossipTexts.Length; i++)  				{  					var entry = text.GossipTexts[i];  					packet.WriteFloat(entry.Probability);    					var maleText = entry.GetTextMale(character.GossipConversation);  					string femaleText;  					if (text.IsDynamic)  					{  						// generated dynamically anyway  						femaleText = maleText;  					}  					else  					{  						femaleText = entry.GetTextFemale(character.GossipConversation);  					}  					packet.WriteCString(maleText);  					packet.WriteCString(femaleText);      					packet.Write((uint)entry.Language);    					for (int emoteIndex = 0; emoteIndex < 3; emoteIndex++)  					{  						// TODO: Emotes  						//packet.Write((uint)entry.Emotes[emoteIndex]);  						//packet.Write(entry.EmoteDelays[emoteIndex]);  						packet.Write(0L);  					}  				}    				for (; i < 8; i++)  				{  					packet.WriteFloat(0);  					packet.WriteByte(0);  					packet.WriteByte(0);  					packet.Fill(0' 4 * 7);  				}    				character.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,QueryHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QueryHandler.cs,SendNPCTextUpdate,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_NPC_TEXT_UPDATE))  			{  				packet.Write(text.GossipId);    				var i = 0;  				for (; i < text.GossipTexts.Length; i++)  				{  					var entry = text.GossipTexts[i];  					packet.WriteFloat(entry.Probability);    					var maleText = entry.GetTextMale(character.GossipConversation);  					string femaleText;  					if (text.IsDynamic)  					{  						// generated dynamically anyway  						femaleText = maleText;  					}  					else  					{  						femaleText = entry.GetTextFemale(character.GossipConversation);  					}  					packet.WriteCString(maleText);  					packet.WriteCString(femaleText);      					packet.Write((uint)entry.Language);    					for (int emoteIndex = 0; emoteIndex < 3; emoteIndex++)  					{  						// TODO: Emotes  						//packet.Write((uint)entry.Emotes[emoteIndex]);  						//packet.Write(entry.EmoteDelays[emoteIndex]);  						packet.Write(0L);  					}  				}    				for (; i < 8; i++)  				{  					packet.WriteFloat(0);  					packet.WriteByte(0);  					packet.WriteByte(0);  					packet.Fill(0' 4 * 7);  				}    				character.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,QueryHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QueryHandler.cs,SendNPCTextUpdateSimple,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_NPC_TEXT_UPDATE))  			{  				packet.Write(id);    				packet.WriteFloat(1);  				packet.WriteCString(title);  				packet.WriteCString(text);  				packet.Fill(0' 4 * 7);    				for (var i = 1; i < 8; i++)  				{  					packet.WriteFloat(0);  					packet.WriteByte(0);  					packet.WriteByte(0);  					packet.Fill(0' 4 * 7);  				}    				character.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,QueryHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QueryHandler.cs,SendNPCTextUpdateSimple,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_NPC_TEXT_UPDATE))  			{  				packet.Write(id);    				packet.WriteFloat(1);  				packet.WriteCString(title);  				packet.WriteCString(text);  				packet.Fill(0' 4 * 7);    				for (var i = 1; i < 8; i++)  				{  					packet.WriteFloat(0);  					packet.WriteByte(0);  					packet.WriteByte(0);  					packet.Fill(0' 4 * 7);  				}    				character.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,QueryHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QueryHandler.cs,SendNPCTextUpdateSimple,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_NPC_TEXT_UPDATE))  			{  				packet.Write(id);    				packet.WriteFloat(1);  				packet.WriteCString(title);  				packet.WriteCString(text);  				packet.Fill(0' 4 * 7);    				for (var i = 1; i < 8; i++)  				{  					packet.WriteFloat(0);  					packet.WriteByte(0);  					packet.WriteByte(0);  					packet.Fill(0' 4 * 7);  				}    				character.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,QueryHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QueryHandler.cs,SendNPCTextUpdateSimple,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_NPC_TEXT_UPDATE))  			{  				packet.Write(id);    				packet.WriteFloat(1);  				packet.WriteCString(title);  				packet.WriteCString(text);  				packet.Fill(0' 4 * 7);    				for (var i = 1; i < 8; i++)  				{  					packet.WriteFloat(0);  					packet.WriteByte(0);  					packet.WriteByte(0);  					packet.Fill(0' 4 * 7);  				}    				character.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,QueryHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QueryHandler.cs,SendNPCTextUpdateSimple,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_NPC_TEXT_UPDATE))  			{  				packet.Write(id);    				packet.WriteFloat(1);  				packet.WriteCString(title);  				packet.WriteCString(text);  				packet.Fill(0' 4 * 7);    				for (var i = 1; i < 8; i++)  				{  					packet.WriteFloat(0);  					packet.WriteByte(0);  					packet.WriteByte(0);  					packet.Fill(0' 4 * 7);  				}    				character.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,QueryHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QueryHandler.cs,SendPageText,The following statement contains a magic number: if (entry != null)  			{  				do  				{  					SendPageText(chr' entry);  					entry = entry.NextPageEntry;  				} while (entry != null);  			}  			else  			{  				using (var outPack = new RealmPacketOut(RealmServerOpCode.SMSG_PAGE_TEXT_QUERY_RESPONSE' 100))  				{  					outPack.Write("-page is missing-");  					outPack.Write(0);  					chr.Send(outPack);  				}  			}
Magic Number,WCell.RealmServer.Handlers,QueryHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QueryHandler.cs,SendPageText,The following statement contains a magic number: while (entry != null)  			{  				using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PAGE_TEXT_QUERY_RESPONSE' 100))  				{  					packet.Write(entry.PageId);  					packet.Write(entry.Texts.Localize(locale));  					packet.Write(entry.NextPageId);  					chr.Send(packet);  				}  				entry = entry.NextPageEntry;  			}
Magic Number,WCell.RealmServer.Handlers,WhoHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\WhoHandler.cs,WhoListRequest,The following statement contains a magic number: if (zoneCount > 0 && zoneCount <= 10)  			{  				for (int i = 0; i < zoneCount; i++)  					search.Zones.Add((ZoneId)packet.ReadUInt32());  			}
Magic Number,WCell.RealmServer.Handlers,WhoHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\WhoHandler.cs,WhoListRequest,The following statement contains a magic number: if (nameCount > 0 && nameCount <= 10)  			{  				for (int i = 0; i < nameCount; i++)  					search.Names.Add(packet.ReadCString().ToLower());  			}
Magic Number,WCell.RealmServer.Handlers,EmoteHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\EmoteHandler.cs,HandleTextEmote,The following statement contains a magic number: packet.SkipBytes(4);
Magic Number,WCell.RealmServer.Handlers,EmoteHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\EmoteHandler.cs,SendTextEmote,The following statement contains a magic number: var len = (target == null) ? 20 : target.Name.Length + 21;
Magic Number,WCell.RealmServer.Handlers,EmoteHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\EmoteHandler.cs,SendTextEmote,The following statement contains a magic number: var len = (target == null) ? 20 : target.Name.Length + 21;
Magic Number,WCell.RealmServer.Handlers,EmoteHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\EmoteHandler.cs,SendEmote,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_EMOTE' 12))              {                  packet.WriteUInt((uint)emote);                  packet.Write(obj.EntityId);                    obj.SendPacketToArea(packet' true);              }
Magic Number,WCell.RealmServer.Handlers,FactionHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\FactionHandler.cs,SendVisible,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SET_FACTION_VISIBLE' 4))  			{  				packet.Write((int)reputationIndex);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,FactionHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\FactionHandler.cs,SendSetAtWar,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SET_FACTION_ATWAR' 5))  			{  				packet.Write((int)rep.Faction.ReputationIndex);    				packet.Write((byte)rep.Flags); // rep flags    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,FactionHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\FactionHandler.cs,SendReputationStandingUpdate,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SET_FACTION_STANDING' 16))  			{  				packet.Write(0f); // Refer-A-Friend bonus reputation  				packet.Write((byte)0);  				packet.Write(1);							// count (we only ever send 1)  				packet.Write((uint)rep.Faction.ReputationIndex);  				packet.Write(rep.Value);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,FactionHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\FactionHandler.cs,SendFactionList,The following statement contains a magic number: const int count = 128;
Magic Number,WCell.RealmServer.Handlers,FactionHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\FactionHandler.cs,SendFactionList,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_INITIALIZE_FACTIONS' (count * 5) + 4))  			{  				packet.Write(count);  				for (var i = 0; i < count; i++)  				{  					var reps = chr.Reputations;  					var rep = reps[(FactionReputationIndex)i];  					if (rep != null)  					{  						packet.Write((byte)rep.Flags);  						packet.Write(rep.Value);  					}  					else  					{  						packet.Write((byte)0);  						packet.Write(0);  					}  				}    				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,FactionHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\FactionHandler.cs,SendFactionList,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_INITIALIZE_FACTIONS' (count * 5) + 4))  			{  				packet.Write(count);  				for (var i = 0; i < count; i++)  				{  					var reps = chr.Reputations;  					var rep = reps[(FactionReputationIndex)i];  					if (rep != null)  					{  						packet.Write((byte)rep.Flags);  						packet.Write(rep.Value);  					}  					else  					{  						packet.Write((byte)0);  						packet.Write(0);  					}  				}    				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MiscHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MiscHandler.cs,SendRealmStateResponse,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_REALM_SPLIT' 8 + 1 + splitDate.Length))  			{  				packet.WriteUInt(realmNo);  				packet.WriteUInt((uint)realmState);  				packet.WriteCString(splitDate);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MiscHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MiscHandler.cs,SendPingReply,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PONG' 4))  			{  				packet.Write(sequence);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MiscHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MiscHandler.cs,SendMotd,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MOTD' 4 + messages.Length * 20))  			{  				packet.Write(messages.Length);  				foreach (var msg in messages)  				{  					packet.WriteCString(msg);  				}    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MiscHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MiscHandler.cs,SendMotd,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MOTD' 4 + messages.Length * 20))  			{  				packet.Write(messages.Length);  				foreach (var msg in messages)  				{  					packet.WriteCString(msg);  				}    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MiscHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MiscHandler.cs,SendHealthUpdate,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_HEALTH_UPDATE' 13))  			{  				unit.EntityId.WritePacked(packet);  				packet.Write(health);    				unit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MiscHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MiscHandler.cs,SendPowerUpdate,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_POWER_UPDATE' 17))  			{  				unit.EntityId.WritePacked(packet);  				packet.Write((byte)type);  				packet.Write(value);    				unit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MiscHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MiscHandler.cs,SendPlayObjectSound,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PLAY_OBJECT_SOUND' 13))  			{  				packet.Write(sound);  				packet.Write(obj.EntityId);    				obj.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MiscHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MiscHandler.cs,SendPlaySoundToMap,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PLAY_SOUND' 4))              {                  packet.WriteUInt(sound);                    map.SendPacketToMap(packet);              }
Magic Number,WCell.RealmServer.Handlers,MiscHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MiscHandler.cs,SendPlayMusic,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PLAY_MUSIC' 4))  			{  				packet.WriteUInt(sound);  				obj.SendPacketToArea(packet' range != 0 ? range : WorldObject.BroadcastRange' true);  			}
Magic Number,WCell.RealmServer.Handlers,MiscHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MiscHandler.cs,SendGameObjectTextPage,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GAMEOBJECT_PAGETEXT' 8))  			{  				packet.Write(obj.EntityId);    				rcv.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,BroadcastMovementInfo,The following statement contains a magic number: using (var outPacket = new RealmPacketOut(packet.PacketId))  			{  				var guidLength = mover.EntityId.WritePacked(outPacket);    				// set position to start of data  				packet.Position = packet.HeaderSize + guidLength;    				outPacket.Write(packet.ReadBytes(packet.RemainingLength));    				foreach (var outClient in clients)  				{  					// 4 packet header + 4 moveflags + 2 moveflags2 + packed guid length  					SendMovementPacket(outClient' outPacket' 10 + guidLength' clientTime);  				}  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendMovementPacket,The following statement contains a magic number: var correctedMoveTime = Utility.GetSystemTime() +  				(client.OutOfSyncDelay * 800);
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendMountSpecialAnim,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MOUNTSPECIAL_ANIM' 8))  			{  				client.ActiveCharacter.EntityId.WritePacked(packet);  				client.ActiveCharacter.SendPacketToArea(packet' false);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendMoveToPacket,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MONSTER_MOVE' 53))  			{  				movingUnit.EntityId.WritePacked(packet);			// 8  				packet.Write((byte)0);  				packet.Write(movingUnit.Position);	// + 12 = 20  				packet.Write(Utility.GetSystemTime());			// + 4 = 24  				if (orientation != 0.0f)  				{  					packet.Write((byte)MonsterMoveType.FinalFacingAngle);							// + 1 = 25  					packet.Write(orientation);					// + 4 = 29  				}  				else  				{  					packet.Write((byte)MonsterMoveType.Normal);							// + 1 = 25  				}    				packet.Write((uint)moveFlags);					// + 4 = 33  				packet.Write(moveTime);							// + 4 = 37  				packet.Write(1);								// + 4 = 41  				packet.Write(pos);							// + 12 = 53    				movingUnit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendFacingPacket,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MONSTER_MOVE' 53))  			{  				movingUnit.EntityId.WritePacked(packet); // 8  				packet.Write((byte)0);  				packet.Write(movingUnit.Position); // + 12 = 20  				packet.Write(Utility.GetSystemTime()); // + 4 = 24    				packet.Write((byte)MonsterMoveType.FinalFacingAngle); // + 1 = 25  				packet.Write(orientation); // + 4 = 29    				packet.Write((uint)MonsterMoveFlags.None); // + 4 = 33  				packet.Write(moveTimeMillis); // + 4 = 37  				packet.Write(1);								// + 4 = 41  				packet.Write(movingUnit.Position);    				movingUnit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ConstructMultiWaypointMovePacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MONSTER_MOVE'  											(9 + 12 + 4 + 1 + 4 + 4 + 4 + (numWaypoints * 4 * 3)));
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ConstructMultiWaypointMovePacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MONSTER_MOVE'  											(9 + 12 + 4 + 1 + 4 + 4 + 4 + (numWaypoints * 4 * 3)));
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ConstructMultiWaypointMovePacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MONSTER_MOVE'  											(9 + 12 + 4 + 1 + 4 + 4 + 4 + (numWaypoints * 4 * 3)));
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ConstructMultiWaypointMovePacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MONSTER_MOVE'  											(9 + 12 + 4 + 1 + 4 + 4 + 4 + (numWaypoints * 4 * 3)));
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ConstructMultiWaypointMovePacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MONSTER_MOVE'  											(9 + 12 + 4 + 1 + 4 + 4 + 4 + (numWaypoints * 4 * 3)));
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ConstructMultiWaypointMovePacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MONSTER_MOVE'  											(9 + 12 + 4 + 1 + 4 + 4 + 4 + (numWaypoints * 4 * 3)));
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ConstructMultiWaypointMovePacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MONSTER_MOVE'  											(9 + 12 + 4 + 1 + 4 + 4 + 4 + (numWaypoints * 4 * 3)));
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ConstructMultiWaypointMovePacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MONSTER_MOVE'  											(9 + 12 + 4 + 1 + 4 + 4 + 4 + (numWaypoints * 4 * 3)));
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ConstructMultiWaypointMovePacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MONSTER_MOVE'  											(9 + 1 + 12 + 4 + 1 + 4 + 4 + 4 + (firstNode.List.Count * 4 * 3)));
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ConstructMultiWaypointMovePacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MONSTER_MOVE'  											(9 + 1 + 12 + 4 + 1 + 4 + 4 + 4 + (firstNode.List.Count * 4 * 3)));
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ConstructMultiWaypointMovePacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MONSTER_MOVE'  											(9 + 1 + 12 + 4 + 1 + 4 + 4 + 4 + (firstNode.List.Count * 4 * 3)));
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ConstructMultiWaypointMovePacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MONSTER_MOVE'  											(9 + 1 + 12 + 4 + 1 + 4 + 4 + 4 + (firstNode.List.Count * 4 * 3)));
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ConstructMultiWaypointMovePacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MONSTER_MOVE'  											(9 + 1 + 12 + 4 + 1 + 4 + 4 + 4 + (firstNode.List.Count * 4 * 3)));
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ConstructMultiWaypointMovePacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MONSTER_MOVE'  											(9 + 1 + 12 + 4 + 1 + 4 + 4 + 4 + (firstNode.List.Count * 4 * 3)));
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ConstructMultiWaypointMovePacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MONSTER_MOVE'  											(9 + 1 + 12 + 4 + 1 + 4 + 4 + 4 + (firstNode.List.Count * 4 * 3)));
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ConstructMultiWaypointMovePacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MONSTER_MOVE'  											(9 + 1 + 12 + 4 + 1 + 4 + 4 + 4 + (firstNode.List.Count * 4 * 3)));
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ConstructMultiWaypointMovePacket,The following statement contains a magic number: packet.Position += 4;
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ConstructMultiWaypointMovePacket,The following statement contains a magic number: packet.Position += 4;
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ConstructMultiWaypointMovePacket,The following statement contains a magic number: var moveTime = (int)(1000 * unit.Position.GetDistance(firstNode.Value.Position) / speed);
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ConstructMultiWaypointMovePacket,The following statement contains a magic number: while (true)  			{  				count++;  				packet.Write(current.Value.Position);// + 12*numWaypoints  				var next = current.Next;  				if (next != null)  				{  					moveTime += (int)(1000 * current.Value.GetDistanceToNext() / speed);  					current = next;  				}  				else  				{  					break;  				}  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendStopMovementPacket,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MONSTER_MOVE' 25))  			{  				movingUnit.EntityId.WritePacked(packet);  				packet.Write(false); // new 3.1  				packet.Write(movingUnit.Position);  				packet.Write(Utility.GetSystemTime());  				packet.Write((byte)MonsterMoveType.Stop);                    if(movingUnit is Character)                  {                      ((Character)movingUnit).Send(packet);                      return;                  }    				movingUnit.SendPacketToArea(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendHeartbeat,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_MOVE_HEARTBEAT' 31))  			{  				unit.EntityId.WritePacked(packet);  				unit.WriteMovementPacketInfo(packet);    				unit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendKnockBack,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MOVE_KNOCK_BACK' 28))  			{  				target.EntityId.WritePacked(packet);  				packet.Write(1);  				packet.Write((float)Math.Sin(horizontalAngle));  				packet.Write((float)Math.Cos(horizontalAngle));  				packet.Write(horizontalSpeed);  				packet.Write(-verticalSpeed);    				target.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendRooted,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_FORCE_MOVE_ROOT' 12))  			{  				chr.EntityId.WritePacked(packet);  				packet.WriteUInt(unk);    				chr.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendUnrooted,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_FORCE_MOVE_UNROOT' 12))  			{  				chr.EntityId.WritePacked(packet);  				packet.WriteUInt(5);    				chr.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendUnrooted,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_FORCE_MOVE_UNROOT' 12))  			{  				chr.EntityId.WritePacked(packet);  				packet.WriteUInt(5);    				chr.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendWaterWalk,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MOVE_WATER_WALK' 12))  			{  				chr.EntityId.WritePacked(packet);  				packet.WriteUInt(4);    				chr.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendWaterWalk,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MOVE_WATER_WALK' 12))  			{  				chr.EntityId.WritePacked(packet);  				packet.WriteUInt(4);    				chr.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendWalk,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MOVE_LAND_WALK' 12))  			{  				chr.EntityId.WritePacked(packet);  				packet.WriteUInt(8);    				chr.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendWalk,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MOVE_LAND_WALK' 12))  			{  				chr.EntityId.WritePacked(packet);  				packet.WriteUInt(8);    				chr.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendMoved,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_MOVE_TELEPORT_ACK' 40))  			{  				chr.WriteTeleportPacketInfo(packet' 2);    				chr.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendMoved,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_MOVE_TELEPORT_ACK' 40))  			{  				chr.WriteTeleportPacketInfo(packet' 2);    				chr.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendNewWorld,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_TRANSFER_PENDING' 4))  			{  				packet.WriteUInt((uint)map);                  if (trans != null)  				{  					packet.Write((uint)trans.Entry.Id);  					packet.Write((uint)chr.MapId);  				}    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendNewWorld,The following statement contains a magic number: using (var outPacket = new RealmPacketOut(RealmServerOpCode.SMSG_NEW_WORLD' 20))  			{  				outPacket.WriteUInt((uint)map);                  if (trans != null)                  {                      outPacket.Write(chr.TransportPosition);                      outPacket.Write(chr.TransportOrientation);                  }                  else                  {                      outPacket.Write(pos);                      outPacket.WriteFloat(orientation);                  }    			    client.Send(outPacket);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,Send_SMSG_MOVE_ABANDON_TRANSPORT,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MOVE_ABANDON_TRANSPORT' 2))  			{  				packet.Write(value);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendHoverModeStart,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MOVE_SET_HOVER' 12))  			{  				unit.EntityId.WritePacked(packet);  				packet.WriteUInt(2);    				unit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendHoverModeStart,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MOVE_SET_HOVER' 12))  			{  				unit.EntityId.WritePacked(packet);  				packet.WriteUInt(2);    				unit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendHoverModeStop,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MOVE_UNSET_HOVER' 12))  			{  				unit.EntityId.WritePacked(packet);  				packet.WriteUInt(5);    				unit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendHoverModeStop,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MOVE_UNSET_HOVER' 12))  			{  				unit.EntityId.WritePacked(packet);  				packet.WriteUInt(5);    				unit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendFeatherModeStart,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MOVE_FEATHER_FALL' 12))  			{  				unit.EntityId.WritePacked(packet);  				packet.WriteUInt(0);    				unit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendFeatherModeStop,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MOVE_NORMAL_FALL' 12))  			{  				unit.EntityId.WritePacked(packet);  				packet.WriteUInt(0);    				unit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendFlyModeStart,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MOVE_SET_CAN_FLY' 12))  			{  				unit.EntityId.WritePacked(packet);  				packet.WriteUInt(2);    				unit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendFlyModeStart,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MOVE_SET_CAN_FLY' 12))  			{  				unit.EntityId.WritePacked(packet);  				packet.WriteUInt(2);    				unit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendFlyModeStop,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MOVE_UNSET_CAN_FLY' 12))  			{  				unit.EntityId.WritePacked(packet);  				packet.WriteUInt(5);    				unit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendFlyModeStop,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MOVE_UNSET_CAN_FLY' 12))  			{  				unit.EntityId.WritePacked(packet);  				packet.WriteUInt(5);    				unit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendTransferFailure,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_TRANSFER_ABORTED' 8))  			{  				packet.Write((uint)mapId);  				packet.Write((byte)reason);    				switch (reason)  				{  					case MapTransferError.TRANSFER_ABORT_INSUF_EXPAN_LVL:  					case MapTransferError.TRANSFER_ABORT_DIFFICULTY:  					case MapTransferError.TRANSFER_ABORT_UNIQUE_MESSAGE:  						// only for these 3 cases!  						packet.Write((byte)arg);  						break;  				}    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendSetWalkSpeed,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_MOVE_SET_WALK_SPEED' 43))  			{  				unit.EntityId.WritePacked(packet);  				unit.WriteMovementPacketInfo(packet);  				packet.WriteFloat(unit.WalkSpeed);    				unit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendSetRunSpeed,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_MOVE_SET_RUN_SPEED' 43))  			{  				unit.EntityId.WritePacked(packet);  				unit.WriteMovementPacketInfo(packet);  				packet.WriteFloat(unit.RunSpeed);    				unit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendSetRunBackSpeed,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_MOVE_SET_RUN_BACK_SPEED' 43))  			{  				unit.EntityId.WritePacked(packet);  				unit.WriteMovementPacketInfo(packet);  				packet.WriteFloat(unit.RunBackSpeed);    				unit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendSetSwimSpeed,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_MOVE_SET_SWIM_SPEED' 43))  			{  				unit.EntityId.WritePacked(packet);  				unit.WriteMovementPacketInfo(packet);  				packet.WriteFloat(unit.SwimSpeed);    				unit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendSetSwimBackSpeed,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_MOVE_SET_SWIM_BACK_SPEED' 43))  			{  				unit.EntityId.WritePacked(packet);  				unit.WriteMovementPacketInfo(packet);  				packet.WriteFloat(unit.SwimBackSpeed);    				unit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendSetFlightSpeed,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_MOVE_SET_FLIGHT_SPEED' 43))  			{  				unit.EntityId.WritePacked(packet);  				unit.WriteMovementPacketInfo(packet);  				packet.WriteFloat(unit.FlightSpeed);    				unit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendSetFlightBackSpeed,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_MOVE_SET_FLIGHT_BACK_SPEED' 43))  			{  				unit.EntityId.WritePacked(packet);  				unit.WriteMovementPacketInfo(packet);  				packet.WriteFloat(unit.FlightBackSpeed);    				unit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendSetTurnRate,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_MOVE_SET_TURN_RATE' 43))  			{  				unit.EntityId.WritePacked(packet);  				unit.WriteMovementPacketInfo(packet);  				packet.WriteFloat(unit.TurnSpeed);    				unit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendSetPitchRate,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_MOVE_SET_PITCH_RATE' 43))  			{  				unit.EntityId.WritePacked(packet);  				unit.WriteMovementPacketInfo(packet);  				packet.Write(unit.PitchRate);    				unit.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Handlers,TradeHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TradeHandler.cs,SendTradeUpdate,The following statement contains a magic number: using (var pkt = new RealmPacketOut(RealmServerOpCode.SMSG_TRADE_STATUS_EXTENDED' 30 + 18 * 4 * items.Length))  			{  				pkt.Write(otherParty);  				pkt.Write(0);					// Trade id  				pkt.Write(items.Length);  				pkt.Write(items.Length);  				pkt.Write(money);  				pkt.Write(0);    				for (var i = 0; i < items.Length; i++)  				{  					pkt.WriteByte(i);  					var item = items[i];    					if (item != null)  					{  						pkt.Write(item.EntryId);  						pkt.Write(item.Template.DisplayId);  						pkt.Write(item.Amount);  						pkt.Write(0);    						pkt.Write(item.GiftCreator);    						var enchant = item.GetEnchantment(EnchantSlot.Permanent);  						pkt.Write(enchant != null ? enchant.Entry.Id : 0);    						pkt.Zero(4 * 3);    						pkt.Write(item.Creator);  						pkt.Write(item.SpellCharges);  						pkt.Write(item.Template.RandomSuffixFactor);  						pkt.Write(item.RandomPropertiesId);    						var itemLock = item.Lock;  						pkt.Write(itemLock != null ? itemLock.Id : 0);    						pkt.Write(item.MaxDurability);  						pkt.Write(item.Durability);  					}  					else  					{  						pkt.Zero(18 * 4);  					}  				}    				client.Send(pkt);  			}
Magic Number,WCell.RealmServer.Handlers,TradeHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TradeHandler.cs,SendTradeUpdate,The following statement contains a magic number: using (var pkt = new RealmPacketOut(RealmServerOpCode.SMSG_TRADE_STATUS_EXTENDED' 30 + 18 * 4 * items.Length))  			{  				pkt.Write(otherParty);  				pkt.Write(0);					// Trade id  				pkt.Write(items.Length);  				pkt.Write(items.Length);  				pkt.Write(money);  				pkt.Write(0);    				for (var i = 0; i < items.Length; i++)  				{  					pkt.WriteByte(i);  					var item = items[i];    					if (item != null)  					{  						pkt.Write(item.EntryId);  						pkt.Write(item.Template.DisplayId);  						pkt.Write(item.Amount);  						pkt.Write(0);    						pkt.Write(item.GiftCreator);    						var enchant = item.GetEnchantment(EnchantSlot.Permanent);  						pkt.Write(enchant != null ? enchant.Entry.Id : 0);    						pkt.Zero(4 * 3);    						pkt.Write(item.Creator);  						pkt.Write(item.SpellCharges);  						pkt.Write(item.Template.RandomSuffixFactor);  						pkt.Write(item.RandomPropertiesId);    						var itemLock = item.Lock;  						pkt.Write(itemLock != null ? itemLock.Id : 0);    						pkt.Write(item.MaxDurability);  						pkt.Write(item.Durability);  					}  					else  					{  						pkt.Zero(18 * 4);  					}  				}    				client.Send(pkt);  			}
Magic Number,WCell.RealmServer.Handlers,TradeHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TradeHandler.cs,SendTradeUpdate,The following statement contains a magic number: using (var pkt = new RealmPacketOut(RealmServerOpCode.SMSG_TRADE_STATUS_EXTENDED' 30 + 18 * 4 * items.Length))  			{  				pkt.Write(otherParty);  				pkt.Write(0);					// Trade id  				pkt.Write(items.Length);  				pkt.Write(items.Length);  				pkt.Write(money);  				pkt.Write(0);    				for (var i = 0; i < items.Length; i++)  				{  					pkt.WriteByte(i);  					var item = items[i];    					if (item != null)  					{  						pkt.Write(item.EntryId);  						pkt.Write(item.Template.DisplayId);  						pkt.Write(item.Amount);  						pkt.Write(0);    						pkt.Write(item.GiftCreator);    						var enchant = item.GetEnchantment(EnchantSlot.Permanent);  						pkt.Write(enchant != null ? enchant.Entry.Id : 0);    						pkt.Zero(4 * 3);    						pkt.Write(item.Creator);  						pkt.Write(item.SpellCharges);  						pkt.Write(item.Template.RandomSuffixFactor);  						pkt.Write(item.RandomPropertiesId);    						var itemLock = item.Lock;  						pkt.Write(itemLock != null ? itemLock.Id : 0);    						pkt.Write(item.MaxDurability);  						pkt.Write(item.Durability);  					}  					else  					{  						pkt.Zero(18 * 4);  					}  				}    				client.Send(pkt);  			}
Magic Number,WCell.RealmServer.Handlers,TradeHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TradeHandler.cs,SendTradeUpdate,The following statement contains a magic number: using (var pkt = new RealmPacketOut(RealmServerOpCode.SMSG_TRADE_STATUS_EXTENDED' 30 + 18 * 4 * items.Length))  			{  				pkt.Write(otherParty);  				pkt.Write(0);					// Trade id  				pkt.Write(items.Length);  				pkt.Write(items.Length);  				pkt.Write(money);  				pkt.Write(0);    				for (var i = 0; i < items.Length; i++)  				{  					pkt.WriteByte(i);  					var item = items[i];    					if (item != null)  					{  						pkt.Write(item.EntryId);  						pkt.Write(item.Template.DisplayId);  						pkt.Write(item.Amount);  						pkt.Write(0);    						pkt.Write(item.GiftCreator);    						var enchant = item.GetEnchantment(EnchantSlot.Permanent);  						pkt.Write(enchant != null ? enchant.Entry.Id : 0);    						pkt.Zero(4 * 3);    						pkt.Write(item.Creator);  						pkt.Write(item.SpellCharges);  						pkt.Write(item.Template.RandomSuffixFactor);  						pkt.Write(item.RandomPropertiesId);    						var itemLock = item.Lock;  						pkt.Write(itemLock != null ? itemLock.Id : 0);    						pkt.Write(item.MaxDurability);  						pkt.Write(item.Durability);  					}  					else  					{  						pkt.Zero(18 * 4);  					}  				}    				client.Send(pkt);  			}
Magic Number,WCell.RealmServer.Handlers,TradeHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TradeHandler.cs,SendTradeUpdate,The following statement contains a magic number: using (var pkt = new RealmPacketOut(RealmServerOpCode.SMSG_TRADE_STATUS_EXTENDED' 30 + 18 * 4 * items.Length))  			{  				pkt.Write(otherParty);  				pkt.Write(0);					// Trade id  				pkt.Write(items.Length);  				pkt.Write(items.Length);  				pkt.Write(money);  				pkt.Write(0);    				for (var i = 0; i < items.Length; i++)  				{  					pkt.WriteByte(i);  					var item = items[i];    					if (item != null)  					{  						pkt.Write(item.EntryId);  						pkt.Write(item.Template.DisplayId);  						pkt.Write(item.Amount);  						pkt.Write(0);    						pkt.Write(item.GiftCreator);    						var enchant = item.GetEnchantment(EnchantSlot.Permanent);  						pkt.Write(enchant != null ? enchant.Entry.Id : 0);    						pkt.Zero(4 * 3);    						pkt.Write(item.Creator);  						pkt.Write(item.SpellCharges);  						pkt.Write(item.Template.RandomSuffixFactor);  						pkt.Write(item.RandomPropertiesId);    						var itemLock = item.Lock;  						pkt.Write(itemLock != null ? itemLock.Id : 0);    						pkt.Write(item.MaxDurability);  						pkt.Write(item.Durability);  					}  					else  					{  						pkt.Zero(18 * 4);  					}  				}    				client.Send(pkt);  			}
Magic Number,WCell.RealmServer.Handlers,TradeHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TradeHandler.cs,SendTradeUpdate,The following statement contains a magic number: using (var pkt = new RealmPacketOut(RealmServerOpCode.SMSG_TRADE_STATUS_EXTENDED' 30 + 18 * 4 * items.Length))  			{  				pkt.Write(otherParty);  				pkt.Write(0);					// Trade id  				pkt.Write(items.Length);  				pkt.Write(items.Length);  				pkt.Write(money);  				pkt.Write(0);    				for (var i = 0; i < items.Length; i++)  				{  					pkt.WriteByte(i);  					var item = items[i];    					if (item != null)  					{  						pkt.Write(item.EntryId);  						pkt.Write(item.Template.DisplayId);  						pkt.Write(item.Amount);  						pkt.Write(0);    						pkt.Write(item.GiftCreator);    						var enchant = item.GetEnchantment(EnchantSlot.Permanent);  						pkt.Write(enchant != null ? enchant.Entry.Id : 0);    						pkt.Zero(4 * 3);    						pkt.Write(item.Creator);  						pkt.Write(item.SpellCharges);  						pkt.Write(item.Template.RandomSuffixFactor);  						pkt.Write(item.RandomPropertiesId);    						var itemLock = item.Lock;  						pkt.Write(itemLock != null ? itemLock.Id : 0);    						pkt.Write(item.MaxDurability);  						pkt.Write(item.Durability);  					}  					else  					{  						pkt.Zero(18 * 4);  					}  				}    				client.Send(pkt);  			}
Magic Number,WCell.RealmServer.Handlers,TradeHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TradeHandler.cs,SendTradeUpdate,The following statement contains a magic number: using (var pkt = new RealmPacketOut(RealmServerOpCode.SMSG_TRADE_STATUS_EXTENDED' 30 + 18 * 4 * items.Length))  			{  				pkt.Write(otherParty);  				pkt.Write(0);					// Trade id  				pkt.Write(items.Length);  				pkt.Write(items.Length);  				pkt.Write(money);  				pkt.Write(0);    				for (var i = 0; i < items.Length; i++)  				{  					pkt.WriteByte(i);  					var item = items[i];    					if (item != null)  					{  						pkt.Write(item.EntryId);  						pkt.Write(item.Template.DisplayId);  						pkt.Write(item.Amount);  						pkt.Write(0);    						pkt.Write(item.GiftCreator);    						var enchant = item.GetEnchantment(EnchantSlot.Permanent);  						pkt.Write(enchant != null ? enchant.Entry.Id : 0);    						pkt.Zero(4 * 3);    						pkt.Write(item.Creator);  						pkt.Write(item.SpellCharges);  						pkt.Write(item.Template.RandomSuffixFactor);  						pkt.Write(item.RandomPropertiesId);    						var itemLock = item.Lock;  						pkt.Write(itemLock != null ? itemLock.Id : 0);    						pkt.Write(item.MaxDurability);  						pkt.Write(item.Durability);  					}  					else  					{  						pkt.Zero(18 * 4);  					}  				}    				client.Send(pkt);  			}
Magic Number,WCell.RealmServer.Handlers,QuestHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QuestHandler.cs,SendQuestCompletedQueryResponse,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_QUERY_QUESTS_COMPLETED_RESPONSE' 4))  			{  				packet.Write(chr.QuestLog.FinishedQuests.Count);  				foreach (var entry in chr.QuestLog.FinishedQuests)  				{  					packet.Write(entry);  				}    				chr.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,QuestHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QuestHandler.cs,SendQuestInvalid,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_QUESTGIVER_QUEST_INVALID' 4))  			{  				packet.Write((int)reason);    				chr.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,QuestHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QuestHandler.cs,SendRequestItems,The following statement contains a magic number: if (qg.QuestHolderInfo != null)  			{  				//var list = qg.QuestHolderInfo.QuestEnds;  				//if (list != null && list.Contains(qt))  				{  					var locale = chr.Locale;  					using (var pckt = new RealmPacketOut(RealmServerOpCode.SMSG_QUESTGIVER_REQUEST_ITEMS))  					{  						pckt.Write(qg.EntityId);  						pckt.Write(qt.Id);  						pckt.Write(qt.Titles.Localize(locale));  						pckt.Write(qt.ProgressTexts.Localize(locale));  						pckt.Write((uint)0); // emote delay  						pckt.Write((uint)qt.RequestEmoteType); // Emote type  						if (closeOnCancel)  						{  							pckt.Write((uint)1);  						}  						else  						{  							pckt.Write((uint)0);  						}  						pckt.Write((uint)qt.Flags);  						pckt.Write((uint)qt.SuggestedPlayers);  						if (qt.RewMoney < 0)  						{  							pckt.Write((uint)-qt.RewMoney);  						}  						else  						{  							pckt.Write((uint)0);  						}  						pckt.Write(qt.CollectableItems.Length);  						for (uint i = 0; i < qt.CollectableItems.Length; i++)  						{  							pckt.Write((uint)qt.CollectableItems[i].ItemId);  							pckt.Write(qt.CollectableItems[i].Amount);  							var template = qt.CollectableItems[i].Template;  							if (template != null)  							{  								pckt.Write(template.DisplayId);  							}  							else  							{  								pckt.Write((uint)0);  							}  						}  						pckt.Write((uint)2); // unknown' probably IsActive  						pckt.Write(4);			// if can advance: 4  						pckt.Write((uint)8); //always eight  						pckt.Write((uint)10); // always ten    						chr.Client.Send(pckt);  					}  				}  			}
Magic Number,WCell.RealmServer.Handlers,QuestHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QuestHandler.cs,SendRequestItems,The following statement contains a magic number: if (qg.QuestHolderInfo != null)  			{  				//var list = qg.QuestHolderInfo.QuestEnds;  				//if (list != null && list.Contains(qt))  				{  					var locale = chr.Locale;  					using (var pckt = new RealmPacketOut(RealmServerOpCode.SMSG_QUESTGIVER_REQUEST_ITEMS))  					{  						pckt.Write(qg.EntityId);  						pckt.Write(qt.Id);  						pckt.Write(qt.Titles.Localize(locale));  						pckt.Write(qt.ProgressTexts.Localize(locale));  						pckt.Write((uint)0); // emote delay  						pckt.Write((uint)qt.RequestEmoteType); // Emote type  						if (closeOnCancel)  						{  							pckt.Write((uint)1);  						}  						else  						{  							pckt.Write((uint)0);  						}  						pckt.Write((uint)qt.Flags);  						pckt.Write((uint)qt.SuggestedPlayers);  						if (qt.RewMoney < 0)  						{  							pckt.Write((uint)-qt.RewMoney);  						}  						else  						{  							pckt.Write((uint)0);  						}  						pckt.Write(qt.CollectableItems.Length);  						for (uint i = 0; i < qt.CollectableItems.Length; i++)  						{  							pckt.Write((uint)qt.CollectableItems[i].ItemId);  							pckt.Write(qt.CollectableItems[i].Amount);  							var template = qt.CollectableItems[i].Template;  							if (template != null)  							{  								pckt.Write(template.DisplayId);  							}  							else  							{  								pckt.Write((uint)0);  							}  						}  						pckt.Write((uint)2); // unknown' probably IsActive  						pckt.Write(4);			// if can advance: 4  						pckt.Write((uint)8); //always eight  						pckt.Write((uint)10); // always ten    						chr.Client.Send(pckt);  					}  				}  			}
Magic Number,WCell.RealmServer.Handlers,QuestHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QuestHandler.cs,SendRequestItems,The following statement contains a magic number: if (qg.QuestHolderInfo != null)  			{  				//var list = qg.QuestHolderInfo.QuestEnds;  				//if (list != null && list.Contains(qt))  				{  					var locale = chr.Locale;  					using (var pckt = new RealmPacketOut(RealmServerOpCode.SMSG_QUESTGIVER_REQUEST_ITEMS))  					{  						pckt.Write(qg.EntityId);  						pckt.Write(qt.Id);  						pckt.Write(qt.Titles.Localize(locale));  						pckt.Write(qt.ProgressTexts.Localize(locale));  						pckt.Write((uint)0); // emote delay  						pckt.Write((uint)qt.RequestEmoteType); // Emote type  						if (closeOnCancel)  						{  							pckt.Write((uint)1);  						}  						else  						{  							pckt.Write((uint)0);  						}  						pckt.Write((uint)qt.Flags);  						pckt.Write((uint)qt.SuggestedPlayers);  						if (qt.RewMoney < 0)  						{  							pckt.Write((uint)-qt.RewMoney);  						}  						else  						{  							pckt.Write((uint)0);  						}  						pckt.Write(qt.CollectableItems.Length);  						for (uint i = 0; i < qt.CollectableItems.Length; i++)  						{  							pckt.Write((uint)qt.CollectableItems[i].ItemId);  							pckt.Write(qt.CollectableItems[i].Amount);  							var template = qt.CollectableItems[i].Template;  							if (template != null)  							{  								pckt.Write(template.DisplayId);  							}  							else  							{  								pckt.Write((uint)0);  							}  						}  						pckt.Write((uint)2); // unknown' probably IsActive  						pckt.Write(4);			// if can advance: 4  						pckt.Write((uint)8); //always eight  						pckt.Write((uint)10); // always ten    						chr.Client.Send(pckt);  					}  				}  			}
Magic Number,WCell.RealmServer.Handlers,QuestHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QuestHandler.cs,SendRequestItems,The following statement contains a magic number: if (qg.QuestHolderInfo != null)  			{  				//var list = qg.QuestHolderInfo.QuestEnds;  				//if (list != null && list.Contains(qt))  				{  					var locale = chr.Locale;  					using (var pckt = new RealmPacketOut(RealmServerOpCode.SMSG_QUESTGIVER_REQUEST_ITEMS))  					{  						pckt.Write(qg.EntityId);  						pckt.Write(qt.Id);  						pckt.Write(qt.Titles.Localize(locale));  						pckt.Write(qt.ProgressTexts.Localize(locale));  						pckt.Write((uint)0); // emote delay  						pckt.Write((uint)qt.RequestEmoteType); // Emote type  						if (closeOnCancel)  						{  							pckt.Write((uint)1);  						}  						else  						{  							pckt.Write((uint)0);  						}  						pckt.Write((uint)qt.Flags);  						pckt.Write((uint)qt.SuggestedPlayers);  						if (qt.RewMoney < 0)  						{  							pckt.Write((uint)-qt.RewMoney);  						}  						else  						{  							pckt.Write((uint)0);  						}  						pckt.Write(qt.CollectableItems.Length);  						for (uint i = 0; i < qt.CollectableItems.Length; i++)  						{  							pckt.Write((uint)qt.CollectableItems[i].ItemId);  							pckt.Write(qt.CollectableItems[i].Amount);  							var template = qt.CollectableItems[i].Template;  							if (template != null)  							{  								pckt.Write(template.DisplayId);  							}  							else  							{  								pckt.Write((uint)0);  							}  						}  						pckt.Write((uint)2); // unknown' probably IsActive  						pckt.Write(4);			// if can advance: 4  						pckt.Write((uint)8); //always eight  						pckt.Write((uint)10); // always ten    						chr.Client.Send(pckt);  					}  				}  			}
Magic Number,WCell.RealmServer.Handlers,QuestHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QuestHandler.cs,SendQuestList,The following statement contains a magic number: using (var pkt = new RealmPacketOut(new PacketId(RealmServerOpCode.SMSG_QUESTGIVER_QUEST_LIST)))  			{  				pkt.Write(qHolder.EntityId);  				if (qHolder.QuestHolderInfo != null)  				{  					pkt.Write("Stay a while and listen..."); // TODO need to change to dynamic text' character-dependant  					pkt.Write((uint)0); // player emote  					pkt.Write((uint)1); // npc emote    					var amount = Math.Min(QuestConstants.MaxQuestsPerQuestGiver' list.Count);  					pkt.Write((byte)amount);    					foreach (var qt in list)  					{  						pkt.Write(qt.Id);  						var quest = chr.QuestLog.GetActiveQuest(qt.Id);  						if (quest != null)  						{  							if (quest.CompleteStatus == QuestCompleteStatus.Completed)  							{  								//status = (uint)qt.GetEndStatus(qHolder.QuestHolderInfo' chr);  								pkt.Write(4);  							}  							else  							{  								pkt.Write((uint)QuestStatus.NotCompleted);  							}  						}  						else  						{  							var status = (uint)qt.GetAvailability(chr);  							pkt.Write(status);  						}  						pkt.WriteUInt(qt.Level);  						pkt.WriteUInt((uint)qt.Flags);  						pkt.Write((byte)0); // 3.3.3 question/exclamation mark  						pkt.WriteCString(qt.DefaultTitle);  					}  					chr.Client.Send(pkt);  				}  			}
Magic Number,WCell.RealmServer.Handlers,QuestHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\QuestHandler.cs,SendQuestForceRemoved,The following statement contains a magic number: using (var pkt = new RealmPacketOut(RealmServerOpCode.SMSG_QUEST_FORCE_REMOVE' 4))  			{  				pkt.Write((uint)quest.Id);  				client.Send(pkt);  			}
Magic Number,WCell.RealmServer.Handlers,TalentHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TalentHandler.cs,SendClearQuery,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_TALENT_WIPE_CONFIRM' 12))  			{  				packet.Write(talents.Owner.EntityId);  				packet.Write(talents.GetResetPrice());    				talents.OwnerCharacter.Send(packet);  			}
Magic Number,WCell.RealmServer.Handlers,TalentHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TalentHandler.cs,WritePlayerTalentList,The following statement contains a magic number: for (var i = 0; i < talentGroupCount; i++)  			{  				packet.Write((byte)talentList.Count);  				foreach (var pair in talentList)  				{  					packet.Write((int)pair.Key);  					packet.Write((byte)pair.Value.Rank);  				}    				if (glyphs != null)  				{  					// TODO: Glyphs  					//packet.Write((byte) 0);  					packet.Write((byte) 6);//max_glyphs per spec  					for (int k = 0; k < 6; k++)  					{  						packet.Write((short)glyphs[k]);  					}  					//packet.Write((byte)glyphList.Length);  					//foreach (var record in glyphList)  					//{  					//    packet.Write(record.GlyphPropertiesId);  					//}  				}  				else  				{  					packet.Write((byte)0);  				}  			}
Magic Number,WCell.RealmServer.Handlers,TalentHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\TalentHandler.cs,WritePlayerTalentList,The following statement contains a magic number: for (var i = 0; i < talentGroupCount; i++)  			{  				packet.Write((byte)talentList.Count);  				foreach (var pair in talentList)  				{  					packet.Write((int)pair.Key);  					packet.Write((byte)pair.Value.Rank);  				}    				if (glyphs != null)  				{  					// TODO: Glyphs  					//packet.Write((byte) 0);  					packet.Write((byte) 6);//max_glyphs per spec  					for (int k = 0; k < 6; k++)  					{  						packet.Write((short)glyphs[k]);  					}  					//packet.Write((byte)glyphList.Length);  					//foreach (var record in glyphList)  					//{  					//    packet.Write(record.GlyphPropertiesId);  					//}  				}  				else  				{  					packet.Write((byte)0);  				}  			}
Magic Number,WCell.RealmServer.Handlers,VoiceChatHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\VoiceChatHandler.cs,SendSystemStatus,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_FEATURE_SYSTEM_STATUS))              {                  packet.WriteByte(2); // what is this                  packet.WriteByte((byte)status);                    chr.Client.Send(packet);              }
Magic Number,WCell.RealmServer.Instances,GlobalInstanceTimer,C:\repos\WCell_WCell\Services\WCell.RealmServer\Instances\GlobalInstanceTimer.cs,LoadTimers,The following statement contains a magic number: var timers = new GlobalInstanceTimer[(int)MapId.End + 1000];
Magic Number,WCell.RealmServer.Instances,InstanceBinding,C:\repos\WCell_WCell\Services\WCell.RealmServer\Instances\InstanceBinding.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				var result = _difficultyIndex;  				result = (result * 397) ^ BindTime.GetHashCode();  				result = (result * 397) ^ MapId.GetHashCode();  				result = (result * 397) ^ InstanceId.GetHashCode();  				return result;  			}
Magic Number,WCell.RealmServer.Instances,InstanceBinding,C:\repos\WCell_WCell\Services\WCell.RealmServer\Instances\InstanceBinding.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				var result = _difficultyIndex;  				result = (result * 397) ^ BindTime.GetHashCode();  				result = (result * 397) ^ MapId.GetHashCode();  				result = (result * 397) ^ InstanceId.GetHashCode();  				return result;  			}
Magic Number,WCell.RealmServer.Instances,InstanceBinding,C:\repos\WCell_WCell\Services\WCell.RealmServer\Instances\InstanceBinding.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				var result = _difficultyIndex;  				result = (result * 397) ^ BindTime.GetHashCode();  				result = (result * 397) ^ MapId.GetHashCode();  				result = (result * 397) ^ InstanceId.GetHashCode();  				return result;  			}
Magic Number,WCell.RealmServer.Spells.Auras,PlayerAuraCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\PlayerAuraCollection.cs,GetModifiedInt,The following statement contains a magic number: return (((value + flatMod) * (100 + percentMod)) + 50) / 100;
Magic Number,WCell.RealmServer.Spells.Auras,PlayerAuraCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\PlayerAuraCollection.cs,GetModifiedInt,The following statement contains a magic number: return (((value + flatMod) * (100 + percentMod)) + 50) / 100;
Magic Number,WCell.RealmServer.Spells.Auras,PlayerAuraCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\PlayerAuraCollection.cs,GetModifiedInt,The following statement contains a magic number: return (((value + flatMod) * (100 + percentMod)) + 50) / 100;
Magic Number,WCell.RealmServer.Spells.Auras,PlayerAuraCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\PlayerAuraCollection.cs,GetModifiedIntNegative,The following statement contains a magic number: return (((value - flatMod) * (100 - percentMod)) + 50) / 100;
Magic Number,WCell.RealmServer.Spells.Auras,PlayerAuraCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\PlayerAuraCollection.cs,GetModifiedIntNegative,The following statement contains a magic number: return (((value - flatMod) * (100 - percentMod)) + 50) / 100;
Magic Number,WCell.RealmServer.Spells.Auras,PlayerAuraCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\PlayerAuraCollection.cs,GetModifiedIntNegative,The following statement contains a magic number: return (((value - flatMod) * (100 - percentMod)) + 50) / 100;
Magic Number,WCell.RealmServer.Spells.Auras,AuraHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AuraHandler.cs,SendModifierUpdate,The following statement contains a magic number: foreach (var bit in effect.AffectMaskBitSet)  			{  				// calculate new amount for current group by looking through all enhancers for the player  				var amount = 0;  				var groupNum = bit >> 5;					// detemine group (0'1 or 2)  				var groupBit = bit - (groupNum << 5);		// determine position within group (0 to 31)  				for (var i = 0; i < enhancers.Count; i++)  				{  					var enhancerEffect = enhancers[i];  					if ((SpellModifierType)enhancerEffect.SpellEffect.MiscValue == type &&  						enhancerEffect.SpellEffect.Spell.SpellClassSet == effect.Spell.SpellClassSet &&  						(enhancerEffect.SpellEffect.AffectMask[groupNum] & (1 << (int)groupBit)) != 0)  					{  						amount += enhancerEffect.SpellEffect.ValueMin;  					}  				}  				SpellHandler.SendSpellModifier(chr' (byte)bit' type' amount' isPercent);  			}
Magic Number,WCell.RealmServer.Spells.Auras,AuraHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AuraHandler.cs,SendModifierUpdate,The following statement contains a magic number: foreach (var bit in effect.AffectMaskBitSet)  			{  				// calculate new amount for current group by looking through all enhancers for the player  				var amount = 0;  				var groupNum = bit >> 5;					// detemine group (0'1 or 2)  				var groupBit = bit - (groupNum << 5);		// determine position within group (0 to 31)  				for (var i = 0; i < enhancers.Count; i++)  				{  					var enhancerEffect = enhancers[i];  					if ((SpellModifierType)enhancerEffect.SpellEffect.MiscValue == type &&  						enhancerEffect.SpellEffect.Spell.SpellClassSet == effect.Spell.SpellClassSet &&  						(enhancerEffect.SpellEffect.AffectMask[groupNum] & (1 << (int)groupBit)) != 0)  					{  						amount += enhancerEffect.SpellEffect.ValueMin;  					}  				}  				SpellHandler.SendSpellModifier(chr' (byte)bit' type' amount' isPercent);  			}
Magic Number,WCell.RealmServer.Spells.Auras,AuraHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\AuraHandler.cs,GetNextAuraUID,The following statement contains a magic number: if (lastAuraUid == 0)  			{  				lastAuraUid = (uint)SpellLineId.End + 10000;  			}
Magic Number,WCell.RealmServer.Spells.Auras,ModStatPercentHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Mod\ModStatPercentHandler.cs,GetModifiedValue,The following statement contains a magic number: return (value * EffectValue + 50) / 100;
Magic Number,WCell.RealmServer.Spells.Auras,ModStatPercentHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Mod\ModStatPercentHandler.cs,GetModifiedValue,The following statement contains a magic number: return (value * EffectValue + 50) / 100;
Magic Number,WCell.RealmServer.Spells.Auras,AreaAura,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\AreaAura.cs,Start,The following statement contains a magic number: if (m_radius == 0)  			{  				m_radius = 5;  			}
Magic Number,WCell.RealmServer.Spells.Auras,Aura,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Aura.cs,DetermineFlags,The following statement contains a magic number: for (var i = Math.Min(m_handlers.Count - 1' 2); i >= 0; i--)  			{  				var handler = m_handlers[i];  				var index = (int)handler.SpellEffect.EffectIndex;  				if (index >= 0)  				{  					m_auraFlags |= (AuraFlags)(1 << index);  				}  			}
Magic Number,WCell.RealmServer.Spells.Auras,AuraCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\AuraCollection.cs,GetFreePositiveIndex,The following statement contains a magic number: for (byte i = 0; i < m_visibleAuras.Length - 16; i++)  			{  				if (m_visibleAuras[i] == null)  					return i;  			}
Magic Number,WCell.RealmServer.Spells.Auras,AuraCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\AuraCollection.cs,GetFreeNegativeIndex,The following statement contains a magic number: for (byte i = 48; i < m_visibleAuras.Length; i++)  			{  				if (m_visibleAuras[i] == null)  					return i;  			}
Magic Number,WCell.RealmServer.Spells.Auras,AuraCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\AuraCollection.cs,SaveAurasNow,The following statement contains a magic number: foreach (var aura in m_visibleAuras)  			{  				if (aura != null && aura.CanBeSaved && (!aura.HasTimeout || aura.TimeLeft > 5000))  				{  					aura.SaveNow();  				}  			}
Magic Number,WCell.RealmServer.Spells.Auras.Mod,ModArmorByPercentOfIntellectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Mod\ModArmorByPercentOfIntellectHandler.cs,Apply,The following statement contains a magic number: value = (Owner.Intellect * 100 + 50) / EffectValue;
Magic Number,WCell.RealmServer.Spells.Auras.Mod,ModArmorByPercentOfIntellectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Mod\ModArmorByPercentOfIntellectHandler.cs,Apply,The following statement contains a magic number: value = (Owner.Intellect * 100 + 50) / EffectValue;
Magic Number,WCell.RealmServer.Spells.Auras.Mod,ModSpellPowerByAPPctHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Mod\ModSpellPowerByAPPctHandler.cs,Apply,The following statement contains a magic number: for (var i = 0; i < m_spellEffect.MiscBitSet.Length; i++)  			{  				var school = m_spellEffect.MiscBitSet[i];  				var sp = owner.GetDamageDoneMod((DamageSchool) school);  				var val = (sp*EffectValue + 50)/100;  				values[i] = val;  				owner.AddDamageDoneModSilently((DamageSchool) school' val);  			}
Magic Number,WCell.RealmServer.Spells.Auras.Mod,ModSpellPowerByAPPctHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Mod\ModSpellPowerByAPPctHandler.cs,Apply,The following statement contains a magic number: for (var i = 0; i < m_spellEffect.MiscBitSet.Length; i++)  			{  				var school = m_spellEffect.MiscBitSet[i];  				var sp = owner.GetDamageDoneMod((DamageSchool) school);  				var val = (sp*EffectValue + 50)/100;  				values[i] = val;  				owner.AddDamageDoneModSilently((DamageSchool) school' val);  			}
Magic Number,WCell.RealmServer.Spells.Auras.Mod,ModSpellDamageByPercentOfStatHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Mod\ModSpellDamageByPercentOfStatHandler.cs,Apply,The following statement contains a magic number: value = (Owner.GetTotalStatValue(stat)*EffectValue + 50)/100;
Magic Number,WCell.RealmServer.Spells.Auras.Mod,ModSpellDamageByPercentOfStatHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Mod\ModSpellDamageByPercentOfStatHandler.cs,Apply,The following statement contains a magic number: value = (Owner.GetTotalStatValue(stat)*EffectValue + 50)/100;
Magic Number,WCell.RealmServer.Spells.Auras.Mod,ModHealingByPercentOfStatHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Mod\ModSpellDamageByPercentOfStatHandler.cs,Apply,The following statement contains a magic number: if (m_aura.Auras.Owner is Character)  			{  				var stat = (StatType)SpellEffect.MiscValueB;  				value = (Owner.GetTotalStatValue(stat) * EffectValue + 50) / 100;    				// schools are ignored for this effect  				((Character)m_aura.Auras.Owner).HealingDoneMod += value;  			}
Magic Number,WCell.RealmServer.Spells.Auras.Mod,ModHealingByPercentOfStatHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Mod\ModSpellDamageByPercentOfStatHandler.cs,Apply,The following statement contains a magic number: if (m_aura.Auras.Owner is Character)  			{  				var stat = (StatType)SpellEffect.MiscValueB;  				value = (Owner.GetTotalStatValue(stat) * EffectValue + 50) / 100;    				// schools are ignored for this effect  				((Character)m_aura.Auras.Owner).HealingDoneMod += value;  			}
Magic Number,WCell.RealmServer.Spells.Auras.Misc,CriticalBlockPctHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Mod\CriticalBlockPctHandler.cs,OnDefend,The following statement contains a magic number: if (action.Blocked > 0 && EffectValue > Utility.Random(1' 101))  			{  				// crit block  				action.Blocked *= 2;  			}
Magic Number,WCell.RealmServer.Spells.Auras.Misc,CriticalBlockPctHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Mod\CriticalBlockPctHandler.cs,OnDefend,The following statement contains a magic number: if (action.Blocked > 0 && EffectValue > Utility.Random(1' 101))  			{  				// crit block  				action.Blocked *= 2;  			}
Magic Number,WCell.RealmServer.Spells.Effects,Inebriate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\Inebriate.cs,Apply,The following statement contains a magic number: if(state > 100)                  target.SpellCast.TriggerSelf(SpellId.DrunkenVomit);
Magic Number,WCell.RealmServer.Spells.Effects,Inebriate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\Inebriate.cs,Apply,The following statement contains a magic number: var delay = 2173 * (byte)Effect.BasePoints;
Magic Number,WCell.RealmServer.Spells.Effects,SummonAllTotemsHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\SummonAllTotems.cs,Apply,The following statement contains a magic number: var buttonId = Effect.MiscValue + 132;
Magic Number,WCell.RealmServer.Spells.Effects,ChargeEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\Charge.cs,Apply,The following statement contains a magic number: var distance = m_cast.CasterObject.Position.GetDistance(target.Position) - ((Unit)target).BoundingRadius - 2;
Magic Number,WCell.RealmServer.Spells.Effects,ChargeEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\Charge.cs,Apply,The following statement contains a magic number: MovementHandler.SendMoveToPacket(m_cast.CasterUnit' ref direction' m_cast.CasterUnit.Orientation' 3' MonsterMoveFlags.Walk);
Magic Number,WCell.RealmServer.Spells.Effects,DestroyAllTotemsHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\DestroyAllTotems.cs,Apply,The following statement contains a magic number: if (chr != null)  			{  				if (chr.Totems != null)  				{  					foreach (var totem in chr.Totems)  					{  						if (totem == null)  						{  							continue;  						}  						var spell = SpellHandler.Get(totem.CreationSpellId);  						if (spell != null)  						{   							spellCost += ((chr.BasePower * spell.PowerCostPercentage)/100) / 4;  							totem.Delete();  						}  					}  					chr.Energize(spellCost' chr' Effect);  				}  			}
Magic Number,WCell.RealmServer.Spells.Effects,DestroyAllTotemsHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\DestroyAllTotems.cs,Apply,The following statement contains a magic number: if (chr != null)  			{  				if (chr.Totems != null)  				{  					foreach (var totem in chr.Totems)  					{  						if (totem == null)  						{  							continue;  						}  						var spell = SpellHandler.Get(totem.CreationSpellId);  						if (spell != null)  						{   							spellCost += ((chr.BasePower * spell.PowerCostPercentage)/100) / 4;  							totem.Delete();  						}  					}  					chr.Energize(spellCost' chr' Effect);  				}  			}
Magic Number,WCell.RealmServer.Spells.Effects,DistractEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\DistractEffectHandler.cs,Apply,The following statement contains a magic number: if (target is NPC)  			{  				var npc = (NPC)target;  				var millis = 1000*CalcEffectValue();    				npc.Face(m_cast.TargetLoc);  				npc.Movement.Stop();  			}
Magic Number,WCell.RealmServer.Spells.Effects,FeedPetEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\FeedPet.cs,Initialize,The following statement contains a magic number: if (diff > 35)  			{  				return SpellFailedReason.FoodLowlevel;  			}
Magic Number,WCell.RealmServer.Spells.Effects,FeedPetEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\FeedPet.cs,Initialize,The following statement contains a magic number: if (diff < -15)  			{  				return SpellFailedReason.Highlevel;  			}
Magic Number,WCell.RealmServer.Spells.Effects,ApplyAuraEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\Auras\ApplyAura.cs,Initialize,The following statement contains a magic number: m_auraEffectHandlers = new List<SingleAuraApplicationInfo>(3);
Magic Number,WCell.RealmServer.Spells.Effects,DispelEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\Dispel.cs,Apply,The following statement contains a magic number: foreach (var aura in ((Unit)target).Auras)  			{  				if (aura.Spell.DispelType == dispelType)  				{  					// Check dispel resistance  					var auraCaster = aura.CasterUnit;  					if (caster != null && auraCaster != null && caster.MayAttack(auraCaster))  					{  						// trying to remove buff from enemy or debuff from friend    						var dispelResistance = auraCaster.Auras.GetModifiedInt(SpellModifierType.DispelResistance' aura.Spell' 1);	// base chance of 1%    						// "Reduces the chance [auras] will be dispelled by x%"  						if (dispelResistance > Utility.Random(100))  						{  							if (--max == 0)		// one less to dispel  							{  								break;  							}  							continue;  						}  					}  					aura.Remove();  					if (--max == 0)  					{  						break;  					}  				}  			}
Magic Number,WCell.RealmServer.Spells.Effects,EnergizePctEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\Energize.cs,Apply,The following statement contains a magic number: if (type == ((Unit)target).PowerType)  			{  				var val = (m_cast.CasterUnit.MaxPower * CalcEffectValue() + 50) / 100;  				((Unit)target).Energize(val' m_cast.CasterUnit' Effect);  			}
Magic Number,WCell.RealmServer.Spells.Effects,EnergizePctEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\Energize.cs,Apply,The following statement contains a magic number: if (type == ((Unit)target).PowerType)  			{  				var val = (m_cast.CasterUnit.MaxPower * CalcEffectValue() + 50) / 100;  				((Unit)target).Energize(val' m_cast.CasterUnit' Effect);  			}
Magic Number,WCell.RealmServer.Spells.Effects,EnvironmentalDamageEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\EnvironmentalDamage.cs,Apply,The following statement contains a magic number: if (dmg < 100)  			{  				// percentage  				dmg = Math.Min(1' (dmg * target.MaxHealth) / 100);  			}
Magic Number,WCell.RealmServer.Spells.Effects,EnvironmentalDamageEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\EnvironmentalDamage.cs,Apply,The following statement contains a magic number: if (dmg < 100)  			{  				// percentage  				dmg = Math.Min(1' (dmg * target.MaxHealth) / 100);  			}
Magic Number,WCell.RealmServer.Spells.Effects,OpenLockEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\OpenLock.cs,Gain,The following statement contains a magic number: return (Utility.Random() % 1000) < chance ? SkillAbility.GainAmount : 0;
Magic Number,WCell.RealmServer.Spells.Effects,OpenLockEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\OpenLock.cs,CheckSuccess,The following statement contains a magic number: return (Utility.Random() % 1000) < chance;
Magic Number,WCell.RealmServer.Spells.Effects,PowerDrainEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\PowerDrain.cs,Apply,The following statement contains a magic number: if (type == PowerType.Happiness)  			{  				// for some reason' in case of Happiness' we divide by 1000 apparently  				value /= 1000;  			}
Magic Number,WCell.RealmServer.Spells.Effects,ResurrectEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\Resurrect.cs,Apply,The following statement contains a magic number: ((Unit) target).Health = ((Unit) target).MaxHealth * CalcEffectValue() / 100;
Magic Number,WCell.RealmServer.Spells.Effects,SchoolDamagePercentEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\SchoolDamage.cs,Apply,The following statement contains a magic number: var value = (CalcDamageValue() * ((Unit)target).MaxHealth + 50) / 100;
Magic Number,WCell.RealmServer.Spells.Effects,SchoolDamagePercentEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\SchoolDamage.cs,Apply,The following statement contains a magic number: var value = (CalcDamageValue() * ((Unit)target).MaxHealth + 50) / 100;
Magic Number,WCell.RealmServer.Spells.Effects,SchoolDamageByAPPctEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\SchoolDamage.cs,Apply,The following statement contains a magic number: var value = ((m_cast.CasterUnit.TotalMeleeAP * CalcDamageValue()) + 50) / 100;
Magic Number,WCell.RealmServer.Spells.Effects,SchoolDamageByAPPctEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\SchoolDamage.cs,Apply,The following statement contains a magic number: var value = ((m_cast.CasterUnit.TotalMeleeAP * CalcDamageValue()) + 50) / 100;
Magic Number,WCell.RealmServer.Spells.Effects,SelfResurrectEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\SelfResurrect.cs,Apply,The following statement contains a magic number: Cast.CasterUnit.Health = (int)(Cast.CasterUnit.MaxHealth * CalcEffectValue() / 100);
Magic Number,WCell.RealmServer.Spells.Effects,SkinningEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\Skinning.cs,InitializeTarget,The following statement contains a magic number: if (!Cast.CasterChar.Skills.CheckSkill(SkillHandler.GetSkill((SkinningType)Effect.MiscValue)' unit.Level * 5))  			{  				return SpellFailedReason.TargetUnskinnable;  			}
Magic Number,WCell.RealmServer.Spells.Effects,StealBeneficialBuffEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\StealBeneficialBuff.cs,InitializeTarget,The following statement contains a magic number: foreach (var aura in ((Unit)target).Auras)  			{  				// find a stealable positive auras  				if (aura.IsBeneficial &&   					aura.CanBeStolen &&   					aura.TimeLeft > 100 &&  					auras.GetAura(caster' aura.Id' aura.Spell) == null)  				{  					toSteal = aura;  					return SpellFailedReason.Ok;  				}  			}
Magic Number,WCell.RealmServer.Spells.Effects,StealBeneficialBuffEffectHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Effects\StealBeneficialBuff.cs,Apply,The following statement contains a magic number: if (toSteal.IsAdded)  			{  				// remove from owner  				toSteal.Remove(true);    				// apply to caster    				// maximum 2 minutes or the spell's duration  				const int maxTime = 120000;  				if (toSteal.TimeLeft > maxTime)  				{  					toSteal.TimeLeft = maxTime;  				}    				cast.CasterUnit.Auras.AddAura(toSteal);  			}
Magic Number,WCell.RealmServer.Spells,SpellHitChecker,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellHitChecker.cs,CalculateBaseHitChanceAgainstTargetInPercentage,The following statement contains a magic number: if (levelDifference < 3)  			{  				int baseHitChance = SpellConstants.HitChanceForEqualLevel - levelDifference;  				return baseHitChance > SpellConstants.MaxHitChance ? SpellConstants.MaxHitChance : baseHitChance;  			}
Magic Number,WCell.RealmServer.Spells,SpellHitChecker,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellHitChecker.cs,CalculateBaseHitChanceAgainstTargetInPercentage,The following statement contains a magic number: return 94 - (levelDifference - 2) * unitFactor;
Magic Number,WCell.RealmServer.Spells,SpellHitChecker,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellHitChecker.cs,CalculateBaseHitChanceAgainstTargetInPercentage,The following statement contains a magic number: return 94 - (levelDifference - 2) * unitFactor;
Magic Number,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,AddCasterProcSpells,The following statement contains a magic number: var list = new List<Spell>(spellSetIds.Length * 6);
Magic Number,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,AddTargetProcSpells,The following statement contains a magic number: var list = new List<Spell>(spellSetIds.Length * 6);
Magic Number,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,CreateAuraEffectHandlers,The following statement contains a magic number: try  			{  				List<AuraEffectHandler> effectHandlers = null;  				var failReason = SpellFailedReason.Ok;    				for (var i = 0; i < effects.Length; i++)  				{  					var effect = effects[i];  					if (effect.HarmType == HarmType.Beneficial || !beneficial)  					{  						var effectHandler = effect.CreateAuraEffectHandler(caster' target' ref failReason);  						if (failReason != SpellFailedReason.Ok)  						{  							return null;  						}    						if (effectHandlers == null)  						{  							effectHandlers = new List<AuraEffectHandler>(3);  						}  						effectHandlers.Add(effectHandler);  					}  				}  				return effectHandlers;  			}  			catch (Exception e)  			{  				LogUtil.ErrorException(e' "Failed to create AuraEffectHandlers for: " + effects.GetWhere(effect => effect != null).Spell);  				return null;  			}
Magic Number,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,Init2,The following statement contains a magic number: if (IsChanneled)  			{  				if (Durations.Min == 0)  				{  					Durations.Min = Durations.Max = 1000;  				}    				foreach (var effect in Effects)  				{  					if (effect.IsPeriodic)  					{  						ChannelAmplitude = effect.Amplitude;  						break;  					}  				}  			}
Magic Number,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,Init2,The following statement contains a magic number: ForeachEffect(effect =>  							{  								for (var i = 0; i < 3; i++)  								{  									AllAffectingMasks[i] |= effect.AffectMask[i];  								}  							});
Magic Number,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,Init2,The following statement contains a magic number: if (Range.MaxDist == 0)  			{  				Range.MaxDist = 5;  			}
Magic Number,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,CalcBasePowerCost,The following statement contains a magic number: if (PowerCostPercentage > 0)  			{  				cost += (PowerCostPercentage *  					((PowerType == PowerType.Health ? caster.BaseHealth : caster.BasePower))) / 100;  			}
Magic Number,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,GetDuration,The following statement contains a magic number: if (Durations.Max > Durations.Min && IsFinishingMove && caster.UnitMaster != null)  			{  				// For some finishing moves' Duration depends on Combopoints  				millis += caster.UnitMaster.ComboPoints * ((Durations.Max - Durations.Min) / 5);  			}
Magic Number,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,Dump,The following statement contains a magic number: if (SpellClassMask[0] != 0 || SpellClassMask[1] != 0 || SpellClassMask[2] != 0)  			{  				writer.WriteLine(indent + "SpellClassMask: {0}{1}{2}"' SpellClassMask[0].ToString("X8")' SpellClassMask[1].ToString("X8")' SpellClassMask[2].ToString("X8"));  			}
Magic Number,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,Dump,The following statement contains a magic number: if (SpellClassMask[0] != 0 || SpellClassMask[1] != 0 || SpellClassMask[2] != 0)  			{  				writer.WriteLine(indent + "SpellClassMask: {0}{1}{2}"' SpellClassMask[0].ToString("X8")' SpellClassMask[1].ToString("X8")' SpellClassMask[2].ToString("X8"));  			}
Magic Number,WCell.RealmServer.Spells,Spell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\Spell.Events.cs,Dump,The following statement contains a magic number: if (RuneCostEntry != null)  			{  				writer.WriteLine(indent + "RuneCostId: " + RuneCostEntry.Id);  				var ind = indent + "\t";  				var rcosts = new List<String>(3);  				if (RuneCostEntry.CostPerType[(int)RuneType.Blood] != 0)  					rcosts.Add(string.Format("Blood: {0}"' RuneCostEntry.CostPerType[(int)RuneType.Blood]));  				if (RuneCostEntry.CostPerType[(int)RuneType.Unholy] != 0)  					rcosts.Add(string.Format("Unholy: {0}"' RuneCostEntry.CostPerType[(int)RuneType.Unholy]));  				if (RuneCostEntry.CostPerType[(int)RuneType.Frost] != 0)  					rcosts.Add(string.Format("Frost: {0}"' RuneCostEntry.CostPerType[(int)RuneType.Frost]));  				writer.WriteLine(ind + "Runes - {0}"' rcosts.Count == 0 ? "<None>" : rcosts.ToString("' "));  				writer.WriteLine(ind + "RunicPowerGain: {0}"' RuneCostEntry.RunicPowerGain);  			}
Magic Number,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,PrepAuras,The following statement contains a magic number: m_auraApplicationInfos = new List<AuraApplicationInfo>(4);
Magic Number,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,CalculateImpactDelay,The following statement contains a magic number: return (int)( (distance / Spell.ProjectileSpeed) * 1000);
Magic Number,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,ReadUnknownDataFromPacket,The following statement contains a magic number: if ((unkFlags & 2) != 0)  			{  				packet.ReadFloat();  				packet.ReadFloat();  				packet.ReadByte();  				// here the client appends a MSG_MOVE_STOP movement packet  			}
Magic Number,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,Pushback,The following statement contains a magic number: if (Spell.InterruptFlags.HasFlag(InterruptFlags.OnTakeDamage))  			{  				Cancel();  			}  			else if (m_pushbacks < 2 && RemainingCastTime > 0)  			{  				if (IsChanneling)  				{  					// reduce 25% channeling time  					Channel.Pushback(GetPushBackTime(Channel.Duration / ChannelPushbackFraction));  				}  				else  				{  					// add 0.5 seconds  					RemainingCastTime += GetPushBackTime(PushbackDelay);  				}  				m_pushbacks++;  			}
Magic Number,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,GetPushBackTime,The following statement contains a magic number: if (CasterObject is Unit)  			{  				var pct = ((Unit)CasterObject).GetSpellInterruptProt(Spell);  				if (pct >= 100)  				{  					return 0;  				}    				time -= (pct * time) / 100; // reduce by protection %    				// pushback reduction is a positive value' but we want it to be reduced' so we need to use GetModifiedIntNegative  				time = ((Unit)CasterObject).Auras.GetModifiedIntNegative(SpellModifierType.PushbackReduction' Spell' time);  			}
Magic Number,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,GetPushBackTime,The following statement contains a magic number: if (CasterObject is Unit)  			{  				var pct = ((Unit)CasterObject).GetSpellInterruptProt(Spell);  				if (pct >= 100)  				{  					return 0;  				}    				time -= (pct * time) / 100; // reduce by protection %    				// pushback reduction is a positive value' but we want it to be reduced' so we need to use GetModifiedIntNegative  				time = ((Unit)CasterObject).Auras.GetModifiedIntNegative(SpellModifierType.PushbackReduction' Spell' time);  			}
Magic Number,WCell.RealmServer.Spells,RuneSet,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\RuneSet.cs,UpdateCooldown,The following statement contains a magic number: for (var i = 0u; i < SpellConstants.MaxRuneCount; i++)  			{  				var cd = cds[i] - (dtMillis * GetCooldown(ActiveRunes[i]) + 500) / 1000;  				if (cd > 0)  				{  					cds[i] = cd;  				}  				else  				{  					//UnsetCooldown(i);  					cds[i] = 0;  				}  			}
Magic Number,WCell.RealmServer.Spells,RuneSet,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\RuneSet.cs,UpdateCooldown,The following statement contains a magic number: for (var i = 0u; i < SpellConstants.MaxRuneCount; i++)  			{  				var cd = cds[i] - (dtMillis * GetCooldown(ActiveRunes[i]) + 500) / 1000;  				if (cd > 0)  				{  					cds[i] = cd;  				}  				else  				{  					//UnsetCooldown(i);  					cds[i] = 0;  				}  			}
Magic Number,WCell.RealmServer.Spells,RuneSet,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\RuneSet.cs,ModAllCooldownsPercent,The following statement contains a magic number: for (RuneType i = 0; i < RuneType.End; i++)  			{  				var val = GetCooldown(i);  				var newVal = val + (val*percentDelta)/100;  				SetCooldown(i' newVal);  				deltas[(int) i] = newVal - val;  			}
Magic Number,WCell.RealmServer.Spells,SpellChannel,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Spells\SpellChannel.cs,Tick,The following statement contains a magic number: if (spell.PowerPerSecond > 0)  			{  				var cost = spell.PowerPerSecond;  				if (m_amplitude != 1000 && m_amplitude != 0)  				{  					cost = (int)(cost * (m_amplitude / 1000f));  				}  				var failReason = cast.ConsumePower(cost);  				if (failReason != SpellFailedReason.Ok)  				{  					m_cast.Cancel(failReason);  					return;  				}  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendSpellsAndCooldowns,The following statement contains a magic number: var len = 5 + (4 * spells.Count);
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendSpellsAndCooldowns,The following statement contains a magic number: var len = 5 + (4 * spells.Count);
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendSpellsAndCooldowns,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_INITIAL_SPELLS' len))  			{  				packet.Write((byte) 0);  				packet.Write((ushort) spells.Count);    				foreach (var spell in spells.AllSpells)  				{  					packet.Write(spell.Id);  					//packet.Write((ushort)0xEEEE);  					packet.Write((ushort) 0);  				}    				var countPos = packet.Position;  				ushort cooldownCount = 0;  				packet.Position = countPos + 2;    				// cooldowns  				var now = DateTime.Now.Ticks;  				foreach (var idCd in spells.IdCooldowns)  				{  					var delay = (int)(idCd.Until.Ticks - now);  					if (delay > 10)  					{  						cooldownCount++;  						packet.Write(idCd.SpellId);  						packet.Write((ushort) idCd.ItemId);  						packet.Write((ushort) 0);  						packet.Write(Utility.ToMilliSecondsInt(delay));  						packet.Write(0);  					}  				}  				  				foreach (var catCd in spells.CategoryCooldowns)  				{  					var delay = (int)(catCd.Until.Ticks - now);  					if (delay > 10)  					{  						cooldownCount++;  						packet.Write(catCd.SpellId);  						packet.Write((ushort) catCd.ItemId);  						packet.Write((ushort) catCd.CategoryId);  						packet.Write(0);  						packet.Write(Utility.ToMilliSecondsInt(delay));  					}  				}    				packet.Position = countPos;  				packet.Write(cooldownCount);    				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendSpellsAndCooldowns,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_INITIAL_SPELLS' len))  			{  				packet.Write((byte) 0);  				packet.Write((ushort) spells.Count);    				foreach (var spell in spells.AllSpells)  				{  					packet.Write(spell.Id);  					//packet.Write((ushort)0xEEEE);  					packet.Write((ushort) 0);  				}    				var countPos = packet.Position;  				ushort cooldownCount = 0;  				packet.Position = countPos + 2;    				// cooldowns  				var now = DateTime.Now.Ticks;  				foreach (var idCd in spells.IdCooldowns)  				{  					var delay = (int)(idCd.Until.Ticks - now);  					if (delay > 10)  					{  						cooldownCount++;  						packet.Write(idCd.SpellId);  						packet.Write((ushort) idCd.ItemId);  						packet.Write((ushort) 0);  						packet.Write(Utility.ToMilliSecondsInt(delay));  						packet.Write(0);  					}  				}  				  				foreach (var catCd in spells.CategoryCooldowns)  				{  					var delay = (int)(catCd.Until.Ticks - now);  					if (delay > 10)  					{  						cooldownCount++;  						packet.Write(catCd.SpellId);  						packet.Write((ushort) catCd.ItemId);  						packet.Write((ushort) catCd.CategoryId);  						packet.Write(0);  						packet.Write(Utility.ToMilliSecondsInt(delay));  					}  				}    				packet.Position = countPos;  				packet.Write(cooldownCount);    				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendSpellsAndCooldowns,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_INITIAL_SPELLS' len))  			{  				packet.Write((byte) 0);  				packet.Write((ushort) spells.Count);    				foreach (var spell in spells.AllSpells)  				{  					packet.Write(spell.Id);  					//packet.Write((ushort)0xEEEE);  					packet.Write((ushort) 0);  				}    				var countPos = packet.Position;  				ushort cooldownCount = 0;  				packet.Position = countPos + 2;    				// cooldowns  				var now = DateTime.Now.Ticks;  				foreach (var idCd in spells.IdCooldowns)  				{  					var delay = (int)(idCd.Until.Ticks - now);  					if (delay > 10)  					{  						cooldownCount++;  						packet.Write(idCd.SpellId);  						packet.Write((ushort) idCd.ItemId);  						packet.Write((ushort) 0);  						packet.Write(Utility.ToMilliSecondsInt(delay));  						packet.Write(0);  					}  				}  				  				foreach (var catCd in spells.CategoryCooldowns)  				{  					var delay = (int)(catCd.Until.Ticks - now);  					if (delay > 10)  					{  						cooldownCount++;  						packet.Write(catCd.SpellId);  						packet.Write((ushort) catCd.ItemId);  						packet.Write((ushort) catCd.CategoryId);  						packet.Write(0);  						packet.Write(Utility.ToMilliSecondsInt(delay));  					}  				}    				packet.Position = countPos;  				packet.Write(cooldownCount);    				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendLearnedSpell,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_LEARNED_SPELL' 4))  			{  				packet.WriteUInt(spellId);  				packet.WriteUShort(0); // 3.3.3a    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendSpellSuperceded,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SUPERCEDED_SPELL' 8))  			{  				packet.Write(spellId);  				packet.Write(newSpellId);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendSpellRemoved,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_REMOVED_SPELL' 4))  			{  				packet.WriteUInt(spellId);    				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendUnitCastStart,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_UNIT_SPELLCAST_START' 28))  			{  				cast.CasterReference.EntityId.WritePacked(packet);   // caster pguid  				target.EntityId.WritePacked(packet);        // target pguid  				packet.Write(cast.Spell.Id);                // spell id  				packet.Write(cast.Spell.CastDelay);         // cast time?  				packet.Write(cast.Spell.CastDelay);         // cast time mod?    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendCastStart,The following statement contains a magic number: int len = 150;
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendCastStart,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SPELL_START' len))  			{  				// Common to start and go packets  				WriteCaster(cast' packet);  				packet.Write(cast.Id);  				packet.Write(spell.Id);  				packet.Write((int)cast.StartFlags);    				// start specific stuff    				packet.Write(cast.CastDelay);  				WriteTargets(packet' cast);    				if (cast.StartFlags.HasFlag(CastFlags.RunicPowerGain))  				{  					packet.Write(0);  				}    				if (cast.StartFlags.HasFlag(CastFlags.RuneCooldownList))  				{  					byte b1 = 0;  					byte b2 = 0;  					packet.Write(b1);  					packet.Write(b2);  					for (int i = 0; i < 6; i++)  					{  						byte mask = (byte)(1 << i);  						if ((mask & b1) != 0)  						{  							if ((mask & b2) == 0)  							{  								packet.WriteByte(0);  							}  						}  					}  				}    				if (cast.StartFlags.HasFlag(CastFlags.Ranged))  				{  					WriteAmmoInfo(cast' packet);  				}    				if (cast.StartFlags.HasFlag(CastFlags.Flag_0x4000000))  				{  					// since 3.2.0  					packet.Write(0);  					packet.Write(0);  				}    				if (cast.TargetFlags.HasAnyFlag(SpellTargetFlags.DestinationLocation))  				{  					packet.Write((byte)0); // unk 3.3.x?  				}    				cast.SendPacketToArea(packet);  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,WriteAmmoInfo,The following statement contains a magic number: packet.Write(5996);
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendSpellGo,The following statement contains a magic number: int len = 24 + (hitTargets != null ? hitTargets.Count * 8 : 0) + (missedTargets != null ? missedTargets.Count * 10 : 0);
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendSpellGo,The following statement contains a magic number: int len = 24 + (hitTargets != null ? hitTargets.Count * 8 : 0) + (missedTargets != null ? missedTargets.Count * 10 : 0);
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendSpellGo,The following statement contains a magic number: int len = 24 + (hitTargets != null ? hitTargets.Count * 8 : 0) + (missedTargets != null ? missedTargets.Count * 10 : 0);
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendCastFailed,The following statement contains a magic number: var len = (result == SpellFailedReason.RequiresSpellFocus || result == SpellFailedReason.RequiresArea ? 10 : 6);
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendCastFailed,The following statement contains a magic number: var len = (result == SpellFailedReason.RequiresSpellFocus || result == SpellFailedReason.RequiresArea ? 10 : 6);
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendSpellFailure,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SPELL_FAILURE' 15))  			{  				spellCast.CasterReference.EntityId.WritePacked(packet);  				packet.Write(spellCast.Id);  				packet.Write(spellCast.Spell.Id);  				packet.Write((byte)reason);    				spellCast.SendPacketToArea(packet);  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendSpellFailedOther,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SPELL_FAILED_OTHER' 15))  			{  				spellCast.CasterReference.EntityId.WritePacked(packet);  				packet.Write(spellCast.Id);  				packet.Write(spellCast.Spell.Id);  				packet.Write((byte)reason);    				spellCast.SendPacketToArea(packet);  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendCastDelayed,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SPELL_DELAYED' 12))  			{  				cast.CasterReference.EntityId.WritePacked(packet);  				packet.Write(delay);    				cast.SendPacketToArea(packet);  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendChannelStart,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_CHANNEL_START' 12))  			{  				cast.CasterReference.EntityId.WritePacked(packet);  				packet.Write((uint)spellId);  				packet.Write(duration);    				cast.SendPacketToArea(packet);  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendChannelUpdate,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_CHANNEL_UPDATE' 12))  			{  				cast.CasterReference.EntityId.WritePacked(packet);  				packet.Write(delay);    				cast.SendPacketToArea(packet);  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendVisual,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PLAY_SPELL_VISUAL' 12))  			{  				//target.EntityId.WritePacked(packet);  				packet.Write(target.EntityId);  				packet.Write(visualId);    				target.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendImpact,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_PLAY_SPELL_IMPACT' 12))  			{  				//target.EntityId.WritePacked(packet);  				packet.Write(target.EntityId);  				packet.Write(visualId);    				target.SendPacketToArea(packet' true);  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendClearCoolDown,The following statement contains a magic number: if (client != null)  			{  				using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_CLEAR_COOLDOWN' 12))  				{  					packet.WriteUInt((uint)spellId);  					chr.EntityId.WritePacked(packet);    					client.Send(packet);  				}  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendSpellCooldown,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SPELL_COOLDOWN' 14))  			{  				packet.Write(caster.EntityId.Full);  				packet.WriteByte(0x00);// 1 = use category cooldown  				packet.Write(spellId);  				packet.Write((uint)cooldown); // if > 0' use this. If 0' use spell.RecoveryTime    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendItemCooldown,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_ITEM_COOLDOWN' 14))  			{  				packet.Write(item.EntityId.Full);  				packet.Write(spellId);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendCooldownUpdate,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_COOLDOWN_EVENT' 12))  			{  				packet.WriteUInt((uint)spellId);  				chr.EntityId.WritePacked(packet);    				chr.Send(packet);  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendSpellModifier,The following statement contains a magic number: using (var packet = new RealmPacketOut(opcode' 6))  			{  				packet.Write(groupBitNumber);  				packet.Write((byte)type);  				packet.Write(amount);    				chr.Send(packet);  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendSetSpellMissilePosition,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SET_PROJECTILE_POSITION' 21))  			{  				casterId.WritePacked(packet);  				packet.WriteByte(castCount);  				packet.WriteFloat(position.X);  				packet.WriteFloat(position.Y);  				packet.WriteFloat(position.Z);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,SendConvertRune,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_CONVERT_RUNE' 2))  			{  				packet.Write((byte)index);  				packet.Write((byte)type);    				client.Send(packet);  			}
Magic Number,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,Initialize2,The following statement contains a magic number: var learnSpells = new List<Spell>(5900);
Magic Number,WCell.RealmServer.Spells,AuraApplicationInfo,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\AuraApplicationInfo.cs,AuraApplicationInfo,The following statement contains a magic number: Handlers = new List<AuraEffectHandler>(3);
Magic Number,WCell.RealmServer.Spells,AuraApplicationInfo,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\AuraApplicationInfo.cs,AuraApplicationInfo,The following statement contains a magic number: Handlers = new List<AuraEffectHandler>(3) {firstHandler};
Magic Number,WCell.RealmServer.Spells,AISpellSettings,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\AISpellSettings.cs,AISpellSettings,The following statement contains a magic number: DefaultCooldownsByCategory[(int)AISpellCooldownCategory.AuraBeneficial] = new CooldownRange(30000' 60000);
Magic Number,WCell.RealmServer.Spells,AISpellSettings,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\AISpellSettings.cs,AISpellSettings,The following statement contains a magic number: DefaultCooldownsByCategory[(int)AISpellCooldownCategory.AuraBeneficial] = new CooldownRange(30000' 60000);
Magic Number,WCell.RealmServer.Spells,AISpellSettings,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\AISpellSettings.cs,AISpellSettings,The following statement contains a magic number: DefaultCooldownsByCategory[(int)AISpellCooldownCategory.AuraHarmful] = new CooldownRange(30000' 60000);
Magic Number,WCell.RealmServer.Spells,AISpellSettings,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\AISpellSettings.cs,AISpellSettings,The following statement contains a magic number: DefaultCooldownsByCategory[(int)AISpellCooldownCategory.AuraHarmful] = new CooldownRange(30000' 60000);
Magic Number,WCell.RealmServer.Spells,AISpellSettings,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\AISpellSettings.cs,AISpellSettings,The following statement contains a magic number: DefaultCooldownsByCategory[(int)AISpellCooldownCategory.DirectBeneficial] = new CooldownRange(30000' 60000);
Magic Number,WCell.RealmServer.Spells,AISpellSettings,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\AISpellSettings.cs,AISpellSettings,The following statement contains a magic number: DefaultCooldownsByCategory[(int)AISpellCooldownCategory.DirectBeneficial] = new CooldownRange(30000' 60000);
Magic Number,WCell.RealmServer.Spells,AISpellSettings,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\AISpellSettings.cs,AISpellSettings,The following statement contains a magic number: DefaultCooldownsByCategory[(int)AISpellCooldownCategory.DirectHarmful] = new CooldownRange(5000' 10000);
Magic Number,WCell.RealmServer.Spells,AISpellSettings,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\AISpellSettings.cs,AISpellSettings,The following statement contains a magic number: DefaultCooldownsByCategory[(int)AISpellCooldownCategory.DirectHarmful] = new CooldownRange(5000' 10000);
Magic Number,WCell.RealmServer.Spells,SummonPropertiesConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellSummons.cs,Convert,The following statement contains a magic number: var entry = new SpellSummonEntry  			{  				Id = (SummonType)rawData.GetInt32(0)'  				Group = (SummonGroup)rawData.GetInt32(1)'  				FactionTemplateId = (FactionTemplateId)rawData.GetInt32(2)'  				Type = (SummonPropertyType)rawData.GetInt32(3)'  				Slot = rawData.GetUInt32(4)'  				Flags = (SummonFlags)rawData.GetInt32(5)  			};
Magic Number,WCell.RealmServer.Spells,SummonPropertiesConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellSummons.cs,Convert,The following statement contains a magic number: var entry = new SpellSummonEntry  			{  				Id = (SummonType)rawData.GetInt32(0)'  				Group = (SummonGroup)rawData.GetInt32(1)'  				FactionTemplateId = (FactionTemplateId)rawData.GetInt32(2)'  				Type = (SummonPropertyType)rawData.GetInt32(3)'  				Slot = rawData.GetUInt32(4)'  				Flags = (SummonFlags)rawData.GetInt32(5)  			};
Magic Number,WCell.RealmServer.Spells,SummonPropertiesConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellSummons.cs,Convert,The following statement contains a magic number: var entry = new SpellSummonEntry  			{  				Id = (SummonType)rawData.GetInt32(0)'  				Group = (SummonGroup)rawData.GetInt32(1)'  				FactionTemplateId = (FactionTemplateId)rawData.GetInt32(2)'  				Type = (SummonPropertyType)rawData.GetInt32(3)'  				Slot = rawData.GetUInt32(4)'  				Flags = (SummonFlags)rawData.GetInt32(5)  			};
Magic Number,WCell.RealmServer.Spells,SummonPropertiesConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellSummons.cs,Convert,The following statement contains a magic number: var entry = new SpellSummonEntry  			{  				Id = (SummonType)rawData.GetInt32(0)'  				Group = (SummonGroup)rawData.GetInt32(1)'  				FactionTemplateId = (FactionTemplateId)rawData.GetInt32(2)'  				Type = (SummonPropertyType)rawData.GetInt32(3)'  				Slot = rawData.GetUInt32(4)'  				Flags = (SummonFlags)rawData.GetInt32(5)  			};
Magic Number,WCell.RealmServer.Spells,PlayerSpellCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\PlayerSpellCollection.cs,PlayerSpellCollection,The following statement contains a magic number: m_idCooldowns =  new List<ISpellIdCooldown>(5);
Magic Number,WCell.RealmServer.Spells,PlayerSpellCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\PlayerSpellCollection.cs,PlayerSpellCollection,The following statement contains a magic number: m_categoryCooldowns =  new List<ISpellCategoryCooldown>(5);
Magic Number,WCell.RealmServer.Spells,PlayerSpellCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\PlayerSpellCollection.cs,AddSpell,The following statement contains a magic number: if (!m_byId.ContainsKey(spell.SpellId))  			{  				var owner = OwnerChar;  				if (m_sendPackets && sendPacket)  				{  					SpellHandler.SendLearnedSpell(owner.Client' spell.Id);  					if (!spell.IsPassive)  					{  						SpellHandler.SendVisual(owner' 362);	// ouchy: Unnamed constants   					}  				}    				var specIndex = GetSpecIndex(spell);  				var spells = GetSpellList(spell);  				var newRecord = new SpellRecord(spell.SpellId' owner.EntityId.Low' specIndex);  				newRecord.SaveLater();  				spells.Add(newRecord);    				base.AddSpell(spell);  			}
Magic Number,WCell.RealmServer.Spells,PlayerSpellCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\PlayerSpellCollection.cs,AddSpellRequirements,The following statement contains a magic number: foreach (var reagent in spell.Reagents)  			{  				var templ = reagent.Template;  				if (templ != null)  				{  					var amt = reagent.Amount * 10;  					chr.Inventory.Ensure(templ' amt);  				}  			}
Magic Number,WCell.RealmServer.Spells,ShapeshiftEntryConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\ShapeshiftEntry.cs,Convert,The following statement contains a magic number: index += 2;
Magic Number,WCell.RealmServer.Spells,ShapeshiftEntryConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\ShapeshiftEntry.cs,Convert,The following statement contains a magic number: entry.DefaultActionBarSpells = new SpellId[8];
Magic Number,WCell.RealmServer.Spells,ShapeshiftEntryConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\ShapeshiftEntry.cs,Convert,The following statement contains a magic number: for (int i = 0; i < 8; i++)  			{  				entry.DefaultActionBarSpells[i] = (SpellId)GetInt32(rawData' index++);  			}
Magic Number,WCell.RealmServer.Spells,SpellCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCollection.cs,TriggerSpellsFor,The following statement contains a magic number: for (var i = 0; i < m_TargetTriggers.Count; i++)  			{  				var triggerHandler = m_TargetTriggers[i];  				var effect = triggerHandler.SpellEffect;  				if (effect.EffectType == SpellEffectType.TriggerSpellFromTargetWithCasterAsTarget) continue;  				if (spell.SpellClassSet == effect.Spell.SpellClassSet &&  					effect.MatchesSpell(spell) &&  					(((val = effect.CalcEffectValue(Owner)) >= 100) || Utility.Random(0' 101) <= val) &&  					spell != effect.TriggerSpell)	// prevent inf loops  				{  					var caster = triggerHandler.Aura.CasterUnit;  					if (caster != null)  					{  						//cast.Trigger(effect.TriggerSpell' cast.Targets.MakeArray());  						cast.Trigger(effect.TriggerSpell);  					}  				}  			}
Magic Number,WCell.RealmServer.Spells,SpellCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCollection.cs,TriggerSpellsFor,The following statement contains a magic number: for (var i = 0; i < m_TargetTriggers.Count; i++)  			{  				var triggerHandler = m_TargetTriggers[i];  				var effect = triggerHandler.SpellEffect;  				if (effect.EffectType == SpellEffectType.TriggerSpellFromTargetWithCasterAsTarget) continue;  				if (spell.SpellClassSet == effect.Spell.SpellClassSet &&  					effect.MatchesSpell(spell) &&  					(((val = effect.CalcEffectValue(Owner)) >= 100) || Utility.Random(0' 101) <= val) &&  					spell != effect.TriggerSpell)	// prevent inf loops  				{  					var caster = triggerHandler.Aura.CasterUnit;  					if (caster != null)  					{  						//cast.Trigger(effect.TriggerSpell' cast.Targets.MakeArray());  						cast.Trigger(effect.TriggerSpell);  					}  				}  			}
Magic Number,WCell.RealmServer.Spells,DBCDurationConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ConvertTo,The following statement contains a magic number: durations.LevelDelta = GetInt32(rawData' 2);
Magic Number,WCell.RealmServer.Spells,DBCDurationConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ConvertTo,The following statement contains a magic number: durations.Max = GetInt32(rawData' 3);
Magic Number,WCell.RealmServer.Spells,DBCRangeConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ConvertTo,The following statement contains a magic number: range.MaxDist = (uint)GetFloat(rawData' 3);
Magic Number,WCell.RealmServer.Spells,DBCSpellRuneCostConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ConvertTo,The following statement contains a magic number: var entry = new RuneCostEntry  				{  					Id = (uint)(id = GetInt32(rawData' 0))'  					RunicPowerGain = GetInt32(rawData' 4)  				};
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,Convert,The following statement contains a magic number: try  				{  					spell.Category = GetUInt32(rawData' currentIndex++);                                   // 1  					spell.DispelType = (DispelType)GetUInt32(rawData' currentIndex++);                     // 2  					spell.Mechanic = (SpellMechanic)GetUInt32(rawData' currentIndex++);                    // 3  					spell.Attributes = (SpellAttributes)GetUInt32(rawData' currentIndex++);                // 4  					spell.AttributesEx = (SpellAttributesEx)GetUInt32(rawData' currentIndex++);            // 5  					spell.AttributesExB = (SpellAttributesExB)GetUInt32(rawData' currentIndex++);          // 6  					spell.AttributesExC = (SpellAttributesExC)GetUInt32(rawData' currentIndex++);          // 7  					spell.AttributesExD = (SpellAttributesExD)GetUInt32(rawData' currentIndex++);          // 8  					spell.AttributesExE = (SpellAttributesExE)GetUInt32(rawData' currentIndex++);          // 9  					spell.AttributesExF = (SpellAttributesExF)GetUInt32(rawData' currentIndex++);          // 10  					spell.RequiredShapeshiftMask = (ShapeshiftMask)GetUInt32(rawData' currentIndex++);     // 11  					spell.Unk_322_1 = GetUInt32(rawData' currentIndex++);                                  // 12  					spell.ExcludeShapeshiftMask = (ShapeshiftMask)GetUInt32(rawData' currentIndex++);      // 13  					spell.Unk_322_2 = GetUInt32(rawData' currentIndex++);                                  // 14  					spell.TargetFlags = (SpellTargetFlags)GetUInt32(rawData' currentIndex++);              // 15  					spell.Unk_322_3 = GetUInt32(rawData' currentIndex++);                                  // 16  					spell.CreatureMask = (CreatureMask)GetUInt32(rawData' currentIndex++);    // 17  					spell.RequiredSpellFocus = (SpellFocus)GetUInt32(rawData' currentIndex++);              // 18  					spell.FacingFlags = (SpellFacingFlags)GetUInt32(rawData' currentIndex++);               // 19  					spell.RequiredCasterAuraState = (AuraState)GetUInt32(rawData' currentIndex++);          // 20  					spell.RequiredTargetAuraState = (AuraState)GetUInt32(rawData' currentIndex++);          // 21  					spell.ExcludeCasterAuraState = (AuraState)GetUInt32(rawData' currentIndex++);           // 22  					spell.ExcludeTargetAuraState = (AuraState)GetUInt32(rawData' currentIndex++);           // 23  					spell.RequiredCasterAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                        // 24  					spell.RequiredTargetAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                        // 25  					spell.ExcludeCasterAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                         // 26  					spell.ExcludeTargetAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                         // 27    					int castTimeIndex = GetInt32(rawData' currentIndex++);                                  // 28  					if (castTimeIndex > 0)  					{  						if (!mappeddbcCastTimeReader.Entries.TryGetValue(castTimeIndex' out spell.CastDelay))  						{  							ContentMgr.OnInvalidClientData("DBC Spell \"{0}\" referred to invalid CastTime-Entry: {1}"' spell.Name' castTimeIndex);  						}  					}    					spell.CooldownTime = Math.Max(0' GetInt32(rawData' currentIndex++) - (int)spell.CastDelay);     // 29  					spell.categoryCooldownTime = GetInt32(rawData' currentIndex++);                                 // 30  					spell.InterruptFlags = (InterruptFlags)GetUInt32(rawData' currentIndex++);                      // 31  					spell.AuraInterruptFlags = (AuraInterruptFlags)GetUInt32(rawData' currentIndex++);              // 32  					spell.ChannelInterruptFlags = (ChannelInterruptFlags)GetUInt32(rawData' currentIndex++);        // 33  					spell.ProcTriggerFlags = (ProcTriggerFlags)GetUInt32(rawData' currentIndex++);                  // 34  					spell.ProcChance = GetUInt32(rawData' currentIndex++);                                          // 35  					spell.ProcCharges = GetInt32(rawData' currentIndex++);                                          // 36  					spell.MaxLevel = GetInt32(rawData' currentIndex++);                                             // 37  					spell.BaseLevel = GetInt32(rawData' currentIndex++);                                            // 38  					spell.Level = GetInt32(rawData' currentIndex++);                                                // 30    					var durationIndex = GetInt32(rawData' currentIndex++);                                          // 40  					if (durationIndex > 0)  					{  						if (!mappeddbcDurationReader.Entries.TryGetValue(durationIndex' out spell.Durations))  						{  							ContentMgr.OnInvalidClientData("DBC Spell \"{0}\" referred to invalid Duration-Entry: {1}"' spell.Name' durationIndex);  						}  					}    					spell.PowerType = (PowerType)GetUInt32(rawData' currentIndex++);        // 41  					spell.PowerCost = GetInt32(rawData' currentIndex++);                    // 42  					spell.PowerCostPerlevel = GetInt32(rawData' currentIndex++);            // 43  					spell.PowerPerSecond = GetInt32(rawData' currentIndex++);               // 44  					spell.PowerPerSecondPerLevel = GetInt32(rawData' currentIndex++);       // 45    					var rangeIndex = GetInt32(rawData' currentIndex++);                     // 46  					if (rangeIndex > 0)  					{  						if (!mappeddbcRangeReader.Entries.TryGetValue(rangeIndex' out spell.Range))  						{  							ContentMgr.OnInvalidClientData("DBC Spell \"{0}\" referred to invalid Range-Entry: {1}"' spell.Name' rangeIndex);  						}  					}    					spell.ProjectileSpeed = GetFloat(rawData' currentIndex++);              // 47  					spell.ModalNextSpell = (SpellId)GetUInt32(rawData' currentIndex++);     // 48    					spell.MaxStackCount = GetInt32(rawData' currentIndex++);                // 49    					spell.RequiredToolIds = new uint[2];                                    // 50-51  					for (var i = 0; i < spell.RequiredToolIds.Length; i++)  					{  						spell.RequiredToolIds[i] = GetUInt32(rawData' currentIndex++);  					}    					List<ItemStackDescription> reagents = null;  					int reagentStart = currentIndex;  					for (int i = 0; i < 8; i++)                                             //52-59  					{  						ReadReagent(rawData' reagentStart' i' out currentIndex' ref reagents);  					}  					if (reagents != null)  					{  						spell.Reagents = reagents.ToArray();  					}  					else  					{  						spell.Reagents = ItemStackDescription.EmptyArray;  					}  					spell.RequiredItemClass = (ItemClass)GetUInt32(rawData' currentIndex++);   //68  					if (spell.RequiredItemClass < 0)  					{  						spell.RequiredItemClass = ItemClass.None;  					}    					spell.RequiredItemSubClassMask = (ItemSubClassMask)GetUInt32(rawData' currentIndex++); // 69  					if (spell.RequiredItemSubClassMask < 0)  					{  						spell.RequiredItemSubClassMask = ItemSubClassMask.None;  					}    					spell.RequiredItemInventorySlotMask = (InventorySlotTypeMask)GetUInt32(rawData' currentIndex++); // 70  					if (spell.RequiredItemInventorySlotMask < 0)  					{  						spell.RequiredItemInventorySlotMask = InventorySlotTypeMask.None;  					}    					var effects = new List<SpellEffect>(3);     // 71 - 127  					int effectStart = currentIndex;    					for (int i = 0; i < 3; i++)  					{  						var effect = ReadEffect(spell' rawData' effectStart' i' out currentIndex);  						if (effect != null &&  							(effect.EffectType != SpellEffectType.None ||  								effect.BasePoints > 0 ||  								effect.AuraType != 0 ||  								effect.TriggerSpellId != 0))  						{    							effects.Add(effect);  						}  					}  					spell.Effects = effects.ToArray();    					spell.Visual = GetUInt32(rawData' currentIndex++);              // 128  					spell.Visual2 = GetUInt32(rawData' currentIndex++);             // 129  					spell.SpellbookIconId = GetUInt32(rawData' currentIndex++);     // 130  					spell.BuffIconId = GetUInt32(rawData' currentIndex++);          // 131  					spell.Priority = GetUInt32(rawData' currentIndex++);            // 132    					spell.Name = GetString(rawData' ref currentIndex);              // 133  					spell.RankDesc = GetString(rawData' ref currentIndex);          // 124  					spell.Description = GetString(rawData' ref currentIndex);       // 125  					spell.BuffDescription = GetString(rawData' ref currentIndex);   // 126    					spell.PowerCostPercentage = GetInt32(rawData' currentIndex++);  // 127  					spell.StartRecoveryTime = GetInt32(rawData' currentIndex++);    // 128  					spell.StartRecoveryCategory = GetInt32(rawData' currentIndex++);    // 129  					spell.MaxTargetLevel = GetUInt32(rawData' currentIndex++);          // 130  					spell.SpellClassSet = (SpellClassSet)GetUInt32(rawData' currentIndex++);    // 131    					spell.SpellClassMask[0] = GetUInt32(rawData' currentIndex++);   // 132  					spell.SpellClassMask[1] = GetUInt32(rawData' currentIndex++);   // 133  					spell.SpellClassMask[2] = GetUInt32(rawData' currentIndex++);   // 134    					spell.MaxTargets = GetUInt32(rawData' currentIndex++);          // 135  					spell.DamageType = (DamageType)GetUInt32(rawData' currentIndex++);   // 136  					spell.PreventionType = (SpellPreventionType)GetUInt32(rawData' currentIndex++); // 137  					spell.StanceBarOrder = GetInt32(rawData' currentIndex++);  // 138    					for (int i = 0; i < spell.DamageMultipliers.Length; i++) // 139-141  					{  						spell.DamageMultipliers[i] = GetFloat(rawData' currentIndex++);  					}    					spell.MinFactionId = GetUInt32(rawData' currentIndex++);        // 142  					spell.MinReputation = GetUInt32(rawData' currentIndex++);       // 143  					spell.RequiredAuraVision = GetUInt32(rawData' currentIndex++);  // 144    					spell.RequiredToolCategories = new ToolCategory[2];       // 145-146  					for (int i = 0; i < spell.RequiredToolCategories.Length; i++)  					{  						spell.RequiredToolCategories[i] = (ToolCategory)GetUInt32(rawData' currentIndex++);  					}    					spell.AreaGroupId = GetUInt32(rawData' currentIndex++);  					spell.SchoolMask = (DamageSchoolMask)GetUInt32(rawData' currentIndex++);    					var runeCostId = GetInt32(rawData' currentIndex++);  					if (runeCostId != 0)  					{  						mappeddbcRuneCostReader.Entries.TryGetValue(runeCostId' out spell.RuneCostEntry);  					}  					spell.MissileId = GetUInt32(rawData' currentIndex++);    					// New 3.1.0. Id from PowerDisplay.dbc  					spell.PowerDisplayId = GetInt32(rawData' currentIndex++);    					// 3.2.2 unk float (array?)  					spell.Unk_322_4_1 = GetUInt32(rawData' currentIndex++);  					spell.Unk_322_4_2 = GetUInt32(rawData' currentIndex++);  					spell.Unk_322_4_3 = GetUInt32(rawData' currentIndex++);    					// 3.2.2  					spell.spellDescriptionVariablesID = GetUInt32(rawData' currentIndex++);  				}  				catch (Exception e)  				{  					throw new Exception(string.Format("Unable to parse Spell from DBC file. Index: " + currentIndex)' e);  				}
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,Convert,The following statement contains a magic number: try  				{  					spell.Category = GetUInt32(rawData' currentIndex++);                                   // 1  					spell.DispelType = (DispelType)GetUInt32(rawData' currentIndex++);                     // 2  					spell.Mechanic = (SpellMechanic)GetUInt32(rawData' currentIndex++);                    // 3  					spell.Attributes = (SpellAttributes)GetUInt32(rawData' currentIndex++);                // 4  					spell.AttributesEx = (SpellAttributesEx)GetUInt32(rawData' currentIndex++);            // 5  					spell.AttributesExB = (SpellAttributesExB)GetUInt32(rawData' currentIndex++);          // 6  					spell.AttributesExC = (SpellAttributesExC)GetUInt32(rawData' currentIndex++);          // 7  					spell.AttributesExD = (SpellAttributesExD)GetUInt32(rawData' currentIndex++);          // 8  					spell.AttributesExE = (SpellAttributesExE)GetUInt32(rawData' currentIndex++);          // 9  					spell.AttributesExF = (SpellAttributesExF)GetUInt32(rawData' currentIndex++);          // 10  					spell.RequiredShapeshiftMask = (ShapeshiftMask)GetUInt32(rawData' currentIndex++);     // 11  					spell.Unk_322_1 = GetUInt32(rawData' currentIndex++);                                  // 12  					spell.ExcludeShapeshiftMask = (ShapeshiftMask)GetUInt32(rawData' currentIndex++);      // 13  					spell.Unk_322_2 = GetUInt32(rawData' currentIndex++);                                  // 14  					spell.TargetFlags = (SpellTargetFlags)GetUInt32(rawData' currentIndex++);              // 15  					spell.Unk_322_3 = GetUInt32(rawData' currentIndex++);                                  // 16  					spell.CreatureMask = (CreatureMask)GetUInt32(rawData' currentIndex++);    // 17  					spell.RequiredSpellFocus = (SpellFocus)GetUInt32(rawData' currentIndex++);              // 18  					spell.FacingFlags = (SpellFacingFlags)GetUInt32(rawData' currentIndex++);               // 19  					spell.RequiredCasterAuraState = (AuraState)GetUInt32(rawData' currentIndex++);          // 20  					spell.RequiredTargetAuraState = (AuraState)GetUInt32(rawData' currentIndex++);          // 21  					spell.ExcludeCasterAuraState = (AuraState)GetUInt32(rawData' currentIndex++);           // 22  					spell.ExcludeTargetAuraState = (AuraState)GetUInt32(rawData' currentIndex++);           // 23  					spell.RequiredCasterAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                        // 24  					spell.RequiredTargetAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                        // 25  					spell.ExcludeCasterAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                         // 26  					spell.ExcludeTargetAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                         // 27    					int castTimeIndex = GetInt32(rawData' currentIndex++);                                  // 28  					if (castTimeIndex > 0)  					{  						if (!mappeddbcCastTimeReader.Entries.TryGetValue(castTimeIndex' out spell.CastDelay))  						{  							ContentMgr.OnInvalidClientData("DBC Spell \"{0}\" referred to invalid CastTime-Entry: {1}"' spell.Name' castTimeIndex);  						}  					}    					spell.CooldownTime = Math.Max(0' GetInt32(rawData' currentIndex++) - (int)spell.CastDelay);     // 29  					spell.categoryCooldownTime = GetInt32(rawData' currentIndex++);                                 // 30  					spell.InterruptFlags = (InterruptFlags)GetUInt32(rawData' currentIndex++);                      // 31  					spell.AuraInterruptFlags = (AuraInterruptFlags)GetUInt32(rawData' currentIndex++);              // 32  					spell.ChannelInterruptFlags = (ChannelInterruptFlags)GetUInt32(rawData' currentIndex++);        // 33  					spell.ProcTriggerFlags = (ProcTriggerFlags)GetUInt32(rawData' currentIndex++);                  // 34  					spell.ProcChance = GetUInt32(rawData' currentIndex++);                                          // 35  					spell.ProcCharges = GetInt32(rawData' currentIndex++);                                          // 36  					spell.MaxLevel = GetInt32(rawData' currentIndex++);                                             // 37  					spell.BaseLevel = GetInt32(rawData' currentIndex++);                                            // 38  					spell.Level = GetInt32(rawData' currentIndex++);                                                // 30    					var durationIndex = GetInt32(rawData' currentIndex++);                                          // 40  					if (durationIndex > 0)  					{  						if (!mappeddbcDurationReader.Entries.TryGetValue(durationIndex' out spell.Durations))  						{  							ContentMgr.OnInvalidClientData("DBC Spell \"{0}\" referred to invalid Duration-Entry: {1}"' spell.Name' durationIndex);  						}  					}    					spell.PowerType = (PowerType)GetUInt32(rawData' currentIndex++);        // 41  					spell.PowerCost = GetInt32(rawData' currentIndex++);                    // 42  					spell.PowerCostPerlevel = GetInt32(rawData' currentIndex++);            // 43  					spell.PowerPerSecond = GetInt32(rawData' currentIndex++);               // 44  					spell.PowerPerSecondPerLevel = GetInt32(rawData' currentIndex++);       // 45    					var rangeIndex = GetInt32(rawData' currentIndex++);                     // 46  					if (rangeIndex > 0)  					{  						if (!mappeddbcRangeReader.Entries.TryGetValue(rangeIndex' out spell.Range))  						{  							ContentMgr.OnInvalidClientData("DBC Spell \"{0}\" referred to invalid Range-Entry: {1}"' spell.Name' rangeIndex);  						}  					}    					spell.ProjectileSpeed = GetFloat(rawData' currentIndex++);              // 47  					spell.ModalNextSpell = (SpellId)GetUInt32(rawData' currentIndex++);     // 48    					spell.MaxStackCount = GetInt32(rawData' currentIndex++);                // 49    					spell.RequiredToolIds = new uint[2];                                    // 50-51  					for (var i = 0; i < spell.RequiredToolIds.Length; i++)  					{  						spell.RequiredToolIds[i] = GetUInt32(rawData' currentIndex++);  					}    					List<ItemStackDescription> reagents = null;  					int reagentStart = currentIndex;  					for (int i = 0; i < 8; i++)                                             //52-59  					{  						ReadReagent(rawData' reagentStart' i' out currentIndex' ref reagents);  					}  					if (reagents != null)  					{  						spell.Reagents = reagents.ToArray();  					}  					else  					{  						spell.Reagents = ItemStackDescription.EmptyArray;  					}  					spell.RequiredItemClass = (ItemClass)GetUInt32(rawData' currentIndex++);   //68  					if (spell.RequiredItemClass < 0)  					{  						spell.RequiredItemClass = ItemClass.None;  					}    					spell.RequiredItemSubClassMask = (ItemSubClassMask)GetUInt32(rawData' currentIndex++); // 69  					if (spell.RequiredItemSubClassMask < 0)  					{  						spell.RequiredItemSubClassMask = ItemSubClassMask.None;  					}    					spell.RequiredItemInventorySlotMask = (InventorySlotTypeMask)GetUInt32(rawData' currentIndex++); // 70  					if (spell.RequiredItemInventorySlotMask < 0)  					{  						spell.RequiredItemInventorySlotMask = InventorySlotTypeMask.None;  					}    					var effects = new List<SpellEffect>(3);     // 71 - 127  					int effectStart = currentIndex;    					for (int i = 0; i < 3; i++)  					{  						var effect = ReadEffect(spell' rawData' effectStart' i' out currentIndex);  						if (effect != null &&  							(effect.EffectType != SpellEffectType.None ||  								effect.BasePoints > 0 ||  								effect.AuraType != 0 ||  								effect.TriggerSpellId != 0))  						{    							effects.Add(effect);  						}  					}  					spell.Effects = effects.ToArray();    					spell.Visual = GetUInt32(rawData' currentIndex++);              // 128  					spell.Visual2 = GetUInt32(rawData' currentIndex++);             // 129  					spell.SpellbookIconId = GetUInt32(rawData' currentIndex++);     // 130  					spell.BuffIconId = GetUInt32(rawData' currentIndex++);          // 131  					spell.Priority = GetUInt32(rawData' currentIndex++);            // 132    					spell.Name = GetString(rawData' ref currentIndex);              // 133  					spell.RankDesc = GetString(rawData' ref currentIndex);          // 124  					spell.Description = GetString(rawData' ref currentIndex);       // 125  					spell.BuffDescription = GetString(rawData' ref currentIndex);   // 126    					spell.PowerCostPercentage = GetInt32(rawData' currentIndex++);  // 127  					spell.StartRecoveryTime = GetInt32(rawData' currentIndex++);    // 128  					spell.StartRecoveryCategory = GetInt32(rawData' currentIndex++);    // 129  					spell.MaxTargetLevel = GetUInt32(rawData' currentIndex++);          // 130  					spell.SpellClassSet = (SpellClassSet)GetUInt32(rawData' currentIndex++);    // 131    					spell.SpellClassMask[0] = GetUInt32(rawData' currentIndex++);   // 132  					spell.SpellClassMask[1] = GetUInt32(rawData' currentIndex++);   // 133  					spell.SpellClassMask[2] = GetUInt32(rawData' currentIndex++);   // 134    					spell.MaxTargets = GetUInt32(rawData' currentIndex++);          // 135  					spell.DamageType = (DamageType)GetUInt32(rawData' currentIndex++);   // 136  					spell.PreventionType = (SpellPreventionType)GetUInt32(rawData' currentIndex++); // 137  					spell.StanceBarOrder = GetInt32(rawData' currentIndex++);  // 138    					for (int i = 0; i < spell.DamageMultipliers.Length; i++) // 139-141  					{  						spell.DamageMultipliers[i] = GetFloat(rawData' currentIndex++);  					}    					spell.MinFactionId = GetUInt32(rawData' currentIndex++);        // 142  					spell.MinReputation = GetUInt32(rawData' currentIndex++);       // 143  					spell.RequiredAuraVision = GetUInt32(rawData' currentIndex++);  // 144    					spell.RequiredToolCategories = new ToolCategory[2];       // 145-146  					for (int i = 0; i < spell.RequiredToolCategories.Length; i++)  					{  						spell.RequiredToolCategories[i] = (ToolCategory)GetUInt32(rawData' currentIndex++);  					}    					spell.AreaGroupId = GetUInt32(rawData' currentIndex++);  					spell.SchoolMask = (DamageSchoolMask)GetUInt32(rawData' currentIndex++);    					var runeCostId = GetInt32(rawData' currentIndex++);  					if (runeCostId != 0)  					{  						mappeddbcRuneCostReader.Entries.TryGetValue(runeCostId' out spell.RuneCostEntry);  					}  					spell.MissileId = GetUInt32(rawData' currentIndex++);    					// New 3.1.0. Id from PowerDisplay.dbc  					spell.PowerDisplayId = GetInt32(rawData' currentIndex++);    					// 3.2.2 unk float (array?)  					spell.Unk_322_4_1 = GetUInt32(rawData' currentIndex++);  					spell.Unk_322_4_2 = GetUInt32(rawData' currentIndex++);  					spell.Unk_322_4_3 = GetUInt32(rawData' currentIndex++);    					// 3.2.2  					spell.spellDescriptionVariablesID = GetUInt32(rawData' currentIndex++);  				}  				catch (Exception e)  				{  					throw new Exception(string.Format("Unable to parse Spell from DBC file. Index: " + currentIndex)' e);  				}
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,Convert,The following statement contains a magic number: try  				{  					spell.Category = GetUInt32(rawData' currentIndex++);                                   // 1  					spell.DispelType = (DispelType)GetUInt32(rawData' currentIndex++);                     // 2  					spell.Mechanic = (SpellMechanic)GetUInt32(rawData' currentIndex++);                    // 3  					spell.Attributes = (SpellAttributes)GetUInt32(rawData' currentIndex++);                // 4  					spell.AttributesEx = (SpellAttributesEx)GetUInt32(rawData' currentIndex++);            // 5  					spell.AttributesExB = (SpellAttributesExB)GetUInt32(rawData' currentIndex++);          // 6  					spell.AttributesExC = (SpellAttributesExC)GetUInt32(rawData' currentIndex++);          // 7  					spell.AttributesExD = (SpellAttributesExD)GetUInt32(rawData' currentIndex++);          // 8  					spell.AttributesExE = (SpellAttributesExE)GetUInt32(rawData' currentIndex++);          // 9  					spell.AttributesExF = (SpellAttributesExF)GetUInt32(rawData' currentIndex++);          // 10  					spell.RequiredShapeshiftMask = (ShapeshiftMask)GetUInt32(rawData' currentIndex++);     // 11  					spell.Unk_322_1 = GetUInt32(rawData' currentIndex++);                                  // 12  					spell.ExcludeShapeshiftMask = (ShapeshiftMask)GetUInt32(rawData' currentIndex++);      // 13  					spell.Unk_322_2 = GetUInt32(rawData' currentIndex++);                                  // 14  					spell.TargetFlags = (SpellTargetFlags)GetUInt32(rawData' currentIndex++);              // 15  					spell.Unk_322_3 = GetUInt32(rawData' currentIndex++);                                  // 16  					spell.CreatureMask = (CreatureMask)GetUInt32(rawData' currentIndex++);    // 17  					spell.RequiredSpellFocus = (SpellFocus)GetUInt32(rawData' currentIndex++);              // 18  					spell.FacingFlags = (SpellFacingFlags)GetUInt32(rawData' currentIndex++);               // 19  					spell.RequiredCasterAuraState = (AuraState)GetUInt32(rawData' currentIndex++);          // 20  					spell.RequiredTargetAuraState = (AuraState)GetUInt32(rawData' currentIndex++);          // 21  					spell.ExcludeCasterAuraState = (AuraState)GetUInt32(rawData' currentIndex++);           // 22  					spell.ExcludeTargetAuraState = (AuraState)GetUInt32(rawData' currentIndex++);           // 23  					spell.RequiredCasterAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                        // 24  					spell.RequiredTargetAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                        // 25  					spell.ExcludeCasterAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                         // 26  					spell.ExcludeTargetAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                         // 27    					int castTimeIndex = GetInt32(rawData' currentIndex++);                                  // 28  					if (castTimeIndex > 0)  					{  						if (!mappeddbcCastTimeReader.Entries.TryGetValue(castTimeIndex' out spell.CastDelay))  						{  							ContentMgr.OnInvalidClientData("DBC Spell \"{0}\" referred to invalid CastTime-Entry: {1}"' spell.Name' castTimeIndex);  						}  					}    					spell.CooldownTime = Math.Max(0' GetInt32(rawData' currentIndex++) - (int)spell.CastDelay);     // 29  					spell.categoryCooldownTime = GetInt32(rawData' currentIndex++);                                 // 30  					spell.InterruptFlags = (InterruptFlags)GetUInt32(rawData' currentIndex++);                      // 31  					spell.AuraInterruptFlags = (AuraInterruptFlags)GetUInt32(rawData' currentIndex++);              // 32  					spell.ChannelInterruptFlags = (ChannelInterruptFlags)GetUInt32(rawData' currentIndex++);        // 33  					spell.ProcTriggerFlags = (ProcTriggerFlags)GetUInt32(rawData' currentIndex++);                  // 34  					spell.ProcChance = GetUInt32(rawData' currentIndex++);                                          // 35  					spell.ProcCharges = GetInt32(rawData' currentIndex++);                                          // 36  					spell.MaxLevel = GetInt32(rawData' currentIndex++);                                             // 37  					spell.BaseLevel = GetInt32(rawData' currentIndex++);                                            // 38  					spell.Level = GetInt32(rawData' currentIndex++);                                                // 30    					var durationIndex = GetInt32(rawData' currentIndex++);                                          // 40  					if (durationIndex > 0)  					{  						if (!mappeddbcDurationReader.Entries.TryGetValue(durationIndex' out spell.Durations))  						{  							ContentMgr.OnInvalidClientData("DBC Spell \"{0}\" referred to invalid Duration-Entry: {1}"' spell.Name' durationIndex);  						}  					}    					spell.PowerType = (PowerType)GetUInt32(rawData' currentIndex++);        // 41  					spell.PowerCost = GetInt32(rawData' currentIndex++);                    // 42  					spell.PowerCostPerlevel = GetInt32(rawData' currentIndex++);            // 43  					spell.PowerPerSecond = GetInt32(rawData' currentIndex++);               // 44  					spell.PowerPerSecondPerLevel = GetInt32(rawData' currentIndex++);       // 45    					var rangeIndex = GetInt32(rawData' currentIndex++);                     // 46  					if (rangeIndex > 0)  					{  						if (!mappeddbcRangeReader.Entries.TryGetValue(rangeIndex' out spell.Range))  						{  							ContentMgr.OnInvalidClientData("DBC Spell \"{0}\" referred to invalid Range-Entry: {1}"' spell.Name' rangeIndex);  						}  					}    					spell.ProjectileSpeed = GetFloat(rawData' currentIndex++);              // 47  					spell.ModalNextSpell = (SpellId)GetUInt32(rawData' currentIndex++);     // 48    					spell.MaxStackCount = GetInt32(rawData' currentIndex++);                // 49    					spell.RequiredToolIds = new uint[2];                                    // 50-51  					for (var i = 0; i < spell.RequiredToolIds.Length; i++)  					{  						spell.RequiredToolIds[i] = GetUInt32(rawData' currentIndex++);  					}    					List<ItemStackDescription> reagents = null;  					int reagentStart = currentIndex;  					for (int i = 0; i < 8; i++)                                             //52-59  					{  						ReadReagent(rawData' reagentStart' i' out currentIndex' ref reagents);  					}  					if (reagents != null)  					{  						spell.Reagents = reagents.ToArray();  					}  					else  					{  						spell.Reagents = ItemStackDescription.EmptyArray;  					}  					spell.RequiredItemClass = (ItemClass)GetUInt32(rawData' currentIndex++);   //68  					if (spell.RequiredItemClass < 0)  					{  						spell.RequiredItemClass = ItemClass.None;  					}    					spell.RequiredItemSubClassMask = (ItemSubClassMask)GetUInt32(rawData' currentIndex++); // 69  					if (spell.RequiredItemSubClassMask < 0)  					{  						spell.RequiredItemSubClassMask = ItemSubClassMask.None;  					}    					spell.RequiredItemInventorySlotMask = (InventorySlotTypeMask)GetUInt32(rawData' currentIndex++); // 70  					if (spell.RequiredItemInventorySlotMask < 0)  					{  						spell.RequiredItemInventorySlotMask = InventorySlotTypeMask.None;  					}    					var effects = new List<SpellEffect>(3);     // 71 - 127  					int effectStart = currentIndex;    					for (int i = 0; i < 3; i++)  					{  						var effect = ReadEffect(spell' rawData' effectStart' i' out currentIndex);  						if (effect != null &&  							(effect.EffectType != SpellEffectType.None ||  								effect.BasePoints > 0 ||  								effect.AuraType != 0 ||  								effect.TriggerSpellId != 0))  						{    							effects.Add(effect);  						}  					}  					spell.Effects = effects.ToArray();    					spell.Visual = GetUInt32(rawData' currentIndex++);              // 128  					spell.Visual2 = GetUInt32(rawData' currentIndex++);             // 129  					spell.SpellbookIconId = GetUInt32(rawData' currentIndex++);     // 130  					spell.BuffIconId = GetUInt32(rawData' currentIndex++);          // 131  					spell.Priority = GetUInt32(rawData' currentIndex++);            // 132    					spell.Name = GetString(rawData' ref currentIndex);              // 133  					spell.RankDesc = GetString(rawData' ref currentIndex);          // 124  					spell.Description = GetString(rawData' ref currentIndex);       // 125  					spell.BuffDescription = GetString(rawData' ref currentIndex);   // 126    					spell.PowerCostPercentage = GetInt32(rawData' currentIndex++);  // 127  					spell.StartRecoveryTime = GetInt32(rawData' currentIndex++);    // 128  					spell.StartRecoveryCategory = GetInt32(rawData' currentIndex++);    // 129  					spell.MaxTargetLevel = GetUInt32(rawData' currentIndex++);          // 130  					spell.SpellClassSet = (SpellClassSet)GetUInt32(rawData' currentIndex++);    // 131    					spell.SpellClassMask[0] = GetUInt32(rawData' currentIndex++);   // 132  					spell.SpellClassMask[1] = GetUInt32(rawData' currentIndex++);   // 133  					spell.SpellClassMask[2] = GetUInt32(rawData' currentIndex++);   // 134    					spell.MaxTargets = GetUInt32(rawData' currentIndex++);          // 135  					spell.DamageType = (DamageType)GetUInt32(rawData' currentIndex++);   // 136  					spell.PreventionType = (SpellPreventionType)GetUInt32(rawData' currentIndex++); // 137  					spell.StanceBarOrder = GetInt32(rawData' currentIndex++);  // 138    					for (int i = 0; i < spell.DamageMultipliers.Length; i++) // 139-141  					{  						spell.DamageMultipliers[i] = GetFloat(rawData' currentIndex++);  					}    					spell.MinFactionId = GetUInt32(rawData' currentIndex++);        // 142  					spell.MinReputation = GetUInt32(rawData' currentIndex++);       // 143  					spell.RequiredAuraVision = GetUInt32(rawData' currentIndex++);  // 144    					spell.RequiredToolCategories = new ToolCategory[2];       // 145-146  					for (int i = 0; i < spell.RequiredToolCategories.Length; i++)  					{  						spell.RequiredToolCategories[i] = (ToolCategory)GetUInt32(rawData' currentIndex++);  					}    					spell.AreaGroupId = GetUInt32(rawData' currentIndex++);  					spell.SchoolMask = (DamageSchoolMask)GetUInt32(rawData' currentIndex++);    					var runeCostId = GetInt32(rawData' currentIndex++);  					if (runeCostId != 0)  					{  						mappeddbcRuneCostReader.Entries.TryGetValue(runeCostId' out spell.RuneCostEntry);  					}  					spell.MissileId = GetUInt32(rawData' currentIndex++);    					// New 3.1.0. Id from PowerDisplay.dbc  					spell.PowerDisplayId = GetInt32(rawData' currentIndex++);    					// 3.2.2 unk float (array?)  					spell.Unk_322_4_1 = GetUInt32(rawData' currentIndex++);  					spell.Unk_322_4_2 = GetUInt32(rawData' currentIndex++);  					spell.Unk_322_4_3 = GetUInt32(rawData' currentIndex++);    					// 3.2.2  					spell.spellDescriptionVariablesID = GetUInt32(rawData' currentIndex++);  				}  				catch (Exception e)  				{  					throw new Exception(string.Format("Unable to parse Spell from DBC file. Index: " + currentIndex)' e);  				}
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,Convert,The following statement contains a magic number: try  				{  					spell.Category = GetUInt32(rawData' currentIndex++);                                   // 1  					spell.DispelType = (DispelType)GetUInt32(rawData' currentIndex++);                     // 2  					spell.Mechanic = (SpellMechanic)GetUInt32(rawData' currentIndex++);                    // 3  					spell.Attributes = (SpellAttributes)GetUInt32(rawData' currentIndex++);                // 4  					spell.AttributesEx = (SpellAttributesEx)GetUInt32(rawData' currentIndex++);            // 5  					spell.AttributesExB = (SpellAttributesExB)GetUInt32(rawData' currentIndex++);          // 6  					spell.AttributesExC = (SpellAttributesExC)GetUInt32(rawData' currentIndex++);          // 7  					spell.AttributesExD = (SpellAttributesExD)GetUInt32(rawData' currentIndex++);          // 8  					spell.AttributesExE = (SpellAttributesExE)GetUInt32(rawData' currentIndex++);          // 9  					spell.AttributesExF = (SpellAttributesExF)GetUInt32(rawData' currentIndex++);          // 10  					spell.RequiredShapeshiftMask = (ShapeshiftMask)GetUInt32(rawData' currentIndex++);     // 11  					spell.Unk_322_1 = GetUInt32(rawData' currentIndex++);                                  // 12  					spell.ExcludeShapeshiftMask = (ShapeshiftMask)GetUInt32(rawData' currentIndex++);      // 13  					spell.Unk_322_2 = GetUInt32(rawData' currentIndex++);                                  // 14  					spell.TargetFlags = (SpellTargetFlags)GetUInt32(rawData' currentIndex++);              // 15  					spell.Unk_322_3 = GetUInt32(rawData' currentIndex++);                                  // 16  					spell.CreatureMask = (CreatureMask)GetUInt32(rawData' currentIndex++);    // 17  					spell.RequiredSpellFocus = (SpellFocus)GetUInt32(rawData' currentIndex++);              // 18  					spell.FacingFlags = (SpellFacingFlags)GetUInt32(rawData' currentIndex++);               // 19  					spell.RequiredCasterAuraState = (AuraState)GetUInt32(rawData' currentIndex++);          // 20  					spell.RequiredTargetAuraState = (AuraState)GetUInt32(rawData' currentIndex++);          // 21  					spell.ExcludeCasterAuraState = (AuraState)GetUInt32(rawData' currentIndex++);           // 22  					spell.ExcludeTargetAuraState = (AuraState)GetUInt32(rawData' currentIndex++);           // 23  					spell.RequiredCasterAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                        // 24  					spell.RequiredTargetAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                        // 25  					spell.ExcludeCasterAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                         // 26  					spell.ExcludeTargetAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                         // 27    					int castTimeIndex = GetInt32(rawData' currentIndex++);                                  // 28  					if (castTimeIndex > 0)  					{  						if (!mappeddbcCastTimeReader.Entries.TryGetValue(castTimeIndex' out spell.CastDelay))  						{  							ContentMgr.OnInvalidClientData("DBC Spell \"{0}\" referred to invalid CastTime-Entry: {1}"' spell.Name' castTimeIndex);  						}  					}    					spell.CooldownTime = Math.Max(0' GetInt32(rawData' currentIndex++) - (int)spell.CastDelay);     // 29  					spell.categoryCooldownTime = GetInt32(rawData' currentIndex++);                                 // 30  					spell.InterruptFlags = (InterruptFlags)GetUInt32(rawData' currentIndex++);                      // 31  					spell.AuraInterruptFlags = (AuraInterruptFlags)GetUInt32(rawData' currentIndex++);              // 32  					spell.ChannelInterruptFlags = (ChannelInterruptFlags)GetUInt32(rawData' currentIndex++);        // 33  					spell.ProcTriggerFlags = (ProcTriggerFlags)GetUInt32(rawData' currentIndex++);                  // 34  					spell.ProcChance = GetUInt32(rawData' currentIndex++);                                          // 35  					spell.ProcCharges = GetInt32(rawData' currentIndex++);                                          // 36  					spell.MaxLevel = GetInt32(rawData' currentIndex++);                                             // 37  					spell.BaseLevel = GetInt32(rawData' currentIndex++);                                            // 38  					spell.Level = GetInt32(rawData' currentIndex++);                                                // 30    					var durationIndex = GetInt32(rawData' currentIndex++);                                          // 40  					if (durationIndex > 0)  					{  						if (!mappeddbcDurationReader.Entries.TryGetValue(durationIndex' out spell.Durations))  						{  							ContentMgr.OnInvalidClientData("DBC Spell \"{0}\" referred to invalid Duration-Entry: {1}"' spell.Name' durationIndex);  						}  					}    					spell.PowerType = (PowerType)GetUInt32(rawData' currentIndex++);        // 41  					spell.PowerCost = GetInt32(rawData' currentIndex++);                    // 42  					spell.PowerCostPerlevel = GetInt32(rawData' currentIndex++);            // 43  					spell.PowerPerSecond = GetInt32(rawData' currentIndex++);               // 44  					spell.PowerPerSecondPerLevel = GetInt32(rawData' currentIndex++);       // 45    					var rangeIndex = GetInt32(rawData' currentIndex++);                     // 46  					if (rangeIndex > 0)  					{  						if (!mappeddbcRangeReader.Entries.TryGetValue(rangeIndex' out spell.Range))  						{  							ContentMgr.OnInvalidClientData("DBC Spell \"{0}\" referred to invalid Range-Entry: {1}"' spell.Name' rangeIndex);  						}  					}    					spell.ProjectileSpeed = GetFloat(rawData' currentIndex++);              // 47  					spell.ModalNextSpell = (SpellId)GetUInt32(rawData' currentIndex++);     // 48    					spell.MaxStackCount = GetInt32(rawData' currentIndex++);                // 49    					spell.RequiredToolIds = new uint[2];                                    // 50-51  					for (var i = 0; i < spell.RequiredToolIds.Length; i++)  					{  						spell.RequiredToolIds[i] = GetUInt32(rawData' currentIndex++);  					}    					List<ItemStackDescription> reagents = null;  					int reagentStart = currentIndex;  					for (int i = 0; i < 8; i++)                                             //52-59  					{  						ReadReagent(rawData' reagentStart' i' out currentIndex' ref reagents);  					}  					if (reagents != null)  					{  						spell.Reagents = reagents.ToArray();  					}  					else  					{  						spell.Reagents = ItemStackDescription.EmptyArray;  					}  					spell.RequiredItemClass = (ItemClass)GetUInt32(rawData' currentIndex++);   //68  					if (spell.RequiredItemClass < 0)  					{  						spell.RequiredItemClass = ItemClass.None;  					}    					spell.RequiredItemSubClassMask = (ItemSubClassMask)GetUInt32(rawData' currentIndex++); // 69  					if (spell.RequiredItemSubClassMask < 0)  					{  						spell.RequiredItemSubClassMask = ItemSubClassMask.None;  					}    					spell.RequiredItemInventorySlotMask = (InventorySlotTypeMask)GetUInt32(rawData' currentIndex++); // 70  					if (spell.RequiredItemInventorySlotMask < 0)  					{  						spell.RequiredItemInventorySlotMask = InventorySlotTypeMask.None;  					}    					var effects = new List<SpellEffect>(3);     // 71 - 127  					int effectStart = currentIndex;    					for (int i = 0; i < 3; i++)  					{  						var effect = ReadEffect(spell' rawData' effectStart' i' out currentIndex);  						if (effect != null &&  							(effect.EffectType != SpellEffectType.None ||  								effect.BasePoints > 0 ||  								effect.AuraType != 0 ||  								effect.TriggerSpellId != 0))  						{    							effects.Add(effect);  						}  					}  					spell.Effects = effects.ToArray();    					spell.Visual = GetUInt32(rawData' currentIndex++);              // 128  					spell.Visual2 = GetUInt32(rawData' currentIndex++);             // 129  					spell.SpellbookIconId = GetUInt32(rawData' currentIndex++);     // 130  					spell.BuffIconId = GetUInt32(rawData' currentIndex++);          // 131  					spell.Priority = GetUInt32(rawData' currentIndex++);            // 132    					spell.Name = GetString(rawData' ref currentIndex);              // 133  					spell.RankDesc = GetString(rawData' ref currentIndex);          // 124  					spell.Description = GetString(rawData' ref currentIndex);       // 125  					spell.BuffDescription = GetString(rawData' ref currentIndex);   // 126    					spell.PowerCostPercentage = GetInt32(rawData' currentIndex++);  // 127  					spell.StartRecoveryTime = GetInt32(rawData' currentIndex++);    // 128  					spell.StartRecoveryCategory = GetInt32(rawData' currentIndex++);    // 129  					spell.MaxTargetLevel = GetUInt32(rawData' currentIndex++);          // 130  					spell.SpellClassSet = (SpellClassSet)GetUInt32(rawData' currentIndex++);    // 131    					spell.SpellClassMask[0] = GetUInt32(rawData' currentIndex++);   // 132  					spell.SpellClassMask[1] = GetUInt32(rawData' currentIndex++);   // 133  					spell.SpellClassMask[2] = GetUInt32(rawData' currentIndex++);   // 134    					spell.MaxTargets = GetUInt32(rawData' currentIndex++);          // 135  					spell.DamageType = (DamageType)GetUInt32(rawData' currentIndex++);   // 136  					spell.PreventionType = (SpellPreventionType)GetUInt32(rawData' currentIndex++); // 137  					spell.StanceBarOrder = GetInt32(rawData' currentIndex++);  // 138    					for (int i = 0; i < spell.DamageMultipliers.Length; i++) // 139-141  					{  						spell.DamageMultipliers[i] = GetFloat(rawData' currentIndex++);  					}    					spell.MinFactionId = GetUInt32(rawData' currentIndex++);        // 142  					spell.MinReputation = GetUInt32(rawData' currentIndex++);       // 143  					spell.RequiredAuraVision = GetUInt32(rawData' currentIndex++);  // 144    					spell.RequiredToolCategories = new ToolCategory[2];       // 145-146  					for (int i = 0; i < spell.RequiredToolCategories.Length; i++)  					{  						spell.RequiredToolCategories[i] = (ToolCategory)GetUInt32(rawData' currentIndex++);  					}    					spell.AreaGroupId = GetUInt32(rawData' currentIndex++);  					spell.SchoolMask = (DamageSchoolMask)GetUInt32(rawData' currentIndex++);    					var runeCostId = GetInt32(rawData' currentIndex++);  					if (runeCostId != 0)  					{  						mappeddbcRuneCostReader.Entries.TryGetValue(runeCostId' out spell.RuneCostEntry);  					}  					spell.MissileId = GetUInt32(rawData' currentIndex++);    					// New 3.1.0. Id from PowerDisplay.dbc  					spell.PowerDisplayId = GetInt32(rawData' currentIndex++);    					// 3.2.2 unk float (array?)  					spell.Unk_322_4_1 = GetUInt32(rawData' currentIndex++);  					spell.Unk_322_4_2 = GetUInt32(rawData' currentIndex++);  					spell.Unk_322_4_3 = GetUInt32(rawData' currentIndex++);    					// 3.2.2  					spell.spellDescriptionVariablesID = GetUInt32(rawData' currentIndex++);  				}  				catch (Exception e)  				{  					throw new Exception(string.Format("Unable to parse Spell from DBC file. Index: " + currentIndex)' e);  				}
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,Convert,The following statement contains a magic number: try  				{  					spell.Category = GetUInt32(rawData' currentIndex++);                                   // 1  					spell.DispelType = (DispelType)GetUInt32(rawData' currentIndex++);                     // 2  					spell.Mechanic = (SpellMechanic)GetUInt32(rawData' currentIndex++);                    // 3  					spell.Attributes = (SpellAttributes)GetUInt32(rawData' currentIndex++);                // 4  					spell.AttributesEx = (SpellAttributesEx)GetUInt32(rawData' currentIndex++);            // 5  					spell.AttributesExB = (SpellAttributesExB)GetUInt32(rawData' currentIndex++);          // 6  					spell.AttributesExC = (SpellAttributesExC)GetUInt32(rawData' currentIndex++);          // 7  					spell.AttributesExD = (SpellAttributesExD)GetUInt32(rawData' currentIndex++);          // 8  					spell.AttributesExE = (SpellAttributesExE)GetUInt32(rawData' currentIndex++);          // 9  					spell.AttributesExF = (SpellAttributesExF)GetUInt32(rawData' currentIndex++);          // 10  					spell.RequiredShapeshiftMask = (ShapeshiftMask)GetUInt32(rawData' currentIndex++);     // 11  					spell.Unk_322_1 = GetUInt32(rawData' currentIndex++);                                  // 12  					spell.ExcludeShapeshiftMask = (ShapeshiftMask)GetUInt32(rawData' currentIndex++);      // 13  					spell.Unk_322_2 = GetUInt32(rawData' currentIndex++);                                  // 14  					spell.TargetFlags = (SpellTargetFlags)GetUInt32(rawData' currentIndex++);              // 15  					spell.Unk_322_3 = GetUInt32(rawData' currentIndex++);                                  // 16  					spell.CreatureMask = (CreatureMask)GetUInt32(rawData' currentIndex++);    // 17  					spell.RequiredSpellFocus = (SpellFocus)GetUInt32(rawData' currentIndex++);              // 18  					spell.FacingFlags = (SpellFacingFlags)GetUInt32(rawData' currentIndex++);               // 19  					spell.RequiredCasterAuraState = (AuraState)GetUInt32(rawData' currentIndex++);          // 20  					spell.RequiredTargetAuraState = (AuraState)GetUInt32(rawData' currentIndex++);          // 21  					spell.ExcludeCasterAuraState = (AuraState)GetUInt32(rawData' currentIndex++);           // 22  					spell.ExcludeTargetAuraState = (AuraState)GetUInt32(rawData' currentIndex++);           // 23  					spell.RequiredCasterAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                        // 24  					spell.RequiredTargetAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                        // 25  					spell.ExcludeCasterAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                         // 26  					spell.ExcludeTargetAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                         // 27    					int castTimeIndex = GetInt32(rawData' currentIndex++);                                  // 28  					if (castTimeIndex > 0)  					{  						if (!mappeddbcCastTimeReader.Entries.TryGetValue(castTimeIndex' out spell.CastDelay))  						{  							ContentMgr.OnInvalidClientData("DBC Spell \"{0}\" referred to invalid CastTime-Entry: {1}"' spell.Name' castTimeIndex);  						}  					}    					spell.CooldownTime = Math.Max(0' GetInt32(rawData' currentIndex++) - (int)spell.CastDelay);     // 29  					spell.categoryCooldownTime = GetInt32(rawData' currentIndex++);                                 // 30  					spell.InterruptFlags = (InterruptFlags)GetUInt32(rawData' currentIndex++);                      // 31  					spell.AuraInterruptFlags = (AuraInterruptFlags)GetUInt32(rawData' currentIndex++);              // 32  					spell.ChannelInterruptFlags = (ChannelInterruptFlags)GetUInt32(rawData' currentIndex++);        // 33  					spell.ProcTriggerFlags = (ProcTriggerFlags)GetUInt32(rawData' currentIndex++);                  // 34  					spell.ProcChance = GetUInt32(rawData' currentIndex++);                                          // 35  					spell.ProcCharges = GetInt32(rawData' currentIndex++);                                          // 36  					spell.MaxLevel = GetInt32(rawData' currentIndex++);                                             // 37  					spell.BaseLevel = GetInt32(rawData' currentIndex++);                                            // 38  					spell.Level = GetInt32(rawData' currentIndex++);                                                // 30    					var durationIndex = GetInt32(rawData' currentIndex++);                                          // 40  					if (durationIndex > 0)  					{  						if (!mappeddbcDurationReader.Entries.TryGetValue(durationIndex' out spell.Durations))  						{  							ContentMgr.OnInvalidClientData("DBC Spell \"{0}\" referred to invalid Duration-Entry: {1}"' spell.Name' durationIndex);  						}  					}    					spell.PowerType = (PowerType)GetUInt32(rawData' currentIndex++);        // 41  					spell.PowerCost = GetInt32(rawData' currentIndex++);                    // 42  					spell.PowerCostPerlevel = GetInt32(rawData' currentIndex++);            // 43  					spell.PowerPerSecond = GetInt32(rawData' currentIndex++);               // 44  					spell.PowerPerSecondPerLevel = GetInt32(rawData' currentIndex++);       // 45    					var rangeIndex = GetInt32(rawData' currentIndex++);                     // 46  					if (rangeIndex > 0)  					{  						if (!mappeddbcRangeReader.Entries.TryGetValue(rangeIndex' out spell.Range))  						{  							ContentMgr.OnInvalidClientData("DBC Spell \"{0}\" referred to invalid Range-Entry: {1}"' spell.Name' rangeIndex);  						}  					}    					spell.ProjectileSpeed = GetFloat(rawData' currentIndex++);              // 47  					spell.ModalNextSpell = (SpellId)GetUInt32(rawData' currentIndex++);     // 48    					spell.MaxStackCount = GetInt32(rawData' currentIndex++);                // 49    					spell.RequiredToolIds = new uint[2];                                    // 50-51  					for (var i = 0; i < spell.RequiredToolIds.Length; i++)  					{  						spell.RequiredToolIds[i] = GetUInt32(rawData' currentIndex++);  					}    					List<ItemStackDescription> reagents = null;  					int reagentStart = currentIndex;  					for (int i = 0; i < 8; i++)                                             //52-59  					{  						ReadReagent(rawData' reagentStart' i' out currentIndex' ref reagents);  					}  					if (reagents != null)  					{  						spell.Reagents = reagents.ToArray();  					}  					else  					{  						spell.Reagents = ItemStackDescription.EmptyArray;  					}  					spell.RequiredItemClass = (ItemClass)GetUInt32(rawData' currentIndex++);   //68  					if (spell.RequiredItemClass < 0)  					{  						spell.RequiredItemClass = ItemClass.None;  					}    					spell.RequiredItemSubClassMask = (ItemSubClassMask)GetUInt32(rawData' currentIndex++); // 69  					if (spell.RequiredItemSubClassMask < 0)  					{  						spell.RequiredItemSubClassMask = ItemSubClassMask.None;  					}    					spell.RequiredItemInventorySlotMask = (InventorySlotTypeMask)GetUInt32(rawData' currentIndex++); // 70  					if (spell.RequiredItemInventorySlotMask < 0)  					{  						spell.RequiredItemInventorySlotMask = InventorySlotTypeMask.None;  					}    					var effects = new List<SpellEffect>(3);     // 71 - 127  					int effectStart = currentIndex;    					for (int i = 0; i < 3; i++)  					{  						var effect = ReadEffect(spell' rawData' effectStart' i' out currentIndex);  						if (effect != null &&  							(effect.EffectType != SpellEffectType.None ||  								effect.BasePoints > 0 ||  								effect.AuraType != 0 ||  								effect.TriggerSpellId != 0))  						{    							effects.Add(effect);  						}  					}  					spell.Effects = effects.ToArray();    					spell.Visual = GetUInt32(rawData' currentIndex++);              // 128  					spell.Visual2 = GetUInt32(rawData' currentIndex++);             // 129  					spell.SpellbookIconId = GetUInt32(rawData' currentIndex++);     // 130  					spell.BuffIconId = GetUInt32(rawData' currentIndex++);          // 131  					spell.Priority = GetUInt32(rawData' currentIndex++);            // 132    					spell.Name = GetString(rawData' ref currentIndex);              // 133  					spell.RankDesc = GetString(rawData' ref currentIndex);          // 124  					spell.Description = GetString(rawData' ref currentIndex);       // 125  					spell.BuffDescription = GetString(rawData' ref currentIndex);   // 126    					spell.PowerCostPercentage = GetInt32(rawData' currentIndex++);  // 127  					spell.StartRecoveryTime = GetInt32(rawData' currentIndex++);    // 128  					spell.StartRecoveryCategory = GetInt32(rawData' currentIndex++);    // 129  					spell.MaxTargetLevel = GetUInt32(rawData' currentIndex++);          // 130  					spell.SpellClassSet = (SpellClassSet)GetUInt32(rawData' currentIndex++);    // 131    					spell.SpellClassMask[0] = GetUInt32(rawData' currentIndex++);   // 132  					spell.SpellClassMask[1] = GetUInt32(rawData' currentIndex++);   // 133  					spell.SpellClassMask[2] = GetUInt32(rawData' currentIndex++);   // 134    					spell.MaxTargets = GetUInt32(rawData' currentIndex++);          // 135  					spell.DamageType = (DamageType)GetUInt32(rawData' currentIndex++);   // 136  					spell.PreventionType = (SpellPreventionType)GetUInt32(rawData' currentIndex++); // 137  					spell.StanceBarOrder = GetInt32(rawData' currentIndex++);  // 138    					for (int i = 0; i < spell.DamageMultipliers.Length; i++) // 139-141  					{  						spell.DamageMultipliers[i] = GetFloat(rawData' currentIndex++);  					}    					spell.MinFactionId = GetUInt32(rawData' currentIndex++);        // 142  					spell.MinReputation = GetUInt32(rawData' currentIndex++);       // 143  					spell.RequiredAuraVision = GetUInt32(rawData' currentIndex++);  // 144    					spell.RequiredToolCategories = new ToolCategory[2];       // 145-146  					for (int i = 0; i < spell.RequiredToolCategories.Length; i++)  					{  						spell.RequiredToolCategories[i] = (ToolCategory)GetUInt32(rawData' currentIndex++);  					}    					spell.AreaGroupId = GetUInt32(rawData' currentIndex++);  					spell.SchoolMask = (DamageSchoolMask)GetUInt32(rawData' currentIndex++);    					var runeCostId = GetInt32(rawData' currentIndex++);  					if (runeCostId != 0)  					{  						mappeddbcRuneCostReader.Entries.TryGetValue(runeCostId' out spell.RuneCostEntry);  					}  					spell.MissileId = GetUInt32(rawData' currentIndex++);    					// New 3.1.0. Id from PowerDisplay.dbc  					spell.PowerDisplayId = GetInt32(rawData' currentIndex++);    					// 3.2.2 unk float (array?)  					spell.Unk_322_4_1 = GetUInt32(rawData' currentIndex++);  					spell.Unk_322_4_2 = GetUInt32(rawData' currentIndex++);  					spell.Unk_322_4_3 = GetUInt32(rawData' currentIndex++);    					// 3.2.2  					spell.spellDescriptionVariablesID = GetUInt32(rawData' currentIndex++);  				}  				catch (Exception e)  				{  					throw new Exception(string.Format("Unable to parse Spell from DBC file. Index: " + currentIndex)' e);  				}
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,Convert,The following statement contains a magic number: try  				{  					spell.Category = GetUInt32(rawData' currentIndex++);                                   // 1  					spell.DispelType = (DispelType)GetUInt32(rawData' currentIndex++);                     // 2  					spell.Mechanic = (SpellMechanic)GetUInt32(rawData' currentIndex++);                    // 3  					spell.Attributes = (SpellAttributes)GetUInt32(rawData' currentIndex++);                // 4  					spell.AttributesEx = (SpellAttributesEx)GetUInt32(rawData' currentIndex++);            // 5  					spell.AttributesExB = (SpellAttributesExB)GetUInt32(rawData' currentIndex++);          // 6  					spell.AttributesExC = (SpellAttributesExC)GetUInt32(rawData' currentIndex++);          // 7  					spell.AttributesExD = (SpellAttributesExD)GetUInt32(rawData' currentIndex++);          // 8  					spell.AttributesExE = (SpellAttributesExE)GetUInt32(rawData' currentIndex++);          // 9  					spell.AttributesExF = (SpellAttributesExF)GetUInt32(rawData' currentIndex++);          // 10  					spell.RequiredShapeshiftMask = (ShapeshiftMask)GetUInt32(rawData' currentIndex++);     // 11  					spell.Unk_322_1 = GetUInt32(rawData' currentIndex++);                                  // 12  					spell.ExcludeShapeshiftMask = (ShapeshiftMask)GetUInt32(rawData' currentIndex++);      // 13  					spell.Unk_322_2 = GetUInt32(rawData' currentIndex++);                                  // 14  					spell.TargetFlags = (SpellTargetFlags)GetUInt32(rawData' currentIndex++);              // 15  					spell.Unk_322_3 = GetUInt32(rawData' currentIndex++);                                  // 16  					spell.CreatureMask = (CreatureMask)GetUInt32(rawData' currentIndex++);    // 17  					spell.RequiredSpellFocus = (SpellFocus)GetUInt32(rawData' currentIndex++);              // 18  					spell.FacingFlags = (SpellFacingFlags)GetUInt32(rawData' currentIndex++);               // 19  					spell.RequiredCasterAuraState = (AuraState)GetUInt32(rawData' currentIndex++);          // 20  					spell.RequiredTargetAuraState = (AuraState)GetUInt32(rawData' currentIndex++);          // 21  					spell.ExcludeCasterAuraState = (AuraState)GetUInt32(rawData' currentIndex++);           // 22  					spell.ExcludeTargetAuraState = (AuraState)GetUInt32(rawData' currentIndex++);           // 23  					spell.RequiredCasterAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                        // 24  					spell.RequiredTargetAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                        // 25  					spell.ExcludeCasterAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                         // 26  					spell.ExcludeTargetAuraId = (SpellId)GetUInt32(rawData' currentIndex++);                         // 27    					int castTimeIndex = GetInt32(rawData' currentIndex++);                                  // 28  					if (castTimeIndex > 0)  					{  						if (!mappeddbcCastTimeReader.Entries.TryGetValue(castTimeIndex' out spell.CastDelay))  						{  							ContentMgr.OnInvalidClientData("DBC Spell \"{0}\" referred to invalid CastTime-Entry: {1}"' spell.Name' castTimeIndex);  						}  					}    					spell.CooldownTime = Math.Max(0' GetInt32(rawData' currentIndex++) - (int)spell.CastDelay);     // 29  					spell.categoryCooldownTime = GetInt32(rawData' currentIndex++);                                 // 30  					spell.InterruptFlags = (InterruptFlags)GetUInt32(rawData' currentIndex++);                      // 31  					spell.AuraInterruptFlags = (AuraInterruptFlags)GetUInt32(rawData' currentIndex++);              // 32  					spell.ChannelInterruptFlags = (ChannelInterruptFlags)GetUInt32(rawData' currentIndex++);        // 33  					spell.ProcTriggerFlags = (ProcTriggerFlags)GetUInt32(rawData' currentIndex++);                  // 34  					spell.ProcChance = GetUInt32(rawData' currentIndex++);                                          // 35  					spell.ProcCharges = GetInt32(rawData' currentIndex++);                                          // 36  					spell.MaxLevel = GetInt32(rawData' currentIndex++);                                             // 37  					spell.BaseLevel = GetInt32(rawData' currentIndex++);                                            // 38  					spell.Level = GetInt32(rawData' currentIndex++);                                                // 30    					var durationIndex = GetInt32(rawData' currentIndex++);                                          // 40  					if (durationIndex > 0)  					{  						if (!mappeddbcDurationReader.Entries.TryGetValue(durationIndex' out spell.Durations))  						{  							ContentMgr.OnInvalidClientData("DBC Spell \"{0}\" referred to invalid Duration-Entry: {1}"' spell.Name' durationIndex);  						}  					}    					spell.PowerType = (PowerType)GetUInt32(rawData' currentIndex++);        // 41  					spell.PowerCost = GetInt32(rawData' currentIndex++);                    // 42  					spell.PowerCostPerlevel = GetInt32(rawData' currentIndex++);            // 43  					spell.PowerPerSecond = GetInt32(rawData' currentIndex++);               // 44  					spell.PowerPerSecondPerLevel = GetInt32(rawData' currentIndex++);       // 45    					var rangeIndex = GetInt32(rawData' currentIndex++);                     // 46  					if (rangeIndex > 0)  					{  						if (!mappeddbcRangeReader.Entries.TryGetValue(rangeIndex' out spell.Range))  						{  							ContentMgr.OnInvalidClientData("DBC Spell \"{0}\" referred to invalid Range-Entry: {1}"' spell.Name' rangeIndex);  						}  					}    					spell.ProjectileSpeed = GetFloat(rawData' currentIndex++);              // 47  					spell.ModalNextSpell = (SpellId)GetUInt32(rawData' currentIndex++);     // 48    					spell.MaxStackCount = GetInt32(rawData' currentIndex++);                // 49    					spell.RequiredToolIds = new uint[2];                                    // 50-51  					for (var i = 0; i < spell.RequiredToolIds.Length; i++)  					{  						spell.RequiredToolIds[i] = GetUInt32(rawData' currentIndex++);  					}    					List<ItemStackDescription> reagents = null;  					int reagentStart = currentIndex;  					for (int i = 0; i < 8; i++)                                             //52-59  					{  						ReadReagent(rawData' reagentStart' i' out currentIndex' ref reagents);  					}  					if (reagents != null)  					{  						spell.Reagents = reagents.ToArray();  					}  					else  					{  						spell.Reagents = ItemStackDescription.EmptyArray;  					}  					spell.RequiredItemClass = (ItemClass)GetUInt32(rawData' currentIndex++);   //68  					if (spell.RequiredItemClass < 0)  					{  						spell.RequiredItemClass = ItemClass.None;  					}    					spell.RequiredItemSubClassMask = (ItemSubClassMask)GetUInt32(rawData' currentIndex++); // 69  					if (spell.RequiredItemSubClassMask < 0)  					{  						spell.RequiredItemSubClassMask = ItemSubClassMask.None;  					}    					spell.RequiredItemInventorySlotMask = (InventorySlotTypeMask)GetUInt32(rawData' currentIndex++); // 70  					if (spell.RequiredItemInventorySlotMask < 0)  					{  						spell.RequiredItemInventorySlotMask = InventorySlotTypeMask.None;  					}    					var effects = new List<SpellEffect>(3);     // 71 - 127  					int effectStart = currentIndex;    					for (int i = 0; i < 3; i++)  					{  						var effect = ReadEffect(spell' rawData' effectStart' i' out currentIndex);  						if (effect != null &&  							(effect.EffectType != SpellEffectType.None ||  								effect.BasePoints > 0 ||  								effect.AuraType != 0 ||  								effect.TriggerSpellId != 0))  						{    							effects.Add(effect);  						}  					}  					spell.Effects = effects.ToArray();    					spell.Visual = GetUInt32(rawData' currentIndex++);              // 128  					spell.Visual2 = GetUInt32(rawData' currentIndex++);             // 129  					spell.SpellbookIconId = GetUInt32(rawData' currentIndex++);     // 130  					spell.BuffIconId = GetUInt32(rawData' currentIndex++);          // 131  					spell.Priority = GetUInt32(rawData' currentIndex++);            // 132    					spell.Name = GetString(rawData' ref currentIndex);              // 133  					spell.RankDesc = GetString(rawData' ref currentIndex);          // 124  					spell.Description = GetString(rawData' ref currentIndex);       // 125  					spell.BuffDescription = GetString(rawData' ref currentIndex);   // 126    					spell.PowerCostPercentage = GetInt32(rawData' currentIndex++);  // 127  					spell.StartRecoveryTime = GetInt32(rawData' currentIndex++);    // 128  					spell.StartRecoveryCategory = GetInt32(rawData' currentIndex++);    // 129  					spell.MaxTargetLevel = GetUInt32(rawData' currentIndex++);          // 130  					spell.SpellClassSet = (SpellClassSet)GetUInt32(rawData' currentIndex++);    // 131    					spell.SpellClassMask[0] = GetUInt32(rawData' currentIndex++);   // 132  					spell.SpellClassMask[1] = GetUInt32(rawData' currentIndex++);   // 133  					spell.SpellClassMask[2] = GetUInt32(rawData' currentIndex++);   // 134    					spell.MaxTargets = GetUInt32(rawData' currentIndex++);          // 135  					spell.DamageType = (DamageType)GetUInt32(rawData' currentIndex++);   // 136  					spell.PreventionType = (SpellPreventionType)GetUInt32(rawData' currentIndex++); // 137  					spell.StanceBarOrder = GetInt32(rawData' currentIndex++);  // 138    					for (int i = 0; i < spell.DamageMultipliers.Length; i++) // 139-141  					{  						spell.DamageMultipliers[i] = GetFloat(rawData' currentIndex++);  					}    					spell.MinFactionId = GetUInt32(rawData' currentIndex++);        // 142  					spell.MinReputation = GetUInt32(rawData' currentIndex++);       // 143  					spell.RequiredAuraVision = GetUInt32(rawData' currentIndex++);  // 144    					spell.RequiredToolCategories = new ToolCategory[2];       // 145-146  					for (int i = 0; i < spell.RequiredToolCategories.Length; i++)  					{  						spell.RequiredToolCategories[i] = (ToolCategory)GetUInt32(rawData' currentIndex++);  					}    					spell.AreaGroupId = GetUInt32(rawData' currentIndex++);  					spell.SchoolMask = (DamageSchoolMask)GetUInt32(rawData' currentIndex++);    					var runeCostId = GetInt32(rawData' currentIndex++);  					if (runeCostId != 0)  					{  						mappeddbcRuneCostReader.Entries.TryGetValue(runeCostId' out spell.RuneCostEntry);  					}  					spell.MissileId = GetUInt32(rawData' currentIndex++);    					// New 3.1.0. Id from PowerDisplay.dbc  					spell.PowerDisplayId = GetInt32(rawData' currentIndex++);    					// 3.2.2 unk float (array?)  					spell.Unk_322_4_1 = GetUInt32(rawData' currentIndex++);  					spell.Unk_322_4_2 = GetUInt32(rawData' currentIndex++);  					spell.Unk_322_4_3 = GetUInt32(rawData' currentIndex++);    					// 3.2.2  					spell.spellDescriptionVariablesID = GetUInt32(rawData' currentIndex++);  				}  				catch (Exception e)  				{  					throw new Exception(string.Format("Unable to parse Spell from DBC file. Index: " + currentIndex)' e);  				}
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadReagent,The following statement contains a magic number: currentIndex += 8;
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadReagent,The following statement contains a magic number: currentIndex += 8 - reagentNum;
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadEffect,The following statement contains a magic number: currentIndex += 3;
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadEffect,The following statement contains a magic number: currentIndex += 3;
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadEffect,The following statement contains a magic number: currentIndex += 3;
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadEffect,The following statement contains a magic number: currentIndex += 3;
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadEffect,The following statement contains a magic number: currentIndex += 3;
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadEffect,The following statement contains a magic number: currentIndex += 3;
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadEffect,The following statement contains a magic number: currentIndex += 3;
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadEffect,The following statement contains a magic number: currentIndex += 3;
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadEffect,The following statement contains a magic number: currentIndex += 3;
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadEffect,The following statement contains a magic number: currentIndex += 3;
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadEffect,The following statement contains a magic number: currentIndex += 3;
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadEffect,The following statement contains a magic number: currentIndex += 3;
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadEffect,The following statement contains a magic number: currentIndex += 3;
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadEffect,The following statement contains a magic number: currentIndex += 3;
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadEffect,The following statement contains a magic number: currentIndex += 3;
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadEffect,The following statement contains a magic number: currentIndex += 3;
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadEffect,The following statement contains a magic number: currentIndex += 3 - effectNum;
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadEffect,The following statement contains a magic number: currentIndex += effectNum * 3;
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadEffect,The following statement contains a magic number: effect.AffectMask[2] = GetUInt32(rawData' currentIndex++);
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadEffect,The following statement contains a magic number: currentIndex += (2 - effectNum) * 3;
Magic Number,WCell.RealmServer.Spells,SpellDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Spell.DBC.cs,ReadEffect,The following statement contains a magic number: currentIndex += (2 - effectNum) * 3;
Magic Number,WCell.RealmServer.Spells,SpellEffect,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellEffect.Fields.cs,CalcEffectValue,The following statement contains a magic number: if (caster is Character)  			{  				if (SpellPowerValuePct != 0)  				{  					value += (SpellPowerValuePct * caster.GetDamageDoneMod(Spell.Schools[0]) + 50) / 100;  				}  			}
Magic Number,WCell.RealmServer.Spells,SpellEffect,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellEffect.Fields.cs,CalcEffectValue,The following statement contains a magic number: if (caster is Character)  			{  				if (SpellPowerValuePct != 0)  				{  					value += (SpellPowerValuePct * caster.GetDamageDoneMod(Spell.Schools[0]) + 50) / 100;  				}  			}
Magic Number,WCell.RealmServer.Spells,SpellEffect,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellEffect.Fields.cs,GetRadius,The following statement contains a magic number: if (radius < 5)  			{  				return 5;  			}
Magic Number,WCell.RealmServer.Spells,SpellEffect,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellEffect.Fields.cs,GetRadius,The following statement contains a magic number: if (radius < 5)  			{  				return 5;  			}
Magic Number,WCell.RealmServer.Spells,SpellEffect,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellEffect.Fields.cs,DumpInfo,The following statement contains a magic number: if (lines.Count > 0)  			{  				writer.WriteLine(indent + "Affects: {0}"' lines.ToString("' "));  			}  			else if (AffectMask[0] != 0 || AffectMask[1] != 0 || AffectMask[2] != 0)  			{  				writer.WriteLine(indent + "Affects: <Nothing> ({0}{1}{2})"'  					AffectMask[0].ToString("X8")' AffectMask[1].ToString("X8")' AffectMask[2].ToString("X8"));  			}
Magic Number,WCell.RealmServer.Spells,SpellEffect,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellEffect.Fields.cs,DumpInfo,The following statement contains a magic number: if (lines.Count > 0)  			{  				writer.WriteLine(indent + "Affects: {0}"' lines.ToString("' "));  			}  			else if (AffectMask[0] != 0 || AffectMask[1] != 0 || AffectMask[2] != 0)  			{  				writer.WriteLine(indent + "Affects: <Nothing> ({0}{1}{2})"'  					AffectMask[0].ToString("X8")' AffectMask[1].ToString("X8")' AffectMask[2].ToString("X8"));  			}
Magic Number,WCell.RealmServer.Spells,SpellEffect,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellEffect.Fields.cs,GetTargetString,The following statement contains a magic number: var targets = new List<string>(2);
Magic Number,WCell.RealmServer.Spells,SpellTargetCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Targeting\SpellTargetCollection.cs,SpellTargetCollection,The following statement contains a magic number: m_handlers = new List<SpellEffectHandler>(3);
Magic Number,WCell.RealmServer.Spells,SpellTargetCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Targeting\SpellTargetCollection.cs,EvaluateTarget,The following statement contains a magic number: if (cast.IsAICast)  			{  				// TODO: Should AI prefer targets that do not already have an Aura?  				if (cast.Spell.IsAura && target is Unit)  				{  					var unit = (Unit)target;  					if (unit.Auras.Contains(cast.Spell))  					{  						// reduce target's value  						// number is arbitrarily chosen -> Can lead to issues!  						value += 1000000;  					}  				}  			}
Magic Number,WCell.RealmServer.Spells.Targeting,DefaultTargetAdders,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Targeting\DefaultTargetAdders.cs,AddTargetsInArea,The following statement contains a magic number: if (spell.MaxTargetEffect != null)  			{  				limit = spell.MaxTargetEffect.CalcEffectValue(cast.CasterReference);  			}  			else  			{  				//if IsAllied (used by group/raid spell targeting) it's save to asume the limit is the raid max size (40 players) since some spells have wrong dbc values  				if (targetFilter == DefaultTargetFilters.IsAllied)  				{  					limit = 40;  				}  				else  					limit = (int)spell.MaxTargets;  			}
Magic Number,WCell.RealmServer.Spells.Targeting,DefaultTargetAdders,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Targeting\DefaultTargetAdders.cs,AddTargetsInArea,The following statement contains a magic number: cast.Map.IterateObjects(pos' radius > 0 ? radius : 5' cast.Phase'  				obj =>  				{  					// AoE spells only make sense on Unit targets (at least there is no known spell that does anything else)  					if (obj is Unit && targets.ValidateTarget(obj' targetFilter) == SpellFailedReason.Ok)  					{  						return targets.AddOrReplace(obj' limit);  					}  					return true;  				});
Magic Number,WCell.RealmServer.Spells.Targeting,DefaultTargetAdders,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Targeting\DefaultTargetAdders.cs,AddAllParty,The following statement contains a magic number: if (cast.CasterChar != null)  			{  				// For Characters: Add the whole party  				if (targets.Cast.CasterChar.Group != null)  				{  					foreach (var member in cast.CasterChar.Group)  					{  						var chr = member.Character;  						if (chr != null)  						{  							targets.Add(chr);  						}  					}  				}  				else  				{  					failReason = SpellFailedReason.TargetNotInParty;  				}  			}  			else  			{  				var radius = targets.FirstHandler.GetRadius();  				if (radius == 0)  				{  					// For NPCs: Add all friendly minions around (radius 30 if no radius is set?)  					radius = 30;  				}  				targets.AddAreaSource(cast.Spell.HasHarmfulEffects ? (TargetFilter)DefaultTargetFilters.IsFriendly : DefaultTargetFilters.IsHostile' ref  failReason' radius);  			}
Magic Number,WCell.RealmServer.Spells.Targeting,DefaultTargetAdders,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Targeting\DefaultTargetAdders.cs,AddSecondHighestThreatTarget,The following statement contains a magic number: var nearest = caster.ThreatCollection.GetAggressorByThreatRank(2);
Magic Number,WCell.RealmServer.Spells.Targeting,DefaultTargetEvaluators,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Targeting\DefaultTargetEvaluators.cs,NearestEvaluator,The following statement contains a magic number: return (int)(caster.GetDistanceSq(target) * 10);
Magic Number,WCell.RealmServer.Spells.Targeting,DefaultTargetEvaluators,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Targeting\DefaultTargetEvaluators.cs,AnyWoundedEvaluator,The following statement contains a magic number: if (target is Unit)  			{  				// useful heal spell: Amount to be healed is greater or equal half of what the spell can heal  				// Select anyone with that problem  				var unit = (Unit)target;  				var missingHealth = unit.MaxHealth - unit.Health;  				if (missingHealth >= effectHandler.CalcDamageValue() / 2)  				{  					// good choice  					return -1;  				}  				// not so good choice  				return 0;  			}
Magic Number,WCell.RealmServer.Spells.Targeting,DefaultTargetFilters,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Targeting\DefaultTargetFilters.cs,IsWoundedEnough,The following statement contains a magic number: if (target is Unit)  			{  				// useful heal spell: Amount to be healed is greater or equal half of what the spell can heal  				// Select anyone with that problem  				var unit = (Unit)target;  				var missingHealth = unit.MaxHealth - unit.Health;  				if (missingHealth >= effectHandler.CalcDamageValue() / 2)  				{  					// good choice  					return;  				}  			}
Magic Number,WCell.RealmServer.Battlegrounds.Arenas,ArenaTeam,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\Arenas\ArenaTeam.cs,AddMember,The following statement contains a magic number: if(Members.Count >= Type*2)                  return null;
Magic Number,WCell.RealmServer.Battlegrounds.Arenas,ArenaTeamMember,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\Arenas\ArenaTeamMember.cs,ArenaTeamMember,The following statement contains a magic number: _personalRating = 1500;
Magic Number,WCell.RealmServer.Battlegrounds.Arenas,ArenaTeamStats,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\Arenas\ArenaTeamStats.cs,ArenaTeamStats,The following statement contains a magic number: rating = 1500;
Magic Number,WCell.RealmServer.Battlegrounds.Arenas,ArenaMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\Arenas\ArenaMgr.cs,IsValidArenaTeamName,The following statement contains a magic number: if (name.Length < 3 && name.Length > MaxArenaTeamNameLength)              {                  return false;              }
Magic Number,WCell.RealmServer.Battlegrounds,PvPDifficultyConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\PvPDifficulty.cs,ConvertTo,The following statement contains a magic number: var entry = new PvPDifficultyEntry                              {                                  Id = (id = GetInt32(rawData' 0))'                                  mapId = (MapId)GetInt32(rawData' 1)'                                  bracketId = GetInt32(rawData' 2)'                                  minLevel = GetInt32(rawData' 3)'                                  maxLevel = GetInt32(rawData' 4)'                              };
Magic Number,WCell.RealmServer.Battlegrounds,PvPDifficultyConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\PvPDifficulty.cs,ConvertTo,The following statement contains a magic number: var entry = new PvPDifficultyEntry                              {                                  Id = (id = GetInt32(rawData' 0))'                                  mapId = (MapId)GetInt32(rawData' 1)'                                  bracketId = GetInt32(rawData' 2)'                                  minLevel = GetInt32(rawData' 3)'                                  maxLevel = GetInt32(rawData' 4)'                              };
Magic Number,WCell.RealmServer.Battlegrounds,PvPDifficultyConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\PvPDifficulty.cs,ConvertTo,The following statement contains a magic number: var entry = new PvPDifficultyEntry                              {                                  Id = (id = GetInt32(rawData' 0))'                                  mapId = (MapId)GetInt32(rawData' 1)'                                  bracketId = GetInt32(rawData' 2)'                                  minLevel = GetInt32(rawData' 3)'                                  maxLevel = GetInt32(rawData' 4)'                              };
Magic Number,WCell.RealmServer.Battlegrounds,BattlegroundTeam,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\BattlegroundTeam.cs,DistributeSharedHonor,The following statement contains a magic number: ForeachCharacter((chr) =>  			{  				if (chr.IsInRange(new SimpleRange(0.0f' 40.0f)' earner))  				{  					chr.GiveHonorPoints(bonus);  					chr.KillsToday++;  					chr.LifetimeHonorableKills++;  					HonorHandler.SendPVPCredit(chr' bonus * 10' victim);  				}  			});
Magic Number,WCell.RealmServer.Battlegrounds,GlobalBattlegroundQueue,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\GlobalBattlegroundQueue.cs,SetThreshold,The following statement contains a magic number: m_CreationPlayerThreshold = (Template.MapTemplate.MaxPlayerCount * defaultBGCreationPlayerThresholdPct) / 100;
Magic Number,WCell.RealmServer.Battlegrounds,DBCWorldSafeLocationConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\WorldSafeLocation.cs,ConvertTo,The following statement contains a magic number: location.X = rawData.GetFloat(2);
Magic Number,WCell.RealmServer.Battlegrounds,DBCWorldSafeLocationConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\WorldSafeLocation.cs,ConvertTo,The following statement contains a magic number: location.Y = rawData.GetFloat(3);
Magic Number,WCell.RealmServer.Battlegrounds,DBCWorldSafeLocationConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\WorldSafeLocation.cs,ConvertTo,The following statement contains a magic number: location.Z = rawData.GetFloat(4);
Magic Number,WCell.RealmServer.Battlegrounds,Battleground,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\Battleground.cs,Battleground,The following statement contains a magic number: _teams = new BattlegroundTeam[2];
Magic Number,WCell.RealmServer.Battlegrounds,Battleground,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\Battleground.cs,StartPreparation,The following statement contains a magic number: ExecuteInContext(() =>  			{  				if (!IsOpen) return;    				_status = BattlegroundStatus.Preparing;    				if (_preparationSpell != null)  				{  					foreach (Character chr in m_characters)  					{  						chr.SpellCast.TriggerSelf(_preparationSpell);  					}  				}    				CallDelayed(PreparationTimeMillis / 2' OnPrepareHalftime);    				OnPrepareBegin();  			});
Magic Number,WCell.RealmServer.Battlegrounds,Battleground,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\Battleground.cs,OnPrepareHalftime,The following statement contains a magic number: CallDelayed(PreparationTimeMillis / 2' StartFight);
Magic Number,WCell.RealmServer.Battlegrounds,Battleground,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\Battleground.cs,JoinTeam,The following statement contains a magic number: if (_status == BattlegroundStatus.None &&  			   PlayerCount >= (MaxPlayerCount * StartPlayerPct) / 100)  			{  				StartPreparation();  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,OnStopSwimming,The following statement contains a magic number: m_swimSurfaceHeight = -2048;
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,OnMove,The following statement contains a magic number: if (m_fallStart > 0 && now - m_fallStart > 3000 && m_position.Z == LastPosition.Z)  			{  				if (IsAlive && Flying == 0 && Hovering == 0 && FeatherFalling == 0 && !IsImmune(DamageSchool.Physical))  				{  					var fallDamage = FallDamageGenerator.GetFallDmg(this' m_fallStartHeight - m_position.Z);  					  					if (fallDamage > 0)  					{  						// If the character current health is higher then the fall damage' the player survived the fall.  						if (fallDamage < Health)  						{  							Achievements.CheckPossibleAchievementUpdates(AchievementCriteriaType.FallWithoutDying' (uint)(m_fallStartHeight - m_position.Z));  						}  					//	DoEnvironmentalDamage(EnviromentalDamageType.Fall' fallDamage);  					}    					m_fallStart = 0;  					m_fallStartHeight = 0;  				}  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,OnMove,The following statement contains a magic number: if (SpeedHackCheck)  			{  				var msg = "You have been identified as a SpeedHacker. - Byebye!";    				// simple SpeedHack protection  				int latency = Client.Latency;  				int delay = now - m_lastMoveTime + Math.Max(1000' latency);    				float speed = Flying > 0 ? FlightSpeed : RunSpeed;  				float maxDistance = (speed / 1000f) * delay * SpeedHackToleranceFactor;  				if (!IsInRadius(ref LastPosition' maxDistance))  				{  					// most certainly a speed hacker  					log.Warn("WARNING: Possible speedhacker [{0}] moved {1} yards in {2} milliseconds (Latency: {3}' Tolerance: {4})"'  							 this' GetDistance(ref LastPosition)' delay' latency' SpeedHackToleranceFactor);  				}    				Kick(msg);  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,SetQuestCount,The following statement contains a magic number: var hiLo = interactionIndex % 2;
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,ResetDailyQuests,The following statement contains a magic number: for (int i = 0; i < 25; i++)  			{  				SetUInt32((PlayerFields.DAILY_QUESTS_1 + i)' 0);  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,BindActionButton,The following statement contains a magic number: btnIndex = btnIndex * 4;
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,BindActionButton,The following statement contains a magic number: if (action == 0)  			{  				// unset it  				Array.Copy(ActionButton.EmptyButton' 0' actions' btnIndex' ActionButton.Size);  			}  			else  			{  				actions[btnIndex] = (byte)(action & 0x0000FF);  				actions[btnIndex + 1] = (byte)((action & 0x00FF00) >> 8);  				actions[btnIndex + 2] = (byte)((action & 0xFF0000) >> 16);  				actions[btnIndex + 3] = type;  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,BindActionButton,The following statement contains a magic number: if (action == 0)  			{  				// unset it  				Array.Copy(ActionButton.EmptyButton' 0' actions' btnIndex' ActionButton.Size);  			}  			else  			{  				actions[btnIndex] = (byte)(action & 0x0000FF);  				actions[btnIndex + 1] = (byte)((action & 0x00FF00) >> 8);  				actions[btnIndex + 2] = (byte)((action & 0xFF0000) >> 16);  				actions[btnIndex + 3] = type;  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,BindActionButton,The following statement contains a magic number: if (action == 0)  			{  				// unset it  				Array.Copy(ActionButton.EmptyButton' 0' actions' btnIndex' ActionButton.Size);  			}  			else  			{  				actions[btnIndex] = (byte)(action & 0x0000FF);  				actions[btnIndex + 1] = (byte)((action & 0x00FF00) >> 8);  				actions[btnIndex + 2] = (byte)((action & 0xFF0000) >> 16);  				actions[btnIndex + 3] = type;  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,BindActionButton,The following statement contains a magic number: if (action == 0)  			{  				// unset it  				Array.Copy(ActionButton.EmptyButton' 0' actions' btnIndex' ActionButton.Size);  			}  			else  			{  				actions[btnIndex] = (byte)(action & 0x0000FF);  				actions[btnIndex + 1] = (byte)((action & 0x00FF00) >> 8);  				actions[btnIndex + 2] = (byte)((action & 0xFF0000) >> 16);  				actions[btnIndex + 3] = type;  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,GetActionFromActionButton,The following statement contains a magic number: buttonIndex = buttonIndex * 4;
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,GetTypeFromActionButton,The following statement contains a magic number: buttonIndex = buttonIndex * 4;
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,GetTypeFromActionButton,The following statement contains a magic number: return CurrentSpecProfile.ActionButtons[buttonIndex + 3];
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,IsZoneExplored,The following statement contains a magic number: var byteNo = explorationBit >> 3;
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,IsZoneExplored,The following statement contains a magic number: if ((byteNo >> 2) >= UpdateFieldMgr.ExplorationZoneFieldSize)  			{  				// Value is out of range' get out of here!  				return false;  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,IsZoneExplored,The following statement contains a magic number: var bit = explorationBit % 8;
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,SetZoneExplored,The following statement contains a magic number: var fieldNo = zone.ExplorationBit >> 5;
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,SetZoneExplored,The following statement contains a magic number: var byteNo = zone.ExplorationBit >> 3;
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,SetZoneExplored,The following statement contains a magic number: var bit = (zone.ExplorationBit) % 8;
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,SetZoneExplored,The following statement contains a magic number: if ((byteVal & bitMask) == 0)  			{  				// not explored yet  				if (gainXp)  				{  					var xp = XpGenerator.GetExplorationXp(zone' this);  					if (xp > 0)  					{  						if (Level >= RealmServerConfiguration.MaxCharacterLevel)  						{  							// already at level cap  							CharacterHandler.SendExplorationExperience(this' zone.Id' 0);  						}  						else  						{  							// gain XP  							GainXp(xp);  							CharacterHandler.SendExplorationExperience(this' zone.Id' xp);  						}  					}  				}    				// set the bit client side  				var newValue = (byte)(byteVal | bitMask);  				SetByte((int)PlayerFields.EXPLORED_ZONES_1 + fieldNo' byteNo % 4' newValue);    				// cache the new value for easy access  				m_record.ExploredZones[byteNo] = newValue;    				// check possible achievements  				foreach (var worldMapOverlay in zone.WorldMapOverlays)  				{  					Achievements.CheckPossibleAchievementUpdates(AchievementCriteriaType.ExploreArea' (uint)worldMapOverlay);  				}    				// explore parent  				if (zone.ParentZone != null)  				{  					SetZoneExplored(zone.ParentZone' gainXp);  				}  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,HasTitle,The following statement contains a magic number: var fieldIndexOffset = (int)bitIndex / 32 + (int)PlayerFields._FIELD_KNOWN_TITLES;
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,HasTitle,The following statement contains a magic number: uint flag = (uint)(1 << (int)bitIndex % 32);
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,SetTitle,The following statement contains a magic number: var fieldIndexOffset = (int)bitIndex / 32 + (int)PlayerFields._FIELD_KNOWN_TITLES;
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,SetTitle,The following statement contains a magic number: var flag = (uint)(1 << (int)bitIndex % 32);
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,ResurrectWithConsequences,The following statement contains a magic number: if (Level >= ResurrectionSicknessStartLevel)  			{  				// Apply resurrection sickness and durability loss (see http://www.wowwiki.com/Death)  				Auras.CreateSelf(SpellId.ResurrectionSickness' true);    				if (PlayerInventory.SHResDurabilityLossPct != 0)  				{  					m_inventory.Iterate(item =>  					{  						if (item.MaxDurability > 0)  						{  							item.Durability = Math.Max(0' item.Durability -  								(((item.Durability * PlayerInventory.SHResDurabilityLossPct) + 50) / 100));  						}  						return true;  					});  				}  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,ResurrectWithConsequences,The following statement contains a magic number: if (Level >= ResurrectionSicknessStartLevel)  			{  				// Apply resurrection sickness and durability loss (see http://www.wowwiki.com/Death)  				Auras.CreateSelf(SpellId.ResurrectionSickness' true);    				if (PlayerInventory.SHResDurabilityLossPct != 0)  				{  					m_inventory.Iterate(item =>  					{  						if (item.MaxDurability > 0)  						{  							item.Durability = Math.Max(0' item.Durability -  								(((item.Durability * PlayerInventory.SHResDurabilityLossPct) + 50) / 100));  						}  						return true;  					});  				}  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,GainCombatXp,The following statement contains a magic number: var xp = experience + (experience * KillExperienceGainModifierPercent / 100);
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,AddLanguage,The following statement contains a magic number: if (!m_skills.Contains(desc.SkillId))  			{  				m_skills.Add(desc.SkillId' 300' 300' true);  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,AddLanguage,The following statement contains a magic number: if (!m_skills.Contains(desc.SkillId))  			{  				m_skills.Add(desc.SkillId' 300' 300' true);  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,OpenBank,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_SHOW_BANK' 8))  			{  				packet.Write(banker.EntityId);  				m_client.Send(packet);  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,OnAttack,The following statement contains a magic number: if (action.Victim is NPC && m_dmgBonusVsCreatureTypePct != null)  			{  				var bonus = m_dmgBonusVsCreatureTypePct[(int)((NPC)action.Victim).Entry.Type];  				if (bonus != 0)  				{  					action.Damage += (bonus * action.Damage + 50) / 100;  				}  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,OnAttack,The following statement contains a magic number: if (action.Victim is NPC && m_dmgBonusVsCreatureTypePct != null)  			{  				var bonus = m_dmgBonusVsCreatureTypePct[(int)((NPC)action.Victim).Entry.Type];  				if (bonus != 0)  				{  					action.Damage += (bonus * action.Damage + 50) / 100;  				}  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,StartSummon,The following statement contains a magic number: if (m_summonRequest.TargetMap != null)  			{  				var client = m_client;  				if (client != null)  				{  					CharacterHandler.SendSummonRequest(client' summoner'  						summoner.Zone != null ? summoner.ZoneTemplate.Id : ZoneId.None'  						timeoutSeconds * 1000);  				}  			}  			else  			{  				//log.Warn("Tried to teleport {0} to a Summoner without a Map: {1}"' this' summoner);  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,InitGlyphsForLevel,The following statement contains a magic number: if (level >= 15)  				value |= (0x01 | 0x02);
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,InitGlyphsForLevel,The following statement contains a magic number: if (level >= 30)  				value |= 0x08;
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,InitGlyphsForLevel,The following statement contains a magic number: if (level >= 50)  				value |= 0x04;
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,InitGlyphsForLevel,The following statement contains a magic number: if (level >= 70)  				value |= 0x10;
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,InitGlyphsForLevel,The following statement contains a magic number: if (level >= 80)  				value |= 0x20;
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,OnHonorableKill,The following statement contains a magic number: if (IsInBattleground)  			{  				var team = m_bgInfo.Team;  				var victimStats = victim.Battlegrounds.Stats;    				if (team == victim.Battlegrounds.Team ||  					(victimStats == null || victimStats.Deaths > BattlegroundMgr.MaxHonorableDeaths))  				{  					// don't count kills of town team' visitors or permanent losers  					return;  				}    				var stats = m_bgInfo.Stats;  				++stats.HonorableKills;  				team.DistributeSharedHonor(this' victim' ptsForKill);  			}  			else if (Group != null)  			{  				if (Faction.Group == victim.Faction.Group) return;  				Group.DistributeGroupHonor(this' victim' ptsForKill);  			}  			else  			{  				GiveHonorPoints(ptsForKill);  				KillsToday++;  				LifetimeHonorableKills++;  				HonorHandler.SendPVPCredit(this' ptsForKill * 10' victim);  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,SetPvPResetTimer,The following statement contains a magic number: if (!PvPEndTime.IsRunning || overridden)  				PvPEndTime.Start(300000);
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,Create,The following statement contains a magic number: ChatChannels = new List<ChatChannel>(5);
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,SetExploredZones,The following statement contains a magic number: if (m_record.ExploredZones.Length != UpdateFieldMgr.ExplorationZoneFieldSize * 4)  			{  				var zones = m_record.ExploredZones;  				Array.Resize(ref zones' UpdateFieldMgr.ExplorationZoneFieldSize * 4);  				m_record.ExploredZones = zones;  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,SetExploredZones,The following statement contains a magic number: if (m_record.ExploredZones.Length != UpdateFieldMgr.ExplorationZoneFieldSize * 4)  			{  				var zones = m_record.ExploredZones;  				Array.Resize(ref zones' UpdateFieldMgr.ExplorationZoneFieldSize * 4);  				m_record.ExploredZones = zones;  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,SetExploredZones,The following statement contains a magic number: fixed (byte* ptr = m_record.ExploredZones)  			{  				int index = 0;  				for (var field = PlayerFields.EXPLORED_ZONES_1; field < PlayerFields.EXPLORED_ZONES_1 + UpdateFieldMgr.ExplorationZoneFieldSize; field++)  				{  					SetUInt32(field' *(uint*)(&ptr[index]));  					index += 4;  				}  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,InitializeCharacter,The following statement contains a magic number: try  			{  				Regenerates = true;  				((PlayerSpellCollection)m_spells).PlayerInitialize();    				OnLogin();    				if (m_record.JustCreated)  				{  					if (!m_client.Account.Role.IsStaff)  					{  						CharacterHandler.SendCinematic(this);  					}  					if (m_zone != null)  					{  						m_zone.EnterZone(this' null);  					}    					m_spells.AddDefaultSpells();  					m_reputations.Initialize();    					if (Class == ClassId.Warrior && Spells.Contains(SpellId.ClassSkillBattleStance))  					{  						CallDelayed(1000' obj => SpellCast.Start(SpellId.ClassSkillBattleStance' false));  					}  					else if (Class == ClassId.DeathKnight && Spells.Contains(SpellId.ClassSkillBloodPresence))  					{  						CallDelayed(1000' obj => SpellCast.Start(SpellId.ClassSkillBloodPresence' false));  					}    					// set initial weapon skill max values  					Skills.UpdateSkillsForLevel(Level);  				}  				else  				{  					LoadDeathState();  					LoadEquipmentState();  				}    				// load items  #if DEV  				// do this check in case that we did not load Items yet  				if (ItemMgr.Loaded)  #endif  					InitItems();    				// load ticket information  				var ticket = TicketMgr.Instance.GetTicket(EntityId.Low);  				if (ticket != null)  				{  					Ticket = ticket;  					Ticket.OnOwnerLogin(this);  				}    				// initialize sub systems  				GroupMgr.Instance.OnCharacterLogin(this);  				GuildMgr.Instance.OnCharacterLogin(this);  				RelationMgr.Instance.OnCharacterLogin(this);    				// set login date  				LastLogin = DateTime.Now;  				var isNew = m_record.JustCreated;    				// perform some stuff ingame  				AddMessage(() =>  				{  					if (LastLogout == null)  					{  						RealmCommandHandler.ExecFirstLoginFileFor(this);  					}    					RealmCommandHandler.ExecAllCharsFileFor(this);    					if (Account.Role.IsStaff)  					{  						RealmCommandHandler.ExecFileFor(this);  					}    					Stunned--;    					if (m_record.NextTaxiVertexId != 0)  					{  						// we are on a Taxi  						var vertex = TaxiMgr.GetVertex(m_record.NextTaxiVertexId);  						if (vertex != null &&  							vertex.MapId == m_Map.Id &&  							vertex.ListEntry.Next != null &&  							IsInRadius(vertex.Pos' vertex.ListEntry.Next.Value.DistFromPrevious))  						{  							TaxiPaths.Enqueue(vertex.Path);  							TaxiMgr.FlyUnit(this' true' vertex.ListEntry);  						}  						else  						{  							m_record.NextTaxiVertexId = 0;  						}  					}  					else  					{  						// cannot stand up instantly because else no one will see the char sitting in the first place  						StandState = StandState.Stand;  					}  					GodMode = m_record.GodMode;    					if (isNew)  					{  						// newly created Char logs in the first time  						var evt = Created;  						if (evt != null)  						{  							evt(this);  						}  					}    					//if (Role.IsStaff)  					if (GodMode)  					{  						//Notify("Your GodMode is " + (GodMode ? "ON" : "OFF") + "!");  						Notify(RealmLangKey.GodModeIsActivated);  					}    					var login = LoggedIn;  					if (login != null)  					{  						login(this' true);  					}  				});    				if (isNew)  				{  					SaveLater();  					m_record.JustCreated = false;  				}  				else  				{  					RealmServer.IOQueue.AddMessage(() =>  					{  						try  						{  							m_record.Update();  						}  						catch (Exception ex)  						{  							SaveLater();  							LogUtil.ErrorException(ex' "Failed to Update CharacterRecord: " + m_record);  						}  					});  				}  			}  			catch (Exception e)  			{  				if (m_record.JustCreated)  				{  					m_record.CanSave = false;  					m_record.Delete();  				}  				World.RemoveCharacter(this);  				LogUtil.ErrorException(e' "Failed to initialize Character: " + this);  				m_client.Disconnect();  			}
Magic Number,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,InitializeCharacter,The following statement contains a magic number: try  			{  				Regenerates = true;  				((PlayerSpellCollection)m_spells).PlayerInitialize();    				OnLogin();    				if (m_record.JustCreated)  				{  					if (!m_client.Account.Role.IsStaff)  					{  						CharacterHandler.SendCinematic(this);  					}  					if (m_zone != null)  					{  						m_zone.EnterZone(this' null);  					}    					m_spells.AddDefaultSpells();  					m_reputations.Initialize();    					if (Class == ClassId.Warrior && Spells.Contains(SpellId.ClassSkillBattleStance))  					{  						CallDelayed(1000' obj => SpellCast.Start(SpellId.ClassSkillBattleStance' false));  					}  					else if (Class == ClassId.DeathKnight && Spells.Contains(SpellId.ClassSkillBloodPresence))  					{  						CallDelayed(1000' obj => SpellCast.Start(SpellId.ClassSkillBloodPresence' false));  					}    					// set initial weapon skill max values  					Skills.UpdateSkillsForLevel(Level);  				}  				else  				{  					LoadDeathState();  					LoadEquipmentState();  				}    				// load items  #if DEV  				// do this check in case that we did not load Items yet  				if (ItemMgr.Loaded)  #endif  					InitItems();    				// load ticket information  				var ticket = TicketMgr.Instance.GetTicket(EntityId.Low);  				if (ticket != null)  				{  					Ticket = ticket;  					Ticket.OnOwnerLogin(this);  				}    				// initialize sub systems  				GroupMgr.Instance.OnCharacterLogin(this);  				GuildMgr.Instance.OnCharacterLogin(this);  				RelationMgr.Instance.OnCharacterLogin(this);    				// set login date  				LastLogin = DateTime.Now;  				var isNew = m_record.JustCreated;    				// perform some stuff ingame  				AddMessage(() =>  				{  					if (LastLogout == null)  					{  						RealmCommandHandler.ExecFirstLoginFileFor(this);  					}    					RealmCommandHandler.ExecAllCharsFileFor(this);    					if (Account.Role.IsStaff)  					{  						RealmCommandHandler.ExecFileFor(this);  					}    					Stunned--;    					if (m_record.NextTaxiVertexId != 0)  					{  						// we are on a Taxi  						var vertex = TaxiMgr.GetVertex(m_record.NextTaxiVertexId);  						if (vertex != null &&  							vertex.MapId == m_Map.Id &&  							vertex.ListEntry.Next != null &&  							IsInRadius(vertex.Pos' vertex.ListEntry.Next.Value.DistFromPrevious))  						{  							TaxiPaths.Enqueue(vertex.Path);  							TaxiMgr.FlyUnit(this' true' vertex.ListEntry);  						}  						else  						{  							m_record.NextTaxiVertexId = 0;  						}  					}  					else  					{  						// cannot stand up instantly because else no one will see the char sitting in the first place  						StandState = StandState.Stand;  					}  					GodMode = m_record.GodMode;    					if (isNew)  					{  						// newly created Char logs in the first time  						var evt = Created;  						if (evt != null)  						{  							evt(this);  						}  					}    					//if (Role.IsStaff)  					if (GodMode)  					{  						//Notify("Your GodMode is " + (GodMode ? "ON" : "OFF") + "!");  						Notify(RealmLangKey.GodModeIsActivated);  					}    					var login = LoggedIn;  					if (login != null)  					{  						login(this' true);  					}  				});    				if (isNew)  				{  					SaveLater();  					m_record.JustCreated = false;  				}  				else  				{  					RealmServer.IOQueue.AddMessage(() =>  					{  						try  						{  							m_record.Update();  						}  						catch (Exception ex)  						{  							SaveLater();  							LogUtil.ErrorException(ex' "Failed to Update CharacterRecord: " + m_record);  						}  					});  				}  			}  			catch (Exception e)  			{  				if (m_record.JustCreated)  				{  					m_record.CanSave = false;  					m_record.Delete();  				}  				World.RemoveCharacter(this);  				LogUtil.ErrorException(e' "Failed to initialize Character: " + this);  				m_client.Disconnect();  			}
Magic Number,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,GetDamageDoneMod,The following statement contains a magic number: if (IsHunterPet && m_master != null)  			{  				if (school != DamageSchool.Physical)  				{  					// "0.13% spell damage (0.18 spell damage with 2/2 Wild Hunt)"	  					var bonus = m_master.GetDamageDoneMod(school);  					amount += (bonus * PetMgr.PetSpellDamageOfOwnerPercent + 50) / 100;	 // rounding  				}  			}
Magic Number,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,GetDamageDoneMod,The following statement contains a magic number: if (IsHunterPet && m_master != null)  			{  				if (school != DamageSchool.Physical)  				{  					// "0.13% spell damage (0.18 spell damage with 2/2 Wild Hunt)"	  					var bonus = m_master.GetDamageDoneMod(school);  					amount += (bonus * PetMgr.PetSpellDamageOfOwnerPercent + 50) / 100;	 // rounding  				}  			}
Magic Number,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,UpdateStamina,The following statement contains a magic number: if (IsHunterPet)  			{  				// Pet stat: Stamina  				// "1 stamina gives 0.45 stamina untalented"  				var hunter = m_master as Character;  				if (hunter != null)  				{  					// recalculate base stamina for Pet  					var levelStatInfo = Entry.GetPetLevelStatInfo(Level);  					var baseStam = (hunter.Stamina * PetMgr.PetStaminaOfOwnerPercent + 50) / 100;  					if (levelStatInfo != null)  					{  						baseStam += levelStatInfo.BaseStats[(int)StatType.Stamina];  					}  					m_baseStats[(int)StatType.Stamina] = baseStam;    					stam += baseStam;  				}  			}  			else  			{  				stam += GetBaseStatValue(StatType.Stamina);  			}
Magic Number,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,UpdateStamina,The following statement contains a magic number: if (IsHunterPet)  			{  				// Pet stat: Stamina  				// "1 stamina gives 0.45 stamina untalented"  				var hunter = m_master as Character;  				if (hunter != null)  				{  					// recalculate base stamina for Pet  					var levelStatInfo = Entry.GetPetLevelStatInfo(Level);  					var baseStam = (hunter.Stamina * PetMgr.PetStaminaOfOwnerPercent + 50) / 100;  					if (levelStatInfo != null)  					{  						baseStam += levelStatInfo.BaseStats[(int)StatType.Stamina];  					}  					m_baseStats[(int)StatType.Stamina] = baseStam;    					stam += baseStam;  				}  			}  			else  			{  				stam += GetBaseStatValue(StatType.Stamina);  			}
Magic Number,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,UpdatePetDamage,The following statement contains a magic number: var avg = (Strength - 20) / 2;
Magic Number,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,UpdatePetDamage,The following statement contains a magic number: var avg = (Strength - 20) / 2;
Magic Number,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,UpdatePetDamage,The following statement contains a magic number: weapon.Damages[0].Minimum = avg - avg / 5;
Magic Number,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,UpdatePetDamage,The following statement contains a magic number: weapon.Damages[0].Maximum = avg + avg / 5;
Magic Number,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,SetEntry,The following statement contains a magic number: if (m_entry.IsDead || m_spawnPoint == null || !m_spawnPoint.SpawnEntry.IsDead)  			{  				SetInt32(UnitFields.HEALTH' health);  			}  			else if (m_entry.Regenerates)  			{  				Regenerates = true;  				HealthRegenPerTickNoCombat = Math.Max(m_entry.MaxHealth / 10' 1);  			}
Magic Number,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,SetEntry,The following statement contains a magic number: if (PowerType == PowerType.Mana)  			{  				ManaRegenPerTickInterrupted = 20;  			}
Magic Number,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,EnterLootableState,The following statement contains a magic number: RemainingDecayDelayMillis = m_entry.DefaultDecayDelayMillis * 2;
Magic Number,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,GetBasePowerRegen,The following statement contains a magic number: if (IsPlayerOwned)  			{  				return RegenerationFormulas.GetPowerRegen(this);  			}  			else  			{  				// TODO: NPC power regen  				return BasePower / 50;  			}
Magic Number,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,GetHappinessGain,The following statement contains a magic number: if (diff > 0)  			{  				if (diff < 16)  				{  					return PetMgr.MaxFeedPetHappinessGain;  				}  				if (diff < 26)  				{  					return (PetMgr.MaxFeedPetHappinessGain / 2);  				}  				if (diff < 36)  				{  					return (PetMgr.MaxFeedPetHappinessGain / 4);  				}  			}  			else  			{  				if (diff > -16)  				{  					return PetMgr.MaxFeedPetHappinessGain;  				}  			}
Magic Number,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,GetHappinessGain,The following statement contains a magic number: if (diff > 0)  			{  				if (diff < 16)  				{  					return PetMgr.MaxFeedPetHappinessGain;  				}  				if (diff < 26)  				{  					return (PetMgr.MaxFeedPetHappinessGain / 2);  				}  				if (diff < 36)  				{  					return (PetMgr.MaxFeedPetHappinessGain / 4);  				}  			}  			else  			{  				if (diff > -16)  				{  					return PetMgr.MaxFeedPetHappinessGain;  				}  			}
Magic Number,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,GetHappinessGain,The following statement contains a magic number: if (diff > 0)  			{  				if (diff < 16)  				{  					return PetMgr.MaxFeedPetHappinessGain;  				}  				if (diff < 26)  				{  					return (PetMgr.MaxFeedPetHappinessGain / 2);  				}  				if (diff < 36)  				{  					return (PetMgr.MaxFeedPetHappinessGain / 4);  				}  			}  			else  			{  				if (diff > -16)  				{  					return PetMgr.MaxFeedPetHappinessGain;  				}  			}
Magic Number,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,GetHappinessGain,The following statement contains a magic number: if (diff > 0)  			{  				if (diff < 16)  				{  					return PetMgr.MaxFeedPetHappinessGain;  				}  				if (diff < 26)  				{  					return (PetMgr.MaxFeedPetHappinessGain / 2);  				}  				if (diff < 36)  				{  					return (PetMgr.MaxFeedPetHappinessGain / 4);  				}  			}  			else  			{  				if (diff > -16)  				{  					return PetMgr.MaxFeedPetHappinessGain;  				}  			}
Magic Number,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,GetHappinessGain,The following statement contains a magic number: if (diff > 0)  			{  				if (diff < 16)  				{  					return PetMgr.MaxFeedPetHappinessGain;  				}  				if (diff < 26)  				{  					return (PetMgr.MaxFeedPetHappinessGain / 2);  				}  				if (diff < 36)  				{  					return (PetMgr.MaxFeedPetHappinessGain / 4);  				}  			}  			else  			{  				if (diff > -16)  				{  					return PetMgr.MaxFeedPetHappinessGain;  				}  			}
Magic Number,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,GetHappinessGain,The following statement contains a magic number: if (diff > 0)  			{  				if (diff < 16)  				{  					return PetMgr.MaxFeedPetHappinessGain;  				}  				if (diff < 26)  				{  					return (PetMgr.MaxFeedPetHappinessGain / 2);  				}  				if (diff < 36)  				{  					return (PetMgr.MaxFeedPetHappinessGain / 4);  				}  			}  			else  			{  				if (diff > -16)  				{  					return PetMgr.MaxFeedPetHappinessGain;  				}  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,UpdateMaxPower,The following statement contains a magic number: value += (value * IntMods[(int)StatModifierInt.PowerPct] + 50) / 100;
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,UpdateMaxPower,The following statement contains a magic number: value += (value * IntMods[(int)StatModifierInt.PowerPct] + 50) / 100;
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,UpdateHealthAuraState,The following statement contains a magic number: if (pct <= 20)  			{  				AuraState = (AuraState & ~(AuraStateMask.HealthAbove75Pct | AuraStateMask.Health35Percent)) |  					AuraStateMask.Health20Percent;  			}  			else if (pct <= 35)  			{  				AuraState = (AuraState & ~(AuraStateMask.HealthAbove75Pct | AuraStateMask.Health20Percent)) |  					AuraStateMask.Health35Percent;  			}  			else if (pct <= 75)  			{  				AuraState = (AuraState & ~(AuraStateMask.Health35Percent | AuraStateMask.Health20Percent | AuraStateMask.HealthAbove75Pct));  			}  			else  			{  				AuraState = (AuraState & ~(AuraStateMask.Health35Percent | AuraStateMask.Health20Percent)) |  							AuraStateMask.HealthAbove75Pct;  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,UpdateHealthAuraState,The following statement contains a magic number: if (pct <= 20)  			{  				AuraState = (AuraState & ~(AuraStateMask.HealthAbove75Pct | AuraStateMask.Health35Percent)) |  					AuraStateMask.Health20Percent;  			}  			else if (pct <= 35)  			{  				AuraState = (AuraState & ~(AuraStateMask.HealthAbove75Pct | AuraStateMask.Health20Percent)) |  					AuraStateMask.Health35Percent;  			}  			else if (pct <= 75)  			{  				AuraState = (AuraState & ~(AuraStateMask.Health35Percent | AuraStateMask.Health20Percent | AuraStateMask.HealthAbove75Pct));  			}  			else  			{  				AuraState = (AuraState & ~(AuraStateMask.Health35Percent | AuraStateMask.Health20Percent)) |  							AuraStateMask.HealthAbove75Pct;  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,UpdateHealthAuraState,The following statement contains a magic number: if (pct <= 20)  			{  				AuraState = (AuraState & ~(AuraStateMask.HealthAbove75Pct | AuraStateMask.Health35Percent)) |  					AuraStateMask.Health20Percent;  			}  			else if (pct <= 35)  			{  				AuraState = (AuraState & ~(AuraStateMask.HealthAbove75Pct | AuraStateMask.Health20Percent)) |  					AuraStateMask.Health35Percent;  			}  			else if (pct <= 75)  			{  				AuraState = (AuraState & ~(AuraStateMask.Health35Percent | AuraStateMask.Health20Percent | AuraStateMask.HealthAbove75Pct));  			}  			else  			{  				AuraState = (AuraState & ~(AuraStateMask.Health35Percent | AuraStateMask.Health20Percent)) |  							AuraStateMask.HealthAbove75Pct;  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,ModComboState,The following statement contains a magic number: if (amount != 0 || target != m_comboTarget)  			{  				if (target == null)  				{  					m_comboPoints = 0;  				}  				else  				{  					if (target == m_comboTarget)  					{  						m_comboPoints += amount;  					}  					else  					{  						m_comboPoints = amount;  					}  					m_comboPoints = MathUtil.ClampMinMax(m_comboPoints' 0' 5);  				}    				m_comboTarget = target;    				return true;  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,Resurrect,The following statement contains a magic number: if (!IsAlive)  			{  				// Values according to http://www.wowwiki.com/Death  				// 50% health' 50% mana' 0 rage' 0 energy  				Health = MaxHealth / 2;    				if (PowerType == PowerType.Mana)  				{  					Power = MaxPower / 2;  				}  				else if (PowerType == PowerType.Rage)  				{  					Power = 0;  				}  				else if (PowerType == PowerType.Energy)  				{  					Power = MaxPower;  				}  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,Resurrect,The following statement contains a magic number: if (!IsAlive)  			{  				// Values according to http://www.wowwiki.com/Death  				// 50% health' 50% mana' 0 rage' 0 energy  				Health = MaxHealth / 2;    				if (PowerType == PowerType.Mana)  				{  					Power = MaxPower / 2;  				}  				else if (PowerType == PowerType.Rage)  				{  					Power = 0;  				}  				else if (PowerType == PowerType.Energy)  				{  					Power = MaxPower;  				}  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,GetHealthPercent,The following statement contains a magic number: return (value * MaxHealth + 50) / 100;
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,GetHealthPercent,The following statement contains a magic number: return (value * MaxHealth + 50) / 100;
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,HealPercent,The following statement contains a magic number: Heal((value * MaxHealth + 50) / 100' healer' effect);
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,HealPercent,The following statement contains a magic number: Heal((value * MaxHealth + 50) / 100' healer' effect);
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,Heal,The following statement contains a magic number: if (effect != null)  			{  				var oldVal = value;    				if (healer != null)  				{  					if (effect.IsPeriodic)  					{  						// add periodic boni  						value = healer.Auras.GetModifiedInt(SpellModifierType.PeriodicEffectValue' effect.Spell' value);  					}  					else  					{  						// add healing mods (spell power for healing)  						value = healer.AddHealingModsToAction(value' effect' effect.Spell.Schools[0]);  					}  				}    				if (this is Character)  				{  					value += (int)((oldVal * ((Character)this).HealingTakenModPct) / 100);  				}    				var critChance = GetCritChance(effect.Spell.Schools[0]) * 100;    				// do a critcheck  				if (!effect.Spell.AttributesExB.HasFlag(SpellAttributesExB.CannotCrit) && critChance != 0)  				{  					var roll = Utility.Random(1f' 10001);    					if (roll <= critChance)  					{  						value = (int)(value * (SpellHandler.SpellCritBaseFactor + GetIntMod(StatModifierInt.CriticalHealValuePct)));  						crit = true;  					}  				}  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,Heal,The following statement contains a magic number: if (effect != null)  			{  				var oldVal = value;    				if (healer != null)  				{  					if (effect.IsPeriodic)  					{  						// add periodic boni  						value = healer.Auras.GetModifiedInt(SpellModifierType.PeriodicEffectValue' effect.Spell' value);  					}  					else  					{  						// add healing mods (spell power for healing)  						value = healer.AddHealingModsToAction(value' effect' effect.Spell.Schools[0]);  					}  				}    				if (this is Character)  				{  					value += (int)((oldVal * ((Character)this).HealingTakenModPct) / 100);  				}    				var critChance = GetCritChance(effect.Spell.Schools[0]) * 100;    				// do a critcheck  				if (!effect.Spell.AttributesExB.HasFlag(SpellAttributesExB.CannotCrit) && critChance != 0)  				{  					var roll = Utility.Random(1f' 10001);    					if (roll <= critChance)  					{  						value = (int)(value * (SpellHandler.SpellCritBaseFactor + GetIntMod(StatModifierInt.CriticalHealValuePct)));  						crit = true;  					}  				}  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,Heal,The following statement contains a magic number: if (effect != null)  			{  				var oldVal = value;    				if (healer != null)  				{  					if (effect.IsPeriodic)  					{  						// add periodic boni  						value = healer.Auras.GetModifiedInt(SpellModifierType.PeriodicEffectValue' effect.Spell' value);  					}  					else  					{  						// add healing mods (spell power for healing)  						value = healer.AddHealingModsToAction(value' effect' effect.Spell.Schools[0]);  					}  				}    				if (this is Character)  				{  					value += (int)((oldVal * ((Character)this).HealingTakenModPct) / 100);  				}    				var critChance = GetCritChance(effect.Spell.Schools[0]) * 100;    				// do a critcheck  				if (!effect.Spell.AttributesExB.HasFlag(SpellAttributesExB.CannotCrit) && critChance != 0)  				{  					var roll = Utility.Random(1f' 10001);    					if (roll <= critChance)  					{  						value = (int)(value * (SpellHandler.SpellCritBaseFactor + GetIntMod(StatModifierInt.CriticalHealValuePct)));  						crit = true;  					}  				}  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,EnergizePercent,The following statement contains a magic number: Energize((value * MaxPower + 50) / 100' energizer' effect);
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,EnergizePercent,The following statement contains a magic number: Energize((value * MaxPower + 50) / 100' energizer' effect);
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,Face,The following statement contains a magic number: MovementHandler.SendFacingPacket(this' orientation' (uint)(314 / TurnSpeed));
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,AddProcHandler,The following statement contains a magic number: if (m_procHandlers == null)  			{  				m_procHandlers = new List<IProcHandler>(5);  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,Proc,The following statement contains a magic number: for (var i = m_procHandlers.Count - 1; i >= 0; i--)	// need to reverse iteration because procs can be removed in the process  			{  				if (i >= m_procHandlers.Count)  				{  					// In case that the list was changed during iteration  					continue;  				}    				var proc = m_procHandlers[i];  				bool procFlagsMatch = proc.ProcTriggerFlags.HasAnyFlag(flags);  				bool procHitFlagsMatch = flags.RequireHitFlags() ? proc.ProcHitFlags.HasAnyFlag(hitFlags) : true;    				if (proc.NextProcTime <= now &&  					procFlagsMatch &&  					procHitFlagsMatch &&  					proc.CanBeTriggeredBy(triggerer' action' active))  				{  					var chance = (int)proc.ProcChance;  					if (chance > 0 && action.Spell != null)  					{  						chance = Auras.GetModifiedInt(SpellModifierType.ProcChance' action.Spell' chance);  					}    					if (proc.ProcChance <= 0 || Utility.Random(0' 101) <= chance)  					{  						var charges = proc.StackCount;  						proc.TriggerProc(triggerer' action);  						if (proc.MinProcDelay > 0)  						{  							proc.NextProcTime = now.AddMilliseconds(proc.MinProcDelay);  						}    						if (charges > 0 && proc.StackCount == 0)  						{  							proc.Dispose();  							//proc.NextProcTime = DateTime.MaxValue;	// won't be proc'ed again  						}  					}  				}  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,GetWeaponDamage,The following statement contains a magic number: if (usedAbility != null && usedAbility.IsCasting)  			{  				// get damage modifiers from spell  				var multiplier = 0;    				foreach (var effectHandler in usedAbility.Handlers)  				{  					if (effectHandler.Effect.IsStrikeEffectFlat)  					{  						damage += effectHandler.CalcDamageValue(targetNo);  					}  					else if (effectHandler.Effect.IsStrikeEffectPct)  					{  						multiplier += effectHandler.CalcDamageValue(targetNo);  					}  				}  				if (multiplier > 0)  				{  					action.Damage = (damage * multiplier + 50) / 100;  				}  				else  				{  					action.Damage = damage;  				}    				foreach (var effectHandler in usedAbility.Handlers)  				{  					if (effectHandler is WeaponDamageEffectHandler)  					{  						((WeaponDamageEffectHandler)effectHandler).OnHit(action);  					}  				}  			}  			else  			{  				action.Damage = damage;  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,GetWeaponDamage,The following statement contains a magic number: if (usedAbility != null && usedAbility.IsCasting)  			{  				// get damage modifiers from spell  				var multiplier = 0;    				foreach (var effectHandler in usedAbility.Handlers)  				{  					if (effectHandler.Effect.IsStrikeEffectFlat)  					{  						damage += effectHandler.CalcDamageValue(targetNo);  					}  					else if (effectHandler.Effect.IsStrikeEffectPct)  					{  						multiplier += effectHandler.CalcDamageValue(targetNo);  					}  				}  				if (multiplier > 0)  				{  					action.Damage = (damage * multiplier + 50) / 100;  				}  				else  				{  					action.Damage = damage;  				}    				foreach (var effectHandler in usedAbility.Handlers)  				{  					if (effectHandler is WeaponDamageEffectHandler)  					{  						((WeaponDamageEffectHandler)effectHandler).OnHit(action);  					}  				}  			}  			else  			{  				action.Damage = damage;  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,DealSpellDamage,The following statement contains a magic number: if (effect != null)  			{  				school = GetLeastResistantSchool(effect.Spell);  				if (effect.Spell.DamageIncreasedByAP)  				{  					int ap;  					if (effect.Spell.IsRangedAbility)  					{  						ap = TotalRangedAP;  					}  					else  					{  						ap = TotalMeleeAP;  					}    					dmg += (ap + 7) / 14; // round  				}  			}  			else  			{  				school = DamageSchool.Physical;  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,DealSpellDamage,The following statement contains a magic number: if (effect != null)  			{  				school = GetLeastResistantSchool(effect.Spell);  				if (effect.Spell.DamageIncreasedByAP)  				{  					int ap;  					if (effect.Spell.IsRangedAbility)  					{  						ap = TotalRangedAP;  					}  					else  					{  						ap = TotalMeleeAP;  					}    					dmg += (ap + 7) / 14; // round  				}  			}  			else  			{  				school = DamageSchool.Physical;  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,DealSpellDamage,The following statement contains a magic number: try  			{  				if (attacker != null)  				{  					// the damage is caused by someone else (i.e. not environmental damage etc)    					// critical hits  					if (forceCrit || action.CalcCritChance() > Utility.Random(0' 10000))  					{  						action.IsCritical = true;  						action.SetCriticalDamage();  					}  					else  					{  						action.IsCritical = false;  					}    					// add mods and call events  					if (addDamageBonuses)  					{  						action.AddDamageMods();  					}    					OnDefend(action);  					attacker.OnAttack(action);  				}    				action.Resisted = (int)Math.Round(action.Damage * action.ResistPct / 100);  				action.Blocked = 0; // TODO: Deflect    				DoRawDamage(action);    				CombatLogHandler.SendMagicDamage(action);  			}  			finally  			{  				DeathPrevention--;  				if (attacker != null)  				{  					attacker.DeathPrevention--;  				}  				action.OnFinished();  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,DealSpellDamage,The following statement contains a magic number: try  			{  				if (attacker != null)  				{  					// the damage is caused by someone else (i.e. not environmental damage etc)    					// critical hits  					if (forceCrit || action.CalcCritChance() > Utility.Random(0' 10000))  					{  						action.IsCritical = true;  						action.SetCriticalDamage();  					}  					else  					{  						action.IsCritical = false;  					}    					// add mods and call events  					if (addDamageBonuses)  					{  						action.AddDamageMods();  					}    					OnDefend(action);  					attacker.OnAttack(action);  				}    				action.Resisted = (int)Math.Round(action.Damage * action.ResistPct / 100);  				action.Blocked = 0; // TODO: Deflect    				DoRawDamage(action);    				CombatLogHandler.SendMagicDamage(action);  			}  			finally  			{  				DeathPrevention--;  				if (attacker != null)  				{  					attacker.DeathPrevention--;  				}  				action.OnFinished();  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,GetResistChancePct,The following statement contains a magic number: if (resist > 75)  			{  				resist = 75f;  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,CalcDodgeChance,The following statement contains a magic number: if (this is Character)  			{  				var def = (Character)this;  				dodgeChance = def.DodgeChance;  			}  			else  			{  				dodgeChance = 5;  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,CalcDodgeChance,The following statement contains a magic number: dodgeChance *= 100;
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,CalcParryChance,The following statement contains a magic number: parryChance *= 100;
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,CalcCritDamage,The following statement contains a magic number: var multiplier = 200;
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,CalcCritDamage,The following statement contains a magic number: return (dmg * multiplier + 50) / 100;
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,CalcCritDamage,The following statement contains a magic number: return (dmg * multiplier + 50) / 100;
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,CheckDebuffResist,The following statement contains a magic number: if (Utility.Random(0' 100) <  				GetDebuffResistance(school) -  				GetAttackerSpellHitChanceMod(school))  				return true;
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,DoRawDamage,The following statement contains a magic number: if (m_damageTakenPctMods != null)  			{  				var val = m_damageTakenPctMods[(int)action.UsedSchool];  				if (val != 0)  				{  					action.Damage -= (val * action.Damage + 50) / 100;  				}  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,DoRawDamage,The following statement contains a magic number: if (m_damageTakenPctMods != null)  			{  				var val = m_damageTakenPctMods[(int)action.UsedSchool];  				if (val != 0)  				{  					action.Damage -= (val * action.Damage + 50) / 100;  				}  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,DoRawDamage,The following statement contains a magic number: if (action.Spell != null && action.Spell.IsAreaSpell && AoEDamageModifierPct != 0)  			{  				action.Damage -= (action.Damage * AoEDamageModifierPct + 50) / 100;  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,DoRawDamage,The following statement contains a magic number: if (action.Spell != null && action.Spell.IsAreaSpell && AoEDamageModifierPct != 0)  			{  				action.Damage -= (action.Damage * AoEDamageModifierPct + 50) / 100;  			}
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,GetGeneratedThreat,The following statement contains a magic number: return Math.Max(0' dmg + ((dmg * m_threatMods[(int)school]) / 100));
Magic Number,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,WriteUpdateFlag_0x10,The following statement contains a magic number: writer.Write(150754760);
Magic Number,WCell.RealmServer.Entities,GameObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\GameObject.cs,SetRotationFields,The following statement contains a magic number: if (rotations.Length != 4)  				return;
Magic Number,WCell.RealmServer.Entities,GameObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\GameObject.cs,SetRotationFields,The following statement contains a magic number: if (rotations[2] == 0 && rotations[3] == 0)  			{  				SetFloat(GameObjectFields.PARENTROTATION + 2' (float)rotSin);  				SetFloat(GameObjectFields.PARENTROTATION + 3' (float)rotCos);  			}  			else  			{  				SetFloat(GameObjectFields.PARENTROTATION + 2' rotations[2]);  				SetFloat(GameObjectFields.PARENTROTATION + 3' rotations[3]);  			}
Magic Number,WCell.RealmServer.Entities,GameObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\GameObject.cs,SetRotationFields,The following statement contains a magic number: if (rotations[2] == 0 && rotations[3] == 0)  			{  				SetFloat(GameObjectFields.PARENTROTATION + 2' (float)rotSin);  				SetFloat(GameObjectFields.PARENTROTATION + 3' (float)rotCos);  			}  			else  			{  				SetFloat(GameObjectFields.PARENTROTATION + 2' rotations[2]);  				SetFloat(GameObjectFields.PARENTROTATION + 3' rotations[3]);  			}
Magic Number,WCell.RealmServer.Entities,GameObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\GameObject.cs,SetRotationFields,The following statement contains a magic number: if (rotations[2] == 0 && rotations[3] == 0)  			{  				SetFloat(GameObjectFields.PARENTROTATION + 2' (float)rotSin);  				SetFloat(GameObjectFields.PARENTROTATION + 3' (float)rotCos);  			}  			else  			{  				SetFloat(GameObjectFields.PARENTROTATION + 2' rotations[2]);  				SetFloat(GameObjectFields.PARENTROTATION + 3' rotations[3]);  			}
Magic Number,WCell.RealmServer.Entities,GameObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\GameObject.cs,SetRotationFields,The following statement contains a magic number: if (rotations[2] == 0 && rotations[3] == 0)  			{  				SetFloat(GameObjectFields.PARENTROTATION + 2' (float)rotSin);  				SetFloat(GameObjectFields.PARENTROTATION + 3' (float)rotCos);  			}  			else  			{  				SetFloat(GameObjectFields.PARENTROTATION + 2' rotations[2]);  				SetFloat(GameObjectFields.PARENTROTATION + 3' rotations[3]);  			}
Magic Number,WCell.RealmServer.Entities,GameObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\GameObject.cs,SetRotationFields,The following statement contains a magic number: if (rotations[2] == 0 && rotations[3] == 0)  			{  				SetFloat(GameObjectFields.PARENTROTATION + 2' (float)rotSin);  				SetFloat(GameObjectFields.PARENTROTATION + 3' (float)rotCos);  			}  			else  			{  				SetFloat(GameObjectFields.PARENTROTATION + 2' rotations[2]);  				SetFloat(GameObjectFields.PARENTROTATION + 3' rotations[3]);  			}
Magic Number,WCell.RealmServer.Entities,GameObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\GameObject.cs,SetRotationFields,The following statement contains a magic number: if (rotations[2] == 0 && rotations[3] == 0)  			{  				SetFloat(GameObjectFields.PARENTROTATION + 2' (float)rotSin);  				SetFloat(GameObjectFields.PARENTROTATION + 3' (float)rotCos);  			}  			else  			{  				SetFloat(GameObjectFields.PARENTROTATION + 2' rotations[2]);  				SetFloat(GameObjectFields.PARENTROTATION + 3' rotations[3]);  			}
Magic Number,WCell.RealmServer.Entities,GameObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\GameObject.cs,SetRotationFields,The following statement contains a magic number: if (rotations[2] == 0 && rotations[3] == 0)  			{  				SetFloat(GameObjectFields.PARENTROTATION + 2' (float)rotSin);  				SetFloat(GameObjectFields.PARENTROTATION + 3' (float)rotCos);  			}  			else  			{  				SetFloat(GameObjectFields.PARENTROTATION + 2' rotations[2]);  				SetFloat(GameObjectFields.PARENTROTATION + 3' rotations[3]);  			}
Magic Number,WCell.RealmServer.Entities,GameObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\GameObject.cs,SetRotationFields,The following statement contains a magic number: if (rotations[2] == 0 && rotations[3] == 0)  			{  				SetFloat(GameObjectFields.PARENTROTATION + 2' (float)rotSin);  				SetFloat(GameObjectFields.PARENTROTATION + 3' (float)rotCos);  			}  			else  			{  				SetFloat(GameObjectFields.PARENTROTATION + 2' rotations[2]);  				SetFloat(GameObjectFields.PARENTROTATION + 3' rotations[3]);  			}
Magic Number,WCell.RealmServer.Entities,GameObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\GameObject.cs,SendCustomAnim,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GAMEOBJECT_CUSTOM_ANIM' 12))  			{  				packet.Write(EntityId);  				packet.Write(anim);  				SendPacketToArea(packet);  			}
Magic Number,WCell.RealmServer.Entities,GameObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\GameObject.cs,SendDespawn,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GAMEOBJECT_DESPAWN_ANIM' 8))  			{  				packet.Write(EntityId);    				SendPacketToArea(packet);  			}
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetUInt64,The following statement contains a magic number: return low | ((ulong)high << 32);
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetUInt64,The following statement contains a magic number: return low | ((ulong)high << 32);
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,SetInt64,The following statement contains a magic number: SetInt32(field + 1' (int) (value >> 32));
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,SetUInt64,The following statement contains a magic number: SetUInt32(field + 1' (uint)(value >> 32));
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,SetByteArray,The following statement contains a magic number: if (value.Length != 4)              {                  // this better not be happening                  LogUtil.ErrorException(new Exception("Invalid length")' "Tried to set a byte array with invalid length: ");                  return;              }
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,WriteUpdateValues,The following statement contains a magic number: if (forCreation)  			{  				// completely new  				var pos = receiver.m_updatePacket.Position;  				mask = new UpdateMask(m_highestUsedUpdateIndex);  				receiver.m_updatePacket.Position = pos + 1 + (4 * mask.MaxBlockCount);	// skip over the index block  				for (var i = 0; i <= m_highestUsedUpdateIndex; i++)  				{  					var flags = _UpdateFieldInfos.FieldFlags[i];  					if (flags.HasAnyFlag(relation) && m_updateValues[i].UInt32 != 0)  					{  						mask.SetBit(i);  						WriteUpdateValue(receiver.m_updatePacket' receiver' i);  					}  				}  				var newPos = receiver.m_updatePacket.Position;  				receiver.m_updatePacket.Position = pos;  				mask.WriteFull(receiver.m_updatePacket);								// write the full index block  				receiver.m_updatePacket.Position = newPos;  				return;  				//WriteUpdateValues(receiver' relation' 0' _UpdateFieldInfos.Fields.Length' true);  			}
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,WriteUpdateValues,The following statement contains a magic number: if (relation.HasAnyFlag(UpdateFieldFlags.Private))  		    {  		        // Private  		        mask = m_privateUpdateMask;  		    }  		    else if (relation.HasAnyFlag(UpdateFieldFlags.OwnerOnly | UpdateFieldFlags.GroupOnly))  		    {  		        // Group or Owner  		        var pos = receiver.m_updatePacket.Position;  		        mask = new UpdateMask(m_privateUpdateMask.m_highestIndex);  		        receiver.m_updatePacket.Position = pos + 1 + (4 * mask.MaxBlockCount);	// skip over the index block  		        for (var i = m_privateUpdateMask.m_lowestIndex; i <= m_privateUpdateMask.m_highestIndex; i++)  		        {  		            var flags = _UpdateFieldInfos.FieldFlags[i];  					if (flags.HasAnyFlag(relation) &&  						(!flags.HasAnyFlag(UpdateFieldFlags.Public) || m_publicUpdateMask.GetBit(i)))                      {                          mask.SetBit(i);                          WriteUpdateValue(receiver.m_updatePacket' receiver' i);                      }  		        }  		        var newPos = receiver.m_updatePacket.Position;  		        receiver.m_updatePacket.Position = pos;  		        mask.WriteFull(receiver.m_updatePacket);								// write the full index block  		        receiver.m_updatePacket.Position = newPos;  		        //WriteUpdateValues(receiver' relation' m_privateUpdateMask.m_lowestIndex' m_privateUpdateMask.m_highestIndex' false);  		        return;  		    }  		    else  		    {  		        // Public  		        mask = m_publicUpdateMask;  		    }
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,SendSpontaneousUpdate,The following statement contains a magic number: using (var packet = new UpdatePacket(1024))  			{  				packet.Position = 4;						// jump over header  				packet.Write(1);							// Update Count  				packet.Write((byte)UpdateType.Values);  				EntityId.WritePacked(packet);  				WriteSpontaneousUpdate(mask' packet' receiver' indices' visible);    				receiver.Send(packet);  			}
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,SendSpontaneousUpdate,The following statement contains a magic number: using (var packet = new UpdatePacket(1024))  			{  				packet.Position = 4;						// jump over header  				packet.Write(1);							// Update Count  				packet.Write((byte)UpdateType.Values);  				EntityId.WritePacked(packet);  				WriteSpontaneousUpdate(mask' packet' receiver' indices' visible);    				receiver.Send(packet);  			}
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,CreateDestroyPacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_DESTROY_OBJECT' 9);
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,SendOutOfRangeUpdate,The following statement contains a magic number: using (var packet = new UpdatePacket(1024))  			{  				packet.Position = 4;						// jump over header  				packet.Write(1);							// Update Count  				packet.Write((byte)UpdateType.OutOfRange);  				packet.Write(worldObjects.Count);  				foreach (var worldObject in worldObjects)  				{  					worldObject.EntityId.WritePacked(packet);  				}    				receiver.Send(packet);  			}
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,SendOutOfRangeUpdate,The following statement contains a magic number: using (var packet = new UpdatePacket(1024))  			{  				packet.Position = 4;						// jump over header  				packet.Write(1);							// Update Count  				packet.Write((byte)UpdateType.OutOfRange);  				packet.Write(worldObjects.Count);  				foreach (var worldObject in worldObjects)  				{  					worldObject.EntityId.WritePacked(packet);  				}    				receiver.Send(packet);  			}
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetFieldUpdatePacket,The following statement contains a magic number: var blocks = (field.RawId >> 5) + 1;
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetFieldUpdatePacket,The following statement contains a magic number: var emptyBlockSize = (blocks - 1) * 4;
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetFieldUpdatePacket,The following statement contains a magic number: var packet = new UpdatePacket { Position = 4 };
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetFieldUpdatePacket,The following statement contains a magic number: packet.Write(1 << (field.RawId & 31));
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetFieldUpdatePacket,The following statement contains a magic number: var blocks = (field.RawId >> 5) + 1;
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetFieldUpdatePacket,The following statement contains a magic number: var emptyBlockSize = (blocks - 1) * 4;
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetFieldUpdatePacket,The following statement contains a magic number: var packet = new UpdatePacket { Position = 4 };
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetFieldUpdatePacket,The following statement contains a magic number: packet.Write(1 << (field.RawId & 31));
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetFieldUpdatePacket,The following statement contains a magic number: var packet = new UpdatePacket(128) { Position = 4 };
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetFieldUpdatePacket,The following statement contains a magic number: var packet = new UpdatePacket(128) { Position = 4 };
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetFieldUpdatePacket,The following statement contains a magic number: var blocks = (byte)((field.RawId + 1) / 32 + 2);
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetFieldUpdatePacket,The following statement contains a magic number: var blocks = (byte)((field.RawId + 1) / 32 + 2);
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetFieldUpdatePacket,The following statement contains a magic number: if (blocks > 1)  			{  				packet.Zero((blocks - 2) * 4);    				var updateBlocks = new int[blocks];    				updateBlocks[field.RawId << 5] = (1 << (field.RawId & 31));  				updateBlocks[field.RawId + 1 << 5] = (1 << (field.RawId + 1 & 31));    				packet.Write(updateBlocks[0]);  				packet.Write(updateBlocks[1]);  			}  			else  			{  				packet.Zero((blocks - 1) * 4);  				packet.Write((1 << (field.RawId & 31) | 1 << (field.RawId + 1 & 31)));  			}
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetFieldUpdatePacket,The following statement contains a magic number: if (blocks > 1)  			{  				packet.Zero((blocks - 2) * 4);    				var updateBlocks = new int[blocks];    				updateBlocks[field.RawId << 5] = (1 << (field.RawId & 31));  				updateBlocks[field.RawId + 1 << 5] = (1 << (field.RawId + 1 & 31));    				packet.Write(updateBlocks[0]);  				packet.Write(updateBlocks[1]);  			}  			else  			{  				packet.Zero((blocks - 1) * 4);  				packet.Write((1 << (field.RawId & 31) | 1 << (field.RawId + 1 & 31)));  			}
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetFieldUpdatePacket,The following statement contains a magic number: if (blocks > 1)  			{  				packet.Zero((blocks - 2) * 4);    				var updateBlocks = new int[blocks];    				updateBlocks[field.RawId << 5] = (1 << (field.RawId & 31));  				updateBlocks[field.RawId + 1 << 5] = (1 << (field.RawId + 1 & 31));    				packet.Write(updateBlocks[0]);  				packet.Write(updateBlocks[1]);  			}  			else  			{  				packet.Zero((blocks - 1) * 4);  				packet.Write((1 << (field.RawId & 31) | 1 << (field.RawId + 1 & 31)));  			}
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetFieldUpdatePacket,The following statement contains a magic number: if (blocks > 1)  			{  				packet.Zero((blocks - 2) * 4);    				var updateBlocks = new int[blocks];    				updateBlocks[field.RawId << 5] = (1 << (field.RawId & 31));  				updateBlocks[field.RawId + 1 << 5] = (1 << (field.RawId + 1 & 31));    				packet.Write(updateBlocks[0]);  				packet.Write(updateBlocks[1]);  			}  			else  			{  				packet.Zero((blocks - 1) * 4);  				packet.Write((1 << (field.RawId & 31) | 1 << (field.RawId + 1 & 31)));  			}
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetFieldUpdatePacket,The following statement contains a magic number: if (blocks > 1)  			{  				packet.Zero((blocks - 2) * 4);    				var updateBlocks = new int[blocks];    				updateBlocks[field.RawId << 5] = (1 << (field.RawId & 31));  				updateBlocks[field.RawId + 1 << 5] = (1 << (field.RawId + 1 & 31));    				packet.Write(updateBlocks[0]);  				packet.Write(updateBlocks[1]);  			}  			else  			{  				packet.Zero((blocks - 1) * 4);  				packet.Write((1 << (field.RawId & 31) | 1 << (field.RawId + 1 & 31)));  			}
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetFieldUpdatePacket,The following statement contains a magic number: if (blocks > 1)  			{  				packet.Zero((blocks - 2) * 4);    				var updateBlocks = new int[blocks];    				updateBlocks[field.RawId << 5] = (1 << (field.RawId & 31));  				updateBlocks[field.RawId + 1 << 5] = (1 << (field.RawId + 1 & 31));    				packet.Write(updateBlocks[0]);  				packet.Write(updateBlocks[1]);  			}  			else  			{  				packet.Zero((blocks - 1) * 4);  				packet.Write((1 << (field.RawId & 31) | 1 << (field.RawId + 1 & 31)));  			}
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetFieldUpdatePacket,The following statement contains a magic number: if (blocks > 1)  			{  				packet.Zero((blocks - 2) * 4);    				var updateBlocks = new int[blocks];    				updateBlocks[field.RawId << 5] = (1 << (field.RawId & 31));  				updateBlocks[field.RawId + 1 << 5] = (1 << (field.RawId + 1 & 31));    				packet.Write(updateBlocks[0]);  				packet.Write(updateBlocks[1]);  			}  			else  			{  				packet.Zero((blocks - 1) * 4);  				packet.Write((1 << (field.RawId & 31) | 1 << (field.RawId + 1 & 31)));  			}
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetFieldUpdatePacket,The following statement contains a magic number: if (blocks > 1)  			{  				packet.Zero((blocks - 2) * 4);    				var updateBlocks = new int[blocks];    				updateBlocks[field.RawId << 5] = (1 << (field.RawId & 31));  				updateBlocks[field.RawId + 1 << 5] = (1 << (field.RawId + 1 & 31));    				packet.Write(updateBlocks[0]);  				packet.Write(updateBlocks[1]);  			}  			else  			{  				packet.Zero((blocks - 1) * 4);  				packet.Write((1 << (field.RawId & 31) | 1 << (field.RawId + 1 & 31)));  			}
Magic Number,WCell.RealmServer.Entities,ObjectBase,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\ObjectBase.Core.cs,GetFieldUpdatePacket,The following statement contains a magic number: if (blocks > 1)  			{  				packet.Zero((blocks - 2) * 4);    				var updateBlocks = new int[blocks];    				updateBlocks[field.RawId << 5] = (1 << (field.RawId & 31));  				updateBlocks[field.RawId + 1 << 5] = (1 << (field.RawId + 1 & 31));    				packet.Write(updateBlocks[0]);  				packet.Write(updateBlocks[1]);  			}  			else  			{  				packet.Zero((blocks - 1) * 4);  				packet.Write((1 << (field.RawId & 31) | 1 << (field.RawId + 1 & 31)));  			}
Magic Number,WCell.RealmServer.Entities,GameTables,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\GameTables.cs,ModifyValue,The following statement contains a magic number: return 1f/(value*100);
Magic Number,WCell.RealmServer.Entities,GameTables,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\GameTables.cs,GetValuePerRating,The following statement contains a magic number: if (level > 100)              {                  level = 100;              }
Magic Number,WCell.RealmServer.Entities,GameTables,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\GameTables.cs,GetValuePerRating,The following statement contains a magic number: if (level > 100)              {                  level = 100;              }
Magic Number,WCell.RealmServer.Entities,GameTables,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\GameTables.cs,GetValuePerRating,The following statement contains a magic number: return table[100*(int) classId + level - 101];
Magic Number,WCell.RealmServer.Entities,GameTables,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\GameTables.cs,GetValuePerRating,The following statement contains a magic number: return table[100*(int) classId + level - 101];
Magic Number,WCell.RealmServer.Entities,GameTables,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\GameTables.cs,LoadGtCombatRatingsDBC,The following statement contains a magic number: for (int rating = (int) CombatRating.WeaponSkill; rating < ((int) CombatRating.Expertise + 1); rating++)              {                  combatRatings[(CombatRating) rating] = new float[100];                    for (int i = (rating - 1)*100; i < rating*100; i++)                  {                      combatRatings[(CombatRating) rating][i - (rating - 1)*100] = dbcRdr.EntryList[i];                  }              }
Magic Number,WCell.RealmServer.Entities,GameTables,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\GameTables.cs,LoadGtCombatRatingsDBC,The following statement contains a magic number: for (int rating = (int) CombatRating.WeaponSkill; rating < ((int) CombatRating.Expertise + 1); rating++)              {                  combatRatings[(CombatRating) rating] = new float[100];                    for (int i = (rating - 1)*100; i < rating*100; i++)                  {                      combatRatings[(CombatRating) rating][i - (rating - 1)*100] = dbcRdr.EntryList[i];                  }              }
Magic Number,WCell.RealmServer.Entities,GameTables,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\GameTables.cs,LoadGtCombatRatingsDBC,The following statement contains a magic number: for (int rating = (int) CombatRating.WeaponSkill; rating < ((int) CombatRating.Expertise + 1); rating++)              {                  combatRatings[(CombatRating) rating] = new float[100];                    for (int i = (rating - 1)*100; i < rating*100; i++)                  {                      combatRatings[(CombatRating) rating][i - (rating - 1)*100] = dbcRdr.EntryList[i];                  }              }
Magic Number,WCell.RealmServer.Entities,GameTables,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\GameTables.cs,LoadGtCombatRatingsDBC,The following statement contains a magic number: for (int rating = (int) CombatRating.WeaponSkill; rating < ((int) CombatRating.Expertise + 1); rating++)              {                  combatRatings[(CombatRating) rating] = new float[100];                    for (int i = (rating - 1)*100; i < rating*100; i++)                  {                      combatRatings[(CombatRating) rating][i - (rating - 1)*100] = dbcRdr.EntryList[i];                  }              }
Magic Number,WCell.RealmServer.Entities,Movement,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Movement.cs,MoveTo,The following statement contains a magic number: if (findPath)  			{  				// TODO: Consider flying units & liquid levels  				var pos = m_owner.Position;  				pos.Z += 5;  				m_currentQuery = new PathQuery(pos' ref destination' m_owner.ContextHandler' OnPathQueryReply);    				m_owner.Map.Terrain.FindPath(m_currentQuery);  			}  			else if (m_owner.CanMove)  			{  				// start moving  				MoveToDestination();  			}
Magic Number,WCell.RealmServer.Entities,Movement,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Movement.cs,MoveToPoints,The following statement contains a magic number: pos.Z += 5;
Magic Number,WCell.RealmServer.Entities,Transport,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Transport.Update.cs,WriteUpdateFlag_0x10,The following statement contains a magic number: writer.Write(150754760);
Magic Number,WCell.RealmServer.Entities,Transport,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Transport.Update.cs,Transport,The following statement contains a magic number: AnimationProgress = 255;
Magic Number,WCell.RealmServer.Entities,Transport,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Transport.Update.cs,GenerateWaypoints,The following statement contains a magic number: while (node != null)  			{  			    bool teleport = (node.Value.Vertex.MapId != prevNode.Value.Vertex.MapId) ||  			                    node.Value.Vertex.Flags.HasFlag(TaxiPathNodeFlags.IsTeleport);    				var pathVertice = new TransportPathVertex  				{  					Time = time'  					MapId = node.Value.Vertex.MapId'  					Position = node.Value.Vertex.Position'  					Teleport = teleport  				};    				m_transportPathVertices.AddLast(pathVertice);    				if (node.Value.MoveTimeFromFirstStop < node.Value.MoveTimeToLastStop)  					time += (uint)((Math.Abs(node.Value.MoveTimeFromFirstStop - prevNode.Value.MoveTimeFromFirstStop)) * 1000f);  				else  					time += (uint)((Math.Abs(node.Value.MoveTimeToLastStop - prevNode.Value.MoveTimeToLastStop)) * 1000f);    				time += node.Value.Vertex.Delay * 1000;    				prevNode = node;  				node = node.Next;  			}
Magic Number,WCell.RealmServer.Entities,GOMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GameObjectHandler.cs,SendGameObjectInfo,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GAMEOBJECT_QUERY_RESPONSE'                                                     13 + 6 + name.Length + (24 * 4)))              {                  packet.Write(entry.Id);                  packet.Write((uint)entry.Type);                  packet.Write(entry.DisplayId);                  packet.Write(name);                  packet.Write((byte)0); // Name2                  packet.Write((byte)0); // Name3                  packet.Write((byte)0); // Name4                  packet.Write((byte)0); // string IconName                  packet.Write((byte)0); // string. Casting bar text                  packet.Write((byte)0); // string                    int i = 0;                  for (; i < entry.Fields.Length; i++)                  {                      packet.Write(entry.Fields[i]);                  }                    // must be 24 fields                  while (i < GOConstants.EntryFieldCount)                  {                      packet.Write(0);                      i++;                  }                    packet.Write(entry.Scale); // size                    for (i = 0; i < 4; i++)                  {                      packet.Write(0); // new 3.1                  }                    client.Send(packet);              }
Magic Number,WCell.RealmServer.Entities,GOMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GameObjectHandler.cs,SendGameObjectInfo,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GAMEOBJECT_QUERY_RESPONSE'                                                     13 + 6 + name.Length + (24 * 4)))              {                  packet.Write(entry.Id);                  packet.Write((uint)entry.Type);                  packet.Write(entry.DisplayId);                  packet.Write(name);                  packet.Write((byte)0); // Name2                  packet.Write((byte)0); // Name3                  packet.Write((byte)0); // Name4                  packet.Write((byte)0); // string IconName                  packet.Write((byte)0); // string. Casting bar text                  packet.Write((byte)0); // string                    int i = 0;                  for (; i < entry.Fields.Length; i++)                  {                      packet.Write(entry.Fields[i]);                  }                    // must be 24 fields                  while (i < GOConstants.EntryFieldCount)                  {                      packet.Write(0);                      i++;                  }                    packet.Write(entry.Scale); // size                    for (i = 0; i < 4; i++)                  {                      packet.Write(0); // new 3.1                  }                    client.Send(packet);              }
Magic Number,WCell.RealmServer.Entities,GOMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GameObjectHandler.cs,SendGameObjectInfo,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GAMEOBJECT_QUERY_RESPONSE'                                                     13 + 6 + name.Length + (24 * 4)))              {                  packet.Write(entry.Id);                  packet.Write((uint)entry.Type);                  packet.Write(entry.DisplayId);                  packet.Write(name);                  packet.Write((byte)0); // Name2                  packet.Write((byte)0); // Name3                  packet.Write((byte)0); // Name4                  packet.Write((byte)0); // string IconName                  packet.Write((byte)0); // string. Casting bar text                  packet.Write((byte)0); // string                    int i = 0;                  for (; i < entry.Fields.Length; i++)                  {                      packet.Write(entry.Fields[i]);                  }                    // must be 24 fields                  while (i < GOConstants.EntryFieldCount)                  {                      packet.Write(0);                      i++;                  }                    packet.Write(entry.Scale); // size                    for (i = 0; i < 4; i++)                  {                      packet.Write(0); // new 3.1                  }                    client.Send(packet);              }
Magic Number,WCell.RealmServer.Entities,GOMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GameObjectHandler.cs,SendGameObjectInfo,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GAMEOBJECT_QUERY_RESPONSE'                                                     13 + 6 + name.Length + (24 * 4)))              {                  packet.Write(entry.Id);                  packet.Write((uint)entry.Type);                  packet.Write(entry.DisplayId);                  packet.Write(name);                  packet.Write((byte)0); // Name2                  packet.Write((byte)0); // Name3                  packet.Write((byte)0); // Name4                  packet.Write((byte)0); // string IconName                  packet.Write((byte)0); // string. Casting bar text                  packet.Write((byte)0); // string                    int i = 0;                  for (; i < entry.Fields.Length; i++)                  {                      packet.Write(entry.Fields[i]);                  }                    // must be 24 fields                  while (i < GOConstants.EntryFieldCount)                  {                      packet.Write(0);                      i++;                  }                    packet.Write(entry.Scale); // size                    for (i = 0; i < 4; i++)                  {                      packet.Write(0); // new 3.1                  }                    client.Send(packet);              }
Magic Number,WCell.RealmServer.Entities,GOMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GameObjectHandler.cs,SendGameObjectInfo,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GAMEOBJECT_QUERY_RESPONSE'                                                     13 + 6 + name.Length + (24 * 4)))              {                  packet.Write(entry.Id);                  packet.Write((uint)entry.Type);                  packet.Write(entry.DisplayId);                  packet.Write(name);                  packet.Write((byte)0); // Name2                  packet.Write((byte)0); // Name3                  packet.Write((byte)0); // Name4                  packet.Write((byte)0); // string IconName                  packet.Write((byte)0); // string. Casting bar text                  packet.Write((byte)0); // string                    int i = 0;                  for (; i < entry.Fields.Length; i++)                  {                      packet.Write(entry.Fields[i]);                  }                    // must be 24 fields                  while (i < GOConstants.EntryFieldCount)                  {                      packet.Write(0);                      i++;                  }                    packet.Write(entry.Scale); // size                    for (i = 0; i < 4; i++)                  {                      packet.Write(0); // new 3.1                  }                    client.Send(packet);              }
Magic Number,WCell.RealmServer.Entities,WorldObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\WorldObject.Update.cs,AddUpdateAction,The following statement contains a magic number: if (m_updateActions == null)  			{  				m_updateActions = new List<ObjectUpdateTimer>(3);  			}
Magic Number,WCell.RealmServer.Entities,WorldObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\WorldObject.Update.cs,PlaceOnTop,The following statement contains a magic number: pos.Z += 2;
Magic Number,WCell.RealmServer.Entities,WorldObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\WorldObject.Update.cs,GetAngleTowards,The following statement contains a magic number: if (angle < 0)  			{  				angle += (2 * MathUtil.PI);  			}
Magic Number,WCell.RealmServer.Entities,WorldObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\WorldObject.Update.cs,GetAngleTowards,The following statement contains a magic number: if (angle < 0)  			{  				angle += (2 * MathUtil.PI);  			}
Magic Number,WCell.RealmServer.Entities,WorldObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\WorldObject.Update.cs,GetAngleTowards,The following statement contains a magic number: if (angle < 0)  			{  				// wrap angle from 0 to 2*PI (instead of -PI to PI) to correspond with orientation  				angle += (2 * MathUtil.PI);  			}
Magic Number,WCell.RealmServer.Entities,WorldObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\WorldObject.Update.cs,AddAreaAura,The following statement contains a magic number: if (m_areaAuras == null)  			{  				m_areaAuras = new List<AreaAura>(2);  			}  			else if (aura.Spell.AttributesExB.HasFlag(SpellAttributesExB.ExclusiveAreaAura))  			{  				// cannot be applied with other AreaAuras of that type  				foreach (var aaura in m_areaAuras)  				{  					if (aura.Spell.AttributesExB.HasFlag(SpellAttributesExB.ExclusiveAreaAura))  					{  						aaura.Remove(true);  						break;  					}  				}  			}
Magic Number,WCell.RealmServer.Entities,Item,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Item.Update.cs,GetEnchantSlot,The following statement contains a magic number: return (int)ItemFields.ENCHANTMENT_1_1 + ((int)slot * 3) + (int)offset;
Magic Number,WCell.RealmServer.Entities,Item,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Item.Update.cs,SetEnchantCharges,The following statement contains a magic number: SetInt32(enchBase + 2' value);
Magic Number,WCell.RealmServer.Entities,Corpse,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Corpse.cs,SetItem,The following statement contains a magic number: var id = template.DisplayId | (uint)((int)template.InventorySlotType << 24);
Magic Number,WCell.RealmServer.Formulas,RegenerationFormulas,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\RegenerationFormulas.cs,CalculateRageRegen,The following statement contains a magic number: return -10 * RegenRateFactor;
Magic Number,WCell.RealmServer.Formulas,RegenerationFormulas,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\RegenerationFormulas.cs,CalculateEnergyRegen,The following statement contains a magic number: return 10 * RegenRateFactor;
Magic Number,WCell.RealmServer.Formulas,RegenerationFormulas,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\RegenerationFormulas.cs,CalculateRunicPowerRegen,The following statement contains a magic number: return -10 * RegenRateFactor;
Magic Number,WCell.RealmServer.Formulas,RegenerationFormulas,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\RegenerationFormulas.cs,CalculateFocusRegen,The following statement contains a magic number: return 5 * RegenRateFactor;
Magic Number,WCell.RealmServer.Formulas,RegenerationFormulas,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\RegenerationFormulas.cs,GetRageForLevel,The following statement contains a magic number: return 1000;
Magic Number,WCell.RealmServer.Formulas,RegenerationFormulas,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\RegenerationFormulas.cs,GetRunicPowerForLevel,The following statement contains a magic number: return 1000;
Magic Number,WCell.RealmServer.Formulas,RegenerationFormulas,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\RegenerationFormulas.cs,GetRunesForLevel,The following statement contains a magic number: return 6;
Magic Number,WCell.RealmServer.Formulas,RegenerationFormulas,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\RegenerationFormulas.cs,GetFocusForLevel,The following statement contains a magic number: return 5 * unit.Level;
Magic Number,WCell.RealmServer.Formulas,RegenerationFormulas,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\RegenerationFormulas.cs,GetEnergyForLevel,The following statement contains a magic number: return 100;
Magic Number,WCell.RealmServer.Formulas,RageGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\RageGenerator.cs,GenerateDefaultAttackerRage,The following statement contains a magic number: if (action.IsWeaponAttack)  			{  				double hitFactor;  				if (action.Weapon == attacker.OffHandWeapon)  				{  					hitFactor = 1.75;  				}  				else  				{  					hitFactor = 3.5;  				}  				if (action.IsCritical)  				{  					hitFactor *= 2;  				}    				hitFactor *= action.Weapon.AttackTime;    				var lvl = attacker.Level;  				var c = 0.0092f * lvl * lvl + 3.23f * lvl + 4.27f;  				var rageRight = ((15 * action.ActualDamage / (4f * c)) + (hitFactor / 2000));  				var rageLeft = 15 * action.ActualDamage / c;    				var rage = rageRight;  				if(rageRight <= rageLeft)  					rage = rageLeft;  				// Multiplied by 2 to match an approximate value' check the formula instead.  				attacker.Power += (int)(rage)*10;  			}
Magic Number,WCell.RealmServer.Formulas,RageGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\RageGenerator.cs,GenerateDefaultAttackerRage,The following statement contains a magic number: if (action.IsWeaponAttack)  			{  				double hitFactor;  				if (action.Weapon == attacker.OffHandWeapon)  				{  					hitFactor = 1.75;  				}  				else  				{  					hitFactor = 3.5;  				}  				if (action.IsCritical)  				{  					hitFactor *= 2;  				}    				hitFactor *= action.Weapon.AttackTime;    				var lvl = attacker.Level;  				var c = 0.0092f * lvl * lvl + 3.23f * lvl + 4.27f;  				var rageRight = ((15 * action.ActualDamage / (4f * c)) + (hitFactor / 2000));  				var rageLeft = 15 * action.ActualDamage / c;    				var rage = rageRight;  				if(rageRight <= rageLeft)  					rage = rageLeft;  				// Multiplied by 2 to match an approximate value' check the formula instead.  				attacker.Power += (int)(rage)*10;  			}
Magic Number,WCell.RealmServer.Formulas,RageGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\RageGenerator.cs,GenerateDefaultAttackerRage,The following statement contains a magic number: if (action.IsWeaponAttack)  			{  				double hitFactor;  				if (action.Weapon == attacker.OffHandWeapon)  				{  					hitFactor = 1.75;  				}  				else  				{  					hitFactor = 3.5;  				}  				if (action.IsCritical)  				{  					hitFactor *= 2;  				}    				hitFactor *= action.Weapon.AttackTime;    				var lvl = attacker.Level;  				var c = 0.0092f * lvl * lvl + 3.23f * lvl + 4.27f;  				var rageRight = ((15 * action.ActualDamage / (4f * c)) + (hitFactor / 2000));  				var rageLeft = 15 * action.ActualDamage / c;    				var rage = rageRight;  				if(rageRight <= rageLeft)  					rage = rageLeft;  				// Multiplied by 2 to match an approximate value' check the formula instead.  				attacker.Power += (int)(rage)*10;  			}
Magic Number,WCell.RealmServer.Formulas,RageGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\RageGenerator.cs,GenerateDefaultAttackerRage,The following statement contains a magic number: if (action.IsWeaponAttack)  			{  				double hitFactor;  				if (action.Weapon == attacker.OffHandWeapon)  				{  					hitFactor = 1.75;  				}  				else  				{  					hitFactor = 3.5;  				}  				if (action.IsCritical)  				{  					hitFactor *= 2;  				}    				hitFactor *= action.Weapon.AttackTime;    				var lvl = attacker.Level;  				var c = 0.0092f * lvl * lvl + 3.23f * lvl + 4.27f;  				var rageRight = ((15 * action.ActualDamage / (4f * c)) + (hitFactor / 2000));  				var rageLeft = 15 * action.ActualDamage / c;    				var rage = rageRight;  				if(rageRight <= rageLeft)  					rage = rageLeft;  				// Multiplied by 2 to match an approximate value' check the formula instead.  				attacker.Power += (int)(rage)*10;  			}
Magic Number,WCell.RealmServer.Formulas,RageGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\RageGenerator.cs,GenerateDefaultAttackerRage,The following statement contains a magic number: if (action.IsWeaponAttack)  			{  				double hitFactor;  				if (action.Weapon == attacker.OffHandWeapon)  				{  					hitFactor = 1.75;  				}  				else  				{  					hitFactor = 3.5;  				}  				if (action.IsCritical)  				{  					hitFactor *= 2;  				}    				hitFactor *= action.Weapon.AttackTime;    				var lvl = attacker.Level;  				var c = 0.0092f * lvl * lvl + 3.23f * lvl + 4.27f;  				var rageRight = ((15 * action.ActualDamage / (4f * c)) + (hitFactor / 2000));  				var rageLeft = 15 * action.ActualDamage / c;    				var rage = rageRight;  				if(rageRight <= rageLeft)  					rage = rageLeft;  				// Multiplied by 2 to match an approximate value' check the formula instead.  				attacker.Power += (int)(rage)*10;  			}
Magic Number,WCell.RealmServer.Formulas,RageGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\RageGenerator.cs,GenerateDefaultAttackerRage,The following statement contains a magic number: if (action.IsWeaponAttack)  			{  				double hitFactor;  				if (action.Weapon == attacker.OffHandWeapon)  				{  					hitFactor = 1.75;  				}  				else  				{  					hitFactor = 3.5;  				}  				if (action.IsCritical)  				{  					hitFactor *= 2;  				}    				hitFactor *= action.Weapon.AttackTime;    				var lvl = attacker.Level;  				var c = 0.0092f * lvl * lvl + 3.23f * lvl + 4.27f;  				var rageRight = ((15 * action.ActualDamage / (4f * c)) + (hitFactor / 2000));  				var rageLeft = 15 * action.ActualDamage / c;    				var rage = rageRight;  				if(rageRight <= rageLeft)  					rage = rageLeft;  				// Multiplied by 2 to match an approximate value' check the formula instead.  				attacker.Power += (int)(rage)*10;  			}
Magic Number,WCell.RealmServer.Formulas,RageGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\RageGenerator.cs,GenerateDefaultAttackerRage,The following statement contains a magic number: if (action.IsWeaponAttack)  			{  				double hitFactor;  				if (action.Weapon == attacker.OffHandWeapon)  				{  					hitFactor = 1.75;  				}  				else  				{  					hitFactor = 3.5;  				}  				if (action.IsCritical)  				{  					hitFactor *= 2;  				}    				hitFactor *= action.Weapon.AttackTime;    				var lvl = attacker.Level;  				var c = 0.0092f * lvl * lvl + 3.23f * lvl + 4.27f;  				var rageRight = ((15 * action.ActualDamage / (4f * c)) + (hitFactor / 2000));  				var rageLeft = 15 * action.ActualDamage / c;    				var rage = rageRight;  				if(rageRight <= rageLeft)  					rage = rageLeft;  				// Multiplied by 2 to match an approximate value' check the formula instead.  				attacker.Power += (int)(rage)*10;  			}
Magic Number,WCell.RealmServer.Formulas,RageGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\RageGenerator.cs,GenerateDefaultVictimRage,The following statement contains a magic number: var c = (int)(0.0092 * lvl * lvl + 3.23f * lvl + 4.27f);
Magic Number,WCell.RealmServer.Formulas,RageGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\RageGenerator.cs,GenerateDefaultVictimRage,The following statement contains a magic number: victim.Power += (5 / 2 * action.ActualDamage / c)*10;
Magic Number,WCell.RealmServer.Formulas,RageGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\RageGenerator.cs,GenerateDefaultVictimRage,The following statement contains a magic number: victim.Power += (5 / 2 * action.ActualDamage / c)*10;
Magic Number,WCell.RealmServer.Formulas,RageGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\RageGenerator.cs,GenerateDefaultVictimRage,The following statement contains a magic number: victim.Power += (5 / 2 * action.ActualDamage / c)*10;
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,CalcOutlandXp,The following statement contains a magic number: if(targetLevel < 55)  			{  				return CalcDefaultXp(targetLevel' npc);  			}
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,CalcXp,The following statement contains a magic number: if (targetLvl >= receiverLvl)  			{  				xp += MathUtil.Divide(xp * (targetLvl - receiverLvl)' 20);  			}  			else  			{  				int grayLevel;  				if (receiverLvl > 39)  				{  					grayLevel = receiverLvl - 1 - MathUtil.Divide(receiverLvl' 5);  				}  				else if (receiverLvl > 5)  				{  					grayLevel = receiverLvl - 5 - MathUtil.Divide(receiverLvl' 10);  				}  				else  				{  					grayLevel = 0;  				}    				if (targetLvl > grayLevel)  				{  					int zeroDiff;  					if (receiverLvl > 39)  					{  						zeroDiff = 5 + MathUtil.Divide(receiverLvl' 5);  					}  					else if (receiverLvl > 19)  					{  						zeroDiff = 9 + MathUtil.Divide(receiverLvl' 10);  					}  					else if (receiverLvl > 15)  					{  						zeroDiff = 9;  					}  					else if (receiverLvl > 11)  					{  						zeroDiff = 8;  					}  					else if (receiverLvl > 9)  					{  						zeroDiff = 7;  					}  					else if (receiverLvl > 7)  					{  						zeroDiff = 6;  					}  					else  					{  						zeroDiff = 5;  					}  					xp += MathUtil.Divide((xp * (1 - (receiverLvl - targetLvl)))' zeroDiff);  				}  				else  				{  					xp = 0;  				}  			}
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,CalcXp,The following statement contains a magic number: if (targetLvl >= receiverLvl)  			{  				xp += MathUtil.Divide(xp * (targetLvl - receiverLvl)' 20);  			}  			else  			{  				int grayLevel;  				if (receiverLvl > 39)  				{  					grayLevel = receiverLvl - 1 - MathUtil.Divide(receiverLvl' 5);  				}  				else if (receiverLvl > 5)  				{  					grayLevel = receiverLvl - 5 - MathUtil.Divide(receiverLvl' 10);  				}  				else  				{  					grayLevel = 0;  				}    				if (targetLvl > grayLevel)  				{  					int zeroDiff;  					if (receiverLvl > 39)  					{  						zeroDiff = 5 + MathUtil.Divide(receiverLvl' 5);  					}  					else if (receiverLvl > 19)  					{  						zeroDiff = 9 + MathUtil.Divide(receiverLvl' 10);  					}  					else if (receiverLvl > 15)  					{  						zeroDiff = 9;  					}  					else if (receiverLvl > 11)  					{  						zeroDiff = 8;  					}  					else if (receiverLvl > 9)  					{  						zeroDiff = 7;  					}  					else if (receiverLvl > 7)  					{  						zeroDiff = 6;  					}  					else  					{  						zeroDiff = 5;  					}  					xp += MathUtil.Divide((xp * (1 - (receiverLvl - targetLvl)))' zeroDiff);  				}  				else  				{  					xp = 0;  				}  			}
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,CalcXp,The following statement contains a magic number: if (targetLvl >= receiverLvl)  			{  				xp += MathUtil.Divide(xp * (targetLvl - receiverLvl)' 20);  			}  			else  			{  				int grayLevel;  				if (receiverLvl > 39)  				{  					grayLevel = receiverLvl - 1 - MathUtil.Divide(receiverLvl' 5);  				}  				else if (receiverLvl > 5)  				{  					grayLevel = receiverLvl - 5 - MathUtil.Divide(receiverLvl' 10);  				}  				else  				{  					grayLevel = 0;  				}    				if (targetLvl > grayLevel)  				{  					int zeroDiff;  					if (receiverLvl > 39)  					{  						zeroDiff = 5 + MathUtil.Divide(receiverLvl' 5);  					}  					else if (receiverLvl > 19)  					{  						zeroDiff = 9 + MathUtil.Divide(receiverLvl' 10);  					}  					else if (receiverLvl > 15)  					{  						zeroDiff = 9;  					}  					else if (receiverLvl > 11)  					{  						zeroDiff = 8;  					}  					else if (receiverLvl > 9)  					{  						zeroDiff = 7;  					}  					else if (receiverLvl > 7)  					{  						zeroDiff = 6;  					}  					else  					{  						zeroDiff = 5;  					}  					xp += MathUtil.Divide((xp * (1 - (receiverLvl - targetLvl)))' zeroDiff);  				}  				else  				{  					xp = 0;  				}  			}
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,CalcXp,The following statement contains a magic number: if (targetLvl >= receiverLvl)  			{  				xp += MathUtil.Divide(xp * (targetLvl - receiverLvl)' 20);  			}  			else  			{  				int grayLevel;  				if (receiverLvl > 39)  				{  					grayLevel = receiverLvl - 1 - MathUtil.Divide(receiverLvl' 5);  				}  				else if (receiverLvl > 5)  				{  					grayLevel = receiverLvl - 5 - MathUtil.Divide(receiverLvl' 10);  				}  				else  				{  					grayLevel = 0;  				}    				if (targetLvl > grayLevel)  				{  					int zeroDiff;  					if (receiverLvl > 39)  					{  						zeroDiff = 5 + MathUtil.Divide(receiverLvl' 5);  					}  					else if (receiverLvl > 19)  					{  						zeroDiff = 9 + MathUtil.Divide(receiverLvl' 10);  					}  					else if (receiverLvl > 15)  					{  						zeroDiff = 9;  					}  					else if (receiverLvl > 11)  					{  						zeroDiff = 8;  					}  					else if (receiverLvl > 9)  					{  						zeroDiff = 7;  					}  					else if (receiverLvl > 7)  					{  						zeroDiff = 6;  					}  					else  					{  						zeroDiff = 5;  					}  					xp += MathUtil.Divide((xp * (1 - (receiverLvl - targetLvl)))' zeroDiff);  				}  				else  				{  					xp = 0;  				}  			}
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,CalcXp,The following statement contains a magic number: if (targetLvl >= receiverLvl)  			{  				xp += MathUtil.Divide(xp * (targetLvl - receiverLvl)' 20);  			}  			else  			{  				int grayLevel;  				if (receiverLvl > 39)  				{  					grayLevel = receiverLvl - 1 - MathUtil.Divide(receiverLvl' 5);  				}  				else if (receiverLvl > 5)  				{  					grayLevel = receiverLvl - 5 - MathUtil.Divide(receiverLvl' 10);  				}  				else  				{  					grayLevel = 0;  				}    				if (targetLvl > grayLevel)  				{  					int zeroDiff;  					if (receiverLvl > 39)  					{  						zeroDiff = 5 + MathUtil.Divide(receiverLvl' 5);  					}  					else if (receiverLvl > 19)  					{  						zeroDiff = 9 + MathUtil.Divide(receiverLvl' 10);  					}  					else if (receiverLvl > 15)  					{  						zeroDiff = 9;  					}  					else if (receiverLvl > 11)  					{  						zeroDiff = 8;  					}  					else if (receiverLvl > 9)  					{  						zeroDiff = 7;  					}  					else if (receiverLvl > 7)  					{  						zeroDiff = 6;  					}  					else  					{  						zeroDiff = 5;  					}  					xp += MathUtil.Divide((xp * (1 - (receiverLvl - targetLvl)))' zeroDiff);  				}  				else  				{  					xp = 0;  				}  			}
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,CalcXp,The following statement contains a magic number: if (targetLvl >= receiverLvl)  			{  				xp += MathUtil.Divide(xp * (targetLvl - receiverLvl)' 20);  			}  			else  			{  				int grayLevel;  				if (receiverLvl > 39)  				{  					grayLevel = receiverLvl - 1 - MathUtil.Divide(receiverLvl' 5);  				}  				else if (receiverLvl > 5)  				{  					grayLevel = receiverLvl - 5 - MathUtil.Divide(receiverLvl' 10);  				}  				else  				{  					grayLevel = 0;  				}    				if (targetLvl > grayLevel)  				{  					int zeroDiff;  					if (receiverLvl > 39)  					{  						zeroDiff = 5 + MathUtil.Divide(receiverLvl' 5);  					}  					else if (receiverLvl > 19)  					{  						zeroDiff = 9 + MathUtil.Divide(receiverLvl' 10);  					}  					else if (receiverLvl > 15)  					{  						zeroDiff = 9;  					}  					else if (receiverLvl > 11)  					{  						zeroDiff = 8;  					}  					else if (receiverLvl > 9)  					{  						zeroDiff = 7;  					}  					else if (receiverLvl > 7)  					{  						zeroDiff = 6;  					}  					else  					{  						zeroDiff = 5;  					}  					xp += MathUtil.Divide((xp * (1 - (receiverLvl - targetLvl)))' zeroDiff);  				}  				else  				{  					xp = 0;  				}  			}
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,CalcXp,The following statement contains a magic number: if (targetLvl >= receiverLvl)  			{  				xp += MathUtil.Divide(xp * (targetLvl - receiverLvl)' 20);  			}  			else  			{  				int grayLevel;  				if (receiverLvl > 39)  				{  					grayLevel = receiverLvl - 1 - MathUtil.Divide(receiverLvl' 5);  				}  				else if (receiverLvl > 5)  				{  					grayLevel = receiverLvl - 5 - MathUtil.Divide(receiverLvl' 10);  				}  				else  				{  					grayLevel = 0;  				}    				if (targetLvl > grayLevel)  				{  					int zeroDiff;  					if (receiverLvl > 39)  					{  						zeroDiff = 5 + MathUtil.Divide(receiverLvl' 5);  					}  					else if (receiverLvl > 19)  					{  						zeroDiff = 9 + MathUtil.Divide(receiverLvl' 10);  					}  					else if (receiverLvl > 15)  					{  						zeroDiff = 9;  					}  					else if (receiverLvl > 11)  					{  						zeroDiff = 8;  					}  					else if (receiverLvl > 9)  					{  						zeroDiff = 7;  					}  					else if (receiverLvl > 7)  					{  						zeroDiff = 6;  					}  					else  					{  						zeroDiff = 5;  					}  					xp += MathUtil.Divide((xp * (1 - (receiverLvl - targetLvl)))' zeroDiff);  				}  				else  				{  					xp = 0;  				}  			}
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,CalcXp,The following statement contains a magic number: if (targetLvl >= receiverLvl)  			{  				xp += MathUtil.Divide(xp * (targetLvl - receiverLvl)' 20);  			}  			else  			{  				int grayLevel;  				if (receiverLvl > 39)  				{  					grayLevel = receiverLvl - 1 - MathUtil.Divide(receiverLvl' 5);  				}  				else if (receiverLvl > 5)  				{  					grayLevel = receiverLvl - 5 - MathUtil.Divide(receiverLvl' 10);  				}  				else  				{  					grayLevel = 0;  				}    				if (targetLvl > grayLevel)  				{  					int zeroDiff;  					if (receiverLvl > 39)  					{  						zeroDiff = 5 + MathUtil.Divide(receiverLvl' 5);  					}  					else if (receiverLvl > 19)  					{  						zeroDiff = 9 + MathUtil.Divide(receiverLvl' 10);  					}  					else if (receiverLvl > 15)  					{  						zeroDiff = 9;  					}  					else if (receiverLvl > 11)  					{  						zeroDiff = 8;  					}  					else if (receiverLvl > 9)  					{  						zeroDiff = 7;  					}  					else if (receiverLvl > 7)  					{  						zeroDiff = 6;  					}  					else  					{  						zeroDiff = 5;  					}  					xp += MathUtil.Divide((xp * (1 - (receiverLvl - targetLvl)))' zeroDiff);  				}  				else  				{  					xp = 0;  				}  			}
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,CalcXp,The following statement contains a magic number: if (targetLvl >= receiverLvl)  			{  				xp += MathUtil.Divide(xp * (targetLvl - receiverLvl)' 20);  			}  			else  			{  				int grayLevel;  				if (receiverLvl > 39)  				{  					grayLevel = receiverLvl - 1 - MathUtil.Divide(receiverLvl' 5);  				}  				else if (receiverLvl > 5)  				{  					grayLevel = receiverLvl - 5 - MathUtil.Divide(receiverLvl' 10);  				}  				else  				{  					grayLevel = 0;  				}    				if (targetLvl > grayLevel)  				{  					int zeroDiff;  					if (receiverLvl > 39)  					{  						zeroDiff = 5 + MathUtil.Divide(receiverLvl' 5);  					}  					else if (receiverLvl > 19)  					{  						zeroDiff = 9 + MathUtil.Divide(receiverLvl' 10);  					}  					else if (receiverLvl > 15)  					{  						zeroDiff = 9;  					}  					else if (receiverLvl > 11)  					{  						zeroDiff = 8;  					}  					else if (receiverLvl > 9)  					{  						zeroDiff = 7;  					}  					else if (receiverLvl > 7)  					{  						zeroDiff = 6;  					}  					else  					{  						zeroDiff = 5;  					}  					xp += MathUtil.Divide((xp * (1 - (receiverLvl - targetLvl)))' zeroDiff);  				}  				else  				{  					xp = 0;  				}  			}
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,CalcXp,The following statement contains a magic number: if (targetLvl >= receiverLvl)  			{  				xp += MathUtil.Divide(xp * (targetLvl - receiverLvl)' 20);  			}  			else  			{  				int grayLevel;  				if (receiverLvl > 39)  				{  					grayLevel = receiverLvl - 1 - MathUtil.Divide(receiverLvl' 5);  				}  				else if (receiverLvl > 5)  				{  					grayLevel = receiverLvl - 5 - MathUtil.Divide(receiverLvl' 10);  				}  				else  				{  					grayLevel = 0;  				}    				if (targetLvl > grayLevel)  				{  					int zeroDiff;  					if (receiverLvl > 39)  					{  						zeroDiff = 5 + MathUtil.Divide(receiverLvl' 5);  					}  					else if (receiverLvl > 19)  					{  						zeroDiff = 9 + MathUtil.Divide(receiverLvl' 10);  					}  					else if (receiverLvl > 15)  					{  						zeroDiff = 9;  					}  					else if (receiverLvl > 11)  					{  						zeroDiff = 8;  					}  					else if (receiverLvl > 9)  					{  						zeroDiff = 7;  					}  					else if (receiverLvl > 7)  					{  						zeroDiff = 6;  					}  					else  					{  						zeroDiff = 5;  					}  					xp += MathUtil.Divide((xp * (1 - (receiverLvl - targetLvl)))' zeroDiff);  				}  				else  				{  					xp = 0;  				}  			}
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,CalcXp,The following statement contains a magic number: if (targetLvl >= receiverLvl)  			{  				xp += MathUtil.Divide(xp * (targetLvl - receiverLvl)' 20);  			}  			else  			{  				int grayLevel;  				if (receiverLvl > 39)  				{  					grayLevel = receiverLvl - 1 - MathUtil.Divide(receiverLvl' 5);  				}  				else if (receiverLvl > 5)  				{  					grayLevel = receiverLvl - 5 - MathUtil.Divide(receiverLvl' 10);  				}  				else  				{  					grayLevel = 0;  				}    				if (targetLvl > grayLevel)  				{  					int zeroDiff;  					if (receiverLvl > 39)  					{  						zeroDiff = 5 + MathUtil.Divide(receiverLvl' 5);  					}  					else if (receiverLvl > 19)  					{  						zeroDiff = 9 + MathUtil.Divide(receiverLvl' 10);  					}  					else if (receiverLvl > 15)  					{  						zeroDiff = 9;  					}  					else if (receiverLvl > 11)  					{  						zeroDiff = 8;  					}  					else if (receiverLvl > 9)  					{  						zeroDiff = 7;  					}  					else if (receiverLvl > 7)  					{  						zeroDiff = 6;  					}  					else  					{  						zeroDiff = 5;  					}  					xp += MathUtil.Divide((xp * (1 - (receiverLvl - targetLvl)))' zeroDiff);  				}  				else  				{  					xp = 0;  				}  			}
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,CalcXp,The following statement contains a magic number: if (targetLvl >= receiverLvl)  			{  				xp += MathUtil.Divide(xp * (targetLvl - receiverLvl)' 20);  			}  			else  			{  				int grayLevel;  				if (receiverLvl > 39)  				{  					grayLevel = receiverLvl - 1 - MathUtil.Divide(receiverLvl' 5);  				}  				else if (receiverLvl > 5)  				{  					grayLevel = receiverLvl - 5 - MathUtil.Divide(receiverLvl' 10);  				}  				else  				{  					grayLevel = 0;  				}    				if (targetLvl > grayLevel)  				{  					int zeroDiff;  					if (receiverLvl > 39)  					{  						zeroDiff = 5 + MathUtil.Divide(receiverLvl' 5);  					}  					else if (receiverLvl > 19)  					{  						zeroDiff = 9 + MathUtil.Divide(receiverLvl' 10);  					}  					else if (receiverLvl > 15)  					{  						zeroDiff = 9;  					}  					else if (receiverLvl > 11)  					{  						zeroDiff = 8;  					}  					else if (receiverLvl > 9)  					{  						zeroDiff = 7;  					}  					else if (receiverLvl > 7)  					{  						zeroDiff = 6;  					}  					else  					{  						zeroDiff = 5;  					}  					xp += MathUtil.Divide((xp * (1 - (receiverLvl - targetLvl)))' zeroDiff);  				}  				else  				{  					xp = 0;  				}  			}
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,CalcXp,The following statement contains a magic number: if (targetLvl >= receiverLvl)  			{  				xp += MathUtil.Divide(xp * (targetLvl - receiverLvl)' 20);  			}  			else  			{  				int grayLevel;  				if (receiverLvl > 39)  				{  					grayLevel = receiverLvl - 1 - MathUtil.Divide(receiverLvl' 5);  				}  				else if (receiverLvl > 5)  				{  					grayLevel = receiverLvl - 5 - MathUtil.Divide(receiverLvl' 10);  				}  				else  				{  					grayLevel = 0;  				}    				if (targetLvl > grayLevel)  				{  					int zeroDiff;  					if (receiverLvl > 39)  					{  						zeroDiff = 5 + MathUtil.Divide(receiverLvl' 5);  					}  					else if (receiverLvl > 19)  					{  						zeroDiff = 9 + MathUtil.Divide(receiverLvl' 10);  					}  					else if (receiverLvl > 15)  					{  						zeroDiff = 9;  					}  					else if (receiverLvl > 11)  					{  						zeroDiff = 8;  					}  					else if (receiverLvl > 9)  					{  						zeroDiff = 7;  					}  					else if (receiverLvl > 7)  					{  						zeroDiff = 6;  					}  					else  					{  						zeroDiff = 5;  					}  					xp += MathUtil.Divide((xp * (1 - (receiverLvl - targetLvl)))' zeroDiff);  				}  				else  				{  					xp = 0;  				}  			}
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,CalcXp,The following statement contains a magic number: if (targetLvl >= receiverLvl)  			{  				xp += MathUtil.Divide(xp * (targetLvl - receiverLvl)' 20);  			}  			else  			{  				int grayLevel;  				if (receiverLvl > 39)  				{  					grayLevel = receiverLvl - 1 - MathUtil.Divide(receiverLvl' 5);  				}  				else if (receiverLvl > 5)  				{  					grayLevel = receiverLvl - 5 - MathUtil.Divide(receiverLvl' 10);  				}  				else  				{  					grayLevel = 0;  				}    				if (targetLvl > grayLevel)  				{  					int zeroDiff;  					if (receiverLvl > 39)  					{  						zeroDiff = 5 + MathUtil.Divide(receiverLvl' 5);  					}  					else if (receiverLvl > 19)  					{  						zeroDiff = 9 + MathUtil.Divide(receiverLvl' 10);  					}  					else if (receiverLvl > 15)  					{  						zeroDiff = 9;  					}  					else if (receiverLvl > 11)  					{  						zeroDiff = 8;  					}  					else if (receiverLvl > 9)  					{  						zeroDiff = 7;  					}  					else if (receiverLvl > 7)  					{  						zeroDiff = 6;  					}  					else  					{  						zeroDiff = 5;  					}  					xp += MathUtil.Divide((xp * (1 - (receiverLvl - targetLvl)))' zeroDiff);  				}  				else  				{  					xp = 0;  				}  			}
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,CalcXp,The following statement contains a magic number: if (targetLvl >= receiverLvl)  			{  				xp += MathUtil.Divide(xp * (targetLvl - receiverLvl)' 20);  			}  			else  			{  				int grayLevel;  				if (receiverLvl > 39)  				{  					grayLevel = receiverLvl - 1 - MathUtil.Divide(receiverLvl' 5);  				}  				else if (receiverLvl > 5)  				{  					grayLevel = receiverLvl - 5 - MathUtil.Divide(receiverLvl' 10);  				}  				else  				{  					grayLevel = 0;  				}    				if (targetLvl > grayLevel)  				{  					int zeroDiff;  					if (receiverLvl > 39)  					{  						zeroDiff = 5 + MathUtil.Divide(receiverLvl' 5);  					}  					else if (receiverLvl > 19)  					{  						zeroDiff = 9 + MathUtil.Divide(receiverLvl' 10);  					}  					else if (receiverLvl > 15)  					{  						zeroDiff = 9;  					}  					else if (receiverLvl > 11)  					{  						zeroDiff = 8;  					}  					else if (receiverLvl > 9)  					{  						zeroDiff = 7;  					}  					else if (receiverLvl > 7)  					{  						zeroDiff = 6;  					}  					else  					{  						zeroDiff = 5;  					}  					xp += MathUtil.Divide((xp * (1 - (receiverLvl - targetLvl)))' zeroDiff);  				}  				else  				{  					xp = 0;  				}  			}
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,CalcXp,The following statement contains a magic number: if (targetLvl >= receiverLvl)  			{  				xp += MathUtil.Divide(xp * (targetLvl - receiverLvl)' 20);  			}  			else  			{  				int grayLevel;  				if (receiverLvl > 39)  				{  					grayLevel = receiverLvl - 1 - MathUtil.Divide(receiverLvl' 5);  				}  				else if (receiverLvl > 5)  				{  					grayLevel = receiverLvl - 5 - MathUtil.Divide(receiverLvl' 10);  				}  				else  				{  					grayLevel = 0;  				}    				if (targetLvl > grayLevel)  				{  					int zeroDiff;  					if (receiverLvl > 39)  					{  						zeroDiff = 5 + MathUtil.Divide(receiverLvl' 5);  					}  					else if (receiverLvl > 19)  					{  						zeroDiff = 9 + MathUtil.Divide(receiverLvl' 10);  					}  					else if (receiverLvl > 15)  					{  						zeroDiff = 9;  					}  					else if (receiverLvl > 11)  					{  						zeroDiff = 8;  					}  					else if (receiverLvl > 9)  					{  						zeroDiff = 7;  					}  					else if (receiverLvl > 7)  					{  						zeroDiff = 6;  					}  					else  					{  						zeroDiff = 5;  					}  					xp += MathUtil.Divide((xp * (1 - (receiverLvl - targetLvl)))' zeroDiff);  				}  				else  				{  					xp = 0;  				}  			}
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,CalcXp,The following statement contains a magic number: if (targetLvl >= receiverLvl)  			{  				xp += MathUtil.Divide(xp * (targetLvl - receiverLvl)' 20);  			}  			else  			{  				int grayLevel;  				if (receiverLvl > 39)  				{  					grayLevel = receiverLvl - 1 - MathUtil.Divide(receiverLvl' 5);  				}  				else if (receiverLvl > 5)  				{  					grayLevel = receiverLvl - 5 - MathUtil.Divide(receiverLvl' 10);  				}  				else  				{  					grayLevel = 0;  				}    				if (targetLvl > grayLevel)  				{  					int zeroDiff;  					if (receiverLvl > 39)  					{  						zeroDiff = 5 + MathUtil.Divide(receiverLvl' 5);  					}  					else if (receiverLvl > 19)  					{  						zeroDiff = 9 + MathUtil.Divide(receiverLvl' 10);  					}  					else if (receiverLvl > 15)  					{  						zeroDiff = 9;  					}  					else if (receiverLvl > 11)  					{  						zeroDiff = 8;  					}  					else if (receiverLvl > 9)  					{  						zeroDiff = 7;  					}  					else if (receiverLvl > 7)  					{  						zeroDiff = 6;  					}  					else  					{  						zeroDiff = 5;  					}  					xp += MathUtil.Divide((xp * (1 - (receiverLvl - targetLvl)))' zeroDiff);  				}  				else  				{  					xp = 0;  				}  			}
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,CalcXp,The following statement contains a magic number: if (targetLvl >= receiverLvl)  			{  				xp += MathUtil.Divide(xp * (targetLvl - receiverLvl)' 20);  			}  			else  			{  				int grayLevel;  				if (receiverLvl > 39)  				{  					grayLevel = receiverLvl - 1 - MathUtil.Divide(receiverLvl' 5);  				}  				else if (receiverLvl > 5)  				{  					grayLevel = receiverLvl - 5 - MathUtil.Divide(receiverLvl' 10);  				}  				else  				{  					grayLevel = 0;  				}    				if (targetLvl > grayLevel)  				{  					int zeroDiff;  					if (receiverLvl > 39)  					{  						zeroDiff = 5 + MathUtil.Divide(receiverLvl' 5);  					}  					else if (receiverLvl > 19)  					{  						zeroDiff = 9 + MathUtil.Divide(receiverLvl' 10);  					}  					else if (receiverLvl > 15)  					{  						zeroDiff = 9;  					}  					else if (receiverLvl > 11)  					{  						zeroDiff = 8;  					}  					else if (receiverLvl > 9)  					{  						zeroDiff = 7;  					}  					else if (receiverLvl > 7)  					{  						zeroDiff = 6;  					}  					else  					{  						zeroDiff = 5;  					}  					xp += MathUtil.Divide((xp * (1 - (receiverLvl - targetLvl)))' zeroDiff);  				}  				else  				{  					xp = 0;  				}  			}
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,CalcXp,The following statement contains a magic number: if (targetLvl >= receiverLvl)  			{  				xp += MathUtil.Divide(xp * (targetLvl - receiverLvl)' 20);  			}  			else  			{  				int grayLevel;  				if (receiverLvl > 39)  				{  					grayLevel = receiverLvl - 1 - MathUtil.Divide(receiverLvl' 5);  				}  				else if (receiverLvl > 5)  				{  					grayLevel = receiverLvl - 5 - MathUtil.Divide(receiverLvl' 10);  				}  				else  				{  					grayLevel = 0;  				}    				if (targetLvl > grayLevel)  				{  					int zeroDiff;  					if (receiverLvl > 39)  					{  						zeroDiff = 5 + MathUtil.Divide(receiverLvl' 5);  					}  					else if (receiverLvl > 19)  					{  						zeroDiff = 9 + MathUtil.Divide(receiverLvl' 10);  					}  					else if (receiverLvl > 15)  					{  						zeroDiff = 9;  					}  					else if (receiverLvl > 11)  					{  						zeroDiff = 8;  					}  					else if (receiverLvl > 9)  					{  						zeroDiff = 7;  					}  					else if (receiverLvl > 7)  					{  						zeroDiff = 6;  					}  					else  					{  						zeroDiff = 5;  					}  					xp += MathUtil.Divide((xp * (1 - (receiverLvl - targetLvl)))' zeroDiff);  				}  				else  				{  					xp = 0;  				}  			}
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,CalcXp,The following statement contains a magic number: if (targetLvl >= receiverLvl)  			{  				xp += MathUtil.Divide(xp * (targetLvl - receiverLvl)' 20);  			}  			else  			{  				int grayLevel;  				if (receiverLvl > 39)  				{  					grayLevel = receiverLvl - 1 - MathUtil.Divide(receiverLvl' 5);  				}  				else if (receiverLvl > 5)  				{  					grayLevel = receiverLvl - 5 - MathUtil.Divide(receiverLvl' 10);  				}  				else  				{  					grayLevel = 0;  				}    				if (targetLvl > grayLevel)  				{  					int zeroDiff;  					if (receiverLvl > 39)  					{  						zeroDiff = 5 + MathUtil.Divide(receiverLvl' 5);  					}  					else if (receiverLvl > 19)  					{  						zeroDiff = 9 + MathUtil.Divide(receiverLvl' 10);  					}  					else if (receiverLvl > 15)  					{  						zeroDiff = 9;  					}  					else if (receiverLvl > 11)  					{  						zeroDiff = 8;  					}  					else if (receiverLvl > 9)  					{  						zeroDiff = 7;  					}  					else if (receiverLvl > 7)  					{  						zeroDiff = 6;  					}  					else  					{  						zeroDiff = 5;  					}  					xp += MathUtil.Divide((xp * (1 - (receiverLvl - targetLvl)))' zeroDiff);  				}  				else  				{  					xp = 0;  				}  			}
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,CalcXp,The following statement contains a magic number: if (targetLvl >= receiverLvl)  			{  				xp += MathUtil.Divide(xp * (targetLvl - receiverLvl)' 20);  			}  			else  			{  				int grayLevel;  				if (receiverLvl > 39)  				{  					grayLevel = receiverLvl - 1 - MathUtil.Divide(receiverLvl' 5);  				}  				else if (receiverLvl > 5)  				{  					grayLevel = receiverLvl - 5 - MathUtil.Divide(receiverLvl' 10);  				}  				else  				{  					grayLevel = 0;  				}    				if (targetLvl > grayLevel)  				{  					int zeroDiff;  					if (receiverLvl > 39)  					{  						zeroDiff = 5 + MathUtil.Divide(receiverLvl' 5);  					}  					else if (receiverLvl > 19)  					{  						zeroDiff = 9 + MathUtil.Divide(receiverLvl' 10);  					}  					else if (receiverLvl > 15)  					{  						zeroDiff = 9;  					}  					else if (receiverLvl > 11)  					{  						zeroDiff = 8;  					}  					else if (receiverLvl > 9)  					{  						zeroDiff = 7;  					}  					else if (receiverLvl > 7)  					{  						zeroDiff = 6;  					}  					else  					{  						zeroDiff = 5;  					}  					xp += MathUtil.Divide((xp * (1 - (receiverLvl - targetLvl)))' zeroDiff);  				}  				else  				{  					xp = 0;  				}  			}
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,GetExplorationXp,The following statement contains a magic number: return ExplorationXpFactor * (zone.AreaLevel * 20);
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,GetPetXPForLevel,The following statement contains a magic number: return ((GetXpForlevel(level) * PetMgr.PetExperienceOfOwnerPercent + 50) / 100);
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,GetPetXPForLevel,The following statement contains a magic number: return ((GetXpForlevel(level) * PetMgr.PetExperienceOfOwnerPercent + 50) / 100);
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,GetGrayLevel,The following statement contains a magic number: if (playerLevel <= 5) return 0;  			else if (playerLevel <= 39) return playerLevel - 5 - playerLevel / 10;  			else if (playerLevel <= 59) return playerLevel - 1 - playerLevel / 5;  			else return playerLevel - 9;
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,GetGrayLevel,The following statement contains a magic number: if (playerLevel <= 5) return 0;  			else if (playerLevel <= 39) return playerLevel - 5 - playerLevel / 10;  			else if (playerLevel <= 59) return playerLevel - 1 - playerLevel / 5;  			else return playerLevel - 9;
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,GetGrayLevel,The following statement contains a magic number: if (playerLevel <= 5) return 0;  			else if (playerLevel <= 39) return playerLevel - 5 - playerLevel / 10;  			else if (playerLevel <= 59) return playerLevel - 1 - playerLevel / 5;  			else return playerLevel - 9;
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,GetGrayLevel,The following statement contains a magic number: if (playerLevel <= 5) return 0;  			else if (playerLevel <= 39) return playerLevel - 5 - playerLevel / 10;  			else if (playerLevel <= 59) return playerLevel - 1 - playerLevel / 5;  			else return playerLevel - 9;
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,GetGrayLevel,The following statement contains a magic number: if (playerLevel <= 5) return 0;  			else if (playerLevel <= 39) return playerLevel - 5 - playerLevel / 10;  			else if (playerLevel <= 59) return playerLevel - 1 - playerLevel / 5;  			else return playerLevel - 9;
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,GetGrayLevel,The following statement contains a magic number: if (playerLevel <= 5) return 0;  			else if (playerLevel <= 39) return playerLevel - 5 - playerLevel / 10;  			else if (playerLevel <= 59) return playerLevel - 1 - playerLevel / 5;  			else return playerLevel - 9;
Magic Number,WCell.RealmServer.Formulas,XpGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Formulas\XpGenerator.cs,GetGrayLevel,The following statement contains a magic number: if (playerLevel <= 5) return 0;  			else if (playerLevel <= 39) return playerLevel - 5 - playerLevel / 10;  			else if (playerLevel <= 59) return playerLevel - 1 - playerLevel / 5;  			else return playerLevel - 9;
Magic Number,WCell.RealmServer.GameObjects.Spawns,GOSpawnEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\Spawns\GOSpawnEntry.cs,GetAllDataHolders,The following statement contains a magic number: var list = new List<GOSpawnEntry>(10000);
Magic Number,WCell.RealmServer.Global,WorldInstanceCollection<TE;TM>,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldInstanceCollection.cs,GetOrCreateInstances,The following statement contains a magic number: try  		    {  		        // get again' to make sure that the list was not already created while the lock was being acquiredinstances = Instances.Get(map.ToUInt32(null));  			instances = Instances.Get(map.ToUInt32(null));  			if (instances == null)  				Instances[map.ToUInt32(null)] = instances = new TM[10];  		    }  		    finally  		    {  		        _lck.ExitWriteLock();  		    }
Magic Number,WCell.RealmServer.Global,WorldEventMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldEventMgr.cs,LoadAll,The following statement contains a magic number: if (!Loaded)              {                  ContentMgr.Load<WorldEvent>();                  ContentMgr.Load<WorldEventNpcData>();                  ContentMgr.Load<WorldEventQuest>();                  Loaded = true;                  LastUpdateTime = DateTime.Now;                    Log.Debug("{0} World Events loaded."' _eventCount);                                    // Add the Update method to the world task queue                  World.TaskQueue.CallPeriodically(10000' Update);              }
Magic Number,WCell.RealmServer.Global,WorldEventMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldEventMgr.cs,UnloadAll,The following statement contains a magic number: if (Loaded)              {                  Loaded = false;                  AllEvents = new WorldEvent[100];  		        ActiveEvents = new WorldEvent[100];                  return true;              }
Magic Number,WCell.RealmServer.Global,WorldEventMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldEventMgr.cs,UnloadAll,The following statement contains a magic number: if (Loaded)              {                  Loaded = false;                  AllEvents = new WorldEvent[100];  		        ActiveEvents = new WorldEvent[100];                  return true;              }
Magic Number,WCell.RealmServer.Global,WorldMapOverlayEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldMapOverlayEntry.cs,WorldMapOverlayEntry,The following statement contains a magic number: ZoneTemplateId = new ZoneId[4];
Magic Number,WCell.RealmServer.Global,World,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\World.cs,Save,The following statement contains a magic number: lock (PauseLock)  			{  				if (needsSave)  				{  					_saving = true;  					// pause the world so nothing else can happen anymore  					//Paused = true;    					// save maps  					foreach (var map in GetAllMaps())  					{  						map.Save();  					}    					// save characters  					var chars = GetAllCharacters();  					var saveCount = chars.Count;  					RealmServer.IOQueue.ExecuteInContext(() =>  					{  						for (var i = 0; i < chars.Count; i++)  						{  							var chr = chars[i];  							if (chr.IsInWorld)  							{  								if (beforeShutdown)  								{  									chr.Record.LastLogout = DateTime.Now;  								}  								chr.SaveNow();  							}    							if (beforeShutdown)  							{  								// Game over  								chr.Record.CanSave = false;  								chr.Client.Disconnect();  							}  							saveCount--;  						}    						saveCount = 0;  					});    					while (saveCount > 0)  					{  						Thread.Sleep(50);  					}    					_saving = false;    					var evt = Saved;  					if (evt != null)  					{  						Saved();  					}  				}  			}
Magic Number,WCell.RealmServer.Global,Map,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Map.cs,SetUpdatePriorityTicks,The following statement contains a magic number: SetDefaultUpdatePriorityTick(UpdatePriority.Inactive' 10000);
Magic Number,WCell.RealmServer.Global,Map,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Map.cs,SetUpdatePriorityTicks,The following statement contains a magic number: SetDefaultUpdatePriorityTick(UpdatePriority.Background' 3000);
Magic Number,WCell.RealmServer.Global,Map,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Map.cs,SetUpdatePriorityTicks,The following statement contains a magic number: SetDefaultUpdatePriorityTick(UpdatePriority.VeryLowPriority' 1000);
Magic Number,WCell.RealmServer.Global,Map,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Map.cs,SetUpdatePriorityTicks,The following statement contains a magic number: SetDefaultUpdatePriorityTick(UpdatePriority.LowPriority' 600);
Magic Number,WCell.RealmServer.Global,Map,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Map.cs,SetUpdatePriorityTicks,The following statement contains a magic number: SetDefaultUpdatePriorityTick(UpdatePriority.Active' 300);
Magic Number,WCell.RealmServer.Global,Map,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Map.cs,MapUpdateCallback,The following statement contains a magic number: if (Interlocked.CompareExchange(ref m_currentThreadId' Thread.CurrentThread.ManagedThreadId' 0) == 0)  			//lock (m_mapTime)  			{  				// get the time at the start of our callback  				var updateStart = DateTime.Now;  				var updateDelta = (updateStart - m_lastUpdateTime).ToMilliSecondsInt();    				// process all the messages  				IMessage msg;  				while (m_messageQueue.TryDequeue(out msg))  				{  					try  					{  						msg.Execute();  					}  					catch (Exception e)  					{  						LogUtil.ErrorException(e' "Exception raised when processing Message.");  					}  				}    				// check to see if it's time to run a map update yet again  				//if (m_lastMapUpdate + DefaultUpdateDelay <= now)    				m_isUpdating = true;    				// Updatables  				// progress pending updates  				foreach (var updatable in m_updatables)  				{  					try  					{  						updatable.Update(updateDelta);  					}  					catch (Exception e)  					{  						LogUtil.ErrorException(e' "Exception raised when updating Updatable: " + updatable);  						UnregisterUpdatableLater(updatable);  					}  				}    				// update all Objects in the Map  				// copy objects' so object-internal message processing won't interfere with updating  				foreach (var obj in m_objects.Values)  				{  					if (obj.IsTeleporting)  					{  						// dont update while teleporting  						continue;  					}    					UpdatePriority priority;  					if (!obj.IsAreaActive)  					{  						if (!m_updateInactiveAreas)  						{  							continue;  						}  						priority = UpdatePriority.Inactive;  					}  					else  					{  						//priority = obj.UpdatePriority;  						priority = UpdatePriority.HighPriority;  					}    					try  					{  						// Update Object  						var minObjUpdateDelta = UpdatePriorityMillis[(int)priority];  						var objUpdateDelta = (updateStart - obj.LastUpdateTime).ToMilliSecondsInt();    						if (objUpdateDelta >= minObjUpdateDelta)  						{  							obj.LastUpdateTime = updateStart;  							obj.Update(objUpdateDelta);  						}  					}  					catch (Exception e)  					{  						LogUtil.ErrorException(e' "Exception raised when updating Object: " + obj);    						// Fail-safe:  						if (obj is Unit)  						{  							var unit = (Unit)obj;  							if (unit.Brain != null)  							{  								unit.Brain.IsRunning = false;  							}  						}  						if (obj is Character)  						{  							((Character)obj).Client.Disconnect();  						}  						else  						{  							obj.Delete();  						}  					}  				}    				if (m_tickCount % CharacterUpdateEnvironmentTicks == 0)  				{  					UpdateCharacters();  				}    				UpdateMap(); // map specific stuff    				// we updated the map' so set our last update time to now  				m_lastUpdateTime = updateStart;  				m_tickCount++;  				m_isUpdating = false;    				// get the time' now that we've finished our update callback  				var updateEnd = DateTime.Now;  				var newUpdateDelta = updateEnd - updateStart;    				// weigh old update-time 9 times and new update-time once  				_avgUpdateTime = ((_avgUpdateTime * 9) + (float)(newUpdateDelta).TotalMilliseconds) / 10;    				// make sure to unset the ID *before* enqueuing the task in the ThreadPool again  				Interlocked.Exchange(ref m_currentThreadId' 0);  				if (m_running)  				{  					var callbackTimeout = m_updateDelay - newUpdateDelta.ToMilliSecondsInt();  					if (callbackTimeout < 0)  					{  						// even if we are in a hurry: For the sake of load-balance we have to give control back to the ThreadPool  						callbackTimeout = 0;  					}    					Task.Factory.StartNewDelayed(callbackTimeout' MapUpdateCallback' this);  				}  				else  				{  					if (IsDisposed)  					{  						// the Map was marked as disposed and can now be trashed  						Dispose();  					}  				}  			}
Magic Number,WCell.RealmServer.Global,Map,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Map.cs,MapUpdateCallback,The following statement contains a magic number: if (Interlocked.CompareExchange(ref m_currentThreadId' Thread.CurrentThread.ManagedThreadId' 0) == 0)  			//lock (m_mapTime)  			{  				// get the time at the start of our callback  				var updateStart = DateTime.Now;  				var updateDelta = (updateStart - m_lastUpdateTime).ToMilliSecondsInt();    				// process all the messages  				IMessage msg;  				while (m_messageQueue.TryDequeue(out msg))  				{  					try  					{  						msg.Execute();  					}  					catch (Exception e)  					{  						LogUtil.ErrorException(e' "Exception raised when processing Message.");  					}  				}    				// check to see if it's time to run a map update yet again  				//if (m_lastMapUpdate + DefaultUpdateDelay <= now)    				m_isUpdating = true;    				// Updatables  				// progress pending updates  				foreach (var updatable in m_updatables)  				{  					try  					{  						updatable.Update(updateDelta);  					}  					catch (Exception e)  					{  						LogUtil.ErrorException(e' "Exception raised when updating Updatable: " + updatable);  						UnregisterUpdatableLater(updatable);  					}  				}    				// update all Objects in the Map  				// copy objects' so object-internal message processing won't interfere with updating  				foreach (var obj in m_objects.Values)  				{  					if (obj.IsTeleporting)  					{  						// dont update while teleporting  						continue;  					}    					UpdatePriority priority;  					if (!obj.IsAreaActive)  					{  						if (!m_updateInactiveAreas)  						{  							continue;  						}  						priority = UpdatePriority.Inactive;  					}  					else  					{  						//priority = obj.UpdatePriority;  						priority = UpdatePriority.HighPriority;  					}    					try  					{  						// Update Object  						var minObjUpdateDelta = UpdatePriorityMillis[(int)priority];  						var objUpdateDelta = (updateStart - obj.LastUpdateTime).ToMilliSecondsInt();    						if (objUpdateDelta >= minObjUpdateDelta)  						{  							obj.LastUpdateTime = updateStart;  							obj.Update(objUpdateDelta);  						}  					}  					catch (Exception e)  					{  						LogUtil.ErrorException(e' "Exception raised when updating Object: " + obj);    						// Fail-safe:  						if (obj is Unit)  						{  							var unit = (Unit)obj;  							if (unit.Brain != null)  							{  								unit.Brain.IsRunning = false;  							}  						}  						if (obj is Character)  						{  							((Character)obj).Client.Disconnect();  						}  						else  						{  							obj.Delete();  						}  					}  				}    				if (m_tickCount % CharacterUpdateEnvironmentTicks == 0)  				{  					UpdateCharacters();  				}    				UpdateMap(); // map specific stuff    				// we updated the map' so set our last update time to now  				m_lastUpdateTime = updateStart;  				m_tickCount++;  				m_isUpdating = false;    				// get the time' now that we've finished our update callback  				var updateEnd = DateTime.Now;  				var newUpdateDelta = updateEnd - updateStart;    				// weigh old update-time 9 times and new update-time once  				_avgUpdateTime = ((_avgUpdateTime * 9) + (float)(newUpdateDelta).TotalMilliseconds) / 10;    				// make sure to unset the ID *before* enqueuing the task in the ThreadPool again  				Interlocked.Exchange(ref m_currentThreadId' 0);  				if (m_running)  				{  					var callbackTimeout = m_updateDelay - newUpdateDelta.ToMilliSecondsInt();  					if (callbackTimeout < 0)  					{  						// even if we are in a hurry: For the sake of load-balance we have to give control back to the ThreadPool  						callbackTimeout = 0;  					}    					Task.Factory.StartNewDelayed(callbackTimeout' MapUpdateCallback' this);  				}  				else  				{  					if (IsDisposed)  					{  						// the Map was marked as disposed and can now be trashed  						Dispose();  					}  				}  			}
Magic Number,WCell.RealmServer.Global,Map,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\Map.cs,OnNPCDied,The following statement contains a magic number: if (npc.YieldsXpOrHonor)  			{  				var playerLooter = npc.FirstAttacker != null ? npc.FirstAttacker.PlayerOwner : null;  				if (playerLooter != null)  				{  					if (XpCalculator != null)  					{  						// distribute XP  						// TODO: Consider reductions if someone else killed the mob  						var chr = playerLooter;  						var baseXp = XpCalculator(playerLooter.Level' npc);  						if (npc.Entry.Rank >= CreatureRank.Elite)  						{  							// elites give double xp  							baseXp *= 2;  						}    						XpGenerator.CombatXpDistributer(chr' npc' baseXp);    						if (chr.Group != null)  						{  							chr.Group.OnKill(chr' npc);  						}  						else  						{  							chr.QuestLog.OnNPCInteraction(npc);  							chr.Achievements.CheckPossibleAchievementUpdates(AchievementCriteriaType.KillCreature' npc.EntryId' 1);  						}  					}  				}  			}
Magic Number,WCell.RealmServer.Global,DBCTaxiNodeConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\PathNode.cs,ConvertTo,The following statement contains a magic number: currentIndex += 3;
Magic Number,WCell.RealmServer.Global,WorldStateCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldStateCollection.cs,WorldStateCollection,The following statement contains a magic number: CompiledState = new byte[8 * States.Length];
Magic Number,WCell.RealmServer.Global,WorldStateCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldStateCollection.cs,WorldStateCollection,The following statement contains a magic number: for (var i = 0; i < States.Length; i++)  			{  				var state = States[i];  				Array.Copy(BitConverter.GetBytes((uint)state.Key)' 0' CompiledState' i * 8' 4);  				Array.Copy(BitConverter.GetBytes(state.DefaultValue)' 0' CompiledState' 4 + i * 8' 4);  			}
Magic Number,WCell.RealmServer.Global,WorldStateCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldStateCollection.cs,WorldStateCollection,The following statement contains a magic number: for (var i = 0; i < States.Length; i++)  			{  				var state = States[i];  				Array.Copy(BitConverter.GetBytes((uint)state.Key)' 0' CompiledState' i * 8' 4);  				Array.Copy(BitConverter.GetBytes(state.DefaultValue)' 0' CompiledState' 4 + i * 8' 4);  			}
Magic Number,WCell.RealmServer.Global,WorldStateCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldStateCollection.cs,WorldStateCollection,The following statement contains a magic number: for (var i = 0; i < States.Length; i++)  			{  				var state = States[i];  				Array.Copy(BitConverter.GetBytes((uint)state.Key)' 0' CompiledState' i * 8' 4);  				Array.Copy(BitConverter.GetBytes(state.DefaultValue)' 0' CompiledState' 4 + i * 8' 4);  			}
Magic Number,WCell.RealmServer.Global,WorldStateCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldStateCollection.cs,WorldStateCollection,The following statement contains a magic number: for (var i = 0; i < States.Length; i++)  			{  				var state = States[i];  				Array.Copy(BitConverter.GetBytes((uint)state.Key)' 0' CompiledState' i * 8' 4);  				Array.Copy(BitConverter.GetBytes(state.DefaultValue)' 0' CompiledState' 4 + i * 8' 4);  			}
Magic Number,WCell.RealmServer.Global,WorldStateCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldStateCollection.cs,WorldStateCollection,The following statement contains a magic number: for (var i = 0; i < States.Length; i++)  			{  				var state = States[i];  				Array.Copy(BitConverter.GetBytes((uint)state.Key)' 0' CompiledState' i * 8' 4);  				Array.Copy(BitConverter.GetBytes(state.DefaultValue)' 0' CompiledState' 4 + i * 8' 4);  			}
Magic Number,WCell.RealmServer.Global,WorldStateCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldStateCollection.cs,SetInt32,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(value)' 0' CompiledState' 4 + state.Index * 8' 4);
Magic Number,WCell.RealmServer.Global,WorldStateCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldStateCollection.cs,SetInt32,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(value)' 0' CompiledState' 4 + state.Index * 8' 4);
Magic Number,WCell.RealmServer.Global,WorldStateCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldStateCollection.cs,SetInt32,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(value)' 0' CompiledState' 4 + state.Index * 8' 4);
Magic Number,WCell.RealmServer.Global,WorldStateCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldStateCollection.cs,SetUInt32,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(value)' 0' CompiledState' 4 + state.Index * 8' 4);
Magic Number,WCell.RealmServer.Global,WorldStateCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldStateCollection.cs,SetUInt32,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(value)' 0' CompiledState' 4 + state.Index * 8' 4);
Magic Number,WCell.RealmServer.Global,WorldStateCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldStateCollection.cs,SetUInt32,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(value)' 0' CompiledState' 4 + state.Index * 8' 4);
Magic Number,WCell.RealmServer.Global,WorldStateCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldStateCollection.cs,GetUInt32,The following statement contains a magic number: return CompiledState.GetUInt32(1 + index * 2);
Magic Number,WCell.RealmServer.Global,WorldStateCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldStateCollection.cs,GetInt32,The following statement contains a magic number: return CompiledState.GetInt32(1 + index * 2);
Magic Number,WCell.RealmServer.Global,WorldStateCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldStateCollection.cs,UpdateWorldState,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(value)' 0' CompiledState' 4 + index * 8' 4);
Magic Number,WCell.RealmServer.Global,WorldStateCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldStateCollection.cs,UpdateWorldState,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(value)' 0' CompiledState' 4 + index * 8' 4);
Magic Number,WCell.RealmServer.Global,WorldStateCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldStateCollection.cs,UpdateWorldState,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(value)' 0' CompiledState' 4 + index * 8' 4);
Magic Number,WCell.RealmServer.Global,MapDifficultyConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\World.DBC.cs,Convert,The following statement contains a magic number: entry.Index = GetUInt32(rawData' 2);
Magic Number,WCell.RealmServer.Global,MapDifficultyConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\World.DBC.cs,Convert,The following statement contains a magic number: entry.RequirementString = GetString(rawData' 3);
Magic Number,WCell.RealmServer.Global,MapDifficultyConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\World.DBC.cs,Convert,The following statement contains a magic number: entry.ResetTime = GetInt32(rawData' 20);
Magic Number,WCell.RealmServer.Global,MapDifficultyConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\World.DBC.cs,Convert,The following statement contains a magic number: entry.MaxPlayerCount = GetInt32(rawData' 21);
Magic Number,WCell.RealmServer.Global,MapConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\World.DBC.cs,Convert,The following statement contains a magic number: int i = 2;
Magic Number,WCell.RealmServer.Global,MapConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\World.DBC.cs,Convert,The following statement contains a magic number: i += 16;
Magic Number,WCell.RealmServer.Global,MapConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\World.DBC.cs,Convert,The following statement contains a magic number: map.ParentMapId = (MapId)GetUInt32(rawData' 59);
Magic Number,WCell.RealmServer.Global,MapConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\World.DBC.cs,Convert,The following statement contains a magic number: map.RepopPosition = new Vector3(GetFloat(rawData' 60)' GetFloat(rawData' 61)' 500);
Magic Number,WCell.RealmServer.Global,MapConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\World.DBC.cs,Convert,The following statement contains a magic number: map.RepopPosition = new Vector3(GetFloat(rawData' 60)' GetFloat(rawData' 61)' 500);
Magic Number,WCell.RealmServer.Global,MapConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\World.DBC.cs,Convert,The following statement contains a magic number: map.RepopPosition = new Vector3(GetFloat(rawData' 60)' GetFloat(rawData' 61)' 500);
Magic Number,WCell.RealmServer.Global,MapConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\World.DBC.cs,Convert,The following statement contains a magic number: map.RequiredClientId = (ClientId)GetUInt32(rawData' 63);
Magic Number,WCell.RealmServer.Global,MapConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\World.DBC.cs,Convert,The following statement contains a magic number: map.DefaultResetTime = GetInt32(rawData' 64);
Magic Number,WCell.RealmServer.Global,MapConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\World.DBC.cs,Convert,The following statement contains a magic number: map.MaxPlayerCount = GetInt32(rawData' 65);
Magic Number,WCell.RealmServer.Global,WorldMapOverlayConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\World.DBC.cs,Convert,The following statement contains a magic number: for (var i = 0; i < worldMapOverlayEntry.ZoneTemplateId.Length; i++)              {                  var zoneId = (ZoneId) GetUInt32(rawData' 2 + i);                  if(zoneId == 0)                      // We reached to the last ZoneId reference.                      break;                    worldMapOverlayEntry.ZoneTemplateId[i] = zoneId;                  var zoneTemplate = World.s_ZoneTemplates[(int) zoneId];                  if(zoneTemplate == null)                  {                      LogManager.GetCurrentClassLogger().Warn(string.Format(                          "Invalid ZoneId #{0} found at WorldMapOverlay #{1} during the DBC loading."' zoneId' worldMapOverlayEntry.WorldMapOverlayId));                      continue;                  }                  zoneTemplate.WorldMapOverlays.Add(worldMapOverlayEntry.WorldMapOverlayId);              }
Magic Number,WCell.RealmServer.Global,AreaTableConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\ZoneTemplate.cs,ConvertTo,The following statement contains a magic number: var area = new ZoneTemplate {  				Id = (ZoneId)GetUInt32(rawData' 0)'  				m_MapId = (MapId)GetUInt32(rawData' 1)'  				m_parentZoneId = (ZoneId)GetUInt32(rawData' 2)'  				ExplorationBit = GetInt32(rawData' 3)'  				Flags = (ZoneFlags)GetUInt32(rawData' 4)'  				AreaLevel = GetInt32(rawData' 10)'  				Name = GetString(rawData' 11)'  				Ownership = (FactionGroupMask)GetUInt32(rawData' 28)  			};
Magic Number,WCell.RealmServer.Global,AreaTableConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\ZoneTemplate.cs,ConvertTo,The following statement contains a magic number: var area = new ZoneTemplate {  				Id = (ZoneId)GetUInt32(rawData' 0)'  				m_MapId = (MapId)GetUInt32(rawData' 1)'  				m_parentZoneId = (ZoneId)GetUInt32(rawData' 2)'  				ExplorationBit = GetInt32(rawData' 3)'  				Flags = (ZoneFlags)GetUInt32(rawData' 4)'  				AreaLevel = GetInt32(rawData' 10)'  				Name = GetString(rawData' 11)'  				Ownership = (FactionGroupMask)GetUInt32(rawData' 28)  			};
Magic Number,WCell.RealmServer.Global,AreaTableConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\ZoneTemplate.cs,ConvertTo,The following statement contains a magic number: var area = new ZoneTemplate {  				Id = (ZoneId)GetUInt32(rawData' 0)'  				m_MapId = (MapId)GetUInt32(rawData' 1)'  				m_parentZoneId = (ZoneId)GetUInt32(rawData' 2)'  				ExplorationBit = GetInt32(rawData' 3)'  				Flags = (ZoneFlags)GetUInt32(rawData' 4)'  				AreaLevel = GetInt32(rawData' 10)'  				Name = GetString(rawData' 11)'  				Ownership = (FactionGroupMask)GetUInt32(rawData' 28)  			};
Magic Number,WCell.RealmServer.Global,AreaTableConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\ZoneTemplate.cs,ConvertTo,The following statement contains a magic number: var area = new ZoneTemplate {  				Id = (ZoneId)GetUInt32(rawData' 0)'  				m_MapId = (MapId)GetUInt32(rawData' 1)'  				m_parentZoneId = (ZoneId)GetUInt32(rawData' 2)'  				ExplorationBit = GetInt32(rawData' 3)'  				Flags = (ZoneFlags)GetUInt32(rawData' 4)'  				AreaLevel = GetInt32(rawData' 10)'  				Name = GetString(rawData' 11)'  				Ownership = (FactionGroupMask)GetUInt32(rawData' 28)  			};
Magic Number,WCell.RealmServer.Global,AreaTableConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\ZoneTemplate.cs,ConvertTo,The following statement contains a magic number: var area = new ZoneTemplate {  				Id = (ZoneId)GetUInt32(rawData' 0)'  				m_MapId = (MapId)GetUInt32(rawData' 1)'  				m_parentZoneId = (ZoneId)GetUInt32(rawData' 2)'  				ExplorationBit = GetInt32(rawData' 3)'  				Flags = (ZoneFlags)GetUInt32(rawData' 4)'  				AreaLevel = GetInt32(rawData' 10)'  				Name = GetString(rawData' 11)'  				Ownership = (FactionGroupMask)GetUInt32(rawData' 28)  			};
Magic Number,WCell.RealmServer.Global,AreaTableConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\ZoneTemplate.cs,ConvertTo,The following statement contains a magic number: var area = new ZoneTemplate {  				Id = (ZoneId)GetUInt32(rawData' 0)'  				m_MapId = (MapId)GetUInt32(rawData' 1)'  				m_parentZoneId = (ZoneId)GetUInt32(rawData' 2)'  				ExplorationBit = GetInt32(rawData' 3)'  				Flags = (ZoneFlags)GetUInt32(rawData' 4)'  				AreaLevel = GetInt32(rawData' 10)'  				Name = GetString(rawData' 11)'  				Ownership = (FactionGroupMask)GetUInt32(rawData' 28)  			};
Magic Number,WCell.RealmServer.Global,WorldLocationMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Global\WorldLocationMgr.cs,GetMatches,The following statement contains a magic number: var list = new List<INamedWorldZoneLocation>(3);
Magic Number,WCell.RealmServer.Items,ScalingStatValues,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ScalingStats.cs,GetSsdMultiplier,The following statement contains a magic number: if ((mask & 0x4001F) != 0)              {                  if ((mask & 0x00000001) != 0) return SsdMultiplier[0];                  if ((mask & 0x00000002) != 0) return SsdMultiplier[1];                  if ((mask & 0x00000004) != 0) return SsdMultiplier[2];                  if ((mask & 0x00000008) != 0) return SsdMultiplier[4];                  if ((mask & 0x00000010) != 0) return SsdMultiplier[3];                  if ((mask & 0x00040000) != 0) return SsdMultiplier[5];              }
Magic Number,WCell.RealmServer.Items,ScalingStatValues,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ScalingStats.cs,GetSsdMultiplier,The following statement contains a magic number: if ((mask & 0x4001F) != 0)              {                  if ((mask & 0x00000001) != 0) return SsdMultiplier[0];                  if ((mask & 0x00000002) != 0) return SsdMultiplier[1];                  if ((mask & 0x00000004) != 0) return SsdMultiplier[2];                  if ((mask & 0x00000008) != 0) return SsdMultiplier[4];                  if ((mask & 0x00000010) != 0) return SsdMultiplier[3];                  if ((mask & 0x00040000) != 0) return SsdMultiplier[5];              }
Magic Number,WCell.RealmServer.Items,ScalingStatValues,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ScalingStats.cs,GetSsdMultiplier,The following statement contains a magic number: if ((mask & 0x4001F) != 0)              {                  if ((mask & 0x00000001) != 0) return SsdMultiplier[0];                  if ((mask & 0x00000002) != 0) return SsdMultiplier[1];                  if ((mask & 0x00000004) != 0) return SsdMultiplier[2];                  if ((mask & 0x00000008) != 0) return SsdMultiplier[4];                  if ((mask & 0x00000010) != 0) return SsdMultiplier[3];                  if ((mask & 0x00040000) != 0) return SsdMultiplier[5];              }
Magic Number,WCell.RealmServer.Items,ScalingStatValues,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ScalingStats.cs,GetSsdMultiplier,The following statement contains a magic number: if ((mask & 0x4001F) != 0)              {                  if ((mask & 0x00000001) != 0) return SsdMultiplier[0];                  if ((mask & 0x00000002) != 0) return SsdMultiplier[1];                  if ((mask & 0x00000004) != 0) return SsdMultiplier[2];                  if ((mask & 0x00000008) != 0) return SsdMultiplier[4];                  if ((mask & 0x00000010) != 0) return SsdMultiplier[3];                  if ((mask & 0x00040000) != 0) return SsdMultiplier[5];              }
Magic Number,WCell.RealmServer.Items,ScalingStatValues,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ScalingStats.cs,GetArmorMod,The following statement contains a magic number: if ((mask & 0x00F001E0) != 0)              {                  if ((mask & 0x00000020) != 0) return ArmorMod[0];                  if ((mask & 0x00000040) != 0) return ArmorMod[1];                  if ((mask & 0x00000080) != 0) return ArmorMod[2];                  if ((mask & 0x00000100) != 0) return ArmorMod[3];                    if ((mask & 0x00100000) != 0) return ArmorMod[4]; // cloth                  if ((mask & 0x00200000) != 0) return ArmorMod[5]; // leather                  if ((mask & 0x00400000) != 0) return ArmorMod[6]; // mail                  if ((mask & 0x00800000) != 0) return ArmorMod[7]; // plate              }
Magic Number,WCell.RealmServer.Items,ScalingStatValues,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ScalingStats.cs,GetArmorMod,The following statement contains a magic number: if ((mask & 0x00F001E0) != 0)              {                  if ((mask & 0x00000020) != 0) return ArmorMod[0];                  if ((mask & 0x00000040) != 0) return ArmorMod[1];                  if ((mask & 0x00000080) != 0) return ArmorMod[2];                  if ((mask & 0x00000100) != 0) return ArmorMod[3];                    if ((mask & 0x00100000) != 0) return ArmorMod[4]; // cloth                  if ((mask & 0x00200000) != 0) return ArmorMod[5]; // leather                  if ((mask & 0x00400000) != 0) return ArmorMod[6]; // mail                  if ((mask & 0x00800000) != 0) return ArmorMod[7]; // plate              }
Magic Number,WCell.RealmServer.Items,ScalingStatValues,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ScalingStats.cs,GetArmorMod,The following statement contains a magic number: if ((mask & 0x00F001E0) != 0)              {                  if ((mask & 0x00000020) != 0) return ArmorMod[0];                  if ((mask & 0x00000040) != 0) return ArmorMod[1];                  if ((mask & 0x00000080) != 0) return ArmorMod[2];                  if ((mask & 0x00000100) != 0) return ArmorMod[3];                    if ((mask & 0x00100000) != 0) return ArmorMod[4]; // cloth                  if ((mask & 0x00200000) != 0) return ArmorMod[5]; // leather                  if ((mask & 0x00400000) != 0) return ArmorMod[6]; // mail                  if ((mask & 0x00800000) != 0) return ArmorMod[7]; // plate              }
Magic Number,WCell.RealmServer.Items,ScalingStatValues,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ScalingStats.cs,GetArmorMod,The following statement contains a magic number: if ((mask & 0x00F001E0) != 0)              {                  if ((mask & 0x00000020) != 0) return ArmorMod[0];                  if ((mask & 0x00000040) != 0) return ArmorMod[1];                  if ((mask & 0x00000080) != 0) return ArmorMod[2];                  if ((mask & 0x00000100) != 0) return ArmorMod[3];                    if ((mask & 0x00100000) != 0) return ArmorMod[4]; // cloth                  if ((mask & 0x00200000) != 0) return ArmorMod[5]; // leather                  if ((mask & 0x00400000) != 0) return ArmorMod[6]; // mail                  if ((mask & 0x00800000) != 0) return ArmorMod[7]; // plate              }
Magic Number,WCell.RealmServer.Items,ScalingStatValues,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ScalingStats.cs,GetArmorMod,The following statement contains a magic number: if ((mask & 0x00F001E0) != 0)              {                  if ((mask & 0x00000020) != 0) return ArmorMod[0];                  if ((mask & 0x00000040) != 0) return ArmorMod[1];                  if ((mask & 0x00000080) != 0) return ArmorMod[2];                  if ((mask & 0x00000100) != 0) return ArmorMod[3];                    if ((mask & 0x00100000) != 0) return ArmorMod[4]; // cloth                  if ((mask & 0x00200000) != 0) return ArmorMod[5]; // leather                  if ((mask & 0x00400000) != 0) return ArmorMod[6]; // mail                  if ((mask & 0x00800000) != 0) return ArmorMod[7]; // plate              }
Magic Number,WCell.RealmServer.Items,ScalingStatValues,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ScalingStats.cs,GetArmorMod,The following statement contains a magic number: if ((mask & 0x00F001E0) != 0)              {                  if ((mask & 0x00000020) != 0) return ArmorMod[0];                  if ((mask & 0x00000040) != 0) return ArmorMod[1];                  if ((mask & 0x00000080) != 0) return ArmorMod[2];                  if ((mask & 0x00000100) != 0) return ArmorMod[3];                    if ((mask & 0x00100000) != 0) return ArmorMod[4]; // cloth                  if ((mask & 0x00200000) != 0) return ArmorMod[5]; // leather                  if ((mask & 0x00400000) != 0) return ArmorMod[6]; // mail                  if ((mask & 0x00800000) != 0) return ArmorMod[7]; // plate              }
Magic Number,WCell.RealmServer.Items,ScalingStatValues,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ScalingStats.cs,GetDpsMod,The following statement contains a magic number: if ((mask & 0x7E00) != 0)              {                  if ((mask & 0x00000200) != 0) return DpsMod[0];                  if ((mask & 0x00000400) != 0) return DpsMod[1];                  if ((mask & 0x00000800) != 0) return DpsMod[2];                  if ((mask & 0x00001000) != 0) return DpsMod[3];                  if ((mask & 0x00002000) != 0) return DpsMod[4];                  if ((mask & 0x00004000) != 0) return DpsMod[5]; // not used?              }
Magic Number,WCell.RealmServer.Items,ScalingStatValues,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ScalingStats.cs,GetDpsMod,The following statement contains a magic number: if ((mask & 0x7E00) != 0)              {                  if ((mask & 0x00000200) != 0) return DpsMod[0];                  if ((mask & 0x00000400) != 0) return DpsMod[1];                  if ((mask & 0x00000800) != 0) return DpsMod[2];                  if ((mask & 0x00001000) != 0) return DpsMod[3];                  if ((mask & 0x00002000) != 0) return DpsMod[4];                  if ((mask & 0x00004000) != 0) return DpsMod[5]; // not used?              }
Magic Number,WCell.RealmServer.Items,ScalingStatValues,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ScalingStats.cs,GetDpsMod,The following statement contains a magic number: if ((mask & 0x7E00) != 0)              {                  if ((mask & 0x00000200) != 0) return DpsMod[0];                  if ((mask & 0x00000400) != 0) return DpsMod[1];                  if ((mask & 0x00000800) != 0) return DpsMod[2];                  if ((mask & 0x00001000) != 0) return DpsMod[3];                  if ((mask & 0x00002000) != 0) return DpsMod[4];                  if ((mask & 0x00004000) != 0) return DpsMod[5]; // not used?              }
Magic Number,WCell.RealmServer.Items,ScalingStatValues,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ScalingStats.cs,GetDpsMod,The following statement contains a magic number: if ((mask & 0x7E00) != 0)              {                  if ((mask & 0x00000200) != 0) return DpsMod[0];                  if ((mask & 0x00000400) != 0) return DpsMod[1];                  if ((mask & 0x00000800) != 0) return DpsMod[2];                  if ((mask & 0x00001000) != 0) return DpsMod[3];                  if ((mask & 0x00002000) != 0) return DpsMod[4];                  if ((mask & 0x00004000) != 0) return DpsMod[5]; // not used?              }
Magic Number,WCell.RealmServer.Items,PetitionRecord,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\PetitionCharter.cs,PetitionRecord,The following statement contains a magic number: SignedIds = new List<uint>(9);
Magic Number,WCell.RealmServer.Items,ItemTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\ItemEvents.cs,InitializeTemplate,The following statement contains a magic number: if (Spells != null)  			{  				ArrayUtil.Prune(ref Spells);  				for (int i = 0; i < 5; i++)  				{  					Spells[i].Index = (uint)i;  					Spells[i].FinalizeAfterLoad();  				}  			}  			else  			{  				Spells = ItemSpell.EmptyArray;  			}
Magic Number,WCell.RealmServer.Items,ItemTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\ItemEvents.cs,Dump,The following statement contains a magic number: var mods = new List<string>(11);
Magic Number,WCell.RealmServer.Items,ItemTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\ItemEvents.cs,Dump,The following statement contains a magic number: var damages = new List<string>(5);
Magic Number,WCell.RealmServer.Items,ItemTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\ItemEvents.cs,Dump,The following statement contains a magic number: var resistances = new List<string>(5);
Magic Number,WCell.RealmServer.Items,ItemTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\ItemEvents.cs,Dump,The following statement contains a magic number: var sockets = new List<string>(3);
Magic Number,WCell.RealmServer.Items,DBCItemExtendedCostConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ItemExtendedCostEntry.cs,ConvertTo,The following statement contains a magic number: var list = new List<ItemExtendedCostEntry.RequiredItem>(5) {                  new ItemExtendedCostEntry.RequiredItem() {Id = reqItem1' Cost = reqItemAmt1}'                  new ItemExtendedCostEntry.RequiredItem() {Id = reqItem2' Cost = reqItemAmt2}'                  new ItemExtendedCostEntry.RequiredItem() {Id = reqItem3' Cost = reqItemAmt3}'                  new ItemExtendedCostEntry.RequiredItem() {Id = reqItem4' Cost = reqItemAmt4}'                  new ItemExtendedCostEntry.RequiredItem() {Id = reqItem5' Cost = reqItemAmt5}              };
Magic Number,WCell.RealmServer.Items,ItemRandomEnchantEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ItemRandomPropertyEntry.cs,FinalizeDataHolder,The following statement contains a magic number: if (PropertiesId > 30000)  			{  				ContentMgr.OnInvalidDBData("RandomEnchantEntry has invalid PropertiesId: {0} (Enchant: {2})"' PropertiesId' EnchantId);  			}  			else  			{  				var list = EnchantMgr.RandomEnchantEntries.Get(PropertiesId);  				if (list == null)  				{  					ArrayUtil.Set(ref EnchantMgr.RandomEnchantEntries' PropertiesId' list = new List<ItemRandomEnchantEntry>());  				}  				list.Add(this);  			}
Magic Number,WCell.RealmServer.Items,ItemSetDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ItemSet.cs,ConvertTo,The following statement contains a magic number: set.Templates = new ItemTemplate[10];
Magic Number,WCell.RealmServer.Items,ItemSetDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ItemSet.cs,ConvertTo,The following statement contains a magic number: for (uint i = BoniOrderOffset; i < BoniOrderOffset + MaxBonusCount; i++)  				{  					var amount = rawData.GetUInt32(i);  					if (amount > 0)  					{  						var orderedIndex = amount - 1;  						if (highestIndex < orderedIndex)  						{  							highestIndex = orderedIndex;  						}    						var spells = orderedBoni[orderedIndex];  						if (spells == null)  						{  							orderedBoni[orderedIndex] = spells = new List<Spell>(3);  						}    						var bonusSlot = i - BoniOrderOffset;  						var spell = boni[bonusSlot];  						if (spell != null)  						{  							spells.Add(spell);  						}  					}  				}
Magic Number,WCell.RealmServer.Items,ItemSetDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ItemSet.cs,ConvertTo,The following statement contains a magic number: var skillId = (SkillId)rawData.GetUInt32(51);
Magic Number,WCell.RealmServer.Items,ItemSetDBCConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ItemSet.cs,ConvertTo,The following statement contains a magic number: if (skillId > 0)  				{  					SkillLine skill = SkillHandler.Get(skillId);  					if (skill != null)  					{  						set.RequiredSkill = skill;  						set.RequiredSkillValue = rawData.GetUInt32(52);  					}  				}
Magic Number,WCell.RealmServer.Items,ItemSpell,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ItemSpell.cs,ToString,The following statement contains a magic number: var list = new List<string>(5);
Magic Number,WCell.RealmServer.Items,GemPropertiesConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\GemInfo.cs,ConvertTo,The following statement contains a magic number: props.Color = (SocketColor)GetUInt32(rawData' 4);
Magic Number,WCell.RealmServer.Items,ItemMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\ItemMgr.cs,LoadSets,The following statement contains a magic number: foreach (var set in reader.Entries.Values)  			{  				if (set.Id >= Sets.Length)  				{  					Array.Resize(ref Sets' (int)set.Id + 10);  				}  				Sets[(int)set.Id] = set;  			}
Magic Number,WCell.RealmServer.Items,BuyBackInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\PartialInventories.cs,SetBuyBackTimeStampField,The following statement contains a magic number: var baseTime = (uint)((DateTime.Now - m_inventory.Owner.LastLogin).Seconds + (30 * 3600));
Magic Number,WCell.RealmServer.Items,BuyBackInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\PartialInventories.cs,SetBuyBackTimeStampField,The following statement contains a magic number: var baseTime = (uint)((DateTime.Now - m_inventory.Owner.LastLogin).Seconds + (30 * 3600));
Magic Number,WCell.RealmServer.Items,ItemRandomSuffixConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\Item.DBC.cs,ConvertTo,The following statement contains a magic number: currentIndex += 18;
Magic Number,WCell.RealmServer.Items,ItemEnchantmentConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\Item.DBC.cs,ConvertTo,The following statement contains a magic number: enchant.Description = GetString(rawData' 14);
Magic Number,WCell.RealmServer.Items,ItemEnchantmentConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\Item.DBC.cs,ConvertTo,The following statement contains a magic number: enchant.Effects = new ItemEnchantmentEffect[3];
Magic Number,WCell.RealmServer.Items,ItemEnchantmentConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\Item.DBC.cs,ConvertTo,The following statement contains a magic number: for (var i = 0; i < 3; i++)  			{  				var type = (ItemEnchantmentType)GetUInt32(rawData' 2 + i);  				if (type != ItemEnchantmentType.None)  				{  					var effect = new ItemEnchantmentEffect();  					enchant.Effects[i] = effect;  					effect.Type = type;  					effect.MinAmount = GetInt32(rawData' 5 + i);  					effect.MaxAmount = GetInt32(rawData' 8 + i);  					effect.Misc = GetUInt32(rawData' 11 + i);  				}  			}
Magic Number,WCell.RealmServer.Items,ItemEnchantmentConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\Item.DBC.cs,ConvertTo,The following statement contains a magic number: for (var i = 0; i < 3; i++)  			{  				var type = (ItemEnchantmentType)GetUInt32(rawData' 2 + i);  				if (type != ItemEnchantmentType.None)  				{  					var effect = new ItemEnchantmentEffect();  					enchant.Effects[i] = effect;  					effect.Type = type;  					effect.MinAmount = GetInt32(rawData' 5 + i);  					effect.MaxAmount = GetInt32(rawData' 8 + i);  					effect.Misc = GetUInt32(rawData' 11 + i);  				}  			}
Magic Number,WCell.RealmServer.Items,ItemEnchantmentConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\Item.DBC.cs,ConvertTo,The following statement contains a magic number: for (var i = 0; i < 3; i++)  			{  				var type = (ItemEnchantmentType)GetUInt32(rawData' 2 + i);  				if (type != ItemEnchantmentType.None)  				{  					var effect = new ItemEnchantmentEffect();  					enchant.Effects[i] = effect;  					effect.Type = type;  					effect.MinAmount = GetInt32(rawData' 5 + i);  					effect.MaxAmount = GetInt32(rawData' 8 + i);  					effect.Misc = GetUInt32(rawData' 11 + i);  				}  			}
Magic Number,WCell.RealmServer.Items,ItemEnchantmentConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\Item.DBC.cs,ConvertTo,The following statement contains a magic number: for (var i = 0; i < 3; i++)  			{  				var type = (ItemEnchantmentType)GetUInt32(rawData' 2 + i);  				if (type != ItemEnchantmentType.None)  				{  					var effect = new ItemEnchantmentEffect();  					enchant.Effects[i] = effect;  					effect.Type = type;  					effect.MinAmount = GetInt32(rawData' 5 + i);  					effect.MaxAmount = GetInt32(rawData' 8 + i);  					effect.Misc = GetUInt32(rawData' 11 + i);  				}  			}
Magic Number,WCell.RealmServer.Items,ItemEnchantmentConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\Item.DBC.cs,ConvertTo,The following statement contains a magic number: for (var i = 0; i < 3; i++)  			{  				var type = (ItemEnchantmentType)GetUInt32(rawData' 2 + i);  				if (type != ItemEnchantmentType.None)  				{  					var effect = new ItemEnchantmentEffect();  					enchant.Effects[i] = effect;  					effect.Type = type;  					effect.MinAmount = GetInt32(rawData' 5 + i);  					effect.MaxAmount = GetInt32(rawData' 8 + i);  					effect.Misc = GetUInt32(rawData' 11 + i);  				}  			}
Magic Number,WCell.RealmServer.Items,ItemEnchantmentConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\Item.DBC.cs,ConvertTo,The following statement contains a magic number: var currentIndex = 31;
Magic Number,WCell.RealmServer.Items,ScalingStatDistributionConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\Item.DBC.cs,ConvertTo,The following statement contains a magic number: for(var i = 0; i < 10; i++)              {                  ssd.StatMod[i] = GetInt32(rawData' currentIndex++);              }
Magic Number,WCell.RealmServer.Items,ScalingStatDistributionConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\Item.DBC.cs,ConvertTo,The following statement contains a magic number: for(var i = 0; i < 10; i++)              {                  ssd.Modifier[i] = GetUInt32(rawData' currentIndex++);              }
Magic Number,WCell.RealmServer.Items,ScalingStatValuesConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\Item.DBC.cs,ConvertTo,The following statement contains a magic number: for(; ssdMultiplier < 4; ssdMultiplier++)              {                  ssv.SsdMultiplier[ssdMultiplier] = GetUInt32(rawData' currentIndex++);              }
Magic Number,WCell.RealmServer.Items,ScalingStatValuesConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\Item.DBC.cs,ConvertTo,The following statement contains a magic number: for(; armorMod < 5; armorMod++)              {                  ssv.ArmorMod[armorMod] = GetUInt32(rawData' currentIndex++);              }
Magic Number,WCell.RealmServer.Items,ScalingStatValuesConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\Item.DBC.cs,ConvertTo,The following statement contains a magic number: for(var i = 0; i < 6; i++)              {                  ssv.DpsMod[i] = GetUInt32(rawData' currentIndex++);              }
Magic Number,WCell.RealmServer.Items,ScalingStatValuesConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\Item.DBC.cs,ConvertTo,The following statement contains a magic number: for(; ssdMultiplier < 6; ssdMultiplier++)                  ssv.SsdMultiplier[ssdMultiplier] = GetUInt32(rawData' currentIndex++);
Magic Number,WCell.RealmServer.Items,ScalingStatValuesConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\Item.DBC.cs,ConvertTo,The following statement contains a magic number: for(; armorMod < 8; armorMod++)                  ssv.ArmorMod[armorMod] = GetUInt32(rawData' currentIndex++);
Magic Number,WCell.RealmServer.Items,BaseInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\BaseInventory.cs,SetContainerEntityId,The following statement contains a magic number: var field = baseInventory.m_baseField + (slot * 2);
Magic Number,WCell.RealmServer.Items,PlayerInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\PlayerInventory.cs,Consume,The following statement contains a magic number: for (var i = 0; i < items.Length; i++)  			{  				var template = items[i];  				slotIdLists[i] = slotIds = new List<SimpleSlotId>(3);    				foundAmounts[i] = Find(inclBank' template.Amount' slotIds' item => item.Template.ItemId == template.ItemId);    				if (foundAmounts[i] < template.Amount)  				{  					// one of the required items does not have a sufficient amount -> Cancel  					return false;  				}  			}
Magic Number,WCell.RealmServer.Items,PlayerInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\PlayerInventory.cs,UseEquipmentSet,The following statement contains a magic number: for (var i = 0; i < 19; i++)  			{  				var holder = swaps[i];  				if (holder.ItemGuid == EntityId.Zero) continue;  				var destItem = GetItem(holder.ItemGuid);  				var srcItem = GetItem(holder.SrcContainer' holder.SrcSlot' IsBankOpen);  				if (destItem == null) continue;  				if (destItem == srcItem) continue;    				var msg = TrySwap(holder.SrcContainer' holder.SrcSlot' InventorySlot.Invalid' i);  				if (msg != InventoryError.OK)  				{  					ItemHandler.SendInventoryError(Owner.Client' msg);  					return;  				}  				ItemHandler.SendUseEquipmentSetResult(Owner.Client' UseEquipmentSetError.Success);  			}
Magic Number,WCell.RealmServer.Items,PlayerInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\PlayerInventory.cs,AddEquipmentHandler,The following statement contains a magic number: if (m_ItemEquipmentEventHandlers == null)  			{  				m_ItemEquipmentEventHandlers = new List<IItemEquipmentEventHandler>(3);  			}
Magic Number,WCell.RealmServer.Items,PlayerInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\PlayerInventory.cs,ApplyDurabilityLoss,The following statement contains a magic number: IterateEquipment(item =>  			{  				if (item.MaxDurability > 0)  				{  					item.Durability = Math.Max(0' item.Durability - (((item.Durability * durLossPct) + 50) / 100));  				}  				return true;  			});
Magic Number,WCell.RealmServer.Items,PlayerInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\PlayerInventory.cs,ApplyDurabilityLoss,The following statement contains a magic number: IterateEquipment(item =>  			{  				if (item.MaxDurability > 0)  				{  					item.Durability = Math.Max(0' item.Durability - (((item.Durability * durLossPct) + 50) / 100));  				}  				return true;  			});
Magic Number,WCell.RealmServer.Items,PlayerInventory,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\PlayerInventory.cs,AddOwnedItems,The following statement contains a magic number: var containers = new List<BaseInventory>(7) { this };
Magic Number,WCell.RealmServer.Lang,RealmLocalizer,C:\repos\WCell_WCell\Services\WCell.RealmServer\Lang\RealmLocalizer.cs,FormatTimeSecondsMinutes,The following statement contains a magic number: if (seconds < 60)  			{  				time = seconds + " seconds";  			}  			else  			{  				var mins = seconds / 60;  				time = mins + (mins == 1 ? " minute" : " minutes");  				if (seconds % 60 != 0)  				{  					time += " and " + seconds + (seconds == 1 ? " second" : " seconds");  				}  			}
Magic Number,WCell.RealmServer.Lang,RealmLocalizer,C:\repos\WCell_WCell\Services\WCell.RealmServer\Lang\RealmLocalizer.cs,FormatTimeSecondsMinutes,The following statement contains a magic number: if (seconds < 60)  			{  				time = seconds + " seconds";  			}  			else  			{  				var mins = seconds / 60;  				time = mins + (mins == 1 ? " minute" : " minutes");  				if (seconds % 60 != 0)  				{  					time += " and " + seconds + (seconds == 1 ? " second" : " seconds");  				}  			}
Magic Number,WCell.RealmServer.Lang,RealmLocalizer,C:\repos\WCell_WCell\Services\WCell.RealmServer\Lang\RealmLocalizer.cs,FormatTimeSecondsMinutes,The following statement contains a magic number: if (seconds < 60)  			{  				time = seconds + " seconds";  			}  			else  			{  				var mins = seconds / 60;  				time = mins + (mins == 1 ? " minute" : " minutes");  				if (seconds % 60 != 0)  				{  					time += " and " + seconds + (seconds == 1 ? " second" : " seconds");  				}  			}
Magic Number,WCell.RealmServer.Misc,ActionButton,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\ActionBar.cs,Set,The following statement contains a magic number: var index = Index * 4;
Magic Number,WCell.RealmServer.Misc,ActionButton,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\ActionBar.cs,Set,The following statement contains a magic number: actions[index + 1] = (byte)((Action & 0xFF00) >> 8);
Magic Number,WCell.RealmServer.Misc,ActionButton,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\ActionBar.cs,Set,The following statement contains a magic number: actions[index + 2] = Type;
Magic Number,WCell.RealmServer.Misc,ActionButton,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\ActionBar.cs,Set,The following statement contains a magic number: actions[index + 3] = Info;
Magic Number,WCell.RealmServer.Misc,ActionButton,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\ActionBar.cs,Set,The following statement contains a magic number: index = index * 4;
Magic Number,WCell.RealmServer.Misc,ActionButton,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\ActionBar.cs,Set,The following statement contains a magic number: actions[index + 1] = (byte)((action & 0xFF00) >> 8);
Magic Number,WCell.RealmServer.Misc,ActionButton,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\ActionBar.cs,Set,The following statement contains a magic number: actions[index + 2] = type;
Magic Number,WCell.RealmServer.Misc,ActionButton,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\ActionBar.cs,Set,The following statement contains a magic number: actions[index + 3] = info;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,ModDamagePercent,The following statement contains a magic number: m_Damage += (m_Damage * pct + 50) / 100;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,ModDamagePercent,The following statement contains a magic number: m_Damage += (m_Damage * pct + 50) / 100;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,GetDamagePercent,The following statement contains a magic number: return (m_Damage * percent + 50) / 100;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,GetDamagePercent,The following statement contains a magic number: return (m_Damage * percent + 50) / 100;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,DoAttack,The following statement contains a magic number: var random = Utility.Random(1' 10000);
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,StrikeCrushing,The following statement contains a magic number: Damage = (Damage * 10 + 5) / 15;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,StrikeCrushing,The following statement contains a magic number: Damage = (Damage * 10 + 5) / 15;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,StrikeCrushing,The following statement contains a magic number: Damage = (Damage * 10 + 5) / 15;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,DoStrike,The following statement contains a magic number: if (Damage > 0)  			{  				var level = Attacker.Level;  				var res = Victim.GetResistance(UsedSchool) - Attacker.GetTargetResistanceMod(UsedSchool);    				if (res > 0)  				{  					ProcHitFlags |= ProcHitFlags.Resist;    					// This formula only applies for armor  					if (UsedSchool == DamageSchool.Physical)  					{  						if (level < 60)  						{  							ResistPct = (res / (res + 400f + 85f * level)) * 100f;  						}  						else  						{  							ResistPct = (res / (res - 22167.5f + 467.5f * level)) * 100f;  						}    					}  					else  					{  						// Magical damageschool  						ResistPct = Victim.GetResistChancePct(Attacker' UsedSchool);  					}  				}  				else  				{  					ResistPct = 0;  				}    				if (ResistPct > 75)  				{  					ResistPct = 75;  				}  				if (ResistPct < 0)  				{  					ResistPct = 0;  				}    				Victim.DeathPrevention++;  				Attacker.DeathPrevention++;  				try  				{  					// add mods and call events  					AddDamageMods();  					Victim.OnDefend(this);  					Attacker.OnAttack(this);    					Resisted = MathUtil.RoundInt(ResistPct * Damage / 100f);  					if (Absorbed > 0)  					{  						HitFlags |= HitFlags.AbsorbType1 | HitFlags.AbsorbType2;  						ProcHitFlags |= ProcHitFlags.Absorb;  					}  					else  					{  						Absorbed = Resisted = 0;  					}    					if (Weapon == Attacker.OffHandWeapon)  					{  						HitFlags |= HitFlags.OffHand;  					}    					Victim.DoRawDamage(this);  				}  				finally  				{  					Victim.DeathPrevention--;  					Attacker.DeathPrevention--;  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,DoStrike,The following statement contains a magic number: if (Damage > 0)  			{  				var level = Attacker.Level;  				var res = Victim.GetResistance(UsedSchool) - Attacker.GetTargetResistanceMod(UsedSchool);    				if (res > 0)  				{  					ProcHitFlags |= ProcHitFlags.Resist;    					// This formula only applies for armor  					if (UsedSchool == DamageSchool.Physical)  					{  						if (level < 60)  						{  							ResistPct = (res / (res + 400f + 85f * level)) * 100f;  						}  						else  						{  							ResistPct = (res / (res - 22167.5f + 467.5f * level)) * 100f;  						}    					}  					else  					{  						// Magical damageschool  						ResistPct = Victim.GetResistChancePct(Attacker' UsedSchool);  					}  				}  				else  				{  					ResistPct = 0;  				}    				if (ResistPct > 75)  				{  					ResistPct = 75;  				}  				if (ResistPct < 0)  				{  					ResistPct = 0;  				}    				Victim.DeathPrevention++;  				Attacker.DeathPrevention++;  				try  				{  					// add mods and call events  					AddDamageMods();  					Victim.OnDefend(this);  					Attacker.OnAttack(this);    					Resisted = MathUtil.RoundInt(ResistPct * Damage / 100f);  					if (Absorbed > 0)  					{  						HitFlags |= HitFlags.AbsorbType1 | HitFlags.AbsorbType2;  						ProcHitFlags |= ProcHitFlags.Absorb;  					}  					else  					{  						Absorbed = Resisted = 0;  					}    					if (Weapon == Attacker.OffHandWeapon)  					{  						HitFlags |= HitFlags.OffHand;  					}    					Victim.DoRawDamage(this);  				}  				finally  				{  					Victim.DeathPrevention--;  					Attacker.DeathPrevention--;  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,DoStrike,The following statement contains a magic number: if (Damage > 0)  			{  				var level = Attacker.Level;  				var res = Victim.GetResistance(UsedSchool) - Attacker.GetTargetResistanceMod(UsedSchool);    				if (res > 0)  				{  					ProcHitFlags |= ProcHitFlags.Resist;    					// This formula only applies for armor  					if (UsedSchool == DamageSchool.Physical)  					{  						if (level < 60)  						{  							ResistPct = (res / (res + 400f + 85f * level)) * 100f;  						}  						else  						{  							ResistPct = (res / (res - 22167.5f + 467.5f * level)) * 100f;  						}    					}  					else  					{  						// Magical damageschool  						ResistPct = Victim.GetResistChancePct(Attacker' UsedSchool);  					}  				}  				else  				{  					ResistPct = 0;  				}    				if (ResistPct > 75)  				{  					ResistPct = 75;  				}  				if (ResistPct < 0)  				{  					ResistPct = 0;  				}    				Victim.DeathPrevention++;  				Attacker.DeathPrevention++;  				try  				{  					// add mods and call events  					AddDamageMods();  					Victim.OnDefend(this);  					Attacker.OnAttack(this);    					Resisted = MathUtil.RoundInt(ResistPct * Damage / 100f);  					if (Absorbed > 0)  					{  						HitFlags |= HitFlags.AbsorbType1 | HitFlags.AbsorbType2;  						ProcHitFlags |= ProcHitFlags.Absorb;  					}  					else  					{  						Absorbed = Resisted = 0;  					}    					if (Weapon == Attacker.OffHandWeapon)  					{  						HitFlags |= HitFlags.OffHand;  					}    					Victim.DoRawDamage(this);  				}  				finally  				{  					Victim.DeathPrevention--;  					Attacker.DeathPrevention--;  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowDamageFactor,The following statement contains a magic number: var attackerSkill = Victim is Character ? ((Character)Attacker).Skills.GetValue(Weapon.Skill) : (uint)Victim.Level * 5;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowDamageFactor,The following statement contains a magic number: if (attackerSkill > Attacker.Level * 5)  			{  				attackerSkill = (uint)Attacker.Level * 5;  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowDamageFactor,The following statement contains a magic number: if (attackerSkill > Attacker.Level * 5)  			{  				attackerSkill = (uint)Attacker.Level * 5;  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowDamageFactor,The following statement contains a magic number: var defenseSkill = Victim is Character ? ((Character)Victim).Skills.GetValue(SkillId.Defense) : (uint)Victim.Level * 5;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowDamageFactor,The following statement contains a magic number: var lowValue = 1.3 - 0.05 * (diff);
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowDamageFactor,The following statement contains a magic number: var lowValue = 1.3 - 0.05 * (diff);
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowDamageFactor,The following statement contains a magic number: var highValue = 1.2 - 0.03 * (diff);
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowDamageFactor,The following statement contains a magic number: var highValue = 1.2 - 0.03 * (diff);
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowDamageFactor,The following statement contains a magic number: if (SpellEffect != null)  			{  				lowValue -= 0.7;  				lowValue = Math.Min(0.6' lowValue);  				highValue -= 0.3;  			}  			else  			{  				lowValue = Math.Min(0.91' lowValue);  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowDamageFactor,The following statement contains a magic number: if (SpellEffect != null)  			{  				lowValue -= 0.7;  				lowValue = Math.Min(0.6' lowValue);  				highValue -= 0.3;  			}  			else  			{  				lowValue = Math.Min(0.91' lowValue);  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowDamageFactor,The following statement contains a magic number: if (SpellEffect != null)  			{  				lowValue -= 0.7;  				lowValue = Math.Min(0.6' lowValue);  				highValue -= 0.3;  			}  			else  			{  				lowValue = Math.Min(0.91' lowValue);  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowDamageFactor,The following statement contains a magic number: if (SpellEffect != null)  			{  				lowValue -= 0.7;  				lowValue = Math.Min(0.6' lowValue);  				highValue -= 0.3;  			}  			else  			{  				lowValue = Math.Min(0.91' lowValue);  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowDamageFactor,The following statement contains a magic number: if (lowValue < 0.01)  			{  				lowValue = 0.01;  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowDamageFactor,The following statement contains a magic number: if (lowValue < 0.01)  			{  				lowValue = 0.01;  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowDamageFactor,The following statement contains a magic number: if (highValue < 0.2)  			{  				highValue = 0.2;  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowDamageFactor,The following statement contains a magic number: if (highValue < 0.2)  			{  				highValue = 0.2;  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowDamageFactor,The following statement contains a magic number: if (highValue > 0.99)  			{  				highValue = 0.99;  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowDamageFactor,The following statement contains a magic number: if (highValue > 0.99)  			{  				highValue = 0.99;  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcArmorReductionPrct,The following statement contains a magic number: if (levelMod > 59)  			{  				levelMod = (levelMod + (4.5 * (levelMod - 59)));  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcArmorReductionPrct,The following statement contains a magic number: if (levelMod > 59)  			{  				levelMod = (levelMod + (4.5 * (levelMod - 59)));  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcArmorReductionPrct,The following statement contains a magic number: if (levelMod > 59)  			{  				levelMod = (levelMod + (4.5 * (levelMod - 59)));  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcArmorReductionPrct,The following statement contains a magic number: var reduction = 0.1 * Victim.Armor / (8.5 * levelMod + 40);
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcArmorReductionPrct,The following statement contains a magic number: var reduction = 0.1 * Victim.Armor / (8.5 * levelMod + 40);
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcArmorReductionPrct,The following statement contains a magic number: var reduction = 0.1 * Victim.Armor / (8.5 * levelMod + 40);
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcArmorReductionPrct,The following statement contains a magic number: if (reduction > 0.75)  			{  				return 75;  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcArmorReductionPrct,The following statement contains a magic number: if (reduction > 0.75)  			{  				return 75;  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcArmorReductionPrct,The following statement contains a magic number: return reduction * 100;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcHitChance,The following statement contains a magic number: if (Victim is Character)  			{  				skillBonus = (int)((Character)Victim).Skills.GetValue(SkillId.Defense);  			}  			else  			{  				skillBonus = Victim.Level * 5; // defskill of mobs depends on their lvl.  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcHitChance,The following statement contains a magic number: hitchance += attackHitChanceMod * 100;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcHitChance,The following statement contains a magic number: if (Attacker is Character)  			{    				var atk = Attacker as Character;  				hitchance += (IsRangedAttack ? (int)atk.RangedHitChance : (int)atk.HitChance) * 100;  				skillBonus -= (int)atk.Skills.GetValue(Weapon.Skill);  			}  			else  			{  				skillBonus -= Attacker.Level * 5; // attack skill of mobs depends on their lvl.  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcHitChance,The following statement contains a magic number: if (Attacker is Character)  			{    				var atk = Attacker as Character;  				hitchance += (IsRangedAttack ? (int)atk.RangedHitChance : (int)atk.HitChance) * 100;  				skillBonus -= (int)atk.Skills.GetValue(Weapon.Skill);  			}  			else  			{  				skillBonus -= Attacker.Level * 5; // attack skill of mobs depends on their lvl.  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcHitChance,The following statement contains a magic number: if (skillBonus <= 10)  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2400 + (skillBonus) * 10));  				}  				else  				{  					hitchance += (10000 - (500 + (skillBonus) * 10));  				}  			}  			else  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2600 + (skillBonus - 1000) * 40));  				}  				else  				{  					hitchance += (10000 - (700 + (skillBonus - 1000) * 40));  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcHitChance,The following statement contains a magic number: if (skillBonus <= 10)  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2400 + (skillBonus) * 10));  				}  				else  				{  					hitchance += (10000 - (500 + (skillBonus) * 10));  				}  			}  			else  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2600 + (skillBonus - 1000) * 40));  				}  				else  				{  					hitchance += (10000 - (700 + (skillBonus - 1000) * 40));  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcHitChance,The following statement contains a magic number: if (skillBonus <= 10)  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2400 + (skillBonus) * 10));  				}  				else  				{  					hitchance += (10000 - (500 + (skillBonus) * 10));  				}  			}  			else  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2600 + (skillBonus - 1000) * 40));  				}  				else  				{  					hitchance += (10000 - (700 + (skillBonus - 1000) * 40));  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcHitChance,The following statement contains a magic number: if (skillBonus <= 10)  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2400 + (skillBonus) * 10));  				}  				else  				{  					hitchance += (10000 - (500 + (skillBonus) * 10));  				}  			}  			else  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2600 + (skillBonus - 1000) * 40));  				}  				else  				{  					hitchance += (10000 - (700 + (skillBonus - 1000) * 40));  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcHitChance,The following statement contains a magic number: if (skillBonus <= 10)  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2400 + (skillBonus) * 10));  				}  				else  				{  					hitchance += (10000 - (500 + (skillBonus) * 10));  				}  			}  			else  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2600 + (skillBonus - 1000) * 40));  				}  				else  				{  					hitchance += (10000 - (700 + (skillBonus - 1000) * 40));  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcHitChance,The following statement contains a magic number: if (skillBonus <= 10)  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2400 + (skillBonus) * 10));  				}  				else  				{  					hitchance += (10000 - (500 + (skillBonus) * 10));  				}  			}  			else  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2600 + (skillBonus - 1000) * 40));  				}  				else  				{  					hitchance += (10000 - (700 + (skillBonus - 1000) * 40));  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcHitChance,The following statement contains a magic number: if (skillBonus <= 10)  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2400 + (skillBonus) * 10));  				}  				else  				{  					hitchance += (10000 - (500 + (skillBonus) * 10));  				}  			}  			else  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2600 + (skillBonus - 1000) * 40));  				}  				else  				{  					hitchance += (10000 - (700 + (skillBonus - 1000) * 40));  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcHitChance,The following statement contains a magic number: if (skillBonus <= 10)  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2400 + (skillBonus) * 10));  				}  				else  				{  					hitchance += (10000 - (500 + (skillBonus) * 10));  				}  			}  			else  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2600 + (skillBonus - 1000) * 40));  				}  				else  				{  					hitchance += (10000 - (700 + (skillBonus - 1000) * 40));  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcHitChance,The following statement contains a magic number: if (skillBonus <= 10)  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2400 + (skillBonus) * 10));  				}  				else  				{  					hitchance += (10000 - (500 + (skillBonus) * 10));  				}  			}  			else  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2600 + (skillBonus - 1000) * 40));  				}  				else  				{  					hitchance += (10000 - (700 + (skillBonus - 1000) * 40));  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcHitChance,The following statement contains a magic number: if (skillBonus <= 10)  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2400 + (skillBonus) * 10));  				}  				else  				{  					hitchance += (10000 - (500 + (skillBonus) * 10));  				}  			}  			else  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2600 + (skillBonus - 1000) * 40));  				}  				else  				{  					hitchance += (10000 - (700 + (skillBonus - 1000) * 40));  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcHitChance,The following statement contains a magic number: if (skillBonus <= 10)  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2400 + (skillBonus) * 10));  				}  				else  				{  					hitchance += (10000 - (500 + (skillBonus) * 10));  				}  			}  			else  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2600 + (skillBonus - 1000) * 40));  				}  				else  				{  					hitchance += (10000 - (700 + (skillBonus - 1000) * 40));  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcHitChance,The following statement contains a magic number: if (skillBonus <= 10)  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2400 + (skillBonus) * 10));  				}  				else  				{  					hitchance += (10000 - (500 + (skillBonus) * 10));  				}  			}  			else  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2600 + (skillBonus - 1000) * 40));  				}  				else  				{  					hitchance += (10000 - (700 + (skillBonus - 1000) * 40));  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcHitChance,The following statement contains a magic number: if (skillBonus <= 10)  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2400 + (skillBonus) * 10));  				}  				else  				{  					hitchance += (10000 - (500 + (skillBonus) * 10));  				}  			}  			else  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2600 + (skillBonus - 1000) * 40));  				}  				else  				{  					hitchance += (10000 - (700 + (skillBonus - 1000) * 40));  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcHitChance,The following statement contains a magic number: if (skillBonus <= 10)  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2400 + (skillBonus) * 10));  				}  				else  				{  					hitchance += (10000 - (500 + (skillBonus) * 10));  				}  			}  			else  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2600 + (skillBonus - 1000) * 40));  				}  				else  				{  					hitchance += (10000 - (700 + (skillBonus - 1000) * 40));  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcHitChance,The following statement contains a magic number: if (skillBonus <= 10)  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2400 + (skillBonus) * 10));  				}  				else  				{  					hitchance += (10000 - (500 + (skillBonus) * 10));  				}  			}  			else  			{  				if (Attacker.UsesDualWield)  				{  					hitchance += (10000 - (2600 + (skillBonus - 1000) * 40));  				}  				else  				{  					hitchance += (10000 - (700 + (skillBonus - 1000) * 40));  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcHitChance,The following statement contains a magic number: if (hitchance > 10000)  				return 10000;  			else  				return hitchance;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcHitChance,The following statement contains a magic number: if (hitchance > 10000)  				return 10000;  			else  				return hitchance;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowChance,The following statement contains a magic number: if (Attacker is Character)  			{  				var weaponSkill = ((Character)Attacker).Skills.GetValue(Weapon.Skill);  				if (weaponSkill > Attacker.Level * 5)  				{  					weaponSkill = (uint)Attacker.Level * 5;  				}  				var chance = (10 + (int)(Victim.Level * 5 - weaponSkill)) * 100;  				return MathUtil.ClampMinMax(chance' 0' 10000);  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowChance,The following statement contains a magic number: if (Attacker is Character)  			{  				var weaponSkill = ((Character)Attacker).Skills.GetValue(Weapon.Skill);  				if (weaponSkill > Attacker.Level * 5)  				{  					weaponSkill = (uint)Attacker.Level * 5;  				}  				var chance = (10 + (int)(Victim.Level * 5 - weaponSkill)) * 100;  				return MathUtil.ClampMinMax(chance' 0' 10000);  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowChance,The following statement contains a magic number: if (Attacker is Character)  			{  				var weaponSkill = ((Character)Attacker).Skills.GetValue(Weapon.Skill);  				if (weaponSkill > Attacker.Level * 5)  				{  					weaponSkill = (uint)Attacker.Level * 5;  				}  				var chance = (10 + (int)(Victim.Level * 5 - weaponSkill)) * 100;  				return MathUtil.ClampMinMax(chance' 0' 10000);  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowChance,The following statement contains a magic number: if (Attacker is Character)  			{  				var weaponSkill = ((Character)Attacker).Skills.GetValue(Weapon.Skill);  				if (weaponSkill > Attacker.Level * 5)  				{  					weaponSkill = (uint)Attacker.Level * 5;  				}  				var chance = (10 + (int)(Victim.Level * 5 - weaponSkill)) * 100;  				return MathUtil.ClampMinMax(chance' 0' 10000);  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowChance,The following statement contains a magic number: if (Attacker is Character)  			{  				var weaponSkill = ((Character)Attacker).Skills.GetValue(Weapon.Skill);  				if (weaponSkill > Attacker.Level * 5)  				{  					weaponSkill = (uint)Attacker.Level * 5;  				}  				var chance = (10 + (int)(Victim.Level * 5 - weaponSkill)) * 100;  				return MathUtil.ClampMinMax(chance' 0' 10000);  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcGlancingBlowChance,The following statement contains a magic number: if (Attacker is Character)  			{  				var weaponSkill = ((Character)Attacker).Skills.GetValue(Weapon.Skill);  				if (weaponSkill > Attacker.Level * 5)  				{  					weaponSkill = (uint)Attacker.Level * 5;  				}  				var chance = (10 + (int)(Victim.Level * 5 - weaponSkill)) * 100;  				return MathUtil.ClampMinMax(chance' 0' 10000);  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcCrushingBlowChance,The following statement contains a magic number: if (Attacker is NPC && Victim is Character)  			{  				var chr = Victim as Character;  				var playerDefense = chr.Skills.GetValue(SkillId.Defense);  				var npcWeaponSkill = Attacker.Level * 5;    				// Crushing blow can only happen if the player's defense skill is 20 points smaller than the mob's weapon skill.  				if ((npcWeaponSkill - playerDefense) >= 20)  				{  					return (int)((npcWeaponSkill - playerDefense) * 200 - 1500);  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcCrushingBlowChance,The following statement contains a magic number: if (Attacker is NPC && Victim is Character)  			{  				var chr = Victim as Character;  				var playerDefense = chr.Skills.GetValue(SkillId.Defense);  				var npcWeaponSkill = Attacker.Level * 5;    				// Crushing blow can only happen if the player's defense skill is 20 points smaller than the mob's weapon skill.  				if ((npcWeaponSkill - playerDefense) >= 20)  				{  					return (int)((npcWeaponSkill - playerDefense) * 200 - 1500);  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcCrushingBlowChance,The following statement contains a magic number: if (Attacker is NPC && Victim is Character)  			{  				var chr = Victim as Character;  				var playerDefense = chr.Skills.GetValue(SkillId.Defense);  				var npcWeaponSkill = Attacker.Level * 5;    				// Crushing blow can only happen if the player's defense skill is 20 points smaller than the mob's weapon skill.  				if ((npcWeaponSkill - playerDefense) >= 20)  				{  					return (int)((npcWeaponSkill - playerDefense) * 200 - 1500);  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcCrushingBlowChance,The following statement contains a magic number: if (Attacker is NPC && Victim is Character)  			{  				var chr = Victim as Character;  				var playerDefense = chr.Skills.GetValue(SkillId.Defense);  				var npcWeaponSkill = Attacker.Level * 5;    				// Crushing blow can only happen if the player's defense skill is 20 points smaller than the mob's weapon skill.  				if ((npcWeaponSkill - playerDefense) >= 20)  				{  					return (int)((npcWeaponSkill - playerDefense) * 200 - 1500);  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,AddBonusCritChance,The following statement contains a magic number: var critChance = ((critBonusPct * 100) * 10000) / (10000 - origCritChance);
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,AddBonusCritChance,The following statement contains a magic number: var critChance = ((critBonusPct * 100) * 10000) / (10000 - origCritChance);
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,AddBonusCritChance,The following statement contains a magic number: var critChance = ((critBonusPct * 100) * 10000) / (10000 - origCritChance);
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,AddBonusCritChance,The following statement contains a magic number: IsCritical = Utility.Random(0' 10000) < critChance;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcCritChance,The following statement contains a magic number: var chance = (int)Attacker.GetBaseCritChance(UsedSchool' Spell' Weapon) * 100;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcCritChance,The following statement contains a magic number: if (Weapon != null)  			{  				if (Attacker is NPC && Victim is Character)  				{  					// NPC attacks Player  					var chr = Victim as Character;  					var weaponSkill = chr.Skills.GetValue(Weapon.Skill);  					var defSkill = chr.Skills.GetValue(SkillId.Defense);    					chance += (int)(4 * (weaponSkill - defSkill));  				}    				if (Attacker is Character && Victim is NPC)  				{  					// Player attacks NPC  					var chr = Attacker as Character;  					var weaponSkill = chr.Skills.GetValue(Weapon.Skill);  					var defSkill = Victim.Level * 5;    					if (defSkill > weaponSkill)  					{  						chance -= (int)(20 * (defSkill - weaponSkill));  					}  					// else: no change (mobs def is smaller than player's weapon skill)  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcCritChance,The following statement contains a magic number: if (Weapon != null)  			{  				if (Attacker is NPC && Victim is Character)  				{  					// NPC attacks Player  					var chr = Victim as Character;  					var weaponSkill = chr.Skills.GetValue(Weapon.Skill);  					var defSkill = chr.Skills.GetValue(SkillId.Defense);    					chance += (int)(4 * (weaponSkill - defSkill));  				}    				if (Attacker is Character && Victim is NPC)  				{  					// Player attacks NPC  					var chr = Attacker as Character;  					var weaponSkill = chr.Skills.GetValue(Weapon.Skill);  					var defSkill = Victim.Level * 5;    					if (defSkill > weaponSkill)  					{  						chance -= (int)(20 * (defSkill - weaponSkill));  					}  					// else: no change (mobs def is smaller than player's weapon skill)  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcCritChance,The following statement contains a magic number: if (Weapon != null)  			{  				if (Attacker is NPC && Victim is Character)  				{  					// NPC attacks Player  					var chr = Victim as Character;  					var weaponSkill = chr.Skills.GetValue(Weapon.Skill);  					var defSkill = chr.Skills.GetValue(SkillId.Defense);    					chance += (int)(4 * (weaponSkill - defSkill));  				}    				if (Attacker is Character && Victim is NPC)  				{  					// Player attacks NPC  					var chr = Attacker as Character;  					var weaponSkill = chr.Skills.GetValue(Weapon.Skill);  					var defSkill = Victim.Level * 5;    					if (defSkill > weaponSkill)  					{  						chance -= (int)(20 * (defSkill - weaponSkill));  					}  					// else: no change (mobs def is smaller than player's weapon skill)  				}  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcCritChance,The following statement contains a magic number: var attackerCritChance = 100;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcCritChance,The following statement contains a magic number: chance = (chance * attackerCritChance + 50) / 100;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcCritChance,The following statement contains a magic number: chance = (chance * attackerCritChance + 50) / 100;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcCritChance,The following statement contains a magic number: chance -= (int)(Victim.GetResiliencePct() * 100);
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcCritChance,The following statement contains a magic number: return MathUtil.ClampMinMax(chance' 0' 10000);
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcBlockChance,The following statement contains a magic number: if (Attacker is Character)  			{  				weaponSkill = (int)((Character)Attacker).Skills.GetValue(Weapon.Skill);  				blockChance -= ((Character)Attacker).Expertise * 0.25f;  			}  			else  			{  				weaponSkill = Attacker.Level * 5;  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcBlockChance,The following statement contains a magic number: blockChance *= 100;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcBlockChance,The following statement contains a magic number: if (blockChance > 10000)  			{  				return 10000;  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcBlockChance,The following statement contains a magic number: if (blockChance > 10000)  			{  				return 10000;  			}
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcParryChance,The following statement contains a magic number: var defSkill = Victim.Level * 5;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcParryChance,The following statement contains a magic number: var weaponSkill = Attacker.Level * 5;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcParryChance,The following statement contains a magic number: chance += (int)((defSkill - weaponSkill) * 0.04);
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcDodgeChance,The following statement contains a magic number: var defSkill = Victim.Level * 5;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcDodgeChance,The following statement contains a magic number: var weaponSkill = Attacker.Level * 5;
Magic Number,WCell.RealmServer.Misc,DamageAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\UnitActions.cs,CalcDodgeChance,The following statement contains a magic number: chance += (int)((defSkill - weaponSkill) * 0.04);
Magic Number,WCell.RealmServer.Misc,ExceptionHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\ExceptionHandler.cs,OnException,The following statement contains a magic number: if (ex != null)  			{  				Exceptions.Add(new ExceptionInfo(msg' ex));  				var delay = TimeSinceLastException.TotalMinutes;  				if (delay > 60)  				{  					excepRaisingSpeed = 1;  					recentExceptions = 0;  				}  				else  				{  					++recentExceptions;  					excepRaisingSpeed = (3 * excepRaisingSpeed + (1 / delay)) / 4;  				}    				if (recentExceptions > 5 && excepRaisingSpeed > 50 && !RealmServer.IsShuttingDown)  				{  					//World.Broadcast("[Warning] Server has become unstable...");  					//RealmServer.Instance.ShutdownIn(5000);  					return;  				}  				lastExceptionTime = DateTime.Now;  			}
Magic Number,WCell.RealmServer.Misc,ExceptionHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\ExceptionHandler.cs,OnException,The following statement contains a magic number: if (ex != null)  			{  				Exceptions.Add(new ExceptionInfo(msg' ex));  				var delay = TimeSinceLastException.TotalMinutes;  				if (delay > 60)  				{  					excepRaisingSpeed = 1;  					recentExceptions = 0;  				}  				else  				{  					++recentExceptions;  					excepRaisingSpeed = (3 * excepRaisingSpeed + (1 / delay)) / 4;  				}    				if (recentExceptions > 5 && excepRaisingSpeed > 50 && !RealmServer.IsShuttingDown)  				{  					//World.Broadcast("[Warning] Server has become unstable...");  					//RealmServer.Instance.ShutdownIn(5000);  					return;  				}  				lastExceptionTime = DateTime.Now;  			}
Magic Number,WCell.RealmServer.Misc,ExceptionHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\ExceptionHandler.cs,OnException,The following statement contains a magic number: if (ex != null)  			{  				Exceptions.Add(new ExceptionInfo(msg' ex));  				var delay = TimeSinceLastException.TotalMinutes;  				if (delay > 60)  				{  					excepRaisingSpeed = 1;  					recentExceptions = 0;  				}  				else  				{  					++recentExceptions;  					excepRaisingSpeed = (3 * excepRaisingSpeed + (1 / delay)) / 4;  				}    				if (recentExceptions > 5 && excepRaisingSpeed > 50 && !RealmServer.IsShuttingDown)  				{  					//World.Broadcast("[Warning] Server has become unstable...");  					//RealmServer.Instance.ShutdownIn(5000);  					return;  				}  				lastExceptionTime = DateTime.Now;  			}
Magic Number,WCell.RealmServer.Misc,ExceptionHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\ExceptionHandler.cs,OnException,The following statement contains a magic number: if (ex != null)  			{  				Exceptions.Add(new ExceptionInfo(msg' ex));  				var delay = TimeSinceLastException.TotalMinutes;  				if (delay > 60)  				{  					excepRaisingSpeed = 1;  					recentExceptions = 0;  				}  				else  				{  					++recentExceptions;  					excepRaisingSpeed = (3 * excepRaisingSpeed + (1 / delay)) / 4;  				}    				if (recentExceptions > 5 && excepRaisingSpeed > 50 && !RealmServer.IsShuttingDown)  				{  					//World.Broadcast("[Warning] Server has become unstable...");  					//RealmServer.Instance.ShutdownIn(5000);  					return;  				}  				lastExceptionTime = DateTime.Now;  			}
Magic Number,WCell.RealmServer.Misc,ExceptionHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\ExceptionHandler.cs,OnException,The following statement contains a magic number: if (ex != null)  			{  				Exceptions.Add(new ExceptionInfo(msg' ex));  				var delay = TimeSinceLastException.TotalMinutes;  				if (delay > 60)  				{  					excepRaisingSpeed = 1;  					recentExceptions = 0;  				}  				else  				{  					++recentExceptions;  					excepRaisingSpeed = (3 * excepRaisingSpeed + (1 / delay)) / 4;  				}    				if (recentExceptions > 5 && excepRaisingSpeed > 50 && !RealmServer.IsShuttingDown)  				{  					//World.Broadcast("[Warning] Server has become unstable...");  					//RealmServer.Instance.ShutdownIn(5000);  					return;  				}  				lastExceptionTime = DateTime.Now;  			}
Magic Number,WCell.RealmServer.Misc,Duel,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\Duel.cs,Initialize,The following statement contains a magic number: var pos = ((m_challenger.Position + m_rival.Position) / 2);
Magic Number,WCell.RealmServer.Misc,Duel,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\Duel.cs,Initialize,The following statement contains a magic number: if (m_flag == null)  			{  				ContentMgr.OnInvalidDBData("Cannot start Duel: DuelFlag-GameObject (ID: {0}) does not exist."' (int)GOEntryId.DuelFlag);  				Cancel();  			}  			else  			{  				m_flag.Phase = m_challenger.Phase;    				((DuelFlagHandler)m_flag.Handler).Duel = this;  				m_flag.CreatedBy = m_challenger.EntityId;  				m_flag.Level = m_challenger.Level;  				m_flag.AnimationProgress = 255;  				m_flag.Position = m_challenger.Position;  				m_flag.Faction = m_challenger.Faction;  				m_flag.ScaleX = m_challenger.ScaleX;  				m_flag.ParentRotation4 = 1;  				m_flag.Orientation = m_challenger.Orientation;    				m_Map.AddMessage(new Message(() => DuelHandler.SendRequest(m_flag' m_challenger' m_rival)));  				m_challenger.SetEntityId(PlayerFields.DUEL_ARBITER' m_flag.EntityId);  				m_rival.SetEntityId(PlayerFields.DUEL_ARBITER' m_flag.EntityId);  			}
Magic Number,WCell.RealmServer.Misc,DBCCtfCategoriesConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\CfgCategories.cs,ConvertTo,The following statement contains a magic number: var name = GetString(rawData' 4);
Magic Number,WCell.RealmServer.Misc,LockConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\Locks.cs,ConvertTo,The following statement contains a magic number: var methods = new List<LockOpeningMethod>(5);
Magic Number,WCell.RealmServer.Misc,LockConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\Locks.cs,ConvertTo,The following statement contains a magic number: var keys = new List<LockKeyEntry>(5);
Magic Number,WCell.RealmServer.Misc,LockConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\Locks.cs,ConvertTo,The following statement contains a magic number: uint methodIndex = 9;
Magic Number,WCell.RealmServer.Misc,LockConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\Locks.cs,ConvertTo,The following statement contains a magic number: uint skillIndex = 17;
Magic Number,WCell.RealmServer.Misc,LockConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\Locks.cs,ConvertTo,The following statement contains a magic number: for (uint i = 0; i < 5; i++)  				{  					var type = (LockInteractionGroup)rawData.GetUInt32(typeIndex++);  					if (type == LockInteractionGroup.Key)  					{  						var key = rawData.GetUInt32(methodIndex);  						keys.Add(new LockKeyEntry(i' key));  					}  					else if (type == LockInteractionGroup.Profession)  					{  						var method = (LockInteractionType)rawData.GetUInt32(methodIndex);  						if (method == LockInteractionType.None)  						{  							continue;  						}    						if (method == LockInteractionType.Close ||  							method == LockInteractionType.QuickClose ||  							method == LockInteractionType.PvPClose)  						{  							entry.CanBeClosed = true;  						}  						else if (method == LockInteractionType.OpenKneeling)  						{  							entry.RequiresKneeling = true;  						}  						else if (method == LockInteractionType.OpenAttacking)  						{  							entry.RequiresAttack = true;  						}  						else  						{  							var skill = InteractionSkills[(uint)method];  							if (skill != SkillId.None)  							{  								var methodEntry = new LockOpeningMethod(i);  								methodEntry.InteractionType = method;  								methodEntry.RequiredSkill = skill;  								methodEntry.RequiredSkillValue = rawData.GetUInt32(skillIndex);  								methods.Add(methodEntry);  							}  						}  					}    					methodIndex++;  					skillIndex++;  				}
Magic Number,WCell.RealmServer.Misc,TutorialFlags,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\TutorialFlags.cs,TutorialFlags,The following statement contains a magic number: if (flagData.Length != 32)  			{  				throw new ArgumentOutOfRangeException("flagData"' "byte array must be 32 bytes");  			}
Magic Number,WCell.RealmServer.Misc,TutorialFlags,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\TutorialFlags.cs,SetFlag,The following statement contains a magic number: m_flagData[flagIndex / 8] |= (byte)(1 << ((int)flagIndex % 8));
Magic Number,WCell.RealmServer.Misc,TutorialFlags,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\TutorialFlags.cs,SetFlag,The following statement contains a magic number: m_flagData[flagIndex / 8] |= (byte)(1 << ((int)flagIndex % 8));
Magic Number,WCell.RealmServer.Misc,TutorialFlags,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\TutorialFlags.cs,ClearFlags,The following statement contains a magic number: for (int i = 0; i < 32; i++)              {                  m_flagData[i] = 0xFF;              }
Magic Number,WCell.RealmServer.Misc,TutorialFlags,C:\repos\WCell_WCell\Services\WCell.RealmServer\Misc\TutorialFlags.cs,ResetFlags,The following statement contains a magic number: for (int i = 0; i < 32; i++)              {                  m_flagData[i] = 0;              }
Magic Number,WCell.RealmServer.NPCs.Spawns,NPCSpawnEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\NPCEvents.cs,CreateRandomWaypoints,The following statement contains a magic number: if (terrain != null)  			{  				var gen = new RandomWaypointGenerator();  				var wps = gen.GenerateWaypoints(terrain' Position' RespawnRadius);  				AddWaypoints(wps);  				Waypoints.Last.Value.WaitTime = (uint)Utility.Random(2000' 7000);  			}
Magic Number,WCell.RealmServer.NPCs.Spawns,NPCSpawnEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\NPCEvents.cs,CreateRandomWaypoints,The following statement contains a magic number: if (terrain != null)  			{  				var gen = new RandomWaypointGenerator();  				var wps = gen.GenerateWaypoints(terrain' Position' RespawnRadius);  				AddWaypoints(wps);  				Waypoints.Last.Value.WaitTime = (uint)Utility.Random(2000' 7000);  			}
Magic Number,WCell.RealmServer.NPCs.Spawns,NPCSpawnEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\NPCEvents.cs,AddWaypoints,The following statement contains a magic number: for (var i = 0; i < len; i++)  			{  				var pos = wps[i];  				WaypointEntry wp;  				if (i < len - 1)  				{  					wp = CreateWaypoint(pos' pos.GetAngleTowards(wps[i + 1]));  				}  				else if (i > 0)  				{  					wp = CreateWaypoint(pos' pos.GetAngleTowards(first));  				}  				else  				{  					wp = CreateWaypoint(pos' Utility.Random(0f' 2 * MathUtil.PI));  				}  				Waypoints.AddLast(wp);  			}
Magic Number,WCell.RealmServer.Quests,QuestRewRepConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestRewRep.cs,Convert,The following statement contains a magic number: var questRewRepInfo = new QuestRewRepInfo              {                  Id = GetInt32(rawData' 0)'                  RewRep = new[]  				{  					GetInt32(rawData' 2)'  					GetInt32(rawData' 3)'  					GetInt32(rawData' 4)'  					GetInt32(rawData' 5)'  					GetInt32(rawData' 6)'  					GetInt32(rawData' 7)'  					GetInt32(rawData' 8)'  					GetInt32(rawData' 9)'                      GetInt32(rawData' 10)  				}              };
Magic Number,WCell.RealmServer.Quests,QuestRewRepConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestRewRep.cs,Convert,The following statement contains a magic number: var questRewRepInfo = new QuestRewRepInfo              {                  Id = GetInt32(rawData' 0)'                  RewRep = new[]  				{  					GetInt32(rawData' 2)'  					GetInt32(rawData' 3)'  					GetInt32(rawData' 4)'  					GetInt32(rawData' 5)'  					GetInt32(rawData' 6)'  					GetInt32(rawData' 7)'  					GetInt32(rawData' 8)'  					GetInt32(rawData' 9)'                      GetInt32(rawData' 10)  				}              };
Magic Number,WCell.RealmServer.Quests,QuestRewRepConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestRewRep.cs,Convert,The following statement contains a magic number: var questRewRepInfo = new QuestRewRepInfo              {                  Id = GetInt32(rawData' 0)'                  RewRep = new[]  				{  					GetInt32(rawData' 2)'  					GetInt32(rawData' 3)'  					GetInt32(rawData' 4)'  					GetInt32(rawData' 5)'  					GetInt32(rawData' 6)'  					GetInt32(rawData' 7)'  					GetInt32(rawData' 8)'  					GetInt32(rawData' 9)'                      GetInt32(rawData' 10)  				}              };
Magic Number,WCell.RealmServer.Quests,QuestRewRepConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestRewRep.cs,Convert,The following statement contains a magic number: var questRewRepInfo = new QuestRewRepInfo              {                  Id = GetInt32(rawData' 0)'                  RewRep = new[]  				{  					GetInt32(rawData' 2)'  					GetInt32(rawData' 3)'  					GetInt32(rawData' 4)'  					GetInt32(rawData' 5)'  					GetInt32(rawData' 6)'  					GetInt32(rawData' 7)'  					GetInt32(rawData' 8)'  					GetInt32(rawData' 9)'                      GetInt32(rawData' 10)  				}              };
Magic Number,WCell.RealmServer.Quests,QuestRewRepConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestRewRep.cs,Convert,The following statement contains a magic number: var questRewRepInfo = new QuestRewRepInfo              {                  Id = GetInt32(rawData' 0)'                  RewRep = new[]  				{  					GetInt32(rawData' 2)'  					GetInt32(rawData' 3)'  					GetInt32(rawData' 4)'  					GetInt32(rawData' 5)'  					GetInt32(rawData' 6)'  					GetInt32(rawData' 7)'  					GetInt32(rawData' 8)'  					GetInt32(rawData' 9)'                      GetInt32(rawData' 10)  				}              };
Magic Number,WCell.RealmServer.Quests,QuestRewRepConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestRewRep.cs,Convert,The following statement contains a magic number: var questRewRepInfo = new QuestRewRepInfo              {                  Id = GetInt32(rawData' 0)'                  RewRep = new[]  				{  					GetInt32(rawData' 2)'  					GetInt32(rawData' 3)'  					GetInt32(rawData' 4)'  					GetInt32(rawData' 5)'  					GetInt32(rawData' 6)'  					GetInt32(rawData' 7)'  					GetInt32(rawData' 8)'  					GetInt32(rawData' 9)'                      GetInt32(rawData' 10)  				}              };
Magic Number,WCell.RealmServer.Quests,QuestRewRepConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestRewRep.cs,Convert,The following statement contains a magic number: var questRewRepInfo = new QuestRewRepInfo              {                  Id = GetInt32(rawData' 0)'                  RewRep = new[]  				{  					GetInt32(rawData' 2)'  					GetInt32(rawData' 3)'  					GetInt32(rawData' 4)'  					GetInt32(rawData' 5)'  					GetInt32(rawData' 6)'  					GetInt32(rawData' 7)'  					GetInt32(rawData' 8)'  					GetInt32(rawData' 9)'                      GetInt32(rawData' 10)  				}              };
Magic Number,WCell.RealmServer.Quests,QuestRewRepConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestRewRep.cs,Convert,The following statement contains a magic number: var questRewRepInfo = new QuestRewRepInfo              {                  Id = GetInt32(rawData' 0)'                  RewRep = new[]  				{  					GetInt32(rawData' 2)'  					GetInt32(rawData' 3)'  					GetInt32(rawData' 4)'  					GetInt32(rawData' 5)'  					GetInt32(rawData' 6)'  					GetInt32(rawData' 7)'  					GetInt32(rawData' 8)'  					GetInt32(rawData' 9)'                      GetInt32(rawData' 10)  				}              };
Magic Number,WCell.RealmServer.Quests,QuestRewRepConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestRewRep.cs,Convert,The following statement contains a magic number: var questRewRepInfo = new QuestRewRepInfo              {                  Id = GetInt32(rawData' 0)'                  RewRep = new[]  				{  					GetInt32(rawData' 2)'  					GetInt32(rawData' 3)'  					GetInt32(rawData' 4)'  					GetInt32(rawData' 5)'  					GetInt32(rawData' 6)'  					GetInt32(rawData' 7)'  					GetInt32(rawData' 8)'  					GetInt32(rawData' 9)'                      GetInt32(rawData' 10)  				}              };
Magic Number,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,CalcRewRep,The following statement contains a magic number: if (value != 0)  				return value * 100;
Magic Number,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,CalcRewardHonor,The following statement contains a magic number: if (RewHonorAddition > 0 || RewHonorMultiplier > 0.0f)  			{  				var info = QuestMgr.QuestHonorInfos.Get(Level);  				if (info != null)  				{  					fullhonor = (int)(info.RewHonor * RewHonorMultiplier * 0.1000000014901161);  					fullhonor += (int)RewHonorAddition;  				}  			}
Magic Number,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,CalcRewardXp,The following statement contains a magic number: if (info != null)  			{  				fullxp = info.RewXP.Get((uint)RewXPId - 1u);  			}  			else  			{  				// TODO: What to do with quests with funky levels  				fullxp = (int)(MinLevel * 100);  			}
Magic Number,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,CalcRewardXp,The following statement contains a magic number: fullxp = (fullxp * character.QuestExperienceGainModifierPercent / 100);
Magic Number,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,CalcRewardXp,The following statement contains a magic number: if (playerLevel <= Level + 5)  			{  				return fullxp;  			}
Magic Number,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,CalcRewardXp,The following statement contains a magic number: if (playerLevel == Level + 6)  			{  				return (fullxp * 8) / 10;  			}
Magic Number,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,CalcRewardXp,The following statement contains a magic number: if (playerLevel == Level + 6)  			{  				return (fullxp * 8) / 10;  			}
Magic Number,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,CalcRewardXp,The following statement contains a magic number: if (playerLevel == Level + 6)  			{  				return (fullxp * 8) / 10;  			}
Magic Number,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,CalcRewardXp,The following statement contains a magic number: if (playerLevel == Level + 7)  			{  				return (fullxp * 6) / 10;  			}
Magic Number,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,CalcRewardXp,The following statement contains a magic number: if (playerLevel == Level + 7)  			{  				return (fullxp * 6) / 10;  			}
Magic Number,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,CalcRewardXp,The following statement contains a magic number: if (playerLevel == Level + 7)  			{  				return (fullxp * 6) / 10;  			}
Magic Number,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,CalcRewardXp,The following statement contains a magic number: if (playerLevel == Level + 8)  			{  				return (fullxp * 4) / 10;		// 0.4f  			}
Magic Number,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,CalcRewardXp,The following statement contains a magic number: if (playerLevel == Level + 8)  			{  				return (fullxp * 4) / 10;		// 0.4f  			}
Magic Number,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,CalcRewardXp,The following statement contains a magic number: if (playerLevel == Level + 8)  			{  				return (fullxp * 4) / 10;		// 0.4f  			}
Magic Number,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,CalcRewardXp,The following statement contains a magic number: if (playerLevel == Level + 9)  			{  				return fullxp / 5;  			}
Magic Number,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,CalcRewardXp,The following statement contains a magic number: if (playerLevel == Level + 9)  			{  				return fullxp / 5;  			}
Magic Number,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,CalcRewardXp,The following statement contains a magic number: return fullxp / 10;
Magic Number,WCell.RealmServer.Quests,QuestTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\QuestEvents.cs,FinalizeDataHolder,The following statement contains a magic number: var colItems = new List<ItemStackDescription>(4);
Magic Number,WCell.RealmServer.Quests,QuestHolderInfo,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestHolderInfo.cs,GetQuestMenuItems,The following statement contains a magic number: foreach (var qt in QuestEnds)  			{  				var quest = chr.QuestLog.GetQuestById(qt.Id);  				if (quest != null)  				{  					items.Add(new QuestMenuItem(qt.Id' 4' qt.Level' qt.Titles.Localize(chr.Locale)));  				}  			}
Magic Number,WCell.RealmServer.Quests,QuestMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestMgr.cs,LoadAll,The following statement contains a magic number: if (!Loaded)  			{                  new DBCReader<QuestXpConverter>(RealmServerConfiguration.GetDBCFile(WCellConstants.DBC_QUESTXP));                  new DBCReader<QuestRewRepConverter>(RealmServerConfiguration.GetDBCFile(WCellConstants.DBC_QUESTFACTIONREWARD));                  new DBCReader<QuestHonorInfoConverter>(RealmServerConfiguration.GetDBCFile(WCellConstants.DBC_TEAMCONTRIBUTIONPOINTS));  				Templates = new QuestTemplate[30000];    				ContentMgr.Load<QuestTemplate>();                  ContentMgr.Load<QuestPOI>();                  ContentMgr.Load<QuestPOIPoints>();  				CreateQuestRelationGraph();    				EnsureCharacterQuestsLoaded();  				AddSpellCastObjectives();    				// add Item quest starters & add collect quests to corresponding items  				if (ItemMgr.Loaded)  				{  					ItemMgr.EnsureItemQuestRelations();  				}    				// add items to list of provided items  				foreach (var qTempl in Templates)  				{  					if (qTempl != null)  					{  						var itemTempl = ItemMgr.GetTemplate(qTempl.SrcItemId);  						if (itemTempl != null && qTempl.SrcItemId != 0 && !qTempl.Starters.Contains(itemTempl))  						{  							qTempl.ProvidedItems.Add(new ItemStackDescription(qTempl.SrcItemId' 1));  						}  					}  				}    				Loaded = true;    				log.Debug("{0} Quests loaded."' _questCount);  			}
Magic Number,WCell.RealmServer.Quests,QuestMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestMgr.cs,CreateQuestRelationGraph,The following statement contains a magic number: foreach (var quest in Templates)  			{  				if (quest != null)  				{  					if (quest.Id == 10068)  					{  						quest.ToString();  					}  					if (quest.ExclusiveGroup != 0)  					{  						groups.GetOrCreate(quest.ExclusiveGroup).AddUnique(quest.Id);  					}  					else if (quest.NextQuestId != 0)  					{  						var nextQuest = GetTemplate((uint)Math.Abs(quest.NextQuestId));  						if (nextQuest == null)  						{  							ContentMgr.OnInvalidDBData("NextQuestId {0} is invalid in: {1}"' quest.NextQuestId' quest);  						}  						else  						{  							if (quest.NextQuestId > 0)  							{  								nextQuest.ReqAllFinishedQuests.AddUnique(quest.Id);  							}  							else  							{  								nextQuest.ReqAllActiveQuests.AddUnique(quest.Id);  							}  						}  					}  					if (quest.PreviousQuestId != 0)  					{  						//var prevQuest = GetTemplate((uint)Math.Abs(quest.PreviousQuestId));  						//if (prevQuest == null)  						//{  						//    ContentHandler.OnInvalidDBData("PreviousQuestId {0} is invalid in: {1}"' quest.PreviousQuestId' quest);  						//}  						//else  						if (quest.PreviousQuestId > 0)  						{  							quest.ReqAllFinishedQuests.AddUnique((uint)quest.PreviousQuestId);  						}  						else  						{  							quest.ReqAllActiveQuests.AddUnique((uint)-quest.PreviousQuestId);  						}  					}  					if (quest.FollowupQuestId != 0)  					{  						// follow up quest requires this one to be finished before it can be taken  						var followupQuest = GetTemplate(quest.FollowupQuestId);  						if (followupQuest != null)  						{  							followupQuest.ReqAllFinishedQuests.AddUnique(quest.Id);  						}  					}  				}  			}
Magic Number,WCell.RealmServer.Quests,QuestMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestMgr.cs,UnloadAll,The following statement contains a magic number: if (Loaded)  			{  				Loaded = false;  				Templates = new QuestTemplate[30000];  				//GC.Collect();  				return true;  			}
Magic Number,WCell.RealmServer.Quests,QuestXpConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestXp.cs,Convert,The following statement contains a magic number: var xpInfo = new QuestXPInfo  			{  				Level = GetInt32(rawData' 0)'  				RewXP = new[]  				{  					GetInt32(rawData' 2)'  					GetInt32(rawData' 3)'  					GetInt32(rawData' 4)'  					GetInt32(rawData' 5)'  					GetInt32(rawData' 6)'  					GetInt32(rawData' 7)'  					GetInt32(rawData' 8)'  					GetInt32(rawData' 9)  				}  			};
Magic Number,WCell.RealmServer.Quests,QuestXpConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestXp.cs,Convert,The following statement contains a magic number: var xpInfo = new QuestXPInfo  			{  				Level = GetInt32(rawData' 0)'  				RewXP = new[]  				{  					GetInt32(rawData' 2)'  					GetInt32(rawData' 3)'  					GetInt32(rawData' 4)'  					GetInt32(rawData' 5)'  					GetInt32(rawData' 6)'  					GetInt32(rawData' 7)'  					GetInt32(rawData' 8)'  					GetInt32(rawData' 9)  				}  			};
Magic Number,WCell.RealmServer.Quests,QuestXpConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestXp.cs,Convert,The following statement contains a magic number: var xpInfo = new QuestXPInfo  			{  				Level = GetInt32(rawData' 0)'  				RewXP = new[]  				{  					GetInt32(rawData' 2)'  					GetInt32(rawData' 3)'  					GetInt32(rawData' 4)'  					GetInt32(rawData' 5)'  					GetInt32(rawData' 6)'  					GetInt32(rawData' 7)'  					GetInt32(rawData' 8)'  					GetInt32(rawData' 9)  				}  			};
Magic Number,WCell.RealmServer.Quests,QuestXpConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestXp.cs,Convert,The following statement contains a magic number: var xpInfo = new QuestXPInfo  			{  				Level = GetInt32(rawData' 0)'  				RewXP = new[]  				{  					GetInt32(rawData' 2)'  					GetInt32(rawData' 3)'  					GetInt32(rawData' 4)'  					GetInt32(rawData' 5)'  					GetInt32(rawData' 6)'  					GetInt32(rawData' 7)'  					GetInt32(rawData' 8)'  					GetInt32(rawData' 9)  				}  			};
Magic Number,WCell.RealmServer.Quests,QuestXpConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestXp.cs,Convert,The following statement contains a magic number: var xpInfo = new QuestXPInfo  			{  				Level = GetInt32(rawData' 0)'  				RewXP = new[]  				{  					GetInt32(rawData' 2)'  					GetInt32(rawData' 3)'  					GetInt32(rawData' 4)'  					GetInt32(rawData' 5)'  					GetInt32(rawData' 6)'  					GetInt32(rawData' 7)'  					GetInt32(rawData' 8)'  					GetInt32(rawData' 9)  				}  			};
Magic Number,WCell.RealmServer.Quests,QuestXpConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestXp.cs,Convert,The following statement contains a magic number: var xpInfo = new QuestXPInfo  			{  				Level = GetInt32(rawData' 0)'  				RewXP = new[]  				{  					GetInt32(rawData' 2)'  					GetInt32(rawData' 3)'  					GetInt32(rawData' 4)'  					GetInt32(rawData' 5)'  					GetInt32(rawData' 6)'  					GetInt32(rawData' 7)'  					GetInt32(rawData' 8)'  					GetInt32(rawData' 9)  				}  			};
Magic Number,WCell.RealmServer.Quests,QuestXpConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestXp.cs,Convert,The following statement contains a magic number: var xpInfo = new QuestXPInfo  			{  				Level = GetInt32(rawData' 0)'  				RewXP = new[]  				{  					GetInt32(rawData' 2)'  					GetInt32(rawData' 3)'  					GetInt32(rawData' 4)'  					GetInt32(rawData' 5)'  					GetInt32(rawData' 6)'  					GetInt32(rawData' 7)'  					GetInt32(rawData' 8)'  					GetInt32(rawData' 9)  				}  			};
Magic Number,WCell.RealmServer.Quests,QuestXpConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Quests\QuestXp.cs,Convert,The following statement contains a magic number: var xpInfo = new QuestXPInfo  			{  				Level = GetInt32(rawData' 0)'  				RewXP = new[]  				{  					GetInt32(rawData' 2)'  					GetInt32(rawData' 3)'  					GetInt32(rawData' 4)'  					GetInt32(rawData' 5)'  					GetInt32(rawData' 6)'  					GetInt32(rawData' 7)'  					GetInt32(rawData' 8)'  					GetInt32(rawData' 9)  				}  			};
Magic Number,WCell.RealmServer.Spawns,SpawnEntry<T;E;O;POINT;POOL>,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spawns\SpawnEntry.cs,GetRandomRespawnMillis,The following statement contains a magic number: return 1000 * Utility.Random(RespawnSecondsMin' RespawnSecondsMax);
Magic Number,WCell.RealmServer.Talents,GlyphSlotConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\Glyphs.DBC.cs,Convert,The following statement contains a magic number: entry.Order = GetUInt32(rawData' 2);
Magic Number,WCell.RealmServer.Talents,GlyphPropertiesConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\Glyphs.DBC.cs,Convert,The following statement contains a magic number: entry.TypeFlags = GetUInt32(rawData' 2);
Magic Number,WCell.RealmServer.Talents,GlyphPropertiesConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\Glyphs.DBC.cs,Convert,The following statement contains a magic number: entry.Unk1 = GetUInt32(rawData' 3);
Magic Number,WCell.RealmServer.Talents,PlayerTalentCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\PlayerTalentCollection.cs,GetFreeTalentPointsForLevel,The following statement contains a magic number: if (level < 10)  			{  				return -TotalPointsSpent;  			}
Magic Number,WCell.RealmServer.Talents,PlayerTalentCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\PlayerTalentCollection.cs,GetFreeTalentPointsForLevel,The following statement contains a magic number: return level - 9 - TotalPointsSpent;
Magic Number,WCell.RealmServer.Talents,PetTalentCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\PetTalentCollection.cs,GetFreeTalentPointsForLevel,The following statement contains a magic number: if (level < 20)  			{  				return -TotalPointsSpent;    			}
Magic Number,WCell.RealmServer.Talents,PetTalentCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\PetTalentCollection.cs,GetFreeTalentPointsForLevel,The following statement contains a magic number: return (level - 19) / 4 - TotalPointsSpent;
Magic Number,WCell.RealmServer.Talents,PetTalentCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\PetTalentCollection.cs,GetFreeTalentPointsForLevel,The following statement contains a magic number: return (level - 19) / 4 - TotalPointsSpent;
Magic Number,WCell.RealmServer.Talents,SpecProfile,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\SpecProfile.cs,NewSpecProfile,The following statement contains a magic number: var newProfile = new SpecProfile(owner.EntityId.Low' specIndex)  			{  				ActionButtons = actionbar'  				GlyphIds = new uint[6]  			};
Magic Number,WCell.RealmServer.Talents,TalentCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\TalentCollection.cs,LearnAll,The following statement contains a magic number: FreeTalentPoints = 300;
Magic Number,WCell.RealmServer.Talents,TalentTreeConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\Talents.DBC.cs,ConvertTo,The following statement contains a magic number: var classMask = (ClassMask)GetUInt32(rawData' 20);
Magic Number,WCell.RealmServer.Talents,TalentTreeConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\Talents.DBC.cs,ConvertTo,The following statement contains a magic number: tree.PetTabIndex = GetUInt32(rawData' 21);
Magic Number,WCell.RealmServer.Talents,TalentTreeConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\Talents.DBC.cs,ConvertTo,The following statement contains a magic number: tree.TabIndex = GetUInt32(rawData' 22);
Magic Number,WCell.RealmServer.Talents,TalentConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\Talents.DBC.cs,ConvertTo,The following statement contains a magic number: talent.Row = GetUInt32(rawData' 2);
Magic Number,WCell.RealmServer.Talents,TalentConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\Talents.DBC.cs,ConvertTo,The following statement contains a magic number: talent.Col = GetUInt32(rawData' 3);
Magic Number,WCell.RealmServer.Talents,TalentConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\Talents.DBC.cs,ConvertTo,The following statement contains a magic number: var abilities = new List<Spell>(5);
Magic Number,WCell.RealmServer.Talents,TalentConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\Talents.DBC.cs,ConvertTo,The following statement contains a magic number: for (int i = 0; i < 9; i++)  				{  					spellId = GetUInt32(rawData' i + 4);    					// There are talents linking to invalid spells' eg Dirty Tricks' Rank 3  					Spell spell;  					if (spellId == 0 || (spell = SpellHandler.Get(spellId)) == null)  					{  						break;  					}  					if (spell.IsTeachSpell)  					{  						spell = spell.GetEffectsWhere(effect => effect.TriggerSpell != null)[0].TriggerSpell;  					}    					if (spell != null)  					{  						abilities.Add(spell);  					}  					else  					{  						log.Warn("Talent has invalid Spell: {0} ({1})"' talent.Id' spellId);  					}  				}
Magic Number,WCell.RealmServer.Talents,TalentConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\Talents.DBC.cs,ConvertTo,The following statement contains a magic number: for (int i = 0; i < 9; i++)  				{  					spellId = GetUInt32(rawData' i + 4);    					// There are talents linking to invalid spells' eg Dirty Tricks' Rank 3  					Spell spell;  					if (spellId == 0 || (spell = SpellHandler.Get(spellId)) == null)  					{  						break;  					}  					if (spell.IsTeachSpell)  					{  						spell = spell.GetEffectsWhere(effect => effect.TriggerSpell != null)[0].TriggerSpell;  					}    					if (spell != null)  					{  						abilities.Add(spell);  					}  					else  					{  						log.Warn("Talent has invalid Spell: {0} ({1})"' talent.Id' spellId);  					}  				}
Magic Number,WCell.RealmServer.Talents,TalentConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\Talents.DBC.cs,ConvertTo,The following statement contains a magic number: talent.RequiredId = (TalentId)GetUInt32(rawData' 13);
Magic Number,WCell.RealmServer.Talents,TalentConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Talents\Talents.DBC.cs,ConvertTo,The following statement contains a magic number: talent.RequiredRank = GetUInt32(rawData' 16);
Magic Number,WCell.RealmServer.Titles,CharacterTitleEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Titles\CharacterTitleEntry.cs,CharacterTitleEntry,The following statement contains a magic number: Names = new string[16];
Magic Number,WCell.RealmServer.Titles,TitleConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Titles\CharacterTitleEntry.cs,Convert,The following statement contains a magic number: characterTitleEntry.Names = GetStrings(rawData' 2);
Magic Number,WCell.RealmServer.Titles,TitleConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Titles\CharacterTitleEntry.cs,Convert,The following statement contains a magic number: characterTitleEntry.BitIndex = (TitleBitId) GetUInt32(rawData' 36);
Magic Number,WCell.RealmServer.NPCs,NPCAddonData,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPCAddonData.cs,InitAddonData,The following statement contains a magic number: if (Auras == null)  			{  				Auras = new List<Spell>(2);  			}
Magic Number,WCell.RealmServer.NPCs,NPCEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\NPCEvents.cs,AddSpell,The following statement contains a magic number: if (Spells == null)  			{  				Spells = new Dictionary<SpellId' Spell>(5);  			}
Magic Number,WCell.RealmServer.NPCs,NPCEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\NPCEvents.cs,FinalizeDataHolder,The following statement contains a magic number: if (SpeedFactor < 0.01)  			{  				SpeedFactor = 1;  			}
Magic Number,WCell.RealmServer.NPCs,NPCEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\NPCEvents.cs,Dump,The following statement contains a magic number: var resistances = new List<string>(8);
Magic Number,WCell.RealmServer.NPCs,NPCEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\NPCEvents.cs,Dump,The following statement contains a magic number: if (DifficultyOverrideEntryIds != null && DifficultyOverrideEntryIds.Any(id => id != 0))  			{  				var parts = new List<string>(4);  				for (var i = 0u; i < 3; i++)  				{  					var id = DifficultyOverrideEntryIds[i];  					if (id != 0)  					{  						var entry = NPCMgr.GetEntry(id);  						MapTemplate map;  						MapDifficultyEntry diff;  						if (entry != null && (map = GetMapTemplate()) != null && (diff = map.GetDifficulty(i)) != null)  						{  							parts.Add(string.Format("{0} ({1}) = " + id + " (" + (uint)id + ")"' diff.IsHeroic ? "Heroic" : "Normal"' diff.MaxPlayerCount));  						}  						else  						{  							parts.Add("(unknown difficulty) = " + id + " (" + (uint)id + ")");  						}  					}  				}  				writer.WriteLine("DifficultyOverrides: {0}"' parts.ToString("; "));  			}
Magic Number,WCell.RealmServer.NPCs,NPCEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\NPCEvents.cs,Dump,The following statement contains a magic number: if (DifficultyOverrideEntryIds != null && DifficultyOverrideEntryIds.Any(id => id != 0))  			{  				var parts = new List<string>(4);  				for (var i = 0u; i < 3; i++)  				{  					var id = DifficultyOverrideEntryIds[i];  					if (id != 0)  					{  						var entry = NPCMgr.GetEntry(id);  						MapTemplate map;  						MapDifficultyEntry diff;  						if (entry != null && (map = GetMapTemplate()) != null && (diff = map.GetDifficulty(i)) != null)  						{  							parts.Add(string.Format("{0} ({1}) = " + id + " (" + (uint)id + ")"' diff.IsHeroic ? "Heroic" : "Normal"' diff.MaxPlayerCount));  						}  						else  						{  							parts.Add("(unknown difficulty) = " + id + " (" + (uint)id + ")");  						}  					}  				}  				writer.WriteLine("DifficultyOverrides: {0}"' parts.ToString("; "));  			}
Magic Number,WCell.RealmServer.NPCs,NPCEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\NPCEvents.cs,Dump,The following statement contains a magic number: if (KillCreditIds != null && KillCreditIds.Any(id => id != 0))  			{  				var parts = new List<string>(2);  				for (var i = 0u; i < UnitConstants.MaxKillCredits; i++)  				{  					var id = KillCreditIds[i];  					if (id != 0)  					{  						var entry = NPCMgr.GetEntry(id);  						if (entry != null)  						{  							parts.Add(id + " (" + (uint)id + ")");  						}  					}  				}  				writer.WriteLine("KillCredits: {0}"' parts.ToString("; "));  			}
Magic Number,WCell.RealmServer.NPCs,NPCEquipmentEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPCEquipmentEntry.cs,FinalizeDataHolder,The following statement contains a magic number: if (EquipmentId > 100000)  			{  				ContentMgr.OnInvalidDBData("NPCEquipmentEntry had invalid Id: " + EquipmentId);  				return;  			}
Magic Number,WCell.RealmServer.NPCs,UnitModelInfo,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\UnitModelInfo.cs,FinalizeDataHolder,The following statement contains a magic number: if (DisplayId > 100000)  			{  				ContentMgr.OnInvalidDBData("ModelInfo has invalid Id: " + this);  				return;  			}
Magic Number,WCell.RealmServer.NPCs,WaypointEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\WaypointEntry.cs,GetAllDataHolders,The following statement contains a magic number: var list = new List<WaypointEntry>(NPCMgr.SpawnEntries.Length * 10);
Magic Number,WCell.RealmServer.NPCs,DBCCreatureFamilyConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var family = new CreatureFamily {  				Id = ((CreatureFamilyId)(id = (int)GetUInt32(rawData' 0)))'  				MinScale = GetFloat(rawData' 1)'  				MaxScale = GetFloat(rawData' 3)'  				MaxScaleLevel = GetInt32(rawData' 4)'  				SkillLine = SkillHandler.Get(GetUInt32(rawData' 5))'  				PetFoodMask = (PetFoodMask)GetUInt32(rawData' 7)'  				PetTalentType = (PetTalentType)GetUInt32(rawData' 8)'  				Name = GetString(rawData' 10)  			};
Magic Number,WCell.RealmServer.NPCs,DBCCreatureFamilyConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var family = new CreatureFamily {  				Id = ((CreatureFamilyId)(id = (int)GetUInt32(rawData' 0)))'  				MinScale = GetFloat(rawData' 1)'  				MaxScale = GetFloat(rawData' 3)'  				MaxScaleLevel = GetInt32(rawData' 4)'  				SkillLine = SkillHandler.Get(GetUInt32(rawData' 5))'  				PetFoodMask = (PetFoodMask)GetUInt32(rawData' 7)'  				PetTalentType = (PetTalentType)GetUInt32(rawData' 8)'  				Name = GetString(rawData' 10)  			};
Magic Number,WCell.RealmServer.NPCs,DBCCreatureFamilyConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var family = new CreatureFamily {  				Id = ((CreatureFamilyId)(id = (int)GetUInt32(rawData' 0)))'  				MinScale = GetFloat(rawData' 1)'  				MaxScale = GetFloat(rawData' 3)'  				MaxScaleLevel = GetInt32(rawData' 4)'  				SkillLine = SkillHandler.Get(GetUInt32(rawData' 5))'  				PetFoodMask = (PetFoodMask)GetUInt32(rawData' 7)'  				PetTalentType = (PetTalentType)GetUInt32(rawData' 8)'  				Name = GetString(rawData' 10)  			};
Magic Number,WCell.RealmServer.NPCs,DBCCreatureFamilyConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var family = new CreatureFamily {  				Id = ((CreatureFamilyId)(id = (int)GetUInt32(rawData' 0)))'  				MinScale = GetFloat(rawData' 1)'  				MaxScale = GetFloat(rawData' 3)'  				MaxScaleLevel = GetInt32(rawData' 4)'  				SkillLine = SkillHandler.Get(GetUInt32(rawData' 5))'  				PetFoodMask = (PetFoodMask)GetUInt32(rawData' 7)'  				PetTalentType = (PetTalentType)GetUInt32(rawData' 8)'  				Name = GetString(rawData' 10)  			};
Magic Number,WCell.RealmServer.NPCs,DBCCreatureFamilyConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var family = new CreatureFamily {  				Id = ((CreatureFamilyId)(id = (int)GetUInt32(rawData' 0)))'  				MinScale = GetFloat(rawData' 1)'  				MaxScale = GetFloat(rawData' 3)'  				MaxScaleLevel = GetInt32(rawData' 4)'  				SkillLine = SkillHandler.Get(GetUInt32(rawData' 5))'  				PetFoodMask = (PetFoodMask)GetUInt32(rawData' 7)'  				PetTalentType = (PetTalentType)GetUInt32(rawData' 8)'  				Name = GetString(rawData' 10)  			};
Magic Number,WCell.RealmServer.NPCs,DBCCreatureFamilyConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var family = new CreatureFamily {  				Id = ((CreatureFamilyId)(id = (int)GetUInt32(rawData' 0)))'  				MinScale = GetFloat(rawData' 1)'  				MaxScale = GetFloat(rawData' 3)'  				MaxScaleLevel = GetInt32(rawData' 4)'  				SkillLine = SkillHandler.Get(GetUInt32(rawData' 5))'  				PetFoodMask = (PetFoodMask)GetUInt32(rawData' 7)'  				PetTalentType = (PetTalentType)GetUInt32(rawData' 8)'  				Name = GetString(rawData' 10)  			};
Magic Number,WCell.RealmServer.NPCs,DBCCreatureSpellConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var spells = new List<Spell>(4);
Magic Number,WCell.RealmServer.NPCs,DBCCreatureSpellConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: for (int i = 1; i <= 4; i++)  			{  				var spellId = GetUInt32(rawData' i);  				if (spellId != 0)  				{  					if ((spell = SpellHandler.Get(spellId)) != null)  					{  						spells.Add(spell);  					}  				}  			}
Magic Number,WCell.RealmServer.NPCs,DBCBankBagSlotConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: List<Spell> spells = new List<Spell>(4);
Magic Number,WCell.RealmServer.NPCs,DBCVehicleConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var vehicle = new VehicleEntry {                  Id = GetUInt32(rawData'0)'                  Flags = (VehicleFlags)GetUInt32(rawData'1)'                  TurnSpeed = GetFloat(rawData'2)'                  PitchSpeed = GetFloat(rawData'3)'                  PitchMin = GetFloat(rawData'4)'                  PitchMax = GetFloat(rawData'5)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var vehicle = new VehicleEntry {                  Id = GetUInt32(rawData'0)'                  Flags = (VehicleFlags)GetUInt32(rawData'1)'                  TurnSpeed = GetFloat(rawData'2)'                  PitchSpeed = GetFloat(rawData'3)'                  PitchMin = GetFloat(rawData'4)'                  PitchMax = GetFloat(rawData'5)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var vehicle = new VehicleEntry {                  Id = GetUInt32(rawData'0)'                  Flags = (VehicleFlags)GetUInt32(rawData'1)'                  TurnSpeed = GetFloat(rawData'2)'                  PitchSpeed = GetFloat(rawData'3)'                  PitchMin = GetFloat(rawData'4)'                  PitchMax = GetFloat(rawData'5)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var vehicle = new VehicleEntry {                  Id = GetUInt32(rawData'0)'                  Flags = (VehicleFlags)GetUInt32(rawData'1)'                  TurnSpeed = GetFloat(rawData'2)'                  PitchSpeed = GetFloat(rawData'3)'                  PitchMin = GetFloat(rawData'4)'                  PitchMax = GetFloat(rawData'5)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: for (var i = 0; i < vehicle.Seats.Length; i++)  			{  				var seatId = GetUInt32(rawData' 6 + i);  				if (seatId <= 0) continue;    				var seatEntry = NPCMgr.GetVehicleSeatEntry(seatId);  				vehicle.Seats[i] = seatEntry;  				count++;  				lastSeatId = i;  			}
Magic Number,WCell.RealmServer.NPCs,DBCVehicleConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: if (lastSeatId < 7)  			{  				Array.Resize(ref vehicle.Seats' (int)lastSeatId + 1);  			}
Magic Number,WCell.RealmServer.NPCs,DBCVehicleConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: vehicle.PowerType = (VehiclePowerType)GetInt32(rawData' 37);
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,DBCVehicleSeatConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var seat = new VehicleSeatEntry {  				Id = GetUInt32(rawData' 0)'                  Flags = (VehicleSeatFlags)GetUInt32(rawData'1)'                  AttachmentId = GetInt32(rawData'2)'                  AttachmentOffset = new Vector3(  					GetFloat(rawData'3)'  					GetFloat(rawData'4)'  					GetFloat(rawData'5))'                  EnterPreDelay = GetFloat(rawData'6)'                  EnterSpeed = GetFloat(rawData'7)'                  EnterGravity = GetFloat(rawData'8)'                  EnterMinDuration = GetFloat(rawData'9)'                  EnterMaxDuration = GetFloat(rawData'10)'                  EnterMinArcHeight = GetFloat(rawData'11)'                  EnterMaxArcHeight = GetFloat(rawData'12)'                  EnterAnimStart = GetInt32(rawData'13)'                  EnterAnimLoop = GetInt32(rawData'14)'                  RideAnimStart = GetInt32(rawData'15)'                  RideAnimLoop = GetInt32(rawData'16)'                  RideUpperAnimStart = GetInt32(rawData'17)'                  RideUpperAnimLoop = GetInt32(rawData'18)'                  ExitPreDelay = GetFloat(rawData'19)'                  ExitSpeed = GetFloat(rawData'20)'                  ExitGravity = GetFloat(rawData'21)'                  ExitMinDuration = GetFloat(rawData'22)'                  ExitMaxDuration = GetFloat(rawData'23)'                  ExitMinArcHeight = GetFloat(rawData'24)'                  ExitMaxArcHeight = GetFloat(rawData'25)'                  ExitAnimStart = GetInt32(rawData'26)'                  ExitAnimLoop = GetInt32(rawData'27)'                  ExitAnimEnd = GetInt32(rawData'28)'                  PassengerYaw = GetFloat(rawData'29)'                  PassengerPitch = GetFloat(rawData'30)'                  PassengerRoll = GetFloat(rawData'31)'                  PassengerAttachmentId = GetInt32(rawData'32)'  				FlagsB = (VehicleSeatFlagsB)GetUInt32(rawData' 45)              };
Magic Number,WCell.RealmServer.NPCs,BarberShopStyleConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var v = new BarberShopStyleEntry  			{  				Id = GetInt32(rawData' 0)'  				Type = GetInt32(rawData' 1)'  				Race = (RaceId)GetUInt32(rawData' 37)'  				Gender = (GenderType)GetUInt32(rawData' 38)'  				HairId = GetInt32(rawData' 39)  			};
Magic Number,WCell.RealmServer.NPCs,BarberShopStyleConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var v = new BarberShopStyleEntry  			{  				Id = GetInt32(rawData' 0)'  				Type = GetInt32(rawData' 1)'  				Race = (RaceId)GetUInt32(rawData' 37)'  				Gender = (GenderType)GetUInt32(rawData' 38)'  				HairId = GetInt32(rawData' 39)  			};
Magic Number,WCell.RealmServer.NPCs,BarberShopStyleConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPC.DBC.cs,ConvertTo,The following statement contains a magic number: var v = new BarberShopStyleEntry  			{  				Id = GetInt32(rawData' 0)'  				Type = GetInt32(rawData' 1)'  				Race = (RaceId)GetUInt32(rawData' 37)'  				Gender = (GenderType)GetUInt32(rawData' 38)'  				HairId = GetInt32(rawData' 39)  			};
Magic Number,WCell.RealmServer.NPCs,NPCMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPCMgr.cs,InitDefault,The following statement contains a magic number: PetSpells = new Spell[10000][];
Magic Number,WCell.RealmServer.NPCs,NPCMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\NPCMgr.cs,BuySpell,The following statement contains a magic number: SpellHandler.SendVisual(trainer' 179);
Magic Number,WCell.RealmServer.NPCs.Pets,PetLevelStatInfo,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Pets\PetLevelStatInfo.cs,FinalizeDataHolder,The following statement contains a magic number: if (entry != null)  			{  				if (entry.PetLevelStatInfos == null)  				{  					entry.PetLevelStatInfos = new PetLevelStatInfo[100];  				}  				ArrayUtil.Set(ref entry.PetLevelStatInfos' (uint)Level' this);  			}  			else  			{  				LogManager.GetCurrentClassLogger().Warn("Invalid Pet entry id for PetLevelStatInfo: " + EntryId);  			}
Magic Number,WCell.RealmServer.NPCs.Pets,PetMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Pets\PetMgr.cs,GetPetTalentPointsByLevel,The following statement contains a magic number: if (level > 19)  			{  				return (((level - 20) / 4) + 1);  			}
Magic Number,WCell.RealmServer.NPCs.Pets,PetMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Pets\PetMgr.cs,GetPetTalentPointsByLevel,The following statement contains a magic number: if (level > 19)  			{  				return (((level - 20) / 4) + 1);  			}
Magic Number,WCell.RealmServer.NPCs.Pets,PetMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Pets\PetMgr.cs,GetPetTalentPointsByLevel,The following statement contains a magic number: if (level > 19)  			{  				return (((level - 20) / 4) + 1);  			}
Magic Number,WCell.RealmServer,RealmAccount,C:\repos\WCell_WCell\Services\WCell.RealmServer\RealmAccount.cs,ValidateAuthentication,The following statement contains a magic number: if (authInfo == null)  			{  				RealmServer.Instance.Error(client' Resources.FailedToRetrieveAccount' accountName);    				LoginHandler.SendAuthSessionErrorReply(client' LoginErrorCode.AUTH_FAILED);  			}  			else  			{  				try  				{  					client.SessionKey = authInfo.SessionKey;  					client.Info = ClientInformation.Deserialize(authInfo.SystemInformation);    					var srp = new SecureRemotePassword(accountName' authInfo.Verifier' authInfo.Salt);    					BigInteger clientVerifier = srp.Hash(srp.Username' new byte[4]' client.ClientSeed' RealmServer.Instance.AuthSeed' client.SessionKey);    					if (clientVerifier != client.ClientDigest)  					{  						LoginHandler.SendAuthSessionErrorReply(client' LoginErrorCode.AUTH_FAILED);  					}  					else  					{  						return true;  					}  				}  				catch (Exception e)  				{  					LogUtil.ErrorException(e' false' "Failed to validate authentication of Account " + accountName);  					LoginHandler.SendAuthSessionErrorReply(client' LoginErrorCode.AUTH_FAILED);  				}  			}
Magic Number,WCell.RealmServer,RealmServer,C:\repos\WCell_WCell\Services\WCell.RealmServer\RealmServer.cs,OnShutdown,The following statement contains a magic number: if (m_authServiceClient != null && m_authServiceClient.IsConnected)  			{  				// unset all accounts  				IOQueue.AddMessageAndWait(true' () => m_authServiceClient.Channel.SetAllActiveAccounts(EmptyStringArr));  				Thread.Sleep(100);		// sleep for a short while to let the client send the msg to the AuthServer  				m_authServiceClient.IsRunning = false;  			}
Magic Number,WCell.RealmServer,Extensions,C:\repos\WCell_WCell\Services\WCell.RealmServer\Extensions.cs,GetLocation,The following statement contains a magic number: return new Vector3(bytes.GetFloat(index)' bytes.GetFloat(index + 1)' bytes.GetFloat(index + 2));
Magic Number,WCell.RealmServer.Network,AuthQueue,C:\repos\WCell_WCell\Services\WCell.RealmServer\Network\AuthQueue.cs,AuthQueue,The following statement contains a magic number: s_checkTimer.Change(TimeSpan.FromSeconds(15.0)' TimeSpan.FromSeconds(15.0));
Magic Number,WCell.RealmServer.Network,AuthQueue,C:\repos\WCell_WCell\Services\WCell.RealmServer\Network\AuthQueue.cs,AuthQueue,The following statement contains a magic number: s_checkTimer.Change(TimeSpan.FromSeconds(15.0)' TimeSpan.FromSeconds(15.0));
Magic Number,WCell.RealmServer.Network,AuthQueue,C:\repos\WCell_WCell\Services\WCell.RealmServer\Network\AuthQueue.cs,ProcessQueuedClients,The following statement contains a magic number: try  			{  				var clientAccepts = RealmServerConfiguration.MaxClientCount - RealmServer.Instance.AcceptedClients;    				IRealmClient client;    				while (clientAccepts != 0)  				{  					if (s_queuedClients.TryDequeue(out client))  					{  						acceptedClients.Add(client);  						clientAccepts--;  					}  					else  					{  						break;  					}  				}    				int clientPosition = 0;    				using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_AUTH_RESPONSE))  				{  					packet.Write((byte)LoginErrorCode.AUTH_WAIT_QUEUE);  					packet.Write(0);    					foreach (var waitingClient in s_queuedClients)  					{  						packet.InsertIntAt(clientPosition++' 5' false);  						waitingClient.Send(packet);  					}  				}  			}  			catch (Exception e)  			{  				LogUtil.ErrorException(e' "AuthQueue raised an Exception.");  			}  			finally  			{  				PerformanceCounters.NumbersOfClientsInAuthQueue.RawValue = s_queuedClients.Count;    				foreach (var acceptedClient in acceptedClients)  				{  					acceptedClient.Account.IsEnqueued = false;  					LoginHandler.InviteToRealm(acceptedClient);  				}  			}
Magic Number,WCell.RealmServer.Network,RealmClient,C:\repos\WCell_WCell\Services\WCell.RealmServer\Network\RealmClient.cs,OnReceive,The following statement contains a magic number: do  			{  				if (_remainingLength < RealmPacketIn.HEADER_SIZE)  				{  					return false;  				}    				RealmServerOpCode opcode;    				//var headerSize = GetContentInfo(recvBuffer' segment.Offset + _offset' out packetLength' out opcode);    				var offset = segment.Offset + _offset;  				int headerSize;  				bool isLargePacket;  				var packetLength = 0;  				if (IsEncrypted)  				{  					//headerSize = Decrypt(recvBuffer' offset' out packetLength' out opcode);  					var firstByte = GetDecryptedByte(recvBuffer' offset' 0);    					isLargePacket = (firstByte & 0x80) != 0;				// check for the big packet marker  					if (isLargePacket)  					{  						// packetLength has 23 bits  						if (_remainingLength < RealmPacketIn.LARGE_PACKET_HEADER_SIZE)  						{  							decryptUntil = 0;  							log.Warn("DecryptUntil: " + decryptUntil);  							return false;  						}    						packetLength = (firstByte & 0x7F) << 16;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 1) << 8;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 2);    						opcode = (RealmServerOpCode)GetDecryptedOpcode(recvBuffer' offset' 3);  						headerSize = RealmPacketIn.LARGE_PACKET_HEADER_SIZE;  					}  					else  					{  						// packetLength has 15 bits  						packetLength |= firstByte << 8;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 1);    						opcode = (RealmServerOpCode)GetDecryptedOpcode(recvBuffer' offset' 2);  						headerSize = RealmPacketIn.HEADER_SIZE;  					}  				}  				else  				{  					packetLength = recvBuffer[offset] << 8 | recvBuffer[offset + 1];  					isLargePacket = false;    					// the opcode is actually 4 bytes' but can never go over 2' so we skip the last 2  					opcode = (RealmServerOpCode)(recvBuffer[offset + 2] | recvBuffer[offset + 3] << 8);  					headerSize = RealmPacketIn.HEADER_SIZE;  				}    				packetLength += (headerSize - 4);    				if (packetLength > BufferSize)  				{  					// packet is just too big  					var bytes = new byte[headerSize];  					Array.Copy(recvBuffer' offset' bytes' 0' headerSize);    					var str = Encoding.UTF8.GetString(bytes);  					if (str.Equals("GET HT"' StringComparison.InvariantCultureIgnoreCase))  					{  						log.Warn("HTTP crawler bot connected from {0} - requesting: {1}"' this' str);  					}  					else  					{  						LogUtil.ErrorException("Client {0} sent corrupted packet (ID: {1}) with size {2} bytes' which exceeds maximum: " +  						                       "{3} (packet #{4}' segment #{5}' LargePacket: {6}' Remaining: {7}' Header: {8} ({9}))"'  						                       this' opcode' packetLength' BufferSize' i' segment.Number'  						                       isLargePacket'  						                       _remainingLength'  						                       Utility.ToString(bytes' " "' b => string.Format("{0:X2}"' b))'  						                       str);  					}  					Disconnect();    					return false;  				}    				if (_remainingLength < packetLength)  				{  					// packet incomplete  					if (IsEncrypted)  					{  						decryptUntil = headerSize;  						log.Warn("DecryptUntil: {0}' HeaderSize: {1}' Packet: {2}"' decryptUntil' headerSize' opcode);  					}  					return false;  				}    				var pkt = new RealmPacketIn(segment' _offset' packetLength' opcode' headerSize);  				segment.IncrementUsage();    				//.UpdatePacketCounters(pkt.PacketId' fullPacketSize);    				PerformanceCounters.PacketsReceivedPerSecond.Increment();  				PerformanceCounters.TotalBytesReceived.IncrementBy(packetLength);    				RealmPacketMgr.Instance.HandlePacket(this' pkt);    				_remainingLength -= packetLength;  				_offset += packetLength;  				decryptUntil = -1;  				i++;  			} while (_remainingLength > 0);
Magic Number,WCell.RealmServer.Network,RealmClient,C:\repos\WCell_WCell\Services\WCell.RealmServer\Network\RealmClient.cs,OnReceive,The following statement contains a magic number: do  			{  				if (_remainingLength < RealmPacketIn.HEADER_SIZE)  				{  					return false;  				}    				RealmServerOpCode opcode;    				//var headerSize = GetContentInfo(recvBuffer' segment.Offset + _offset' out packetLength' out opcode);    				var offset = segment.Offset + _offset;  				int headerSize;  				bool isLargePacket;  				var packetLength = 0;  				if (IsEncrypted)  				{  					//headerSize = Decrypt(recvBuffer' offset' out packetLength' out opcode);  					var firstByte = GetDecryptedByte(recvBuffer' offset' 0);    					isLargePacket = (firstByte & 0x80) != 0;				// check for the big packet marker  					if (isLargePacket)  					{  						// packetLength has 23 bits  						if (_remainingLength < RealmPacketIn.LARGE_PACKET_HEADER_SIZE)  						{  							decryptUntil = 0;  							log.Warn("DecryptUntil: " + decryptUntil);  							return false;  						}    						packetLength = (firstByte & 0x7F) << 16;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 1) << 8;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 2);    						opcode = (RealmServerOpCode)GetDecryptedOpcode(recvBuffer' offset' 3);  						headerSize = RealmPacketIn.LARGE_PACKET_HEADER_SIZE;  					}  					else  					{  						// packetLength has 15 bits  						packetLength |= firstByte << 8;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 1);    						opcode = (RealmServerOpCode)GetDecryptedOpcode(recvBuffer' offset' 2);  						headerSize = RealmPacketIn.HEADER_SIZE;  					}  				}  				else  				{  					packetLength = recvBuffer[offset] << 8 | recvBuffer[offset + 1];  					isLargePacket = false;    					// the opcode is actually 4 bytes' but can never go over 2' so we skip the last 2  					opcode = (RealmServerOpCode)(recvBuffer[offset + 2] | recvBuffer[offset + 3] << 8);  					headerSize = RealmPacketIn.HEADER_SIZE;  				}    				packetLength += (headerSize - 4);    				if (packetLength > BufferSize)  				{  					// packet is just too big  					var bytes = new byte[headerSize];  					Array.Copy(recvBuffer' offset' bytes' 0' headerSize);    					var str = Encoding.UTF8.GetString(bytes);  					if (str.Equals("GET HT"' StringComparison.InvariantCultureIgnoreCase))  					{  						log.Warn("HTTP crawler bot connected from {0} - requesting: {1}"' this' str);  					}  					else  					{  						LogUtil.ErrorException("Client {0} sent corrupted packet (ID: {1}) with size {2} bytes' which exceeds maximum: " +  						                       "{3} (packet #{4}' segment #{5}' LargePacket: {6}' Remaining: {7}' Header: {8} ({9}))"'  						                       this' opcode' packetLength' BufferSize' i' segment.Number'  						                       isLargePacket'  						                       _remainingLength'  						                       Utility.ToString(bytes' " "' b => string.Format("{0:X2}"' b))'  						                       str);  					}  					Disconnect();    					return false;  				}    				if (_remainingLength < packetLength)  				{  					// packet incomplete  					if (IsEncrypted)  					{  						decryptUntil = headerSize;  						log.Warn("DecryptUntil: {0}' HeaderSize: {1}' Packet: {2}"' decryptUntil' headerSize' opcode);  					}  					return false;  				}    				var pkt = new RealmPacketIn(segment' _offset' packetLength' opcode' headerSize);  				segment.IncrementUsage();    				//.UpdatePacketCounters(pkt.PacketId' fullPacketSize);    				PerformanceCounters.PacketsReceivedPerSecond.Increment();  				PerformanceCounters.TotalBytesReceived.IncrementBy(packetLength);    				RealmPacketMgr.Instance.HandlePacket(this' pkt);    				_remainingLength -= packetLength;  				_offset += packetLength;  				decryptUntil = -1;  				i++;  			} while (_remainingLength > 0);
Magic Number,WCell.RealmServer.Network,RealmClient,C:\repos\WCell_WCell\Services\WCell.RealmServer\Network\RealmClient.cs,OnReceive,The following statement contains a magic number: do  			{  				if (_remainingLength < RealmPacketIn.HEADER_SIZE)  				{  					return false;  				}    				RealmServerOpCode opcode;    				//var headerSize = GetContentInfo(recvBuffer' segment.Offset + _offset' out packetLength' out opcode);    				var offset = segment.Offset + _offset;  				int headerSize;  				bool isLargePacket;  				var packetLength = 0;  				if (IsEncrypted)  				{  					//headerSize = Decrypt(recvBuffer' offset' out packetLength' out opcode);  					var firstByte = GetDecryptedByte(recvBuffer' offset' 0);    					isLargePacket = (firstByte & 0x80) != 0;				// check for the big packet marker  					if (isLargePacket)  					{  						// packetLength has 23 bits  						if (_remainingLength < RealmPacketIn.LARGE_PACKET_HEADER_SIZE)  						{  							decryptUntil = 0;  							log.Warn("DecryptUntil: " + decryptUntil);  							return false;  						}    						packetLength = (firstByte & 0x7F) << 16;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 1) << 8;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 2);    						opcode = (RealmServerOpCode)GetDecryptedOpcode(recvBuffer' offset' 3);  						headerSize = RealmPacketIn.LARGE_PACKET_HEADER_SIZE;  					}  					else  					{  						// packetLength has 15 bits  						packetLength |= firstByte << 8;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 1);    						opcode = (RealmServerOpCode)GetDecryptedOpcode(recvBuffer' offset' 2);  						headerSize = RealmPacketIn.HEADER_SIZE;  					}  				}  				else  				{  					packetLength = recvBuffer[offset] << 8 | recvBuffer[offset + 1];  					isLargePacket = false;    					// the opcode is actually 4 bytes' but can never go over 2' so we skip the last 2  					opcode = (RealmServerOpCode)(recvBuffer[offset + 2] | recvBuffer[offset + 3] << 8);  					headerSize = RealmPacketIn.HEADER_SIZE;  				}    				packetLength += (headerSize - 4);    				if (packetLength > BufferSize)  				{  					// packet is just too big  					var bytes = new byte[headerSize];  					Array.Copy(recvBuffer' offset' bytes' 0' headerSize);    					var str = Encoding.UTF8.GetString(bytes);  					if (str.Equals("GET HT"' StringComparison.InvariantCultureIgnoreCase))  					{  						log.Warn("HTTP crawler bot connected from {0} - requesting: {1}"' this' str);  					}  					else  					{  						LogUtil.ErrorException("Client {0} sent corrupted packet (ID: {1}) with size {2} bytes' which exceeds maximum: " +  						                       "{3} (packet #{4}' segment #{5}' LargePacket: {6}' Remaining: {7}' Header: {8} ({9}))"'  						                       this' opcode' packetLength' BufferSize' i' segment.Number'  						                       isLargePacket'  						                       _remainingLength'  						                       Utility.ToString(bytes' " "' b => string.Format("{0:X2}"' b))'  						                       str);  					}  					Disconnect();    					return false;  				}    				if (_remainingLength < packetLength)  				{  					// packet incomplete  					if (IsEncrypted)  					{  						decryptUntil = headerSize;  						log.Warn("DecryptUntil: {0}' HeaderSize: {1}' Packet: {2}"' decryptUntil' headerSize' opcode);  					}  					return false;  				}    				var pkt = new RealmPacketIn(segment' _offset' packetLength' opcode' headerSize);  				segment.IncrementUsage();    				//.UpdatePacketCounters(pkt.PacketId' fullPacketSize);    				PerformanceCounters.PacketsReceivedPerSecond.Increment();  				PerformanceCounters.TotalBytesReceived.IncrementBy(packetLength);    				RealmPacketMgr.Instance.HandlePacket(this' pkt);    				_remainingLength -= packetLength;  				_offset += packetLength;  				decryptUntil = -1;  				i++;  			} while (_remainingLength > 0);
Magic Number,WCell.RealmServer.Network,RealmClient,C:\repos\WCell_WCell\Services\WCell.RealmServer\Network\RealmClient.cs,OnReceive,The following statement contains a magic number: do  			{  				if (_remainingLength < RealmPacketIn.HEADER_SIZE)  				{  					return false;  				}    				RealmServerOpCode opcode;    				//var headerSize = GetContentInfo(recvBuffer' segment.Offset + _offset' out packetLength' out opcode);    				var offset = segment.Offset + _offset;  				int headerSize;  				bool isLargePacket;  				var packetLength = 0;  				if (IsEncrypted)  				{  					//headerSize = Decrypt(recvBuffer' offset' out packetLength' out opcode);  					var firstByte = GetDecryptedByte(recvBuffer' offset' 0);    					isLargePacket = (firstByte & 0x80) != 0;				// check for the big packet marker  					if (isLargePacket)  					{  						// packetLength has 23 bits  						if (_remainingLength < RealmPacketIn.LARGE_PACKET_HEADER_SIZE)  						{  							decryptUntil = 0;  							log.Warn("DecryptUntil: " + decryptUntil);  							return false;  						}    						packetLength = (firstByte & 0x7F) << 16;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 1) << 8;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 2);    						opcode = (RealmServerOpCode)GetDecryptedOpcode(recvBuffer' offset' 3);  						headerSize = RealmPacketIn.LARGE_PACKET_HEADER_SIZE;  					}  					else  					{  						// packetLength has 15 bits  						packetLength |= firstByte << 8;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 1);    						opcode = (RealmServerOpCode)GetDecryptedOpcode(recvBuffer' offset' 2);  						headerSize = RealmPacketIn.HEADER_SIZE;  					}  				}  				else  				{  					packetLength = recvBuffer[offset] << 8 | recvBuffer[offset + 1];  					isLargePacket = false;    					// the opcode is actually 4 bytes' but can never go over 2' so we skip the last 2  					opcode = (RealmServerOpCode)(recvBuffer[offset + 2] | recvBuffer[offset + 3] << 8);  					headerSize = RealmPacketIn.HEADER_SIZE;  				}    				packetLength += (headerSize - 4);    				if (packetLength > BufferSize)  				{  					// packet is just too big  					var bytes = new byte[headerSize];  					Array.Copy(recvBuffer' offset' bytes' 0' headerSize);    					var str = Encoding.UTF8.GetString(bytes);  					if (str.Equals("GET HT"' StringComparison.InvariantCultureIgnoreCase))  					{  						log.Warn("HTTP crawler bot connected from {0} - requesting: {1}"' this' str);  					}  					else  					{  						LogUtil.ErrorException("Client {0} sent corrupted packet (ID: {1}) with size {2} bytes' which exceeds maximum: " +  						                       "{3} (packet #{4}' segment #{5}' LargePacket: {6}' Remaining: {7}' Header: {8} ({9}))"'  						                       this' opcode' packetLength' BufferSize' i' segment.Number'  						                       isLargePacket'  						                       _remainingLength'  						                       Utility.ToString(bytes' " "' b => string.Format("{0:X2}"' b))'  						                       str);  					}  					Disconnect();    					return false;  				}    				if (_remainingLength < packetLength)  				{  					// packet incomplete  					if (IsEncrypted)  					{  						decryptUntil = headerSize;  						log.Warn("DecryptUntil: {0}' HeaderSize: {1}' Packet: {2}"' decryptUntil' headerSize' opcode);  					}  					return false;  				}    				var pkt = new RealmPacketIn(segment' _offset' packetLength' opcode' headerSize);  				segment.IncrementUsage();    				//.UpdatePacketCounters(pkt.PacketId' fullPacketSize);    				PerformanceCounters.PacketsReceivedPerSecond.Increment();  				PerformanceCounters.TotalBytesReceived.IncrementBy(packetLength);    				RealmPacketMgr.Instance.HandlePacket(this' pkt);    				_remainingLength -= packetLength;  				_offset += packetLength;  				decryptUntil = -1;  				i++;  			} while (_remainingLength > 0);
Magic Number,WCell.RealmServer.Network,RealmClient,C:\repos\WCell_WCell\Services\WCell.RealmServer\Network\RealmClient.cs,OnReceive,The following statement contains a magic number: do  			{  				if (_remainingLength < RealmPacketIn.HEADER_SIZE)  				{  					return false;  				}    				RealmServerOpCode opcode;    				//var headerSize = GetContentInfo(recvBuffer' segment.Offset + _offset' out packetLength' out opcode);    				var offset = segment.Offset + _offset;  				int headerSize;  				bool isLargePacket;  				var packetLength = 0;  				if (IsEncrypted)  				{  					//headerSize = Decrypt(recvBuffer' offset' out packetLength' out opcode);  					var firstByte = GetDecryptedByte(recvBuffer' offset' 0);    					isLargePacket = (firstByte & 0x80) != 0;				// check for the big packet marker  					if (isLargePacket)  					{  						// packetLength has 23 bits  						if (_remainingLength < RealmPacketIn.LARGE_PACKET_HEADER_SIZE)  						{  							decryptUntil = 0;  							log.Warn("DecryptUntil: " + decryptUntil);  							return false;  						}    						packetLength = (firstByte & 0x7F) << 16;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 1) << 8;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 2);    						opcode = (RealmServerOpCode)GetDecryptedOpcode(recvBuffer' offset' 3);  						headerSize = RealmPacketIn.LARGE_PACKET_HEADER_SIZE;  					}  					else  					{  						// packetLength has 15 bits  						packetLength |= firstByte << 8;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 1);    						opcode = (RealmServerOpCode)GetDecryptedOpcode(recvBuffer' offset' 2);  						headerSize = RealmPacketIn.HEADER_SIZE;  					}  				}  				else  				{  					packetLength = recvBuffer[offset] << 8 | recvBuffer[offset + 1];  					isLargePacket = false;    					// the opcode is actually 4 bytes' but can never go over 2' so we skip the last 2  					opcode = (RealmServerOpCode)(recvBuffer[offset + 2] | recvBuffer[offset + 3] << 8);  					headerSize = RealmPacketIn.HEADER_SIZE;  				}    				packetLength += (headerSize - 4);    				if (packetLength > BufferSize)  				{  					// packet is just too big  					var bytes = new byte[headerSize];  					Array.Copy(recvBuffer' offset' bytes' 0' headerSize);    					var str = Encoding.UTF8.GetString(bytes);  					if (str.Equals("GET HT"' StringComparison.InvariantCultureIgnoreCase))  					{  						log.Warn("HTTP crawler bot connected from {0} - requesting: {1}"' this' str);  					}  					else  					{  						LogUtil.ErrorException("Client {0} sent corrupted packet (ID: {1}) with size {2} bytes' which exceeds maximum: " +  						                       "{3} (packet #{4}' segment #{5}' LargePacket: {6}' Remaining: {7}' Header: {8} ({9}))"'  						                       this' opcode' packetLength' BufferSize' i' segment.Number'  						                       isLargePacket'  						                       _remainingLength'  						                       Utility.ToString(bytes' " "' b => string.Format("{0:X2}"' b))'  						                       str);  					}  					Disconnect();    					return false;  				}    				if (_remainingLength < packetLength)  				{  					// packet incomplete  					if (IsEncrypted)  					{  						decryptUntil = headerSize;  						log.Warn("DecryptUntil: {0}' HeaderSize: {1}' Packet: {2}"' decryptUntil' headerSize' opcode);  					}  					return false;  				}    				var pkt = new RealmPacketIn(segment' _offset' packetLength' opcode' headerSize);  				segment.IncrementUsage();    				//.UpdatePacketCounters(pkt.PacketId' fullPacketSize);    				PerformanceCounters.PacketsReceivedPerSecond.Increment();  				PerformanceCounters.TotalBytesReceived.IncrementBy(packetLength);    				RealmPacketMgr.Instance.HandlePacket(this' pkt);    				_remainingLength -= packetLength;  				_offset += packetLength;  				decryptUntil = -1;  				i++;  			} while (_remainingLength > 0);
Magic Number,WCell.RealmServer.Network,RealmClient,C:\repos\WCell_WCell\Services\WCell.RealmServer\Network\RealmClient.cs,OnReceive,The following statement contains a magic number: do  			{  				if (_remainingLength < RealmPacketIn.HEADER_SIZE)  				{  					return false;  				}    				RealmServerOpCode opcode;    				//var headerSize = GetContentInfo(recvBuffer' segment.Offset + _offset' out packetLength' out opcode);    				var offset = segment.Offset + _offset;  				int headerSize;  				bool isLargePacket;  				var packetLength = 0;  				if (IsEncrypted)  				{  					//headerSize = Decrypt(recvBuffer' offset' out packetLength' out opcode);  					var firstByte = GetDecryptedByte(recvBuffer' offset' 0);    					isLargePacket = (firstByte & 0x80) != 0;				// check for the big packet marker  					if (isLargePacket)  					{  						// packetLength has 23 bits  						if (_remainingLength < RealmPacketIn.LARGE_PACKET_HEADER_SIZE)  						{  							decryptUntil = 0;  							log.Warn("DecryptUntil: " + decryptUntil);  							return false;  						}    						packetLength = (firstByte & 0x7F) << 16;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 1) << 8;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 2);    						opcode = (RealmServerOpCode)GetDecryptedOpcode(recvBuffer' offset' 3);  						headerSize = RealmPacketIn.LARGE_PACKET_HEADER_SIZE;  					}  					else  					{  						// packetLength has 15 bits  						packetLength |= firstByte << 8;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 1);    						opcode = (RealmServerOpCode)GetDecryptedOpcode(recvBuffer' offset' 2);  						headerSize = RealmPacketIn.HEADER_SIZE;  					}  				}  				else  				{  					packetLength = recvBuffer[offset] << 8 | recvBuffer[offset + 1];  					isLargePacket = false;    					// the opcode is actually 4 bytes' but can never go over 2' so we skip the last 2  					opcode = (RealmServerOpCode)(recvBuffer[offset + 2] | recvBuffer[offset + 3] << 8);  					headerSize = RealmPacketIn.HEADER_SIZE;  				}    				packetLength += (headerSize - 4);    				if (packetLength > BufferSize)  				{  					// packet is just too big  					var bytes = new byte[headerSize];  					Array.Copy(recvBuffer' offset' bytes' 0' headerSize);    					var str = Encoding.UTF8.GetString(bytes);  					if (str.Equals("GET HT"' StringComparison.InvariantCultureIgnoreCase))  					{  						log.Warn("HTTP crawler bot connected from {0} - requesting: {1}"' this' str);  					}  					else  					{  						LogUtil.ErrorException("Client {0} sent corrupted packet (ID: {1}) with size {2} bytes' which exceeds maximum: " +  						                       "{3} (packet #{4}' segment #{5}' LargePacket: {6}' Remaining: {7}' Header: {8} ({9}))"'  						                       this' opcode' packetLength' BufferSize' i' segment.Number'  						                       isLargePacket'  						                       _remainingLength'  						                       Utility.ToString(bytes' " "' b => string.Format("{0:X2}"' b))'  						                       str);  					}  					Disconnect();    					return false;  				}    				if (_remainingLength < packetLength)  				{  					// packet incomplete  					if (IsEncrypted)  					{  						decryptUntil = headerSize;  						log.Warn("DecryptUntil: {0}' HeaderSize: {1}' Packet: {2}"' decryptUntil' headerSize' opcode);  					}  					return false;  				}    				var pkt = new RealmPacketIn(segment' _offset' packetLength' opcode' headerSize);  				segment.IncrementUsage();    				//.UpdatePacketCounters(pkt.PacketId' fullPacketSize);    				PerformanceCounters.PacketsReceivedPerSecond.Increment();  				PerformanceCounters.TotalBytesReceived.IncrementBy(packetLength);    				RealmPacketMgr.Instance.HandlePacket(this' pkt);    				_remainingLength -= packetLength;  				_offset += packetLength;  				decryptUntil = -1;  				i++;  			} while (_remainingLength > 0);
Magic Number,WCell.RealmServer.Network,RealmClient,C:\repos\WCell_WCell\Services\WCell.RealmServer\Network\RealmClient.cs,OnReceive,The following statement contains a magic number: do  			{  				if (_remainingLength < RealmPacketIn.HEADER_SIZE)  				{  					return false;  				}    				RealmServerOpCode opcode;    				//var headerSize = GetContentInfo(recvBuffer' segment.Offset + _offset' out packetLength' out opcode);    				var offset = segment.Offset + _offset;  				int headerSize;  				bool isLargePacket;  				var packetLength = 0;  				if (IsEncrypted)  				{  					//headerSize = Decrypt(recvBuffer' offset' out packetLength' out opcode);  					var firstByte = GetDecryptedByte(recvBuffer' offset' 0);    					isLargePacket = (firstByte & 0x80) != 0;				// check for the big packet marker  					if (isLargePacket)  					{  						// packetLength has 23 bits  						if (_remainingLength < RealmPacketIn.LARGE_PACKET_HEADER_SIZE)  						{  							decryptUntil = 0;  							log.Warn("DecryptUntil: " + decryptUntil);  							return false;  						}    						packetLength = (firstByte & 0x7F) << 16;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 1) << 8;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 2);    						opcode = (RealmServerOpCode)GetDecryptedOpcode(recvBuffer' offset' 3);  						headerSize = RealmPacketIn.LARGE_PACKET_HEADER_SIZE;  					}  					else  					{  						// packetLength has 15 bits  						packetLength |= firstByte << 8;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 1);    						opcode = (RealmServerOpCode)GetDecryptedOpcode(recvBuffer' offset' 2);  						headerSize = RealmPacketIn.HEADER_SIZE;  					}  				}  				else  				{  					packetLength = recvBuffer[offset] << 8 | recvBuffer[offset + 1];  					isLargePacket = false;    					// the opcode is actually 4 bytes' but can never go over 2' so we skip the last 2  					opcode = (RealmServerOpCode)(recvBuffer[offset + 2] | recvBuffer[offset + 3] << 8);  					headerSize = RealmPacketIn.HEADER_SIZE;  				}    				packetLength += (headerSize - 4);    				if (packetLength > BufferSize)  				{  					// packet is just too big  					var bytes = new byte[headerSize];  					Array.Copy(recvBuffer' offset' bytes' 0' headerSize);    					var str = Encoding.UTF8.GetString(bytes);  					if (str.Equals("GET HT"' StringComparison.InvariantCultureIgnoreCase))  					{  						log.Warn("HTTP crawler bot connected from {0} - requesting: {1}"' this' str);  					}  					else  					{  						LogUtil.ErrorException("Client {0} sent corrupted packet (ID: {1}) with size {2} bytes' which exceeds maximum: " +  						                       "{3} (packet #{4}' segment #{5}' LargePacket: {6}' Remaining: {7}' Header: {8} ({9}))"'  						                       this' opcode' packetLength' BufferSize' i' segment.Number'  						                       isLargePacket'  						                       _remainingLength'  						                       Utility.ToString(bytes' " "' b => string.Format("{0:X2}"' b))'  						                       str);  					}  					Disconnect();    					return false;  				}    				if (_remainingLength < packetLength)  				{  					// packet incomplete  					if (IsEncrypted)  					{  						decryptUntil = headerSize;  						log.Warn("DecryptUntil: {0}' HeaderSize: {1}' Packet: {2}"' decryptUntil' headerSize' opcode);  					}  					return false;  				}    				var pkt = new RealmPacketIn(segment' _offset' packetLength' opcode' headerSize);  				segment.IncrementUsage();    				//.UpdatePacketCounters(pkt.PacketId' fullPacketSize);    				PerformanceCounters.PacketsReceivedPerSecond.Increment();  				PerformanceCounters.TotalBytesReceived.IncrementBy(packetLength);    				RealmPacketMgr.Instance.HandlePacket(this' pkt);    				_remainingLength -= packetLength;  				_offset += packetLength;  				decryptUntil = -1;  				i++;  			} while (_remainingLength > 0);
Magic Number,WCell.RealmServer.Network,RealmClient,C:\repos\WCell_WCell\Services\WCell.RealmServer\Network\RealmClient.cs,OnReceive,The following statement contains a magic number: do  			{  				if (_remainingLength < RealmPacketIn.HEADER_SIZE)  				{  					return false;  				}    				RealmServerOpCode opcode;    				//var headerSize = GetContentInfo(recvBuffer' segment.Offset + _offset' out packetLength' out opcode);    				var offset = segment.Offset + _offset;  				int headerSize;  				bool isLargePacket;  				var packetLength = 0;  				if (IsEncrypted)  				{  					//headerSize = Decrypt(recvBuffer' offset' out packetLength' out opcode);  					var firstByte = GetDecryptedByte(recvBuffer' offset' 0);    					isLargePacket = (firstByte & 0x80) != 0;				// check for the big packet marker  					if (isLargePacket)  					{  						// packetLength has 23 bits  						if (_remainingLength < RealmPacketIn.LARGE_PACKET_HEADER_SIZE)  						{  							decryptUntil = 0;  							log.Warn("DecryptUntil: " + decryptUntil);  							return false;  						}    						packetLength = (firstByte & 0x7F) << 16;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 1) << 8;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 2);    						opcode = (RealmServerOpCode)GetDecryptedOpcode(recvBuffer' offset' 3);  						headerSize = RealmPacketIn.LARGE_PACKET_HEADER_SIZE;  					}  					else  					{  						// packetLength has 15 bits  						packetLength |= firstByte << 8;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 1);    						opcode = (RealmServerOpCode)GetDecryptedOpcode(recvBuffer' offset' 2);  						headerSize = RealmPacketIn.HEADER_SIZE;  					}  				}  				else  				{  					packetLength = recvBuffer[offset] << 8 | recvBuffer[offset + 1];  					isLargePacket = false;    					// the opcode is actually 4 bytes' but can never go over 2' so we skip the last 2  					opcode = (RealmServerOpCode)(recvBuffer[offset + 2] | recvBuffer[offset + 3] << 8);  					headerSize = RealmPacketIn.HEADER_SIZE;  				}    				packetLength += (headerSize - 4);    				if (packetLength > BufferSize)  				{  					// packet is just too big  					var bytes = new byte[headerSize];  					Array.Copy(recvBuffer' offset' bytes' 0' headerSize);    					var str = Encoding.UTF8.GetString(bytes);  					if (str.Equals("GET HT"' StringComparison.InvariantCultureIgnoreCase))  					{  						log.Warn("HTTP crawler bot connected from {0} - requesting: {1}"' this' str);  					}  					else  					{  						LogUtil.ErrorException("Client {0} sent corrupted packet (ID: {1}) with size {2} bytes' which exceeds maximum: " +  						                       "{3} (packet #{4}' segment #{5}' LargePacket: {6}' Remaining: {7}' Header: {8} ({9}))"'  						                       this' opcode' packetLength' BufferSize' i' segment.Number'  						                       isLargePacket'  						                       _remainingLength'  						                       Utility.ToString(bytes' " "' b => string.Format("{0:X2}"' b))'  						                       str);  					}  					Disconnect();    					return false;  				}    				if (_remainingLength < packetLength)  				{  					// packet incomplete  					if (IsEncrypted)  					{  						decryptUntil = headerSize;  						log.Warn("DecryptUntil: {0}' HeaderSize: {1}' Packet: {2}"' decryptUntil' headerSize' opcode);  					}  					return false;  				}    				var pkt = new RealmPacketIn(segment' _offset' packetLength' opcode' headerSize);  				segment.IncrementUsage();    				//.UpdatePacketCounters(pkt.PacketId' fullPacketSize);    				PerformanceCounters.PacketsReceivedPerSecond.Increment();  				PerformanceCounters.TotalBytesReceived.IncrementBy(packetLength);    				RealmPacketMgr.Instance.HandlePacket(this' pkt);    				_remainingLength -= packetLength;  				_offset += packetLength;  				decryptUntil = -1;  				i++;  			} while (_remainingLength > 0);
Magic Number,WCell.RealmServer.Network,RealmClient,C:\repos\WCell_WCell\Services\WCell.RealmServer\Network\RealmClient.cs,OnReceive,The following statement contains a magic number: do  			{  				if (_remainingLength < RealmPacketIn.HEADER_SIZE)  				{  					return false;  				}    				RealmServerOpCode opcode;    				//var headerSize = GetContentInfo(recvBuffer' segment.Offset + _offset' out packetLength' out opcode);    				var offset = segment.Offset + _offset;  				int headerSize;  				bool isLargePacket;  				var packetLength = 0;  				if (IsEncrypted)  				{  					//headerSize = Decrypt(recvBuffer' offset' out packetLength' out opcode);  					var firstByte = GetDecryptedByte(recvBuffer' offset' 0);    					isLargePacket = (firstByte & 0x80) != 0;				// check for the big packet marker  					if (isLargePacket)  					{  						// packetLength has 23 bits  						if (_remainingLength < RealmPacketIn.LARGE_PACKET_HEADER_SIZE)  						{  							decryptUntil = 0;  							log.Warn("DecryptUntil: " + decryptUntil);  							return false;  						}    						packetLength = (firstByte & 0x7F) << 16;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 1) << 8;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 2);    						opcode = (RealmServerOpCode)GetDecryptedOpcode(recvBuffer' offset' 3);  						headerSize = RealmPacketIn.LARGE_PACKET_HEADER_SIZE;  					}  					else  					{  						// packetLength has 15 bits  						packetLength |= firstByte << 8;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 1);    						opcode = (RealmServerOpCode)GetDecryptedOpcode(recvBuffer' offset' 2);  						headerSize = RealmPacketIn.HEADER_SIZE;  					}  				}  				else  				{  					packetLength = recvBuffer[offset] << 8 | recvBuffer[offset + 1];  					isLargePacket = false;    					// the opcode is actually 4 bytes' but can never go over 2' so we skip the last 2  					opcode = (RealmServerOpCode)(recvBuffer[offset + 2] | recvBuffer[offset + 3] << 8);  					headerSize = RealmPacketIn.HEADER_SIZE;  				}    				packetLength += (headerSize - 4);    				if (packetLength > BufferSize)  				{  					// packet is just too big  					var bytes = new byte[headerSize];  					Array.Copy(recvBuffer' offset' bytes' 0' headerSize);    					var str = Encoding.UTF8.GetString(bytes);  					if (str.Equals("GET HT"' StringComparison.InvariantCultureIgnoreCase))  					{  						log.Warn("HTTP crawler bot connected from {0} - requesting: {1}"' this' str);  					}  					else  					{  						LogUtil.ErrorException("Client {0} sent corrupted packet (ID: {1}) with size {2} bytes' which exceeds maximum: " +  						                       "{3} (packet #{4}' segment #{5}' LargePacket: {6}' Remaining: {7}' Header: {8} ({9}))"'  						                       this' opcode' packetLength' BufferSize' i' segment.Number'  						                       isLargePacket'  						                       _remainingLength'  						                       Utility.ToString(bytes' " "' b => string.Format("{0:X2}"' b))'  						                       str);  					}  					Disconnect();    					return false;  				}    				if (_remainingLength < packetLength)  				{  					// packet incomplete  					if (IsEncrypted)  					{  						decryptUntil = headerSize;  						log.Warn("DecryptUntil: {0}' HeaderSize: {1}' Packet: {2}"' decryptUntil' headerSize' opcode);  					}  					return false;  				}    				var pkt = new RealmPacketIn(segment' _offset' packetLength' opcode' headerSize);  				segment.IncrementUsage();    				//.UpdatePacketCounters(pkt.PacketId' fullPacketSize);    				PerformanceCounters.PacketsReceivedPerSecond.Increment();  				PerformanceCounters.TotalBytesReceived.IncrementBy(packetLength);    				RealmPacketMgr.Instance.HandlePacket(this' pkt);    				_remainingLength -= packetLength;  				_offset += packetLength;  				decryptUntil = -1;  				i++;  			} while (_remainingLength > 0);
Magic Number,WCell.RealmServer.Network,RealmClient,C:\repos\WCell_WCell\Services\WCell.RealmServer\Network\RealmClient.cs,OnReceive,The following statement contains a magic number: do  			{  				if (_remainingLength < RealmPacketIn.HEADER_SIZE)  				{  					return false;  				}    				RealmServerOpCode opcode;    				//var headerSize = GetContentInfo(recvBuffer' segment.Offset + _offset' out packetLength' out opcode);    				var offset = segment.Offset + _offset;  				int headerSize;  				bool isLargePacket;  				var packetLength = 0;  				if (IsEncrypted)  				{  					//headerSize = Decrypt(recvBuffer' offset' out packetLength' out opcode);  					var firstByte = GetDecryptedByte(recvBuffer' offset' 0);    					isLargePacket = (firstByte & 0x80) != 0;				// check for the big packet marker  					if (isLargePacket)  					{  						// packetLength has 23 bits  						if (_remainingLength < RealmPacketIn.LARGE_PACKET_HEADER_SIZE)  						{  							decryptUntil = 0;  							log.Warn("DecryptUntil: " + decryptUntil);  							return false;  						}    						packetLength = (firstByte & 0x7F) << 16;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 1) << 8;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 2);    						opcode = (RealmServerOpCode)GetDecryptedOpcode(recvBuffer' offset' 3);  						headerSize = RealmPacketIn.LARGE_PACKET_HEADER_SIZE;  					}  					else  					{  						// packetLength has 15 bits  						packetLength |= firstByte << 8;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 1);    						opcode = (RealmServerOpCode)GetDecryptedOpcode(recvBuffer' offset' 2);  						headerSize = RealmPacketIn.HEADER_SIZE;  					}  				}  				else  				{  					packetLength = recvBuffer[offset] << 8 | recvBuffer[offset + 1];  					isLargePacket = false;    					// the opcode is actually 4 bytes' but can never go over 2' so we skip the last 2  					opcode = (RealmServerOpCode)(recvBuffer[offset + 2] | recvBuffer[offset + 3] << 8);  					headerSize = RealmPacketIn.HEADER_SIZE;  				}    				packetLength += (headerSize - 4);    				if (packetLength > BufferSize)  				{  					// packet is just too big  					var bytes = new byte[headerSize];  					Array.Copy(recvBuffer' offset' bytes' 0' headerSize);    					var str = Encoding.UTF8.GetString(bytes);  					if (str.Equals("GET HT"' StringComparison.InvariantCultureIgnoreCase))  					{  						log.Warn("HTTP crawler bot connected from {0} - requesting: {1}"' this' str);  					}  					else  					{  						LogUtil.ErrorException("Client {0} sent corrupted packet (ID: {1}) with size {2} bytes' which exceeds maximum: " +  						                       "{3} (packet #{4}' segment #{5}' LargePacket: {6}' Remaining: {7}' Header: {8} ({9}))"'  						                       this' opcode' packetLength' BufferSize' i' segment.Number'  						                       isLargePacket'  						                       _remainingLength'  						                       Utility.ToString(bytes' " "' b => string.Format("{0:X2}"' b))'  						                       str);  					}  					Disconnect();    					return false;  				}    				if (_remainingLength < packetLength)  				{  					// packet incomplete  					if (IsEncrypted)  					{  						decryptUntil = headerSize;  						log.Warn("DecryptUntil: {0}' HeaderSize: {1}' Packet: {2}"' decryptUntil' headerSize' opcode);  					}  					return false;  				}    				var pkt = new RealmPacketIn(segment' _offset' packetLength' opcode' headerSize);  				segment.IncrementUsage();    				//.UpdatePacketCounters(pkt.PacketId' fullPacketSize);    				PerformanceCounters.PacketsReceivedPerSecond.Increment();  				PerformanceCounters.TotalBytesReceived.IncrementBy(packetLength);    				RealmPacketMgr.Instance.HandlePacket(this' pkt);    				_remainingLength -= packetLength;  				_offset += packetLength;  				decryptUntil = -1;  				i++;  			} while (_remainingLength > 0);
Magic Number,WCell.RealmServer.Network,RealmClient,C:\repos\WCell_WCell\Services\WCell.RealmServer\Network\RealmClient.cs,OnReceive,The following statement contains a magic number: do  			{  				if (_remainingLength < RealmPacketIn.HEADER_SIZE)  				{  					return false;  				}    				RealmServerOpCode opcode;    				//var headerSize = GetContentInfo(recvBuffer' segment.Offset + _offset' out packetLength' out opcode);    				var offset = segment.Offset + _offset;  				int headerSize;  				bool isLargePacket;  				var packetLength = 0;  				if (IsEncrypted)  				{  					//headerSize = Decrypt(recvBuffer' offset' out packetLength' out opcode);  					var firstByte = GetDecryptedByte(recvBuffer' offset' 0);    					isLargePacket = (firstByte & 0x80) != 0;				// check for the big packet marker  					if (isLargePacket)  					{  						// packetLength has 23 bits  						if (_remainingLength < RealmPacketIn.LARGE_PACKET_HEADER_SIZE)  						{  							decryptUntil = 0;  							log.Warn("DecryptUntil: " + decryptUntil);  							return false;  						}    						packetLength = (firstByte & 0x7F) << 16;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 1) << 8;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 2);    						opcode = (RealmServerOpCode)GetDecryptedOpcode(recvBuffer' offset' 3);  						headerSize = RealmPacketIn.LARGE_PACKET_HEADER_SIZE;  					}  					else  					{  						// packetLength has 15 bits  						packetLength |= firstByte << 8;  						packetLength |= GetDecryptedByte(recvBuffer' offset' 1);    						opcode = (RealmServerOpCode)GetDecryptedOpcode(recvBuffer' offset' 2);  						headerSize = RealmPacketIn.HEADER_SIZE;  					}  				}  				else  				{  					packetLength = recvBuffer[offset] << 8 | recvBuffer[offset + 1];  					isLargePacket = false;    					// the opcode is actually 4 bytes' but can never go over 2' so we skip the last 2  					opcode = (RealmServerOpCode)(recvBuffer[offset + 2] | recvBuffer[offset + 3] << 8);  					headerSize = RealmPacketIn.HEADER_SIZE;  				}    				packetLength += (headerSize - 4);    				if (packetLength > BufferSize)  				{  					// packet is just too big  					var bytes = new byte[headerSize];  					Array.Copy(recvBuffer' offset' bytes' 0' headerSize);    					var str = Encoding.UTF8.GetString(bytes);  					if (str.Equals("GET HT"' StringComparison.InvariantCultureIgnoreCase))  					{  						log.Warn("HTTP crawler bot connected from {0} - requesting: {1}"' this' str);  					}  					else  					{  						LogUtil.ErrorException("Client {0} sent corrupted packet (ID: {1}) with size {2} bytes' which exceeds maximum: " +  						                       "{3} (packet #{4}' segment #{5}' LargePacket: {6}' Remaining: {7}' Header: {8} ({9}))"'  						                       this' opcode' packetLength' BufferSize' i' segment.Number'  						                       isLargePacket'  						                       _remainingLength'  						                       Utility.ToString(bytes' " "' b => string.Format("{0:X2}"' b))'  						                       str);  					}  					Disconnect();    					return false;  				}    				if (_remainingLength < packetLength)  				{  					// packet incomplete  					if (IsEncrypted)  					{  						decryptUntil = headerSize;  						log.Warn("DecryptUntil: {0}' HeaderSize: {1}' Packet: {2}"' decryptUntil' headerSize' opcode);  					}  					return false;  				}    				var pkt = new RealmPacketIn(segment' _offset' packetLength' opcode' headerSize);  				segment.IncrementUsage();    				//.UpdatePacketCounters(pkt.PacketId' fullPacketSize);    				PerformanceCounters.PacketsReceivedPerSecond.Increment();  				PerformanceCounters.TotalBytesReceived.IncrementBy(packetLength);    				RealmPacketMgr.Instance.HandlePacket(this' pkt);    				_remainingLength -= packetLength;  				_offset += packetLength;  				decryptUntil = -1;  				i++;  			} while (_remainingLength > 0);
Magic Number,WCell.RealmServer.Network,RealmClient,C:\repos\WCell_WCell\Services\WCell.RealmServer\Network\RealmClient.cs,Encrypt,The following statement contains a magic number: m_packetCrypt.Encrypt(data' offset' 4);
Magic Number,WCell.RealmServer.Network,RealmClient,C:\repos\WCell_WCell\Services\WCell.RealmServer\Network\RealmClient.cs,GetDecryptedOpcode,The following statement contains a magic number: if (decryptUntil < offset + 4)  			{  				//if (decryptUntil > offset)		// must not happen  				//{  				//    m_packetCrypt.Decrypt(inputData' baseOffset + decryptUntil' (offset - decryptUntil + 4));  				//}  				m_packetCrypt.Decrypt(inputData' dataStartOffset' 4);  			}
Magic Number,WCell.RealmServer.Network,RealmClient,C:\repos\WCell_WCell\Services\WCell.RealmServer\Network\RealmClient.cs,GetDecryptedOpcode,The following statement contains a magic number: if (decryptUntil < offset + 4)  			{  				//if (decryptUntil > offset)		// must not happen  				//{  				//    m_packetCrypt.Decrypt(inputData' baseOffset + decryptUntil' (offset - decryptUntil + 4));  				//}  				m_packetCrypt.Decrypt(inputData' dataStartOffset' 4);  			}
Magic Number,WCell.RealmServer.Network,CompressedPacket,C:\repos\WCell_WCell\Services\WCell.RealmServer\Network\CompressedPacket.cs,AddPacket,The following statement contains a magic number: if (packet.ContentLength > 255)                  throw new InvalidDataException("Packets added to a compressed stream must have length less than 255");
Magic Number,WCell.RealmServer.Network,CompressedPacket,C:\repos\WCell_WCell\Services\WCell.RealmServer\Network\CompressedPacket.cs,FinalizeWrite,The following statement contains a magic number: Compression.CompressZLib(backingBuf' segment.Buffer.Array' 7' out deflatedLength);
Magic Number,WCell.RealmServer.Network,FakeRealmClient,C:\repos\WCell_WCell\Services\WCell.RealmServer\Network\FakeRealmClient.cs,HandleCMSG,The following statement contains a magic number: if (wait)  			{  				ActiveCharacter.Map.WaitTicks(2);  			}
Magic Number,WCell.RealmServer.RacesClasses,BaseClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\BaseClass.cs,CalculateHealthRegen,The following statement contains a magic number: return (unit.MaxHealth * 75 + 5000) / 10000;
Magic Number,WCell.RealmServer.RacesClasses,BaseClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\BaseClass.cs,CalculateHealthRegen,The following statement contains a magic number: return (unit.MaxHealth * 75 + 5000) / 10000;
Magic Number,WCell.RealmServer.RacesClasses,BaseClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\BaseClass.cs,CalculateHealthRegen,The following statement contains a magic number: return (unit.MaxHealth * 75 + 5000) / 10000;
Magic Number,WCell.RealmServer.RacesClasses,BaseClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\BaseClass.cs,CalculateMagicCritChance,The following statement contains a magic number: var critBase = GameTables.BaseSpellCritChance[(int)Id-1]*100;
Magic Number,WCell.RealmServer.RacesClasses,BaseClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\BaseClass.cs,CalculateMeleeCritChance,The following statement contains a magic number: var baseCrit = GameTables.BaseMeleeCritChance[((int)Id) - 1] * 100;
Magic Number,WCell.RealmServer.RacesClasses,BaseClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\BaseClass.cs,CalculateMeleeCritChance,The following statement contains a magic number: return crit > 5 ? crit : 5;
Magic Number,WCell.RealmServer.RacesClasses,BaseClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\BaseClass.cs,CalculateMeleeCritChance,The following statement contains a magic number: return crit > 5 ? crit : 5;
Magic Number,WCell.RealmServer.RacesClasses,BaseClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\BaseClass.cs,CalculateRangedCritChance,The following statement contains a magic number: var baseCrit = GameTables.BaseMeleeCritChance[((int) Id) - 1]* 100;
Magic Number,WCell.RealmServer.RacesClasses,BaseClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\BaseClass.cs,CalculateRangedCritChance,The following statement contains a magic number: return crit > 5 ? crit : 5;
Magic Number,WCell.RealmServer.RacesClasses,BaseClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\BaseClass.cs,CalculateRangedCritChance,The following statement contains a magic number: return crit > 5 ? crit : 5;
Magic Number,WCell.RealmServer.RacesClasses,BaseClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\BaseClass.cs,CalculateRangedAP,The following statement contains a magic number: return agility - 10;
Magic Number,WCell.RealmServer.RacesClasses,DruidClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\DruidClass.cs,CalculateMeleeAP,The following statement contains a magic number: return (strength * 2 - 20);
Magic Number,WCell.RealmServer.RacesClasses,DruidClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\DruidClass.cs,CalculateMeleeAP,The following statement contains a magic number: return (strength * 2 - 20);
Magic Number,WCell.RealmServer.RacesClasses,DruidClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\DruidClass.cs,CalculateRangedAP,The following statement contains a magic number: return agility - 10;
Magic Number,WCell.RealmServer.RacesClasses,HunterClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\HunterClass.cs,CalculateMeleeAP,The following statement contains a magic number: return ((((level * 2) + strength) + agility) - 20);
Magic Number,WCell.RealmServer.RacesClasses,HunterClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\HunterClass.cs,CalculateMeleeAP,The following statement contains a magic number: return ((((level * 2) + strength) + agility) - 20);
Magic Number,WCell.RealmServer.RacesClasses,HunterClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\HunterClass.cs,CalculateRangedAP,The following statement contains a magic number: return level * 2 + agility;
Magic Number,WCell.RealmServer.RacesClasses,MageClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\MageClass.cs,CalculateMeleeAP,The following statement contains a magic number: return (strength - 10);
Magic Number,WCell.RealmServer.RacesClasses,PaladinClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\PaladinClass.cs,CalculateMeleeAP,The following statement contains a magic number: return (level * 3 + strength * 2 - 20);
Magic Number,WCell.RealmServer.RacesClasses,PaladinClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\PaladinClass.cs,CalculateMeleeAP,The following statement contains a magic number: return (level * 3 + strength * 2 - 20);
Magic Number,WCell.RealmServer.RacesClasses,PaladinClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\PaladinClass.cs,CalculateMeleeAP,The following statement contains a magic number: return (level * 3 + strength * 2 - 20);
Magic Number,WCell.RealmServer.RacesClasses,PriestClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\PriestClass.cs,CalculateMeleeAP,The following statement contains a magic number: return (strength - 10);
Magic Number,WCell.RealmServer.RacesClasses,RogueClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\RogueClass.cs,CalculateMeleeAP,The following statement contains a magic number: return ((level * 2 + strength + agility) - 20);
Magic Number,WCell.RealmServer.RacesClasses,RogueClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\RogueClass.cs,CalculateMeleeAP,The following statement contains a magic number: return ((level * 2 + strength + agility) - 20);
Magic Number,WCell.RealmServer.RacesClasses,RogueClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\RogueClass.cs,CalculateRangedAP,The following statement contains a magic number: return level + agility - 10;
Magic Number,WCell.RealmServer.RacesClasses,ShamanClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\ShamanClass.cs,CalculateMeleeAP,The following statement contains a magic number: return (level * 2 + strength + agility - 20);
Magic Number,WCell.RealmServer.RacesClasses,ShamanClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\ShamanClass.cs,CalculateMeleeAP,The following statement contains a magic number: return (level * 2 + strength + agility - 20);
Magic Number,WCell.RealmServer.RacesClasses,WarlockClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\WarlockClass.cs,CalculateMeleeAP,The following statement contains a magic number: return (strength - 10);
Magic Number,WCell.RealmServer.RacesClasses,WarriorClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\WarriorClass.cs,CalculateMeleeAP,The following statement contains a magic number: return (level * 3 + strength * 2 - 20);
Magic Number,WCell.RealmServer.RacesClasses,WarriorClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\WarriorClass.cs,CalculateMeleeAP,The following statement contains a magic number: return (level * 3 + strength * 2 - 20);
Magic Number,WCell.RealmServer.RacesClasses,WarriorClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\WarriorClass.cs,CalculateMeleeAP,The following statement contains a magic number: return (level * 3 + strength * 2 - 20);
Magic Number,WCell.RealmServer.RacesClasses,WarriorClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\WarriorClass.cs,CalculateRangedAP,The following statement contains a magic number: return level + agility - 10;
Magic Number,WCell.RealmServer.RacesClasses,BaseRace,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\BaseRace.cs,FinalizeAfterLoad,The following statement contains a magic number: if (FemaleModel != null)  			{  				MaleModel = UnitMgr.GetModelInfo(MaleDisplayId);  				if (MaleModel != null)  				{  					// fix broken values  					if (FemaleModel.BoundingRadius < 0.1)  					{  						FemaleModel.BoundingRadius = MaleModel.BoundingRadius;  					}  					else if (MaleModel.BoundingRadius < 0.1)  					{  						MaleModel.BoundingRadius = FemaleModel.BoundingRadius;  					}  					if (FemaleModel.CombatReach < 0.1)  					{  						FemaleModel.CombatReach = MaleModel.CombatReach;  					}  					else if (MaleModel.CombatReach < 0.1)  					{  						MaleModel.CombatReach = FemaleModel.CombatReach;  					}    					ArchetypeMgr.BaseRaces[(uint) Id] = this;  				}  			}
Magic Number,WCell.RealmServer.RacesClasses,BaseRace,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\BaseRace.cs,FinalizeAfterLoad,The following statement contains a magic number: if (FemaleModel != null)  			{  				MaleModel = UnitMgr.GetModelInfo(MaleDisplayId);  				if (MaleModel != null)  				{  					// fix broken values  					if (FemaleModel.BoundingRadius < 0.1)  					{  						FemaleModel.BoundingRadius = MaleModel.BoundingRadius;  					}  					else if (MaleModel.BoundingRadius < 0.1)  					{  						MaleModel.BoundingRadius = FemaleModel.BoundingRadius;  					}  					if (FemaleModel.CombatReach < 0.1)  					{  						FemaleModel.CombatReach = MaleModel.CombatReach;  					}  					else if (MaleModel.CombatReach < 0.1)  					{  						MaleModel.CombatReach = FemaleModel.CombatReach;  					}    					ArchetypeMgr.BaseRaces[(uint) Id] = this;  				}  			}
Magic Number,WCell.RealmServer.RacesClasses,BaseRace,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\BaseRace.cs,FinalizeAfterLoad,The following statement contains a magic number: if (FemaleModel != null)  			{  				MaleModel = UnitMgr.GetModelInfo(MaleDisplayId);  				if (MaleModel != null)  				{  					// fix broken values  					if (FemaleModel.BoundingRadius < 0.1)  					{  						FemaleModel.BoundingRadius = MaleModel.BoundingRadius;  					}  					else if (MaleModel.BoundingRadius < 0.1)  					{  						MaleModel.BoundingRadius = FemaleModel.BoundingRadius;  					}  					if (FemaleModel.CombatReach < 0.1)  					{  						FemaleModel.CombatReach = MaleModel.CombatReach;  					}  					else if (MaleModel.CombatReach < 0.1)  					{  						MaleModel.CombatReach = FemaleModel.CombatReach;  					}    					ArchetypeMgr.BaseRaces[(uint) Id] = this;  				}  			}
Magic Number,WCell.RealmServer.RacesClasses,BaseRace,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\BaseRace.cs,FinalizeAfterLoad,The following statement contains a magic number: if (FemaleModel != null)  			{  				MaleModel = UnitMgr.GetModelInfo(MaleDisplayId);  				if (MaleModel != null)  				{  					// fix broken values  					if (FemaleModel.BoundingRadius < 0.1)  					{  						FemaleModel.BoundingRadius = MaleModel.BoundingRadius;  					}  					else if (MaleModel.BoundingRadius < 0.1)  					{  						MaleModel.BoundingRadius = FemaleModel.BoundingRadius;  					}  					if (FemaleModel.CombatReach < 0.1)  					{  						FemaleModel.CombatReach = MaleModel.CombatReach;  					}  					else if (MaleModel.CombatReach < 0.1)  					{  						MaleModel.CombatReach = FemaleModel.CombatReach;  					}    					ArchetypeMgr.BaseRaces[(uint) Id] = this;  				}  			}
Magic Number,WCell.RealmServer.RacesClasses,DBCRaceConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\Archetypes.DBC.cs,ConvertTo,The following statement contains a magic number: var race = new BaseRace  			{  				Id = ((RaceId)(id = (int)GetUInt32(rawData' 0)))'  				FactionTemplateId = (FactionTemplateId)GetUInt32(rawData' 8)'  				MaleDisplayId = GetUInt32(rawData' 4)'  				FemaleDisplayId = GetUInt32(rawData' 5)'  				Scale = GetFloat(rawData' 7)'  				Name = GetString(rawData' 14)'  				ClientId = (ClientId)GetUInt32(rawData' 68)  			};
Magic Number,WCell.RealmServer.RacesClasses,DBCRaceConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\Archetypes.DBC.cs,ConvertTo,The following statement contains a magic number: var race = new BaseRace  			{  				Id = ((RaceId)(id = (int)GetUInt32(rawData' 0)))'  				FactionTemplateId = (FactionTemplateId)GetUInt32(rawData' 8)'  				MaleDisplayId = GetUInt32(rawData' 4)'  				FemaleDisplayId = GetUInt32(rawData' 5)'  				Scale = GetFloat(rawData' 7)'  				Name = GetString(rawData' 14)'  				ClientId = (ClientId)GetUInt32(rawData' 68)  			};
Magic Number,WCell.RealmServer.RacesClasses,DBCRaceConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\Archetypes.DBC.cs,ConvertTo,The following statement contains a magic number: var race = new BaseRace  			{  				Id = ((RaceId)(id = (int)GetUInt32(rawData' 0)))'  				FactionTemplateId = (FactionTemplateId)GetUInt32(rawData' 8)'  				MaleDisplayId = GetUInt32(rawData' 4)'  				FemaleDisplayId = GetUInt32(rawData' 5)'  				Scale = GetFloat(rawData' 7)'  				Name = GetString(rawData' 14)'  				ClientId = (ClientId)GetUInt32(rawData' 68)  			};
Magic Number,WCell.RealmServer.RacesClasses,DBCRaceConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\Archetypes.DBC.cs,ConvertTo,The following statement contains a magic number: var race = new BaseRace  			{  				Id = ((RaceId)(id = (int)GetUInt32(rawData' 0)))'  				FactionTemplateId = (FactionTemplateId)GetUInt32(rawData' 8)'  				MaleDisplayId = GetUInt32(rawData' 4)'  				FemaleDisplayId = GetUInt32(rawData' 5)'  				Scale = GetFloat(rawData' 7)'  				Name = GetString(rawData' 14)'  				ClientId = (ClientId)GetUInt32(rawData' 68)  			};
Magic Number,WCell.RealmServer.RacesClasses,DBCRaceConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\Archetypes.DBC.cs,ConvertTo,The following statement contains a magic number: var race = new BaseRace  			{  				Id = ((RaceId)(id = (int)GetUInt32(rawData' 0)))'  				FactionTemplateId = (FactionTemplateId)GetUInt32(rawData' 8)'  				MaleDisplayId = GetUInt32(rawData' 4)'  				FemaleDisplayId = GetUInt32(rawData' 5)'  				Scale = GetFloat(rawData' 7)'  				Name = GetString(rawData' 14)'  				ClientId = (ClientId)GetUInt32(rawData' 68)  			};
Magic Number,WCell.RealmServer.RacesClasses,DBCRaceConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\Archetypes.DBC.cs,ConvertTo,The following statement contains a magic number: var race = new BaseRace  			{  				Id = ((RaceId)(id = (int)GetUInt32(rawData' 0)))'  				FactionTemplateId = (FactionTemplateId)GetUInt32(rawData' 8)'  				MaleDisplayId = GetUInt32(rawData' 4)'  				FemaleDisplayId = GetUInt32(rawData' 5)'  				Scale = GetFloat(rawData' 7)'  				Name = GetString(rawData' 14)'  				ClientId = (ClientId)GetUInt32(rawData' 68)  			};
Magic Number,WCell.RealmServer.RacesClasses,DBCStartOutfitConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\Archetypes.DBC.cs,Convert,The following statement contains a magic number: var clss = (ClassId) ((raceClassGender & 0xFF00) >> 8);
Magic Number,WCell.RealmServer.RacesClasses,DBCStartOutfitConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\Archetypes.DBC.cs,Convert,The following statement contains a magic number: var gender = (GenderType) ((raceClassGender & 0xFF0000) >> 16);
Magic Number,WCell.RealmServer.RacesClasses,DBCStartOutfitConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\Archetypes.DBC.cs,Convert,The following statement contains a magic number: for (var i = 2; i <= 25; i++)  			{  				var itemId = GetInt32(rawData' i);  				if (itemId > 0)  				{  					var templ = ItemMgr.GetTemplate((ItemId)itemId);  					if (templ == null)  					{  						LogManager.GetCurrentClassLogger().Warn("Missing initial Item in DB: " + itemId + " (" + (uint)itemId + ")");  					}  					else  					{  						if (templ.IsStackable)  						{  							var index = items.FindIndex(stack => stack.Template.Id == itemId);  							if (index > -1)  							{  								items[index] = new ItemStack   								{  									Template = templ'  									Amount = items[index].Amount + 1  								};  							}  							else  							{  								items.Add(new ItemStack  								{  									Template = templ'  									Amount = templ.IsAmmo ? templ.MaxAmount : 1  								});  							}  						}  						else  						{  							items.Add(new ItemStack  							{  								Template = templ'  								Amount = 1  							});  						}  					}  				}  			}
Magic Number,WCell.RealmServer.RacesClasses,DBCStartOutfitConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\Archetypes.DBC.cs,Convert,The following statement contains a magic number: for (var i = 2; i <= 25; i++)  			{  				var itemId = GetInt32(rawData' i);  				if (itemId > 0)  				{  					var templ = ItemMgr.GetTemplate((ItemId)itemId);  					if (templ == null)  					{  						LogManager.GetCurrentClassLogger().Warn("Missing initial Item in DB: " + itemId + " (" + (uint)itemId + ")");  					}  					else  					{  						if (templ.IsStackable)  						{  							var index = items.FindIndex(stack => stack.Template.Id == itemId);  							if (index > -1)  							{  								items[index] = new ItemStack   								{  									Template = templ'  									Amount = items[index].Amount + 1  								};  							}  							else  							{  								items.Add(new ItemStack  								{  									Template = templ'  									Amount = templ.IsAmmo ? templ.MaxAmount : 1  								});  							}  						}  						else  						{  							items.Add(new ItemStack  							{  								Template = templ'  								Amount = 1  							});  						}  					}  				}  			}
Magic Number,WCell.RealmServer.RacesClasses,DeathKnightClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\DeathKnightClass.cs,CalculateMeleeAP,The following statement contains a magic number: return (level * 3 + strength * 2 - 20);
Magic Number,WCell.RealmServer.RacesClasses,DeathKnightClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\DeathKnightClass.cs,CalculateMeleeAP,The following statement contains a magic number: return (level * 3 + strength * 2 - 20);
Magic Number,WCell.RealmServer.RacesClasses,DeathKnightClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\DeathKnightClass.cs,CalculateMeleeAP,The following statement contains a magic number: return (level * 3 + strength * 2 - 20);
Magic Number,WCell.RealmServer.RacesClasses,DeathKnightClass,C:\repos\WCell_WCell\Services\WCell.RealmServer\RacesClasses\DeathKnightClass.cs,CalculateParry,The following statement contains a magic number: return base.CalculateParry(level' (int)(parryRating + str * 0.25)' str);
Magic Number,WCell.RealmServer.Groups,Group,C:\repos\WCell_WCell\Services\WCell.RealmServer\Groups\Group.cs,SendUpdate,The following statement contains a magic number: using (syncLock.EnterReadLock())  			{  				Character chr;    				foreach (var groupUnit in m_subGroups)  				{  					foreach (var member in groupUnit.Members)  					{  						var maxLen = 35 + ((11 + CharacterHandler.MaxCharNameLength) * (CharacterCount - 1));  						using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GROUP_LIST' maxLen))  						{  							if ((chr = member.Character) == null)  								continue;    							packet.Write((byte)Flags);  							packet.Write(IsBattleGroup); //Is BG Group ?? : 0 == false' 1 == true;  							packet.Write(groupUnit.Id);  							packet.Write((byte)member.Flags);  							if (Flags.HasFlag(GroupFlags.LFD))		// since 3.3  							{  								packet.Write((byte)0);  								packet.Write(0u);  							}  							packet.Write(0x50000000FFFFFFFEul);  							packet.Write(0u);                        // since 3.3: Some kind of sequence id  							packet.Write(CharacterCount - 1);    							foreach (var memberSubGroup in m_subGroups)  							{  								foreach (var groupMember in memberSubGroup.Members)  								{  									if (member == groupMember)  										continue;    									packet.WriteCString(groupMember.Name);  									packet.Write(EntityId.GetPlayerId(groupMember.Id));    									if (groupMember.Character != null)  									{  										packet.Write((byte)CharacterStatus.ONLINE);  									}  									else  									{  										packet.Write((byte)CharacterStatus.OFFLINE);  									}    									packet.Write(memberSubGroup.Id);  									packet.Write((byte)groupMember.Flags);  									packet.Write((byte)0); // 3.3  								}  							}    							packet.Write(EntityId.GetPlayerId(Leader.Id));  							packet.Write((byte)LootMethod);    							if (MasterLooter != null)  							{  								packet.Write(EntityId.GetPlayerId(MasterLooter.Id).Full);  							}  							else  							{  								packet.Write(0L);  							}    							packet.Write((byte)LootThreshold);  							packet.Write((byte)DungeonDifficulty); // normal  							packet.Write((byte)0);    // since 3.3: Raid difficulty  							packet.Write((byte)0);    // 3.3' dynamic difficulty?    							chr.Client.Send(packet);  						}  					}  				}  			}
Magic Number,WCell.RealmServer.Groups,Group,C:\repos\WCell_WCell\Services\WCell.RealmServer\Groups\Group.cs,SendUpdate,The following statement contains a magic number: using (syncLock.EnterReadLock())  			{  				Character chr;    				foreach (var groupUnit in m_subGroups)  				{  					foreach (var member in groupUnit.Members)  					{  						var maxLen = 35 + ((11 + CharacterHandler.MaxCharNameLength) * (CharacterCount - 1));  						using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GROUP_LIST' maxLen))  						{  							if ((chr = member.Character) == null)  								continue;    							packet.Write((byte)Flags);  							packet.Write(IsBattleGroup); //Is BG Group ?? : 0 == false' 1 == true;  							packet.Write(groupUnit.Id);  							packet.Write((byte)member.Flags);  							if (Flags.HasFlag(GroupFlags.LFD))		// since 3.3  							{  								packet.Write((byte)0);  								packet.Write(0u);  							}  							packet.Write(0x50000000FFFFFFFEul);  							packet.Write(0u);                        // since 3.3: Some kind of sequence id  							packet.Write(CharacterCount - 1);    							foreach (var memberSubGroup in m_subGroups)  							{  								foreach (var groupMember in memberSubGroup.Members)  								{  									if (member == groupMember)  										continue;    									packet.WriteCString(groupMember.Name);  									packet.Write(EntityId.GetPlayerId(groupMember.Id));    									if (groupMember.Character != null)  									{  										packet.Write((byte)CharacterStatus.ONLINE);  									}  									else  									{  										packet.Write((byte)CharacterStatus.OFFLINE);  									}    									packet.Write(memberSubGroup.Id);  									packet.Write((byte)groupMember.Flags);  									packet.Write((byte)0); // 3.3  								}  							}    							packet.Write(EntityId.GetPlayerId(Leader.Id));  							packet.Write((byte)LootMethod);    							if (MasterLooter != null)  							{  								packet.Write(EntityId.GetPlayerId(MasterLooter.Id).Full);  							}  							else  							{  								packet.Write(0L);  							}    							packet.Write((byte)LootThreshold);  							packet.Write((byte)DungeonDifficulty); // normal  							packet.Write((byte)0);    // since 3.3: Raid difficulty  							packet.Write((byte)0);    // 3.3' dynamic difficulty?    							chr.Client.Send(packet);  						}  					}  				}  			}
Magic Number,WCell.RealmServer.Groups,Group,C:\repos\WCell_WCell\Services\WCell.RealmServer\Groups\Group.cs,SendEmptyUpdate,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GROUP_LIST))  			{  				//packet.ContentLength = 24;  				packet.Fill(0' 24);    				chr.Client.Send(packet);  			}
Magic Number,WCell.RealmServer.Groups,Group,C:\repos\WCell_WCell\Services\WCell.RealmServer\Groups\Group.cs,SendPing,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_MINIMAP_PING' 8 + 4 + 4))              {                  packet.Write(EntityId.GetPlayerId(pinger.Id));                  packet.WriteFloat(x);                  packet.WriteFloat(y);                    SendAll(packet' pinger);              }
Magic Number,WCell.RealmServer.Groups,Group,C:\repos\WCell_WCell\Services\WCell.RealmServer\Groups\Group.cs,SendPing,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_MINIMAP_PING' 8 + 4 + 4))              {                  packet.Write(EntityId.GetPlayerId(pinger.Id));                  packet.WriteFloat(x);                  packet.WriteFloat(y);                    SendAll(packet' pinger);              }
Magic Number,WCell.RealmServer.Groups,Group,C:\repos\WCell_WCell\Services\WCell.RealmServer\Groups\Group.cs,SendPing,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.MSG_MINIMAP_PING' 8 + 4 + 4))              {                  packet.Write(EntityId.GetPlayerId(pinger.Id));                  packet.WriteFloat(x);                  packet.WriteFloat(y);                    SendAll(packet' pinger);              }
Magic Number,WCell.RealmServer.Groups,Group,C:\repos\WCell_WCell\Services\WCell.RealmServer\Groups\Group.cs,DistributeGroupHonor,The following statement contains a magic number: ForeachCharacter((chr) =>  			{  				if (chr.IsInRange(new SimpleRange(0.0f' MaxKillRewardDistance)' earner))  				{  					chr.GiveHonorPoints(bonus);  					chr.KillsToday++;  					chr.LifetimeHonorableKills++;  					HonorHandler.SendPVPCredit(chr' bonus * 10' victim);  				}  			});
Magic Number,WCell.RealmServer.Groups,GroupMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Groups\GroupMgr.cs,GroupMgr,The following statement contains a magic number: OfflineChars = new SynchronizedDictionary<uint' GroupMember>(100);
Magic Number,WCell.RealmServer.Database,AccountDataRecord,C:\repos\WCell_WCell\Services\WCell.RealmServer\Database\AccountDataRecord.cs,InitializeNewAccount,The following statement contains a magic number: for (uint i = 7; i > 0; i--)              {                  newData.TimeStamps[i] = 0;              }
Magic Number,WCell.RealmServer.Database,CharacterRecord,C:\repos\WCell_WCell\Services\WCell.RealmServer\Database\CharacterRecord.cs,CharacterRecord,The following statement contains a magic number: ExploredZones = new byte[UpdateFieldMgr.ExplorationZoneFieldSize * 4];
Magic Number,WCell.RealmServer.Database,CharacterRecord,C:\repos\WCell_WCell\Services\WCell.RealmServer\Database\CharacterRecord.cs,SetupNewRecord,The following statement contains a magic number: TutorialFlags = new byte[32];
Magic Number,WCell.RealmServer.Database,CharacterRecord,C:\repos\WCell_WCell\Services\WCell.RealmServer\Database\CharacterRecord.cs,SetAliases,The following statement contains a magic number: var bytes = new List<byte>(100);
Magic Number,WCell.RealmServer.Database,RealmDBMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Database\RealmDBMgr.cs,Initialize,The following statement contains a magic number: if (!Initialized)  			{  				Initialized = true;  				DatabaseUtil.DBErrorHook = exception => CharacterRecord.GetCount() < 100;    				DatabaseUtil.DBType = RealmServerConfiguration.DatabaseType;  				DatabaseUtil.ConnectionString = RealmServerConfiguration.DBConnectionString;  				DatabaseUtil.DefaultCharset = DefaultCharset;    				var asm = typeof(RealmDBMgr).Assembly;    				try  				{  					if (!DatabaseUtil.InitAR(asm))  					{  						return false;  					}  				}  				catch (Exception e)  				{  					// repeat init  					OnDBError(e);  					try  					{  						if (!DatabaseUtil.InitAR(asm))  						{  							return false;  						}  					}  					catch (Exception e2)  					{  						LogUtil.ErrorException(e2' true' "Failed to initialize the Database.");  					}  				}  			}
Magic Number,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,CreateObjectChatMessage,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MESSAGECHAT' 31 + name.Length + 50);
Magic Number,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,CreateObjectChatMessage,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MESSAGECHAT' 31 + name.Length + 50);
Magic Number,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,ScrambleMessage,The following statement contains a magic number: Random rng = new Random(1132532542);
Magic Number,WCell.RealmServer.Chat,ChatMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatMgr.cs,CreateChatPacket,The following statement contains a magic number: var packet = new RealmPacketOut(RealmServerOpCode.SMSG_MESSAGECHAT' 23 + msg.Length);
Magic Number,WCell.RealmServer.Chat,EmoteRelationConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\EmoteDBC.cs,ConvertTo,The following statement contains a magic number: return (EmoteType)GetUInt32(rawData' 2);
Magic Number,WCell.RealmServer.Chat,ChatUtility,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatUtility.cs,Purify,The following statement contains a magic number: for (int i = 0; i < msg.Length; i++)  			{  				var c = msg[i];    				// space (chr code 32) is the start of normal characters in the ASCII table  				// 31 and lower are control character  				if (c < ' ')  				{  					// don't bother with this kind of cheating  					msg = "";  					break;  				}  				else if (c != '|')  				{  					if (escapeCount % 2 != 0)  					{  						// uneven amount of escape characters  						// msg = msg.Insert(i' "|");    						// don't bother with this kind of cheating  						msg = "";  						break;  					}  					escapeCount = 0;  				}  				else  				{  					if (escapeCount % 2 == 0)  					{  						var found = false;  						var match = AllowedControlRegex.Match(msg' i);  						while (match.Success)  						{  							found = true;  							i += match.Length;  							match = match.NextMatch();  						}    						if (!found)  						{  							escapeCount++;  						}  						else  						{  							escapeCount = 0;  						}  					}  					else  					{  						escapeCount++;  					}  				}  			}
Magic Number,WCell.RealmServer.Chat,ChatUtility,C:\repos\WCell_WCell\Services\WCell.RealmServer\Chat\ChatUtility.cs,Purify,The following statement contains a magic number: for (int i = 0; i < msg.Length; i++)  			{  				var c = msg[i];    				// space (chr code 32) is the start of normal characters in the ASCII table  				// 31 and lower are control character  				if (c < ' ')  				{  					// don't bother with this kind of cheating  					msg = "";  					break;  				}  				else if (c != '|')  				{  					if (escapeCount % 2 != 0)  					{  						// uneven amount of escape characters  						// msg = msg.Insert(i' "|");    						// don't bother with this kind of cheating  						msg = "";  						break;  					}  					escapeCount = 0;  				}  				else  				{  					if (escapeCount % 2 == 0)  					{  						var found = false;  						var match = AllowedControlRegex.Match(msg' i);  						while (match.Success)  						{  							found = true;  							i += match.Length;  							match = match.NextMatch();  						}    						if (!found)  						{  							escapeCount++;  						}  						else  						{  							escapeCount = 0;  						}  					}  					else  					{  						escapeCount++;  					}  				}  			}
Magic Number,WCell.RealmServer.Spells.Auras.Handlers,ModIncreaseHealthPercentHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Mod\ModIncreaseHealthPercent.cs,Apply,The following statement contains a magic number: health = ((Owner.MaxHealth * EffectValue) + 50) / 100;
Magic Number,WCell.RealmServer.Spells.Auras.Handlers,ModIncreaseHealthPercentHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Mod\ModIncreaseHealthPercent.cs,Apply,The following statement contains a magic number: health = ((Owner.MaxHealth * EffectValue) + 50) / 100;
Magic Number,WCell.RealmServer.Spells.Auras.Handlers,PeriodicDamageHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Periodic\PeriodicDamage.cs,Apply,The following statement contains a magic number: if (holder.IsAlive)  			{  				var value = EffectValue;  				if (m_aura.Spell.Mechanic == SpellMechanic.Bleeding)  				{  					var bonus = m_aura.Auras.GetBleedBonusPercent();  					value += ((value * bonus) + 50) / 100;  					m_aura.Owner.IncMechanicCount(SpellMechanic.Bleeding);  				}    				holder.DealSpellDamage(m_aura.CasterUnit' m_spellEffect' value);  			}
Magic Number,WCell.RealmServer.Spells.Auras.Handlers,PeriodicDamageHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Periodic\PeriodicDamage.cs,Apply,The following statement contains a magic number: if (holder.IsAlive)  			{  				var value = EffectValue;  				if (m_aura.Spell.Mechanic == SpellMechanic.Bleeding)  				{  					var bonus = m_aura.Auras.GetBleedBonusPercent();  					value += ((value * bonus) + 50) / 100;  					m_aura.Owner.IncMechanicCount(SpellMechanic.Bleeding);  				}    				holder.DealSpellDamage(m_aura.CasterUnit' m_spellEffect' value);  			}
Magic Number,WCell.RealmServer.Spells.Auras.Handlers,PeriodicDamagePercentHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Periodic\PeriodicDamagePercent.cs,Apply,The following statement contains a magic number: if (holder.IsAlive)  			{  				var value = (Owner.MaxHealth * EffectValue + 50) / 100;  				if (m_aura.Spell.Mechanic == SpellMechanic.Bleeding)  				{  					var bonus = m_aura.Auras.GetBleedBonusPercent();  					value += ((value * bonus) + 50) / 100;  				}  				holder.DealSpellDamage(m_aura.CasterUnit' m_spellEffect' value' false);  			}
Magic Number,WCell.RealmServer.Spells.Auras.Handlers,PeriodicDamagePercentHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Periodic\PeriodicDamagePercent.cs,Apply,The following statement contains a magic number: if (holder.IsAlive)  			{  				var value = (Owner.MaxHealth * EffectValue + 50) / 100;  				if (m_aura.Spell.Mechanic == SpellMechanic.Bleeding)  				{  					var bonus = m_aura.Auras.GetBleedBonusPercent();  					value += ((value * bonus) + 50) / 100;  				}  				holder.DealSpellDamage(m_aura.CasterUnit' m_spellEffect' value' false);  			}
Magic Number,WCell.RealmServer.Spells.Auras.Handlers,PeriodicDamagePercentHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Periodic\PeriodicDamagePercent.cs,Apply,The following statement contains a magic number: if (holder.IsAlive)  			{  				var value = (Owner.MaxHealth * EffectValue + 50) / 100;  				if (m_aura.Spell.Mechanic == SpellMechanic.Bleeding)  				{  					var bonus = m_aura.Auras.GetBleedBonusPercent();  					value += ((value * bonus) + 50) / 100;  				}  				holder.DealSpellDamage(m_aura.CasterUnit' m_spellEffect' value' false);  			}
Magic Number,WCell.RealmServer.Spells.Auras.Handlers,PeriodicDamagePercentHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Periodic\PeriodicDamagePercent.cs,Apply,The following statement contains a magic number: if (holder.IsAlive)  			{  				var value = (Owner.MaxHealth * EffectValue + 50) / 100;  				if (m_aura.Spell.Mechanic == SpellMechanic.Bleeding)  				{  					var bonus = m_aura.Auras.GetBleedBonusPercent();  					value += ((value * bonus) + 50) / 100;  				}  				holder.DealSpellDamage(m_aura.CasterUnit' m_spellEffect' value' false);  			}
Magic Number,WCell.RealmServer.Spells.Auras.Handlers,PeriodicManaLeechHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Periodic\PeriodicManaLeech.cs,Apply,The following statement contains a magic number: if (m_aura.Spell.HasEffectWith((effect) => effect.AuraType == AuraType.Dummy))  			{  				// ugly fix around  				val = target.BasePower * val / 100;  			}
Magic Number,WCell.RealmServer.Spells.Auras.Handlers,RegenPercentOfTotalManaHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Periodic\RegenPercentOfTotalMana.cs,Apply,The following statement contains a magic number: Owner.Energize((EffectValue * Owner.MaxPower + 50) / 100' m_aura.CasterUnit' m_spellEffect);
Magic Number,WCell.RealmServer.Spells.Auras.Handlers,RegenPercentOfTotalManaHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\Periodic\RegenPercentOfTotalMana.cs,Apply,The following statement contains a magic number: Owner.Energize((EffectValue * Owner.MaxPower + 50) / 100' m_aura.CasterUnit' m_spellEffect);
Magic Number,WCell.RealmServer.Stats,RealmStatsExtended,C:\repos\WCell_WCell\Services\WCell.RealmServer\Stats\RealmStatsExtended.cs,ConsumeStatistics,The following statement contains a magic number: foreach (var packetCount in packetCounts)  			{  				var pktInfo = new ExtendedPacketInfo  				              	{  					OpCode = (RealmServerOpCode)packetCount.Key'  					PacketCount = packetCount.Value.Count'  					TotalPacketSize = packetCount.Value.Sum()'  					AveragePacketSize = (int)packetCount.Value.Average()'  					StartTime = DateTime.Now.Subtract(TimeSpan.FromMinutes(5))'  					EndTime = DateTime.Now  				};    				List<int> packetSizes = packetCount.Value;    				int stdDev = GetStandardDeviation(packetSizes);  				pktInfo.StandardDeviation = stdDev;    				// push to le db.  			}
Magic Number,WCell.RealmServer.UpdateFields,UpdateMask,C:\repos\WCell_WCell\Services\WCell.RealmServer\UpdateFields\UpdateMask.cs,UpdateMask,The following statement contains a magic number: m_maxBlockCount = (highestField >> 5) + 1;
Magic Number,WCell.RealmServer.UpdateFields,UpdateMask,C:\repos\WCell_WCell\Services\WCell.RealmServer\UpdateFields\UpdateMask.cs,WriteTo,The following statement contains a magic number: var valueCount = (m_highestIndex >> 5) + 1;
Magic Number,WCell.RealmServer.UpdateFields,UpdateMask,C:\repos\WCell_WCell\Services\WCell.RealmServer\UpdateFields\UpdateMask.cs,UnsetBit,The following statement contains a magic number: m_blocks[index >> 5] &= ~(uint)(1 << (index & 31));
Magic Number,WCell.RealmServer.UpdateFields,UpdateMask,C:\repos\WCell_WCell\Services\WCell.RealmServer\UpdateFields\UpdateMask.cs,UnsetBit,The following statement contains a magic number: m_blocks[index >> 5] &= ~(uint)(1 << (index & 31));
Magic Number,WCell.RealmServer.UpdateFields,UpdateMask,C:\repos\WCell_WCell\Services\WCell.RealmServer\UpdateFields\UpdateMask.cs,SetBit,The following statement contains a magic number: m_blocks[index >> 5] |= (uint)(1 << (index & 31));
Magic Number,WCell.RealmServer.UpdateFields,UpdateMask,C:\repos\WCell_WCell\Services\WCell.RealmServer\UpdateFields\UpdateMask.cs,SetBit,The following statement contains a magic number: m_blocks[index >> 5] |= (uint)(1 << (index & 31));
Magic Number,WCell.RealmServer.UpdateFields,UpdateMask,C:\repos\WCell_WCell\Services\WCell.RealmServer\UpdateFields\UpdateMask.cs,GetBit,The following statement contains a magic number: return (m_blocks[index >> 5] & (uint)(1 << (index & 31))) != 0;
Magic Number,WCell.RealmServer.UpdateFields,UpdateMask,C:\repos\WCell_WCell\Services\WCell.RealmServer\UpdateFields\UpdateMask.cs,GetBit,The following statement contains a magic number: return (m_blocks[index >> 5] & (uint)(1 << (index & 31))) != 0;
Magic Number,WCell.RealmServer.UpdateFields,UpdatePacket,C:\repos\WCell_WCell\Services\WCell.RealmServer\UpdateFields\UpdatePacket.cs,Reset,The following statement contains a magic number: Position = 2;
Magic Number,WCell.RealmServer.UpdateFields,UpdatePacket,C:\repos\WCell_WCell\Services\WCell.RealmServer\UpdateFields\UpdatePacket.cs,Reset,The following statement contains a magic number: Zero(5);
Magic Number,WCell.RealmServer.UpdateFields,UpdatePacket,C:\repos\WCell_WCell\Services\WCell.RealmServer\UpdateFields\UpdatePacket.cs,SendPacket,The following statement contains a magic number: outputBuffer.Buffer.Array.SetUShortBE(offset' (ushort)(totalLength - 2));
Magic Number,WCell.RealmServer.UpdateFields,UpdatePacket,C:\repos\WCell_WCell\Services\WCell.RealmServer\UpdateFields\UpdatePacket.cs,SendPacket,The following statement contains a magic number: outputBuffer.Buffer.Array.SetBytes(offset + 2'  				BitConverter.GetBytes((ushort)RealmServerOpCode.SMSG_COMPRESSED_UPDATE_OBJECT));
Magic Number,WCell.RealmServer.UpdateFields,CompoundType,C:\repos\WCell_WCell\Services\WCell.RealmServer\UpdateFields\CompoundType.cs,SetByte,The following statement contains a magic number: UInt32 &= ~(uint)(0xFF << (index * 8));
Magic Number,WCell.RealmServer.UpdateFields,CompoundType,C:\repos\WCell_WCell\Services\WCell.RealmServer\UpdateFields\CompoundType.cs,SetByte,The following statement contains a magic number: UInt32 |= (uint)(value << (index * 8));
Magic Number,WCell.RealmServer.UpdateFields,CompoundType,C:\repos\WCell_WCell\Services\WCell.RealmServer\UpdateFields\CompoundType.cs,GetByte,The following statement contains a magic number: return (byte)(UInt32 >> (index * 8));
Magic Number,WCell.RealmServer.AI.Actions,AITemporaryIdleAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\AI\Actions\AITemporaryIdleAction.cs,Update,The following statement contains a magic number: if (millis >= m_Millis)  			{  				if (m_Callback != null)  				{  					m_Callback();  					m_Callback = null;  				}  			}  			else  			{  				var diff = m_Millis - millis;  				if (diff > 10000)  				{  					m_priority = UpdatePriority.Background;  				}  				else  				{  					m_priority = UpdatePriority.Active;  				}  			}
Magic Number,WCell.RealmServer.AI.Actions.Combat,AIAttackAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\AI\Actions\Combat\AIAttackAction.cs,Start,The following statement contains a magic number: if (m_target != null)  			{  				maxDist = m_owner.GetBaseAttackRange(m_target) - 1;  				if (maxDist < 0.5f)  				{  					maxDist = 0.5f;  				}  				desiredDist = maxDist / 2;  			}
Magic Number,WCell.RealmServer.AI,ThreatCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\AI\ThreatCollection.cs,ThreatCollection,The following statement contains a magic number: AggressorPairs = new List<AggressorPair>(5);
Magic Number,WCell.RealmServer.AI,ThreatCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\AI\ThreatCollection.cs,IsNewHighestThreat,The following statement contains a magic number: return threat > ((m_highestThreat * RequiredHighestThreatPct) + 50) / 100;
Magic Number,WCell.RealmServer.AI,ThreatCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\AI\ThreatCollection.cs,IsNewHighestThreat,The following statement contains a magic number: return threat > ((m_highestThreat * RequiredHighestThreatPct) + 50) / 100;
Magic Number,WCell.RealmServer.AI.Groups,AIGroup,C:\repos\WCell_WCell\Services\WCell.RealmServer\AI\Groups\AIGroup.cs,Add,The following statement contains a magic number: if (Leader == null)  			{  				m_Leader = npc;  			}  			else if (npc != Leader)  			{  				var mainTarget = Leader.ThreatCollection.CurrentAggressor;  				if (mainTarget != null)  				{  					// double threat of leader's main target for the new NPC  					npc.ThreatCollection[mainTarget] = 2 * npc.ThreatCollection[mainTarget] + 1;    					// generate threat on all other enemies' too  					foreach (var hostile in m_Leader.ThreatCollection)  					{  						npc.ThreatCollection.AddNewIfNotExisted(hostile.Key);  					}  				}  			}
Magic Number,WCell.RealmServer.AreaTriggers,AreaTrigger,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\AreaTrigger.cs,IsInArea,The following statement contains a magic number: if (Radius > 0) // Sphere              {                  var distSq = chr.GetDistanceSq(Position);                    if (distSq > MaxDistSq)                  {                  	LogManager.GetCurrentClassLogger().Warn("Character {0} tried to trigger {1} while being {2} yards away."'  						chr' this' Math.Sqrt(distSq));                      return false;                  }              }              else // Box              {                  // 2PI = 360 degrees. Keep in mind that in-game orientation is counter-clockwise.                  var rotation = 2 * MathUtil.PI - BoxYaw;                  var sinval = Math.Sin(rotation);                  var cosval = Math.Cos(rotation);                    var playerBoxDistX = chr.Position.X - Position.X;                  var playerBoxDistY = chr.Position.Y - Position.Y;                    var rotPlayerX = Position.X + playerBoxDistX * cosval - playerBoxDistY * sinval;                  var rotPlayerY = Position.Y + playerBoxDistY * cosval + playerBoxDistX * sinval;                    // Box edges are parallel to coordinate axis' so we can treat every dimension independently.                  var dx = rotPlayerX - Position.X;                  var dy = rotPlayerY - Position.Y;                  var dz = chr.Position.Z - Position.Z;    				if ((Math.Abs(dx) > BoxLength / 2 + tollerance) ||  					(Math.Abs(dy) > BoxWidth / 2 + tollerance) ||  					(Math.Abs(dz) > BoxHeight / 2 + tollerance))                  {                      return false;                  }              }
Magic Number,WCell.RealmServer.AreaTriggers,AreaTrigger,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\AreaTrigger.cs,IsInArea,The following statement contains a magic number: if (Radius > 0) // Sphere              {                  var distSq = chr.GetDistanceSq(Position);                    if (distSq > MaxDistSq)                  {                  	LogManager.GetCurrentClassLogger().Warn("Character {0} tried to trigger {1} while being {2} yards away."'  						chr' this' Math.Sqrt(distSq));                      return false;                  }              }              else // Box              {                  // 2PI = 360 degrees. Keep in mind that in-game orientation is counter-clockwise.                  var rotation = 2 * MathUtil.PI - BoxYaw;                  var sinval = Math.Sin(rotation);                  var cosval = Math.Cos(rotation);                    var playerBoxDistX = chr.Position.X - Position.X;                  var playerBoxDistY = chr.Position.Y - Position.Y;                    var rotPlayerX = Position.X + playerBoxDistX * cosval - playerBoxDistY * sinval;                  var rotPlayerY = Position.Y + playerBoxDistY * cosval + playerBoxDistX * sinval;                    // Box edges are parallel to coordinate axis' so we can treat every dimension independently.                  var dx = rotPlayerX - Position.X;                  var dy = rotPlayerY - Position.Y;                  var dz = chr.Position.Z - Position.Z;    				if ((Math.Abs(dx) > BoxLength / 2 + tollerance) ||  					(Math.Abs(dy) > BoxWidth / 2 + tollerance) ||  					(Math.Abs(dz) > BoxHeight / 2 + tollerance))                  {                      return false;                  }              }
Magic Number,WCell.RealmServer.AreaTriggers,AreaTrigger,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\AreaTrigger.cs,IsInArea,The following statement contains a magic number: if (Radius > 0) // Sphere              {                  var distSq = chr.GetDistanceSq(Position);                    if (distSq > MaxDistSq)                  {                  	LogManager.GetCurrentClassLogger().Warn("Character {0} tried to trigger {1} while being {2} yards away."'  						chr' this' Math.Sqrt(distSq));                      return false;                  }              }              else // Box              {                  // 2PI = 360 degrees. Keep in mind that in-game orientation is counter-clockwise.                  var rotation = 2 * MathUtil.PI - BoxYaw;                  var sinval = Math.Sin(rotation);                  var cosval = Math.Cos(rotation);                    var playerBoxDistX = chr.Position.X - Position.X;                  var playerBoxDistY = chr.Position.Y - Position.Y;                    var rotPlayerX = Position.X + playerBoxDistX * cosval - playerBoxDistY * sinval;                  var rotPlayerY = Position.Y + playerBoxDistY * cosval + playerBoxDistX * sinval;                    // Box edges are parallel to coordinate axis' so we can treat every dimension independently.                  var dx = rotPlayerX - Position.X;                  var dy = rotPlayerY - Position.Y;                  var dz = chr.Position.Z - Position.Z;    				if ((Math.Abs(dx) > BoxLength / 2 + tollerance) ||  					(Math.Abs(dy) > BoxWidth / 2 + tollerance) ||  					(Math.Abs(dz) > BoxHeight / 2 + tollerance))                  {                      return false;                  }              }
Magic Number,WCell.RealmServer.AreaTriggers,AreaTrigger,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\AreaTrigger.cs,IsInArea,The following statement contains a magic number: if (Radius > 0) // Sphere              {                  var distSq = chr.GetDistanceSq(Position);                    if (distSq > MaxDistSq)                  {                  	LogManager.GetCurrentClassLogger().Warn("Character {0} tried to trigger {1} while being {2} yards away."'  						chr' this' Math.Sqrt(distSq));                      return false;                  }              }              else // Box              {                  // 2PI = 360 degrees. Keep in mind that in-game orientation is counter-clockwise.                  var rotation = 2 * MathUtil.PI - BoxYaw;                  var sinval = Math.Sin(rotation);                  var cosval = Math.Cos(rotation);                    var playerBoxDistX = chr.Position.X - Position.X;                  var playerBoxDistY = chr.Position.Y - Position.Y;                    var rotPlayerX = Position.X + playerBoxDistX * cosval - playerBoxDistY * sinval;                  var rotPlayerY = Position.Y + playerBoxDistY * cosval + playerBoxDistX * sinval;                    // Box edges are parallel to coordinate axis' so we can treat every dimension independently.                  var dx = rotPlayerX - Position.X;                  var dy = rotPlayerY - Position.Y;                  var dz = chr.Position.Z - Position.Z;    				if ((Math.Abs(dx) > BoxLength / 2 + tollerance) ||  					(Math.Abs(dy) > BoxWidth / 2 + tollerance) ||  					(Math.Abs(dz) > BoxHeight / 2 + tollerance))                  {                      return false;                  }              }
Magic Number,WCell.RealmServer.AreaTriggers,ATConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\AreaTriggers\AreaTrigger.IO.cs,ConvertTo,The following statement contains a magic number: var trigger = new AreaTrigger((uint)(id = rawData.GetInt32(0))'  				(MapId)rawData.GetUInt32(1)'  				rawData.GetFloat(2)'  				rawData.GetFloat(3)'  				rawData.GetFloat(4)'  				rawData.GetFloat(5)'                  rawData.GetFloat(6)'                  rawData.GetFloat(7)'                  rawData.GetFloat(8)'                  rawData.GetFloat(9));
Magic Number,WCell.RealmServer.AreaTriggers,ATConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\AreaTriggers\AreaTrigger.IO.cs,ConvertTo,The following statement contains a magic number: var trigger = new AreaTrigger((uint)(id = rawData.GetInt32(0))'  				(MapId)rawData.GetUInt32(1)'  				rawData.GetFloat(2)'  				rawData.GetFloat(3)'  				rawData.GetFloat(4)'  				rawData.GetFloat(5)'                  rawData.GetFloat(6)'                  rawData.GetFloat(7)'                  rawData.GetFloat(8)'                  rawData.GetFloat(9));
Magic Number,WCell.RealmServer.AreaTriggers,ATConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\AreaTriggers\AreaTrigger.IO.cs,ConvertTo,The following statement contains a magic number: var trigger = new AreaTrigger((uint)(id = rawData.GetInt32(0))'  				(MapId)rawData.GetUInt32(1)'  				rawData.GetFloat(2)'  				rawData.GetFloat(3)'  				rawData.GetFloat(4)'  				rawData.GetFloat(5)'                  rawData.GetFloat(6)'                  rawData.GetFloat(7)'                  rawData.GetFloat(8)'                  rawData.GetFloat(9));
Magic Number,WCell.RealmServer.AreaTriggers,ATConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\AreaTriggers\AreaTrigger.IO.cs,ConvertTo,The following statement contains a magic number: var trigger = new AreaTrigger((uint)(id = rawData.GetInt32(0))'  				(MapId)rawData.GetUInt32(1)'  				rawData.GetFloat(2)'  				rawData.GetFloat(3)'  				rawData.GetFloat(4)'  				rawData.GetFloat(5)'                  rawData.GetFloat(6)'                  rawData.GetFloat(7)'                  rawData.GetFloat(8)'                  rawData.GetFloat(9));
Magic Number,WCell.RealmServer.AreaTriggers,ATConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\AreaTriggers\AreaTrigger.IO.cs,ConvertTo,The following statement contains a magic number: var trigger = new AreaTrigger((uint)(id = rawData.GetInt32(0))'  				(MapId)rawData.GetUInt32(1)'  				rawData.GetFloat(2)'  				rawData.GetFloat(3)'  				rawData.GetFloat(4)'  				rawData.GetFloat(5)'                  rawData.GetFloat(6)'                  rawData.GetFloat(7)'                  rawData.GetFloat(8)'                  rawData.GetFloat(9));
Magic Number,WCell.RealmServer.AreaTriggers,ATConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\AreaTriggers\AreaTrigger.IO.cs,ConvertTo,The following statement contains a magic number: var trigger = new AreaTrigger((uint)(id = rawData.GetInt32(0))'  				(MapId)rawData.GetUInt32(1)'  				rawData.GetFloat(2)'  				rawData.GetFloat(3)'  				rawData.GetFloat(4)'  				rawData.GetFloat(5)'                  rawData.GetFloat(6)'                  rawData.GetFloat(7)'                  rawData.GetFloat(8)'                  rawData.GetFloat(9));
Magic Number,WCell.RealmServer.AreaTriggers,ATConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\AreaTriggers\AreaTrigger.IO.cs,ConvertTo,The following statement contains a magic number: var trigger = new AreaTrigger((uint)(id = rawData.GetInt32(0))'  				(MapId)rawData.GetUInt32(1)'  				rawData.GetFloat(2)'  				rawData.GetFloat(3)'  				rawData.GetFloat(4)'  				rawData.GetFloat(5)'                  rawData.GetFloat(6)'                  rawData.GetFloat(7)'                  rawData.GetFloat(8)'                  rawData.GetFloat(9));
Magic Number,WCell.RealmServer.AreaTriggers,ATConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\AreaTriggers\AreaTrigger.IO.cs,ConvertTo,The following statement contains a magic number: var trigger = new AreaTrigger((uint)(id = rawData.GetInt32(0))'  				(MapId)rawData.GetUInt32(1)'  				rawData.GetFloat(2)'  				rawData.GetFloat(3)'  				rawData.GetFloat(4)'  				rawData.GetFloat(5)'                  rawData.GetFloat(6)'                  rawData.GetFloat(7)'                  rawData.GetFloat(8)'                  rawData.GetFloat(9));
Magic Number,WCell.RealmServer.GameObjects,GOPortalEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\GOPortalEntry.cs,GOPortalEntry,The following statement contains a magic number: DisplayId = 4396;
Magic Number,WCell.RealmServer.GameObjects,GameObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GameObjectHandler.cs,SendCustomAnim,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GAMEOBJECT_CUSTOM_ANIM' 12))  			{  				packet.Write(EntityId);  				packet.Write(anim);  				SendPacketToArea(packet);  			}
Magic Number,WCell.RealmServer.GameObjects,GameObject,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GameObjectHandler.cs,SendDespawn,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GAMEOBJECT_DESPAWN_ANIM' 8))  			{  				packet.Write(EntityId);    				SendPacketToArea(packet);  			}
Magic Number,WCell.RealmServer.GameObjects,GOMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GameObjectHandler.cs,SendGameObjectInfo,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GAMEOBJECT_QUERY_RESPONSE'                                                     13 + 6 + name.Length + (24 * 4)))              {                  packet.Write(entry.Id);                  packet.Write((uint)entry.Type);                  packet.Write(entry.DisplayId);                  packet.Write(name);                  packet.Write((byte)0); // Name2                  packet.Write((byte)0); // Name3                  packet.Write((byte)0); // Name4                  packet.Write((byte)0); // string IconName                  packet.Write((byte)0); // string. Casting bar text                  packet.Write((byte)0); // string                    int i = 0;                  for (; i < entry.Fields.Length; i++)                  {                      packet.Write(entry.Fields[i]);                  }                    // must be 24 fields                  while (i < GOConstants.EntryFieldCount)                  {                      packet.Write(0);                      i++;                  }                    packet.Write(entry.Scale); // size                    for (i = 0; i < 4; i++)                  {                      packet.Write(0); // new 3.1                  }                    client.Send(packet);              }
Magic Number,WCell.RealmServer.GameObjects,GOMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GameObjectHandler.cs,SendGameObjectInfo,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GAMEOBJECT_QUERY_RESPONSE'                                                     13 + 6 + name.Length + (24 * 4)))              {                  packet.Write(entry.Id);                  packet.Write((uint)entry.Type);                  packet.Write(entry.DisplayId);                  packet.Write(name);                  packet.Write((byte)0); // Name2                  packet.Write((byte)0); // Name3                  packet.Write((byte)0); // Name4                  packet.Write((byte)0); // string IconName                  packet.Write((byte)0); // string. Casting bar text                  packet.Write((byte)0); // string                    int i = 0;                  for (; i < entry.Fields.Length; i++)                  {                      packet.Write(entry.Fields[i]);                  }                    // must be 24 fields                  while (i < GOConstants.EntryFieldCount)                  {                      packet.Write(0);                      i++;                  }                    packet.Write(entry.Scale); // size                    for (i = 0; i < 4; i++)                  {                      packet.Write(0); // new 3.1                  }                    client.Send(packet);              }
Magic Number,WCell.RealmServer.GameObjects,GOMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GameObjectHandler.cs,SendGameObjectInfo,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GAMEOBJECT_QUERY_RESPONSE'                                                     13 + 6 + name.Length + (24 * 4)))              {                  packet.Write(entry.Id);                  packet.Write((uint)entry.Type);                  packet.Write(entry.DisplayId);                  packet.Write(name);                  packet.Write((byte)0); // Name2                  packet.Write((byte)0); // Name3                  packet.Write((byte)0); // Name4                  packet.Write((byte)0); // string IconName                  packet.Write((byte)0); // string. Casting bar text                  packet.Write((byte)0); // string                    int i = 0;                  for (; i < entry.Fields.Length; i++)                  {                      packet.Write(entry.Fields[i]);                  }                    // must be 24 fields                  while (i < GOConstants.EntryFieldCount)                  {                      packet.Write(0);                      i++;                  }                    packet.Write(entry.Scale); // size                    for (i = 0; i < 4; i++)                  {                      packet.Write(0); // new 3.1                  }                    client.Send(packet);              }
Magic Number,WCell.RealmServer.GameObjects,GOMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GameObjectHandler.cs,SendGameObjectInfo,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GAMEOBJECT_QUERY_RESPONSE'                                                     13 + 6 + name.Length + (24 * 4)))              {                  packet.Write(entry.Id);                  packet.Write((uint)entry.Type);                  packet.Write(entry.DisplayId);                  packet.Write(name);                  packet.Write((byte)0); // Name2                  packet.Write((byte)0); // Name3                  packet.Write((byte)0); // Name4                  packet.Write((byte)0); // string IconName                  packet.Write((byte)0); // string. Casting bar text                  packet.Write((byte)0); // string                    int i = 0;                  for (; i < entry.Fields.Length; i++)                  {                      packet.Write(entry.Fields[i]);                  }                    // must be 24 fields                  while (i < GOConstants.EntryFieldCount)                  {                      packet.Write(0);                      i++;                  }                    packet.Write(entry.Scale); // size                    for (i = 0; i < 4; i++)                  {                      packet.Write(0); // new 3.1                  }                    client.Send(packet);              }
Magic Number,WCell.RealmServer.GameObjects,GOMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\GameObjectHandler.cs,SendGameObjectInfo,The following statement contains a magic number: using (var packet = new RealmPacketOut(RealmServerOpCode.SMSG_GAMEOBJECT_QUERY_RESPONSE'                                                     13 + 6 + name.Length + (24 * 4)))              {                  packet.Write(entry.Id);                  packet.Write((uint)entry.Type);                  packet.Write(entry.DisplayId);                  packet.Write(name);                  packet.Write((byte)0); // Name2                  packet.Write((byte)0); // Name3                  packet.Write((byte)0); // Name4                  packet.Write((byte)0); // string IconName                  packet.Write((byte)0); // string. Casting bar text                  packet.Write((byte)0); // string                    int i = 0;                  for (; i < entry.Fields.Length; i++)                  {                      packet.Write(entry.Fields[i]);                  }                    // must be 24 fields                  while (i < GOConstants.EntryFieldCount)                  {                      packet.Write(0);                      i++;                  }                    packet.Write(entry.Scale); // size                    for (i = 0; i < 4; i++)                  {                      packet.Write(0); // new 3.1                  }                    client.Send(packet);              }
Magic Number,WCell.RealmServer.GameObjects.Handlers,DoorHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\Handlers\MiscHandlers.cs,Use,The following statement contains a magic number: m_go.AnimationProgress = m_go.AnimationProgress == 100 ? (byte)0 : (byte)100;
Magic Number,WCell.RealmServer.GameObjects.Handlers,DoorHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\Handlers\MiscHandlers.cs,Use,The following statement contains a magic number: m_go.AnimationProgress = m_go.AnimationProgress == 100 ? (byte)0 : (byte)100;
Magic Number,WCell.RealmServer.Looting,GOLootItemEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootItemEntry.cs,GetAllDataHolders,The following statement contains a magic number: var all = new List<GOLootItemEntry>(20000);
Magic Number,WCell.RealmServer.Looting,ItemLootItemEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootItemEntry.cs,GetAllDataHolders,The following statement contains a magic number: var all = new List<ItemLootItemEntry>(20000);
Magic Number,WCell.RealmServer.Looting,NPCLootItemEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootItemEntry.cs,GetAllDataHolders,The following statement contains a magic number: var all = new List<NPCLootItemEntry>(500000);
Magic Number,WCell.RealmServer.Looting,FishingLootItemEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootItemEntry.cs,GetAllDataHolders,The following statement contains a magic number: var all = new List<FishingLootItemEntry>(400);
Magic Number,WCell.RealmServer.Looting,MillingLootItemEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootItemEntry.cs,GetAllDataHolders,The following statement contains a magic number: var all = new List<MillingLootItemEntry>(10000);
Magic Number,WCell.RealmServer.Looting,ProspectingLootItemEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootItemEntry.cs,GetAllDataHolders,The following statement contains a magic number: var all = new List<ProspectingLootItemEntry>(10000);
Magic Number,WCell.RealmServer.Looting,PickPocketLootItemEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootItemEntry.cs,GetAllDataHolders,The following statement contains a magic number: var all = new List<PickPocketLootItemEntry>(10000);
Magic Number,WCell.RealmServer.Looting,SkinningLootItemEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootItemEntry.cs,GetAllDataHolders,The following statement contains a magic number: var all = new List<SkinningLootItemEntry>(10000);
Magic Number,WCell.RealmServer.Looting,DisenchantingLootItemEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootItemEntry.cs,GetAllDataHolders,The following statement contains a magic number: var all = new List<DisenchantingLootItemEntry>(10000);
Magic Number,WCell.RealmServer.Looting,ReferenceLootItemEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootItemEntry.cs,GetAllDataHolders,The following statement contains a magic number: var all = new List<ReferenceLootItemEntry>(10000);
Magic Number,WCell.RealmServer.Looting,LootMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootMgr.cs,LootMgr,The following statement contains a magic number: LootEntries[(int)LootEntryType.Disenchanting] = new ResolvedLootItemList[2000];
Magic Number,WCell.RealmServer.Looting,LootMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootMgr.cs,LootMgr,The following statement contains a magic number: LootEntries[(int)LootEntryType.Fishing] = new ResolvedLootItemList[2000];
Magic Number,WCell.RealmServer.Looting,LootMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootMgr.cs,LootMgr,The following statement contains a magic number: LootEntries[(int)LootEntryType.GameObject] = new ResolvedLootItemList[5000];
Magic Number,WCell.RealmServer.Looting,LootMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootMgr.cs,LootMgr,The following statement contains a magic number: LootEntries[(int)LootEntryType.Item] = new ResolvedLootItemList[5000];
Magic Number,WCell.RealmServer.Looting,LootMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootMgr.cs,LootMgr,The following statement contains a magic number: LootEntries[(int)LootEntryType.NPCCorpse] = new ResolvedLootItemList[330000];
Magic Number,WCell.RealmServer.Looting,LootMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootMgr.cs,LootMgr,The following statement contains a magic number: LootEntries[(int)LootEntryType.PickPocketing] = new ResolvedLootItemList[10000];
Magic Number,WCell.RealmServer.Looting,LootMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootMgr.cs,LootMgr,The following statement contains a magic number: LootEntries[(int)LootEntryType.Prospecting] = new ResolvedLootItemList[20];
Magic Number,WCell.RealmServer.Looting,LootMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootMgr.cs,LootMgr,The following statement contains a magic number: LootEntries[(int)LootEntryType.Skinning] = new ResolvedLootItemList[400];
Magic Number,WCell.RealmServer.Looting,LootMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootMgr.cs,LootMgr,The following statement contains a magic number: LootEntries[(int)LootEntryType.Milling] = new ResolvedLootItemList[400];
Magic Number,WCell.RealmServer.Looting,LootMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootMgr.cs,LootMgr,The following statement contains a magic number: LootEntries[(int)LootEntryType.Reference] = new ResolvedLootItemList[10000];
Magic Number,WCell.RealmServer.Looting,LootMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootMgr.cs,LookupRef,The following statement contains a magic number: if (referencedEntries != null)  			{  				if (referencedEntries.ResolveStatus < 1)  				{  					// first step  					referencedEntries.ResolveStatus = 1;  					foreach (var refEntry in referencedEntries)  					{  						if (refEntry is LootItemEntry)  						{  							var itemEntry = (LootItemEntry)refEntry;  							if (itemEntry.ReferencedEntryId > 0)  							{  								LookupRef(list' itemEntry);  								continue;  							}  						}  						AddRef(list' refEntry);  					}  					referencedEntries.ResolveStatus = 2;  				}  				else if (list.ResolveStatus == 1)  				{  					// list is already being resolved  					LogManager.GetCurrentClassLogger().Warn("Infinite loop in Loot references detected in: " + entry);  				}  				else  				{  					// second step  					foreach (var refEntry in referencedEntries)  					{  						AddRef(list' refEntry);  					}  				}  			}
Magic Number,WCell.RealmServer.Looting,LootMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Looting\LootMgr.cs,CreateLootItems,The following statement contains a magic number: foreach (var entry in entries)  			{  				var chance = entry.DropChance * LootItemDropFactor;  				if ((100*Utility.RandomFloat()) >= chance) continue;    				var template = entry.ItemTemplate;  				if (template == null)  				{  					// weird  					continue;  				}    				if (!looters.Any(looter => template.CheckLootConstraints(looter.Owner)))  				{  					continue;  				}    				items[i] = new LootItem(template'  				                        Utility.Random(entry.MinAmount' entry.MaxAmount)'  				                        (uint)i'  				                        template.RandomPropertiesId);  				i++;    				if (i == MaxLootCount)  				{  					break;  				}  			}
Magic Number,WCell.RealmServer.Guilds,GuildBank,C:\repos\WCell_WCell\Services\WCell.RealmServer\Guilds\GuildBank.cs,SetBankTabText,The following statement contains a magic number: tab.Text = newText.Length < 501 ? newText : newText.Substring(0' 500);
Magic Number,WCell.RealmServer.Guilds,GuildBank,C:\repos\WCell_WCell\Services\WCell.RealmServer\Guilds\GuildBank.cs,SetBankTabText,The following statement contains a magic number: tab.Text = newText.Length < 501 ? newText : newText.Substring(0' 500);
Magic Number,WCell.RealmServer.Guilds,GuildMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Guilds\GuildMgr.cs,IsValidGuildName,The following statement contains a magic number: if (name.Length < 3 && name.Length > MaxGuildNameLength || name.Contains(" "))  			{  				return false;  			}
Magic Number,WCell.RealmServer.GameObjects.GOEntries,GOCustomAreaEffectEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\GOEntries\GOCustomEntry.cs,GOCustomAreaEffectEntry,The following statement contains a magic number: Radius = 5;
Magic Number,WCell.RealmServer.GameObjects.GOEntries,GOCustomAreaEffectEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\GOEntries\GOCustomEntry.cs,GOCustomAreaEffectEntry,The following statement contains a magic number: UpdateDelayMillis = 500;
Magic Number,WCell.RealmServer.GameObjects.GOEntries,GOButtonEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\GOEntries\GOButtonEntry.cs,InitEntry,The following statement contains a magic number: LinkedTrapId = (uint) Fields[3];
Magic Number,WCell.RealmServer.GameObjects.GOEntries,GOButtonEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\GOEntries\GOButtonEntry.cs,InitEntry,The following statement contains a magic number: LosOk = Fields[8] == 1;
Magic Number,WCell.RealmServer.GameObjects.GOEntries,GOChestEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\GOEntries\GOChestEntry.cs,InitEntry,The following statement contains a magic number: IsConsumable = Fields[3] > 0 || Flags.HasFlag(GameObjectFlags.ConditionalInteraction);
Magic Number,WCell.RealmServer.GameObjects.GOEntries,GOChestEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\GOEntries\GOChestEntry.cs,InitEntry,The following statement contains a magic number: LinkedTrapId = (uint)Fields[7];
Magic Number,WCell.RealmServer.GameObjects.GOEntries,GOChestEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\GOEntries\GOChestEntry.cs,InitEntry,The following statement contains a magic number: LosOk = Fields[10] > 0;
Magic Number,WCell.RealmServer.GameObjects.GOEntries,GOChestEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\GOEntries\GOChestEntry.cs,InitEntry,The following statement contains a magic number: UseGroupLoot = Fields[15] > 0;
Magic Number,WCell.RealmServer.GameObjects.GOEntries,GOFishingHoleEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\GOEntries\GOFishingHoleEntry.cs,InitEntry,The following statement contains a magic number: Lock = LockEntry.Entries.Get((uint)Fields[4]);
Magic Number,WCell.RealmServer.GameObjects.GOEntries,GOFlagStandEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\GOEntries\GOFlagStandEntry.cs,InitEntry,The following statement contains a magic number: LosOk = Fields[7] != 0;
Magic Number,WCell.RealmServer.GameObjects.GOEntries,GOGooberEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\GOEntries\GOGooberEntry.cs,InitEntry,The following statement contains a magic number: IsConsumable = Fields[5] > 0;
Magic Number,WCell.RealmServer.GameObjects.GOEntries,GOGooberEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\GOEntries\GOGooberEntry.cs,InitEntry,The following statement contains a magic number: LinkedTrapId = (uint)Fields[12];
Magic Number,WCell.RealmServer.GameObjects.GOEntries,GOGooberEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\GOEntries\GOGooberEntry.cs,InitEntry,The following statement contains a magic number: LosOk = Fields[16] > 0;
Magic Number,WCell.RealmServer.GameObjects.GOEntries,GOGooberEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\GOEntries\GOGooberEntry.cs,InitEntry,The following statement contains a magic number: AllowMounted = Fields[17] > 0;
Magic Number,WCell.RealmServer.GameObjects.GOEntries,GOQuestGiverEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\GOEntries\GOQuestGiverEntry.cs,InitEntry,The following statement contains a magic number: LosOk = Fields[7] > 0;
Magic Number,WCell.RealmServer.GameObjects.GOEntries,GOQuestGiverEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\GOEntries\GOQuestGiverEntry.cs,InitEntry,The following statement contains a magic number: AllowMounted = Fields[8] > 0;
Magic Number,WCell.RealmServer.GameObjects.GOEntries,GOSpellCasterEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\GOEntries\GOSpellCasterEntry.cs,InitEntry,The following statement contains a magic number: AllowMounted = Fields[3] != 0;
Magic Number,WCell.RealmServer.GameObjects.GOEntries,GOSpellFocusEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\GOEntries\GOSpellFocusEntry.cs,InitEntry,The following statement contains a magic number: LinkedTrapId = (uint) Fields[2];
Magic Number,WCell.RealmServer.GameObjects.GOEntries,GOTextEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\GOEntries\GOTextEntry.cs,InitEntry,The following statement contains a magic number: AllowMounted = Fields[3] > 0;
Magic Number,WCell.RealmServer.GameObjects.GOEntries,GOTrapEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\GameObjects\GOEntries\GOTrapEntry.cs,InitEntry,The following statement contains a magic number: if (Radius < 1)  			{  				Radius = 5;  			}
Magic Number,WCell.RealmServer.NPCs.Auctioneer,AuctionHouse,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Auctioneer\AuctionHouse.cs,AuctionHouse,The following statement contains a magic number: auctions = new SynchronizedDictionary<uint' Auction>(10000);
Magic Number,WCell.RealmServer.NPCs.Auctioneer,AuctionHouse,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Auctioneer\AuctionHouse.cs,AuctionHouse,The following statement contains a magic number: items = new SynchronizedList<uint>(10000);
Magic Number,WCell.RealmServer.NPCs.Auctioneer,AuctionMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Auctioneer\AuctionMgr.cs,Start,The following statement contains a magic number: _auctionedItems = new SynchronizedDictionary<uint' ItemRecord>(10000);
Magic Number,WCell.RealmServer.NPCs.Auctioneer,AuctionMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Auctioneer\AuctionMgr.cs,GetAuctionDeposit,The following statement contains a magic number: return ((sellPrice * percent) / 100) * (timeInMin / (12 * 60));
Magic Number,WCell.RealmServer.NPCs.Auctioneer,AuctionMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Auctioneer\AuctionMgr.cs,GetAuctionDeposit,The following statement contains a magic number: return ((sellPrice * percent) / 100) * (timeInMin / (12 * 60));
Magic Number,WCell.RealmServer.NPCs.Auctioneer,AuctionMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Auctioneer\AuctionMgr.cs,GetAuctionDeposit,The following statement contains a magic number: return ((sellPrice * percent) / 100) * (timeInMin / (12 * 60));
Magic Number,WCell.RealmServer.NPCs.Auctioneer,AuctionMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Auctioneer\AuctionMgr.cs,GetMinimumNewBidIncrement,The following statement contains a magic number: if (auction.CurrentBid > 0)              {                  minimumIncreaseForNextBid = (auction.CurrentBid / 100) * 5;                  minimumIncreaseForNextBid = Math.Max(1' minimumIncreaseForNextBid);              }
Magic Number,WCell.RealmServer.NPCs.Auctioneer,AuctionMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Auctioneer\AuctionMgr.cs,GetMinimumNewBidIncrement,The following statement contains a magic number: if (auction.CurrentBid > 0)              {                  minimumIncreaseForNextBid = (auction.CurrentBid / 100) * 5;                  minimumIncreaseForNextBid = Math.Max(1' minimumIncreaseForNextBid);              }
Magic Number,WCell.RealmServer.NPCs.Vehicles,Vehicle,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Vehicles\Vehicle.cs,SetupNPC,The following statement contains a magic number: AddMessage(() =>  			{  				// Set Level/Scale ingame:  				var level = entry.GetRandomLevel();  				Level = level;  				PowerType = PowerType.Energy;  				MaxPower = entry.VehicleEntry.PowerType == VehiclePowerType.Pyrite ? 50 : 100;  				Power = MaxPower;  				if (entry.Spells == null)  					PowerType = PowerType.End;  			});
Magic Number,WCell.RealmServer.NPCs.Vehicles,Vehicle,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Vehicles\Vehicle.cs,SetupNPC,The following statement contains a magic number: AddMessage(() =>  			{  				// Set Level/Scale ingame:  				var level = entry.GetRandomLevel();  				Level = level;  				PowerType = PowerType.Energy;  				MaxPower = entry.VehicleEntry.PowerType == VehiclePowerType.Pyrite ? 50 : 100;  				Power = MaxPower;  				if (entry.Spells == null)  					PowerType = PowerType.End;  			});
Magic Number,WCell.RealmServer.Debugging,MapExtensions,C:\repos\WCell_WCell\Services\WCell.RealmServer\Debugging\MapExtensions.cs,GetWaitDelay,The following statement contains a magic number: return map.UpdateDelay + 200;
Magic Number,WCell.RealmServer.Mail,MailAccount,C:\repos\WCell_WCell\Services\WCell.RealmServer\Mail\MailAccount.cs,CollectMail,The following statement contains a magic number: var removeMe = new List<MailMessage>(10);
Magic Number,WCell.RealmServer.Mail,MailAccount,C:\repos\WCell_WCell\Services\WCell.RealmServer\Mail\MailAccount.cs,GetNextMailTime,The following statement contains a magic number: var mailList = new List<MailMessage>(2);
Magic Number,WCell.RealmServer.Mail,MailAccount,C:\repos\WCell_WCell\Services\WCell.RealmServer\Mail\MailAccount.cs,GetNextMailTime,The following statement contains a magic number: foreach (var letter in AllMail.Values)  			{  				if (letter.WasRead || letter.DeliveryTime > DateTime.Now)  					continue;    				++count;  				if (count > 2)  					break;    				mailList.Add(letter);  			}
Magic Number,WCell.RealmServer.Mail,MailMessage,C:\repos\WCell_WCell\Services\WCell.RealmServer\Mail\MailMessage.cs,AddItem,The following statement contains a magic number: if (_items == null)  			{  				_items = new List<ItemRecord>(3);  			}
Magic Number,WCell.RealmServer.NPCs.Vendors,VendorItemEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Vendors\VendorItemEntry.cs,GetAllDataHolders,The following statement contains a magic number: var list = new List<VendorItemEntry>(20000);
Magic Number,WCell.RealmServer.Paths,DBCTaxiPathNodeConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Paths\PathVertex.cs,ConvertTo,The following statement contains a magic number: i += 3;
Magic Number,WCell.RealmServer.Skills,SkillAbility,C:\repos\WCell_WCell\Services\WCell.RealmServer\Skills\SkillAbility.cs,Gain,The following statement contains a magic number: return (Utility.Random() % 1000) < chance ? GainAmount : 0;
Magic Number,WCell.RealmServer.Skills,SkillAbility,C:\repos\WCell_WCell\Services\WCell.RealmServer\Skills\SkillAbility.cs,CheckSuccess,The following statement contains a magic number: return (Utility.Random() % 1000) < chance;
Magic Number,WCell.RealmServer.Skills,Skill,C:\repos\WCell_WCell\Services\WCell.RealmServer\Skills\Skill.cs,CanLearnTier,The following statement contains a magic number: if (SkillLine.HasTier(tier))  			{  				uint tierLimit = SkillLine.Tiers.GetMaxValue(tier);  				if (CurrentValue >= (int)tierLimit - 100)  				{  					// cannot be learnt if we have less than max - 100 in that skill  					return true;  				}  			}
Magic Number,WCell.RealmServer.Skills,Skill,C:\repos\WCell_WCell\Services\WCell.RealmServer\Skills\Skill.cs,GainRand,The following statement contains a magic number: if (maxPossGain > 0)  			{  				maxGain = Math.Min(maxGain' maxPossGain);  				var rand = Utility.Random(0' 100);  				if (chance > rand)  				{  					var gain = (int)Math.Ceiling((maxGain / 100f) * (100 - rand));  					CurrentValue += (ushort)gain;  				}  			}
Magic Number,WCell.RealmServer.Skills,Skill,C:\repos\WCell_WCell\Services\WCell.RealmServer\Skills\Skill.cs,GainRand,The following statement contains a magic number: if (maxPossGain > 0)  			{  				maxGain = Math.Min(maxGain' maxPossGain);  				var rand = Utility.Random(0' 100);  				if (chance > rand)  				{  					var gain = (int)Math.Ceiling((maxGain / 100f) * (100 - rand));  					CurrentValue += (ushort)gain;  				}  			}
Magic Number,WCell.RealmServer.Skills,SkillAbilityConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Skills\Skills.DBC.cs,ConvertTo,The following statement contains a magic number: var red = (int)ability.YellowValue - (int)(diff / 2);
Magic Number,WCell.RealmServer.Skills,SkillAbilityConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Skills\Skills.DBC.cs,ConvertTo,The following statement contains a magic number: ability.GreenValue = ability.YellowValue + (diff / 2);
Magic Number,WCell.RealmServer.Skills,SkillTierConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Skills\Skills.DBC.cs,ConvertTo,The following statement contains a magic number: const int maxTiersPerSkill = 16;
Magic Number,WCell.RealmServer.Skills,SkillCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Skills\SkillCollection.cs,GetSkillGainChance,The following statement contains a magic number: var chance = 3 * lvlDiff * skillDiff;
Magic Number,WCell.RealmServer.Skills,SkillCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Skills\SkillCollection.cs,GetSkillGainChance,The following statement contains a magic number: if (chance > 100) chance = 100;
Magic Number,WCell.RealmServer.Skills,SkillCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Skills\SkillCollection.cs,GetSkillGainChance,The following statement contains a magic number: if (chance > 100) chance = 100;
Magic Number,WCell.RealmServer.Skills,SkillCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Skills\SkillCollection.cs,UpdateSkillsForLevel,The following statement contains a magic number: foreach (var sk in m_skills.Values)  			{  				if (sk.SkillLine.Category == SkillCategory.WeaponProficiency ||  					sk.SkillLine.Category == SkillCategory.ArmorProficiency)  				{  					sk.MaxValue = (ushort)(5 * level);  				}  			}
Magic Number,WCell.RealmServer.Skills,SkillCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Skills\SkillCollection.cs,OnRemove,The following statement contains a magic number: m_owner.SetUInt32(skill.PlayerField + 2' 0);
Magic Number,WCell.RealmServer.Skills,SkillCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Skills\SkillCollection.cs,FindFreeField,The following statement contains a magic number: for (PlayerFields i = PlayerFields.SKILL_INFO_1_1; i < SkillHandler.HighestField; i += 3)  			{  				if (m_owner.GetUInt32(i) == 0)  				{  					return i;  				}  			}
Magic Number,WCell.RealmServer.Taxi,DBCTaxiPathConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Taxi\TaxiPath.cs,ConvertTo,The following statement contains a magic number: path.EndNodeId = rawData.GetUInt32(2);
Magic Number,WCell.RealmServer.Taxi,DBCTaxiPathConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Taxi\TaxiPath.cs,ConvertTo,The following statement contains a magic number: path.Price = rawData.GetUInt32(3);
Magic Number,WCell.RealmServer.Taxi,TaxiMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Taxi\TaxiMgr.cs,Initialize,The following statement contains a magic number: var toRemove = new List<int>(5);
Magic Number,WCell.RealmServer.Taxi,TaxiMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Taxi\TaxiMgr.cs,Initialize,The following statement contains a magic number: foreach (var nodeList in nodeLists)  			{  				TaxiPath path;  				if (!taxiPathReader.Entries.TryGetValue((int)nodeList.Key' out path))  				{  					continue;  				}    				LinkedListNode<PathVertex> current = null;  				float totalLength = 0;    				foreach (var vertex in nodeList.Value.Values)  				{  					if (current == null)  					{  						// This is the first PathNode in the TaxiPath  						current = path.Nodes.AddFirst(vertex);  						current.Value.DistFromStart = 0;  						current.Value.TimeFromStart = 0;    						current.Value.DistFromPrevious = 0;  						current.Value.TimeFromPrevious = 0;  					}  					else  					{                          var isTeleport = current.Value.HasMapChange = current.Previous != null && (current.Value.MapId != current.Previous.Value.MapId ||                              current.Value.Flags.HasFlag(TaxiPathNodeFlags.IsTeleport));    						if (isTeleport)  						{  							// Since we teleported' there is no distance from previous' and we reset the dist from start  							current.Value.DistFromPrevious = 0;  							current.Value.DistFromStart = 0;  							current.Value.TimeFromPrevious = 0;  							current.Value.TimeFromStart = 0;  						}  						else  						{  							// Get the distance from the current to the next  							if (current.Previous != null)  							{  								var last = current.Previous.Value;  								current.Value.DistFromPrevious = current.Value.Pos.GetDistance(ref last.Pos);  								(current.Value.FromLastNode = (current.Value.Pos - last.Pos)).Normalize();  								current.Value.TimeFromPrevious = (int)((current.Value.DistFromPrevious * 1000) / AirSpeed);    								totalLength += current.Value.DistFromPrevious;  							}    							current.Value.DistFromStart = totalLength;  							current.Value.TimeFromStart = (int)((totalLength * 1000) / AirSpeed);  						}    						current = path.Nodes.AddAfter(current' vertex);  					}  					vertex.ListEntry = current;  					vertex.Path = path;  				}    				path.PathLength = totalLength;  				path.PathTime = (uint)((totalLength * 1000) / AirSpeed);  				var map = path.From.Map;  				if (map != null && map.FirstTaxiNode == null)  				{  					map.FirstTaxiNode = path.From;  				}  			}
Magic Number,WCell.RealmServer.Taxi,TaxiMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Taxi\TaxiMgr.cs,Initialize,The following statement contains a magic number: foreach (var nodeList in nodeLists)  			{  				TaxiPath path;  				if (!taxiPathReader.Entries.TryGetValue((int)nodeList.Key' out path))  				{  					continue;  				}    				LinkedListNode<PathVertex> current = null;  				float totalLength = 0;    				foreach (var vertex in nodeList.Value.Values)  				{  					if (current == null)  					{  						// This is the first PathNode in the TaxiPath  						current = path.Nodes.AddFirst(vertex);  						current.Value.DistFromStart = 0;  						current.Value.TimeFromStart = 0;    						current.Value.DistFromPrevious = 0;  						current.Value.TimeFromPrevious = 0;  					}  					else  					{                          var isTeleport = current.Value.HasMapChange = current.Previous != null && (current.Value.MapId != current.Previous.Value.MapId ||                              current.Value.Flags.HasFlag(TaxiPathNodeFlags.IsTeleport));    						if (isTeleport)  						{  							// Since we teleported' there is no distance from previous' and we reset the dist from start  							current.Value.DistFromPrevious = 0;  							current.Value.DistFromStart = 0;  							current.Value.TimeFromPrevious = 0;  							current.Value.TimeFromStart = 0;  						}  						else  						{  							// Get the distance from the current to the next  							if (current.Previous != null)  							{  								var last = current.Previous.Value;  								current.Value.DistFromPrevious = current.Value.Pos.GetDistance(ref last.Pos);  								(current.Value.FromLastNode = (current.Value.Pos - last.Pos)).Normalize();  								current.Value.TimeFromPrevious = (int)((current.Value.DistFromPrevious * 1000) / AirSpeed);    								totalLength += current.Value.DistFromPrevious;  							}    							current.Value.DistFromStart = totalLength;  							current.Value.TimeFromStart = (int)((totalLength * 1000) / AirSpeed);  						}    						current = path.Nodes.AddAfter(current' vertex);  					}  					vertex.ListEntry = current;  					vertex.Path = path;  				}    				path.PathLength = totalLength;  				path.PathTime = (uint)((totalLength * 1000) / AirSpeed);  				var map = path.From.Map;  				if (map != null && map.FirstTaxiNode == null)  				{  					map.FirstTaxiNode = path.From;  				}  			}
Magic Number,WCell.RealmServer.Taxi,TaxiMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Taxi\TaxiMgr.cs,Initialize,The following statement contains a magic number: foreach (var nodeList in nodeLists)  			{  				TaxiPath path;  				if (!taxiPathReader.Entries.TryGetValue((int)nodeList.Key' out path))  				{  					continue;  				}    				LinkedListNode<PathVertex> current = null;  				float totalLength = 0;    				foreach (var vertex in nodeList.Value.Values)  				{  					if (current == null)  					{  						// This is the first PathNode in the TaxiPath  						current = path.Nodes.AddFirst(vertex);  						current.Value.DistFromStart = 0;  						current.Value.TimeFromStart = 0;    						current.Value.DistFromPrevious = 0;  						current.Value.TimeFromPrevious = 0;  					}  					else  					{                          var isTeleport = current.Value.HasMapChange = current.Previous != null && (current.Value.MapId != current.Previous.Value.MapId ||                              current.Value.Flags.HasFlag(TaxiPathNodeFlags.IsTeleport));    						if (isTeleport)  						{  							// Since we teleported' there is no distance from previous' and we reset the dist from start  							current.Value.DistFromPrevious = 0;  							current.Value.DistFromStart = 0;  							current.Value.TimeFromPrevious = 0;  							current.Value.TimeFromStart = 0;  						}  						else  						{  							// Get the distance from the current to the next  							if (current.Previous != null)  							{  								var last = current.Previous.Value;  								current.Value.DistFromPrevious = current.Value.Pos.GetDistance(ref last.Pos);  								(current.Value.FromLastNode = (current.Value.Pos - last.Pos)).Normalize();  								current.Value.TimeFromPrevious = (int)((current.Value.DistFromPrevious * 1000) / AirSpeed);    								totalLength += current.Value.DistFromPrevious;  							}    							current.Value.DistFromStart = totalLength;  							current.Value.TimeFromStart = (int)((totalLength * 1000) / AirSpeed);  						}    						current = path.Nodes.AddAfter(current' vertex);  					}  					vertex.ListEntry = current;  					vertex.Path = path;  				}    				path.PathLength = totalLength;  				path.PathTime = (uint)((totalLength * 1000) / AirSpeed);  				var map = path.From.Map;  				if (map != null && map.FirstTaxiNode == null)  				{  					map.FirstTaxiNode = path.From;  				}  			}
Magic Number,WCell.RealmServer.Taxi,TaxiMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Taxi\TaxiMgr.cs,PreFlightCheatChecks,The following statement contains a magic number: if (destinations.Length < 2)  			{  				return false;  			}
Magic Number,WCell.RealmServer.Taxi,TaxiMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Taxi\TaxiMgr.cs,ContinueFlight,The following statement contains a magic number: if (unit.TaxiPaths.Count < 2)  			{  				done = true;  			}  			else  			{  				var arrivalPath = unit.TaxiPaths.Dequeue();  				if (arrivalPath.To != current)  				{  					unit.CancelTaxiFlight();  					return;  				}    			    var destPath = unit.TaxiPaths.Peek();  			    if (current != destPath.From)  			    {  			        unit.CancelTaxiFlight();  			        return;  			    }  			}
Magic Number,WCell.RealmServer.Taxi,TaxiMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Taxi\TaxiMgr.cs,FlyUnit,The following statement contains a magic number: if (unit.LatestTaxiPathNode == path.Nodes.First)  			{  				// new flight  				unit.taxiTime = 0;  				MovementHandler.SendMoveToPacket(unit' path.PathTime' MonsterMoveFlags.Fly' path.Nodes);  			}  			else  			{  				// continue:  				// set time to the amount that it takes to get this far along the path  				// ReSharper disable PossibleNullReferenceException  				unit.taxiTime = startNode.Previous.Value.TimeFromStart +  					(int)((1000 * startNode.Value.Pos.GetDistance(unit.Position)) / AirSpeed);  				// ReSharper restore PossibleNullReferenceException  				MovementHandler.SendMoveToPacket(unit' AirSpeed' MonsterMoveFlags.Fly' startNode);  			}
Magic Number,WCell.RealmServer.Taxi,TaxiNodeMask,C:\repos\WCell_WCell\Services\WCell.RealmServer\Taxi\TaxiNodeMask.cs,Activate,The following statement contains a magic number: var field = fields[(nodeId / 32)];
Magic Number,WCell.RealmServer.Taxi,TaxiNodeMask,C:\repos\WCell_WCell\Services\WCell.RealmServer\Taxi\TaxiNodeMask.cs,Activate,The following statement contains a magic number: field |= (uint)(1 << ((int)(nodeId % 32)));
Magic Number,WCell.RealmServer.Taxi,TaxiNodeMask,C:\repos\WCell_WCell\Services\WCell.RealmServer\Taxi\TaxiNodeMask.cs,Activate,The following statement contains a magic number: fields[(nodeId / 32)] = field;
Magic Number,WCell.RealmServer.Taxi,TaxiNodeMask,C:\repos\WCell_WCell\Services\WCell.RealmServer\Taxi\TaxiNodeMask.cs,IsActive,The following statement contains a magic number: uint field = Mask[(nodeId / 32)];
Magic Number,WCell.RealmServer.Taxi,TaxiNodeMask,C:\repos\WCell_WCell\Services\WCell.RealmServer\Taxi\TaxiNodeMask.cs,IsActive,The following statement contains a magic number: uint mask = (uint)(1 << ((int)(nodeId % 32)));
Magic Number,WCell.RealmServer.Transports,TransportMovement,C:\repos\WCell_WCell\Services\WCell.RealmServer\Transports\TransportMovement.cs,Initialize,The following statement contains a magic number: if (m_stops.Length != 2)  			{  				// Northrend transports with many stops  				// Deal with them later  				return;  			}
Magic Number,WCell.RealmServer.Transports,TransportMovement,C:\repos\WCell_WCell\Services\WCell.RealmServer\Transports\TransportMovement.cs,GetTimeByDistance,The following statement contains a magic number: if (distance < m_accelerationDist)  				return (float)Math.Sqrt(2 * distance / m_accelerationRate);
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdatePowerRegen,The following statement contains a magic number: if (unit.IsAlive)  			{  				var baseRegen = unit.GetBasePowerRegen();    				if (unit.PowerType != PowerType.RunicPower || unit.IsInCombat) // runic power bonuses only apply during combat  				{  					regen += baseRegen + unit.IntMods[(int)StatModifierInt.PowerRegen]; // Mp5 from gear' auras  					regen += (unit.IntMods[(int)StatModifierInt.PowerRegenPercent] * regen + 50) / 100;	// e.g. multipliers from auras & rounding  					  					// If the unit isn't a mana caster' the tick is always regular (PowerRegenPerTick)  					unit.PowerRegenPerTick = unit.PowerRegenPerTickActual = regen;  					  					if(unit.PowerType == PowerType.Mana) // Interrupted mana gain will still be changed regardless of interrupt status  					{  						var interruptedRegen = (unit.IntMods[(int)StatModifierInt.ManaRegenInterruptPct] * baseRegen + 50) / 100; //rounding  						interruptedRegen += unit.IntMods[(int)StatModifierInt.PowerRegen]; // Mp5 from gear' auras  						interruptedRegen += (unit.IntMods[(int)StatModifierInt.PowerRegenPercent] * regen + 50) / 100; // multipliers from auras  						unit.ManaRegenPerTickInterrupted = interruptedRegen;  						  						if(unit.IsManaRegenInterrupted)  						{  							unit.PowerRegenPerTickActual = interruptedRegen; // Unit will gain power according to the interrupted value  						}  					}  				}  			}  			else  			{  				unit.PowerRegenPerTickActual = 0;  			}
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdatePowerRegen,The following statement contains a magic number: if (unit.IsAlive)  			{  				var baseRegen = unit.GetBasePowerRegen();    				if (unit.PowerType != PowerType.RunicPower || unit.IsInCombat) // runic power bonuses only apply during combat  				{  					regen += baseRegen + unit.IntMods[(int)StatModifierInt.PowerRegen]; // Mp5 from gear' auras  					regen += (unit.IntMods[(int)StatModifierInt.PowerRegenPercent] * regen + 50) / 100;	// e.g. multipliers from auras & rounding  					  					// If the unit isn't a mana caster' the tick is always regular (PowerRegenPerTick)  					unit.PowerRegenPerTick = unit.PowerRegenPerTickActual = regen;  					  					if(unit.PowerType == PowerType.Mana) // Interrupted mana gain will still be changed regardless of interrupt status  					{  						var interruptedRegen = (unit.IntMods[(int)StatModifierInt.ManaRegenInterruptPct] * baseRegen + 50) / 100; //rounding  						interruptedRegen += unit.IntMods[(int)StatModifierInt.PowerRegen]; // Mp5 from gear' auras  						interruptedRegen += (unit.IntMods[(int)StatModifierInt.PowerRegenPercent] * regen + 50) / 100; // multipliers from auras  						unit.ManaRegenPerTickInterrupted = interruptedRegen;  						  						if(unit.IsManaRegenInterrupted)  						{  							unit.PowerRegenPerTickActual = interruptedRegen; // Unit will gain power according to the interrupted value  						}  					}  				}  			}  			else  			{  				unit.PowerRegenPerTickActual = 0;  			}
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdatePowerRegen,The following statement contains a magic number: if (unit.IsAlive)  			{  				var baseRegen = unit.GetBasePowerRegen();    				if (unit.PowerType != PowerType.RunicPower || unit.IsInCombat) // runic power bonuses only apply during combat  				{  					regen += baseRegen + unit.IntMods[(int)StatModifierInt.PowerRegen]; // Mp5 from gear' auras  					regen += (unit.IntMods[(int)StatModifierInt.PowerRegenPercent] * regen + 50) / 100;	// e.g. multipliers from auras & rounding  					  					// If the unit isn't a mana caster' the tick is always regular (PowerRegenPerTick)  					unit.PowerRegenPerTick = unit.PowerRegenPerTickActual = regen;  					  					if(unit.PowerType == PowerType.Mana) // Interrupted mana gain will still be changed regardless of interrupt status  					{  						var interruptedRegen = (unit.IntMods[(int)StatModifierInt.ManaRegenInterruptPct] * baseRegen + 50) / 100; //rounding  						interruptedRegen += unit.IntMods[(int)StatModifierInt.PowerRegen]; // Mp5 from gear' auras  						interruptedRegen += (unit.IntMods[(int)StatModifierInt.PowerRegenPercent] * regen + 50) / 100; // multipliers from auras  						unit.ManaRegenPerTickInterrupted = interruptedRegen;  						  						if(unit.IsManaRegenInterrupted)  						{  							unit.PowerRegenPerTickActual = interruptedRegen; // Unit will gain power according to the interrupted value  						}  					}  				}  			}  			else  			{  				unit.PowerRegenPerTickActual = 0;  			}
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdatePowerRegen,The following statement contains a magic number: if (unit.IsAlive)  			{  				var baseRegen = unit.GetBasePowerRegen();    				if (unit.PowerType != PowerType.RunicPower || unit.IsInCombat) // runic power bonuses only apply during combat  				{  					regen += baseRegen + unit.IntMods[(int)StatModifierInt.PowerRegen]; // Mp5 from gear' auras  					regen += (unit.IntMods[(int)StatModifierInt.PowerRegenPercent] * regen + 50) / 100;	// e.g. multipliers from auras & rounding  					  					// If the unit isn't a mana caster' the tick is always regular (PowerRegenPerTick)  					unit.PowerRegenPerTick = unit.PowerRegenPerTickActual = regen;  					  					if(unit.PowerType == PowerType.Mana) // Interrupted mana gain will still be changed regardless of interrupt status  					{  						var interruptedRegen = (unit.IntMods[(int)StatModifierInt.ManaRegenInterruptPct] * baseRegen + 50) / 100; //rounding  						interruptedRegen += unit.IntMods[(int)StatModifierInt.PowerRegen]; // Mp5 from gear' auras  						interruptedRegen += (unit.IntMods[(int)StatModifierInt.PowerRegenPercent] * regen + 50) / 100; // multipliers from auras  						unit.ManaRegenPerTickInterrupted = interruptedRegen;  						  						if(unit.IsManaRegenInterrupted)  						{  							unit.PowerRegenPerTickActual = interruptedRegen; // Unit will gain power according to the interrupted value  						}  					}  				}  			}  			else  			{  				unit.PowerRegenPerTickActual = 0;  			}
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdatePowerRegen,The following statement contains a magic number: if (unit.IsAlive)  			{  				var baseRegen = unit.GetBasePowerRegen();    				if (unit.PowerType != PowerType.RunicPower || unit.IsInCombat) // runic power bonuses only apply during combat  				{  					regen += baseRegen + unit.IntMods[(int)StatModifierInt.PowerRegen]; // Mp5 from gear' auras  					regen += (unit.IntMods[(int)StatModifierInt.PowerRegenPercent] * regen + 50) / 100;	// e.g. multipliers from auras & rounding  					  					// If the unit isn't a mana caster' the tick is always regular (PowerRegenPerTick)  					unit.PowerRegenPerTick = unit.PowerRegenPerTickActual = regen;  					  					if(unit.PowerType == PowerType.Mana) // Interrupted mana gain will still be changed regardless of interrupt status  					{  						var interruptedRegen = (unit.IntMods[(int)StatModifierInt.ManaRegenInterruptPct] * baseRegen + 50) / 100; //rounding  						interruptedRegen += unit.IntMods[(int)StatModifierInt.PowerRegen]; // Mp5 from gear' auras  						interruptedRegen += (unit.IntMods[(int)StatModifierInt.PowerRegenPercent] * regen + 50) / 100; // multipliers from auras  						unit.ManaRegenPerTickInterrupted = interruptedRegen;  						  						if(unit.IsManaRegenInterrupted)  						{  							unit.PowerRegenPerTickActual = interruptedRegen; // Unit will gain power according to the interrupted value  						}  					}  				}  			}  			else  			{  				unit.PowerRegenPerTickActual = 0;  			}
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdatePowerRegen,The following statement contains a magic number: if (unit.IsAlive)  			{  				var baseRegen = unit.GetBasePowerRegen();    				if (unit.PowerType != PowerType.RunicPower || unit.IsInCombat) // runic power bonuses only apply during combat  				{  					regen += baseRegen + unit.IntMods[(int)StatModifierInt.PowerRegen]; // Mp5 from gear' auras  					regen += (unit.IntMods[(int)StatModifierInt.PowerRegenPercent] * regen + 50) / 100;	// e.g. multipliers from auras & rounding  					  					// If the unit isn't a mana caster' the tick is always regular (PowerRegenPerTick)  					unit.PowerRegenPerTick = unit.PowerRegenPerTickActual = regen;  					  					if(unit.PowerType == PowerType.Mana) // Interrupted mana gain will still be changed regardless of interrupt status  					{  						var interruptedRegen = (unit.IntMods[(int)StatModifierInt.ManaRegenInterruptPct] * baseRegen + 50) / 100; //rounding  						interruptedRegen += unit.IntMods[(int)StatModifierInt.PowerRegen]; // Mp5 from gear' auras  						interruptedRegen += (unit.IntMods[(int)StatModifierInt.PowerRegenPercent] * regen + 50) / 100; // multipliers from auras  						unit.ManaRegenPerTickInterrupted = interruptedRegen;  						  						if(unit.IsManaRegenInterrupted)  						{  							unit.PowerRegenPerTickActual = interruptedRegen; // Unit will gain power according to the interrupted value  						}  					}  				}  			}  			else  			{  				unit.PowerRegenPerTickActual = 0;  			}
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdateMeleeAttackPower,The following statement contains a magic number: if (unit is Character)  			{  				var chr = (Character)unit;  				var clss = chr.Archetype.Class;  				var lvl = chr.Level;  				var agil = chr.Agility;  				var str = unit.Strength;    				var ap = clss.CalculateMeleeAP(lvl' str' agil);  				if (chr.m_MeleeAPModByStat != null)  				{  					for (var stat = StatType.Strength; stat < StatType.End; stat++)  					{  						ap += (chr.GetMeleeAPModByStat(stat) * chr.GetTotalStatValue(stat) + 50) / 100;  					}  				}  				chr.MeleeAttackPower = ap;  			}  			else if (unit is NPC)  			{  				var npc = (NPC)unit;  				if (npc.HasPlayerMaster)  				{  					var chr = (Character)npc.Master;  					var clss = chr.Archetype.Class;	// use master's class for AP calculation    					var lvl = unit.Level;  					var agil = unit.Agility;  					var str = unit.Strength;  					var ap = clss.CalculateMeleeAP(lvl' str' agil);  					if (npc.IsHunterPet)  					{  						// Pet stat: AP  						// "1 ranged attack power gives the pet 0.22 AP"  						ap += (chr.TotalMeleeAP * PetMgr.PetAPOfOwnerPercent + 50) / 100;  					}  					npc.MeleeAttackPower = ap;  				}  			}
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdateMeleeAttackPower,The following statement contains a magic number: if (unit is Character)  			{  				var chr = (Character)unit;  				var clss = chr.Archetype.Class;  				var lvl = chr.Level;  				var agil = chr.Agility;  				var str = unit.Strength;    				var ap = clss.CalculateMeleeAP(lvl' str' agil);  				if (chr.m_MeleeAPModByStat != null)  				{  					for (var stat = StatType.Strength; stat < StatType.End; stat++)  					{  						ap += (chr.GetMeleeAPModByStat(stat) * chr.GetTotalStatValue(stat) + 50) / 100;  					}  				}  				chr.MeleeAttackPower = ap;  			}  			else if (unit is NPC)  			{  				var npc = (NPC)unit;  				if (npc.HasPlayerMaster)  				{  					var chr = (Character)npc.Master;  					var clss = chr.Archetype.Class;	// use master's class for AP calculation    					var lvl = unit.Level;  					var agil = unit.Agility;  					var str = unit.Strength;  					var ap = clss.CalculateMeleeAP(lvl' str' agil);  					if (npc.IsHunterPet)  					{  						// Pet stat: AP  						// "1 ranged attack power gives the pet 0.22 AP"  						ap += (chr.TotalMeleeAP * PetMgr.PetAPOfOwnerPercent + 50) / 100;  					}  					npc.MeleeAttackPower = ap;  				}  			}
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdateMeleeAttackPower,The following statement contains a magic number: if (unit is Character)  			{  				var chr = (Character)unit;  				var clss = chr.Archetype.Class;  				var lvl = chr.Level;  				var agil = chr.Agility;  				var str = unit.Strength;    				var ap = clss.CalculateMeleeAP(lvl' str' agil);  				if (chr.m_MeleeAPModByStat != null)  				{  					for (var stat = StatType.Strength; stat < StatType.End; stat++)  					{  						ap += (chr.GetMeleeAPModByStat(stat) * chr.GetTotalStatValue(stat) + 50) / 100;  					}  				}  				chr.MeleeAttackPower = ap;  			}  			else if (unit is NPC)  			{  				var npc = (NPC)unit;  				if (npc.HasPlayerMaster)  				{  					var chr = (Character)npc.Master;  					var clss = chr.Archetype.Class;	// use master's class for AP calculation    					var lvl = unit.Level;  					var agil = unit.Agility;  					var str = unit.Strength;  					var ap = clss.CalculateMeleeAP(lvl' str' agil);  					if (npc.IsHunterPet)  					{  						// Pet stat: AP  						// "1 ranged attack power gives the pet 0.22 AP"  						ap += (chr.TotalMeleeAP * PetMgr.PetAPOfOwnerPercent + 50) / 100;  					}  					npc.MeleeAttackPower = ap;  				}  			}
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdateMeleeAttackPower,The following statement contains a magic number: if (unit is Character)  			{  				var chr = (Character)unit;  				var clss = chr.Archetype.Class;  				var lvl = chr.Level;  				var agil = chr.Agility;  				var str = unit.Strength;    				var ap = clss.CalculateMeleeAP(lvl' str' agil);  				if (chr.m_MeleeAPModByStat != null)  				{  					for (var stat = StatType.Strength; stat < StatType.End; stat++)  					{  						ap += (chr.GetMeleeAPModByStat(stat) * chr.GetTotalStatValue(stat) + 50) / 100;  					}  				}  				chr.MeleeAttackPower = ap;  			}  			else if (unit is NPC)  			{  				var npc = (NPC)unit;  				if (npc.HasPlayerMaster)  				{  					var chr = (Character)npc.Master;  					var clss = chr.Archetype.Class;	// use master's class for AP calculation    					var lvl = unit.Level;  					var agil = unit.Agility;  					var str = unit.Strength;  					var ap = clss.CalculateMeleeAP(lvl' str' agil);  					if (npc.IsHunterPet)  					{  						// Pet stat: AP  						// "1 ranged attack power gives the pet 0.22 AP"  						ap += (chr.TotalMeleeAP * PetMgr.PetAPOfOwnerPercent + 50) / 100;  					}  					npc.MeleeAttackPower = ap;  				}  			}
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdateRangedAttackPower,The following statement contains a magic number: if (unit is Character)  			{  				var chr = (Character)unit;  				var clss = chr.Archetype.Class;  				var lvl = chr.Level;  				var agil = chr.Agility;  				var str = unit.Strength;    				var ap = clss.CalculateRangedAP(lvl' str' agil);  				if (chr.m_MeleeAPModByStat != null)  				{  					// add bonuses through talents  					for (var stat = StatType.Strength; stat < StatType.End; stat++)  					{  						ap += (chr.GetRangedAPModByStat(stat) * chr.GetTotalStatValue(stat) + 50) / 100;  					}  				}  				chr.RangedAttackPower = ap;    				var pet = chr.ActivePet;  				if (pet != null && pet.IsHunterPet)  				{  					// TODO: Pet stat: Spell Damage  					pet.UpdateMeleeAttackPower();	// pet's AP is dependent on Hunter's ranged AP  				}    				unit.UpdateRangedDamage();  			}
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdateRangedAttackPower,The following statement contains a magic number: if (unit is Character)  			{  				var chr = (Character)unit;  				var clss = chr.Archetype.Class;  				var lvl = chr.Level;  				var agil = chr.Agility;  				var str = unit.Strength;    				var ap = clss.CalculateRangedAP(lvl' str' agil);  				if (chr.m_MeleeAPModByStat != null)  				{  					// add bonuses through talents  					for (var stat = StatType.Strength; stat < StatType.End; stat++)  					{  						ap += (chr.GetRangedAPModByStat(stat) * chr.GetTotalStatValue(stat) + 50) / 100;  					}  				}  				chr.RangedAttackPower = ap;    				var pet = chr.ActivePet;  				if (pet != null && pet.IsHunterPet)  				{  					// TODO: Pet stat: Spell Damage  					pet.UpdateMeleeAttackPower();	// pet's AP is dependent on Hunter's ranged AP  				}    				unit.UpdateRangedDamage();  			}
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdateBlockChance,The following statement contains a magic number: if (shield != null && shield.Template.InventorySlotType == InventorySlotType.Shield)  			{  				blockChance = chr.IntMods[(int)StatModifierInt.BlockChance];    				blockValue = 5 + (int)shield.Template.BlockValue + (int)blockChance;    				// + block from block rating  				blockChance += chr.GetCombatRating(CombatRating.Block) / GameTables.GetCRTable(CombatRating.Block)[chr.Level - 1];  			}
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdateBlockChance,The following statement contains a magic number: blockValue += chr.Strength / 2 - 10;
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdateBlockChance,The following statement contains a magic number: blockValue += chr.Strength / 2 - 10;
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdateMainDamage,The following statement contains a magic number: var apBonus = (unit.TotalMeleeAP * unit.MainHandAttackTime + 7000) / 14000;
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdateMainDamage,The following statement contains a magic number: var apBonus = (unit.TotalMeleeAP * unit.MainHandAttackTime + 7000) / 14000;
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdateOffHandDamage,The following statement contains a magic number: if (unit.OffHandWeapon != null)  			{  				var apBonus = (unit.TotalMeleeAP * unit.OffHandAttackTime + 7000) / 14000;	// rounded  				var weapon = unit.OffHandWeapon;    				var min = 0f;  				var max = 0f;  				for (DamageSchool school = 0; school < (DamageSchool)weapon.Damages.Length; school++)  				{  					var dmg = weapon.Damages[(int)school];    					min += GetModifiedDamage(unit' dmg.Minimum);  					max += GetModifiedDamage(unit' dmg.Maximum);  				}    				if (unit is Character)  				{  					var bonus = ((Character)unit).OffhandDmgPctMod;  					min += min * bonus;  					max += max * bonus;  				}  				unit.MinOffHandDamage = (min + apBonus + weapon.BonusDamage) / 2;  				unit.MaxOffHandDamage = (max + apBonus + weapon.BonusDamage) / 2;  			}  			else  			{  				unit.MinOffHandDamage = 0f;  				unit.MaxOffHandDamage = 0f;  			}
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdateOffHandDamage,The following statement contains a magic number: if (unit.OffHandWeapon != null)  			{  				var apBonus = (unit.TotalMeleeAP * unit.OffHandAttackTime + 7000) / 14000;	// rounded  				var weapon = unit.OffHandWeapon;    				var min = 0f;  				var max = 0f;  				for (DamageSchool school = 0; school < (DamageSchool)weapon.Damages.Length; school++)  				{  					var dmg = weapon.Damages[(int)school];    					min += GetModifiedDamage(unit' dmg.Minimum);  					max += GetModifiedDamage(unit' dmg.Maximum);  				}    				if (unit is Character)  				{  					var bonus = ((Character)unit).OffhandDmgPctMod;  					min += min * bonus;  					max += max * bonus;  				}  				unit.MinOffHandDamage = (min + apBonus + weapon.BonusDamage) / 2;  				unit.MaxOffHandDamage = (max + apBonus + weapon.BonusDamage) / 2;  			}  			else  			{  				unit.MinOffHandDamage = 0f;  				unit.MaxOffHandDamage = 0f;  			}
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdateOffHandDamage,The following statement contains a magic number: if (unit.OffHandWeapon != null)  			{  				var apBonus = (unit.TotalMeleeAP * unit.OffHandAttackTime + 7000) / 14000;	// rounded  				var weapon = unit.OffHandWeapon;    				var min = 0f;  				var max = 0f;  				for (DamageSchool school = 0; school < (DamageSchool)weapon.Damages.Length; school++)  				{  					var dmg = weapon.Damages[(int)school];    					min += GetModifiedDamage(unit' dmg.Minimum);  					max += GetModifiedDamage(unit' dmg.Maximum);  				}    				if (unit is Character)  				{  					var bonus = ((Character)unit).OffhandDmgPctMod;  					min += min * bonus;  					max += max * bonus;  				}  				unit.MinOffHandDamage = (min + apBonus + weapon.BonusDamage) / 2;  				unit.MaxOffHandDamage = (max + apBonus + weapon.BonusDamage) / 2;  			}  			else  			{  				unit.MinOffHandDamage = 0f;  				unit.MaxOffHandDamage = 0f;  			}
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdateOffHandDamage,The following statement contains a magic number: if (unit.OffHandWeapon != null)  			{  				var apBonus = (unit.TotalMeleeAP * unit.OffHandAttackTime + 7000) / 14000;	// rounded  				var weapon = unit.OffHandWeapon;    				var min = 0f;  				var max = 0f;  				for (DamageSchool school = 0; school < (DamageSchool)weapon.Damages.Length; school++)  				{  					var dmg = weapon.Damages[(int)school];    					min += GetModifiedDamage(unit' dmg.Minimum);  					max += GetModifiedDamage(unit' dmg.Maximum);  				}    				if (unit is Character)  				{  					var bonus = ((Character)unit).OffhandDmgPctMod;  					min += min * bonus;  					max += max * bonus;  				}  				unit.MinOffHandDamage = (min + apBonus + weapon.BonusDamage) / 2;  				unit.MaxOffHandDamage = (max + apBonus + weapon.BonusDamage) / 2;  			}  			else  			{  				unit.MinOffHandDamage = 0f;  				unit.MaxOffHandDamage = 0f;  			}
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdateRangedDamage,The following statement contains a magic number: var apBonus = (unit.TotalRangedAP * unit.RangedAttackTime + 7000) / 14000;
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdateRangedDamage,The following statement contains a magic number: var apBonus = (unit.TotalRangedAP * unit.RangedAttackTime + 7000) / 14000;
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdateMainAttackTime,The following statement contains a magic number: if (baseTime < 30)  			{  				baseTime = 30;  			}
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdateMainAttackTime,The following statement contains a magic number: if (baseTime < 30)  			{  				baseTime = 30;  			}
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdatePetResistance,The following statement contains a magic number: if (school == DamageSchool.Physical)  			{  				// set pet armor  				res = (pet.Armor * PetMgr.PetArmorOfOwnerPercent + 50) / 100;  				var levelStatInfo = pet.Entry.GetPetLevelStatInfo(pet.Level);  				if (levelStatInfo != null)  				{  					res += levelStatInfo.Armor;  				}  			}  			else  			{  				// set pet res  				res = (pet.GetResistance(school) * PetMgr.PetResistanceOfOwnerPercent + 50) / 100;  			}
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdatePetResistance,The following statement contains a magic number: if (school == DamageSchool.Physical)  			{  				// set pet armor  				res = (pet.Armor * PetMgr.PetArmorOfOwnerPercent + 50) / 100;  				var levelStatInfo = pet.Entry.GetPetLevelStatInfo(pet.Level);  				if (levelStatInfo != null)  				{  					res += levelStatInfo.Armor;  				}  			}  			else  			{  				// set pet res  				res = (pet.GetResistance(school) * PetMgr.PetResistanceOfOwnerPercent + 50) / 100;  			}
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdatePetResistance,The following statement contains a magic number: if (school == DamageSchool.Physical)  			{  				// set pet armor  				res = (pet.Armor * PetMgr.PetArmorOfOwnerPercent + 50) / 100;  				var levelStatInfo = pet.Entry.GetPetLevelStatInfo(pet.Level);  				if (levelStatInfo != null)  				{  					res += levelStatInfo.Armor;  				}  			}  			else  			{  				// set pet res  				res = (pet.GetResistance(school) * PetMgr.PetResistanceOfOwnerPercent + 50) / 100;  			}
Magic Number,WCell.RealmServer.Modifiers,UnitUpdates,C:\repos\WCell_WCell\Services\WCell.RealmServer\Modifiers\UnitUpdates.cs,UpdatePetResistance,The following statement contains a magic number: if (school == DamageSchool.Physical)  			{  				// set pet armor  				res = (pet.Armor * PetMgr.PetArmorOfOwnerPercent + 50) / 100;  				var levelStatInfo = pet.Entry.GetPetLevelStatInfo(pet.Level);  				if (levelStatInfo != null)  				{  					res += levelStatInfo.Armor;  				}  			}  			else  			{  				// set pet res  				res = (pet.GetResistance(school) * PetMgr.PetResistanceOfOwnerPercent + 50) / 100;  			}
Magic Number,WCell.RealmServer.NPCs.Armorer,ArmorerMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Armorer\ArmorerMgr.cs,GetCostToRepair,The following statement contains a magic number: var qualModArray = itemQualityRepairModifiers[((int)item.Template.Quality + 1) * 2];
Magic Number,WCell.RealmServer.NPCs.Armorer,ArmorerMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Armorer\ArmorerMgr.cs,GetCostToRepair,The following statement contains a magic number: if (qualModArray != null)  			{  				qualityMod = qualModArray.CostModifierPct;  			}  			else  			{  				qualityMod = 100;  			}
Magic Number,WCell.RealmServer.NPCs.Armorer,ArmorerMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Armorer\ArmorerMgr.cs,GetCostToRepair,The following statement contains a magic number: var costToRepair = (lostDurability * classMod * qualityMod) / 100;
Magic Number,WCell.RealmServer.NPCs.Armorer,DurabilityCost,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Armorer\DurabilityCost.cs,GetModifierBySubClassId,The following statement contains a magic number: switch( itemClass )  			{  				case ItemClass.Weapon:  					return Multipliers[ (int)itemSubClass ];  				case ItemClass.Armor:  					return Multipliers[ (int)itemSubClass + 21 ];  				default:   					return 0;  			}
Magic Number,WCell.RealmServer.NPCs.Armorer,DurabilityCost,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Armorer\DurabilityCost.cs,DurabilityCost,The following statement contains a magic number: Multipliers = new uint[29];
Magic Number,WCell.RealmServer.NPCs.Armorer,DBCDurabilityCostsConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Armorer\DurabilityCost.cs,ConvertTo,The following statement contains a magic number: for( uint i = 1; i < 30; ++i )  			{  				cost.Multipliers[ i - 1 ] = rawData.GetUInt32( i );  			}
Magic Number,WCell.RealmServer.NPCs.Armorer,DBCDurabilityQualityConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\NPCs\Armorer\DurabilityQuality.cs,ConvertTo,The following statement contains a magic number: quality.CostModifierPct = (uint)(rawData.GetFloat( 1 ) * 100);
Magic Number,WCell.RealmServer.Factions,FactionConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Factions\FactionDBC.cs,ConvertTo,The following statement contains a magic number: entry.RaceMask = new RaceMask[4];
Magic Number,WCell.RealmServer.Factions,FactionConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Factions\FactionDBC.cs,ConvertTo,The following statement contains a magic number: for (var i = 0; i < entry.RaceMask.Length; i++)              {                  entry.RaceMask[i] = (RaceMask)GetUInt32(rawData' 2 + i);              }
Magic Number,WCell.RealmServer.Factions,FactionConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Factions\FactionDBC.cs,ConvertTo,The following statement contains a magic number: entry.ClassMask = new ClassMask[4];
Magic Number,WCell.RealmServer.Factions,FactionConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Factions\FactionDBC.cs,ConvertTo,The following statement contains a magic number: for (var i = 0; i < entry.ClassMask.Length; i++)              {                  entry.ClassMask[i] = (ClassMask)GetUInt32(rawData' 6 + i);              }
Magic Number,WCell.RealmServer.Factions,FactionConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Factions\FactionDBC.cs,ConvertTo,The following statement contains a magic number: entry.BaseRepValue = new int[4];
Magic Number,WCell.RealmServer.Factions,FactionConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Factions\FactionDBC.cs,ConvertTo,The following statement contains a magic number: for (var i = 0; i < entry.BaseRepValue.Length; i++)              {                  entry.BaseRepValue[i] = GetInt32(rawData' 10 + i);              }
Magic Number,WCell.RealmServer.Factions,FactionConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Factions\FactionDBC.cs,ConvertTo,The following statement contains a magic number: entry.BaseFlags = new FactionFlags[4];
Magic Number,WCell.RealmServer.Factions,FactionConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Factions\FactionDBC.cs,ConvertTo,The following statement contains a magic number: for (var i = 0; i < entry.BaseFlags.Length; i++)              {                  entry.BaseFlags[i] = (FactionFlags)GetInt32(rawData' 14 + i);              }
Magic Number,WCell.RealmServer.Factions,FactionConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Factions\FactionDBC.cs,ConvertTo,The following statement contains a magic number: entry.ParentId = (FactionId)GetUInt32(rawData' 18);
Magic Number,WCell.RealmServer.Factions,FactionConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Factions\FactionDBC.cs,ConvertTo,The following statement contains a magic number: entry.Name = GetString(rawData' 23);
Magic Number,WCell.RealmServer.Factions,FactionTemplateConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Factions\FactionDBC.cs,ConvertTo,The following statement contains a magic number: entry.EnemyFactions = new FactionId[4];
Magic Number,WCell.RealmServer.Factions,FactionTemplateConverter,C:\repos\WCell_WCell\Services\WCell.RealmServer\Factions\FactionDBC.cs,ConvertTo,The following statement contains a magic number: entry.FriendlyFactions = new FactionId[4];
Magic Number,WCell.RealmServer.Factions,ReputationCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Factions\ReputationCollection.cs,GetDefaultReputationFlags,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {  				if ((entry.ClassMask[i] == 0 || entry.ClassMask[i].HasAnyFlag(Owner.ClassMask)) &&  					(entry.RaceMask[i] == 0 || entry.RaceMask[i].HasAnyFlag(Owner.RaceMask)))                  {                      return (ReputationFlags) entry.BaseFlags[i];                  }              }
Magic Number,WCell.RealmServer.Factions,ReputationCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Factions\ReputationCollection.cs,GetDefaultReputationValue,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {  				if ((entry.ClassMask[i] == 0 || entry.ClassMask[i].HasAnyFlag(Owner.ClassMask)) &&  					(entry.RaceMask[i] == 0 || entry.RaceMask[i].HasAnyFlag(Owner.RaceMask)))                  {                      return entry.BaseRepValue[i];                  }              }
Magic Number,WCell.RealmServer.Factions,ReputationCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Factions\ReputationCollection.cs,GetDiscountedCost,The following statement contains a magic number: return (cost * (100 - Reputation.GetReputationDiscountPct(lvl))) / 100;
Magic Number,WCell.RealmServer.Factions,ReputationCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Factions\ReputationCollection.cs,GetDiscountedCost,The following statement contains a magic number: return (cost * (100 - Reputation.GetReputationDiscountPct(lvl))) / 100;
Magic Number,WCell.RealmServer.Factions,ReputationCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Factions\ReputationCollection.cs,GainReputation,The following statement contains a magic number: value = value + (int)Math.Round(value * m_owner.ReputationGainModifierPercent / 100.0);
Magic Number,WCell.RealmServer.Waypoints,RandomWaypointGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Waypoints\RandomWaypointGenerator.cs,GenerateWaypoints,The following statement contains a magic number: return GenerateWaypoints(terrain' lastPos' 5' 10' 5' 10);
Magic Number,WCell.RealmServer.Waypoints,RandomWaypointGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Waypoints\RandomWaypointGenerator.cs,GenerateWaypoints,The following statement contains a magic number: return GenerateWaypoints(terrain' lastPos' 5' 10' 5' 10);
Magic Number,WCell.RealmServer.Waypoints,RandomWaypointGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Waypoints\RandomWaypointGenerator.cs,GenerateWaypoints,The following statement contains a magic number: return GenerateWaypoints(terrain' lastPos' 5' 10' 5' 10);
Magic Number,WCell.RealmServer.Waypoints,RandomWaypointGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Waypoints\RandomWaypointGenerator.cs,GenerateWaypoints,The following statement contains a magic number: return GenerateWaypoints(terrain' lastPos' 5' 10' 5' 10);
Magic Number,WCell.RealmServer.Waypoints,RandomWaypointGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Waypoints\RandomWaypointGenerator.cs,GenerateWaypoints,The following statement contains a magic number: var count = (int)(Math.Min(1.0f' area) / 5) * 2;
Magic Number,WCell.RealmServer.Waypoints,RandomWaypointGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Waypoints\RandomWaypointGenerator.cs,GenerateWaypoints,The following statement contains a magic number: var count = (int)(Math.Min(1.0f' area) / 5) * 2;
Magic Number,WCell.RealmServer.Waypoints,RandomWaypointGenerator,C:\repos\WCell_WCell\Services\WCell.RealmServer\Waypoints\RandomWaypointGenerator.cs,GenerateWaypoints,The following statement contains a magic number: count = Math.Max(3' count);
Duplicate Code,WCell.RealmServer.Spells.Auras,PlayerAuraCollection,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\Auras\PlayerAuraCollection.cs,OnCasted,The method contains a code clone-set at the following line numbers (starting from the method definition): ((8' 27)' (29' 48))
Missing Default,WCell.RealmServer.AI.Actions.Movement,AIWaypointMoveAction,C:\repos\WCell_WCell\Services\WCell.RealmServer\AI\Actions\Movement\AIWaypointMoveAction.cs,GetNextWaypoint,The following switch statement is missing a default case: switch (WaypointSequence)  			{  				case AIMovementType.ForwardThenStop:  					return CurrentWaypoint.Next;    				case AIMovementType.ForwardThenBack:  					if (!GoingBack)  					{  						if (CurrentWaypoint.Next != null)  							return CurrentWaypoint.Next;    						if (CurrentWaypoint.Previous != null)  						{  							GoingBack = true;  							return CurrentWaypoint.Previous;  						}  					}    					if (GoingBack)  					{  						if (CurrentWaypoint.Previous != null)  							return CurrentWaypoint.Previous;    						if (CurrentWaypoint.Next != null)  						{  							GoingBack = false;  							return CurrentWaypoint.Next;  						}  					}    					return null;    				case AIMovementType.ForwardThenFirst:  					if (CurrentWaypoint.Next != null)  						return CurrentWaypoint.Next;    					return Waypoints.First;  			}
Missing Default,WCell.RealmServer.Handlers,CombatLogHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\CombatLogHandler.cs,SendSpellLogExecute,The following switch statement is missing a default case: switch (effect)  					{  						case SpellEffectType.PowerDrain:  							{  								target.EntityId.WritePacked(packet);  								packet.Write(0);  								packet.Write(0);  								packet.Write(0.0f);  								break;  							}  						case SpellEffectType.AddExtraAttacks:  							{  								target.EntityId.WritePacked(packet);  								packet.Write(0);  								break;  							}  						case SpellEffectType.InterruptCast:  							{  								packet.Write(0); // spellId of interrupted spell  								break;  							}  						case SpellEffectType.DurabilityDamage:  							{  								packet.Write(0);  								packet.Write(0);  								break;  							}  						case SpellEffectType.OpenLock:  						case SpellEffectType.OpenLockItem:  							{  								if (target is Item)  								{  									target.EntityId.WritePacked(packet);  								}  								else  								{  									packet.Write((byte)0);  								}  								break;  							}  						case SpellEffectType.CreateItem:  						case SpellEffectType.CreateItem2:  							{  								packet.Write(0); // itemId  								break;  							}  						case SpellEffectType.Summon:  						case SpellEffectType.TransformItem:  						case SpellEffectType.SummonPet:  						case SpellEffectType.SummonObjectWild:  						case SpellEffectType.CreateHouse:  						case SpellEffectType.Duel:  						case SpellEffectType.SummonObjectSlot1:  						case SpellEffectType.SummonObjectSlot2:  						case SpellEffectType.SummonObjectSlot3:  						case SpellEffectType.SummonObjectSlot4:  							{  								if (target is Unit)  								{  									target.EntityId.WritePacked(packet); // summon recipient  								}  								else  								{  									packet.Write((byte)0);  								}  								break;  							}  						case SpellEffectType.FeedPet:  							{  								if (target is Item)  								{  									packet.Write(target.EntryId);  								}  								else  								{  									packet.Write(0);  								}  								break;  							}  						case SpellEffectType.DismissPet:  							{  								target.EntityId.WritePacked(packet);  								break;  							}  						case SpellEffectType.Resurrect:  						case SpellEffectType.ResurrectFlat:  							{  								if (target is Unit)  								{  									target.EntityId.WritePacked(packet);  								}  								else  								{  									packet.Write((byte)0);  								}  								break;  							}    					}
Missing Default,WCell.RealmServer.Handlers,MailHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MailHandler.cs,SendMailList,The following switch statement is missing a default case: switch (letter.MessageType)  					{  						case MailType.Normal:  							flags |= MailListFlags.Delete;  							if (letter.IncludedItemCount > 0)  							{  								flags |= MailListFlags.Return;  							}  							break;  						case MailType.Auction:  							flags |= MailListFlags.Auction;  							break;  					}
Missing Default,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,ConstructMultiWaypointMovePacket,The following switch statement is missing a default case: switch (moveType)  			{  				case MonsterMoveType.Normal:  					break;  				// TODO: implement other cases  				//case MonsterMoveType.Stop:  				//    {  				//        return packet;  				//    }  				//case MonsterMoveType.FinalFacingPoint:  				//    {  				//        // OnMonsterMove_final_facingSpot  				//        packet.Write(0.0f);  				//        packet.Write(0.0f);  				//        packet.Write(0.0f);  				//    }  				//case MonsterMoveType.FinalFacingGuid:  				//    {  				//        packet.Write(0ul);  				//    }  				//case MonsterMoveType.FinalFacingAngle:  				//    {  				//        // OnMonsterMove_final_facingAngle  				//        packet.Write(movingUnit.Orientation);  				//    }  			}
Missing Default,WCell.RealmServer.Handlers,MovementHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\MovementHandler.cs,SendTransferFailure,The following switch statement is missing a default case: switch (reason)  				{  					case MapTransferError.TRANSFER_ABORT_INSUF_EXPAN_LVL:  					case MapTransferError.TRANSFER_ABORT_DIFFICULTY:  					case MapTransferError.TRANSFER_ABORT_UNIQUE_MESSAGE:  						// only for these 3 cases!  						packet.Write((byte)arg);  						break;  				}
Missing Default,WCell.RealmServer.Spells,SpellCast,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellCast.AI.cs,TriggerProcOnCasted,The following switch statement is missing a default case: switch (Spell.DamageType)  			{  				case DamageType.None:  				{  					if (Spell.IsBeneficial)  					{  						casterProcFlags |= ProcTriggerFlags.DoneBeneficialSpell;  						targetProcFlags |= ProcTriggerFlags.ReceivedBeneficialSpell;  					}  					else if (Spell.IsHarmful)  					{  						casterProcFlags |= ProcTriggerFlags.DoneHarmfulSpell;  						targetProcFlags |= ProcTriggerFlags.ReceivedHarmfulSpell;  					}  					break;  				}    				case DamageType.Magic:  				{  					if (Spell.IsBeneficial)  					{  						casterProcFlags |= ProcTriggerFlags.DoneBeneficialMagicSpell;  						targetProcFlags |= ProcTriggerFlags.ReceivedBeneficialMagicSpell;  					}  					else if (Spell.IsHarmful)  					{  						casterProcFlags |= ProcTriggerFlags.DoneHarmfulMagicSpell;  						targetProcFlags |= ProcTriggerFlags.ReceivedHarmfulMagicSpell;  					}  					break;  				}    				case DamageType.Melee:  				{  					casterProcFlags |= ProcTriggerFlags.DoneMeleeSpell;  					targetProcFlags |= ProcTriggerFlags.ReceivedMeleeSpell;  					break;  				}    				case DamageType.Ranged:  				{  					if (Spell.IsAutoRepeating)  					{  						casterProcFlags |= ProcTriggerFlags.DoneRangedAutoAttack;  						targetProcFlags |= ProcTriggerFlags.ReceivedRangedAutoAttack;  					}  					else  					{  						casterProcFlags |= ProcTriggerFlags.DoneRangedSpell;  						targetProcFlags |= ProcTriggerFlags.ReceivedRangedSpell;  					}  					break;  				}  			}
Missing Default,WCell.RealmServer.Spells,SpellProcEventEntry,C:\repos\WCell_WCell\Services\WCell.RealmServer\Spells\SpellProcEventEntry.cs,GetSpellFamilyMask,The following switch statement is missing a default case: switch (index)  			{  				case EffectIndex.Zero: return SpellFamilyMask0;  				case EffectIndex.One: return SpellFamilyMask1;  				case EffectIndex.Two: return SpellFamilyMask2;  			}
Missing Default,WCell.RealmServer.Spells,SpellHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Handlers\SpellHandler.cs,ToClassId,The following switch statement is missing a default case: switch (classSet)  			{  				case SpellClassSet.Mage:  					return ClassId.Mage;  				case SpellClassSet.Warrior:  					return ClassId.Warrior;  				case SpellClassSet.Warlock:  					return ClassId.Warlock;  				case SpellClassSet.Priest:  					return ClassId.Priest;  				case SpellClassSet.Druid:  					return ClassId.Druid;  				case SpellClassSet.Rogue:  					return ClassId.Rogue;  				case SpellClassSet.Hunter:  					return ClassId.Hunter;  				case SpellClassSet.Paladin:  					return ClassId.Paladin;  				case SpellClassSet.Shaman:  					return ClassId.Shaman;  				case SpellClassSet.DeathKnight:  					return ClassId.DeathKnight;  			}
Missing Default,WCell.RealmServer.Battlegrounds.Arenas,ArenaTeamStats,C:\repos\WCell_WCell\Services\WCell.RealmServer\Battlegrounds\Arenas\ArenaTeamStats.cs,SetStats,The following switch statement is missing a default case: switch(stats)              {                  case ArenaTeamStatsTypes.STAT_TYPE_RATING:                      rating = value;                  break;                    case ArenaTeamStatsTypes.STAT_TYPE_GAMES_WEEK:                      gamesWeek = value;                  break;                    case ArenaTeamStatsTypes.STAT_TYPE_WINS_WEEK:                      winsWeek = value;                  break;                    case ArenaTeamStatsTypes.STAT_TYPE_GAMES_SEASON:                      gamesSeason = value;                  break;                    case ArenaTeamStatsTypes.STAT_TYPE_WINS_SEASON:                      winsSeason = value;                  break;              }
Missing Default,WCell.RealmServer.Entities,Character,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Character.Mechanics.cs,UpdateChancesByCombatRating,The following switch statement is missing a default case: switch (rating)  			{  				case CombatRating.Dodge:  					UnitUpdates.UpdateDodgeChance(this);  					break;  				case CombatRating.Parry:  					UnitUpdates.UpdateParryChance(this);  					break;  				case CombatRating.Block:  					UnitUpdates.UpdateBlockChance(this);  					break;  				case CombatRating.MeleeCritChance:  					UnitUpdates.UpdateCritChance(this);  					break;  				case CombatRating.RangedCritChance:  					UnitUpdates.UpdateCritChance(this);  					break;  				case CombatRating.SpellCritChance:  					UnitUpdates.UpdateSpellCritChance(this);  					break;  				case CombatRating.DefenseSkill:  					UnitUpdates.UpdateDefense(this);  					break;  				case CombatRating.MeleeHitChance:  					UnitUpdates.UpdateMeleeHitChance(this);  					break;  				case CombatRating.RangedHitChance:  					UnitUpdates.UpdateRangedHitChance(this);  					break;  				case CombatRating.Expertise:  					UnitUpdates.UpdateExpertise(this);  					break;  			}
Missing Default,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,GetOrInvalidateItem,The following switch statement is missing a default case: switch (slot)  			{  				case InventorySlotType.WeaponMainHand:  					return m_entry.CreateMainHandWeapon();  				case InventorySlotType.WeaponRanged:  					return m_entry.CreateRangedWeapon();  				case InventorySlotType.WeaponOffHand:  					return m_entry.CreateOffhandWeapon();  			}
Missing Default,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,GetLootId,The following switch statement is missing a default case: switch (lootType)  			{  				case LootEntryType.NPCCorpse:  					return m_entry.LootId;  				case LootEntryType.Skinning:  					return m_entry.SkinLootId;  				case LootEntryType.PickPocketing:  					return m_entry.PickPocketLootId;  			}
Missing Default,WCell.RealmServer.Entities,NPC,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\NPC.Mechanics.cs,SetPetAction,The following switch statement is missing a default case: switch (action)  			{  				case PetAction.Abandon:  					if (m_master is Character)  					{  						((Character)m_master).ActivePet = null;  					}  					break;  				case PetAction.Follow:  					HasPermissionToMove = true;  					break;  				case PetAction.Stay:  					HasPermissionToMove = false;  					break;  				case PetAction.Attack:  					HasPermissionToMove = true;  					var target = m_master.Target;  					if (target != null && MayAttack(target))  					{  						// remove all aggressors and make the new target a priority  						m_threatCollection.Clear();  						m_threatCollection[target] = int.MaxValue;  						m_brain.State = BrainState.Combat;  					}  					break;  			}
Missing Default,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,UpdateStat,The following switch statement is missing a default case: switch (stat)  			{  				case StatType.Strength:  					UpdateStrength();  					break;  				case StatType.Agility:  					UpdateAgility();  					break;  				case StatType.Stamina:  					UpdateStamina();  					break;  				case StatType.Intellect:  					UpdateIntellect();  					break;  				case StatType.Spirit:  					UpdateSpirit();  					break;  			}
Missing Default,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,GetWeapon,The following switch statement is missing a default case: switch (slot)  			{  				case EquipmentSlot.MainHand:  					return m_mainWeapon;  				case EquipmentSlot.ExtraWeapon:  					return m_RangedWeapon;  				case EquipmentSlot.OffHand:  					return m_offhandWeapon;  			}
Missing Default,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,GetWeapon,The following switch statement is missing a default case: switch (slot)  			{  				case InventorySlotType.WeaponMainHand:  					return m_mainWeapon;  				case InventorySlotType.WeaponRanged:  					return m_RangedWeapon;  				case InventorySlotType.WeaponOffHand:  					return m_offhandWeapon;  			}
Missing Default,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,SetWeapon,The following switch statement is missing a default case: switch (slot)  			{  				case InventorySlotType.WeaponMainHand:  					MainWeapon = weapon;  					break;  				case InventorySlotType.WeaponRanged:  					RangedWeapon = weapon;  					break;  				case InventorySlotType.WeaponOffHand:  					OffHandWeapon = weapon;  					break;  			}
Missing Default,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,IncMechanicCount,The following switch statement is missing a default case: switch (mechanic)  				{  					case SpellMechanic.Custom_Immolate:  						AuraState |= AuraStateMask.Immolate;  						break;  					case SpellMechanic.Frozen:  						AuraState |= AuraStateMask.Frozen;  						break;  					case SpellMechanic.Bleeding:  						AuraState |= AuraStateMask.Bleeding;  						break;  					case SpellMechanic.Mounted:  						UnitFlags |= UnitFlags.Mounted;  						SpeedFactor += MountSpeedMod;  						m_auras.RemoveByFlag(AuraInterruptFlags.OnMount);  						break;  					case SpellMechanic.Silenced:  						UnitFlags |= UnitFlags.Silenced;  						break;  					case SpellMechanic.Fleeing:  						UnitFlags |= UnitFlags.Feared;  						break;  					case SpellMechanic.Disoriented:  						UnitFlags |= UnitFlags.Confused;  						break;  					case SpellMechanic.Invulnerable:  						UnitFlags |= UnitFlags.SelectableNotAttackable;  						break;  					case SpellMechanic.Enraged:  						AuraState |= AuraStateMask.Enraged;  						break;  				}
Missing Default,WCell.RealmServer.Entities,Unit,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Unit.StatUpdates.cs,DecMechanicCount,The following switch statement is missing a default case: switch (mechanic)  					{  						case SpellMechanic.Custom_Immolate:  							AuraState ^= AuraStateMask.Immolate;  							break;  						case SpellMechanic.Frozen:  							AuraState ^= AuraStateMask.Frozen;  							break;  						case SpellMechanic.Bleeding:  							AuraState ^= AuraStateMask.Bleeding;  							break;  						case SpellMechanic.Mounted:  							UnitFlags &= ~UnitFlags.Mounted;  							SpeedFactor -= MountSpeedMod;  							break;  						case SpellMechanic.Silenced:  							UnitFlags &= ~UnitFlags.Silenced;  							break;  						case SpellMechanic.Fleeing:  							UnitFlags &= ~UnitFlags.Feared;  							break;  						case SpellMechanic.Disoriented:  							UnitFlags &= ~UnitFlags.Confused;  							break;  						case SpellMechanic.Invulnerable:  							UnitFlags &= ~UnitFlags.SelectableNotAttackable;  							break;  						case SpellMechanic.Enraged:  							AuraState &= ~AuraStateMask.Enraged;  							break;  					}
Missing Default,WCell.RealmServer.Entities,Item,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Item.Update.cs,OnEquipDecision,The following switch statement is missing a default case: switch (slot)  				{  					case InventorySlot.MainHand:  						m_owner.MainWeapon = this;  						return;  					case InventorySlot.OffHand:  						m_owner.OffHandWeapon = this;  						return;  					case InventorySlot.ExtraWeapon:  						m_owner.RangedWeapon = this;  						return;  				}
Missing Default,WCell.RealmServer.Entities,Item,C:\repos\WCell_WCell\Services\WCell.RealmServer\Entities\Item.Update.cs,OnUnequipDecision,The following switch statement is missing a default case: switch (slot)  				{  					case InventorySlot.MainHand:  						m_owner.MainWeapon = null;  						return;  					case InventorySlot.OffHand:  						m_owner.OffHandWeapon = null;  						return;  					case InventorySlot.ExtraWeapon:  						m_owner.RangedWeapon = null;  						return;  				}
Missing Default,WCell.RealmServer.Items,ItemTemplate,C:\repos\WCell_WCell\Services\WCell.RealmServer\Events\Entities\ItemEvents.cs,InitializeTemplate,The following switch statement is missing a default case: switch (Class)  			{  				case ItemClass.Weapon:  					ItemProfession = ItemProfessions.WeaponSubClassProfessions.Get((uint)SubClass);  					break;  				case ItemClass.Armor:  					ItemProfession = ItemProfessions.ArmorSubClassProfessions.Get((uint)SubClass);  					break;  			}
Missing Default,WCell.RealmServer.Interaction,RelationMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Social\RelationMgr.cs,CreateRelation,The following switch statement is missing a default case: switch (relationType)  			{  				case CharacterRelationType.Friend:  					return new FriendRelation(charId' relatedCharId);  				case CharacterRelationType.Ignored:  					return new IgnoredRelation(charId' relatedCharId);  				case CharacterRelationType.Muted:  					return new MutedRelation(charId' relatedCharId);  				case CharacterRelationType.GroupInvite:  					return new GroupInviteRelation(charId' relatedCharId);  				case CharacterRelationType.GuildInvite:  					return new GuildInviteRelation(charId' relatedCharId);  			}
Missing Default,WCell.RealmServer.Interaction,RelationMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Social\RelationMgr.cs,SendFriendStatus,The following switch statement is missing a default case: switch (relResult)  				{  					case RelationResult.FRIEND_DB_ERROR:  					case RelationResult.FRIEND_NOT_FOUND:  					case RelationResult.IGNORE_NOT_FOUND:  					case RelationResult.MUTED_NOT_FOUND:  					case RelationResult.FRIEND_ENEMY:  					case RelationResult.FRIEND_SELF:  					case RelationResult.FRIEND_ALREADY:  					case RelationResult.FRIEND_REMOVED:  					case RelationResult.IGNORE_SELF:  					case RelationResult.IGNORE_ALREADY:  					case RelationResult.IGNORE_ADDED:  					case RelationResult.IGNORE_REMOVED:  					case RelationResult.MUTED_SELF:  					case RelationResult.MUTED_ALREADY:  					case RelationResult.MUTED_ADDED:  					case RelationResult.MUTED_REMOVED:  						packet.Write(EntityId.GetPlayerId(friendId));  						break;  					case RelationResult.FRIEND_ADDED_OFFLINE:  						packet.Write(EntityId.GetPlayerId(friendId));  						packet.WriteCString(note);  						break;  					case RelationResult.FRIEND_OFFLINE:  						packet.Write(EntityId.GetPlayerId(friendId));  						packet.WriteByte((byte)CharacterStatus.OFFLINE);  						break;  				}
Missing Default,WCell.RealmServer.Interaction,RelationMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Social\RelationMgr.cs,GetDeleteRelationResult,The following switch statement is missing a default case: switch (relationType)  			{  				case CharacterRelationType.Friend:  					return RelationResult.FRIEND_REMOVED;  				case CharacterRelationType.Ignored:  					return RelationResult.IGNORE_REMOVED;  				case CharacterRelationType.Muted:  					return RelationResult.MUTED_REMOVED;  			}
Missing Default,WCell.RealmServer.Items.Enchanting,EnchantMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\Enchanting\EnchantMgr.cs,GetSuffixCategory,The following switch statement is missing a default case: switch (template.InventorySlotType)  			{  				case InventorySlotType.Head:  				case InventorySlotType.Body:  				case InventorySlotType.Chest:  				case InventorySlotType.Legs:  				case InventorySlotType.Robe:  					return ItemSuffixCategory.MainArmor;  				case InventorySlotType.Shoulder:  				case InventorySlotType.Waist:  				case InventorySlotType.Feet:  				case InventorySlotType.Hand:  				case InventorySlotType.Trinket:  					return ItemSuffixCategory.SecondaryArmor;  				case InventorySlotType.Neck:  				case InventorySlotType.Wrist:  				case InventorySlotType.Finger:  				case InventorySlotType.Shield:  				case InventorySlotType.Cloak:  				case InventorySlotType.Holdable:  					return ItemSuffixCategory.Other;  			}
Missing Default,WCell.RealmServer.Items.Enchanting,EnchantMgr,C:\repos\WCell_WCell\Services\WCell.RealmServer\Items\Enchanting\EnchantMgr.cs,GetRandomSuffixFactor,The following switch statement is missing a default case: switch (template.Quality)  				{  					case ItemQuality.Uncommon:  						return levelInfo.UncommonPoints[(uint)suffixCat];  					case ItemQuality.Rare:  						return levelInfo.RarePoints[(uint)suffixCat];  					case ItemQuality.Epic:  					case ItemQuality.Legendary:  					case ItemQuality.Artifact:  						return levelInfo.EpicPoints[(uint)suffixCat];  				}
Missing Default,WCell.RealmServer.Skills,SkillHandler,C:\repos\WCell_WCell\Services\WCell.RealmServer\Skills\Skills.DBC.cs,GetSkill,The following switch statement is missing a default case: switch (skinType)  			{  				case SkinningType.Skinning:  					return SkillId.Skinning;  				case SkinningType.Engineering:  					return SkillId.Engineering;  				case SkinningType.Herbalism:  					return SkillId.Herbalism;  				case SkinningType.Mining:  					return SkillId.Mining;  			}
