Implementation smell,Namespace,Class,File,Method,Description
Complex Method,WCell.Terrain.Extractor,HeightfieldExtractor,C:\repos\WCell_WCell\WCell-Terrain\WCell.Terrain.Extractor\HeightfieldExtractor.cs,ExtractHeightfield,Cyclomatic complexity of the method is 8
Complex Method,WCell.Terrain.Extractor,Extractor,C:\repos\WCell_WCell\WCell-Terrain\WCell.Terrain.Extractor\Extractor.cs,ExtractAndWriteAll,Cyclomatic complexity of the method is 8
Complex Method,WCell.Terrain.Extractor,Extractor,C:\repos\WCell_WCell\WCell-Terrain\WCell.Terrain.Extractor\Extractor.cs,CreateAndWriteAllMeshes,Cyclomatic complexity of the method is 8
Empty Catch Block,WCell.Terrain.Extractor,Extractor,C:\repos\WCell_WCell\WCell-Terrain\WCell.Terrain.Extractor\Extractor.cs,ExtractAndWriteAll,The method has an empty catch block.
Empty Catch Block,WCell.Terrain.Extractor,Extractor,C:\repos\WCell_WCell\WCell-Terrain\WCell.Terrain.Extractor\Extractor.cs,CreateAndWriteAllMeshes,The method has an empty catch block.
Magic Number,WCell.Terrain.Extractor,HeightfieldExtractor,C:\repos\WCell_WCell\WCell-Terrain\WCell.Terrain.Extractor\HeightfieldExtractor.cs,ExtractHeightfield,The following statement contains a magic number: for (var tileX = 0; tileX < TerrainConstants.TilesPerMapSide; tileX++)              {                  for (var tileY = 0; tileY < TerrainConstants.TilesPerMapSide; tileY++)                  {                      try                      {  						var fname = ADTReader.GetFilename(mapId' tileX' tileY);                      	long fsize;  						var archive = mpqFinder.GetArchive(fname);                          if (archive != null && (fsize = archive.GetFileSize(fname)) > 0)  						{                              //processedSize += fsize;                                var adt = ADTReader.ReadADT(wdt' tileX' tileY' false);                              Console.Write(@"Tile ({0}' {1}) in Map {2} has been read from {3}. Writing... "'  								tileX' tileY' mapId' Path.GetFileName(archive.Path));                                // write to file                              WriteHeightfield(adt);    							// stats  							++processedTiles;                              var timePassed = DateTime.Now - startTime;  							var timePerTile = timePassed.Ticks / processedTiles;  							var progress = processedTiles / (float)totalAmount;                              var timeRemaining = new TimeSpan((totalAmount - processedTiles) * timePerTile);                              Console.WriteLine(@"Done. [{0}/{1} {2:F2}% - {3} (Remaining: {4})]"'   								processedTiles'  								totalAmount'  								100 * progress'                                  timePassed.Format()'  								timeRemaining.Format());                              continue;                          }                      }                      catch (Exception e)                      {                          Console.WriteLine();                          LogUtil.ErrorException(e' @"Extraction FAILED: Tile ({0}' {1}) in Map {2} could not be loaded"' tileX' tileY' mapId);                          return false;                      }                  }              }
Magic Number,WCell.Terrain.Extractor,Extractor,C:\repos\WCell_WCell\WCell-Terrain\WCell.Terrain.Extractor\Extractor.cs,ExtractAndWriteAll,The following statement contains a magic number: foreach (MapId mapId in Enum.GetValues(typeof(MapId)))  			{  				var name = TileIdentifier.GetName(mapId);  				if (string.IsNullOrEmpty(name))  				{  					Console.WriteLine(@"No ADT for map {0}."' mapId);  					continue;  				}    				var terrain = new SimpleTerrain(mapId);    				for (var tileX = 0; tileX < 64; tileX++)  				{  					for (var tileY = 0; tileY < 64; tileY++)  					{  						string filePath;  						MpqLibrarian mpqFinder;  						if (!ADTReader.TryGetADTPath(mapId' tileX' tileY' out filePath' out mpqFinder))  							continue;  						// try to extract from MPQ  						//var adt = ADTReader.ReadADT(terrain' tileX' tileY);  						//Console.WriteLine(@"EXPORTING: Tile ({0}' {1}) in Map {2} ..."' tileX' tileY' mapId);  						//Console.WriteLine(@"Extraction will take a while' please have patience...");    						try  						{  							var adt = WDT.LoadTile(mapId' tileX' tileY);  							if (adt != null)  							{  								Console.WriteLine(@"Tile ({0}' {1}) in Map {2} has been imported..."' tileX' tileY' mapId);  								Console.WriteLine(@"Writing to file...");    								// export to file  								SimpleTileWriter.WriteADT(adt);    								// try loading again  								Console.WriteLine(@"Loading extracted tile and generating Navigation mesh...");  								terrain.ForceLoadTile(tileX' tileY);    								if (terrain.IsAvailable(tileX' tileY))  								{  									Console.WriteLine(@"Done. Tile ({0}' {1}) in Map {2} has been loaded successfully."' tileX' tileY' mapId);  									continue;  								}  							}  						}  						catch (ArgumentException)  						{  						}    						Console.WriteLine(@"Loading FAILED: Tile ({0}' {1}) in Map {2} could not be loaded"' tileX' tileY' mapId);  					}  				}  			}
Magic Number,WCell.Terrain.Extractor,Extractor,C:\repos\WCell_WCell\WCell-Terrain\WCell.Terrain.Extractor\Extractor.cs,ExtractAndWriteAll,The following statement contains a magic number: foreach (MapId mapId in Enum.GetValues(typeof(MapId)))  			{  				var name = TileIdentifier.GetName(mapId);  				if (string.IsNullOrEmpty(name))  				{  					Console.WriteLine(@"No ADT for map {0}."' mapId);  					continue;  				}    				var terrain = new SimpleTerrain(mapId);    				for (var tileX = 0; tileX < 64; tileX++)  				{  					for (var tileY = 0; tileY < 64; tileY++)  					{  						string filePath;  						MpqLibrarian mpqFinder;  						if (!ADTReader.TryGetADTPath(mapId' tileX' tileY' out filePath' out mpqFinder))  							continue;  						// try to extract from MPQ  						//var adt = ADTReader.ReadADT(terrain' tileX' tileY);  						//Console.WriteLine(@"EXPORTING: Tile ({0}' {1}) in Map {2} ..."' tileX' tileY' mapId);  						//Console.WriteLine(@"Extraction will take a while' please have patience...");    						try  						{  							var adt = WDT.LoadTile(mapId' tileX' tileY);  							if (adt != null)  							{  								Console.WriteLine(@"Tile ({0}' {1}) in Map {2} has been imported..."' tileX' tileY' mapId);  								Console.WriteLine(@"Writing to file...");    								// export to file  								SimpleTileWriter.WriteADT(adt);    								// try loading again  								Console.WriteLine(@"Loading extracted tile and generating Navigation mesh...");  								terrain.ForceLoadTile(tileX' tileY);    								if (terrain.IsAvailable(tileX' tileY))  								{  									Console.WriteLine(@"Done. Tile ({0}' {1}) in Map {2} has been loaded successfully."' tileX' tileY' mapId);  									continue;  								}  							}  						}  						catch (ArgumentException)  						{  						}    						Console.WriteLine(@"Loading FAILED: Tile ({0}' {1}) in Map {2} could not be loaded"' tileX' tileY' mapId);  					}  				}  			}
Magic Number,WCell.Terrain.Extractor,Extractor,C:\repos\WCell_WCell\WCell-Terrain\WCell.Terrain.Extractor\Extractor.cs,CreateAndWriteAllMeshes,The following statement contains a magic number: GC.AddMemoryPressure(1*1024*1024*1024);
Magic Number,WCell.Terrain.Extractor,Extractor,C:\repos\WCell_WCell\WCell-Terrain\WCell.Terrain.Extractor\Extractor.cs,CreateAndWriteAllMeshes,The following statement contains a magic number: GC.AddMemoryPressure(1*1024*1024*1024);
Magic Number,WCell.Terrain.Extractor,Extractor,C:\repos\WCell_WCell\WCell-Terrain\WCell.Terrain.Extractor\Extractor.cs,CreateAndWriteAllMeshes,The following statement contains a magic number: GC.AddMemoryPressure(1*1024*1024*1024);
Magic Number,WCell.Terrain.Extractor,Extractor,C:\repos\WCell_WCell\WCell-Terrain\WCell.Terrain.Extractor\Extractor.cs,CreateAndWriteAllMeshes,The following statement contains a magic number: foreach (MapId mapId in Enum.GetValues(typeof(MapId)))  			{  				var name = TileIdentifier.GetName(mapId);  				if (string.IsNullOrEmpty(name))  				{  					Console.WriteLine(@"No ADT for map {0}."' mapId);  					continue;  				}    				var terrain = new SimpleTerrain(mapId);    				for (var tileX = 0; tileX < 64; tileX++)  				{  					for (var tileY = 0; tileY < 64; tileY++)  					{  						string filePath;  						MpqLibrarian mpqFinder;  						if (!ADTReader.TryGetADTPath(mapId' tileX' tileY' out filePath' out mpqFinder))  							continue;    						try  						{  							var adt = WDT.LoadTile(mapId' tileX' tileY);  							if (adt != null)  							{  								// try loading  								Console.WriteLine(@"Loading extracted tile and generating Navigation mesh...");  								terrain.ForceLoadTile(tileX' tileY);    								if (terrain.IsAvailable(tileX' tileY))  								{  									Console.WriteLine(@"Done. Tile ({0}' {1}) in Map {2} has been loaded successfully."' tileX' tileY' mapId);  									terrain.Tiles[tileX' tileY] = null;  									continue;  								}  							}  						}  						catch (ArgumentException)  						{  						}    						Console.WriteLine(@"Extracting FAILED: Tile ({0}' {1}) in Map {2} could not be loaded"' tileX' tileY' mapId);  					}  				}  			}
Magic Number,WCell.Terrain.Extractor,Extractor,C:\repos\WCell_WCell\WCell-Terrain\WCell.Terrain.Extractor\Extractor.cs,CreateAndWriteAllMeshes,The following statement contains a magic number: foreach (MapId mapId in Enum.GetValues(typeof(MapId)))  			{  				var name = TileIdentifier.GetName(mapId);  				if (string.IsNullOrEmpty(name))  				{  					Console.WriteLine(@"No ADT for map {0}."' mapId);  					continue;  				}    				var terrain = new SimpleTerrain(mapId);    				for (var tileX = 0; tileX < 64; tileX++)  				{  					for (var tileY = 0; tileY < 64; tileY++)  					{  						string filePath;  						MpqLibrarian mpqFinder;  						if (!ADTReader.TryGetADTPath(mapId' tileX' tileY' out filePath' out mpqFinder))  							continue;    						try  						{  							var adt = WDT.LoadTile(mapId' tileX' tileY);  							if (adt != null)  							{  								// try loading  								Console.WriteLine(@"Loading extracted tile and generating Navigation mesh...");  								terrain.ForceLoadTile(tileX' tileY);    								if (terrain.IsAvailable(tileX' tileY))  								{  									Console.WriteLine(@"Done. Tile ({0}' {1}) in Map {2} has been loaded successfully."' tileX' tileY' mapId);  									terrain.Tiles[tileX' tileY] = null;  									continue;  								}  							}  						}  						catch (ArgumentException)  						{  						}    						Console.WriteLine(@"Extracting FAILED: Tile ({0}' {1}) in Map {2} could not be loaded"' tileX' tileY' mapId);  					}  				}  			}
Magic Number,WCell.Terrain.Extractor,Extractor,C:\repos\WCell_WCell\WCell-Terrain\WCell.Terrain.Extractor\Extractor.cs,CreateAndWriteAllMeshes,The following statement contains a magic number: GC.RemoveMemoryPressure(1*1024*1024*1024);
Magic Number,WCell.Terrain.Extractor,Extractor,C:\repos\WCell_WCell\WCell-Terrain\WCell.Terrain.Extractor\Extractor.cs,CreateAndWriteAllMeshes,The following statement contains a magic number: GC.RemoveMemoryPressure(1*1024*1024*1024);
Magic Number,WCell.Terrain.Extractor,Extractor,C:\repos\WCell_WCell\WCell-Terrain\WCell.Terrain.Extractor\Extractor.cs,CreateAndWriteAllMeshes,The following statement contains a magic number: GC.RemoveMemoryPressure(1*1024*1024*1024);
