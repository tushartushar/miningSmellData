Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Microsoft.Research.Naiad.Examples,Program,C:\repos\MicrosoftResearch_Naiad\NugetSample\Program.cs,Main,The length of the statement  "                Console.Error.WriteLine("Running connected components on a random graph ({0} nodes' {1} edges)."' nodeCount' edgeCount); " is 120.
Long Statement,Microsoft.Research.Naiad.Examples,Program,C:\repos\MicrosoftResearch_Naiad\NugetSample\Program.cs,Main,The length of the statement  "                    Func<IntPair' int> priorityFunction = node => 65536 * (node.t < 10 ? node.t : 10 + Convert.ToInt32(Math.Log(1 + node.t) / Math.Log(2.0))); " is 138.
Long Statement,Microsoft.Research.Naiad.Examples,Program,C:\repos\MicrosoftResearch_Naiad\NugetSample\Program.cs,Main,The length of the statement  "                    var componentSizes = labeledVertices.Count(n => n.t' (l' c) => new Pair<int' long>(l' c)); // counts results with each label " is 124.
Magic Number,Microsoft.Research.Naiad.Examples,Program,C:\repos\MicrosoftResearch_Naiad\NugetSample\Program.cs,Main,The following statement contains a magic number: using (var controller = NewController.FromArgs(ref args))              {                  if (args.Length < 3)                  {                      Console.Error.WriteLine("Usage: results_container_name node_count edge_count");                      System.Environment.Exit(0);                  }                    string containerName = args[0];                  int nodeCount = Convert.ToInt32(args[1]);                  int edgeCount = Convert.ToInt32(args[2]);                    // To write the results to the command line' leave this line                  string connectionString = null;                    // For Azure storage emulator' uncomment this line                  // string connectionString = "UseDevelopmentStorage=true;";                                    // To use Windows Azure Storage' uncomment this line' and substitute your account name and key:                  // string connectionString = "DefaultEndpointsProtocol=https;AccountName=[Account name];AccountKey=[Account key]";                    Console.Error.WriteLine("Running connected components on a random graph ({0} nodes' {1} edges)."' nodeCount' edgeCount);                  if (connectionString != null)                   {                      Console.Error.WriteLine("Writing results to container {0}"' containerName);                  }                  else                  {                      Console.Error.WriteLine("Writing results to console");                  }                    // generate a random graph                  var random = new Random(0);                  var graph = new IntPair[edgeCount];                  for (int i = 0; i < edgeCount; i++)                      graph[i] = new IntPair(random.Next(nodeCount)' random.Next(nodeCount));                    var stopwatch = System.Diagnostics.Stopwatch.StartNew();                    using (var computation = controller.NewComputation())                  {                      // set up the CC computation                      var edges = computation.NewInputCollection<IntPair>();                        // no prioritization; uncomment this and comment the next for slowness!                      // Func<IntPair' int> priorityFunction = node => 0;                        // Introduce labels in priority order. Labels 0 through 9 inclusive are introduced sequentially'                      // following by exponentially-growing sets of labels.                      Func<IntPair' int> priorityFunction = node => 65536 * (node.t < 10 ? node.t : 10 + Convert.ToInt32(Math.Log(1 + node.t) / Math.Log(2.0)));                        // Perform the connected components algorithm on the collection of edges.                      var labeledVertices = edges.ConnectedComponents(priorityFunction);                        // Count the number of vertices in each component.                      var componentSizes = labeledVertices.Count(n => n.t' (l' c) => new Pair<int' long>(l' c)); // counts results with each label                        // Ignore the labels and consolidate to find the number of components having each size.                      var sizeDistribution = componentSizes.Select(x => x.Second).Consolidate();                        if (connectionString != null)                      {                          var account = CloudStorageAccount.Parse(connectionString);                          var container = account.CreateCloudBlobClient().GetContainerReference(containerName);                          container.CreateIfNotExists();                            // Write the results to the given Azure blob container' with filename "componentSizes-part-i" for process i.                          sizeDistribution.Output                                          .WriteTextToAzureBlobs(container' "componentSizes-part-{0}-{1}");                      }                      else                      {                          // Write the results to the console.                          sizeDistribution.Subscribe(xs => { foreach (var x in xs) Console.WriteLine(x); });                      }                                            computation.Activate();                        edges.OnCompleted(controller.Configuration.ProcessID == 0 ? graph : Enumerable.Empty<IntPair>());                        computation.Join();                  }                    controller.Join();              }
Magic Number,Microsoft.Research.Naiad.Examples,Program,C:\repos\MicrosoftResearch_Naiad\NugetSample\Program.cs,Main,The following statement contains a magic number: using (var controller = NewController.FromArgs(ref args))              {                  if (args.Length < 3)                  {                      Console.Error.WriteLine("Usage: results_container_name node_count edge_count");                      System.Environment.Exit(0);                  }                    string containerName = args[0];                  int nodeCount = Convert.ToInt32(args[1]);                  int edgeCount = Convert.ToInt32(args[2]);                    // To write the results to the command line' leave this line                  string connectionString = null;                    // For Azure storage emulator' uncomment this line                  // string connectionString = "UseDevelopmentStorage=true;";                                    // To use Windows Azure Storage' uncomment this line' and substitute your account name and key:                  // string connectionString = "DefaultEndpointsProtocol=https;AccountName=[Account name];AccountKey=[Account key]";                    Console.Error.WriteLine("Running connected components on a random graph ({0} nodes' {1} edges)."' nodeCount' edgeCount);                  if (connectionString != null)                   {                      Console.Error.WriteLine("Writing results to container {0}"' containerName);                  }                  else                  {                      Console.Error.WriteLine("Writing results to console");                  }                    // generate a random graph                  var random = new Random(0);                  var graph = new IntPair[edgeCount];                  for (int i = 0; i < edgeCount; i++)                      graph[i] = new IntPair(random.Next(nodeCount)' random.Next(nodeCount));                    var stopwatch = System.Diagnostics.Stopwatch.StartNew();                    using (var computation = controller.NewComputation())                  {                      // set up the CC computation                      var edges = computation.NewInputCollection<IntPair>();                        // no prioritization; uncomment this and comment the next for slowness!                      // Func<IntPair' int> priorityFunction = node => 0;                        // Introduce labels in priority order. Labels 0 through 9 inclusive are introduced sequentially'                      // following by exponentially-growing sets of labels.                      Func<IntPair' int> priorityFunction = node => 65536 * (node.t < 10 ? node.t : 10 + Convert.ToInt32(Math.Log(1 + node.t) / Math.Log(2.0)));                        // Perform the connected components algorithm on the collection of edges.                      var labeledVertices = edges.ConnectedComponents(priorityFunction);                        // Count the number of vertices in each component.                      var componentSizes = labeledVertices.Count(n => n.t' (l' c) => new Pair<int' long>(l' c)); // counts results with each label                        // Ignore the labels and consolidate to find the number of components having each size.                      var sizeDistribution = componentSizes.Select(x => x.Second).Consolidate();                        if (connectionString != null)                      {                          var account = CloudStorageAccount.Parse(connectionString);                          var container = account.CreateCloudBlobClient().GetContainerReference(containerName);                          container.CreateIfNotExists();                            // Write the results to the given Azure blob container' with filename "componentSizes-part-i" for process i.                          sizeDistribution.Output                                          .WriteTextToAzureBlobs(container' "componentSizes-part-{0}-{1}");                      }                      else                      {                          // Write the results to the console.                          sizeDistribution.Subscribe(xs => { foreach (var x in xs) Console.WriteLine(x); });                      }                                            computation.Activate();                        edges.OnCompleted(controller.Configuration.ProcessID == 0 ? graph : Enumerable.Empty<IntPair>());                        computation.Join();                  }                    controller.Join();              }
Magic Number,Microsoft.Research.Naiad.Examples,Program,C:\repos\MicrosoftResearch_Naiad\NugetSample\Program.cs,Main,The following statement contains a magic number: using (var controller = NewController.FromArgs(ref args))              {                  if (args.Length < 3)                  {                      Console.Error.WriteLine("Usage: results_container_name node_count edge_count");                      System.Environment.Exit(0);                  }                    string containerName = args[0];                  int nodeCount = Convert.ToInt32(args[1]);                  int edgeCount = Convert.ToInt32(args[2]);                    // To write the results to the command line' leave this line                  string connectionString = null;                    // For Azure storage emulator' uncomment this line                  // string connectionString = "UseDevelopmentStorage=true;";                                    // To use Windows Azure Storage' uncomment this line' and substitute your account name and key:                  // string connectionString = "DefaultEndpointsProtocol=https;AccountName=[Account name];AccountKey=[Account key]";                    Console.Error.WriteLine("Running connected components on a random graph ({0} nodes' {1} edges)."' nodeCount' edgeCount);                  if (connectionString != null)                   {                      Console.Error.WriteLine("Writing results to container {0}"' containerName);                  }                  else                  {                      Console.Error.WriteLine("Writing results to console");                  }                    // generate a random graph                  var random = new Random(0);                  var graph = new IntPair[edgeCount];                  for (int i = 0; i < edgeCount; i++)                      graph[i] = new IntPair(random.Next(nodeCount)' random.Next(nodeCount));                    var stopwatch = System.Diagnostics.Stopwatch.StartNew();                    using (var computation = controller.NewComputation())                  {                      // set up the CC computation                      var edges = computation.NewInputCollection<IntPair>();                        // no prioritization; uncomment this and comment the next for slowness!                      // Func<IntPair' int> priorityFunction = node => 0;                        // Introduce labels in priority order. Labels 0 through 9 inclusive are introduced sequentially'                      // following by exponentially-growing sets of labels.                      Func<IntPair' int> priorityFunction = node => 65536 * (node.t < 10 ? node.t : 10 + Convert.ToInt32(Math.Log(1 + node.t) / Math.Log(2.0)));                        // Perform the connected components algorithm on the collection of edges.                      var labeledVertices = edges.ConnectedComponents(priorityFunction);                        // Count the number of vertices in each component.                      var componentSizes = labeledVertices.Count(n => n.t' (l' c) => new Pair<int' long>(l' c)); // counts results with each label                        // Ignore the labels and consolidate to find the number of components having each size.                      var sizeDistribution = componentSizes.Select(x => x.Second).Consolidate();                        if (connectionString != null)                      {                          var account = CloudStorageAccount.Parse(connectionString);                          var container = account.CreateCloudBlobClient().GetContainerReference(containerName);                          container.CreateIfNotExists();                            // Write the results to the given Azure blob container' with filename "componentSizes-part-i" for process i.                          sizeDistribution.Output                                          .WriteTextToAzureBlobs(container' "componentSizes-part-{0}-{1}");                      }                      else                      {                          // Write the results to the console.                          sizeDistribution.Subscribe(xs => { foreach (var x in xs) Console.WriteLine(x); });                      }                                            computation.Activate();                        edges.OnCompleted(controller.Configuration.ProcessID == 0 ? graph : Enumerable.Empty<IntPair>());                        computation.Join();                  }                    controller.Join();              }
Magic Number,Microsoft.Research.Naiad.Examples,Program,C:\repos\MicrosoftResearch_Naiad\NugetSample\Program.cs,Main,The following statement contains a magic number: using (var controller = NewController.FromArgs(ref args))              {                  if (args.Length < 3)                  {                      Console.Error.WriteLine("Usage: results_container_name node_count edge_count");                      System.Environment.Exit(0);                  }                    string containerName = args[0];                  int nodeCount = Convert.ToInt32(args[1]);                  int edgeCount = Convert.ToInt32(args[2]);                    // To write the results to the command line' leave this line                  string connectionString = null;                    // For Azure storage emulator' uncomment this line                  // string connectionString = "UseDevelopmentStorage=true;";                                    // To use Windows Azure Storage' uncomment this line' and substitute your account name and key:                  // string connectionString = "DefaultEndpointsProtocol=https;AccountName=[Account name];AccountKey=[Account key]";                    Console.Error.WriteLine("Running connected components on a random graph ({0} nodes' {1} edges)."' nodeCount' edgeCount);                  if (connectionString != null)                   {                      Console.Error.WriteLine("Writing results to container {0}"' containerName);                  }                  else                  {                      Console.Error.WriteLine("Writing results to console");                  }                    // generate a random graph                  var random = new Random(0);                  var graph = new IntPair[edgeCount];                  for (int i = 0; i < edgeCount; i++)                      graph[i] = new IntPair(random.Next(nodeCount)' random.Next(nodeCount));                    var stopwatch = System.Diagnostics.Stopwatch.StartNew();                    using (var computation = controller.NewComputation())                  {                      // set up the CC computation                      var edges = computation.NewInputCollection<IntPair>();                        // no prioritization; uncomment this and comment the next for slowness!                      // Func<IntPair' int> priorityFunction = node => 0;                        // Introduce labels in priority order. Labels 0 through 9 inclusive are introduced sequentially'                      // following by exponentially-growing sets of labels.                      Func<IntPair' int> priorityFunction = node => 65536 * (node.t < 10 ? node.t : 10 + Convert.ToInt32(Math.Log(1 + node.t) / Math.Log(2.0)));                        // Perform the connected components algorithm on the collection of edges.                      var labeledVertices = edges.ConnectedComponents(priorityFunction);                        // Count the number of vertices in each component.                      var componentSizes = labeledVertices.Count(n => n.t' (l' c) => new Pair<int' long>(l' c)); // counts results with each label                        // Ignore the labels and consolidate to find the number of components having each size.                      var sizeDistribution = componentSizes.Select(x => x.Second).Consolidate();                        if (connectionString != null)                      {                          var account = CloudStorageAccount.Parse(connectionString);                          var container = account.CreateCloudBlobClient().GetContainerReference(containerName);                          container.CreateIfNotExists();                            // Write the results to the given Azure blob container' with filename "componentSizes-part-i" for process i.                          sizeDistribution.Output                                          .WriteTextToAzureBlobs(container' "componentSizes-part-{0}-{1}");                      }                      else                      {                          // Write the results to the console.                          sizeDistribution.Subscribe(xs => { foreach (var x in xs) Console.WriteLine(x); });                      }                                            computation.Activate();                        edges.OnCompleted(controller.Configuration.ProcessID == 0 ? graph : Enumerable.Empty<IntPair>());                        computation.Join();                  }                    controller.Join();              }
Magic Number,Microsoft.Research.Naiad.Examples,Program,C:\repos\MicrosoftResearch_Naiad\NugetSample\Program.cs,Main,The following statement contains a magic number: using (var controller = NewController.FromArgs(ref args))              {                  if (args.Length < 3)                  {                      Console.Error.WriteLine("Usage: results_container_name node_count edge_count");                      System.Environment.Exit(0);                  }                    string containerName = args[0];                  int nodeCount = Convert.ToInt32(args[1]);                  int edgeCount = Convert.ToInt32(args[2]);                    // To write the results to the command line' leave this line                  string connectionString = null;                    // For Azure storage emulator' uncomment this line                  // string connectionString = "UseDevelopmentStorage=true;";                                    // To use Windows Azure Storage' uncomment this line' and substitute your account name and key:                  // string connectionString = "DefaultEndpointsProtocol=https;AccountName=[Account name];AccountKey=[Account key]";                    Console.Error.WriteLine("Running connected components on a random graph ({0} nodes' {1} edges)."' nodeCount' edgeCount);                  if (connectionString != null)                   {                      Console.Error.WriteLine("Writing results to container {0}"' containerName);                  }                  else                  {                      Console.Error.WriteLine("Writing results to console");                  }                    // generate a random graph                  var random = new Random(0);                  var graph = new IntPair[edgeCount];                  for (int i = 0; i < edgeCount; i++)                      graph[i] = new IntPair(random.Next(nodeCount)' random.Next(nodeCount));                    var stopwatch = System.Diagnostics.Stopwatch.StartNew();                    using (var computation = controller.NewComputation())                  {                      // set up the CC computation                      var edges = computation.NewInputCollection<IntPair>();                        // no prioritization; uncomment this and comment the next for slowness!                      // Func<IntPair' int> priorityFunction = node => 0;                        // Introduce labels in priority order. Labels 0 through 9 inclusive are introduced sequentially'                      // following by exponentially-growing sets of labels.                      Func<IntPair' int> priorityFunction = node => 65536 * (node.t < 10 ? node.t : 10 + Convert.ToInt32(Math.Log(1 + node.t) / Math.Log(2.0)));                        // Perform the connected components algorithm on the collection of edges.                      var labeledVertices = edges.ConnectedComponents(priorityFunction);                        // Count the number of vertices in each component.                      var componentSizes = labeledVertices.Count(n => n.t' (l' c) => new Pair<int' long>(l' c)); // counts results with each label                        // Ignore the labels and consolidate to find the number of components having each size.                      var sizeDistribution = componentSizes.Select(x => x.Second).Consolidate();                        if (connectionString != null)                      {                          var account = CloudStorageAccount.Parse(connectionString);                          var container = account.CreateCloudBlobClient().GetContainerReference(containerName);                          container.CreateIfNotExists();                            // Write the results to the given Azure blob container' with filename "componentSizes-part-i" for process i.                          sizeDistribution.Output                                          .WriteTextToAzureBlobs(container' "componentSizes-part-{0}-{1}");                      }                      else                      {                          // Write the results to the console.                          sizeDistribution.Subscribe(xs => { foreach (var x in xs) Console.WriteLine(x); });                      }                                            computation.Activate();                        edges.OnCompleted(controller.Configuration.ProcessID == 0 ? graph : Enumerable.Empty<IntPair>());                        computation.Join();                  }                    controller.Join();              }
Magic Number,Microsoft.Research.Naiad.Examples,Program,C:\repos\MicrosoftResearch_Naiad\NugetSample\Program.cs,Main,The following statement contains a magic number: using (var controller = NewController.FromArgs(ref args))              {                  if (args.Length < 3)                  {                      Console.Error.WriteLine("Usage: results_container_name node_count edge_count");                      System.Environment.Exit(0);                  }                    string containerName = args[0];                  int nodeCount = Convert.ToInt32(args[1]);                  int edgeCount = Convert.ToInt32(args[2]);                    // To write the results to the command line' leave this line                  string connectionString = null;                    // For Azure storage emulator' uncomment this line                  // string connectionString = "UseDevelopmentStorage=true;";                                    // To use Windows Azure Storage' uncomment this line' and substitute your account name and key:                  // string connectionString = "DefaultEndpointsProtocol=https;AccountName=[Account name];AccountKey=[Account key]";                    Console.Error.WriteLine("Running connected components on a random graph ({0} nodes' {1} edges)."' nodeCount' edgeCount);                  if (connectionString != null)                   {                      Console.Error.WriteLine("Writing results to container {0}"' containerName);                  }                  else                  {                      Console.Error.WriteLine("Writing results to console");                  }                    // generate a random graph                  var random = new Random(0);                  var graph = new IntPair[edgeCount];                  for (int i = 0; i < edgeCount; i++)                      graph[i] = new IntPair(random.Next(nodeCount)' random.Next(nodeCount));                    var stopwatch = System.Diagnostics.Stopwatch.StartNew();                    using (var computation = controller.NewComputation())                  {                      // set up the CC computation                      var edges = computation.NewInputCollection<IntPair>();                        // no prioritization; uncomment this and comment the next for slowness!                      // Func<IntPair' int> priorityFunction = node => 0;                        // Introduce labels in priority order. Labels 0 through 9 inclusive are introduced sequentially'                      // following by exponentially-growing sets of labels.                      Func<IntPair' int> priorityFunction = node => 65536 * (node.t < 10 ? node.t : 10 + Convert.ToInt32(Math.Log(1 + node.t) / Math.Log(2.0)));                        // Perform the connected components algorithm on the collection of edges.                      var labeledVertices = edges.ConnectedComponents(priorityFunction);                        // Count the number of vertices in each component.                      var componentSizes = labeledVertices.Count(n => n.t' (l' c) => new Pair<int' long>(l' c)); // counts results with each label                        // Ignore the labels and consolidate to find the number of components having each size.                      var sizeDistribution = componentSizes.Select(x => x.Second).Consolidate();                        if (connectionString != null)                      {                          var account = CloudStorageAccount.Parse(connectionString);                          var container = account.CreateCloudBlobClient().GetContainerReference(containerName);                          container.CreateIfNotExists();                            // Write the results to the given Azure blob container' with filename "componentSizes-part-i" for process i.                          sizeDistribution.Output                                          .WriteTextToAzureBlobs(container' "componentSizes-part-{0}-{1}");                      }                      else                      {                          // Write the results to the console.                          sizeDistribution.Subscribe(xs => { foreach (var x in xs) Console.WriteLine(x); });                      }                                            computation.Activate();                        edges.OnCompleted(controller.Configuration.ProcessID == 0 ? graph : Enumerable.Empty<IntPair>());                        computation.Join();                  }                    controller.Join();              }
