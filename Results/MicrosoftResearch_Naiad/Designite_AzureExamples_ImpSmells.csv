Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Microsoft.Research.Naiad.AzureExamples,ExtensionMethods,C:\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\ConnectedComponents.cs,StreamingAggregate,The length of the statement  "                return Foundry.NewUnaryStage(input' (i' s) => new StreamingAggregateVertex<TKey' TValue' IterationIn<TTime>>(i' s' aggregate)' x => x.First.GetHashCode()' x => x.First.GetHashCode()' "StreamingAggregate"); " is 205.
Long Statement,Microsoft.Research.Naiad.AzureExamples,ExtensionMethods,C:\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\ConnectedComponents.cs,BlockingAggregate,The length of the statement  "                return Foundry.NewUnaryStage(input' (i' s) => new BlockingAggregateVertex<TKey' TValue' TTime>(i' s' aggregate)' x => x.First.GetHashCode()' x => x.First.GetHashCode()' "BlockingAggregate"); " is 190.
Long Statement,Microsoft.Research.Naiad.AzureExamples,ExtensionMethods,C:\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\ConnectedComponents.cs,GraphJoin,The length of the statement  "                return Foundry.NewBinaryStage(edges' values' (i' s) => new GraphJoinVertex<TVertex' TState' TTime>(i' s)' x => x.First.GetHashCode()' y => y.First.GetHashCode()' null' "GraphJoin"); " is 181.
Long Statement,Microsoft.Research.Naiad.AzureExamples,Repartition,C:\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\Repartition.cs,Execute,The length of the statement  "                        Console.Error.WriteLine("ERROR: Input directory name ({0}) equals output directory name ({1})"' inputDirectory' outputDirectory); " is 129.
Long Statement,Microsoft.Research.Naiad.AzureExamples.GraphLINQ,PageRank,C:\repos\MicrosoftResearch_Naiad\AzureExamples\GraphLINQ\PageRank.cs,Execute,The length of the statement  "                computation.OnFrontierChange += (x' y) => { Console.WriteLine(stopwatch.Elapsed + "\t" + string.Join("' "' y.NewFrontier)); Console.Out.Flush(); }; " is 147.
Magic Number,Microsoft.Research.Naiad.AzureExamples,ConnectedComponents,C:\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\ConnectedComponents.cs,Execute,The following statement contains a magic number: var directoryName = args[2];
Magic Number,Microsoft.Research.Naiad.AzureExamples,ConnectedComponents,C:\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\ConnectedComponents.cs,Execute,The following statement contains a magic number: var outputblobName = args[3];
Magic Number,Microsoft.Research.Naiad.AzureExamples,StreamingAggregateVertex<TKey;TValue;TTime>,C:\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\ConnectedComponents.cs,StreamingAggregateVertex,The following statement contains a magic number: this.Entrancy = 5;
Magic Number,Microsoft.Research.Naiad.AzureExamples,GraphJoinVertex<TVertex;TState;TTime>,C:\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\ConnectedComponents.cs,GraphJoinVertex,The following statement contains a magic number: this.Entrancy = 5;
Magic Number,Microsoft.Research.Naiad.AzureExamples,GraphGenerator,C:\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\GraphGenerator.cs,Execute,The following statement contains a magic number: var directoryName = args[2];
Magic Number,Microsoft.Research.Naiad.AzureExamples,GraphGenerator,C:\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\GraphGenerator.cs,Execute,The following statement contains a magic number: var nodeCount = int.Parse(args[3]);
Magic Number,Microsoft.Research.Naiad.AzureExamples,GraphGenerator,C:\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\GraphGenerator.cs,Execute,The following statement contains a magic number: var edgeCount = int.Parse(args[4]);
Magic Number,Microsoft.Research.Naiad.AzureExamples,Repartition,C:\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\Repartition.cs,Execute,The following statement contains a magic number: using (var computation = NewComputation.FromArgs(ref args))              {                  computation.Controller.SetConsoleOut(computation.DefaultBlobContainer("naiad-outputs")' "out-{0}.txt");                  computation.Controller.SetConsoleError(computation.DefaultBlobContainer("naiad-outputs")' "err-{0}.txt");                    if (args.Length == 4)                  {                      var containerName = args[1];                      var inputDirectory = args[2];                      var outputDirectory = args[3];                        if (!inputDirectory.Equals(outputDirectory))                      {                          var container = computation.DefaultBlobContainer(containerName);                            computation.ReadTextFromAzureBlobs(container' inputDirectory)                                     .PartitionBy(x => x.GetHashCode())                                     .WriteTextToAzureBlobs(container' outputDirectory + "/part-{0}-{1}.txt");                      }                      else                      {                          Console.Error.WriteLine("ERROR: Input directory name ({0}) equals output directory name ({1})"' inputDirectory' outputDirectory);                      }                  }                  else                  {                      Console.Error.WriteLine("repartition requires three additional arguments: " + this.Usage);                  }                    computation.Activate();                  computation.Join();                    Console.Out.Close();                  Console.Error.Close();              }
Magic Number,Microsoft.Research.Naiad.AzureExamples,Repartition,C:\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\Repartition.cs,Execute,The following statement contains a magic number: using (var computation = NewComputation.FromArgs(ref args))              {                  computation.Controller.SetConsoleOut(computation.DefaultBlobContainer("naiad-outputs")' "out-{0}.txt");                  computation.Controller.SetConsoleError(computation.DefaultBlobContainer("naiad-outputs")' "err-{0}.txt");                    if (args.Length == 4)                  {                      var containerName = args[1];                      var inputDirectory = args[2];                      var outputDirectory = args[3];                        if (!inputDirectory.Equals(outputDirectory))                      {                          var container = computation.DefaultBlobContainer(containerName);                            computation.ReadTextFromAzureBlobs(container' inputDirectory)                                     .PartitionBy(x => x.GetHashCode())                                     .WriteTextToAzureBlobs(container' outputDirectory + "/part-{0}-{1}.txt");                      }                      else                      {                          Console.Error.WriteLine("ERROR: Input directory name ({0}) equals output directory name ({1})"' inputDirectory' outputDirectory);                      }                  }                  else                  {                      Console.Error.WriteLine("repartition requires three additional arguments: " + this.Usage);                  }                    computation.Activate();                  computation.Join();                    Console.Out.Close();                  Console.Error.Close();              }
Magic Number,Microsoft.Research.Naiad.AzureExamples,Repartition,C:\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\Repartition.cs,Execute,The following statement contains a magic number: using (var computation = NewComputation.FromArgs(ref args))              {                  computation.Controller.SetConsoleOut(computation.DefaultBlobContainer("naiad-outputs")' "out-{0}.txt");                  computation.Controller.SetConsoleError(computation.DefaultBlobContainer("naiad-outputs")' "err-{0}.txt");                    if (args.Length == 4)                  {                      var containerName = args[1];                      var inputDirectory = args[2];                      var outputDirectory = args[3];                        if (!inputDirectory.Equals(outputDirectory))                      {                          var container = computation.DefaultBlobContainer(containerName);                            computation.ReadTextFromAzureBlobs(container' inputDirectory)                                     .PartitionBy(x => x.GetHashCode())                                     .WriteTextToAzureBlobs(container' outputDirectory + "/part-{0}-{1}.txt");                      }                      else                      {                          Console.Error.WriteLine("ERROR: Input directory name ({0}) equals output directory name ({1})"' inputDirectory' outputDirectory);                      }                  }                  else                  {                      Console.Error.WriteLine("repartition requires three additional arguments: " + this.Usage);                  }                    computation.Activate();                  computation.Join();                    Console.Out.Close();                  Console.Error.Close();              }
Magic Number,Microsoft.Research.Naiad.AzureExamples.GraphLINQ,PageRank,C:\repos\MicrosoftResearch_Naiad\AzureExamples\GraphLINQ\PageRank.cs,Execute,The following statement contains a magic number: using (var computation = NewComputation.FromArgs(ref args))              {                  computation.Controller.SetConsoleOut(computation.DefaultBlobContainer("naiad-outputs")' "/out-{0}.txt");                    // either read inputs from a file' or generate them randomly.                  Stream<Edge' Epoch> edges;                  if (args.Length == 1)                  {                      // generate a random graph in each process; pagerank computation is performed on the union of edges.                      edges = GenerateEdges(1000000' 20000000' computation.Configuration.ProcessID).AsNaiadStream(computation);                  }                  else                  {                      if (args.Length != 3)                      {                          Console.Error.WriteLine("must supply containerName and directoryName' or neither.");                          System.Environment.Exit(-1);                      }                        var text = computation.ReadTextFromAzureBlobs(computation.DefaultBlobContainer(args[1])' args[2]);                        edges = text.Where(x => !x.StartsWith("#"))                                  .Select(x => x.Split())                                  .Select(x => new Edge(new Node(Int32.Parse(x[0]))' new Node(Int32.Parse(x[1]))));                  }                    Console.Out.WriteLine("Started up!");                  Console.Out.Flush();                    edges = edges.PartitionBy(x => x.source);                    // capture degrees before trimming leaves.                  var degrees = edges.Select(x => x.source)                                     .CountNodes();                    // removes edges to pages with zero out-degree.                  var trim = false;                  if (trim)                      edges = edges.Select(x => x.target.WithValue(x.source))                                   .FilterBy(degrees.Select(x => x.node))                                   .Select(x => new Edge(x.value' x.node));                    // initial distribution of ranks.                  var start = degrees.Select(x => x.node.WithValue(0.15f))                                     .PartitionBy(x => x.node.index);                    // define an iterative pagerank computation' add initial values' aggregate up the results and print them to the screen.                  var iterations = 10;                  var ranks = start.IterateAndAccumulate((lc' deltas) => deltas.PageRankStep(lc.EnterLoop(degrees)'                                                                                             lc.EnterLoop(edges))'                                                          x => x.node.index'                                                          iterations'                                                          "PageRank")                                   .Concat(start)                             // add initial ranks in for correctness.                                   .NodeAggregate((x' y) => x + y)            // accumulate up the ranks.                                   .Where(x => x.value > 0.0f);               // report only positive ranks.                    var stopwatch = System.Diagnostics.Stopwatch.StartNew();                  computation.OnFrontierChange += (x' y) => { Console.WriteLine(stopwatch.Elapsed + "\t" + string.Join("' "' y.NewFrontier)); Console.Out.Flush(); };                    // start computation' and block until completion.                  computation.Activate();                  computation.Join();                    Console.Out.Close();              }
Magic Number,Microsoft.Research.Naiad.AzureExamples.GraphLINQ,PageRank,C:\repos\MicrosoftResearch_Naiad\AzureExamples\GraphLINQ\PageRank.cs,Execute,The following statement contains a magic number: using (var computation = NewComputation.FromArgs(ref args))              {                  computation.Controller.SetConsoleOut(computation.DefaultBlobContainer("naiad-outputs")' "/out-{0}.txt");                    // either read inputs from a file' or generate them randomly.                  Stream<Edge' Epoch> edges;                  if (args.Length == 1)                  {                      // generate a random graph in each process; pagerank computation is performed on the union of edges.                      edges = GenerateEdges(1000000' 20000000' computation.Configuration.ProcessID).AsNaiadStream(computation);                  }                  else                  {                      if (args.Length != 3)                      {                          Console.Error.WriteLine("must supply containerName and directoryName' or neither.");                          System.Environment.Exit(-1);                      }                        var text = computation.ReadTextFromAzureBlobs(computation.DefaultBlobContainer(args[1])' args[2]);                        edges = text.Where(x => !x.StartsWith("#"))                                  .Select(x => x.Split())                                  .Select(x => new Edge(new Node(Int32.Parse(x[0]))' new Node(Int32.Parse(x[1]))));                  }                    Console.Out.WriteLine("Started up!");                  Console.Out.Flush();                    edges = edges.PartitionBy(x => x.source);                    // capture degrees before trimming leaves.                  var degrees = edges.Select(x => x.source)                                     .CountNodes();                    // removes edges to pages with zero out-degree.                  var trim = false;                  if (trim)                      edges = edges.Select(x => x.target.WithValue(x.source))                                   .FilterBy(degrees.Select(x => x.node))                                   .Select(x => new Edge(x.value' x.node));                    // initial distribution of ranks.                  var start = degrees.Select(x => x.node.WithValue(0.15f))                                     .PartitionBy(x => x.node.index);                    // define an iterative pagerank computation' add initial values' aggregate up the results and print them to the screen.                  var iterations = 10;                  var ranks = start.IterateAndAccumulate((lc' deltas) => deltas.PageRankStep(lc.EnterLoop(degrees)'                                                                                             lc.EnterLoop(edges))'                                                          x => x.node.index'                                                          iterations'                                                          "PageRank")                                   .Concat(start)                             // add initial ranks in for correctness.                                   .NodeAggregate((x' y) => x + y)            // accumulate up the ranks.                                   .Where(x => x.value > 0.0f);               // report only positive ranks.                    var stopwatch = System.Diagnostics.Stopwatch.StartNew();                  computation.OnFrontierChange += (x' y) => { Console.WriteLine(stopwatch.Elapsed + "\t" + string.Join("' "' y.NewFrontier)); Console.Out.Flush(); };                    // start computation' and block until completion.                  computation.Activate();                  computation.Join();                    Console.Out.Close();              }
Magic Number,Microsoft.Research.Naiad.AzureExamples.GraphLINQ,PageRank,C:\repos\MicrosoftResearch_Naiad\AzureExamples\GraphLINQ\PageRank.cs,Execute,The following statement contains a magic number: using (var computation = NewComputation.FromArgs(ref args))              {                  computation.Controller.SetConsoleOut(computation.DefaultBlobContainer("naiad-outputs")' "/out-{0}.txt");                    // either read inputs from a file' or generate them randomly.                  Stream<Edge' Epoch> edges;                  if (args.Length == 1)                  {                      // generate a random graph in each process; pagerank computation is performed on the union of edges.                      edges = GenerateEdges(1000000' 20000000' computation.Configuration.ProcessID).AsNaiadStream(computation);                  }                  else                  {                      if (args.Length != 3)                      {                          Console.Error.WriteLine("must supply containerName and directoryName' or neither.");                          System.Environment.Exit(-1);                      }                        var text = computation.ReadTextFromAzureBlobs(computation.DefaultBlobContainer(args[1])' args[2]);                        edges = text.Where(x => !x.StartsWith("#"))                                  .Select(x => x.Split())                                  .Select(x => new Edge(new Node(Int32.Parse(x[0]))' new Node(Int32.Parse(x[1]))));                  }                    Console.Out.WriteLine("Started up!");                  Console.Out.Flush();                    edges = edges.PartitionBy(x => x.source);                    // capture degrees before trimming leaves.                  var degrees = edges.Select(x => x.source)                                     .CountNodes();                    // removes edges to pages with zero out-degree.                  var trim = false;                  if (trim)                      edges = edges.Select(x => x.target.WithValue(x.source))                                   .FilterBy(degrees.Select(x => x.node))                                   .Select(x => new Edge(x.value' x.node));                    // initial distribution of ranks.                  var start = degrees.Select(x => x.node.WithValue(0.15f))                                     .PartitionBy(x => x.node.index);                    // define an iterative pagerank computation' add initial values' aggregate up the results and print them to the screen.                  var iterations = 10;                  var ranks = start.IterateAndAccumulate((lc' deltas) => deltas.PageRankStep(lc.EnterLoop(degrees)'                                                                                             lc.EnterLoop(edges))'                                                          x => x.node.index'                                                          iterations'                                                          "PageRank")                                   .Concat(start)                             // add initial ranks in for correctness.                                   .NodeAggregate((x' y) => x + y)            // accumulate up the ranks.                                   .Where(x => x.value > 0.0f);               // report only positive ranks.                    var stopwatch = System.Diagnostics.Stopwatch.StartNew();                  computation.OnFrontierChange += (x' y) => { Console.WriteLine(stopwatch.Elapsed + "\t" + string.Join("' "' y.NewFrontier)); Console.Out.Flush(); };                    // start computation' and block until completion.                  computation.Activate();                  computation.Join();                    Console.Out.Close();              }
Magic Number,Microsoft.Research.Naiad.AzureExamples.GraphLINQ,PageRank,C:\repos\MicrosoftResearch_Naiad\AzureExamples\GraphLINQ\PageRank.cs,Execute,The following statement contains a magic number: using (var computation = NewComputation.FromArgs(ref args))              {                  computation.Controller.SetConsoleOut(computation.DefaultBlobContainer("naiad-outputs")' "/out-{0}.txt");                    // either read inputs from a file' or generate them randomly.                  Stream<Edge' Epoch> edges;                  if (args.Length == 1)                  {                      // generate a random graph in each process; pagerank computation is performed on the union of edges.                      edges = GenerateEdges(1000000' 20000000' computation.Configuration.ProcessID).AsNaiadStream(computation);                  }                  else                  {                      if (args.Length != 3)                      {                          Console.Error.WriteLine("must supply containerName and directoryName' or neither.");                          System.Environment.Exit(-1);                      }                        var text = computation.ReadTextFromAzureBlobs(computation.DefaultBlobContainer(args[1])' args[2]);                        edges = text.Where(x => !x.StartsWith("#"))                                  .Select(x => x.Split())                                  .Select(x => new Edge(new Node(Int32.Parse(x[0]))' new Node(Int32.Parse(x[1]))));                  }                    Console.Out.WriteLine("Started up!");                  Console.Out.Flush();                    edges = edges.PartitionBy(x => x.source);                    // capture degrees before trimming leaves.                  var degrees = edges.Select(x => x.source)                                     .CountNodes();                    // removes edges to pages with zero out-degree.                  var trim = false;                  if (trim)                      edges = edges.Select(x => x.target.WithValue(x.source))                                   .FilterBy(degrees.Select(x => x.node))                                   .Select(x => new Edge(x.value' x.node));                    // initial distribution of ranks.                  var start = degrees.Select(x => x.node.WithValue(0.15f))                                     .PartitionBy(x => x.node.index);                    // define an iterative pagerank computation' add initial values' aggregate up the results and print them to the screen.                  var iterations = 10;                  var ranks = start.IterateAndAccumulate((lc' deltas) => deltas.PageRankStep(lc.EnterLoop(degrees)'                                                                                             lc.EnterLoop(edges))'                                                          x => x.node.index'                                                          iterations'                                                          "PageRank")                                   .Concat(start)                             // add initial ranks in for correctness.                                   .NodeAggregate((x' y) => x + y)            // accumulate up the ranks.                                   .Where(x => x.value > 0.0f);               // report only positive ranks.                    var stopwatch = System.Diagnostics.Stopwatch.StartNew();                  computation.OnFrontierChange += (x' y) => { Console.WriteLine(stopwatch.Elapsed + "\t" + string.Join("' "' y.NewFrontier)); Console.Out.Flush(); };                    // start computation' and block until completion.                  computation.Activate();                  computation.Join();                    Console.Out.Close();              }
Magic Number,Microsoft.Research.Naiad.AzureExamples.GraphLINQ,PageRank,C:\repos\MicrosoftResearch_Naiad\AzureExamples\GraphLINQ\PageRank.cs,Execute,The following statement contains a magic number: using (var computation = NewComputation.FromArgs(ref args))              {                  computation.Controller.SetConsoleOut(computation.DefaultBlobContainer("naiad-outputs")' "/out-{0}.txt");                    // either read inputs from a file' or generate them randomly.                  Stream<Edge' Epoch> edges;                  if (args.Length == 1)                  {                      // generate a random graph in each process; pagerank computation is performed on the union of edges.                      edges = GenerateEdges(1000000' 20000000' computation.Configuration.ProcessID).AsNaiadStream(computation);                  }                  else                  {                      if (args.Length != 3)                      {                          Console.Error.WriteLine("must supply containerName and directoryName' or neither.");                          System.Environment.Exit(-1);                      }                        var text = computation.ReadTextFromAzureBlobs(computation.DefaultBlobContainer(args[1])' args[2]);                        edges = text.Where(x => !x.StartsWith("#"))                                  .Select(x => x.Split())                                  .Select(x => new Edge(new Node(Int32.Parse(x[0]))' new Node(Int32.Parse(x[1]))));                  }                    Console.Out.WriteLine("Started up!");                  Console.Out.Flush();                    edges = edges.PartitionBy(x => x.source);                    // capture degrees before trimming leaves.                  var degrees = edges.Select(x => x.source)                                     .CountNodes();                    // removes edges to pages with zero out-degree.                  var trim = false;                  if (trim)                      edges = edges.Select(x => x.target.WithValue(x.source))                                   .FilterBy(degrees.Select(x => x.node))                                   .Select(x => new Edge(x.value' x.node));                    // initial distribution of ranks.                  var start = degrees.Select(x => x.node.WithValue(0.15f))                                     .PartitionBy(x => x.node.index);                    // define an iterative pagerank computation' add initial values' aggregate up the results and print them to the screen.                  var iterations = 10;                  var ranks = start.IterateAndAccumulate((lc' deltas) => deltas.PageRankStep(lc.EnterLoop(degrees)'                                                                                             lc.EnterLoop(edges))'                                                          x => x.node.index'                                                          iterations'                                                          "PageRank")                                   .Concat(start)                             // add initial ranks in for correctness.                                   .NodeAggregate((x' y) => x + y)            // accumulate up the ranks.                                   .Where(x => x.value > 0.0f);               // report only positive ranks.                    var stopwatch = System.Diagnostics.Stopwatch.StartNew();                  computation.OnFrontierChange += (x' y) => { Console.WriteLine(stopwatch.Elapsed + "\t" + string.Join("' "' y.NewFrontier)); Console.Out.Flush(); };                    // start computation' and block until completion.                  computation.Activate();                  computation.Join();                    Console.Out.Close();              }
