Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Microsoft.Research.Naiad.AzureExamples,ExtensionMethods,D:\research\architectureSmells\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\ConnectedComponents.cs,StreamingAggregate,The length of the statement  "                return Foundry.NewUnaryStage(input' (i' s) => new StreamingAggregateVertex<TKey' TValue' IterationIn<TTime>>(i' s' aggregate)' x => x.First.GetHashCode()' x => x.First.GetHashCode()' "StreamingAggregate"); " is 205.
Long Statement,Microsoft.Research.Naiad.AzureExamples,ExtensionMethods,D:\research\architectureSmells\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\ConnectedComponents.cs,BlockingAggregate,The length of the statement  "                return Foundry.NewUnaryStage(input' (i' s) => new BlockingAggregateVertex<TKey' TValue' TTime>(i' s' aggregate)' x => x.First.GetHashCode()' x => x.First.GetHashCode()' "BlockingAggregate"); " is 190.
Long Statement,Microsoft.Research.Naiad.AzureExamples,ExtensionMethods,D:\research\architectureSmells\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\ConnectedComponents.cs,GraphJoin,The length of the statement  "                return Foundry.NewBinaryStage(edges' values' (i' s) => new GraphJoinVertex<TVertex' TState' TTime>(i' s)' x => x.First.GetHashCode()' y => y.First.GetHashCode()' null' "GraphJoin"); " is 181.
Long Statement,Microsoft.Research.Naiad.AzureExamples,Repartition,D:\research\architectureSmells\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\Repartition.cs,Execute,The length of the statement  "                        Console.Error.WriteLine("ERROR: Input directory name ({0}) equals output directory name ({1})"' inputDirectory' outputDirectory); " is 129.
Long Statement,Microsoft.Research.Naiad.AzureExamples.GraphLINQ,PageRank,D:\research\architectureSmells\repos\MicrosoftResearch_Naiad\AzureExamples\GraphLINQ\PageRank.cs,Execute,The length of the statement  "                computation.OnFrontierChange += (x' y) => { Console.WriteLine(stopwatch.Elapsed + "\t" + string.Join("' "' y.NewFrontier)); Console.Out.Flush(); }; " is 147.
Magic Number,Microsoft.Research.Naiad.AzureExamples,ConnectedComponents,D:\research\architectureSmells\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\ConnectedComponents.cs,Execute,The following statement contains a magic number: var directoryName = args[2];
Magic Number,Microsoft.Research.Naiad.AzureExamples,ConnectedComponents,D:\research\architectureSmells\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\ConnectedComponents.cs,Execute,The following statement contains a magic number: var outputblobName = args[3];
Magic Number,Microsoft.Research.Naiad.AzureExamples,StreamingAggregateVertex<TKey;TValue;TTime>,D:\research\architectureSmells\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\ConnectedComponents.cs,StreamingAggregateVertex,The following statement contains a magic number: this.Entrancy = 5;
Magic Number,Microsoft.Research.Naiad.AzureExamples,GraphJoinVertex<TVertex;TState;TTime>,D:\research\architectureSmells\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\ConnectedComponents.cs,GraphJoinVertex,The following statement contains a magic number: this.Entrancy = 5;
Magic Number,Microsoft.Research.Naiad.AzureExamples,GraphGenerator,D:\research\architectureSmells\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\GraphGenerator.cs,Execute,The following statement contains a magic number: var directoryName = args[2];
Magic Number,Microsoft.Research.Naiad.AzureExamples,GraphGenerator,D:\research\architectureSmells\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\GraphGenerator.cs,Execute,The following statement contains a magic number: var nodeCount = int.Parse(args[3]);
Magic Number,Microsoft.Research.Naiad.AzureExamples,GraphGenerator,D:\research\architectureSmells\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\GraphGenerator.cs,Execute,The following statement contains a magic number: var edgeCount = int.Parse(args[4]);
Magic Number,Microsoft.Research.Naiad.AzureExamples,Repartition,D:\research\architectureSmells\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\Repartition.cs,Execute,The following statement contains a magic number: var inputDirectory = args[2];
Magic Number,Microsoft.Research.Naiad.AzureExamples,Repartition,D:\research\architectureSmells\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\Repartition.cs,Execute,The following statement contains a magic number: var outputDirectory = args[3];
Magic Number,Microsoft.Research.Naiad.AzureExamples,Repartition,D:\research\architectureSmells\repos\MicrosoftResearch_Naiad\AzureExamples\Azure\Repartition.cs,Execute,The following statement contains a magic number: args.Length == 4
Magic Number,Microsoft.Research.Naiad.AzureExamples.GraphLINQ,PageRank,D:\research\architectureSmells\repos\MicrosoftResearch_Naiad\AzureExamples\GraphLINQ\PageRank.cs,Execute,The following statement contains a magic number: edges = GenerateEdges(1000000' 20000000' computation.Configuration.ProcessID).AsNaiadStream(computation);
Magic Number,Microsoft.Research.Naiad.AzureExamples.GraphLINQ,PageRank,D:\research\architectureSmells\repos\MicrosoftResearch_Naiad\AzureExamples\GraphLINQ\PageRank.cs,Execute,The following statement contains a magic number: edges = GenerateEdges(1000000' 20000000' computation.Configuration.ProcessID).AsNaiadStream(computation);
Magic Number,Microsoft.Research.Naiad.AzureExamples.GraphLINQ,PageRank,D:\research\architectureSmells\repos\MicrosoftResearch_Naiad\AzureExamples\GraphLINQ\PageRank.cs,Execute,The following statement contains a magic number: var start = degrees.Select(x => x.node.WithValue(0.15f))                                     .PartitionBy(x => x.node.index);
Magic Number,Microsoft.Research.Naiad.AzureExamples.GraphLINQ,PageRank,D:\research\architectureSmells\repos\MicrosoftResearch_Naiad\AzureExamples\GraphLINQ\PageRank.cs,Execute,The following statement contains a magic number: var iterations = 10;
Magic Number,Microsoft.Research.Naiad.AzureExamples.GraphLINQ,ExtensionMethods,D:\research\architectureSmells\repos\MicrosoftResearch_Naiad\AzureExamples\GraphLINQ\PageRank.cs,PageRankStep,The following statement contains a magic number: return ranks.NodeJoin(degrees' (rank' degree) => degree > 0 ? rank * (0.85f / degree) : 0.0f)                          .GraphReduce(edges' (x' y) => x + y' false)                          .Where(x => x.value > 0.0f);
