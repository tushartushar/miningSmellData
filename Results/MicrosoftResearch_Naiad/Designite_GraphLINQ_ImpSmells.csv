Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Research.Naiad.Frameworks.GraphLINQ,CompactGraphBuilder,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,Build,Cyclomatic complexity of the method is 9
Long Statement,Microsoft.Research.Naiad.Frameworks.GraphLINQ,ExtensionMethods,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,GenerateDenseNameMapping,The length of the statement  "            return identifiers.NewUnaryStage((i' v) => new Densifier<TIdentifier>(i' v)' x => x.GetHashCode()' x => x.value.GetHashCode()' "GenerateDenseNameMapping"); " is 155.
Long Statement,Microsoft.Research.Naiad.Frameworks.GraphLINQ,ExtensionMethods,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,RenameUsing,The length of the statement  "            return stream.NewBinaryStage(renameMapping' (i' v) => new RenamerVertex<TInput' TIdentifier>(i' v' identifierSelector)' x => identifierSelector(x).GetHashCode()' x => x.value.GetHashCode()' null' "RenameUsing"); " is 211.
Long Statement,Microsoft.Research.Naiad.Frameworks.GraphLINQ,ExtensionMethods,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,TransmitAlong,The length of the statement  "            return compacted.NewBinaryStage(nodes' (i' s) => new GraphJoinVertex<TValue' TTime>(i' s)' null' x => x.node.index' null' "TransmitAlong"); " is 139.
Long Statement,Microsoft.Research.Naiad.Frameworks.GraphLINQ,ExtensionMethods,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,TransmitAlong,The length of the statement  "            return compacted.NewBinaryStage(nodes' (i' v) => new GraphJoinVertex<TValue' TOutput' TTime>(i' v' valueSelector)' null' x => x.node.index' null' "TransmitAlong"); " is 163.
Long Statement,Microsoft.Research.Naiad.Frameworks.GraphLINQ,ExtensionMethods,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,NodeAggregate,The length of the statement  "            var stage = Foundry.NewStage(nodes.Context' (i's) => new NodeAggregatorVertex<TValue' TTime>(i' s' combiner' nodes.ForStage.Placement.Count)' "Aggregator"); " is 156.
Long Statement,Microsoft.Research.Naiad.Frameworks.GraphLINQ,ExtensionMethods,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,NodeAggregate,The length of the statement  "            Action<NodeWithValue<TValue>[]' int[]' int> action = (data' dsts' len) => { for (int i = 0; i < len; i++) dsts[i] = data[i].node.index; }; " is 138.
Long Statement,Microsoft.Research.Naiad.Frameworks.GraphLINQ,ExtensionMethods,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,NodeAggregate,The length of the statement  "            return nodes.NewUnaryStage((i' v) => new NodeAggregatorVertex<TValue' TTime>(i' v' combiner' nodes.ForStage.Placement.Count)' x => x.node.index' x => x.node.index' "Aggregator"); " is 178.
Long Statement,Microsoft.Research.Naiad.Frameworks.GraphLINQ,ExtensionMethods,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,NodeAggregateLocally,The length of the statement  "                        .NewUnaryStage((i' v) => new NodeAggregatorVertex<TValue' TTime>(i' v' combiner' workersPerProcess)' null' null' "AggregatorLocal"); " is 132.
Long Statement,Microsoft.Research.Naiad.Frameworks.GraphLINQ,ExtensionMethods,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,StateMachine,The length of the statement  "            var stage = Foundry.NewStage(nodes.Context' (i' s) => new NodeUnaryStateMachine<TValue' TState' TOutput' TTime>(i' s' transitionSelector' defaultState)' "StateMachine"); " is 169.
Long Statement,Microsoft.Research.Naiad.Frameworks.GraphLINQ,ExtensionMethods,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,StateMachine,The length of the statement  "            Action<NodeWithValue<TValue>[]' int[]' int> action = (data' dsts' len) => { for (int i = 0; i < len; i++) dsts[i] = data[i].node.index; }; " is 138.
Long Statement,Microsoft.Research.Naiad.Frameworks.GraphLINQ,ExtensionMethods,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,StateMachine,The length of the statement  "            var stage = Foundry.NewStage(nodes.Context' (i' s) => new NodeUnaryStateMachine<TValue' TState' TTime>(i' s' transitionSelector' defaultState)' "StateMachine"); " is 160.
Long Statement,Microsoft.Research.Naiad.Frameworks.GraphLINQ,ExtensionMethods,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,StateMachine,The length of the statement  "            Action<NodeWithValue<TValue>[]' int[]' int> action = (data' dsts' len) => { for (int i = 0; i < len; i++) dsts[i] = data[i].node.index; }; " is 138.
Long Statement,Microsoft.Research.Naiad.Frameworks.GraphLINQ,ExtensionMethods,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,StateMachine,The length of the statement  "            return nodes.NewBinaryStage(initialStates' (i' v) => new NodeBinaryStateMachine<TValue' TState' TOutput' TTime>(i' v' transitionSelector' defaultState)' x => x.node.index' x => x.node.index' x => x.node.index' "NodeStateMachine"); " is 230.
Long Statement,Microsoft.Research.Naiad.Frameworks.GraphLINQ,ExtensionMethods,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,FilterOptions,The length of the statement  "            return stream.NewUnaryStage((i' s) => new FilterOptionsVertex<TRecord' TTime>(i' s)' x => x.node.index' x => x.node.index' "FilterOptions"); " is 140.
Long Statement,Microsoft.Research.Naiad.Frameworks.GraphLINQ,ExtensionMethods,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,FilterBy,The length of the statement  "            return nodes.NodeJoin(restriction.Select(x => x.WithValue(true))' (x' y) => y ? new Option<TValue>(x) : new Option<TValue>()) " is 125.
Long Statement,Microsoft.Research.Naiad.Frameworks.GraphLINQ,AutoRenamer<TIdentifier>,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,AddRenameTask,The length of the statement  "            this.stage.NewInput(stream' (message' vertex) => vertex.OnReceive(message' identifierSelector' dictionary[vertex])' x => identifierSelector(x).GetHashCode()); " is 158.
Magic Number,Microsoft.Research.Naiad.Frameworks.GraphLINQ,Edge,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,GetHashCode,The following statement contains a magic number: return source.GetHashCode() + 37 * target.GetHashCode();
Magic Number,Microsoft.Research.Naiad.Frameworks.GraphLINQ,NodeAggregatorVertex<TValue;TTime>,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,OnReceive,The following statement contains a magic number: for (int i = 0; i < message.length; i++)              {                  var record = message.payload[i];                    var localName = record.node.index / this.parts;                  if (array.Length <= localName)                  {                      var newArray = new TValue[Math.Max(2 * array.Length' localName + 1)];                      for (int j = 0; j < array.Length; j++)                          newArray[j] = array[j];                        this.values[message.time] = newArray;                      array = newArray;                  }                    array[localName] = this.update(array[localName]' record.value);              }
Magic Number,Microsoft.Research.Naiad.Frameworks.GraphLINQ,NodeAggregatorVertex<TValue;TTime>,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,NodeAggregatorVertex,The following statement contains a magic number: this.Entrancy = 5;
Magic Number,Microsoft.Research.Naiad.Frameworks.GraphLINQ,NodeBinaryStateMachine<TValue;TState;TMessage;TTime>,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,OnReceive1,The following statement contains a magic number: if (this.toProcess != null)              {                  for (int i = 0; i < message.length; i++)                      this.toProcess.Add(message.payload[i]);                    this.NotifyAt(message.time);              }              else              {                  var output = this.Output.GetBufferForTime(message.time);                  for (int i = 0; i < message.length; i++)                  {                      var record = message.payload[i];                      var localIndex = record.node.index / this.parts;                        // we may need to grow the state vector                      if (localIndex >= this.state.Length)                      {                          var newState = new TState[Math.Max(2 * this.state.Length' localIndex + 1)];                          for (int j = 0; j < this.state.Length; j++)                              newState[j] = this.state[j];                            for (int j = this.state.Length; j < newState.Length; j++)                              newState[j] = defaultValue;                            this.state = newState;                      }                        var transitionResult = this.transition(record.value' this.state[localIndex]);                        this.state[localIndex] = transitionResult.First;                      output.Send(record.node.WithValue(transitionResult.Second));                  }              }
Magic Number,Microsoft.Research.Naiad.Frameworks.GraphLINQ,NodeBinaryStateMachine<TValue;TState;TMessage;TTime>,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,OnReceive2,The following statement contains a magic number: for (int i = 0; i < message.length; i++)              {                  var localIndex = message.payload[i].node.index / this.parts;                  if (localIndex >= this.state.Length)                  {                      var newState = new TState[Math.Max(localIndex + 1' 2 * this.state.Length)];                        for (int j = 0; j < this.state.Length; j++)                          newState[j] = this.state[j];                        for (int j = this.state.Length; j < newState.Length; j++)                          newState[j] = this.defaultValue;                        this.state = newState;                  }                    this.state[localIndex] = message.payload[i].value;              }
Magic Number,Microsoft.Research.Naiad.Frameworks.GraphLINQ,NodeBinaryStateMachine<TValue;TState;TMessage;TTime>,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,OnNotify,The following statement contains a magic number: foreach (var record in list)              {                  var localIndex = record.node.index / this.parts;                    // we may need to grow the state vector                  if (localIndex >= this.state.Length)                  {                      var newState = new TState[Math.Max(2 * this.state.Length' localIndex + 1)];                      for (int j = 0; j < this.state.Length; j++)                          newState[j] = this.state[j];                        for (int j = this.state.Length; j < newState.Length; j++)                          newState[j] = defaultValue;                        this.state = newState;                  }                    var transitionResult = this.transition(record.value' this.state[localIndex]);                    this.state[localIndex] = transitionResult.First;                  output.Send(record.node.WithValue(transitionResult.Second));              }
Magic Number,Microsoft.Research.Naiad.Frameworks.GraphLINQ,NodeUnaryStateMachine<TValue;TState;TMessage;TTime>,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,OnReceive,The following statement contains a magic number: for (int i = 0; i < message.length; i++)              {                  var record = message.payload[i];                  var localIndex = record.node.index / this.parts;                    if (this.state.Length <= localIndex)                  {                      var newState = new TState[Math.Max(localIndex + 1' 2 * this.state.Length)];                      for (int j = 0; j < this.state.Length; j++)                          newState[j] = this.state[j];                        for (int j = this.state.Length; j < newState.Length; j++)                          newState[j] = defaultState;                        this.state = newState;                  }                    var transitionResult = this.transition(record.value' this.state[localIndex]);                    this.state[localIndex] = transitionResult.First;                    output.Send(record.node.WithValue(transitionResult.Second));              }
Magic Number,Microsoft.Research.Naiad.Frameworks.GraphLINQ,NodeUnaryStateMachine<TValue;TState;TTime>,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,OnReceive,The following statement contains a magic number: for (int i = 0; i < message.length; i++)              {                  var record = message.payload[i];                  var localIndex = record.node.index / this.parts;                    if (this.state.Length <= localIndex)                  {                      var newState = new TState[Math.Max(localIndex + 1' 2 * this.state.Length)];                      for (int j = 0; j < this.state.Length; j++)                          newState[j] = this.state[j];                        for (int j = this.state.Length; j < newState.Length; j++)                          newState[j] = defaultState;                        this.state = newState;                  }                    var transitionResult = this.transition(record.value' this.state[localIndex]);                    if (!this.state[localIndex].Equals(transitionResult))                  {                      this.state[localIndex] = transitionResult;                      output.Send(record.node.WithValue(transitionResult));                  }              }
Magic Number,Microsoft.Research.Naiad.Frameworks.GraphLINQ,GraphJoinVertex<TValue;TOutput;T>,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,GraphJoinVertex,The following statement contains a magic number: this.Entrancy = 5;
Magic Number,Microsoft.Research.Naiad.Frameworks.GraphLINQ,GraphJoinVertex<TValue;T>,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,GraphJoinVertex,The following statement contains a magic number: this.Entrancy = 5;
Magic Number,Microsoft.Research.Naiad.Frameworks.GraphLINQ,CompactGraphBuilder,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,Build,The following statement contains a magic number: var nodes = new Int32[maxNode + 2];
Magic Number,Microsoft.Research.Naiad.Frameworks.GraphLINQ,Vertex,C:\repos\MicrosoftResearch_Naiad\Frameworks\GraphLINQ\GraphLINQ.cs,Vertex,The following statement contains a magic number: this.Entrancy = 5;
