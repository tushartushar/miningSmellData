Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Inorganic,FastDisassembler,C:\repos\0x10c-crap_inorganic\inorganic\FastDisassembler.cs,FastDisassemble,Cyclomatic complexity of the method is 8
Complex Method,Inorganic,FastDisassembler,C:\repos\0x10c-crap_inorganic\inorganic\FastDisassembler.cs,GetNonbasicOp,Cyclomatic complexity of the method is 9
Complex Method,Inorganic,FastDisassembler,C:\repos\0x10c-crap_inorganic\inorganic\FastDisassembler.cs,GetOp,Cyclomatic complexity of the method is 28
Complex Method,Inorganic,Program,C:\repos\0x10c-crap_inorganic\inorganic\Program.cs,Main,Cyclomatic complexity of the method is 32
Magic Number,Inorganic,FastDisassembler,C:\repos\0x10c-crap_inorganic\inorganic\FastDisassembler.cs,FastDisassemble,The following statement contains a magic number: while (PC < Data.Length) {  	ushort instruction = Data [PC++];  	byte opcode = (byte)(instruction & 0x1F);  	byte valueB = (byte)((instruction & 0x3E0) >> 5);  	byte valueA = (byte)((instruction & 0xFC00) >> 10);  	CodeEntry entry = new CodeEntry ();  	entry.Opcode = opcode;  	entry.ValueA = valueA;  	entry.ValueB = valueB;  	entry.Address = PC;  	if (entry.Opcode != 0)  		entry.Code = GetOp (opcode);  	else  		entry.Code = GetNonbasicOp (valueB);  	if (entry.Code == null)  		DatValues.Add (instruction);  	else {  		if (DatValues.Count > 0) {  			CodeEntry datEntry = new CodeEntry ();  			datEntry.Code = "DAT ";  			foreach (var value in DatValues)  				datEntry.Code += "0x" + value.ToString ("x") + "' ";  			DatValues.Clear ();  			datEntry.Code = datEntry.Code.Remove (datEntry.Code.Length - 2);  			output.Add (datEntry);  		}  		if (entry.Opcode != 0) {  			string valueAdis = GetValue (valueA' false);  			string valueBdis = GetValue (valueB' true);  			entry.Code += " " + valueBdis + "' " + valueAdis;  			output.Add (entry);  		}  		else {  			string valueAdis = GetValue (valueA' false);  			entry.Code += " " + valueAdis;  			output.Add (entry);  		}  	}  }  
Magic Number,Inorganic,FastDisassembler,C:\repos\0x10c-crap_inorganic\inorganic\FastDisassembler.cs,FastDisassemble,The following statement contains a magic number: while (PC < Data.Length) {  	ushort instruction = Data [PC++];  	byte opcode = (byte)(instruction & 0x1F);  	byte valueB = (byte)((instruction & 0x3E0) >> 5);  	byte valueA = (byte)((instruction & 0xFC00) >> 10);  	CodeEntry entry = new CodeEntry ();  	entry.Opcode = opcode;  	entry.ValueA = valueA;  	entry.ValueB = valueB;  	entry.Address = PC;  	if (entry.Opcode != 0)  		entry.Code = GetOp (opcode);  	else  		entry.Code = GetNonbasicOp (valueB);  	if (entry.Code == null)  		DatValues.Add (instruction);  	else {  		if (DatValues.Count > 0) {  			CodeEntry datEntry = new CodeEntry ();  			datEntry.Code = "DAT ";  			foreach (var value in DatValues)  				datEntry.Code += "0x" + value.ToString ("x") + "' ";  			DatValues.Clear ();  			datEntry.Code = datEntry.Code.Remove (datEntry.Code.Length - 2);  			output.Add (datEntry);  		}  		if (entry.Opcode != 0) {  			string valueAdis = GetValue (valueA' false);  			string valueBdis = GetValue (valueB' true);  			entry.Code += " " + valueBdis + "' " + valueAdis;  			output.Add (entry);  		}  		else {  			string valueAdis = GetValue (valueA' false);  			entry.Code += " " + valueAdis;  			output.Add (entry);  		}  	}  }  
Magic Number,Inorganic,FastDisassembler,C:\repos\0x10c-crap_inorganic\inorganic\FastDisassembler.cs,FastDisassemble,The following statement contains a magic number: while (PC < Data.Length) {  	ushort instruction = Data [PC++];  	byte opcode = (byte)(instruction & 0x1F);  	byte valueB = (byte)((instruction & 0x3E0) >> 5);  	byte valueA = (byte)((instruction & 0xFC00) >> 10);  	CodeEntry entry = new CodeEntry ();  	entry.Opcode = opcode;  	entry.ValueA = valueA;  	entry.ValueB = valueB;  	entry.Address = PC;  	if (entry.Opcode != 0)  		entry.Code = GetOp (opcode);  	else  		entry.Code = GetNonbasicOp (valueB);  	if (entry.Code == null)  		DatValues.Add (instruction);  	else {  		if (DatValues.Count > 0) {  			CodeEntry datEntry = new CodeEntry ();  			datEntry.Code = "DAT ";  			foreach (var value in DatValues)  				datEntry.Code += "0x" + value.ToString ("x") + "' ";  			DatValues.Clear ();  			datEntry.Code = datEntry.Code.Remove (datEntry.Code.Length - 2);  			output.Add (datEntry);  		}  		if (entry.Opcode != 0) {  			string valueAdis = GetValue (valueA' false);  			string valueBdis = GetValue (valueB' true);  			entry.Code += " " + valueBdis + "' " + valueAdis;  			output.Add (entry);  		}  		else {  			string valueAdis = GetValue (valueA' false);  			entry.Code += " " + valueAdis;  			output.Add (entry);  		}  	}  }  
Magic Number,Inorganic,FastDisassembler,C:\repos\0x10c-crap_inorganic\inorganic\FastDisassembler.cs,FastDisassemble,The following statement contains a magic number: if (entry.Code == null)  	DatValues.Add (instruction);  else {  	if (DatValues.Count > 0) {  		CodeEntry datEntry = new CodeEntry ();  		datEntry.Code = "DAT ";  		foreach (var value in DatValues)  			datEntry.Code += "0x" + value.ToString ("x") + "' ";  		DatValues.Clear ();  		datEntry.Code = datEntry.Code.Remove (datEntry.Code.Length - 2);  		output.Add (datEntry);  	}  	if (entry.Opcode != 0) {  		string valueAdis = GetValue (valueA' false);  		string valueBdis = GetValue (valueB' true);  		entry.Code += " " + valueBdis + "' " + valueAdis;  		output.Add (entry);  	}  	else {  		string valueAdis = GetValue (valueA' false);  		entry.Code += " " + valueAdis;  		output.Add (entry);  	}  }  
Magic Number,Inorganic,FastDisassembler,C:\repos\0x10c-crap_inorganic\inorganic\FastDisassembler.cs,FastDisassemble,The following statement contains a magic number: if (DatValues.Count > 0) {  	CodeEntry datEntry = new CodeEntry ();  	datEntry.Code = "DAT ";  	foreach (var value in DatValues)  		datEntry.Code += "0x" + value.ToString ("x") + "' ";  	DatValues.Clear ();  	datEntry.Code = datEntry.Code.Remove (datEntry.Code.Length - 2);  	output.Add (datEntry);  }  
Magic Number,Inorganic,FastDisassembler,C:\repos\0x10c-crap_inorganic\inorganic\FastDisassembler.cs,FastDisassemble,The following statement contains a magic number: datEntry.Code = datEntry.Code.Remove (datEntry.Code.Length - 2);  
Magic Number,Inorganic,Program,C:\repos\0x10c-crap_inorganic\inorganic\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < inputStream.Length; i++) {  	if (i % 2 == (littleEndian ? 0 : 1))  		data [i / 2] |= (ushort)(inputStream.ReadByte ());  	else  		data [i / 2] |= (ushort)(inputStream.ReadByte () << 8);  }  
Magic Number,Inorganic,Program,C:\repos\0x10c-crap_inorganic\inorganic\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < inputStream.Length; i++) {  	if (i % 2 == (littleEndian ? 0 : 1))  		data [i / 2] |= (ushort)(inputStream.ReadByte ());  	else  		data [i / 2] |= (ushort)(inputStream.ReadByte () << 8);  }  
Magic Number,Inorganic,Program,C:\repos\0x10c-crap_inorganic\inorganic\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < inputStream.Length; i++) {  	if (i % 2 == (littleEndian ? 0 : 1))  		data [i / 2] |= (ushort)(inputStream.ReadByte ());  	else  		data [i / 2] |= (ushort)(inputStream.ReadByte () << 8);  }  
Magic Number,Inorganic,Program,C:\repos\0x10c-crap_inorganic\inorganic\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < inputStream.Length; i++) {  	if (i % 2 == (littleEndian ? 0 : 1))  		data [i / 2] |= (ushort)(inputStream.ReadByte ());  	else  		data [i / 2] |= (ushort)(inputStream.ReadByte () << 8);  }  
Magic Number,Inorganic,Program,C:\repos\0x10c-crap_inorganic\inorganic\Program.cs,Main,The following statement contains a magic number: if (i % 2 == (littleEndian ? 0 : 1))  	data [i / 2] |= (ushort)(inputStream.ReadByte ());  else  	data [i / 2] |= (ushort)(inputStream.ReadByte () << 8);  
Magic Number,Inorganic,Program,C:\repos\0x10c-crap_inorganic\inorganic\Program.cs,Main,The following statement contains a magic number: if (i % 2 == (littleEndian ? 0 : 1))  	data [i / 2] |= (ushort)(inputStream.ReadByte ());  else  	data [i / 2] |= (ushort)(inputStream.ReadByte () << 8);  
Magic Number,Inorganic,Program,C:\repos\0x10c-crap_inorganic\inorganic\Program.cs,Main,The following statement contains a magic number: if (i % 2 == (littleEndian ? 0 : 1))  	data [i / 2] |= (ushort)(inputStream.ReadByte ());  else  	data [i / 2] |= (ushort)(inputStream.ReadByte () << 8);  
Magic Number,Inorganic,Program,C:\repos\0x10c-crap_inorganic\inorganic\Program.cs,Main,The following statement contains a magic number: if (i % 2 == (littleEndian ? 0 : 1))  	data [i / 2] |= (ushort)(inputStream.ReadByte ());  else  	data [i / 2] |= (ushort)(inputStream.ReadByte () << 8);  
Magic Number,Inorganic,Program,C:\repos\0x10c-crap_inorganic\inorganic\Program.cs,Main,The following statement contains a magic number: data [i / 2] |= (ushort)(inputStream.ReadByte ());  
Magic Number,Inorganic,Program,C:\repos\0x10c-crap_inorganic\inorganic\Program.cs,Main,The following statement contains a magic number: data [i / 2] |= (ushort)(inputStream.ReadByte () << 8);  
Magic Number,Inorganic,Program,C:\repos\0x10c-crap_inorganic\inorganic\Program.cs,Main,The following statement contains a magic number: data [i / 2] |= (ushort)(inputStream.ReadByte () << 8);  
