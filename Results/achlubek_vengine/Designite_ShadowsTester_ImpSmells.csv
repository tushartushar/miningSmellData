Implementation smell,Namespace,Class,File,Method,Description
Long Method,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The method has 283 lines of code.
Long Method,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The method has 120 lines of code.
Long Method,ShadowsTester,DynamicCubeMapController,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\DynamicCubeMapController.cs,Create,The method has 162 lines of code.
Long Method,ShadowsTester,HotelScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\HotelScene.cs,HotelScene,The method has 181 lines of code.
Long Method,ShadowsTester,LightningTestScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\LightningTestScene.cs,LightningTestScene,The method has 191 lines of code.
Long Method,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The method has 146 lines of code.
Long Method,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The method has 138 lines of code.
Complex Method,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,Cyclomatic complexity of the method is 20
Complex Method,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,Cyclomatic complexity of the method is 10
Long Parameter List,ShadowsTester,VegetationPart,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\DragonScene.cs,VegetationPart,The method has 5 parameters. Parameters: t' m' s' sv' c
Long Parameter List,ShadowsTester,VictorianHouseScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\VictorianHouseScene.cs,CreateWall,The method has 5 parameters. Parameters: start' end' rotation' position' color
Long Parameter List,ShadowsTester,PhysicsTest,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\PhysicsTest.cs,CreateWall,The method has 5 parameters. Parameters: start' end' rotation' position' color
Long Parameter List,ShadowsTester,LightningTestScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\LightningTestScene.cs,CreateWall,The method has 5 parameters. Parameters: start' end' rotation' position' color
Long Parameter List,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,grad,The method has 5 parameters. Parameters: hash' x' y' z' t
Long Statement,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The length of the statement  "            RedLight.Add(new Light(new TransformationManager(new Vector3(0' 5' 0)' Quaternion.FromAxisAngle(new Vector3(1' 0' 0)' MathHelper.DegreesToRadians(-110)))) " is 154.
Long Statement,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The length of the statement  "                    //l.Color = (new Vector3((float)Math.Sin(i)' 1.0f - (float)Math.Sin(i)' (float)Math.Cos(i)) * 0.5f + new Vector3(0.5f)) * 0.3f; " is 127.
Long Statement,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The length of the statement  "            /* RedLight.Add(new ProjectionLight(new Vector3(65' 0' 65)' Quaternion.FromAxisAngle(new Vector3(1' 0' -1)' MathHelper.DegreesToRadians(fovdegree))' 1' 1' MathHelper.DegreesToRadians(45)' 0.1f' 100.0f) " is 201.
Long Statement,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The length of the statement  "             RedLight.Add(new ProjectionLight(new Vector3(65' 0' 65)' Quaternion.FromAxisAngle(new Vector3(1' 0' -1)' MathHelper.DegreesToRadians(fovdegree))' 1' 1' MathHelper.DegreesToRadians(45)' 0.1f' 100.0f) " is 198.
Long Statement,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The length of the statement  "             RedLight.Add(new ProjectionLight(new Vector3(65' 0' 65)' Quaternion.FromAxisAngle(new Vector3(1' 0' -1)' MathHelper.DegreesToRadians(fovdegree))' 1' 1' MathHelper.DegreesToRadians(45)' 0.1f' 100.0f) " is 198.
Long Statement,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The length of the statement  "                        Picked.SetPosition(Picked.GetPosition() + FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Right) * (float)e.XDelta * -0.01f); " is 149.
Long Statement,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The length of the statement  "                        Picked.SetPosition(Picked.GetPosition() + FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Up) * (float)e.YDelta * -0.01f); " is 146.
Long Statement,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The length of the statement  "                        Picked.SetOrientation(Quaternion.Multiply(Picked.GetOrientation()' Quaternion.FromAxisAngle(FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Up)' (float)e.XDelta * -0.01f))); " is 197.
Long Statement,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The length of the statement  "                        Picked.SetOrientation(Quaternion.Multiply(Picked.GetOrientation()' Quaternion.FromAxisAngle(FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Left)' (float)e.YDelta * -0.01f))); " is 199.
Long Statement,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The length of the statement  "                    // Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode = !Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode; " is 148.
Long Statement,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The length of the statement  "                    RedLight[0].GetTransformationManager().SetPosition(FreeCam.Cam.Transformation.GetPosition() + new Vector3((float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1) * 0.1f); " is 216.
Long Statement,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The length of the statement  "                    // Interpolator.Interpolate<Vector3>(RedLight.GetTransformationManager().Position' RedLight.GetTransformationManager().Position.R' FreeCam.Cam.GetPosition()' 8.0f' Interpolator.Easing.EaseInOut); " is 195.
Long Statement,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,InterpolateCameraFromSaved,The length of the statement  "            Interpolator.Interpolate<Vector3>(FreeCam.Cam.Transformation.Position' FreeCam.Cam.Transformation.Position.R' pos' 8.0f' Interpolator.Easing.EaseInOut); " is 152.
Long Statement,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,InterpolateCameraFromSaved,The length of the statement  "            Interpolator.Interpolate<Quaternion>(FreeCam.Cam.Transformation.Orientation' FreeCam.Cam.Transformation.Orientation.R' orient' 8.0f' Interpolator.Easing.EaseInOut); " is 164.
Long Statement,ShadowsTester,DynamicCubeMapController,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\DynamicCubeMapController.cs,Create,The length of the statement  "                        lucy.AddInstance(new Mesh3dInstance(new TransformationManager(cubens.GetPosition()' Quaternion.Identity' 0.1f)' "cubemap-marker-" + cnt.ToString())); " is 149.
Long Statement,ShadowsTester,DynamicCubeMapController,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\DynamicCubeMapController.cs,Create,The length of the statement  "                lucy.AddInstance(new Mesh3dInstance(new TransformationManager(cubens.GetPosition()' Quaternion.Identity' 0.1f)' "cubemap-marker-" + cnt.ToString())); " is 149.
Long Statement,ShadowsTester,HotelScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\HotelScene.cs,StringToFloat,The length of the statement  "            if(!float.TryParse(str' System.Globalization.NumberStyles.Float' System.Globalization.CultureInfo.InvariantCulture' out n)) " is 123.
Long Statement,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The length of the statement  "            newTitle.Append(string.Format("VEngine App | FPS: {0} | FrameTime: {1} ms | Memory: {2} megabytes | Drawn {3} "' fps.ToString(System.Globalization.CultureInfo.InvariantCulture)' ft.ToString(System.Globalization.CultureInfo.InvariantCulture)' MBmemory.ToString(System.Globalization.CultureInfo.InvariantCulture)' Game.World.Scene.LastDrawnObjectsCount)); " is 353.
Long Statement,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The length of the statement  "            var p = Game.DisplayAdapter.PointToScreen(new System.Drawing.Point(Game.Resolution.Width / 2' Game.Resolution.Height / 2)); " is 123.
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: float fovdegree = 90;
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: RedLight.Add(new Light(new TransformationManager(new Vector3(0' 5' 0)' Quaternion.FromAxisAngle(new Vector3(1' 0' 0)' MathHelper.DegreesToRadians(-110))))              {                  Color = new Vector3(1) * 400'                  ShadowMappingEnabled = true'                  ShadowMapType = Light.ShadowMapTypeEnum.Single              });
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: RedLight.Add(new Light(new TransformationManager(new Vector3(0' 5' 0)' Quaternion.FromAxisAngle(new Vector3(1' 0' 0)' MathHelper.DegreesToRadians(-110))))              {                  Color = new Vector3(1) * 400'                  ShadowMappingEnabled = true'                  ShadowMapType = Light.ShadowMapTypeEnum.Single              });
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: RedLight.Add(new Light(new TransformationManager(new Vector3(0' 5' 0)' Quaternion.FromAxisAngle(new Vector3(1' 0' 0)' MathHelper.DegreesToRadians(-110))))              {                  Color = new Vector3(1) * 400'                  ShadowMappingEnabled = true'                  ShadowMapType = Light.ShadowMapTypeEnum.Single              });
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.J)                  {                      fovdegree += 5f;                      if(fovdegree >= 180)                          fovdegree = 179;                      RedLight.ForEach((ax) => ax.Angle = MathHelper.DegreesToRadians(fovdegree));                  }                  if(e.Key == OpenTK.Input.Key.K)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      RedLight.ForEach((ax) => ax.Angle = MathHelper.DegreesToRadians(fovdegree));                  }              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.J)                  {                      fovdegree += 5f;                      if(fovdegree >= 180)                          fovdegree = 179;                      RedLight.ForEach((ax) => ax.Angle = MathHelper.DegreesToRadians(fovdegree));                  }                  if(e.Key == OpenTK.Input.Key.K)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      RedLight.ForEach((ax) => ax.Angle = MathHelper.DegreesToRadians(fovdegree));                  }              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.J)                  {                      fovdegree += 5f;                      if(fovdegree >= 180)                          fovdegree = 179;                      RedLight.ForEach((ax) => ax.Angle = MathHelper.DegreesToRadians(fovdegree));                  }                  if(e.Key == OpenTK.Input.Key.K)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      RedLight.ForEach((ax) => ax.Angle = MathHelper.DegreesToRadians(fovdegree));                  }              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.J)                  {                      fovdegree += 5f;                      if(fovdegree >= 180)                          fovdegree = 179;                      RedLight.ForEach((ax) => ax.Angle = MathHelper.DegreesToRadians(fovdegree));                  }                  if(e.Key == OpenTK.Input.Key.K)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      RedLight.ForEach((ax) => ax.Angle = MathHelper.DegreesToRadians(fovdegree));                  }              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.J)                  {                      fovdegree += 5f;                      if(fovdegree >= 180)                          fovdegree = 179;                      RedLight.ForEach((ax) => ax.Angle = MathHelper.DegreesToRadians(fovdegree));                  }                  if(e.Key == OpenTK.Input.Key.K)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      RedLight.ForEach((ax) => ax.Angle = MathHelper.DegreesToRadians(fovdegree));                  }              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.J)                  {                      fovdegree += 5f;                      if(fovdegree >= 180)                          fovdegree = 179;                      RedLight.ForEach((ax) => ax.Angle = MathHelper.DegreesToRadians(fovdegree));                  }                  if(e.Key == OpenTK.Input.Key.K)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      RedLight.ForEach((ax) => ax.Angle = MathHelper.DegreesToRadians(fovdegree));                  }              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: Game.OnMouseMove += (o' e) =>              {                  MouseX = e.X;                  MouseY = e.Y;                    var kb = OpenTK.Input.Keyboard.GetState();                  if(kb.IsKeyDown(OpenTK.Input.Key.T))                  {                      FreeCam.Freeze = true;                      if(Picked != null)                      {                          Picked.SetPosition(Picked.GetPosition() + FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Right) * (float)e.XDelta * -0.01f);                          Picked.SetPosition(Picked.GetPosition() + FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Up) * (float)e.YDelta * -0.01f);                      }                  }                  else if(kb.IsKeyDown(OpenTK.Input.Key.F))                  {                      FreeCam.Freeze = true;                      if(Picked != null)                      {                          Picked.SetOrientation(Quaternion.Multiply(Picked.GetOrientation()' Quaternion.FromAxisAngle(FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Up)' (float)e.XDelta * -0.01f)));                          Picked.SetOrientation(Quaternion.Multiply(Picked.GetOrientation()' Quaternion.FromAxisAngle(FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Left)' (float)e.YDelta * -0.01f)));                      }                  }                  else if(kb.IsKeyDown(OpenTK.Input.Key.C))                  {                      FreeCam.Freeze = true;                      if(Picked != null)                      {                          Picked.SetScale(Picked.GetScale() + new Vector3((float)e.XDelta * -0.01f));                      }                  }                  else                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: Game.OnMouseMove += (o' e) =>              {                  MouseX = e.X;                  MouseY = e.Y;                    var kb = OpenTK.Input.Keyboard.GetState();                  if(kb.IsKeyDown(OpenTK.Input.Key.T))                  {                      FreeCam.Freeze = true;                      if(Picked != null)                      {                          Picked.SetPosition(Picked.GetPosition() + FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Right) * (float)e.XDelta * -0.01f);                          Picked.SetPosition(Picked.GetPosition() + FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Up) * (float)e.YDelta * -0.01f);                      }                  }                  else if(kb.IsKeyDown(OpenTK.Input.Key.F))                  {                      FreeCam.Freeze = true;                      if(Picked != null)                      {                          Picked.SetOrientation(Quaternion.Multiply(Picked.GetOrientation()' Quaternion.FromAxisAngle(FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Up)' (float)e.XDelta * -0.01f)));                          Picked.SetOrientation(Quaternion.Multiply(Picked.GetOrientation()' Quaternion.FromAxisAngle(FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Left)' (float)e.YDelta * -0.01f)));                      }                  }                  else if(kb.IsKeyDown(OpenTK.Input.Key.C))                  {                      FreeCam.Freeze = true;                      if(Picked != null)                      {                          Picked.SetScale(Picked.GetScale() + new Vector3((float)e.XDelta * -0.01f));                      }                  }                  else                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: Game.OnMouseMove += (o' e) =>              {                  MouseX = e.X;                  MouseY = e.Y;                    var kb = OpenTK.Input.Keyboard.GetState();                  if(kb.IsKeyDown(OpenTK.Input.Key.T))                  {                      FreeCam.Freeze = true;                      if(Picked != null)                      {                          Picked.SetPosition(Picked.GetPosition() + FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Right) * (float)e.XDelta * -0.01f);                          Picked.SetPosition(Picked.GetPosition() + FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Up) * (float)e.YDelta * -0.01f);                      }                  }                  else if(kb.IsKeyDown(OpenTK.Input.Key.F))                  {                      FreeCam.Freeze = true;                      if(Picked != null)                      {                          Picked.SetOrientation(Quaternion.Multiply(Picked.GetOrientation()' Quaternion.FromAxisAngle(FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Up)' (float)e.XDelta * -0.01f)));                          Picked.SetOrientation(Quaternion.Multiply(Picked.GetOrientation()' Quaternion.FromAxisAngle(FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Left)' (float)e.YDelta * -0.01f)));                      }                  }                  else if(kb.IsKeyDown(OpenTK.Input.Key.C))                  {                      FreeCam.Freeze = true;                      if(Picked != null)                      {                          Picked.SetScale(Picked.GetScale() + new Vector3((float)e.XDelta * -0.01f));                      }                  }                  else                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: Game.OnMouseMove += (o' e) =>              {                  MouseX = e.X;                  MouseY = e.Y;                    var kb = OpenTK.Input.Keyboard.GetState();                  if(kb.IsKeyDown(OpenTK.Input.Key.T))                  {                      FreeCam.Freeze = true;                      if(Picked != null)                      {                          Picked.SetPosition(Picked.GetPosition() + FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Right) * (float)e.XDelta * -0.01f);                          Picked.SetPosition(Picked.GetPosition() + FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Up) * (float)e.YDelta * -0.01f);                      }                  }                  else if(kb.IsKeyDown(OpenTK.Input.Key.F))                  {                      FreeCam.Freeze = true;                      if(Picked != null)                      {                          Picked.SetOrientation(Quaternion.Multiply(Picked.GetOrientation()' Quaternion.FromAxisAngle(FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Up)' (float)e.XDelta * -0.01f)));                          Picked.SetOrientation(Quaternion.Multiply(Picked.GetOrientation()' Quaternion.FromAxisAngle(FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Left)' (float)e.YDelta * -0.01f)));                      }                  }                  else if(kb.IsKeyDown(OpenTK.Input.Key.C))                  {                      FreeCam.Freeze = true;                      if(Picked != null)                      {                          Picked.SetScale(Picked.GetScale() + new Vector3((float)e.XDelta * -0.01f));                      }                  }                  else                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: Game.OnMouseMove += (o' e) =>              {                  MouseX = e.X;                  MouseY = e.Y;                    var kb = OpenTK.Input.Keyboard.GetState();                  if(kb.IsKeyDown(OpenTK.Input.Key.T))                  {                      FreeCam.Freeze = true;                      if(Picked != null)                      {                          Picked.SetPosition(Picked.GetPosition() + FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Right) * (float)e.XDelta * -0.01f);                          Picked.SetPosition(Picked.GetPosition() + FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Up) * (float)e.YDelta * -0.01f);                      }                  }                  else if(kb.IsKeyDown(OpenTK.Input.Key.F))                  {                      FreeCam.Freeze = true;                      if(Picked != null)                      {                          Picked.SetOrientation(Quaternion.Multiply(Picked.GetOrientation()' Quaternion.FromAxisAngle(FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Up)' (float)e.XDelta * -0.01f)));                          Picked.SetOrientation(Quaternion.Multiply(Picked.GetOrientation()' Quaternion.FromAxisAngle(FreeCam.Cam.GetOrientation().GetTangent(MathExtensions.TangentDirection.Left)' (float)e.YDelta * -0.01f)));                      }                  }                  else if(kb.IsKeyDown(OpenTK.Input.Key.C))                  {                      FreeCam.Freeze = true;                      if(Picked != null)                      {                          Picked.SetScale(Picked.GetScale() + new Vector3((float)e.XDelta * -0.01f));                      }                  }                  else                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: Game.OnMouseWheel += (o' e) =>              {                  Camera.Current.LensBlurAmount -= e.Delta / 2.0f;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: Game.OnAfterDraw += (o' e) =>              {                  //.ToString(System.Globalization.CultureInfo.InvariantCulture)                    //SettingsController.Instance.UpdatePerformance();                  /*var jpad = OpenTK.Input.GamePad.GetState(0);                  float deadzone = 0.15f;                  if(Picked != null)                  {                      if(Math.Abs(jpad.ThumbSticks.Right.X) > deadzone)                      {                          var ang = Picked.GetOrientation().GetTangent(MathExtensions.TangentDirection.Up);                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.ThumbSticks.Right.X * 0.01f));                      }                      if(Math.Abs(jpad.ThumbSticks.Right.Y) > deadzone)                      {                          var ang = Picked.GetOrientation().GetTangent(MathExtensions.TangentDirection.Left);                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.ThumbSticks.Right.Y * 0.01f));                      }                      if(Math.Abs(jpad.Triggers.Left) > deadzone)                      {                          var ang = Picked.GetOrientation().ToDirection();                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.Triggers.Left * 0.01f));                      }                      if(Math.Abs(jpad.Triggers.Right) > deadzone)                      {                          var ang = Picked.GetOrientation().ToDirection();                          Picked.Rotate(Quaternion.FromAxisAngle(ang' -jpad.Triggers.Right*0.01f));                      }                  }*/                  var kb = OpenTK.Input.Keyboard.GetState();                  if(Game.DisplayAdapter.IsCursorVisible)                  {                      if(!kb.IsKeyDown(OpenTK.Input.Key.LControl))                      {                          //Game.DisplayAdapter.Pipeline.PostProcessor.ShowSelected = false;                      }                      else                      {                          //Game.DisplayAdapter.Pipeline.PostProcessor.ShowSelected = true;                          PickingResult.MapData(Vector4.One);                          MousePicker.Use();                          var state = OpenTK.Input.Mouse.GetState();                          MousePicker.SetUniform("Mouse"' new Vector2(MouseX' Game.Resolution.Height - MouseY));                          MousePicker.SetUniform("Resolution"' new Vector2(Game.Resolution.Width' Game.Resolution.Height));                          PickingResult.Use(0);                          GL.ActiveTexture(TextureUnit.Texture29);                          GL.BindTexture(TextureTarget.Texture2D' Game.DisplayAdapter.MainRenderer.MRT.TexMeshIds);                          MousePicker.Dispatch(1' 1' 1);                          OpenTK.Graphics.OpenGL4.GL.MemoryBarrier(OpenTK.Graphics.OpenGL4.MemoryBarrierFlags.ShaderStorageBarrierBit);                          byte[] result = PickingResult.Read(0' 4);                          uint id = BitConverter.ToUInt32(result' 0);                          foreach(var m in Game.World.Scene.GetFlatRenderableList())                          {                              if(m is Mesh3d)                              {                                  foreach(var inst in (m as Mesh3d).GetInstances())                                  {                                      if(inst.Id == id)                                      {                                          Picked = inst;                                          PickedMesh = (m as Mesh3d);                                          //SettingsController.Instance.SetMesh(inst);                                      }                                  }                              }                          }                      }                  }                  /*                  if(kb.IsKeyDown(OpenTK.Input.Key.Plus))                  {                      var dir = Game.CascadeShadowMaps.GetDirection();                      dir = Quaternion.Multiply(Quaternion.FromAxisAngle(Vector3.UnitX' -0.01f)' dir);                      Game.CascadeShadowMaps.SetDirection(dir);                  }                    if(kb.IsKeyDown(OpenTK.Input.Key.Minus))                  {                      var dir = Game.CascadeShadowMaps.GetDirection();                      dir = Quaternion.Multiply(Quaternion.FromAxisAngle(Vector3.UnitX' 0.01f)' dir);                      Game.CascadeShadowMaps.SetDirection(dir);                  }*/                    if(kb.IsKeyDown(OpenTK.Input.Key.T) && Picked != null)                  {                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad4))                      {                          Picked.Translate(new Vector3(-0.01f' 0' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad6))                      {                          Picked.Translate(new Vector3(0.01f' 0' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad8))                      {                          Picked.Translate(new Vector3(0' 0' 0.01f));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad2))                      {                          Picked.Translate(new Vector3(0' 0' -0.01f));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad7))                      {                          Picked.Translate(new Vector3(0' 0.01f' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad1))                      {                          Picked.Translate(new Vector3(0' -0.01f' 0));                      }                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.C) && Picked != null)                  {                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad8))                      {                          Picked.Scale(1.01f);                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad1))                      {                          Picked.Scale(0.99f);                      }                  }                    var rd = new Random();/*                  if(kb.IsKeyDown(OpenTK.Input.Key.Left))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      RedLight.ForEach((ax) => ax.camera.Transformation.SetPosition(pos + Vector3.UnitX / 12.0f));                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Right))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitX / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Up))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos + Vector3.UnitZ / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Down))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitZ / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.PageUp))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos + Vector3.UnitY / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.PageDown))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitY / 12.0f);                  }*/                  /*if(kb.IsKeyDown(OpenTK.Input.Key.U))                  {                      var quat = Quaternion.FromAxisAngle(sun.Orientation.GetTangent(MathExtensions.TangentDirection.Left)' -0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.J))                  {                      var quat = Quaternion.FromAxisAngle(sun.Orientation.GetTangent(MathExtensions.TangentDirection.Left)' 0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.H))                  {                      var quat = Quaternion.FromAxisAngle(Vector3.UnitY' -0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.K))                  {                      var quat = Quaternion.FromAxisAngle(Vector3.UnitY' 0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }*/              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: Game.OnAfterDraw += (o' e) =>              {                  //.ToString(System.Globalization.CultureInfo.InvariantCulture)                    //SettingsController.Instance.UpdatePerformance();                  /*var jpad = OpenTK.Input.GamePad.GetState(0);                  float deadzone = 0.15f;                  if(Picked != null)                  {                      if(Math.Abs(jpad.ThumbSticks.Right.X) > deadzone)                      {                          var ang = Picked.GetOrientation().GetTangent(MathExtensions.TangentDirection.Up);                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.ThumbSticks.Right.X * 0.01f));                      }                      if(Math.Abs(jpad.ThumbSticks.Right.Y) > deadzone)                      {                          var ang = Picked.GetOrientation().GetTangent(MathExtensions.TangentDirection.Left);                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.ThumbSticks.Right.Y * 0.01f));                      }                      if(Math.Abs(jpad.Triggers.Left) > deadzone)                      {                          var ang = Picked.GetOrientation().ToDirection();                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.Triggers.Left * 0.01f));                      }                      if(Math.Abs(jpad.Triggers.Right) > deadzone)                      {                          var ang = Picked.GetOrientation().ToDirection();                          Picked.Rotate(Quaternion.FromAxisAngle(ang' -jpad.Triggers.Right*0.01f));                      }                  }*/                  var kb = OpenTK.Input.Keyboard.GetState();                  if(Game.DisplayAdapter.IsCursorVisible)                  {                      if(!kb.IsKeyDown(OpenTK.Input.Key.LControl))                      {                          //Game.DisplayAdapter.Pipeline.PostProcessor.ShowSelected = false;                      }                      else                      {                          //Game.DisplayAdapter.Pipeline.PostProcessor.ShowSelected = true;                          PickingResult.MapData(Vector4.One);                          MousePicker.Use();                          var state = OpenTK.Input.Mouse.GetState();                          MousePicker.SetUniform("Mouse"' new Vector2(MouseX' Game.Resolution.Height - MouseY));                          MousePicker.SetUniform("Resolution"' new Vector2(Game.Resolution.Width' Game.Resolution.Height));                          PickingResult.Use(0);                          GL.ActiveTexture(TextureUnit.Texture29);                          GL.BindTexture(TextureTarget.Texture2D' Game.DisplayAdapter.MainRenderer.MRT.TexMeshIds);                          MousePicker.Dispatch(1' 1' 1);                          OpenTK.Graphics.OpenGL4.GL.MemoryBarrier(OpenTK.Graphics.OpenGL4.MemoryBarrierFlags.ShaderStorageBarrierBit);                          byte[] result = PickingResult.Read(0' 4);                          uint id = BitConverter.ToUInt32(result' 0);                          foreach(var m in Game.World.Scene.GetFlatRenderableList())                          {                              if(m is Mesh3d)                              {                                  foreach(var inst in (m as Mesh3d).GetInstances())                                  {                                      if(inst.Id == id)                                      {                                          Picked = inst;                                          PickedMesh = (m as Mesh3d);                                          //SettingsController.Instance.SetMesh(inst);                                      }                                  }                              }                          }                      }                  }                  /*                  if(kb.IsKeyDown(OpenTK.Input.Key.Plus))                  {                      var dir = Game.CascadeShadowMaps.GetDirection();                      dir = Quaternion.Multiply(Quaternion.FromAxisAngle(Vector3.UnitX' -0.01f)' dir);                      Game.CascadeShadowMaps.SetDirection(dir);                  }                    if(kb.IsKeyDown(OpenTK.Input.Key.Minus))                  {                      var dir = Game.CascadeShadowMaps.GetDirection();                      dir = Quaternion.Multiply(Quaternion.FromAxisAngle(Vector3.UnitX' 0.01f)' dir);                      Game.CascadeShadowMaps.SetDirection(dir);                  }*/                    if(kb.IsKeyDown(OpenTK.Input.Key.T) && Picked != null)                  {                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad4))                      {                          Picked.Translate(new Vector3(-0.01f' 0' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad6))                      {                          Picked.Translate(new Vector3(0.01f' 0' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad8))                      {                          Picked.Translate(new Vector3(0' 0' 0.01f));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad2))                      {                          Picked.Translate(new Vector3(0' 0' -0.01f));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad7))                      {                          Picked.Translate(new Vector3(0' 0.01f' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad1))                      {                          Picked.Translate(new Vector3(0' -0.01f' 0));                      }                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.C) && Picked != null)                  {                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad8))                      {                          Picked.Scale(1.01f);                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad1))                      {                          Picked.Scale(0.99f);                      }                  }                    var rd = new Random();/*                  if(kb.IsKeyDown(OpenTK.Input.Key.Left))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      RedLight.ForEach((ax) => ax.camera.Transformation.SetPosition(pos + Vector3.UnitX / 12.0f));                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Right))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitX / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Up))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos + Vector3.UnitZ / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Down))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitZ / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.PageUp))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos + Vector3.UnitY / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.PageDown))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitY / 12.0f);                  }*/                  /*if(kb.IsKeyDown(OpenTK.Input.Key.U))                  {                      var quat = Quaternion.FromAxisAngle(sun.Orientation.GetTangent(MathExtensions.TangentDirection.Left)' -0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.J))                  {                      var quat = Quaternion.FromAxisAngle(sun.Orientation.GetTangent(MathExtensions.TangentDirection.Left)' 0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.H))                  {                      var quat = Quaternion.FromAxisAngle(Vector3.UnitY' -0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.K))                  {                      var quat = Quaternion.FromAxisAngle(Vector3.UnitY' 0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }*/              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: Game.OnAfterDraw += (o' e) =>              {                  //.ToString(System.Globalization.CultureInfo.InvariantCulture)                    //SettingsController.Instance.UpdatePerformance();                  /*var jpad = OpenTK.Input.GamePad.GetState(0);                  float deadzone = 0.15f;                  if(Picked != null)                  {                      if(Math.Abs(jpad.ThumbSticks.Right.X) > deadzone)                      {                          var ang = Picked.GetOrientation().GetTangent(MathExtensions.TangentDirection.Up);                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.ThumbSticks.Right.X * 0.01f));                      }                      if(Math.Abs(jpad.ThumbSticks.Right.Y) > deadzone)                      {                          var ang = Picked.GetOrientation().GetTangent(MathExtensions.TangentDirection.Left);                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.ThumbSticks.Right.Y * 0.01f));                      }                      if(Math.Abs(jpad.Triggers.Left) > deadzone)                      {                          var ang = Picked.GetOrientation().ToDirection();                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.Triggers.Left * 0.01f));                      }                      if(Math.Abs(jpad.Triggers.Right) > deadzone)                      {                          var ang = Picked.GetOrientation().ToDirection();                          Picked.Rotate(Quaternion.FromAxisAngle(ang' -jpad.Triggers.Right*0.01f));                      }                  }*/                  var kb = OpenTK.Input.Keyboard.GetState();                  if(Game.DisplayAdapter.IsCursorVisible)                  {                      if(!kb.IsKeyDown(OpenTK.Input.Key.LControl))                      {                          //Game.DisplayAdapter.Pipeline.PostProcessor.ShowSelected = false;                      }                      else                      {                          //Game.DisplayAdapter.Pipeline.PostProcessor.ShowSelected = true;                          PickingResult.MapData(Vector4.One);                          MousePicker.Use();                          var state = OpenTK.Input.Mouse.GetState();                          MousePicker.SetUniform("Mouse"' new Vector2(MouseX' Game.Resolution.Height - MouseY));                          MousePicker.SetUniform("Resolution"' new Vector2(Game.Resolution.Width' Game.Resolution.Height));                          PickingResult.Use(0);                          GL.ActiveTexture(TextureUnit.Texture29);                          GL.BindTexture(TextureTarget.Texture2D' Game.DisplayAdapter.MainRenderer.MRT.TexMeshIds);                          MousePicker.Dispatch(1' 1' 1);                          OpenTK.Graphics.OpenGL4.GL.MemoryBarrier(OpenTK.Graphics.OpenGL4.MemoryBarrierFlags.ShaderStorageBarrierBit);                          byte[] result = PickingResult.Read(0' 4);                          uint id = BitConverter.ToUInt32(result' 0);                          foreach(var m in Game.World.Scene.GetFlatRenderableList())                          {                              if(m is Mesh3d)                              {                                  foreach(var inst in (m as Mesh3d).GetInstances())                                  {                                      if(inst.Id == id)                                      {                                          Picked = inst;                                          PickedMesh = (m as Mesh3d);                                          //SettingsController.Instance.SetMesh(inst);                                      }                                  }                              }                          }                      }                  }                  /*                  if(kb.IsKeyDown(OpenTK.Input.Key.Plus))                  {                      var dir = Game.CascadeShadowMaps.GetDirection();                      dir = Quaternion.Multiply(Quaternion.FromAxisAngle(Vector3.UnitX' -0.01f)' dir);                      Game.CascadeShadowMaps.SetDirection(dir);                  }                    if(kb.IsKeyDown(OpenTK.Input.Key.Minus))                  {                      var dir = Game.CascadeShadowMaps.GetDirection();                      dir = Quaternion.Multiply(Quaternion.FromAxisAngle(Vector3.UnitX' 0.01f)' dir);                      Game.CascadeShadowMaps.SetDirection(dir);                  }*/                    if(kb.IsKeyDown(OpenTK.Input.Key.T) && Picked != null)                  {                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad4))                      {                          Picked.Translate(new Vector3(-0.01f' 0' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad6))                      {                          Picked.Translate(new Vector3(0.01f' 0' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad8))                      {                          Picked.Translate(new Vector3(0' 0' 0.01f));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad2))                      {                          Picked.Translate(new Vector3(0' 0' -0.01f));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad7))                      {                          Picked.Translate(new Vector3(0' 0.01f' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad1))                      {                          Picked.Translate(new Vector3(0' -0.01f' 0));                      }                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.C) && Picked != null)                  {                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad8))                      {                          Picked.Scale(1.01f);                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad1))                      {                          Picked.Scale(0.99f);                      }                  }                    var rd = new Random();/*                  if(kb.IsKeyDown(OpenTK.Input.Key.Left))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      RedLight.ForEach((ax) => ax.camera.Transformation.SetPosition(pos + Vector3.UnitX / 12.0f));                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Right))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitX / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Up))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos + Vector3.UnitZ / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Down))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitZ / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.PageUp))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos + Vector3.UnitY / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.PageDown))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitY / 12.0f);                  }*/                  /*if(kb.IsKeyDown(OpenTK.Input.Key.U))                  {                      var quat = Quaternion.FromAxisAngle(sun.Orientation.GetTangent(MathExtensions.TangentDirection.Left)' -0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.J))                  {                      var quat = Quaternion.FromAxisAngle(sun.Orientation.GetTangent(MathExtensions.TangentDirection.Left)' 0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.H))                  {                      var quat = Quaternion.FromAxisAngle(Vector3.UnitY' -0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.K))                  {                      var quat = Quaternion.FromAxisAngle(Vector3.UnitY' 0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }*/              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: Game.OnAfterDraw += (o' e) =>              {                  //.ToString(System.Globalization.CultureInfo.InvariantCulture)                    //SettingsController.Instance.UpdatePerformance();                  /*var jpad = OpenTK.Input.GamePad.GetState(0);                  float deadzone = 0.15f;                  if(Picked != null)                  {                      if(Math.Abs(jpad.ThumbSticks.Right.X) > deadzone)                      {                          var ang = Picked.GetOrientation().GetTangent(MathExtensions.TangentDirection.Up);                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.ThumbSticks.Right.X * 0.01f));                      }                      if(Math.Abs(jpad.ThumbSticks.Right.Y) > deadzone)                      {                          var ang = Picked.GetOrientation().GetTangent(MathExtensions.TangentDirection.Left);                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.ThumbSticks.Right.Y * 0.01f));                      }                      if(Math.Abs(jpad.Triggers.Left) > deadzone)                      {                          var ang = Picked.GetOrientation().ToDirection();                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.Triggers.Left * 0.01f));                      }                      if(Math.Abs(jpad.Triggers.Right) > deadzone)                      {                          var ang = Picked.GetOrientation().ToDirection();                          Picked.Rotate(Quaternion.FromAxisAngle(ang' -jpad.Triggers.Right*0.01f));                      }                  }*/                  var kb = OpenTK.Input.Keyboard.GetState();                  if(Game.DisplayAdapter.IsCursorVisible)                  {                      if(!kb.IsKeyDown(OpenTK.Input.Key.LControl))                      {                          //Game.DisplayAdapter.Pipeline.PostProcessor.ShowSelected = false;                      }                      else                      {                          //Game.DisplayAdapter.Pipeline.PostProcessor.ShowSelected = true;                          PickingResult.MapData(Vector4.One);                          MousePicker.Use();                          var state = OpenTK.Input.Mouse.GetState();                          MousePicker.SetUniform("Mouse"' new Vector2(MouseX' Game.Resolution.Height - MouseY));                          MousePicker.SetUniform("Resolution"' new Vector2(Game.Resolution.Width' Game.Resolution.Height));                          PickingResult.Use(0);                          GL.ActiveTexture(TextureUnit.Texture29);                          GL.BindTexture(TextureTarget.Texture2D' Game.DisplayAdapter.MainRenderer.MRT.TexMeshIds);                          MousePicker.Dispatch(1' 1' 1);                          OpenTK.Graphics.OpenGL4.GL.MemoryBarrier(OpenTK.Graphics.OpenGL4.MemoryBarrierFlags.ShaderStorageBarrierBit);                          byte[] result = PickingResult.Read(0' 4);                          uint id = BitConverter.ToUInt32(result' 0);                          foreach(var m in Game.World.Scene.GetFlatRenderableList())                          {                              if(m is Mesh3d)                              {                                  foreach(var inst in (m as Mesh3d).GetInstances())                                  {                                      if(inst.Id == id)                                      {                                          Picked = inst;                                          PickedMesh = (m as Mesh3d);                                          //SettingsController.Instance.SetMesh(inst);                                      }                                  }                              }                          }                      }                  }                  /*                  if(kb.IsKeyDown(OpenTK.Input.Key.Plus))                  {                      var dir = Game.CascadeShadowMaps.GetDirection();                      dir = Quaternion.Multiply(Quaternion.FromAxisAngle(Vector3.UnitX' -0.01f)' dir);                      Game.CascadeShadowMaps.SetDirection(dir);                  }                    if(kb.IsKeyDown(OpenTK.Input.Key.Minus))                  {                      var dir = Game.CascadeShadowMaps.GetDirection();                      dir = Quaternion.Multiply(Quaternion.FromAxisAngle(Vector3.UnitX' 0.01f)' dir);                      Game.CascadeShadowMaps.SetDirection(dir);                  }*/                    if(kb.IsKeyDown(OpenTK.Input.Key.T) && Picked != null)                  {                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad4))                      {                          Picked.Translate(new Vector3(-0.01f' 0' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad6))                      {                          Picked.Translate(new Vector3(0.01f' 0' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad8))                      {                          Picked.Translate(new Vector3(0' 0' 0.01f));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad2))                      {                          Picked.Translate(new Vector3(0' 0' -0.01f));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad7))                      {                          Picked.Translate(new Vector3(0' 0.01f' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad1))                      {                          Picked.Translate(new Vector3(0' -0.01f' 0));                      }                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.C) && Picked != null)                  {                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad8))                      {                          Picked.Scale(1.01f);                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad1))                      {                          Picked.Scale(0.99f);                      }                  }                    var rd = new Random();/*                  if(kb.IsKeyDown(OpenTK.Input.Key.Left))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      RedLight.ForEach((ax) => ax.camera.Transformation.SetPosition(pos + Vector3.UnitX / 12.0f));                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Right))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitX / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Up))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos + Vector3.UnitZ / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Down))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitZ / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.PageUp))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos + Vector3.UnitY / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.PageDown))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitY / 12.0f);                  }*/                  /*if(kb.IsKeyDown(OpenTK.Input.Key.U))                  {                      var quat = Quaternion.FromAxisAngle(sun.Orientation.GetTangent(MathExtensions.TangentDirection.Left)' -0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.J))                  {                      var quat = Quaternion.FromAxisAngle(sun.Orientation.GetTangent(MathExtensions.TangentDirection.Left)' 0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.H))                  {                      var quat = Quaternion.FromAxisAngle(Vector3.UnitY' -0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.K))                  {                      var quat = Quaternion.FromAxisAngle(Vector3.UnitY' 0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }*/              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: Game.OnAfterDraw += (o' e) =>              {                  //.ToString(System.Globalization.CultureInfo.InvariantCulture)                    //SettingsController.Instance.UpdatePerformance();                  /*var jpad = OpenTK.Input.GamePad.GetState(0);                  float deadzone = 0.15f;                  if(Picked != null)                  {                      if(Math.Abs(jpad.ThumbSticks.Right.X) > deadzone)                      {                          var ang = Picked.GetOrientation().GetTangent(MathExtensions.TangentDirection.Up);                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.ThumbSticks.Right.X * 0.01f));                      }                      if(Math.Abs(jpad.ThumbSticks.Right.Y) > deadzone)                      {                          var ang = Picked.GetOrientation().GetTangent(MathExtensions.TangentDirection.Left);                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.ThumbSticks.Right.Y * 0.01f));                      }                      if(Math.Abs(jpad.Triggers.Left) > deadzone)                      {                          var ang = Picked.GetOrientation().ToDirection();                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.Triggers.Left * 0.01f));                      }                      if(Math.Abs(jpad.Triggers.Right) > deadzone)                      {                          var ang = Picked.GetOrientation().ToDirection();                          Picked.Rotate(Quaternion.FromAxisAngle(ang' -jpad.Triggers.Right*0.01f));                      }                  }*/                  var kb = OpenTK.Input.Keyboard.GetState();                  if(Game.DisplayAdapter.IsCursorVisible)                  {                      if(!kb.IsKeyDown(OpenTK.Input.Key.LControl))                      {                          //Game.DisplayAdapter.Pipeline.PostProcessor.ShowSelected = false;                      }                      else                      {                          //Game.DisplayAdapter.Pipeline.PostProcessor.ShowSelected = true;                          PickingResult.MapData(Vector4.One);                          MousePicker.Use();                          var state = OpenTK.Input.Mouse.GetState();                          MousePicker.SetUniform("Mouse"' new Vector2(MouseX' Game.Resolution.Height - MouseY));                          MousePicker.SetUniform("Resolution"' new Vector2(Game.Resolution.Width' Game.Resolution.Height));                          PickingResult.Use(0);                          GL.ActiveTexture(TextureUnit.Texture29);                          GL.BindTexture(TextureTarget.Texture2D' Game.DisplayAdapter.MainRenderer.MRT.TexMeshIds);                          MousePicker.Dispatch(1' 1' 1);                          OpenTK.Graphics.OpenGL4.GL.MemoryBarrier(OpenTK.Graphics.OpenGL4.MemoryBarrierFlags.ShaderStorageBarrierBit);                          byte[] result = PickingResult.Read(0' 4);                          uint id = BitConverter.ToUInt32(result' 0);                          foreach(var m in Game.World.Scene.GetFlatRenderableList())                          {                              if(m is Mesh3d)                              {                                  foreach(var inst in (m as Mesh3d).GetInstances())                                  {                                      if(inst.Id == id)                                      {                                          Picked = inst;                                          PickedMesh = (m as Mesh3d);                                          //SettingsController.Instance.SetMesh(inst);                                      }                                  }                              }                          }                      }                  }                  /*                  if(kb.IsKeyDown(OpenTK.Input.Key.Plus))                  {                      var dir = Game.CascadeShadowMaps.GetDirection();                      dir = Quaternion.Multiply(Quaternion.FromAxisAngle(Vector3.UnitX' -0.01f)' dir);                      Game.CascadeShadowMaps.SetDirection(dir);                  }                    if(kb.IsKeyDown(OpenTK.Input.Key.Minus))                  {                      var dir = Game.CascadeShadowMaps.GetDirection();                      dir = Quaternion.Multiply(Quaternion.FromAxisAngle(Vector3.UnitX' 0.01f)' dir);                      Game.CascadeShadowMaps.SetDirection(dir);                  }*/                    if(kb.IsKeyDown(OpenTK.Input.Key.T) && Picked != null)                  {                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad4))                      {                          Picked.Translate(new Vector3(-0.01f' 0' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad6))                      {                          Picked.Translate(new Vector3(0.01f' 0' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad8))                      {                          Picked.Translate(new Vector3(0' 0' 0.01f));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad2))                      {                          Picked.Translate(new Vector3(0' 0' -0.01f));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad7))                      {                          Picked.Translate(new Vector3(0' 0.01f' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad1))                      {                          Picked.Translate(new Vector3(0' -0.01f' 0));                      }                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.C) && Picked != null)                  {                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad8))                      {                          Picked.Scale(1.01f);                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad1))                      {                          Picked.Scale(0.99f);                      }                  }                    var rd = new Random();/*                  if(kb.IsKeyDown(OpenTK.Input.Key.Left))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      RedLight.ForEach((ax) => ax.camera.Transformation.SetPosition(pos + Vector3.UnitX / 12.0f));                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Right))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitX / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Up))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos + Vector3.UnitZ / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Down))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitZ / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.PageUp))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos + Vector3.UnitY / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.PageDown))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitY / 12.0f);                  }*/                  /*if(kb.IsKeyDown(OpenTK.Input.Key.U))                  {                      var quat = Quaternion.FromAxisAngle(sun.Orientation.GetTangent(MathExtensions.TangentDirection.Left)' -0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.J))                  {                      var quat = Quaternion.FromAxisAngle(sun.Orientation.GetTangent(MathExtensions.TangentDirection.Left)' 0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.H))                  {                      var quat = Quaternion.FromAxisAngle(Vector3.UnitY' -0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.K))                  {                      var quat = Quaternion.FromAxisAngle(Vector3.UnitY' 0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }*/              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: Game.OnAfterDraw += (o' e) =>              {                  //.ToString(System.Globalization.CultureInfo.InvariantCulture)                    //SettingsController.Instance.UpdatePerformance();                  /*var jpad = OpenTK.Input.GamePad.GetState(0);                  float deadzone = 0.15f;                  if(Picked != null)                  {                      if(Math.Abs(jpad.ThumbSticks.Right.X) > deadzone)                      {                          var ang = Picked.GetOrientation().GetTangent(MathExtensions.TangentDirection.Up);                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.ThumbSticks.Right.X * 0.01f));                      }                      if(Math.Abs(jpad.ThumbSticks.Right.Y) > deadzone)                      {                          var ang = Picked.GetOrientation().GetTangent(MathExtensions.TangentDirection.Left);                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.ThumbSticks.Right.Y * 0.01f));                      }                      if(Math.Abs(jpad.Triggers.Left) > deadzone)                      {                          var ang = Picked.GetOrientation().ToDirection();                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.Triggers.Left * 0.01f));                      }                      if(Math.Abs(jpad.Triggers.Right) > deadzone)                      {                          var ang = Picked.GetOrientation().ToDirection();                          Picked.Rotate(Quaternion.FromAxisAngle(ang' -jpad.Triggers.Right*0.01f));                      }                  }*/                  var kb = OpenTK.Input.Keyboard.GetState();                  if(Game.DisplayAdapter.IsCursorVisible)                  {                      if(!kb.IsKeyDown(OpenTK.Input.Key.LControl))                      {                          //Game.DisplayAdapter.Pipeline.PostProcessor.ShowSelected = false;                      }                      else                      {                          //Game.DisplayAdapter.Pipeline.PostProcessor.ShowSelected = true;                          PickingResult.MapData(Vector4.One);                          MousePicker.Use();                          var state = OpenTK.Input.Mouse.GetState();                          MousePicker.SetUniform("Mouse"' new Vector2(MouseX' Game.Resolution.Height - MouseY));                          MousePicker.SetUniform("Resolution"' new Vector2(Game.Resolution.Width' Game.Resolution.Height));                          PickingResult.Use(0);                          GL.ActiveTexture(TextureUnit.Texture29);                          GL.BindTexture(TextureTarget.Texture2D' Game.DisplayAdapter.MainRenderer.MRT.TexMeshIds);                          MousePicker.Dispatch(1' 1' 1);                          OpenTK.Graphics.OpenGL4.GL.MemoryBarrier(OpenTK.Graphics.OpenGL4.MemoryBarrierFlags.ShaderStorageBarrierBit);                          byte[] result = PickingResult.Read(0' 4);                          uint id = BitConverter.ToUInt32(result' 0);                          foreach(var m in Game.World.Scene.GetFlatRenderableList())                          {                              if(m is Mesh3d)                              {                                  foreach(var inst in (m as Mesh3d).GetInstances())                                  {                                      if(inst.Id == id)                                      {                                          Picked = inst;                                          PickedMesh = (m as Mesh3d);                                          //SettingsController.Instance.SetMesh(inst);                                      }                                  }                              }                          }                      }                  }                  /*                  if(kb.IsKeyDown(OpenTK.Input.Key.Plus))                  {                      var dir = Game.CascadeShadowMaps.GetDirection();                      dir = Quaternion.Multiply(Quaternion.FromAxisAngle(Vector3.UnitX' -0.01f)' dir);                      Game.CascadeShadowMaps.SetDirection(dir);                  }                    if(kb.IsKeyDown(OpenTK.Input.Key.Minus))                  {                      var dir = Game.CascadeShadowMaps.GetDirection();                      dir = Quaternion.Multiply(Quaternion.FromAxisAngle(Vector3.UnitX' 0.01f)' dir);                      Game.CascadeShadowMaps.SetDirection(dir);                  }*/                    if(kb.IsKeyDown(OpenTK.Input.Key.T) && Picked != null)                  {                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad4))                      {                          Picked.Translate(new Vector3(-0.01f' 0' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad6))                      {                          Picked.Translate(new Vector3(0.01f' 0' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad8))                      {                          Picked.Translate(new Vector3(0' 0' 0.01f));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad2))                      {                          Picked.Translate(new Vector3(0' 0' -0.01f));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad7))                      {                          Picked.Translate(new Vector3(0' 0.01f' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad1))                      {                          Picked.Translate(new Vector3(0' -0.01f' 0));                      }                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.C) && Picked != null)                  {                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad8))                      {                          Picked.Scale(1.01f);                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad1))                      {                          Picked.Scale(0.99f);                      }                  }                    var rd = new Random();/*                  if(kb.IsKeyDown(OpenTK.Input.Key.Left))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      RedLight.ForEach((ax) => ax.camera.Transformation.SetPosition(pos + Vector3.UnitX / 12.0f));                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Right))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitX / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Up))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos + Vector3.UnitZ / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Down))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitZ / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.PageUp))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos + Vector3.UnitY / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.PageDown))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitY / 12.0f);                  }*/                  /*if(kb.IsKeyDown(OpenTK.Input.Key.U))                  {                      var quat = Quaternion.FromAxisAngle(sun.Orientation.GetTangent(MathExtensions.TangentDirection.Left)' -0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.J))                  {                      var quat = Quaternion.FromAxisAngle(sun.Orientation.GetTangent(MathExtensions.TangentDirection.Left)' 0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.H))                  {                      var quat = Quaternion.FromAxisAngle(Vector3.UnitY' -0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.K))                  {                      var quat = Quaternion.FromAxisAngle(Vector3.UnitY' 0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }*/              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: Game.OnAfterDraw += (o' e) =>              {                  //.ToString(System.Globalization.CultureInfo.InvariantCulture)                    //SettingsController.Instance.UpdatePerformance();                  /*var jpad = OpenTK.Input.GamePad.GetState(0);                  float deadzone = 0.15f;                  if(Picked != null)                  {                      if(Math.Abs(jpad.ThumbSticks.Right.X) > deadzone)                      {                          var ang = Picked.GetOrientation().GetTangent(MathExtensions.TangentDirection.Up);                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.ThumbSticks.Right.X * 0.01f));                      }                      if(Math.Abs(jpad.ThumbSticks.Right.Y) > deadzone)                      {                          var ang = Picked.GetOrientation().GetTangent(MathExtensions.TangentDirection.Left);                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.ThumbSticks.Right.Y * 0.01f));                      }                      if(Math.Abs(jpad.Triggers.Left) > deadzone)                      {                          var ang = Picked.GetOrientation().ToDirection();                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.Triggers.Left * 0.01f));                      }                      if(Math.Abs(jpad.Triggers.Right) > deadzone)                      {                          var ang = Picked.GetOrientation().ToDirection();                          Picked.Rotate(Quaternion.FromAxisAngle(ang' -jpad.Triggers.Right*0.01f));                      }                  }*/                  var kb = OpenTK.Input.Keyboard.GetState();                  if(Game.DisplayAdapter.IsCursorVisible)                  {                      if(!kb.IsKeyDown(OpenTK.Input.Key.LControl))                      {                          //Game.DisplayAdapter.Pipeline.PostProcessor.ShowSelected = false;                      }                      else                      {                          //Game.DisplayAdapter.Pipeline.PostProcessor.ShowSelected = true;                          PickingResult.MapData(Vector4.One);                          MousePicker.Use();                          var state = OpenTK.Input.Mouse.GetState();                          MousePicker.SetUniform("Mouse"' new Vector2(MouseX' Game.Resolution.Height - MouseY));                          MousePicker.SetUniform("Resolution"' new Vector2(Game.Resolution.Width' Game.Resolution.Height));                          PickingResult.Use(0);                          GL.ActiveTexture(TextureUnit.Texture29);                          GL.BindTexture(TextureTarget.Texture2D' Game.DisplayAdapter.MainRenderer.MRT.TexMeshIds);                          MousePicker.Dispatch(1' 1' 1);                          OpenTK.Graphics.OpenGL4.GL.MemoryBarrier(OpenTK.Graphics.OpenGL4.MemoryBarrierFlags.ShaderStorageBarrierBit);                          byte[] result = PickingResult.Read(0' 4);                          uint id = BitConverter.ToUInt32(result' 0);                          foreach(var m in Game.World.Scene.GetFlatRenderableList())                          {                              if(m is Mesh3d)                              {                                  foreach(var inst in (m as Mesh3d).GetInstances())                                  {                                      if(inst.Id == id)                                      {                                          Picked = inst;                                          PickedMesh = (m as Mesh3d);                                          //SettingsController.Instance.SetMesh(inst);                                      }                                  }                              }                          }                      }                  }                  /*                  if(kb.IsKeyDown(OpenTK.Input.Key.Plus))                  {                      var dir = Game.CascadeShadowMaps.GetDirection();                      dir = Quaternion.Multiply(Quaternion.FromAxisAngle(Vector3.UnitX' -0.01f)' dir);                      Game.CascadeShadowMaps.SetDirection(dir);                  }                    if(kb.IsKeyDown(OpenTK.Input.Key.Minus))                  {                      var dir = Game.CascadeShadowMaps.GetDirection();                      dir = Quaternion.Multiply(Quaternion.FromAxisAngle(Vector3.UnitX' 0.01f)' dir);                      Game.CascadeShadowMaps.SetDirection(dir);                  }*/                    if(kb.IsKeyDown(OpenTK.Input.Key.T) && Picked != null)                  {                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad4))                      {                          Picked.Translate(new Vector3(-0.01f' 0' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad6))                      {                          Picked.Translate(new Vector3(0.01f' 0' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad8))                      {                          Picked.Translate(new Vector3(0' 0' 0.01f));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad2))                      {                          Picked.Translate(new Vector3(0' 0' -0.01f));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad7))                      {                          Picked.Translate(new Vector3(0' 0.01f' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad1))                      {                          Picked.Translate(new Vector3(0' -0.01f' 0));                      }                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.C) && Picked != null)                  {                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad8))                      {                          Picked.Scale(1.01f);                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad1))                      {                          Picked.Scale(0.99f);                      }                  }                    var rd = new Random();/*                  if(kb.IsKeyDown(OpenTK.Input.Key.Left))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      RedLight.ForEach((ax) => ax.camera.Transformation.SetPosition(pos + Vector3.UnitX / 12.0f));                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Right))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitX / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Up))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos + Vector3.UnitZ / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Down))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitZ / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.PageUp))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos + Vector3.UnitY / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.PageDown))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitY / 12.0f);                  }*/                  /*if(kb.IsKeyDown(OpenTK.Input.Key.U))                  {                      var quat = Quaternion.FromAxisAngle(sun.Orientation.GetTangent(MathExtensions.TangentDirection.Left)' -0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.J))                  {                      var quat = Quaternion.FromAxisAngle(sun.Orientation.GetTangent(MathExtensions.TangentDirection.Left)' 0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.H))                  {                      var quat = Quaternion.FromAxisAngle(Vector3.UnitY' -0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.K))                  {                      var quat = Quaternion.FromAxisAngle(Vector3.UnitY' 0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }*/              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: Game.OnAfterDraw += (o' e) =>              {                  //.ToString(System.Globalization.CultureInfo.InvariantCulture)                    //SettingsController.Instance.UpdatePerformance();                  /*var jpad = OpenTK.Input.GamePad.GetState(0);                  float deadzone = 0.15f;                  if(Picked != null)                  {                      if(Math.Abs(jpad.ThumbSticks.Right.X) > deadzone)                      {                          var ang = Picked.GetOrientation().GetTangent(MathExtensions.TangentDirection.Up);                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.ThumbSticks.Right.X * 0.01f));                      }                      if(Math.Abs(jpad.ThumbSticks.Right.Y) > deadzone)                      {                          var ang = Picked.GetOrientation().GetTangent(MathExtensions.TangentDirection.Left);                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.ThumbSticks.Right.Y * 0.01f));                      }                      if(Math.Abs(jpad.Triggers.Left) > deadzone)                      {                          var ang = Picked.GetOrientation().ToDirection();                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.Triggers.Left * 0.01f));                      }                      if(Math.Abs(jpad.Triggers.Right) > deadzone)                      {                          var ang = Picked.GetOrientation().ToDirection();                          Picked.Rotate(Quaternion.FromAxisAngle(ang' -jpad.Triggers.Right*0.01f));                      }                  }*/                  var kb = OpenTK.Input.Keyboard.GetState();                  if(Game.DisplayAdapter.IsCursorVisible)                  {                      if(!kb.IsKeyDown(OpenTK.Input.Key.LControl))                      {                          //Game.DisplayAdapter.Pipeline.PostProcessor.ShowSelected = false;                      }                      else                      {                          //Game.DisplayAdapter.Pipeline.PostProcessor.ShowSelected = true;                          PickingResult.MapData(Vector4.One);                          MousePicker.Use();                          var state = OpenTK.Input.Mouse.GetState();                          MousePicker.SetUniform("Mouse"' new Vector2(MouseX' Game.Resolution.Height - MouseY));                          MousePicker.SetUniform("Resolution"' new Vector2(Game.Resolution.Width' Game.Resolution.Height));                          PickingResult.Use(0);                          GL.ActiveTexture(TextureUnit.Texture29);                          GL.BindTexture(TextureTarget.Texture2D' Game.DisplayAdapter.MainRenderer.MRT.TexMeshIds);                          MousePicker.Dispatch(1' 1' 1);                          OpenTK.Graphics.OpenGL4.GL.MemoryBarrier(OpenTK.Graphics.OpenGL4.MemoryBarrierFlags.ShaderStorageBarrierBit);                          byte[] result = PickingResult.Read(0' 4);                          uint id = BitConverter.ToUInt32(result' 0);                          foreach(var m in Game.World.Scene.GetFlatRenderableList())                          {                              if(m is Mesh3d)                              {                                  foreach(var inst in (m as Mesh3d).GetInstances())                                  {                                      if(inst.Id == id)                                      {                                          Picked = inst;                                          PickedMesh = (m as Mesh3d);                                          //SettingsController.Instance.SetMesh(inst);                                      }                                  }                              }                          }                      }                  }                  /*                  if(kb.IsKeyDown(OpenTK.Input.Key.Plus))                  {                      var dir = Game.CascadeShadowMaps.GetDirection();                      dir = Quaternion.Multiply(Quaternion.FromAxisAngle(Vector3.UnitX' -0.01f)' dir);                      Game.CascadeShadowMaps.SetDirection(dir);                  }                    if(kb.IsKeyDown(OpenTK.Input.Key.Minus))                  {                      var dir = Game.CascadeShadowMaps.GetDirection();                      dir = Quaternion.Multiply(Quaternion.FromAxisAngle(Vector3.UnitX' 0.01f)' dir);                      Game.CascadeShadowMaps.SetDirection(dir);                  }*/                    if(kb.IsKeyDown(OpenTK.Input.Key.T) && Picked != null)                  {                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad4))                      {                          Picked.Translate(new Vector3(-0.01f' 0' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad6))                      {                          Picked.Translate(new Vector3(0.01f' 0' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad8))                      {                          Picked.Translate(new Vector3(0' 0' 0.01f));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad2))                      {                          Picked.Translate(new Vector3(0' 0' -0.01f));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad7))                      {                          Picked.Translate(new Vector3(0' 0.01f' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad1))                      {                          Picked.Translate(new Vector3(0' -0.01f' 0));                      }                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.C) && Picked != null)                  {                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad8))                      {                          Picked.Scale(1.01f);                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad1))                      {                          Picked.Scale(0.99f);                      }                  }                    var rd = new Random();/*                  if(kb.IsKeyDown(OpenTK.Input.Key.Left))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      RedLight.ForEach((ax) => ax.camera.Transformation.SetPosition(pos + Vector3.UnitX / 12.0f));                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Right))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitX / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Up))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos + Vector3.UnitZ / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Down))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitZ / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.PageUp))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos + Vector3.UnitY / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.PageDown))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitY / 12.0f);                  }*/                  /*if(kb.IsKeyDown(OpenTK.Input.Key.U))                  {                      var quat = Quaternion.FromAxisAngle(sun.Orientation.GetTangent(MathExtensions.TangentDirection.Left)' -0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.J))                  {                      var quat = Quaternion.FromAxisAngle(sun.Orientation.GetTangent(MathExtensions.TangentDirection.Left)' 0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.H))                  {                      var quat = Quaternion.FromAxisAngle(Vector3.UnitY' -0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.K))                  {                      var quat = Quaternion.FromAxisAngle(Vector3.UnitY' 0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }*/              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,AddControllableLight,The following statement contains a magic number: Game.OnAfterDraw += (o' e) =>              {                  //.ToString(System.Globalization.CultureInfo.InvariantCulture)                    //SettingsController.Instance.UpdatePerformance();                  /*var jpad = OpenTK.Input.GamePad.GetState(0);                  float deadzone = 0.15f;                  if(Picked != null)                  {                      if(Math.Abs(jpad.ThumbSticks.Right.X) > deadzone)                      {                          var ang = Picked.GetOrientation().GetTangent(MathExtensions.TangentDirection.Up);                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.ThumbSticks.Right.X * 0.01f));                      }                      if(Math.Abs(jpad.ThumbSticks.Right.Y) > deadzone)                      {                          var ang = Picked.GetOrientation().GetTangent(MathExtensions.TangentDirection.Left);                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.ThumbSticks.Right.Y * 0.01f));                      }                      if(Math.Abs(jpad.Triggers.Left) > deadzone)                      {                          var ang = Picked.GetOrientation().ToDirection();                          Picked.Rotate(Quaternion.FromAxisAngle(ang' jpad.Triggers.Left * 0.01f));                      }                      if(Math.Abs(jpad.Triggers.Right) > deadzone)                      {                          var ang = Picked.GetOrientation().ToDirection();                          Picked.Rotate(Quaternion.FromAxisAngle(ang' -jpad.Triggers.Right*0.01f));                      }                  }*/                  var kb = OpenTK.Input.Keyboard.GetState();                  if(Game.DisplayAdapter.IsCursorVisible)                  {                      if(!kb.IsKeyDown(OpenTK.Input.Key.LControl))                      {                          //Game.DisplayAdapter.Pipeline.PostProcessor.ShowSelected = false;                      }                      else                      {                          //Game.DisplayAdapter.Pipeline.PostProcessor.ShowSelected = true;                          PickingResult.MapData(Vector4.One);                          MousePicker.Use();                          var state = OpenTK.Input.Mouse.GetState();                          MousePicker.SetUniform("Mouse"' new Vector2(MouseX' Game.Resolution.Height - MouseY));                          MousePicker.SetUniform("Resolution"' new Vector2(Game.Resolution.Width' Game.Resolution.Height));                          PickingResult.Use(0);                          GL.ActiveTexture(TextureUnit.Texture29);                          GL.BindTexture(TextureTarget.Texture2D' Game.DisplayAdapter.MainRenderer.MRT.TexMeshIds);                          MousePicker.Dispatch(1' 1' 1);                          OpenTK.Graphics.OpenGL4.GL.MemoryBarrier(OpenTK.Graphics.OpenGL4.MemoryBarrierFlags.ShaderStorageBarrierBit);                          byte[] result = PickingResult.Read(0' 4);                          uint id = BitConverter.ToUInt32(result' 0);                          foreach(var m in Game.World.Scene.GetFlatRenderableList())                          {                              if(m is Mesh3d)                              {                                  foreach(var inst in (m as Mesh3d).GetInstances())                                  {                                      if(inst.Id == id)                                      {                                          Picked = inst;                                          PickedMesh = (m as Mesh3d);                                          //SettingsController.Instance.SetMesh(inst);                                      }                                  }                              }                          }                      }                  }                  /*                  if(kb.IsKeyDown(OpenTK.Input.Key.Plus))                  {                      var dir = Game.CascadeShadowMaps.GetDirection();                      dir = Quaternion.Multiply(Quaternion.FromAxisAngle(Vector3.UnitX' -0.01f)' dir);                      Game.CascadeShadowMaps.SetDirection(dir);                  }                    if(kb.IsKeyDown(OpenTK.Input.Key.Minus))                  {                      var dir = Game.CascadeShadowMaps.GetDirection();                      dir = Quaternion.Multiply(Quaternion.FromAxisAngle(Vector3.UnitX' 0.01f)' dir);                      Game.CascadeShadowMaps.SetDirection(dir);                  }*/                    if(kb.IsKeyDown(OpenTK.Input.Key.T) && Picked != null)                  {                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad4))                      {                          Picked.Translate(new Vector3(-0.01f' 0' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad6))                      {                          Picked.Translate(new Vector3(0.01f' 0' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad8))                      {                          Picked.Translate(new Vector3(0' 0' 0.01f));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad2))                      {                          Picked.Translate(new Vector3(0' 0' -0.01f));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad7))                      {                          Picked.Translate(new Vector3(0' 0.01f' 0));                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad1))                      {                          Picked.Translate(new Vector3(0' -0.01f' 0));                      }                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.C) && Picked != null)                  {                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad8))                      {                          Picked.Scale(1.01f);                      }                      if(kb.IsKeyDown(OpenTK.Input.Key.Keypad1))                      {                          Picked.Scale(0.99f);                      }                  }                    var rd = new Random();/*                  if(kb.IsKeyDown(OpenTK.Input.Key.Left))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      RedLight.ForEach((ax) => ax.camera.Transformation.SetPosition(pos + Vector3.UnitX / 12.0f));                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Right))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitX / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Up))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos + Vector3.UnitZ / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.Down))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitZ / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.PageUp))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos + Vector3.UnitY / 12.0f);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.PageDown))                  {                      var pos = RedLight[0].camera.Transformation.GetPosition();                      redConeLight.camera.Transformation.SetPosition(pos - Vector3.UnitY / 12.0f);                  }*/                  /*if(kb.IsKeyDown(OpenTK.Input.Key.U))                  {                      var quat = Quaternion.FromAxisAngle(sun.Orientation.GetTangent(MathExtensions.TangentDirection.Left)' -0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.J))                  {                      var quat = Quaternion.FromAxisAngle(sun.Orientation.GetTangent(MathExtensions.TangentDirection.Left)' 0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.H))                  {                      var quat = Quaternion.FromAxisAngle(Vector3.UnitY' -0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }                  if(kb.IsKeyDown(OpenTK.Input.Key.K))                  {                      var quat = Quaternion.FromAxisAngle(Vector3.UnitY' 0.01f);                      sun.Orientation = Quaternion.Multiply(sun.Orientation' quat);                  }*/              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.F1 && !e.Shift)                      InterpolateCameraFromSaved(0);                  if(e.Key == OpenTK.Input.Key.F2 && !e.Shift)                      InterpolateCameraFromSaved(1);                  if(e.Key == OpenTK.Input.Key.F3 && !e.Shift)                      InterpolateCameraFromSaved(2);                  if(e.Key == OpenTK.Input.Key.F4 && !e.Shift)                      InterpolateCameraFromSaved(3);                  if(e.Key == OpenTK.Input.Key.F5 && !e.Shift)                      InterpolateCameraFromSaved(4);                  if(e.Key == OpenTK.Input.Key.F6 && !e.Shift)                      InterpolateCameraFromSaved(5);                  if(e.Key == OpenTK.Input.Key.F7 && !e.Shift)                      InterpolateCameraFromSaved(6);                    if(e.Key == OpenTK.Input.Key.F1 && e.Shift)                      SaveCamera(0);                  if(e.Key == OpenTK.Input.Key.F2 && e.Shift)                      SaveCamera(1);                  if(e.Key == OpenTK.Input.Key.F3 && e.Shift)                      SaveCamera(2);                  if(e.Key == OpenTK.Input.Key.F4 && e.Shift)                      SaveCamera(3);                  if(e.Key == OpenTK.Input.Key.F5 && e.Shift)                      SaveCamera(4);                  if(e.Key == OpenTK.Input.Key.F6 && e.Shift)                      SaveCamera(5);                  if(e.Key == OpenTK.Input.Key.F7 && e.Shift)                      SaveCamera(6);                    if(e.Key == OpenTK.Input.Key.Tab)                  {                      Game.DisplayAdapter.IsCursorVisible = !Game.DisplayAdapter.IsCursorVisible;                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;                  }                  if(e.Key == OpenTK.Input.Key.Comma)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness -= 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness < 0)                              PickedMesh.GetLodLevel(0).Material.Roughness = 0;                      }                  }                  if(e.Key == OpenTK.Input.Key.Period)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness += 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness > 1)                              PickedMesh.GetLodLevel(0).Material.Roughness = 1;                      }                  }                    if(e.Key == OpenTK.Input.Key.T)                  {                      /*if(PickedMesh != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier -= 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier <= 0.01f)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 0.01f;                      }*/                  }                  if(e.Key == OpenTK.Input.Key.Y)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier += 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier >= 24)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 24;                      }                  }                    if(e.Key == OpenTK.Input.Key.Pause)                  {                      ShaderProgram.RecompileAll();                      ComputeShader.RecompileAll();                  }                  if(e.Key == OpenTK.Input.Key.R)                  {                      // Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode = !Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode;                  }                  if(e.Key == OpenTK.Input.Key.LBracket)                  {                      FreeCam.Cam.Brightness -= 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.RBracket)                  {                      FreeCam.Cam.Brightness += 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.Number1)                  {                      RedLight[0].GetTransformationManager().SetPosition(FreeCam.Cam.Transformation.GetPosition() + new Vector3((float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1) * 0.1f);                      RedLight[0].GetTransformationManager().SetOrientation(FreeCam.Cam.Transformation.GetOrientation());                      Picked = RedLight[0];                  }                  if(e.Key == OpenTK.Input.Key.Tilde)                  {                      // Interpolator.Interpolate<Vector3>(RedLight.GetTransformationManager().Position' RedLight.GetTransformationManager().Position.R' FreeCam.Cam.GetPosition()' 8.0f' Interpolator.Easing.EaseInOut);                  }                  var settings = Game.DisplayAdapter.MainRenderer.GraphicsSettings;                  if(e.Key == OpenTK.Input.Key.Number0)                      settings.UseVDAO = !settings.UseVDAO;                  if(e.Key == OpenTK.Input.Key.Number9)                      settings.UseBloom = !settings.UseBloom;                  if(e.Key == OpenTK.Input.Key.Number8)                      settings.UseDeferred = !settings.UseDeferred;                  if(e.Key == OpenTK.Input.Key.Number7)                      settings.UseDepth = !settings.UseDepth;                  if(e.Key == OpenTK.Input.Key.Number6)                      settings.UseFog = !settings.UseFog;                  if(e.Key == OpenTK.Input.Key.Number5)                      settings.UseCubeMapGI = !settings.UseCubeMapGI;                  if(e.Key == OpenTK.Input.Key.Number4)                      settings.UseRSM = !settings.UseRSM;                  if(e.Key == OpenTK.Input.Key.Number3)                      settings.UseVXGI = !settings.UseVXGI;                  if(e.Key == OpenTK.Input.Key.Number2)                      settings.UseHBAO = !settings.UseHBAO;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.F1 && !e.Shift)                      InterpolateCameraFromSaved(0);                  if(e.Key == OpenTK.Input.Key.F2 && !e.Shift)                      InterpolateCameraFromSaved(1);                  if(e.Key == OpenTK.Input.Key.F3 && !e.Shift)                      InterpolateCameraFromSaved(2);                  if(e.Key == OpenTK.Input.Key.F4 && !e.Shift)                      InterpolateCameraFromSaved(3);                  if(e.Key == OpenTK.Input.Key.F5 && !e.Shift)                      InterpolateCameraFromSaved(4);                  if(e.Key == OpenTK.Input.Key.F6 && !e.Shift)                      InterpolateCameraFromSaved(5);                  if(e.Key == OpenTK.Input.Key.F7 && !e.Shift)                      InterpolateCameraFromSaved(6);                    if(e.Key == OpenTK.Input.Key.F1 && e.Shift)                      SaveCamera(0);                  if(e.Key == OpenTK.Input.Key.F2 && e.Shift)                      SaveCamera(1);                  if(e.Key == OpenTK.Input.Key.F3 && e.Shift)                      SaveCamera(2);                  if(e.Key == OpenTK.Input.Key.F4 && e.Shift)                      SaveCamera(3);                  if(e.Key == OpenTK.Input.Key.F5 && e.Shift)                      SaveCamera(4);                  if(e.Key == OpenTK.Input.Key.F6 && e.Shift)                      SaveCamera(5);                  if(e.Key == OpenTK.Input.Key.F7 && e.Shift)                      SaveCamera(6);                    if(e.Key == OpenTK.Input.Key.Tab)                  {                      Game.DisplayAdapter.IsCursorVisible = !Game.DisplayAdapter.IsCursorVisible;                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;                  }                  if(e.Key == OpenTK.Input.Key.Comma)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness -= 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness < 0)                              PickedMesh.GetLodLevel(0).Material.Roughness = 0;                      }                  }                  if(e.Key == OpenTK.Input.Key.Period)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness += 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness > 1)                              PickedMesh.GetLodLevel(0).Material.Roughness = 1;                      }                  }                    if(e.Key == OpenTK.Input.Key.T)                  {                      /*if(PickedMesh != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier -= 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier <= 0.01f)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 0.01f;                      }*/                  }                  if(e.Key == OpenTK.Input.Key.Y)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier += 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier >= 24)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 24;                      }                  }                    if(e.Key == OpenTK.Input.Key.Pause)                  {                      ShaderProgram.RecompileAll();                      ComputeShader.RecompileAll();                  }                  if(e.Key == OpenTK.Input.Key.R)                  {                      // Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode = !Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode;                  }                  if(e.Key == OpenTK.Input.Key.LBracket)                  {                      FreeCam.Cam.Brightness -= 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.RBracket)                  {                      FreeCam.Cam.Brightness += 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.Number1)                  {                      RedLight[0].GetTransformationManager().SetPosition(FreeCam.Cam.Transformation.GetPosition() + new Vector3((float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1) * 0.1f);                      RedLight[0].GetTransformationManager().SetOrientation(FreeCam.Cam.Transformation.GetOrientation());                      Picked = RedLight[0];                  }                  if(e.Key == OpenTK.Input.Key.Tilde)                  {                      // Interpolator.Interpolate<Vector3>(RedLight.GetTransformationManager().Position' RedLight.GetTransformationManager().Position.R' FreeCam.Cam.GetPosition()' 8.0f' Interpolator.Easing.EaseInOut);                  }                  var settings = Game.DisplayAdapter.MainRenderer.GraphicsSettings;                  if(e.Key == OpenTK.Input.Key.Number0)                      settings.UseVDAO = !settings.UseVDAO;                  if(e.Key == OpenTK.Input.Key.Number9)                      settings.UseBloom = !settings.UseBloom;                  if(e.Key == OpenTK.Input.Key.Number8)                      settings.UseDeferred = !settings.UseDeferred;                  if(e.Key == OpenTK.Input.Key.Number7)                      settings.UseDepth = !settings.UseDepth;                  if(e.Key == OpenTK.Input.Key.Number6)                      settings.UseFog = !settings.UseFog;                  if(e.Key == OpenTK.Input.Key.Number5)                      settings.UseCubeMapGI = !settings.UseCubeMapGI;                  if(e.Key == OpenTK.Input.Key.Number4)                      settings.UseRSM = !settings.UseRSM;                  if(e.Key == OpenTK.Input.Key.Number3)                      settings.UseVXGI = !settings.UseVXGI;                  if(e.Key == OpenTK.Input.Key.Number2)                      settings.UseHBAO = !settings.UseHBAO;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.F1 && !e.Shift)                      InterpolateCameraFromSaved(0);                  if(e.Key == OpenTK.Input.Key.F2 && !e.Shift)                      InterpolateCameraFromSaved(1);                  if(e.Key == OpenTK.Input.Key.F3 && !e.Shift)                      InterpolateCameraFromSaved(2);                  if(e.Key == OpenTK.Input.Key.F4 && !e.Shift)                      InterpolateCameraFromSaved(3);                  if(e.Key == OpenTK.Input.Key.F5 && !e.Shift)                      InterpolateCameraFromSaved(4);                  if(e.Key == OpenTK.Input.Key.F6 && !e.Shift)                      InterpolateCameraFromSaved(5);                  if(e.Key == OpenTK.Input.Key.F7 && !e.Shift)                      InterpolateCameraFromSaved(6);                    if(e.Key == OpenTK.Input.Key.F1 && e.Shift)                      SaveCamera(0);                  if(e.Key == OpenTK.Input.Key.F2 && e.Shift)                      SaveCamera(1);                  if(e.Key == OpenTK.Input.Key.F3 && e.Shift)                      SaveCamera(2);                  if(e.Key == OpenTK.Input.Key.F4 && e.Shift)                      SaveCamera(3);                  if(e.Key == OpenTK.Input.Key.F5 && e.Shift)                      SaveCamera(4);                  if(e.Key == OpenTK.Input.Key.F6 && e.Shift)                      SaveCamera(5);                  if(e.Key == OpenTK.Input.Key.F7 && e.Shift)                      SaveCamera(6);                    if(e.Key == OpenTK.Input.Key.Tab)                  {                      Game.DisplayAdapter.IsCursorVisible = !Game.DisplayAdapter.IsCursorVisible;                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;                  }                  if(e.Key == OpenTK.Input.Key.Comma)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness -= 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness < 0)                              PickedMesh.GetLodLevel(0).Material.Roughness = 0;                      }                  }                  if(e.Key == OpenTK.Input.Key.Period)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness += 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness > 1)                              PickedMesh.GetLodLevel(0).Material.Roughness = 1;                      }                  }                    if(e.Key == OpenTK.Input.Key.T)                  {                      /*if(PickedMesh != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier -= 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier <= 0.01f)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 0.01f;                      }*/                  }                  if(e.Key == OpenTK.Input.Key.Y)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier += 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier >= 24)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 24;                      }                  }                    if(e.Key == OpenTK.Input.Key.Pause)                  {                      ShaderProgram.RecompileAll();                      ComputeShader.RecompileAll();                  }                  if(e.Key == OpenTK.Input.Key.R)                  {                      // Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode = !Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode;                  }                  if(e.Key == OpenTK.Input.Key.LBracket)                  {                      FreeCam.Cam.Brightness -= 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.RBracket)                  {                      FreeCam.Cam.Brightness += 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.Number1)                  {                      RedLight[0].GetTransformationManager().SetPosition(FreeCam.Cam.Transformation.GetPosition() + new Vector3((float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1) * 0.1f);                      RedLight[0].GetTransformationManager().SetOrientation(FreeCam.Cam.Transformation.GetOrientation());                      Picked = RedLight[0];                  }                  if(e.Key == OpenTK.Input.Key.Tilde)                  {                      // Interpolator.Interpolate<Vector3>(RedLight.GetTransformationManager().Position' RedLight.GetTransformationManager().Position.R' FreeCam.Cam.GetPosition()' 8.0f' Interpolator.Easing.EaseInOut);                  }                  var settings = Game.DisplayAdapter.MainRenderer.GraphicsSettings;                  if(e.Key == OpenTK.Input.Key.Number0)                      settings.UseVDAO = !settings.UseVDAO;                  if(e.Key == OpenTK.Input.Key.Number9)                      settings.UseBloom = !settings.UseBloom;                  if(e.Key == OpenTK.Input.Key.Number8)                      settings.UseDeferred = !settings.UseDeferred;                  if(e.Key == OpenTK.Input.Key.Number7)                      settings.UseDepth = !settings.UseDepth;                  if(e.Key == OpenTK.Input.Key.Number6)                      settings.UseFog = !settings.UseFog;                  if(e.Key == OpenTK.Input.Key.Number5)                      settings.UseCubeMapGI = !settings.UseCubeMapGI;                  if(e.Key == OpenTK.Input.Key.Number4)                      settings.UseRSM = !settings.UseRSM;                  if(e.Key == OpenTK.Input.Key.Number3)                      settings.UseVXGI = !settings.UseVXGI;                  if(e.Key == OpenTK.Input.Key.Number2)                      settings.UseHBAO = !settings.UseHBAO;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.F1 && !e.Shift)                      InterpolateCameraFromSaved(0);                  if(e.Key == OpenTK.Input.Key.F2 && !e.Shift)                      InterpolateCameraFromSaved(1);                  if(e.Key == OpenTK.Input.Key.F3 && !e.Shift)                      InterpolateCameraFromSaved(2);                  if(e.Key == OpenTK.Input.Key.F4 && !e.Shift)                      InterpolateCameraFromSaved(3);                  if(e.Key == OpenTK.Input.Key.F5 && !e.Shift)                      InterpolateCameraFromSaved(4);                  if(e.Key == OpenTK.Input.Key.F6 && !e.Shift)                      InterpolateCameraFromSaved(5);                  if(e.Key == OpenTK.Input.Key.F7 && !e.Shift)                      InterpolateCameraFromSaved(6);                    if(e.Key == OpenTK.Input.Key.F1 && e.Shift)                      SaveCamera(0);                  if(e.Key == OpenTK.Input.Key.F2 && e.Shift)                      SaveCamera(1);                  if(e.Key == OpenTK.Input.Key.F3 && e.Shift)                      SaveCamera(2);                  if(e.Key == OpenTK.Input.Key.F4 && e.Shift)                      SaveCamera(3);                  if(e.Key == OpenTK.Input.Key.F5 && e.Shift)                      SaveCamera(4);                  if(e.Key == OpenTK.Input.Key.F6 && e.Shift)                      SaveCamera(5);                  if(e.Key == OpenTK.Input.Key.F7 && e.Shift)                      SaveCamera(6);                    if(e.Key == OpenTK.Input.Key.Tab)                  {                      Game.DisplayAdapter.IsCursorVisible = !Game.DisplayAdapter.IsCursorVisible;                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;                  }                  if(e.Key == OpenTK.Input.Key.Comma)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness -= 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness < 0)                              PickedMesh.GetLodLevel(0).Material.Roughness = 0;                      }                  }                  if(e.Key == OpenTK.Input.Key.Period)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness += 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness > 1)                              PickedMesh.GetLodLevel(0).Material.Roughness = 1;                      }                  }                    if(e.Key == OpenTK.Input.Key.T)                  {                      /*if(PickedMesh != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier -= 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier <= 0.01f)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 0.01f;                      }*/                  }                  if(e.Key == OpenTK.Input.Key.Y)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier += 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier >= 24)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 24;                      }                  }                    if(e.Key == OpenTK.Input.Key.Pause)                  {                      ShaderProgram.RecompileAll();                      ComputeShader.RecompileAll();                  }                  if(e.Key == OpenTK.Input.Key.R)                  {                      // Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode = !Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode;                  }                  if(e.Key == OpenTK.Input.Key.LBracket)                  {                      FreeCam.Cam.Brightness -= 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.RBracket)                  {                      FreeCam.Cam.Brightness += 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.Number1)                  {                      RedLight[0].GetTransformationManager().SetPosition(FreeCam.Cam.Transformation.GetPosition() + new Vector3((float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1) * 0.1f);                      RedLight[0].GetTransformationManager().SetOrientation(FreeCam.Cam.Transformation.GetOrientation());                      Picked = RedLight[0];                  }                  if(e.Key == OpenTK.Input.Key.Tilde)                  {                      // Interpolator.Interpolate<Vector3>(RedLight.GetTransformationManager().Position' RedLight.GetTransformationManager().Position.R' FreeCam.Cam.GetPosition()' 8.0f' Interpolator.Easing.EaseInOut);                  }                  var settings = Game.DisplayAdapter.MainRenderer.GraphicsSettings;                  if(e.Key == OpenTK.Input.Key.Number0)                      settings.UseVDAO = !settings.UseVDAO;                  if(e.Key == OpenTK.Input.Key.Number9)                      settings.UseBloom = !settings.UseBloom;                  if(e.Key == OpenTK.Input.Key.Number8)                      settings.UseDeferred = !settings.UseDeferred;                  if(e.Key == OpenTK.Input.Key.Number7)                      settings.UseDepth = !settings.UseDepth;                  if(e.Key == OpenTK.Input.Key.Number6)                      settings.UseFog = !settings.UseFog;                  if(e.Key == OpenTK.Input.Key.Number5)                      settings.UseCubeMapGI = !settings.UseCubeMapGI;                  if(e.Key == OpenTK.Input.Key.Number4)                      settings.UseRSM = !settings.UseRSM;                  if(e.Key == OpenTK.Input.Key.Number3)                      settings.UseVXGI = !settings.UseVXGI;                  if(e.Key == OpenTK.Input.Key.Number2)                      settings.UseHBAO = !settings.UseHBAO;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.F1 && !e.Shift)                      InterpolateCameraFromSaved(0);                  if(e.Key == OpenTK.Input.Key.F2 && !e.Shift)                      InterpolateCameraFromSaved(1);                  if(e.Key == OpenTK.Input.Key.F3 && !e.Shift)                      InterpolateCameraFromSaved(2);                  if(e.Key == OpenTK.Input.Key.F4 && !e.Shift)                      InterpolateCameraFromSaved(3);                  if(e.Key == OpenTK.Input.Key.F5 && !e.Shift)                      InterpolateCameraFromSaved(4);                  if(e.Key == OpenTK.Input.Key.F6 && !e.Shift)                      InterpolateCameraFromSaved(5);                  if(e.Key == OpenTK.Input.Key.F7 && !e.Shift)                      InterpolateCameraFromSaved(6);                    if(e.Key == OpenTK.Input.Key.F1 && e.Shift)                      SaveCamera(0);                  if(e.Key == OpenTK.Input.Key.F2 && e.Shift)                      SaveCamera(1);                  if(e.Key == OpenTK.Input.Key.F3 && e.Shift)                      SaveCamera(2);                  if(e.Key == OpenTK.Input.Key.F4 && e.Shift)                      SaveCamera(3);                  if(e.Key == OpenTK.Input.Key.F5 && e.Shift)                      SaveCamera(4);                  if(e.Key == OpenTK.Input.Key.F6 && e.Shift)                      SaveCamera(5);                  if(e.Key == OpenTK.Input.Key.F7 && e.Shift)                      SaveCamera(6);                    if(e.Key == OpenTK.Input.Key.Tab)                  {                      Game.DisplayAdapter.IsCursorVisible = !Game.DisplayAdapter.IsCursorVisible;                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;                  }                  if(e.Key == OpenTK.Input.Key.Comma)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness -= 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness < 0)                              PickedMesh.GetLodLevel(0).Material.Roughness = 0;                      }                  }                  if(e.Key == OpenTK.Input.Key.Period)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness += 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness > 1)                              PickedMesh.GetLodLevel(0).Material.Roughness = 1;                      }                  }                    if(e.Key == OpenTK.Input.Key.T)                  {                      /*if(PickedMesh != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier -= 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier <= 0.01f)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 0.01f;                      }*/                  }                  if(e.Key == OpenTK.Input.Key.Y)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier += 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier >= 24)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 24;                      }                  }                    if(e.Key == OpenTK.Input.Key.Pause)                  {                      ShaderProgram.RecompileAll();                      ComputeShader.RecompileAll();                  }                  if(e.Key == OpenTK.Input.Key.R)                  {                      // Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode = !Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode;                  }                  if(e.Key == OpenTK.Input.Key.LBracket)                  {                      FreeCam.Cam.Brightness -= 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.RBracket)                  {                      FreeCam.Cam.Brightness += 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.Number1)                  {                      RedLight[0].GetTransformationManager().SetPosition(FreeCam.Cam.Transformation.GetPosition() + new Vector3((float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1) * 0.1f);                      RedLight[0].GetTransformationManager().SetOrientation(FreeCam.Cam.Transformation.GetOrientation());                      Picked = RedLight[0];                  }                  if(e.Key == OpenTK.Input.Key.Tilde)                  {                      // Interpolator.Interpolate<Vector3>(RedLight.GetTransformationManager().Position' RedLight.GetTransformationManager().Position.R' FreeCam.Cam.GetPosition()' 8.0f' Interpolator.Easing.EaseInOut);                  }                  var settings = Game.DisplayAdapter.MainRenderer.GraphicsSettings;                  if(e.Key == OpenTK.Input.Key.Number0)                      settings.UseVDAO = !settings.UseVDAO;                  if(e.Key == OpenTK.Input.Key.Number9)                      settings.UseBloom = !settings.UseBloom;                  if(e.Key == OpenTK.Input.Key.Number8)                      settings.UseDeferred = !settings.UseDeferred;                  if(e.Key == OpenTK.Input.Key.Number7)                      settings.UseDepth = !settings.UseDepth;                  if(e.Key == OpenTK.Input.Key.Number6)                      settings.UseFog = !settings.UseFog;                  if(e.Key == OpenTK.Input.Key.Number5)                      settings.UseCubeMapGI = !settings.UseCubeMapGI;                  if(e.Key == OpenTK.Input.Key.Number4)                      settings.UseRSM = !settings.UseRSM;                  if(e.Key == OpenTK.Input.Key.Number3)                      settings.UseVXGI = !settings.UseVXGI;                  if(e.Key == OpenTK.Input.Key.Number2)                      settings.UseHBAO = !settings.UseHBAO;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.F1 && !e.Shift)                      InterpolateCameraFromSaved(0);                  if(e.Key == OpenTK.Input.Key.F2 && !e.Shift)                      InterpolateCameraFromSaved(1);                  if(e.Key == OpenTK.Input.Key.F3 && !e.Shift)                      InterpolateCameraFromSaved(2);                  if(e.Key == OpenTK.Input.Key.F4 && !e.Shift)                      InterpolateCameraFromSaved(3);                  if(e.Key == OpenTK.Input.Key.F5 && !e.Shift)                      InterpolateCameraFromSaved(4);                  if(e.Key == OpenTK.Input.Key.F6 && !e.Shift)                      InterpolateCameraFromSaved(5);                  if(e.Key == OpenTK.Input.Key.F7 && !e.Shift)                      InterpolateCameraFromSaved(6);                    if(e.Key == OpenTK.Input.Key.F1 && e.Shift)                      SaveCamera(0);                  if(e.Key == OpenTK.Input.Key.F2 && e.Shift)                      SaveCamera(1);                  if(e.Key == OpenTK.Input.Key.F3 && e.Shift)                      SaveCamera(2);                  if(e.Key == OpenTK.Input.Key.F4 && e.Shift)                      SaveCamera(3);                  if(e.Key == OpenTK.Input.Key.F5 && e.Shift)                      SaveCamera(4);                  if(e.Key == OpenTK.Input.Key.F6 && e.Shift)                      SaveCamera(5);                  if(e.Key == OpenTK.Input.Key.F7 && e.Shift)                      SaveCamera(6);                    if(e.Key == OpenTK.Input.Key.Tab)                  {                      Game.DisplayAdapter.IsCursorVisible = !Game.DisplayAdapter.IsCursorVisible;                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;                  }                  if(e.Key == OpenTK.Input.Key.Comma)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness -= 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness < 0)                              PickedMesh.GetLodLevel(0).Material.Roughness = 0;                      }                  }                  if(e.Key == OpenTK.Input.Key.Period)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness += 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness > 1)                              PickedMesh.GetLodLevel(0).Material.Roughness = 1;                      }                  }                    if(e.Key == OpenTK.Input.Key.T)                  {                      /*if(PickedMesh != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier -= 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier <= 0.01f)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 0.01f;                      }*/                  }                  if(e.Key == OpenTK.Input.Key.Y)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier += 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier >= 24)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 24;                      }                  }                    if(e.Key == OpenTK.Input.Key.Pause)                  {                      ShaderProgram.RecompileAll();                      ComputeShader.RecompileAll();                  }                  if(e.Key == OpenTK.Input.Key.R)                  {                      // Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode = !Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode;                  }                  if(e.Key == OpenTK.Input.Key.LBracket)                  {                      FreeCam.Cam.Brightness -= 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.RBracket)                  {                      FreeCam.Cam.Brightness += 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.Number1)                  {                      RedLight[0].GetTransformationManager().SetPosition(FreeCam.Cam.Transformation.GetPosition() + new Vector3((float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1) * 0.1f);                      RedLight[0].GetTransformationManager().SetOrientation(FreeCam.Cam.Transformation.GetOrientation());                      Picked = RedLight[0];                  }                  if(e.Key == OpenTK.Input.Key.Tilde)                  {                      // Interpolator.Interpolate<Vector3>(RedLight.GetTransformationManager().Position' RedLight.GetTransformationManager().Position.R' FreeCam.Cam.GetPosition()' 8.0f' Interpolator.Easing.EaseInOut);                  }                  var settings = Game.DisplayAdapter.MainRenderer.GraphicsSettings;                  if(e.Key == OpenTK.Input.Key.Number0)                      settings.UseVDAO = !settings.UseVDAO;                  if(e.Key == OpenTK.Input.Key.Number9)                      settings.UseBloom = !settings.UseBloom;                  if(e.Key == OpenTK.Input.Key.Number8)                      settings.UseDeferred = !settings.UseDeferred;                  if(e.Key == OpenTK.Input.Key.Number7)                      settings.UseDepth = !settings.UseDepth;                  if(e.Key == OpenTK.Input.Key.Number6)                      settings.UseFog = !settings.UseFog;                  if(e.Key == OpenTK.Input.Key.Number5)                      settings.UseCubeMapGI = !settings.UseCubeMapGI;                  if(e.Key == OpenTK.Input.Key.Number4)                      settings.UseRSM = !settings.UseRSM;                  if(e.Key == OpenTK.Input.Key.Number3)                      settings.UseVXGI = !settings.UseVXGI;                  if(e.Key == OpenTK.Input.Key.Number2)                      settings.UseHBAO = !settings.UseHBAO;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.F1 && !e.Shift)                      InterpolateCameraFromSaved(0);                  if(e.Key == OpenTK.Input.Key.F2 && !e.Shift)                      InterpolateCameraFromSaved(1);                  if(e.Key == OpenTK.Input.Key.F3 && !e.Shift)                      InterpolateCameraFromSaved(2);                  if(e.Key == OpenTK.Input.Key.F4 && !e.Shift)                      InterpolateCameraFromSaved(3);                  if(e.Key == OpenTK.Input.Key.F5 && !e.Shift)                      InterpolateCameraFromSaved(4);                  if(e.Key == OpenTK.Input.Key.F6 && !e.Shift)                      InterpolateCameraFromSaved(5);                  if(e.Key == OpenTK.Input.Key.F7 && !e.Shift)                      InterpolateCameraFromSaved(6);                    if(e.Key == OpenTK.Input.Key.F1 && e.Shift)                      SaveCamera(0);                  if(e.Key == OpenTK.Input.Key.F2 && e.Shift)                      SaveCamera(1);                  if(e.Key == OpenTK.Input.Key.F3 && e.Shift)                      SaveCamera(2);                  if(e.Key == OpenTK.Input.Key.F4 && e.Shift)                      SaveCamera(3);                  if(e.Key == OpenTK.Input.Key.F5 && e.Shift)                      SaveCamera(4);                  if(e.Key == OpenTK.Input.Key.F6 && e.Shift)                      SaveCamera(5);                  if(e.Key == OpenTK.Input.Key.F7 && e.Shift)                      SaveCamera(6);                    if(e.Key == OpenTK.Input.Key.Tab)                  {                      Game.DisplayAdapter.IsCursorVisible = !Game.DisplayAdapter.IsCursorVisible;                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;                  }                  if(e.Key == OpenTK.Input.Key.Comma)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness -= 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness < 0)                              PickedMesh.GetLodLevel(0).Material.Roughness = 0;                      }                  }                  if(e.Key == OpenTK.Input.Key.Period)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness += 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness > 1)                              PickedMesh.GetLodLevel(0).Material.Roughness = 1;                      }                  }                    if(e.Key == OpenTK.Input.Key.T)                  {                      /*if(PickedMesh != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier -= 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier <= 0.01f)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 0.01f;                      }*/                  }                  if(e.Key == OpenTK.Input.Key.Y)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier += 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier >= 24)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 24;                      }                  }                    if(e.Key == OpenTK.Input.Key.Pause)                  {                      ShaderProgram.RecompileAll();                      ComputeShader.RecompileAll();                  }                  if(e.Key == OpenTK.Input.Key.R)                  {                      // Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode = !Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode;                  }                  if(e.Key == OpenTK.Input.Key.LBracket)                  {                      FreeCam.Cam.Brightness -= 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.RBracket)                  {                      FreeCam.Cam.Brightness += 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.Number1)                  {                      RedLight[0].GetTransformationManager().SetPosition(FreeCam.Cam.Transformation.GetPosition() + new Vector3((float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1) * 0.1f);                      RedLight[0].GetTransformationManager().SetOrientation(FreeCam.Cam.Transformation.GetOrientation());                      Picked = RedLight[0];                  }                  if(e.Key == OpenTK.Input.Key.Tilde)                  {                      // Interpolator.Interpolate<Vector3>(RedLight.GetTransformationManager().Position' RedLight.GetTransformationManager().Position.R' FreeCam.Cam.GetPosition()' 8.0f' Interpolator.Easing.EaseInOut);                  }                  var settings = Game.DisplayAdapter.MainRenderer.GraphicsSettings;                  if(e.Key == OpenTK.Input.Key.Number0)                      settings.UseVDAO = !settings.UseVDAO;                  if(e.Key == OpenTK.Input.Key.Number9)                      settings.UseBloom = !settings.UseBloom;                  if(e.Key == OpenTK.Input.Key.Number8)                      settings.UseDeferred = !settings.UseDeferred;                  if(e.Key == OpenTK.Input.Key.Number7)                      settings.UseDepth = !settings.UseDepth;                  if(e.Key == OpenTK.Input.Key.Number6)                      settings.UseFog = !settings.UseFog;                  if(e.Key == OpenTK.Input.Key.Number5)                      settings.UseCubeMapGI = !settings.UseCubeMapGI;                  if(e.Key == OpenTK.Input.Key.Number4)                      settings.UseRSM = !settings.UseRSM;                  if(e.Key == OpenTK.Input.Key.Number3)                      settings.UseVXGI = !settings.UseVXGI;                  if(e.Key == OpenTK.Input.Key.Number2)                      settings.UseHBAO = !settings.UseHBAO;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.F1 && !e.Shift)                      InterpolateCameraFromSaved(0);                  if(e.Key == OpenTK.Input.Key.F2 && !e.Shift)                      InterpolateCameraFromSaved(1);                  if(e.Key == OpenTK.Input.Key.F3 && !e.Shift)                      InterpolateCameraFromSaved(2);                  if(e.Key == OpenTK.Input.Key.F4 && !e.Shift)                      InterpolateCameraFromSaved(3);                  if(e.Key == OpenTK.Input.Key.F5 && !e.Shift)                      InterpolateCameraFromSaved(4);                  if(e.Key == OpenTK.Input.Key.F6 && !e.Shift)                      InterpolateCameraFromSaved(5);                  if(e.Key == OpenTK.Input.Key.F7 && !e.Shift)                      InterpolateCameraFromSaved(6);                    if(e.Key == OpenTK.Input.Key.F1 && e.Shift)                      SaveCamera(0);                  if(e.Key == OpenTK.Input.Key.F2 && e.Shift)                      SaveCamera(1);                  if(e.Key == OpenTK.Input.Key.F3 && e.Shift)                      SaveCamera(2);                  if(e.Key == OpenTK.Input.Key.F4 && e.Shift)                      SaveCamera(3);                  if(e.Key == OpenTK.Input.Key.F5 && e.Shift)                      SaveCamera(4);                  if(e.Key == OpenTK.Input.Key.F6 && e.Shift)                      SaveCamera(5);                  if(e.Key == OpenTK.Input.Key.F7 && e.Shift)                      SaveCamera(6);                    if(e.Key == OpenTK.Input.Key.Tab)                  {                      Game.DisplayAdapter.IsCursorVisible = !Game.DisplayAdapter.IsCursorVisible;                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;                  }                  if(e.Key == OpenTK.Input.Key.Comma)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness -= 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness < 0)                              PickedMesh.GetLodLevel(0).Material.Roughness = 0;                      }                  }                  if(e.Key == OpenTK.Input.Key.Period)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness += 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness > 1)                              PickedMesh.GetLodLevel(0).Material.Roughness = 1;                      }                  }                    if(e.Key == OpenTK.Input.Key.T)                  {                      /*if(PickedMesh != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier -= 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier <= 0.01f)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 0.01f;                      }*/                  }                  if(e.Key == OpenTK.Input.Key.Y)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier += 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier >= 24)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 24;                      }                  }                    if(e.Key == OpenTK.Input.Key.Pause)                  {                      ShaderProgram.RecompileAll();                      ComputeShader.RecompileAll();                  }                  if(e.Key == OpenTK.Input.Key.R)                  {                      // Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode = !Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode;                  }                  if(e.Key == OpenTK.Input.Key.LBracket)                  {                      FreeCam.Cam.Brightness -= 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.RBracket)                  {                      FreeCam.Cam.Brightness += 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.Number1)                  {                      RedLight[0].GetTransformationManager().SetPosition(FreeCam.Cam.Transformation.GetPosition() + new Vector3((float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1) * 0.1f);                      RedLight[0].GetTransformationManager().SetOrientation(FreeCam.Cam.Transformation.GetOrientation());                      Picked = RedLight[0];                  }                  if(e.Key == OpenTK.Input.Key.Tilde)                  {                      // Interpolator.Interpolate<Vector3>(RedLight.GetTransformationManager().Position' RedLight.GetTransformationManager().Position.R' FreeCam.Cam.GetPosition()' 8.0f' Interpolator.Easing.EaseInOut);                  }                  var settings = Game.DisplayAdapter.MainRenderer.GraphicsSettings;                  if(e.Key == OpenTK.Input.Key.Number0)                      settings.UseVDAO = !settings.UseVDAO;                  if(e.Key == OpenTK.Input.Key.Number9)                      settings.UseBloom = !settings.UseBloom;                  if(e.Key == OpenTK.Input.Key.Number8)                      settings.UseDeferred = !settings.UseDeferred;                  if(e.Key == OpenTK.Input.Key.Number7)                      settings.UseDepth = !settings.UseDepth;                  if(e.Key == OpenTK.Input.Key.Number6)                      settings.UseFog = !settings.UseFog;                  if(e.Key == OpenTK.Input.Key.Number5)                      settings.UseCubeMapGI = !settings.UseCubeMapGI;                  if(e.Key == OpenTK.Input.Key.Number4)                      settings.UseRSM = !settings.UseRSM;                  if(e.Key == OpenTK.Input.Key.Number3)                      settings.UseVXGI = !settings.UseVXGI;                  if(e.Key == OpenTK.Input.Key.Number2)                      settings.UseHBAO = !settings.UseHBAO;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.F1 && !e.Shift)                      InterpolateCameraFromSaved(0);                  if(e.Key == OpenTK.Input.Key.F2 && !e.Shift)                      InterpolateCameraFromSaved(1);                  if(e.Key == OpenTK.Input.Key.F3 && !e.Shift)                      InterpolateCameraFromSaved(2);                  if(e.Key == OpenTK.Input.Key.F4 && !e.Shift)                      InterpolateCameraFromSaved(3);                  if(e.Key == OpenTK.Input.Key.F5 && !e.Shift)                      InterpolateCameraFromSaved(4);                  if(e.Key == OpenTK.Input.Key.F6 && !e.Shift)                      InterpolateCameraFromSaved(5);                  if(e.Key == OpenTK.Input.Key.F7 && !e.Shift)                      InterpolateCameraFromSaved(6);                    if(e.Key == OpenTK.Input.Key.F1 && e.Shift)                      SaveCamera(0);                  if(e.Key == OpenTK.Input.Key.F2 && e.Shift)                      SaveCamera(1);                  if(e.Key == OpenTK.Input.Key.F3 && e.Shift)                      SaveCamera(2);                  if(e.Key == OpenTK.Input.Key.F4 && e.Shift)                      SaveCamera(3);                  if(e.Key == OpenTK.Input.Key.F5 && e.Shift)                      SaveCamera(4);                  if(e.Key == OpenTK.Input.Key.F6 && e.Shift)                      SaveCamera(5);                  if(e.Key == OpenTK.Input.Key.F7 && e.Shift)                      SaveCamera(6);                    if(e.Key == OpenTK.Input.Key.Tab)                  {                      Game.DisplayAdapter.IsCursorVisible = !Game.DisplayAdapter.IsCursorVisible;                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;                  }                  if(e.Key == OpenTK.Input.Key.Comma)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness -= 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness < 0)                              PickedMesh.GetLodLevel(0).Material.Roughness = 0;                      }                  }                  if(e.Key == OpenTK.Input.Key.Period)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness += 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness > 1)                              PickedMesh.GetLodLevel(0).Material.Roughness = 1;                      }                  }                    if(e.Key == OpenTK.Input.Key.T)                  {                      /*if(PickedMesh != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier -= 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier <= 0.01f)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 0.01f;                      }*/                  }                  if(e.Key == OpenTK.Input.Key.Y)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier += 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier >= 24)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 24;                      }                  }                    if(e.Key == OpenTK.Input.Key.Pause)                  {                      ShaderProgram.RecompileAll();                      ComputeShader.RecompileAll();                  }                  if(e.Key == OpenTK.Input.Key.R)                  {                      // Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode = !Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode;                  }                  if(e.Key == OpenTK.Input.Key.LBracket)                  {                      FreeCam.Cam.Brightness -= 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.RBracket)                  {                      FreeCam.Cam.Brightness += 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.Number1)                  {                      RedLight[0].GetTransformationManager().SetPosition(FreeCam.Cam.Transformation.GetPosition() + new Vector3((float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1) * 0.1f);                      RedLight[0].GetTransformationManager().SetOrientation(FreeCam.Cam.Transformation.GetOrientation());                      Picked = RedLight[0];                  }                  if(e.Key == OpenTK.Input.Key.Tilde)                  {                      // Interpolator.Interpolate<Vector3>(RedLight.GetTransformationManager().Position' RedLight.GetTransformationManager().Position.R' FreeCam.Cam.GetPosition()' 8.0f' Interpolator.Easing.EaseInOut);                  }                  var settings = Game.DisplayAdapter.MainRenderer.GraphicsSettings;                  if(e.Key == OpenTK.Input.Key.Number0)                      settings.UseVDAO = !settings.UseVDAO;                  if(e.Key == OpenTK.Input.Key.Number9)                      settings.UseBloom = !settings.UseBloom;                  if(e.Key == OpenTK.Input.Key.Number8)                      settings.UseDeferred = !settings.UseDeferred;                  if(e.Key == OpenTK.Input.Key.Number7)                      settings.UseDepth = !settings.UseDepth;                  if(e.Key == OpenTK.Input.Key.Number6)                      settings.UseFog = !settings.UseFog;                  if(e.Key == OpenTK.Input.Key.Number5)                      settings.UseCubeMapGI = !settings.UseCubeMapGI;                  if(e.Key == OpenTK.Input.Key.Number4)                      settings.UseRSM = !settings.UseRSM;                  if(e.Key == OpenTK.Input.Key.Number3)                      settings.UseVXGI = !settings.UseVXGI;                  if(e.Key == OpenTK.Input.Key.Number2)                      settings.UseHBAO = !settings.UseHBAO;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.F1 && !e.Shift)                      InterpolateCameraFromSaved(0);                  if(e.Key == OpenTK.Input.Key.F2 && !e.Shift)                      InterpolateCameraFromSaved(1);                  if(e.Key == OpenTK.Input.Key.F3 && !e.Shift)                      InterpolateCameraFromSaved(2);                  if(e.Key == OpenTK.Input.Key.F4 && !e.Shift)                      InterpolateCameraFromSaved(3);                  if(e.Key == OpenTK.Input.Key.F5 && !e.Shift)                      InterpolateCameraFromSaved(4);                  if(e.Key == OpenTK.Input.Key.F6 && !e.Shift)                      InterpolateCameraFromSaved(5);                  if(e.Key == OpenTK.Input.Key.F7 && !e.Shift)                      InterpolateCameraFromSaved(6);                    if(e.Key == OpenTK.Input.Key.F1 && e.Shift)                      SaveCamera(0);                  if(e.Key == OpenTK.Input.Key.F2 && e.Shift)                      SaveCamera(1);                  if(e.Key == OpenTK.Input.Key.F3 && e.Shift)                      SaveCamera(2);                  if(e.Key == OpenTK.Input.Key.F4 && e.Shift)                      SaveCamera(3);                  if(e.Key == OpenTK.Input.Key.F5 && e.Shift)                      SaveCamera(4);                  if(e.Key == OpenTK.Input.Key.F6 && e.Shift)                      SaveCamera(5);                  if(e.Key == OpenTK.Input.Key.F7 && e.Shift)                      SaveCamera(6);                    if(e.Key == OpenTK.Input.Key.Tab)                  {                      Game.DisplayAdapter.IsCursorVisible = !Game.DisplayAdapter.IsCursorVisible;                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;                  }                  if(e.Key == OpenTK.Input.Key.Comma)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness -= 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness < 0)                              PickedMesh.GetLodLevel(0).Material.Roughness = 0;                      }                  }                  if(e.Key == OpenTK.Input.Key.Period)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness += 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness > 1)                              PickedMesh.GetLodLevel(0).Material.Roughness = 1;                      }                  }                    if(e.Key == OpenTK.Input.Key.T)                  {                      /*if(PickedMesh != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier -= 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier <= 0.01f)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 0.01f;                      }*/                  }                  if(e.Key == OpenTK.Input.Key.Y)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier += 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier >= 24)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 24;                      }                  }                    if(e.Key == OpenTK.Input.Key.Pause)                  {                      ShaderProgram.RecompileAll();                      ComputeShader.RecompileAll();                  }                  if(e.Key == OpenTK.Input.Key.R)                  {                      // Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode = !Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode;                  }                  if(e.Key == OpenTK.Input.Key.LBracket)                  {                      FreeCam.Cam.Brightness -= 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.RBracket)                  {                      FreeCam.Cam.Brightness += 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.Number1)                  {                      RedLight[0].GetTransformationManager().SetPosition(FreeCam.Cam.Transformation.GetPosition() + new Vector3((float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1) * 0.1f);                      RedLight[0].GetTransformationManager().SetOrientation(FreeCam.Cam.Transformation.GetOrientation());                      Picked = RedLight[0];                  }                  if(e.Key == OpenTK.Input.Key.Tilde)                  {                      // Interpolator.Interpolate<Vector3>(RedLight.GetTransformationManager().Position' RedLight.GetTransformationManager().Position.R' FreeCam.Cam.GetPosition()' 8.0f' Interpolator.Easing.EaseInOut);                  }                  var settings = Game.DisplayAdapter.MainRenderer.GraphicsSettings;                  if(e.Key == OpenTK.Input.Key.Number0)                      settings.UseVDAO = !settings.UseVDAO;                  if(e.Key == OpenTK.Input.Key.Number9)                      settings.UseBloom = !settings.UseBloom;                  if(e.Key == OpenTK.Input.Key.Number8)                      settings.UseDeferred = !settings.UseDeferred;                  if(e.Key == OpenTK.Input.Key.Number7)                      settings.UseDepth = !settings.UseDepth;                  if(e.Key == OpenTK.Input.Key.Number6)                      settings.UseFog = !settings.UseFog;                  if(e.Key == OpenTK.Input.Key.Number5)                      settings.UseCubeMapGI = !settings.UseCubeMapGI;                  if(e.Key == OpenTK.Input.Key.Number4)                      settings.UseRSM = !settings.UseRSM;                  if(e.Key == OpenTK.Input.Key.Number3)                      settings.UseVXGI = !settings.UseVXGI;                  if(e.Key == OpenTK.Input.Key.Number2)                      settings.UseHBAO = !settings.UseHBAO;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.F1 && !e.Shift)                      InterpolateCameraFromSaved(0);                  if(e.Key == OpenTK.Input.Key.F2 && !e.Shift)                      InterpolateCameraFromSaved(1);                  if(e.Key == OpenTK.Input.Key.F3 && !e.Shift)                      InterpolateCameraFromSaved(2);                  if(e.Key == OpenTK.Input.Key.F4 && !e.Shift)                      InterpolateCameraFromSaved(3);                  if(e.Key == OpenTK.Input.Key.F5 && !e.Shift)                      InterpolateCameraFromSaved(4);                  if(e.Key == OpenTK.Input.Key.F6 && !e.Shift)                      InterpolateCameraFromSaved(5);                  if(e.Key == OpenTK.Input.Key.F7 && !e.Shift)                      InterpolateCameraFromSaved(6);                    if(e.Key == OpenTK.Input.Key.F1 && e.Shift)                      SaveCamera(0);                  if(e.Key == OpenTK.Input.Key.F2 && e.Shift)                      SaveCamera(1);                  if(e.Key == OpenTK.Input.Key.F3 && e.Shift)                      SaveCamera(2);                  if(e.Key == OpenTK.Input.Key.F4 && e.Shift)                      SaveCamera(3);                  if(e.Key == OpenTK.Input.Key.F5 && e.Shift)                      SaveCamera(4);                  if(e.Key == OpenTK.Input.Key.F6 && e.Shift)                      SaveCamera(5);                  if(e.Key == OpenTK.Input.Key.F7 && e.Shift)                      SaveCamera(6);                    if(e.Key == OpenTK.Input.Key.Tab)                  {                      Game.DisplayAdapter.IsCursorVisible = !Game.DisplayAdapter.IsCursorVisible;                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;                  }                  if(e.Key == OpenTK.Input.Key.Comma)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness -= 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness < 0)                              PickedMesh.GetLodLevel(0).Material.Roughness = 0;                      }                  }                  if(e.Key == OpenTK.Input.Key.Period)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness += 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness > 1)                              PickedMesh.GetLodLevel(0).Material.Roughness = 1;                      }                  }                    if(e.Key == OpenTK.Input.Key.T)                  {                      /*if(PickedMesh != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier -= 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier <= 0.01f)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 0.01f;                      }*/                  }                  if(e.Key == OpenTK.Input.Key.Y)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier += 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier >= 24)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 24;                      }                  }                    if(e.Key == OpenTK.Input.Key.Pause)                  {                      ShaderProgram.RecompileAll();                      ComputeShader.RecompileAll();                  }                  if(e.Key == OpenTK.Input.Key.R)                  {                      // Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode = !Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode;                  }                  if(e.Key == OpenTK.Input.Key.LBracket)                  {                      FreeCam.Cam.Brightness -= 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.RBracket)                  {                      FreeCam.Cam.Brightness += 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.Number1)                  {                      RedLight[0].GetTransformationManager().SetPosition(FreeCam.Cam.Transformation.GetPosition() + new Vector3((float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1) * 0.1f);                      RedLight[0].GetTransformationManager().SetOrientation(FreeCam.Cam.Transformation.GetOrientation());                      Picked = RedLight[0];                  }                  if(e.Key == OpenTK.Input.Key.Tilde)                  {                      // Interpolator.Interpolate<Vector3>(RedLight.GetTransformationManager().Position' RedLight.GetTransformationManager().Position.R' FreeCam.Cam.GetPosition()' 8.0f' Interpolator.Easing.EaseInOut);                  }                  var settings = Game.DisplayAdapter.MainRenderer.GraphicsSettings;                  if(e.Key == OpenTK.Input.Key.Number0)                      settings.UseVDAO = !settings.UseVDAO;                  if(e.Key == OpenTK.Input.Key.Number9)                      settings.UseBloom = !settings.UseBloom;                  if(e.Key == OpenTK.Input.Key.Number8)                      settings.UseDeferred = !settings.UseDeferred;                  if(e.Key == OpenTK.Input.Key.Number7)                      settings.UseDepth = !settings.UseDepth;                  if(e.Key == OpenTK.Input.Key.Number6)                      settings.UseFog = !settings.UseFog;                  if(e.Key == OpenTK.Input.Key.Number5)                      settings.UseCubeMapGI = !settings.UseCubeMapGI;                  if(e.Key == OpenTK.Input.Key.Number4)                      settings.UseRSM = !settings.UseRSM;                  if(e.Key == OpenTK.Input.Key.Number3)                      settings.UseVXGI = !settings.UseVXGI;                  if(e.Key == OpenTK.Input.Key.Number2)                      settings.UseHBAO = !settings.UseHBAO;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.F1 && !e.Shift)                      InterpolateCameraFromSaved(0);                  if(e.Key == OpenTK.Input.Key.F2 && !e.Shift)                      InterpolateCameraFromSaved(1);                  if(e.Key == OpenTK.Input.Key.F3 && !e.Shift)                      InterpolateCameraFromSaved(2);                  if(e.Key == OpenTK.Input.Key.F4 && !e.Shift)                      InterpolateCameraFromSaved(3);                  if(e.Key == OpenTK.Input.Key.F5 && !e.Shift)                      InterpolateCameraFromSaved(4);                  if(e.Key == OpenTK.Input.Key.F6 && !e.Shift)                      InterpolateCameraFromSaved(5);                  if(e.Key == OpenTK.Input.Key.F7 && !e.Shift)                      InterpolateCameraFromSaved(6);                    if(e.Key == OpenTK.Input.Key.F1 && e.Shift)                      SaveCamera(0);                  if(e.Key == OpenTK.Input.Key.F2 && e.Shift)                      SaveCamera(1);                  if(e.Key == OpenTK.Input.Key.F3 && e.Shift)                      SaveCamera(2);                  if(e.Key == OpenTK.Input.Key.F4 && e.Shift)                      SaveCamera(3);                  if(e.Key == OpenTK.Input.Key.F5 && e.Shift)                      SaveCamera(4);                  if(e.Key == OpenTK.Input.Key.F6 && e.Shift)                      SaveCamera(5);                  if(e.Key == OpenTK.Input.Key.F7 && e.Shift)                      SaveCamera(6);                    if(e.Key == OpenTK.Input.Key.Tab)                  {                      Game.DisplayAdapter.IsCursorVisible = !Game.DisplayAdapter.IsCursorVisible;                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;                  }                  if(e.Key == OpenTK.Input.Key.Comma)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness -= 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness < 0)                              PickedMesh.GetLodLevel(0).Material.Roughness = 0;                      }                  }                  if(e.Key == OpenTK.Input.Key.Period)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness += 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness > 1)                              PickedMesh.GetLodLevel(0).Material.Roughness = 1;                      }                  }                    if(e.Key == OpenTK.Input.Key.T)                  {                      /*if(PickedMesh != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier -= 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier <= 0.01f)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 0.01f;                      }*/                  }                  if(e.Key == OpenTK.Input.Key.Y)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier += 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier >= 24)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 24;                      }                  }                    if(e.Key == OpenTK.Input.Key.Pause)                  {                      ShaderProgram.RecompileAll();                      ComputeShader.RecompileAll();                  }                  if(e.Key == OpenTK.Input.Key.R)                  {                      // Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode = !Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode;                  }                  if(e.Key == OpenTK.Input.Key.LBracket)                  {                      FreeCam.Cam.Brightness -= 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.RBracket)                  {                      FreeCam.Cam.Brightness += 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.Number1)                  {                      RedLight[0].GetTransformationManager().SetPosition(FreeCam.Cam.Transformation.GetPosition() + new Vector3((float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1) * 0.1f);                      RedLight[0].GetTransformationManager().SetOrientation(FreeCam.Cam.Transformation.GetOrientation());                      Picked = RedLight[0];                  }                  if(e.Key == OpenTK.Input.Key.Tilde)                  {                      // Interpolator.Interpolate<Vector3>(RedLight.GetTransformationManager().Position' RedLight.GetTransformationManager().Position.R' FreeCam.Cam.GetPosition()' 8.0f' Interpolator.Easing.EaseInOut);                  }                  var settings = Game.DisplayAdapter.MainRenderer.GraphicsSettings;                  if(e.Key == OpenTK.Input.Key.Number0)                      settings.UseVDAO = !settings.UseVDAO;                  if(e.Key == OpenTK.Input.Key.Number9)                      settings.UseBloom = !settings.UseBloom;                  if(e.Key == OpenTK.Input.Key.Number8)                      settings.UseDeferred = !settings.UseDeferred;                  if(e.Key == OpenTK.Input.Key.Number7)                      settings.UseDepth = !settings.UseDepth;                  if(e.Key == OpenTK.Input.Key.Number6)                      settings.UseFog = !settings.UseFog;                  if(e.Key == OpenTK.Input.Key.Number5)                      settings.UseCubeMapGI = !settings.UseCubeMapGI;                  if(e.Key == OpenTK.Input.Key.Number4)                      settings.UseRSM = !settings.UseRSM;                  if(e.Key == OpenTK.Input.Key.Number3)                      settings.UseVXGI = !settings.UseVXGI;                  if(e.Key == OpenTK.Input.Key.Number2)                      settings.UseHBAO = !settings.UseHBAO;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.F1 && !e.Shift)                      InterpolateCameraFromSaved(0);                  if(e.Key == OpenTK.Input.Key.F2 && !e.Shift)                      InterpolateCameraFromSaved(1);                  if(e.Key == OpenTK.Input.Key.F3 && !e.Shift)                      InterpolateCameraFromSaved(2);                  if(e.Key == OpenTK.Input.Key.F4 && !e.Shift)                      InterpolateCameraFromSaved(3);                  if(e.Key == OpenTK.Input.Key.F5 && !e.Shift)                      InterpolateCameraFromSaved(4);                  if(e.Key == OpenTK.Input.Key.F6 && !e.Shift)                      InterpolateCameraFromSaved(5);                  if(e.Key == OpenTK.Input.Key.F7 && !e.Shift)                      InterpolateCameraFromSaved(6);                    if(e.Key == OpenTK.Input.Key.F1 && e.Shift)                      SaveCamera(0);                  if(e.Key == OpenTK.Input.Key.F2 && e.Shift)                      SaveCamera(1);                  if(e.Key == OpenTK.Input.Key.F3 && e.Shift)                      SaveCamera(2);                  if(e.Key == OpenTK.Input.Key.F4 && e.Shift)                      SaveCamera(3);                  if(e.Key == OpenTK.Input.Key.F5 && e.Shift)                      SaveCamera(4);                  if(e.Key == OpenTK.Input.Key.F6 && e.Shift)                      SaveCamera(5);                  if(e.Key == OpenTK.Input.Key.F7 && e.Shift)                      SaveCamera(6);                    if(e.Key == OpenTK.Input.Key.Tab)                  {                      Game.DisplayAdapter.IsCursorVisible = !Game.DisplayAdapter.IsCursorVisible;                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;                  }                  if(e.Key == OpenTK.Input.Key.Comma)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness -= 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness < 0)                              PickedMesh.GetLodLevel(0).Material.Roughness = 0;                      }                  }                  if(e.Key == OpenTK.Input.Key.Period)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness += 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness > 1)                              PickedMesh.GetLodLevel(0).Material.Roughness = 1;                      }                  }                    if(e.Key == OpenTK.Input.Key.T)                  {                      /*if(PickedMesh != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier -= 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier <= 0.01f)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 0.01f;                      }*/                  }                  if(e.Key == OpenTK.Input.Key.Y)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier += 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier >= 24)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 24;                      }                  }                    if(e.Key == OpenTK.Input.Key.Pause)                  {                      ShaderProgram.RecompileAll();                      ComputeShader.RecompileAll();                  }                  if(e.Key == OpenTK.Input.Key.R)                  {                      // Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode = !Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode;                  }                  if(e.Key == OpenTK.Input.Key.LBracket)                  {                      FreeCam.Cam.Brightness -= 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.RBracket)                  {                      FreeCam.Cam.Brightness += 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.Number1)                  {                      RedLight[0].GetTransformationManager().SetPosition(FreeCam.Cam.Transformation.GetPosition() + new Vector3((float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1) * 0.1f);                      RedLight[0].GetTransformationManager().SetOrientation(FreeCam.Cam.Transformation.GetOrientation());                      Picked = RedLight[0];                  }                  if(e.Key == OpenTK.Input.Key.Tilde)                  {                      // Interpolator.Interpolate<Vector3>(RedLight.GetTransformationManager().Position' RedLight.GetTransformationManager().Position.R' FreeCam.Cam.GetPosition()' 8.0f' Interpolator.Easing.EaseInOut);                  }                  var settings = Game.DisplayAdapter.MainRenderer.GraphicsSettings;                  if(e.Key == OpenTK.Input.Key.Number0)                      settings.UseVDAO = !settings.UseVDAO;                  if(e.Key == OpenTK.Input.Key.Number9)                      settings.UseBloom = !settings.UseBloom;                  if(e.Key == OpenTK.Input.Key.Number8)                      settings.UseDeferred = !settings.UseDeferred;                  if(e.Key == OpenTK.Input.Key.Number7)                      settings.UseDepth = !settings.UseDepth;                  if(e.Key == OpenTK.Input.Key.Number6)                      settings.UseFog = !settings.UseFog;                  if(e.Key == OpenTK.Input.Key.Number5)                      settings.UseCubeMapGI = !settings.UseCubeMapGI;                  if(e.Key == OpenTK.Input.Key.Number4)                      settings.UseRSM = !settings.UseRSM;                  if(e.Key == OpenTK.Input.Key.Number3)                      settings.UseVXGI = !settings.UseVXGI;                  if(e.Key == OpenTK.Input.Key.Number2)                      settings.UseHBAO = !settings.UseHBAO;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.F1 && !e.Shift)                      InterpolateCameraFromSaved(0);                  if(e.Key == OpenTK.Input.Key.F2 && !e.Shift)                      InterpolateCameraFromSaved(1);                  if(e.Key == OpenTK.Input.Key.F3 && !e.Shift)                      InterpolateCameraFromSaved(2);                  if(e.Key == OpenTK.Input.Key.F4 && !e.Shift)                      InterpolateCameraFromSaved(3);                  if(e.Key == OpenTK.Input.Key.F5 && !e.Shift)                      InterpolateCameraFromSaved(4);                  if(e.Key == OpenTK.Input.Key.F6 && !e.Shift)                      InterpolateCameraFromSaved(5);                  if(e.Key == OpenTK.Input.Key.F7 && !e.Shift)                      InterpolateCameraFromSaved(6);                    if(e.Key == OpenTK.Input.Key.F1 && e.Shift)                      SaveCamera(0);                  if(e.Key == OpenTK.Input.Key.F2 && e.Shift)                      SaveCamera(1);                  if(e.Key == OpenTK.Input.Key.F3 && e.Shift)                      SaveCamera(2);                  if(e.Key == OpenTK.Input.Key.F4 && e.Shift)                      SaveCamera(3);                  if(e.Key == OpenTK.Input.Key.F5 && e.Shift)                      SaveCamera(4);                  if(e.Key == OpenTK.Input.Key.F6 && e.Shift)                      SaveCamera(5);                  if(e.Key == OpenTK.Input.Key.F7 && e.Shift)                      SaveCamera(6);                    if(e.Key == OpenTK.Input.Key.Tab)                  {                      Game.DisplayAdapter.IsCursorVisible = !Game.DisplayAdapter.IsCursorVisible;                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;                  }                  if(e.Key == OpenTK.Input.Key.Comma)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness -= 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness < 0)                              PickedMesh.GetLodLevel(0).Material.Roughness = 0;                      }                  }                  if(e.Key == OpenTK.Input.Key.Period)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness += 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness > 1)                              PickedMesh.GetLodLevel(0).Material.Roughness = 1;                      }                  }                    if(e.Key == OpenTK.Input.Key.T)                  {                      /*if(PickedMesh != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier -= 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier <= 0.01f)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 0.01f;                      }*/                  }                  if(e.Key == OpenTK.Input.Key.Y)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier += 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier >= 24)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 24;                      }                  }                    if(e.Key == OpenTK.Input.Key.Pause)                  {                      ShaderProgram.RecompileAll();                      ComputeShader.RecompileAll();                  }                  if(e.Key == OpenTK.Input.Key.R)                  {                      // Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode = !Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode;                  }                  if(e.Key == OpenTK.Input.Key.LBracket)                  {                      FreeCam.Cam.Brightness -= 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.RBracket)                  {                      FreeCam.Cam.Brightness += 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.Number1)                  {                      RedLight[0].GetTransformationManager().SetPosition(FreeCam.Cam.Transformation.GetPosition() + new Vector3((float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1) * 0.1f);                      RedLight[0].GetTransformationManager().SetOrientation(FreeCam.Cam.Transformation.GetOrientation());                      Picked = RedLight[0];                  }                  if(e.Key == OpenTK.Input.Key.Tilde)                  {                      // Interpolator.Interpolate<Vector3>(RedLight.GetTransformationManager().Position' RedLight.GetTransformationManager().Position.R' FreeCam.Cam.GetPosition()' 8.0f' Interpolator.Easing.EaseInOut);                  }                  var settings = Game.DisplayAdapter.MainRenderer.GraphicsSettings;                  if(e.Key == OpenTK.Input.Key.Number0)                      settings.UseVDAO = !settings.UseVDAO;                  if(e.Key == OpenTK.Input.Key.Number9)                      settings.UseBloom = !settings.UseBloom;                  if(e.Key == OpenTK.Input.Key.Number8)                      settings.UseDeferred = !settings.UseDeferred;                  if(e.Key == OpenTK.Input.Key.Number7)                      settings.UseDepth = !settings.UseDepth;                  if(e.Key == OpenTK.Input.Key.Number6)                      settings.UseFog = !settings.UseFog;                  if(e.Key == OpenTK.Input.Key.Number5)                      settings.UseCubeMapGI = !settings.UseCubeMapGI;                  if(e.Key == OpenTK.Input.Key.Number4)                      settings.UseRSM = !settings.UseRSM;                  if(e.Key == OpenTK.Input.Key.Number3)                      settings.UseVXGI = !settings.UseVXGI;                  if(e.Key == OpenTK.Input.Key.Number2)                      settings.UseHBAO = !settings.UseHBAO;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.F1 && !e.Shift)                      InterpolateCameraFromSaved(0);                  if(e.Key == OpenTK.Input.Key.F2 && !e.Shift)                      InterpolateCameraFromSaved(1);                  if(e.Key == OpenTK.Input.Key.F3 && !e.Shift)                      InterpolateCameraFromSaved(2);                  if(e.Key == OpenTK.Input.Key.F4 && !e.Shift)                      InterpolateCameraFromSaved(3);                  if(e.Key == OpenTK.Input.Key.F5 && !e.Shift)                      InterpolateCameraFromSaved(4);                  if(e.Key == OpenTK.Input.Key.F6 && !e.Shift)                      InterpolateCameraFromSaved(5);                  if(e.Key == OpenTK.Input.Key.F7 && !e.Shift)                      InterpolateCameraFromSaved(6);                    if(e.Key == OpenTK.Input.Key.F1 && e.Shift)                      SaveCamera(0);                  if(e.Key == OpenTK.Input.Key.F2 && e.Shift)                      SaveCamera(1);                  if(e.Key == OpenTK.Input.Key.F3 && e.Shift)                      SaveCamera(2);                  if(e.Key == OpenTK.Input.Key.F4 && e.Shift)                      SaveCamera(3);                  if(e.Key == OpenTK.Input.Key.F5 && e.Shift)                      SaveCamera(4);                  if(e.Key == OpenTK.Input.Key.F6 && e.Shift)                      SaveCamera(5);                  if(e.Key == OpenTK.Input.Key.F7 && e.Shift)                      SaveCamera(6);                    if(e.Key == OpenTK.Input.Key.Tab)                  {                      Game.DisplayAdapter.IsCursorVisible = !Game.DisplayAdapter.IsCursorVisible;                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;                  }                  if(e.Key == OpenTK.Input.Key.Comma)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness -= 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness < 0)                              PickedMesh.GetLodLevel(0).Material.Roughness = 0;                      }                  }                  if(e.Key == OpenTK.Input.Key.Period)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness += 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness > 1)                              PickedMesh.GetLodLevel(0).Material.Roughness = 1;                      }                  }                    if(e.Key == OpenTK.Input.Key.T)                  {                      /*if(PickedMesh != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier -= 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier <= 0.01f)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 0.01f;                      }*/                  }                  if(e.Key == OpenTK.Input.Key.Y)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier += 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier >= 24)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 24;                      }                  }                    if(e.Key == OpenTK.Input.Key.Pause)                  {                      ShaderProgram.RecompileAll();                      ComputeShader.RecompileAll();                  }                  if(e.Key == OpenTK.Input.Key.R)                  {                      // Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode = !Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode;                  }                  if(e.Key == OpenTK.Input.Key.LBracket)                  {                      FreeCam.Cam.Brightness -= 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.RBracket)                  {                      FreeCam.Cam.Brightness += 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.Number1)                  {                      RedLight[0].GetTransformationManager().SetPosition(FreeCam.Cam.Transformation.GetPosition() + new Vector3((float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1) * 0.1f);                      RedLight[0].GetTransformationManager().SetOrientation(FreeCam.Cam.Transformation.GetOrientation());                      Picked = RedLight[0];                  }                  if(e.Key == OpenTK.Input.Key.Tilde)                  {                      // Interpolator.Interpolate<Vector3>(RedLight.GetTransformationManager().Position' RedLight.GetTransformationManager().Position.R' FreeCam.Cam.GetPosition()' 8.0f' Interpolator.Easing.EaseInOut);                  }                  var settings = Game.DisplayAdapter.MainRenderer.GraphicsSettings;                  if(e.Key == OpenTK.Input.Key.Number0)                      settings.UseVDAO = !settings.UseVDAO;                  if(e.Key == OpenTK.Input.Key.Number9)                      settings.UseBloom = !settings.UseBloom;                  if(e.Key == OpenTK.Input.Key.Number8)                      settings.UseDeferred = !settings.UseDeferred;                  if(e.Key == OpenTK.Input.Key.Number7)                      settings.UseDepth = !settings.UseDepth;                  if(e.Key == OpenTK.Input.Key.Number6)                      settings.UseFog = !settings.UseFog;                  if(e.Key == OpenTK.Input.Key.Number5)                      settings.UseCubeMapGI = !settings.UseCubeMapGI;                  if(e.Key == OpenTK.Input.Key.Number4)                      settings.UseRSM = !settings.UseRSM;                  if(e.Key == OpenTK.Input.Key.Number3)                      settings.UseVXGI = !settings.UseVXGI;                  if(e.Key == OpenTK.Input.Key.Number2)                      settings.UseHBAO = !settings.UseHBAO;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.F1 && !e.Shift)                      InterpolateCameraFromSaved(0);                  if(e.Key == OpenTK.Input.Key.F2 && !e.Shift)                      InterpolateCameraFromSaved(1);                  if(e.Key == OpenTK.Input.Key.F3 && !e.Shift)                      InterpolateCameraFromSaved(2);                  if(e.Key == OpenTK.Input.Key.F4 && !e.Shift)                      InterpolateCameraFromSaved(3);                  if(e.Key == OpenTK.Input.Key.F5 && !e.Shift)                      InterpolateCameraFromSaved(4);                  if(e.Key == OpenTK.Input.Key.F6 && !e.Shift)                      InterpolateCameraFromSaved(5);                  if(e.Key == OpenTK.Input.Key.F7 && !e.Shift)                      InterpolateCameraFromSaved(6);                    if(e.Key == OpenTK.Input.Key.F1 && e.Shift)                      SaveCamera(0);                  if(e.Key == OpenTK.Input.Key.F2 && e.Shift)                      SaveCamera(1);                  if(e.Key == OpenTK.Input.Key.F3 && e.Shift)                      SaveCamera(2);                  if(e.Key == OpenTK.Input.Key.F4 && e.Shift)                      SaveCamera(3);                  if(e.Key == OpenTK.Input.Key.F5 && e.Shift)                      SaveCamera(4);                  if(e.Key == OpenTK.Input.Key.F6 && e.Shift)                      SaveCamera(5);                  if(e.Key == OpenTK.Input.Key.F7 && e.Shift)                      SaveCamera(6);                    if(e.Key == OpenTK.Input.Key.Tab)                  {                      Game.DisplayAdapter.IsCursorVisible = !Game.DisplayAdapter.IsCursorVisible;                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;                  }                  if(e.Key == OpenTK.Input.Key.Comma)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness -= 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness < 0)                              PickedMesh.GetLodLevel(0).Material.Roughness = 0;                      }                  }                  if(e.Key == OpenTK.Input.Key.Period)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness += 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness > 1)                              PickedMesh.GetLodLevel(0).Material.Roughness = 1;                      }                  }                    if(e.Key == OpenTK.Input.Key.T)                  {                      /*if(PickedMesh != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier -= 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier <= 0.01f)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 0.01f;                      }*/                  }                  if(e.Key == OpenTK.Input.Key.Y)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier += 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier >= 24)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 24;                      }                  }                    if(e.Key == OpenTK.Input.Key.Pause)                  {                      ShaderProgram.RecompileAll();                      ComputeShader.RecompileAll();                  }                  if(e.Key == OpenTK.Input.Key.R)                  {                      // Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode = !Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode;                  }                  if(e.Key == OpenTK.Input.Key.LBracket)                  {                      FreeCam.Cam.Brightness -= 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.RBracket)                  {                      FreeCam.Cam.Brightness += 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.Number1)                  {                      RedLight[0].GetTransformationManager().SetPosition(FreeCam.Cam.Transformation.GetPosition() + new Vector3((float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1) * 0.1f);                      RedLight[0].GetTransformationManager().SetOrientation(FreeCam.Cam.Transformation.GetOrientation());                      Picked = RedLight[0];                  }                  if(e.Key == OpenTK.Input.Key.Tilde)                  {                      // Interpolator.Interpolate<Vector3>(RedLight.GetTransformationManager().Position' RedLight.GetTransformationManager().Position.R' FreeCam.Cam.GetPosition()' 8.0f' Interpolator.Easing.EaseInOut);                  }                  var settings = Game.DisplayAdapter.MainRenderer.GraphicsSettings;                  if(e.Key == OpenTK.Input.Key.Number0)                      settings.UseVDAO = !settings.UseVDAO;                  if(e.Key == OpenTK.Input.Key.Number9)                      settings.UseBloom = !settings.UseBloom;                  if(e.Key == OpenTK.Input.Key.Number8)                      settings.UseDeferred = !settings.UseDeferred;                  if(e.Key == OpenTK.Input.Key.Number7)                      settings.UseDepth = !settings.UseDepth;                  if(e.Key == OpenTK.Input.Key.Number6)                      settings.UseFog = !settings.UseFog;                  if(e.Key == OpenTK.Input.Key.Number5)                      settings.UseCubeMapGI = !settings.UseCubeMapGI;                  if(e.Key == OpenTK.Input.Key.Number4)                      settings.UseRSM = !settings.UseRSM;                  if(e.Key == OpenTK.Input.Key.Number3)                      settings.UseVXGI = !settings.UseVXGI;                  if(e.Key == OpenTK.Input.Key.Number2)                      settings.UseHBAO = !settings.UseHBAO;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.F1 && !e.Shift)                      InterpolateCameraFromSaved(0);                  if(e.Key == OpenTK.Input.Key.F2 && !e.Shift)                      InterpolateCameraFromSaved(1);                  if(e.Key == OpenTK.Input.Key.F3 && !e.Shift)                      InterpolateCameraFromSaved(2);                  if(e.Key == OpenTK.Input.Key.F4 && !e.Shift)                      InterpolateCameraFromSaved(3);                  if(e.Key == OpenTK.Input.Key.F5 && !e.Shift)                      InterpolateCameraFromSaved(4);                  if(e.Key == OpenTK.Input.Key.F6 && !e.Shift)                      InterpolateCameraFromSaved(5);                  if(e.Key == OpenTK.Input.Key.F7 && !e.Shift)                      InterpolateCameraFromSaved(6);                    if(e.Key == OpenTK.Input.Key.F1 && e.Shift)                      SaveCamera(0);                  if(e.Key == OpenTK.Input.Key.F2 && e.Shift)                      SaveCamera(1);                  if(e.Key == OpenTK.Input.Key.F3 && e.Shift)                      SaveCamera(2);                  if(e.Key == OpenTK.Input.Key.F4 && e.Shift)                      SaveCamera(3);                  if(e.Key == OpenTK.Input.Key.F5 && e.Shift)                      SaveCamera(4);                  if(e.Key == OpenTK.Input.Key.F6 && e.Shift)                      SaveCamera(5);                  if(e.Key == OpenTK.Input.Key.F7 && e.Shift)                      SaveCamera(6);                    if(e.Key == OpenTK.Input.Key.Tab)                  {                      Game.DisplayAdapter.IsCursorVisible = !Game.DisplayAdapter.IsCursorVisible;                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;                  }                  if(e.Key == OpenTK.Input.Key.Comma)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness -= 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness < 0)                              PickedMesh.GetLodLevel(0).Material.Roughness = 0;                      }                  }                  if(e.Key == OpenTK.Input.Key.Period)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness += 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness > 1)                              PickedMesh.GetLodLevel(0).Material.Roughness = 1;                      }                  }                    if(e.Key == OpenTK.Input.Key.T)                  {                      /*if(PickedMesh != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier -= 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier <= 0.01f)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 0.01f;                      }*/                  }                  if(e.Key == OpenTK.Input.Key.Y)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier += 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier >= 24)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 24;                      }                  }                    if(e.Key == OpenTK.Input.Key.Pause)                  {                      ShaderProgram.RecompileAll();                      ComputeShader.RecompileAll();                  }                  if(e.Key == OpenTK.Input.Key.R)                  {                      // Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode = !Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode;                  }                  if(e.Key == OpenTK.Input.Key.LBracket)                  {                      FreeCam.Cam.Brightness -= 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.RBracket)                  {                      FreeCam.Cam.Brightness += 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.Number1)                  {                      RedLight[0].GetTransformationManager().SetPosition(FreeCam.Cam.Transformation.GetPosition() + new Vector3((float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1) * 0.1f);                      RedLight[0].GetTransformationManager().SetOrientation(FreeCam.Cam.Transformation.GetOrientation());                      Picked = RedLight[0];                  }                  if(e.Key == OpenTK.Input.Key.Tilde)                  {                      // Interpolator.Interpolate<Vector3>(RedLight.GetTransformationManager().Position' RedLight.GetTransformationManager().Position.R' FreeCam.Cam.GetPosition()' 8.0f' Interpolator.Easing.EaseInOut);                  }                  var settings = Game.DisplayAdapter.MainRenderer.GraphicsSettings;                  if(e.Key == OpenTK.Input.Key.Number0)                      settings.UseVDAO = !settings.UseVDAO;                  if(e.Key == OpenTK.Input.Key.Number9)                      settings.UseBloom = !settings.UseBloom;                  if(e.Key == OpenTK.Input.Key.Number8)                      settings.UseDeferred = !settings.UseDeferred;                  if(e.Key == OpenTK.Input.Key.Number7)                      settings.UseDepth = !settings.UseDepth;                  if(e.Key == OpenTK.Input.Key.Number6)                      settings.UseFog = !settings.UseFog;                  if(e.Key == OpenTK.Input.Key.Number5)                      settings.UseCubeMapGI = !settings.UseCubeMapGI;                  if(e.Key == OpenTK.Input.Key.Number4)                      settings.UseRSM = !settings.UseRSM;                  if(e.Key == OpenTK.Input.Key.Number3)                      settings.UseVXGI = !settings.UseVXGI;                  if(e.Key == OpenTK.Input.Key.Number2)                      settings.UseHBAO = !settings.UseHBAO;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.F1 && !e.Shift)                      InterpolateCameraFromSaved(0);                  if(e.Key == OpenTK.Input.Key.F2 && !e.Shift)                      InterpolateCameraFromSaved(1);                  if(e.Key == OpenTK.Input.Key.F3 && !e.Shift)                      InterpolateCameraFromSaved(2);                  if(e.Key == OpenTK.Input.Key.F4 && !e.Shift)                      InterpolateCameraFromSaved(3);                  if(e.Key == OpenTK.Input.Key.F5 && !e.Shift)                      InterpolateCameraFromSaved(4);                  if(e.Key == OpenTK.Input.Key.F6 && !e.Shift)                      InterpolateCameraFromSaved(5);                  if(e.Key == OpenTK.Input.Key.F7 && !e.Shift)                      InterpolateCameraFromSaved(6);                    if(e.Key == OpenTK.Input.Key.F1 && e.Shift)                      SaveCamera(0);                  if(e.Key == OpenTK.Input.Key.F2 && e.Shift)                      SaveCamera(1);                  if(e.Key == OpenTK.Input.Key.F3 && e.Shift)                      SaveCamera(2);                  if(e.Key == OpenTK.Input.Key.F4 && e.Shift)                      SaveCamera(3);                  if(e.Key == OpenTK.Input.Key.F5 && e.Shift)                      SaveCamera(4);                  if(e.Key == OpenTK.Input.Key.F6 && e.Shift)                      SaveCamera(5);                  if(e.Key == OpenTK.Input.Key.F7 && e.Shift)                      SaveCamera(6);                    if(e.Key == OpenTK.Input.Key.Tab)                  {                      Game.DisplayAdapter.IsCursorVisible = !Game.DisplayAdapter.IsCursorVisible;                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;                  }                  if(e.Key == OpenTK.Input.Key.Comma)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness -= 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness < 0)                              PickedMesh.GetLodLevel(0).Material.Roughness = 0;                      }                  }                  if(e.Key == OpenTK.Input.Key.Period)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness += 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness > 1)                              PickedMesh.GetLodLevel(0).Material.Roughness = 1;                      }                  }                    if(e.Key == OpenTK.Input.Key.T)                  {                      /*if(PickedMesh != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier -= 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier <= 0.01f)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 0.01f;                      }*/                  }                  if(e.Key == OpenTK.Input.Key.Y)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier += 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier >= 24)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 24;                      }                  }                    if(e.Key == OpenTK.Input.Key.Pause)                  {                      ShaderProgram.RecompileAll();                      ComputeShader.RecompileAll();                  }                  if(e.Key == OpenTK.Input.Key.R)                  {                      // Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode = !Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode;                  }                  if(e.Key == OpenTK.Input.Key.LBracket)                  {                      FreeCam.Cam.Brightness -= 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.RBracket)                  {                      FreeCam.Cam.Brightness += 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.Number1)                  {                      RedLight[0].GetTransformationManager().SetPosition(FreeCam.Cam.Transformation.GetPosition() + new Vector3((float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1) * 0.1f);                      RedLight[0].GetTransformationManager().SetOrientation(FreeCam.Cam.Transformation.GetOrientation());                      Picked = RedLight[0];                  }                  if(e.Key == OpenTK.Input.Key.Tilde)                  {                      // Interpolator.Interpolate<Vector3>(RedLight.GetTransformationManager().Position' RedLight.GetTransformationManager().Position.R' FreeCam.Cam.GetPosition()' 8.0f' Interpolator.Easing.EaseInOut);                  }                  var settings = Game.DisplayAdapter.MainRenderer.GraphicsSettings;                  if(e.Key == OpenTK.Input.Key.Number0)                      settings.UseVDAO = !settings.UseVDAO;                  if(e.Key == OpenTK.Input.Key.Number9)                      settings.UseBloom = !settings.UseBloom;                  if(e.Key == OpenTK.Input.Key.Number8)                      settings.UseDeferred = !settings.UseDeferred;                  if(e.Key == OpenTK.Input.Key.Number7)                      settings.UseDepth = !settings.UseDepth;                  if(e.Key == OpenTK.Input.Key.Number6)                      settings.UseFog = !settings.UseFog;                  if(e.Key == OpenTK.Input.Key.Number5)                      settings.UseCubeMapGI = !settings.UseCubeMapGI;                  if(e.Key == OpenTK.Input.Key.Number4)                      settings.UseRSM = !settings.UseRSM;                  if(e.Key == OpenTK.Input.Key.Number3)                      settings.UseVXGI = !settings.UseVXGI;                  if(e.Key == OpenTK.Input.Key.Number2)                      settings.UseHBAO = !settings.UseHBAO;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.F1 && !e.Shift)                      InterpolateCameraFromSaved(0);                  if(e.Key == OpenTK.Input.Key.F2 && !e.Shift)                      InterpolateCameraFromSaved(1);                  if(e.Key == OpenTK.Input.Key.F3 && !e.Shift)                      InterpolateCameraFromSaved(2);                  if(e.Key == OpenTK.Input.Key.F4 && !e.Shift)                      InterpolateCameraFromSaved(3);                  if(e.Key == OpenTK.Input.Key.F5 && !e.Shift)                      InterpolateCameraFromSaved(4);                  if(e.Key == OpenTK.Input.Key.F6 && !e.Shift)                      InterpolateCameraFromSaved(5);                  if(e.Key == OpenTK.Input.Key.F7 && !e.Shift)                      InterpolateCameraFromSaved(6);                    if(e.Key == OpenTK.Input.Key.F1 && e.Shift)                      SaveCamera(0);                  if(e.Key == OpenTK.Input.Key.F2 && e.Shift)                      SaveCamera(1);                  if(e.Key == OpenTK.Input.Key.F3 && e.Shift)                      SaveCamera(2);                  if(e.Key == OpenTK.Input.Key.F4 && e.Shift)                      SaveCamera(3);                  if(e.Key == OpenTK.Input.Key.F5 && e.Shift)                      SaveCamera(4);                  if(e.Key == OpenTK.Input.Key.F6 && e.Shift)                      SaveCamera(5);                  if(e.Key == OpenTK.Input.Key.F7 && e.Shift)                      SaveCamera(6);                    if(e.Key == OpenTK.Input.Key.Tab)                  {                      Game.DisplayAdapter.IsCursorVisible = !Game.DisplayAdapter.IsCursorVisible;                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;                  }                  if(e.Key == OpenTK.Input.Key.Comma)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness -= 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness < 0)                              PickedMesh.GetLodLevel(0).Material.Roughness = 0;                      }                  }                  if(e.Key == OpenTK.Input.Key.Period)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness += 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness > 1)                              PickedMesh.GetLodLevel(0).Material.Roughness = 1;                      }                  }                    if(e.Key == OpenTK.Input.Key.T)                  {                      /*if(PickedMesh != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier -= 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier <= 0.01f)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 0.01f;                      }*/                  }                  if(e.Key == OpenTK.Input.Key.Y)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier += 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier >= 24)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 24;                      }                  }                    if(e.Key == OpenTK.Input.Key.Pause)                  {                      ShaderProgram.RecompileAll();                      ComputeShader.RecompileAll();                  }                  if(e.Key == OpenTK.Input.Key.R)                  {                      // Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode = !Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode;                  }                  if(e.Key == OpenTK.Input.Key.LBracket)                  {                      FreeCam.Cam.Brightness -= 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.RBracket)                  {                      FreeCam.Cam.Brightness += 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.Number1)                  {                      RedLight[0].GetTransformationManager().SetPosition(FreeCam.Cam.Transformation.GetPosition() + new Vector3((float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1) * 0.1f);                      RedLight[0].GetTransformationManager().SetOrientation(FreeCam.Cam.Transformation.GetOrientation());                      Picked = RedLight[0];                  }                  if(e.Key == OpenTK.Input.Key.Tilde)                  {                      // Interpolator.Interpolate<Vector3>(RedLight.GetTransformationManager().Position' RedLight.GetTransformationManager().Position.R' FreeCam.Cam.GetPosition()' 8.0f' Interpolator.Easing.EaseInOut);                  }                  var settings = Game.DisplayAdapter.MainRenderer.GraphicsSettings;                  if(e.Key == OpenTK.Input.Key.Number0)                      settings.UseVDAO = !settings.UseVDAO;                  if(e.Key == OpenTK.Input.Key.Number9)                      settings.UseBloom = !settings.UseBloom;                  if(e.Key == OpenTK.Input.Key.Number8)                      settings.UseDeferred = !settings.UseDeferred;                  if(e.Key == OpenTK.Input.Key.Number7)                      settings.UseDepth = !settings.UseDepth;                  if(e.Key == OpenTK.Input.Key.Number6)                      settings.UseFog = !settings.UseFog;                  if(e.Key == OpenTK.Input.Key.Number5)                      settings.UseCubeMapGI = !settings.UseCubeMapGI;                  if(e.Key == OpenTK.Input.Key.Number4)                      settings.UseRSM = !settings.UseRSM;                  if(e.Key == OpenTK.Input.Key.Number3)                      settings.UseVXGI = !settings.UseVXGI;                  if(e.Key == OpenTK.Input.Key.Number2)                      settings.UseHBAO = !settings.UseHBAO;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.F1 && !e.Shift)                      InterpolateCameraFromSaved(0);                  if(e.Key == OpenTK.Input.Key.F2 && !e.Shift)                      InterpolateCameraFromSaved(1);                  if(e.Key == OpenTK.Input.Key.F3 && !e.Shift)                      InterpolateCameraFromSaved(2);                  if(e.Key == OpenTK.Input.Key.F4 && !e.Shift)                      InterpolateCameraFromSaved(3);                  if(e.Key == OpenTK.Input.Key.F5 && !e.Shift)                      InterpolateCameraFromSaved(4);                  if(e.Key == OpenTK.Input.Key.F6 && !e.Shift)                      InterpolateCameraFromSaved(5);                  if(e.Key == OpenTK.Input.Key.F7 && !e.Shift)                      InterpolateCameraFromSaved(6);                    if(e.Key == OpenTK.Input.Key.F1 && e.Shift)                      SaveCamera(0);                  if(e.Key == OpenTK.Input.Key.F2 && e.Shift)                      SaveCamera(1);                  if(e.Key == OpenTK.Input.Key.F3 && e.Shift)                      SaveCamera(2);                  if(e.Key == OpenTK.Input.Key.F4 && e.Shift)                      SaveCamera(3);                  if(e.Key == OpenTK.Input.Key.F5 && e.Shift)                      SaveCamera(4);                  if(e.Key == OpenTK.Input.Key.F6 && e.Shift)                      SaveCamera(5);                  if(e.Key == OpenTK.Input.Key.F7 && e.Shift)                      SaveCamera(6);                    if(e.Key == OpenTK.Input.Key.Tab)                  {                      Game.DisplayAdapter.IsCursorVisible = !Game.DisplayAdapter.IsCursorVisible;                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;                  }                  if(e.Key == OpenTK.Input.Key.Comma)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness -= 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness < 0)                              PickedMesh.GetLodLevel(0).Material.Roughness = 0;                      }                  }                  if(e.Key == OpenTK.Input.Key.Period)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness += 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness > 1)                              PickedMesh.GetLodLevel(0).Material.Roughness = 1;                      }                  }                    if(e.Key == OpenTK.Input.Key.T)                  {                      /*if(PickedMesh != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier -= 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier <= 0.01f)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 0.01f;                      }*/                  }                  if(e.Key == OpenTK.Input.Key.Y)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier += 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier >= 24)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 24;                      }                  }                    if(e.Key == OpenTK.Input.Key.Pause)                  {                      ShaderProgram.RecompileAll();                      ComputeShader.RecompileAll();                  }                  if(e.Key == OpenTK.Input.Key.R)                  {                      // Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode = !Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode;                  }                  if(e.Key == OpenTK.Input.Key.LBracket)                  {                      FreeCam.Cam.Brightness -= 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.RBracket)                  {                      FreeCam.Cam.Brightness += 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.Number1)                  {                      RedLight[0].GetTransformationManager().SetPosition(FreeCam.Cam.Transformation.GetPosition() + new Vector3((float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1) * 0.1f);                      RedLight[0].GetTransformationManager().SetOrientation(FreeCam.Cam.Transformation.GetOrientation());                      Picked = RedLight[0];                  }                  if(e.Key == OpenTK.Input.Key.Tilde)                  {                      // Interpolator.Interpolate<Vector3>(RedLight.GetTransformationManager().Position' RedLight.GetTransformationManager().Position.R' FreeCam.Cam.GetPosition()' 8.0f' Interpolator.Easing.EaseInOut);                  }                  var settings = Game.DisplayAdapter.MainRenderer.GraphicsSettings;                  if(e.Key == OpenTK.Input.Key.Number0)                      settings.UseVDAO = !settings.UseVDAO;                  if(e.Key == OpenTK.Input.Key.Number9)                      settings.UseBloom = !settings.UseBloom;                  if(e.Key == OpenTK.Input.Key.Number8)                      settings.UseDeferred = !settings.UseDeferred;                  if(e.Key == OpenTK.Input.Key.Number7)                      settings.UseDepth = !settings.UseDepth;                  if(e.Key == OpenTK.Input.Key.Number6)                      settings.UseFog = !settings.UseFog;                  if(e.Key == OpenTK.Input.Key.Number5)                      settings.UseCubeMapGI = !settings.UseCubeMapGI;                  if(e.Key == OpenTK.Input.Key.Number4)                      settings.UseRSM = !settings.UseRSM;                  if(e.Key == OpenTK.Input.Key.Number3)                      settings.UseVXGI = !settings.UseVXGI;                  if(e.Key == OpenTK.Input.Key.Number2)                      settings.UseHBAO = !settings.UseHBAO;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,SetUpInputBehaviours,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.F1 && !e.Shift)                      InterpolateCameraFromSaved(0);                  if(e.Key == OpenTK.Input.Key.F2 && !e.Shift)                      InterpolateCameraFromSaved(1);                  if(e.Key == OpenTK.Input.Key.F3 && !e.Shift)                      InterpolateCameraFromSaved(2);                  if(e.Key == OpenTK.Input.Key.F4 && !e.Shift)                      InterpolateCameraFromSaved(3);                  if(e.Key == OpenTK.Input.Key.F5 && !e.Shift)                      InterpolateCameraFromSaved(4);                  if(e.Key == OpenTK.Input.Key.F6 && !e.Shift)                      InterpolateCameraFromSaved(5);                  if(e.Key == OpenTK.Input.Key.F7 && !e.Shift)                      InterpolateCameraFromSaved(6);                    if(e.Key == OpenTK.Input.Key.F1 && e.Shift)                      SaveCamera(0);                  if(e.Key == OpenTK.Input.Key.F2 && e.Shift)                      SaveCamera(1);                  if(e.Key == OpenTK.Input.Key.F3 && e.Shift)                      SaveCamera(2);                  if(e.Key == OpenTK.Input.Key.F4 && e.Shift)                      SaveCamera(3);                  if(e.Key == OpenTK.Input.Key.F5 && e.Shift)                      SaveCamera(4);                  if(e.Key == OpenTK.Input.Key.F6 && e.Shift)                      SaveCamera(5);                  if(e.Key == OpenTK.Input.Key.F7 && e.Shift)                      SaveCamera(6);                    if(e.Key == OpenTK.Input.Key.Tab)                  {                      Game.DisplayAdapter.IsCursorVisible = !Game.DisplayAdapter.IsCursorVisible;                      FreeCam.Freeze = Game.DisplayAdapter.IsCursorVisible;                  }                  if(e.Key == OpenTK.Input.Key.Comma)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness -= 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness < 0)                              PickedMesh.GetLodLevel(0).Material.Roughness = 0;                      }                  }                  if(e.Key == OpenTK.Input.Key.Period)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.Roughness += 0.05f;                          if(PickedMesh.GetLodLevel(0).Material.Roughness > 1)                              PickedMesh.GetLodLevel(0).Material.Roughness = 1;                      }                  }                    if(e.Key == OpenTK.Input.Key.T)                  {                      /*if(PickedMesh != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier -= 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier <= 0.01f)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 0.01f;                      }*/                  }                  if(e.Key == OpenTK.Input.Key.Y)                  {                      if(PickedMesh.GetLodLevel(0) != null)                      {                          PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier += 0.1f;                          if(PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier >= 24)                              PickedMesh.GetLodLevel(0).Material.ParallaxHeightMultiplier = 24;                      }                  }                    if(e.Key == OpenTK.Input.Key.Pause)                  {                      ShaderProgram.RecompileAll();                      ComputeShader.RecompileAll();                  }                  if(e.Key == OpenTK.Input.Key.R)                  {                      // Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode = !Game.DisplayAdapter.Pipeline.PostProcessor.UnbiasedIntegrateRenderMode;                  }                  if(e.Key == OpenTK.Input.Key.LBracket)                  {                      FreeCam.Cam.Brightness -= 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.RBracket)                  {                      FreeCam.Cam.Brightness += 0.1f;                  }                  if(e.Key == OpenTK.Input.Key.Number1)                  {                      RedLight[0].GetTransformationManager().SetPosition(FreeCam.Cam.Transformation.GetPosition() + new Vector3((float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1' (float)rand.NextDouble() * 2 - 1) * 0.1f);                      RedLight[0].GetTransformationManager().SetOrientation(FreeCam.Cam.Transformation.GetOrientation());                      Picked = RedLight[0];                  }                  if(e.Key == OpenTK.Input.Key.Tilde)                  {                      // Interpolator.Interpolate<Vector3>(RedLight.GetTransformationManager().Position' RedLight.GetTransformationManager().Position.R' FreeCam.Cam.GetPosition()' 8.0f' Interpolator.Easing.EaseInOut);                  }                  var settings = Game.DisplayAdapter.MainRenderer.GraphicsSettings;                  if(e.Key == OpenTK.Input.Key.Number0)                      settings.UseVDAO = !settings.UseVDAO;                  if(e.Key == OpenTK.Input.Key.Number9)                      settings.UseBloom = !settings.UseBloom;                  if(e.Key == OpenTK.Input.Key.Number8)                      settings.UseDeferred = !settings.UseDeferred;                  if(e.Key == OpenTK.Input.Key.Number7)                      settings.UseDepth = !settings.UseDepth;                  if(e.Key == OpenTK.Input.Key.Number6)                      settings.UseFog = !settings.UseFog;                  if(e.Key == OpenTK.Input.Key.Number5)                      settings.UseCubeMapGI = !settings.UseCubeMapGI;                  if(e.Key == OpenTK.Input.Key.Number4)                      settings.UseRSM = !settings.UseRSM;                  if(e.Key == OpenTK.Input.Key.Number3)                      settings.UseVXGI = !settings.UseVXGI;                  if(e.Key == OpenTK.Input.Key.Number2)                      settings.UseHBAO = !settings.UseHBAO;              };
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,InterpolateCameraFromSaved,The following statement contains a magic number: Interpolator.Interpolate<Vector3>(FreeCam.Cam.Transformation.Position' FreeCam.Cam.Transformation.Position.R' pos' 8.0f' Interpolator.Easing.EaseInOut);
Magic Number,ShadowsTester,Commons,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\Commons.cs,InterpolateCameraFromSaved,The following statement contains a magic number: Interpolator.Interpolate<Quaternion>(FreeCam.Cam.Transformation.Orientation' FreeCam.Cam.Transformation.Orientation.R' orient' 8.0f' Interpolator.Easing.EaseInOut);
Magic Number,ShadowsTester,BigTerrainScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\BigTerrainScene.cs,BigTerrainScene,The following statement contains a magic number: var whitebox = Mesh3d.Create(new Object3dInfo(whiteboxInfo.Vertices)' new GenericMaterial(new Vector3(1000' 1000' 1000)));
Magic Number,ShadowsTester,BigTerrainScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\BigTerrainScene.cs,BigTerrainScene,The following statement contains a magic number: var whitebox = Mesh3d.Create(new Object3dInfo(whiteboxInfo.Vertices)' new GenericMaterial(new Vector3(1000' 1000' 1000)));
Magic Number,ShadowsTester,BigTerrainScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\BigTerrainScene.cs,BigTerrainScene,The following statement contains a magic number: var whitebox = Mesh3d.Create(new Object3dInfo(whiteboxInfo.Vertices)' new GenericMaterial(new Vector3(1000' 1000' 1000)));
Magic Number,ShadowsTester,BigTerrainScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\BigTerrainScene.cs,BigTerrainScene,The following statement contains a magic number: whitebox.GetInstance(0).Scale(3000);
Magic Number,ShadowsTester,BigTerrainScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\BigTerrainScene.cs,BigTerrainScene,The following statement contains a magic number: whitebox.GetInstance(0).Translate(0' -1500' 0);
Magic Number,ShadowsTester,TerrainState,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\BigTerrainScene.cs,TerrainState,The following statement contains a magic number: State = new byte[64 * 64];
Magic Number,ShadowsTester,TerrainState,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\BigTerrainScene.cs,TerrainState,The following statement contains a magic number: State = new byte[64 * 64];
Magic Number,ShadowsTester,TerrainState,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\BigTerrainScene.cs,TerrainState,The following statement contains a magic number: i < 64 * 64
Magic Number,ShadowsTester,TerrainState,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\BigTerrainScene.cs,TerrainState,The following statement contains a magic number: i < 64 * 64
Magic Number,ShadowsTester,TerrainState,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\BigTerrainScene.cs,TerrainState,The following statement contains a magic number: State = new byte[64 * 64];
Magic Number,ShadowsTester,TerrainState,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\BigTerrainScene.cs,TerrainState,The following statement contains a magic number: State = new byte[64 * 64];
Magic Number,ShadowsTester,TerrainState,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\BigTerrainScene.cs,TerrainState,The following statement contains a magic number: i < 64 * 64
Magic Number,ShadowsTester,TerrainState,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\BigTerrainScene.cs,TerrainState,The following statement contains a magic number: i < 64 * 64
Magic Number,ShadowsTester,DynamicCubeMapController,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\DynamicCubeMapController.cs,Create,The following statement contains a magic number: int cnt = 0' din = 256;
Magic Number,ShadowsTester,DynamicCubeMapController,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\DynamicCubeMapController.cs,Create,The following statement contains a magic number: lucy.AddInstance(new Mesh3dInstance(new TransformationManager(cubens.GetPosition()' Quaternion.Identity' 0.1f)' "cubemap-marker-" + cnt.ToString()));
Magic Number,ShadowsTester,DynamicCubeMapController,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\DynamicCubeMapController.cs,Create,The following statement contains a magic number: var info = new Renderer.CubeMapInfo()                  {                      FalloffScale = 7.0f'                      Texture = cubens.Texture'                      Position = cubens.GetPosition()                  };
Magic Number,ShadowsTester,DynamicCubeMapController,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\DynamicCubeMapController.cs,Create,The following statement contains a magic number: i < 100
Magic Number,ShadowsTester,DynamicCubeMapController,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\DynamicCubeMapController.cs,Create,The following statement contains a magic number: Game.OnKeyUp += (xa' eargs) =>              {                  if(eargs.Key == OpenTK.Input.Key.PageUp)                      index++;                  if(eargs.Key == OpenTK.Input.Key.PageDown)                      index--;                  if(index > 9)                      index = 0;                  if(index < 0)                      index = 9;                  if(Commons.Picked == null)                      index = 0;                  Commons.Picked = lucy.GetInstance(index);                  TitleOutput.Message = "Picked cubemap ID " + index.ToString();                  if(eargs.Key == OpenTK.Input.Key.End)                  {                      livemode = !livemode;                  }                  if(eargs.Key == OpenTK.Input.Key.Insert)                  {                      for(int i = 0; i < cnt; i++)                      {                          Game.DisplayAdapter.MainRenderer.CubeMaps[i].Position *= -1;                          internalMapping[Game.DisplayAdapter.MainRenderer.CubeMaps[i]].Clear();                      }                  }                  if(eargs.Key == OpenTK.Input.Key.Home)                  {                      var cpos = Camera.MainDisplayCamera.GetPosition();                      /*                      float angle = 0;                      for(int i = 0; i < cnt; i++)                      {                          float prc = (float)i / (float)cnt;                          angle += 2.39996322f;                          var disp = new Vector3(prc * 15.0f * (float)Math.Sin(angle)' 1.0f - prc * 3.0f' prc * 15.0f * (float)Math.Cos(angle));                          lucy.GetInstance(i).SetPosition(cpos + disp);                      }*/                      for(int x = 0; x < 10; x++)                          for(int y = 0; y < 10; y++)                          {                              int i = y + x * 10;                              lucy.GetInstance(i).SetPosition(cpos + new Vector3(x - 5' 0' y - 5) * 2 );                          }                    }                  if(eargs.Key == OpenTK.Input.Key.Up)                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale += 0.1f;                  if(eargs.Key == OpenTK.Input.Key.Down)                  {                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale -= 0.1f;                      if(Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale < 0.02)                          Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale = 0.02f;                  }              };
Magic Number,ShadowsTester,DynamicCubeMapController,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\DynamicCubeMapController.cs,Create,The following statement contains a magic number: Game.OnKeyUp += (xa' eargs) =>              {                  if(eargs.Key == OpenTK.Input.Key.PageUp)                      index++;                  if(eargs.Key == OpenTK.Input.Key.PageDown)                      index--;                  if(index > 9)                      index = 0;                  if(index < 0)                      index = 9;                  if(Commons.Picked == null)                      index = 0;                  Commons.Picked = lucy.GetInstance(index);                  TitleOutput.Message = "Picked cubemap ID " + index.ToString();                  if(eargs.Key == OpenTK.Input.Key.End)                  {                      livemode = !livemode;                  }                  if(eargs.Key == OpenTK.Input.Key.Insert)                  {                      for(int i = 0; i < cnt; i++)                      {                          Game.DisplayAdapter.MainRenderer.CubeMaps[i].Position *= -1;                          internalMapping[Game.DisplayAdapter.MainRenderer.CubeMaps[i]].Clear();                      }                  }                  if(eargs.Key == OpenTK.Input.Key.Home)                  {                      var cpos = Camera.MainDisplayCamera.GetPosition();                      /*                      float angle = 0;                      for(int i = 0; i < cnt; i++)                      {                          float prc = (float)i / (float)cnt;                          angle += 2.39996322f;                          var disp = new Vector3(prc * 15.0f * (float)Math.Sin(angle)' 1.0f - prc * 3.0f' prc * 15.0f * (float)Math.Cos(angle));                          lucy.GetInstance(i).SetPosition(cpos + disp);                      }*/                      for(int x = 0; x < 10; x++)                          for(int y = 0; y < 10; y++)                          {                              int i = y + x * 10;                              lucy.GetInstance(i).SetPosition(cpos + new Vector3(x - 5' 0' y - 5) * 2 );                          }                    }                  if(eargs.Key == OpenTK.Input.Key.Up)                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale += 0.1f;                  if(eargs.Key == OpenTK.Input.Key.Down)                  {                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale -= 0.1f;                      if(Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale < 0.02)                          Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale = 0.02f;                  }              };
Magic Number,ShadowsTester,DynamicCubeMapController,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\DynamicCubeMapController.cs,Create,The following statement contains a magic number: Game.OnKeyUp += (xa' eargs) =>              {                  if(eargs.Key == OpenTK.Input.Key.PageUp)                      index++;                  if(eargs.Key == OpenTK.Input.Key.PageDown)                      index--;                  if(index > 9)                      index = 0;                  if(index < 0)                      index = 9;                  if(Commons.Picked == null)                      index = 0;                  Commons.Picked = lucy.GetInstance(index);                  TitleOutput.Message = "Picked cubemap ID " + index.ToString();                  if(eargs.Key == OpenTK.Input.Key.End)                  {                      livemode = !livemode;                  }                  if(eargs.Key == OpenTK.Input.Key.Insert)                  {                      for(int i = 0; i < cnt; i++)                      {                          Game.DisplayAdapter.MainRenderer.CubeMaps[i].Position *= -1;                          internalMapping[Game.DisplayAdapter.MainRenderer.CubeMaps[i]].Clear();                      }                  }                  if(eargs.Key == OpenTK.Input.Key.Home)                  {                      var cpos = Camera.MainDisplayCamera.GetPosition();                      /*                      float angle = 0;                      for(int i = 0; i < cnt; i++)                      {                          float prc = (float)i / (float)cnt;                          angle += 2.39996322f;                          var disp = new Vector3(prc * 15.0f * (float)Math.Sin(angle)' 1.0f - prc * 3.0f' prc * 15.0f * (float)Math.Cos(angle));                          lucy.GetInstance(i).SetPosition(cpos + disp);                      }*/                      for(int x = 0; x < 10; x++)                          for(int y = 0; y < 10; y++)                          {                              int i = y + x * 10;                              lucy.GetInstance(i).SetPosition(cpos + new Vector3(x - 5' 0' y - 5) * 2 );                          }                    }                  if(eargs.Key == OpenTK.Input.Key.Up)                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale += 0.1f;                  if(eargs.Key == OpenTK.Input.Key.Down)                  {                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale -= 0.1f;                      if(Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale < 0.02)                          Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale = 0.02f;                  }              };
Magic Number,ShadowsTester,DynamicCubeMapController,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\DynamicCubeMapController.cs,Create,The following statement contains a magic number: Game.OnKeyUp += (xa' eargs) =>              {                  if(eargs.Key == OpenTK.Input.Key.PageUp)                      index++;                  if(eargs.Key == OpenTK.Input.Key.PageDown)                      index--;                  if(index > 9)                      index = 0;                  if(index < 0)                      index = 9;                  if(Commons.Picked == null)                      index = 0;                  Commons.Picked = lucy.GetInstance(index);                  TitleOutput.Message = "Picked cubemap ID " + index.ToString();                  if(eargs.Key == OpenTK.Input.Key.End)                  {                      livemode = !livemode;                  }                  if(eargs.Key == OpenTK.Input.Key.Insert)                  {                      for(int i = 0; i < cnt; i++)                      {                          Game.DisplayAdapter.MainRenderer.CubeMaps[i].Position *= -1;                          internalMapping[Game.DisplayAdapter.MainRenderer.CubeMaps[i]].Clear();                      }                  }                  if(eargs.Key == OpenTK.Input.Key.Home)                  {                      var cpos = Camera.MainDisplayCamera.GetPosition();                      /*                      float angle = 0;                      for(int i = 0; i < cnt; i++)                      {                          float prc = (float)i / (float)cnt;                          angle += 2.39996322f;                          var disp = new Vector3(prc * 15.0f * (float)Math.Sin(angle)' 1.0f - prc * 3.0f' prc * 15.0f * (float)Math.Cos(angle));                          lucy.GetInstance(i).SetPosition(cpos + disp);                      }*/                      for(int x = 0; x < 10; x++)                          for(int y = 0; y < 10; y++)                          {                              int i = y + x * 10;                              lucy.GetInstance(i).SetPosition(cpos + new Vector3(x - 5' 0' y - 5) * 2 );                          }                    }                  if(eargs.Key == OpenTK.Input.Key.Up)                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale += 0.1f;                  if(eargs.Key == OpenTK.Input.Key.Down)                  {                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale -= 0.1f;                      if(Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale < 0.02)                          Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale = 0.02f;                  }              };
Magic Number,ShadowsTester,DynamicCubeMapController,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\DynamicCubeMapController.cs,Create,The following statement contains a magic number: Game.OnKeyUp += (xa' eargs) =>              {                  if(eargs.Key == OpenTK.Input.Key.PageUp)                      index++;                  if(eargs.Key == OpenTK.Input.Key.PageDown)                      index--;                  if(index > 9)                      index = 0;                  if(index < 0)                      index = 9;                  if(Commons.Picked == null)                      index = 0;                  Commons.Picked = lucy.GetInstance(index);                  TitleOutput.Message = "Picked cubemap ID " + index.ToString();                  if(eargs.Key == OpenTK.Input.Key.End)                  {                      livemode = !livemode;                  }                  if(eargs.Key == OpenTK.Input.Key.Insert)                  {                      for(int i = 0; i < cnt; i++)                      {                          Game.DisplayAdapter.MainRenderer.CubeMaps[i].Position *= -1;                          internalMapping[Game.DisplayAdapter.MainRenderer.CubeMaps[i]].Clear();                      }                  }                  if(eargs.Key == OpenTK.Input.Key.Home)                  {                      var cpos = Camera.MainDisplayCamera.GetPosition();                      /*                      float angle = 0;                      for(int i = 0; i < cnt; i++)                      {                          float prc = (float)i / (float)cnt;                          angle += 2.39996322f;                          var disp = new Vector3(prc * 15.0f * (float)Math.Sin(angle)' 1.0f - prc * 3.0f' prc * 15.0f * (float)Math.Cos(angle));                          lucy.GetInstance(i).SetPosition(cpos + disp);                      }*/                      for(int x = 0; x < 10; x++)                          for(int y = 0; y < 10; y++)                          {                              int i = y + x * 10;                              lucy.GetInstance(i).SetPosition(cpos + new Vector3(x - 5' 0' y - 5) * 2 );                          }                    }                  if(eargs.Key == OpenTK.Input.Key.Up)                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale += 0.1f;                  if(eargs.Key == OpenTK.Input.Key.Down)                  {                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale -= 0.1f;                      if(Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale < 0.02)                          Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale = 0.02f;                  }              };
Magic Number,ShadowsTester,DynamicCubeMapController,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\DynamicCubeMapController.cs,Create,The following statement contains a magic number: Game.OnKeyUp += (xa' eargs) =>              {                  if(eargs.Key == OpenTK.Input.Key.PageUp)                      index++;                  if(eargs.Key == OpenTK.Input.Key.PageDown)                      index--;                  if(index > 9)                      index = 0;                  if(index < 0)                      index = 9;                  if(Commons.Picked == null)                      index = 0;                  Commons.Picked = lucy.GetInstance(index);                  TitleOutput.Message = "Picked cubemap ID " + index.ToString();                  if(eargs.Key == OpenTK.Input.Key.End)                  {                      livemode = !livemode;                  }                  if(eargs.Key == OpenTK.Input.Key.Insert)                  {                      for(int i = 0; i < cnt; i++)                      {                          Game.DisplayAdapter.MainRenderer.CubeMaps[i].Position *= -1;                          internalMapping[Game.DisplayAdapter.MainRenderer.CubeMaps[i]].Clear();                      }                  }                  if(eargs.Key == OpenTK.Input.Key.Home)                  {                      var cpos = Camera.MainDisplayCamera.GetPosition();                      /*                      float angle = 0;                      for(int i = 0; i < cnt; i++)                      {                          float prc = (float)i / (float)cnt;                          angle += 2.39996322f;                          var disp = new Vector3(prc * 15.0f * (float)Math.Sin(angle)' 1.0f - prc * 3.0f' prc * 15.0f * (float)Math.Cos(angle));                          lucy.GetInstance(i).SetPosition(cpos + disp);                      }*/                      for(int x = 0; x < 10; x++)                          for(int y = 0; y < 10; y++)                          {                              int i = y + x * 10;                              lucy.GetInstance(i).SetPosition(cpos + new Vector3(x - 5' 0' y - 5) * 2 );                          }                    }                  if(eargs.Key == OpenTK.Input.Key.Up)                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale += 0.1f;                  if(eargs.Key == OpenTK.Input.Key.Down)                  {                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale -= 0.1f;                      if(Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale < 0.02)                          Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale = 0.02f;                  }              };
Magic Number,ShadowsTester,DynamicCubeMapController,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\DynamicCubeMapController.cs,Create,The following statement contains a magic number: Game.OnKeyUp += (xa' eargs) =>              {                  if(eargs.Key == OpenTK.Input.Key.PageUp)                      index++;                  if(eargs.Key == OpenTK.Input.Key.PageDown)                      index--;                  if(index > 9)                      index = 0;                  if(index < 0)                      index = 9;                  if(Commons.Picked == null)                      index = 0;                  Commons.Picked = lucy.GetInstance(index);                  TitleOutput.Message = "Picked cubemap ID " + index.ToString();                  if(eargs.Key == OpenTK.Input.Key.End)                  {                      livemode = !livemode;                  }                  if(eargs.Key == OpenTK.Input.Key.Insert)                  {                      for(int i = 0; i < cnt; i++)                      {                          Game.DisplayAdapter.MainRenderer.CubeMaps[i].Position *= -1;                          internalMapping[Game.DisplayAdapter.MainRenderer.CubeMaps[i]].Clear();                      }                  }                  if(eargs.Key == OpenTK.Input.Key.Home)                  {                      var cpos = Camera.MainDisplayCamera.GetPosition();                      /*                      float angle = 0;                      for(int i = 0; i < cnt; i++)                      {                          float prc = (float)i / (float)cnt;                          angle += 2.39996322f;                          var disp = new Vector3(prc * 15.0f * (float)Math.Sin(angle)' 1.0f - prc * 3.0f' prc * 15.0f * (float)Math.Cos(angle));                          lucy.GetInstance(i).SetPosition(cpos + disp);                      }*/                      for(int x = 0; x < 10; x++)                          for(int y = 0; y < 10; y++)                          {                              int i = y + x * 10;                              lucy.GetInstance(i).SetPosition(cpos + new Vector3(x - 5' 0' y - 5) * 2 );                          }                    }                  if(eargs.Key == OpenTK.Input.Key.Up)                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale += 0.1f;                  if(eargs.Key == OpenTK.Input.Key.Down)                  {                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale -= 0.1f;                      if(Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale < 0.02)                          Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale = 0.02f;                  }              };
Magic Number,ShadowsTester,DynamicCubeMapController,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\DynamicCubeMapController.cs,Create,The following statement contains a magic number: Game.OnKeyUp += (xa' eargs) =>              {                  if(eargs.Key == OpenTK.Input.Key.PageUp)                      index++;                  if(eargs.Key == OpenTK.Input.Key.PageDown)                      index--;                  if(index > 9)                      index = 0;                  if(index < 0)                      index = 9;                  if(Commons.Picked == null)                      index = 0;                  Commons.Picked = lucy.GetInstance(index);                  TitleOutput.Message = "Picked cubemap ID " + index.ToString();                  if(eargs.Key == OpenTK.Input.Key.End)                  {                      livemode = !livemode;                  }                  if(eargs.Key == OpenTK.Input.Key.Insert)                  {                      for(int i = 0; i < cnt; i++)                      {                          Game.DisplayAdapter.MainRenderer.CubeMaps[i].Position *= -1;                          internalMapping[Game.DisplayAdapter.MainRenderer.CubeMaps[i]].Clear();                      }                  }                  if(eargs.Key == OpenTK.Input.Key.Home)                  {                      var cpos = Camera.MainDisplayCamera.GetPosition();                      /*                      float angle = 0;                      for(int i = 0; i < cnt; i++)                      {                          float prc = (float)i / (float)cnt;                          angle += 2.39996322f;                          var disp = new Vector3(prc * 15.0f * (float)Math.Sin(angle)' 1.0f - prc * 3.0f' prc * 15.0f * (float)Math.Cos(angle));                          lucy.GetInstance(i).SetPosition(cpos + disp);                      }*/                      for(int x = 0; x < 10; x++)                          for(int y = 0; y < 10; y++)                          {                              int i = y + x * 10;                              lucy.GetInstance(i).SetPosition(cpos + new Vector3(x - 5' 0' y - 5) * 2 );                          }                    }                  if(eargs.Key == OpenTK.Input.Key.Up)                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale += 0.1f;                  if(eargs.Key == OpenTK.Input.Key.Down)                  {                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale -= 0.1f;                      if(Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale < 0.02)                          Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale = 0.02f;                  }              };
Magic Number,ShadowsTester,DynamicCubeMapController,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\DynamicCubeMapController.cs,Create,The following statement contains a magic number: Game.OnKeyUp += (xa' eargs) =>              {                  if(eargs.Key == OpenTK.Input.Key.PageUp)                      index++;                  if(eargs.Key == OpenTK.Input.Key.PageDown)                      index--;                  if(index > 9)                      index = 0;                  if(index < 0)                      index = 9;                  if(Commons.Picked == null)                      index = 0;                  Commons.Picked = lucy.GetInstance(index);                  TitleOutput.Message = "Picked cubemap ID " + index.ToString();                  if(eargs.Key == OpenTK.Input.Key.End)                  {                      livemode = !livemode;                  }                  if(eargs.Key == OpenTK.Input.Key.Insert)                  {                      for(int i = 0; i < cnt; i++)                      {                          Game.DisplayAdapter.MainRenderer.CubeMaps[i].Position *= -1;                          internalMapping[Game.DisplayAdapter.MainRenderer.CubeMaps[i]].Clear();                      }                  }                  if(eargs.Key == OpenTK.Input.Key.Home)                  {                      var cpos = Camera.MainDisplayCamera.GetPosition();                      /*                      float angle = 0;                      for(int i = 0; i < cnt; i++)                      {                          float prc = (float)i / (float)cnt;                          angle += 2.39996322f;                          var disp = new Vector3(prc * 15.0f * (float)Math.Sin(angle)' 1.0f - prc * 3.0f' prc * 15.0f * (float)Math.Cos(angle));                          lucy.GetInstance(i).SetPosition(cpos + disp);                      }*/                      for(int x = 0; x < 10; x++)                          for(int y = 0; y < 10; y++)                          {                              int i = y + x * 10;                              lucy.GetInstance(i).SetPosition(cpos + new Vector3(x - 5' 0' y - 5) * 2 );                          }                    }                  if(eargs.Key == OpenTK.Input.Key.Up)                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale += 0.1f;                  if(eargs.Key == OpenTK.Input.Key.Down)                  {                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale -= 0.1f;                      if(Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale < 0.02)                          Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale = 0.02f;                  }              };
Magic Number,ShadowsTester,DynamicCubeMapController,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\DynamicCubeMapController.cs,Create,The following statement contains a magic number: Game.OnKeyUp += (xa' eargs) =>              {                  if(eargs.Key == OpenTK.Input.Key.PageUp)                      index++;                  if(eargs.Key == OpenTK.Input.Key.PageDown)                      index--;                  if(index > 9)                      index = 0;                  if(index < 0)                      index = 9;                  if(Commons.Picked == null)                      index = 0;                  Commons.Picked = lucy.GetInstance(index);                  TitleOutput.Message = "Picked cubemap ID " + index.ToString();                  if(eargs.Key == OpenTK.Input.Key.End)                  {                      livemode = !livemode;                  }                  if(eargs.Key == OpenTK.Input.Key.Insert)                  {                      for(int i = 0; i < cnt; i++)                      {                          Game.DisplayAdapter.MainRenderer.CubeMaps[i].Position *= -1;                          internalMapping[Game.DisplayAdapter.MainRenderer.CubeMaps[i]].Clear();                      }                  }                  if(eargs.Key == OpenTK.Input.Key.Home)                  {                      var cpos = Camera.MainDisplayCamera.GetPosition();                      /*                      float angle = 0;                      for(int i = 0; i < cnt; i++)                      {                          float prc = (float)i / (float)cnt;                          angle += 2.39996322f;                          var disp = new Vector3(prc * 15.0f * (float)Math.Sin(angle)' 1.0f - prc * 3.0f' prc * 15.0f * (float)Math.Cos(angle));                          lucy.GetInstance(i).SetPosition(cpos + disp);                      }*/                      for(int x = 0; x < 10; x++)                          for(int y = 0; y < 10; y++)                          {                              int i = y + x * 10;                              lucy.GetInstance(i).SetPosition(cpos + new Vector3(x - 5' 0' y - 5) * 2 );                          }                    }                  if(eargs.Key == OpenTK.Input.Key.Up)                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale += 0.1f;                  if(eargs.Key == OpenTK.Input.Key.Down)                  {                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale -= 0.1f;                      if(Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale < 0.02)                          Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale = 0.02f;                  }              };
Magic Number,ShadowsTester,DynamicCubeMapController,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\DynamicCubeMapController.cs,Create,The following statement contains a magic number: Game.OnKeyUp += (xa' eargs) =>              {                  if(eargs.Key == OpenTK.Input.Key.PageUp)                      index++;                  if(eargs.Key == OpenTK.Input.Key.PageDown)                      index--;                  if(index > 9)                      index = 0;                  if(index < 0)                      index = 9;                  if(Commons.Picked == null)                      index = 0;                  Commons.Picked = lucy.GetInstance(index);                  TitleOutput.Message = "Picked cubemap ID " + index.ToString();                  if(eargs.Key == OpenTK.Input.Key.End)                  {                      livemode = !livemode;                  }                  if(eargs.Key == OpenTK.Input.Key.Insert)                  {                      for(int i = 0; i < cnt; i++)                      {                          Game.DisplayAdapter.MainRenderer.CubeMaps[i].Position *= -1;                          internalMapping[Game.DisplayAdapter.MainRenderer.CubeMaps[i]].Clear();                      }                  }                  if(eargs.Key == OpenTK.Input.Key.Home)                  {                      var cpos = Camera.MainDisplayCamera.GetPosition();                      /*                      float angle = 0;                      for(int i = 0; i < cnt; i++)                      {                          float prc = (float)i / (float)cnt;                          angle += 2.39996322f;                          var disp = new Vector3(prc * 15.0f * (float)Math.Sin(angle)' 1.0f - prc * 3.0f' prc * 15.0f * (float)Math.Cos(angle));                          lucy.GetInstance(i).SetPosition(cpos + disp);                      }*/                      for(int x = 0; x < 10; x++)                          for(int y = 0; y < 10; y++)                          {                              int i = y + x * 10;                              lucy.GetInstance(i).SetPosition(cpos + new Vector3(x - 5' 0' y - 5) * 2 );                          }                    }                  if(eargs.Key == OpenTK.Input.Key.Up)                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale += 0.1f;                  if(eargs.Key == OpenTK.Input.Key.Down)                  {                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale -= 0.1f;                      if(Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale < 0.02)                          Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale = 0.02f;                  }              };
Magic Number,ShadowsTester,DynamicCubeMapController,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\DynamicCubeMapController.cs,Create,The following statement contains a magic number: Game.OnKeyUp += (xa' eargs) =>              {                  if(eargs.Key == OpenTK.Input.Key.PageUp)                      index++;                  if(eargs.Key == OpenTK.Input.Key.PageDown)                      index--;                  if(index > 9)                      index = 0;                  if(index < 0)                      index = 9;                  if(Commons.Picked == null)                      index = 0;                  Commons.Picked = lucy.GetInstance(index);                  TitleOutput.Message = "Picked cubemap ID " + index.ToString();                  if(eargs.Key == OpenTK.Input.Key.End)                  {                      livemode = !livemode;                  }                  if(eargs.Key == OpenTK.Input.Key.Insert)                  {                      for(int i = 0; i < cnt; i++)                      {                          Game.DisplayAdapter.MainRenderer.CubeMaps[i].Position *= -1;                          internalMapping[Game.DisplayAdapter.MainRenderer.CubeMaps[i]].Clear();                      }                  }                  if(eargs.Key == OpenTK.Input.Key.Home)                  {                      var cpos = Camera.MainDisplayCamera.GetPosition();                      /*                      float angle = 0;                      for(int i = 0; i < cnt; i++)                      {                          float prc = (float)i / (float)cnt;                          angle += 2.39996322f;                          var disp = new Vector3(prc * 15.0f * (float)Math.Sin(angle)' 1.0f - prc * 3.0f' prc * 15.0f * (float)Math.Cos(angle));                          lucy.GetInstance(i).SetPosition(cpos + disp);                      }*/                      for(int x = 0; x < 10; x++)                          for(int y = 0; y < 10; y++)                          {                              int i = y + x * 10;                              lucy.GetInstance(i).SetPosition(cpos + new Vector3(x - 5' 0' y - 5) * 2 );                          }                    }                  if(eargs.Key == OpenTK.Input.Key.Up)                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale += 0.1f;                  if(eargs.Key == OpenTK.Input.Key.Down)                  {                      Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale -= 0.1f;                      if(Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale < 0.02)                          Game.DisplayAdapter.MainRenderer.CubeMaps[index].FalloffScale = 0.02f;                  }              };
Magic Number,ShadowsTester,DynamicCubeMapController,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\DynamicCubeMapController.cs,Create,The following statement contains a magic number: Game.OnBeforeDraw += (od' dsd) =>              {                  //  for(int i = 0; i < 23; i++)                  // {                  //  if((lucy.GetInstance(i).GetPosition() - Game.DisplayAdapter.MainRenderer.CubeMaps[i].Position).Length > 0.01f)                  // {                  var cubes = Game.DisplayAdapter.MainRenderer.CubeMaps;                  if(!livemode)                  {                      for(int iz = 0; iz < cnt; iz++)                      {                          if((lucy.GetInstance(iz).GetPosition() - cubes[iz].Position).Length > 0.01f)                          {                              //internalMapping[cubes[iz]].Clear();                          }                      }                      for(int iz = 0; iz < cnt; iz++)                      {                          if((lucy.GetInstance(iz).GetPosition() - cubes[iz].Position).Length > 0.01f)                          {                              Game.World.CurrentlyRenderedCubeMap = iz;                              pp.CubeMaps = cubes;                              cubes[iz].Position = lucy.GetInstance(iz).GetPosition();                              internalMapping[cubes[iz]].SetPosition(lucy.GetInstance(iz).GetPosition());                              pp.RenderToCubeMapFramebuffer(internalMapping[cubes[iz]]);                              internalMapping[cubes[iz]].GenerateMipMaps();                              Game.World.CurrentlyRenderedCubeMap = -1;                          }                      }                        return;                  }                  int i = ix++;                  if(ix >= cnt)                      ix = 0;                  Game.World.CurrentlyRenderedCubeMap = i;                  pp.CubeMaps = cubes;                  cubes[i].Position = lucy.GetInstance(i).GetPosition();                  internalMapping[cubes[i]].SetPosition(lucy.GetInstance(i).GetPosition());                  pp.RenderToCubeMapFramebuffer(internalMapping[cubes[i]]);                  internalMapping[cubes[i]].GenerateMipMaps();                  Game.World.CurrentlyRenderedCubeMap = -1;                  //  }                  //  }              };
Magic Number,ShadowsTester,DynamicCubeMapController,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\DynamicCubeMapController.cs,Create,The following statement contains a magic number: Game.OnBeforeDraw += (od' dsd) =>              {                  //  for(int i = 0; i < 23; i++)                  // {                  //  if((lucy.GetInstance(i).GetPosition() - Game.DisplayAdapter.MainRenderer.CubeMaps[i].Position).Length > 0.01f)                  // {                  var cubes = Game.DisplayAdapter.MainRenderer.CubeMaps;                  if(!livemode)                  {                      for(int iz = 0; iz < cnt; iz++)                      {                          if((lucy.GetInstance(iz).GetPosition() - cubes[iz].Position).Length > 0.01f)                          {                              //internalMapping[cubes[iz]].Clear();                          }                      }                      for(int iz = 0; iz < cnt; iz++)                      {                          if((lucy.GetInstance(iz).GetPosition() - cubes[iz].Position).Length > 0.01f)                          {                              Game.World.CurrentlyRenderedCubeMap = iz;                              pp.CubeMaps = cubes;                              cubes[iz].Position = lucy.GetInstance(iz).GetPosition();                              internalMapping[cubes[iz]].SetPosition(lucy.GetInstance(iz).GetPosition());                              pp.RenderToCubeMapFramebuffer(internalMapping[cubes[iz]]);                              internalMapping[cubes[iz]].GenerateMipMaps();                              Game.World.CurrentlyRenderedCubeMap = -1;                          }                      }                        return;                  }                  int i = ix++;                  if(ix >= cnt)                      ix = 0;                  Game.World.CurrentlyRenderedCubeMap = i;                  pp.CubeMaps = cubes;                  cubes[i].Position = lucy.GetInstance(i).GetPosition();                  internalMapping[cubes[i]].SetPosition(lucy.GetInstance(i).GetPosition());                  pp.RenderToCubeMapFramebuffer(internalMapping[cubes[i]]);                  internalMapping[cubes[i]].GenerateMipMaps();                  Game.World.CurrentlyRenderedCubeMap = -1;                  //  }                  //  }              };
Magic Number,ShadowsTester,HotelScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\HotelScene.cs,HotelScene,The following statement contains a magic number: Game.Invoke(() =>              {                    var unknownMaterial = new GenericMaterial(new Vector3(1));                    var lines = System.IO.File.ReadAllLines(Media.Get("scene.scn"));                  int linec = lines.Length;                    var texmap = new Dictionary<string' TexInfo>();                  var matermap = new Dictionary<string' GenericMaterial>();                    var mat = new GenericMaterial();                  var trans = Matrix4.Identity;                  var glossyNtex = new Texture(Media.Get("200_norm.jpg"));                  var fussyNtex = new Texture(Media.Get("174_norm.jpg"));                    for(int i = 0; i < linec; i++)                  {                      var line = lines[i];                      if(line.Contains("scene.textures.texture"))                      {                          var sdot = line.Split('.');                          string keyname = sdot[2];                          if(!texmap.ContainsKey(keyname))                              texmap.Add(keyname' new TexInfo());                          if(line.Contains(keyname + ".gain"))                          {                              var vals = line.Split('=')[1];                              vals.Trim();                              texmap[keyname].Gain = StringToFloat(vals);                          }                          if(line.Contains(keyname + ".value"))                          {                              var vals = line.Split('=')[1].Trim().Split(' ');                              if(vals.Length >= 3)                                  texmap[keyname].Value = new Vector3(StringToFloat(vals[0])' StringToFloat(vals[1])' StringToFloat(vals[2]));                              else if(vals.Length == 1)                                  texmap[keyname].Value = new Vector3(StringToFloat(vals[0]));                          }                          if(line.Contains(keyname + ".uvscale"))                          {                              var vals = line.Split('=')[1].Trim().Split(' ');                              if(vals.Length >= 2)                                  texmap[keyname].UVScale = new Vector2(StringToFloat(vals[0])' StringToFloat(vals[1]));                              else if(vals.Length == 1)                                  texmap[keyname].UVScale = new Vector2(StringToFloat(vals[0]));                          }                          if(line.Contains(keyname + ".file"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              texmap[keyname].TexFile = vals.Replace(".exr"' ".png");                          }                          if(line.Contains(keyname + ".type"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              texmap[keyname].Type = vals;                          }                      }                      else if(line.Contains("scene.materials.material"))                      {                          var sdot = line.Split('.');                          string keyname = sdot[2];                          if(!matermap.ContainsKey(keyname))                              matermap.Add(keyname' new GenericMaterial());                          if(line.Contains(keyname + ".d ") || line.Contains(keyname + ".kd "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                    //matermap[keyname].                                  //matermap[keyname].if(texmap.ContainsKey(vals))                                  {                                      if(texmap[vals].TexFile.Length > 1)                                      {                                          matermap[keyname].DiffuseTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                      }                                      else                                      {                                          matermap[keyname].DiffuseColor = texmap[vals].Value;                                      }                                      // matermap[keyname].InvertUVYAxis = texmap[vals].InvertUVX || texmap[vals].InvertUVY;                                  }                              }                          }                          if(line.Contains(keyname + ".uroughness"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].RoughnessTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].Roughness = Math.Max(1f' texmap[vals].Value.X);                                  }                              }                          }                          if(line.Contains(keyname + ".vroughness"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].RoughnessTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].DiffuseColor = texmap[vals].Value;                                  }                              }                          }                          if(line.Contains(keyname + ".n "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].NormalsTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                              }                          }                          if(line.Contains(keyname + ".k ") || line.Contains(keyname + ".ks "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].SpecularTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].SpecularColor = texmap[vals].Value;                                  }                              }                          }                      }                      else if(line.Contains(".ply"))                      {                          var s = line.Split('=')[1];                          s = s.Trim(' '' '"');                          var ply = Object3dManager.LoadFromRaw(Media.Get(System.IO.Path.GetFileName(s) + ".raw"));                          if(mat.NormalsTexture == null && mat.RoughnessTexture == null)                          {                              //     mat.NormalsTexture = mat.Roughness < 0.3 ? glossyNtex : fussyNtex;                              //     mat.NormalMapScale = 100.0f;                          }                          var mesh = Mesh3d.Create(new Object3dInfo(ply.Vertices)' mat);                          trans.Transpose();                          trans = trans * Matrix4.CreateScale(0.6f) * Matrix4.CreateRotationX(MathHelper.DegreesToRadians(-90.0f));                          mesh.GetInstance(0).Transformation.SetPosition(trans.ExtractTranslation());                          mesh.GetInstance(0).Transformation.SetOrientation(trans.ExtractRotation());                          mesh.GetInstance(0).Transformation.SetScale(trans.ExtractScale());                          scene.Add(mesh);                          mat = new GenericMaterial();                          trans = Matrix4.Identity;                      }                      else if(line.Contains(".material"))                      {                          var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                          if(matermap.ContainsKey(vals))                          {                              mat = matermap[vals];                          }                      }                      if(line.Contains(".transformation"))                      {                          var s = line.Split('=')[1];                          s = s.Trim(' ');                          var numbers = s.Split(' ');                          for(int f = 0; f < numbers.Length; f++)                          {                              trans[f % 4' (int)Math.Floor((float)f / 4)] = StringToFloat(numbers[f]);                          }                      }                  }                    //DynamicCubeMapController.Create();                  DynamicCubeMapController.Create();              });
Magic Number,ShadowsTester,HotelScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\HotelScene.cs,HotelScene,The following statement contains a magic number: Game.Invoke(() =>              {                    var unknownMaterial = new GenericMaterial(new Vector3(1));                    var lines = System.IO.File.ReadAllLines(Media.Get("scene.scn"));                  int linec = lines.Length;                    var texmap = new Dictionary<string' TexInfo>();                  var matermap = new Dictionary<string' GenericMaterial>();                    var mat = new GenericMaterial();                  var trans = Matrix4.Identity;                  var glossyNtex = new Texture(Media.Get("200_norm.jpg"));                  var fussyNtex = new Texture(Media.Get("174_norm.jpg"));                    for(int i = 0; i < linec; i++)                  {                      var line = lines[i];                      if(line.Contains("scene.textures.texture"))                      {                          var sdot = line.Split('.');                          string keyname = sdot[2];                          if(!texmap.ContainsKey(keyname))                              texmap.Add(keyname' new TexInfo());                          if(line.Contains(keyname + ".gain"))                          {                              var vals = line.Split('=')[1];                              vals.Trim();                              texmap[keyname].Gain = StringToFloat(vals);                          }                          if(line.Contains(keyname + ".value"))                          {                              var vals = line.Split('=')[1].Trim().Split(' ');                              if(vals.Length >= 3)                                  texmap[keyname].Value = new Vector3(StringToFloat(vals[0])' StringToFloat(vals[1])' StringToFloat(vals[2]));                              else if(vals.Length == 1)                                  texmap[keyname].Value = new Vector3(StringToFloat(vals[0]));                          }                          if(line.Contains(keyname + ".uvscale"))                          {                              var vals = line.Split('=')[1].Trim().Split(' ');                              if(vals.Length >= 2)                                  texmap[keyname].UVScale = new Vector2(StringToFloat(vals[0])' StringToFloat(vals[1]));                              else if(vals.Length == 1)                                  texmap[keyname].UVScale = new Vector2(StringToFloat(vals[0]));                          }                          if(line.Contains(keyname + ".file"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              texmap[keyname].TexFile = vals.Replace(".exr"' ".png");                          }                          if(line.Contains(keyname + ".type"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              texmap[keyname].Type = vals;                          }                      }                      else if(line.Contains("scene.materials.material"))                      {                          var sdot = line.Split('.');                          string keyname = sdot[2];                          if(!matermap.ContainsKey(keyname))                              matermap.Add(keyname' new GenericMaterial());                          if(line.Contains(keyname + ".d ") || line.Contains(keyname + ".kd "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                    //matermap[keyname].                                  //matermap[keyname].if(texmap.ContainsKey(vals))                                  {                                      if(texmap[vals].TexFile.Length > 1)                                      {                                          matermap[keyname].DiffuseTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                      }                                      else                                      {                                          matermap[keyname].DiffuseColor = texmap[vals].Value;                                      }                                      // matermap[keyname].InvertUVYAxis = texmap[vals].InvertUVX || texmap[vals].InvertUVY;                                  }                              }                          }                          if(line.Contains(keyname + ".uroughness"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].RoughnessTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].Roughness = Math.Max(1f' texmap[vals].Value.X);                                  }                              }                          }                          if(line.Contains(keyname + ".vroughness"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].RoughnessTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].DiffuseColor = texmap[vals].Value;                                  }                              }                          }                          if(line.Contains(keyname + ".n "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].NormalsTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                              }                          }                          if(line.Contains(keyname + ".k ") || line.Contains(keyname + ".ks "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].SpecularTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].SpecularColor = texmap[vals].Value;                                  }                              }                          }                      }                      else if(line.Contains(".ply"))                      {                          var s = line.Split('=')[1];                          s = s.Trim(' '' '"');                          var ply = Object3dManager.LoadFromRaw(Media.Get(System.IO.Path.GetFileName(s) + ".raw"));                          if(mat.NormalsTexture == null && mat.RoughnessTexture == null)                          {                              //     mat.NormalsTexture = mat.Roughness < 0.3 ? glossyNtex : fussyNtex;                              //     mat.NormalMapScale = 100.0f;                          }                          var mesh = Mesh3d.Create(new Object3dInfo(ply.Vertices)' mat);                          trans.Transpose();                          trans = trans * Matrix4.CreateScale(0.6f) * Matrix4.CreateRotationX(MathHelper.DegreesToRadians(-90.0f));                          mesh.GetInstance(0).Transformation.SetPosition(trans.ExtractTranslation());                          mesh.GetInstance(0).Transformation.SetOrientation(trans.ExtractRotation());                          mesh.GetInstance(0).Transformation.SetScale(trans.ExtractScale());                          scene.Add(mesh);                          mat = new GenericMaterial();                          trans = Matrix4.Identity;                      }                      else if(line.Contains(".material"))                      {                          var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                          if(matermap.ContainsKey(vals))                          {                              mat = matermap[vals];                          }                      }                      if(line.Contains(".transformation"))                      {                          var s = line.Split('=')[1];                          s = s.Trim(' ');                          var numbers = s.Split(' ');                          for(int f = 0; f < numbers.Length; f++)                          {                              trans[f % 4' (int)Math.Floor((float)f / 4)] = StringToFloat(numbers[f]);                          }                      }                  }                    //DynamicCubeMapController.Create();                  DynamicCubeMapController.Create();              });
Magic Number,ShadowsTester,HotelScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\HotelScene.cs,HotelScene,The following statement contains a magic number: Game.Invoke(() =>              {                    var unknownMaterial = new GenericMaterial(new Vector3(1));                    var lines = System.IO.File.ReadAllLines(Media.Get("scene.scn"));                  int linec = lines.Length;                    var texmap = new Dictionary<string' TexInfo>();                  var matermap = new Dictionary<string' GenericMaterial>();                    var mat = new GenericMaterial();                  var trans = Matrix4.Identity;                  var glossyNtex = new Texture(Media.Get("200_norm.jpg"));                  var fussyNtex = new Texture(Media.Get("174_norm.jpg"));                    for(int i = 0; i < linec; i++)                  {                      var line = lines[i];                      if(line.Contains("scene.textures.texture"))                      {                          var sdot = line.Split('.');                          string keyname = sdot[2];                          if(!texmap.ContainsKey(keyname))                              texmap.Add(keyname' new TexInfo());                          if(line.Contains(keyname + ".gain"))                          {                              var vals = line.Split('=')[1];                              vals.Trim();                              texmap[keyname].Gain = StringToFloat(vals);                          }                          if(line.Contains(keyname + ".value"))                          {                              var vals = line.Split('=')[1].Trim().Split(' ');                              if(vals.Length >= 3)                                  texmap[keyname].Value = new Vector3(StringToFloat(vals[0])' StringToFloat(vals[1])' StringToFloat(vals[2]));                              else if(vals.Length == 1)                                  texmap[keyname].Value = new Vector3(StringToFloat(vals[0]));                          }                          if(line.Contains(keyname + ".uvscale"))                          {                              var vals = line.Split('=')[1].Trim().Split(' ');                              if(vals.Length >= 2)                                  texmap[keyname].UVScale = new Vector2(StringToFloat(vals[0])' StringToFloat(vals[1]));                              else if(vals.Length == 1)                                  texmap[keyname].UVScale = new Vector2(StringToFloat(vals[0]));                          }                          if(line.Contains(keyname + ".file"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              texmap[keyname].TexFile = vals.Replace(".exr"' ".png");                          }                          if(line.Contains(keyname + ".type"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              texmap[keyname].Type = vals;                          }                      }                      else if(line.Contains("scene.materials.material"))                      {                          var sdot = line.Split('.');                          string keyname = sdot[2];                          if(!matermap.ContainsKey(keyname))                              matermap.Add(keyname' new GenericMaterial());                          if(line.Contains(keyname + ".d ") || line.Contains(keyname + ".kd "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                    //matermap[keyname].                                  //matermap[keyname].if(texmap.ContainsKey(vals))                                  {                                      if(texmap[vals].TexFile.Length > 1)                                      {                                          matermap[keyname].DiffuseTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                      }                                      else                                      {                                          matermap[keyname].DiffuseColor = texmap[vals].Value;                                      }                                      // matermap[keyname].InvertUVYAxis = texmap[vals].InvertUVX || texmap[vals].InvertUVY;                                  }                              }                          }                          if(line.Contains(keyname + ".uroughness"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].RoughnessTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].Roughness = Math.Max(1f' texmap[vals].Value.X);                                  }                              }                          }                          if(line.Contains(keyname + ".vroughness"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].RoughnessTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].DiffuseColor = texmap[vals].Value;                                  }                              }                          }                          if(line.Contains(keyname + ".n "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].NormalsTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                              }                          }                          if(line.Contains(keyname + ".k ") || line.Contains(keyname + ".ks "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].SpecularTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].SpecularColor = texmap[vals].Value;                                  }                              }                          }                      }                      else if(line.Contains(".ply"))                      {                          var s = line.Split('=')[1];                          s = s.Trim(' '' '"');                          var ply = Object3dManager.LoadFromRaw(Media.Get(System.IO.Path.GetFileName(s) + ".raw"));                          if(mat.NormalsTexture == null && mat.RoughnessTexture == null)                          {                              //     mat.NormalsTexture = mat.Roughness < 0.3 ? glossyNtex : fussyNtex;                              //     mat.NormalMapScale = 100.0f;                          }                          var mesh = Mesh3d.Create(new Object3dInfo(ply.Vertices)' mat);                          trans.Transpose();                          trans = trans * Matrix4.CreateScale(0.6f) * Matrix4.CreateRotationX(MathHelper.DegreesToRadians(-90.0f));                          mesh.GetInstance(0).Transformation.SetPosition(trans.ExtractTranslation());                          mesh.GetInstance(0).Transformation.SetOrientation(trans.ExtractRotation());                          mesh.GetInstance(0).Transformation.SetScale(trans.ExtractScale());                          scene.Add(mesh);                          mat = new GenericMaterial();                          trans = Matrix4.Identity;                      }                      else if(line.Contains(".material"))                      {                          var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                          if(matermap.ContainsKey(vals))                          {                              mat = matermap[vals];                          }                      }                      if(line.Contains(".transformation"))                      {                          var s = line.Split('=')[1];                          s = s.Trim(' ');                          var numbers = s.Split(' ');                          for(int f = 0; f < numbers.Length; f++)                          {                              trans[f % 4' (int)Math.Floor((float)f / 4)] = StringToFloat(numbers[f]);                          }                      }                  }                    //DynamicCubeMapController.Create();                  DynamicCubeMapController.Create();              });
Magic Number,ShadowsTester,HotelScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\HotelScene.cs,HotelScene,The following statement contains a magic number: Game.Invoke(() =>              {                    var unknownMaterial = new GenericMaterial(new Vector3(1));                    var lines = System.IO.File.ReadAllLines(Media.Get("scene.scn"));                  int linec = lines.Length;                    var texmap = new Dictionary<string' TexInfo>();                  var matermap = new Dictionary<string' GenericMaterial>();                    var mat = new GenericMaterial();                  var trans = Matrix4.Identity;                  var glossyNtex = new Texture(Media.Get("200_norm.jpg"));                  var fussyNtex = new Texture(Media.Get("174_norm.jpg"));                    for(int i = 0; i < linec; i++)                  {                      var line = lines[i];                      if(line.Contains("scene.textures.texture"))                      {                          var sdot = line.Split('.');                          string keyname = sdot[2];                          if(!texmap.ContainsKey(keyname))                              texmap.Add(keyname' new TexInfo());                          if(line.Contains(keyname + ".gain"))                          {                              var vals = line.Split('=')[1];                              vals.Trim();                              texmap[keyname].Gain = StringToFloat(vals);                          }                          if(line.Contains(keyname + ".value"))                          {                              var vals = line.Split('=')[1].Trim().Split(' ');                              if(vals.Length >= 3)                                  texmap[keyname].Value = new Vector3(StringToFloat(vals[0])' StringToFloat(vals[1])' StringToFloat(vals[2]));                              else if(vals.Length == 1)                                  texmap[keyname].Value = new Vector3(StringToFloat(vals[0]));                          }                          if(line.Contains(keyname + ".uvscale"))                          {                              var vals = line.Split('=')[1].Trim().Split(' ');                              if(vals.Length >= 2)                                  texmap[keyname].UVScale = new Vector2(StringToFloat(vals[0])' StringToFloat(vals[1]));                              else if(vals.Length == 1)                                  texmap[keyname].UVScale = new Vector2(StringToFloat(vals[0]));                          }                          if(line.Contains(keyname + ".file"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              texmap[keyname].TexFile = vals.Replace(".exr"' ".png");                          }                          if(line.Contains(keyname + ".type"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              texmap[keyname].Type = vals;                          }                      }                      else if(line.Contains("scene.materials.material"))                      {                          var sdot = line.Split('.');                          string keyname = sdot[2];                          if(!matermap.ContainsKey(keyname))                              matermap.Add(keyname' new GenericMaterial());                          if(line.Contains(keyname + ".d ") || line.Contains(keyname + ".kd "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                    //matermap[keyname].                                  //matermap[keyname].if(texmap.ContainsKey(vals))                                  {                                      if(texmap[vals].TexFile.Length > 1)                                      {                                          matermap[keyname].DiffuseTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                      }                                      else                                      {                                          matermap[keyname].DiffuseColor = texmap[vals].Value;                                      }                                      // matermap[keyname].InvertUVYAxis = texmap[vals].InvertUVX || texmap[vals].InvertUVY;                                  }                              }                          }                          if(line.Contains(keyname + ".uroughness"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].RoughnessTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].Roughness = Math.Max(1f' texmap[vals].Value.X);                                  }                              }                          }                          if(line.Contains(keyname + ".vroughness"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].RoughnessTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].DiffuseColor = texmap[vals].Value;                                  }                              }                          }                          if(line.Contains(keyname + ".n "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].NormalsTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                              }                          }                          if(line.Contains(keyname + ".k ") || line.Contains(keyname + ".ks "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].SpecularTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].SpecularColor = texmap[vals].Value;                                  }                              }                          }                      }                      else if(line.Contains(".ply"))                      {                          var s = line.Split('=')[1];                          s = s.Trim(' '' '"');                          var ply = Object3dManager.LoadFromRaw(Media.Get(System.IO.Path.GetFileName(s) + ".raw"));                          if(mat.NormalsTexture == null && mat.RoughnessTexture == null)                          {                              //     mat.NormalsTexture = mat.Roughness < 0.3 ? glossyNtex : fussyNtex;                              //     mat.NormalMapScale = 100.0f;                          }                          var mesh = Mesh3d.Create(new Object3dInfo(ply.Vertices)' mat);                          trans.Transpose();                          trans = trans * Matrix4.CreateScale(0.6f) * Matrix4.CreateRotationX(MathHelper.DegreesToRadians(-90.0f));                          mesh.GetInstance(0).Transformation.SetPosition(trans.ExtractTranslation());                          mesh.GetInstance(0).Transformation.SetOrientation(trans.ExtractRotation());                          mesh.GetInstance(0).Transformation.SetScale(trans.ExtractScale());                          scene.Add(mesh);                          mat = new GenericMaterial();                          trans = Matrix4.Identity;                      }                      else if(line.Contains(".material"))                      {                          var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                          if(matermap.ContainsKey(vals))                          {                              mat = matermap[vals];                          }                      }                      if(line.Contains(".transformation"))                      {                          var s = line.Split('=')[1];                          s = s.Trim(' ');                          var numbers = s.Split(' ');                          for(int f = 0; f < numbers.Length; f++)                          {                              trans[f % 4' (int)Math.Floor((float)f / 4)] = StringToFloat(numbers[f]);                          }                      }                  }                    //DynamicCubeMapController.Create();                  DynamicCubeMapController.Create();              });
Magic Number,ShadowsTester,HotelScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\HotelScene.cs,HotelScene,The following statement contains a magic number: Game.Invoke(() =>              {                    var unknownMaterial = new GenericMaterial(new Vector3(1));                    var lines = System.IO.File.ReadAllLines(Media.Get("scene.scn"));                  int linec = lines.Length;                    var texmap = new Dictionary<string' TexInfo>();                  var matermap = new Dictionary<string' GenericMaterial>();                    var mat = new GenericMaterial();                  var trans = Matrix4.Identity;                  var glossyNtex = new Texture(Media.Get("200_norm.jpg"));                  var fussyNtex = new Texture(Media.Get("174_norm.jpg"));                    for(int i = 0; i < linec; i++)                  {                      var line = lines[i];                      if(line.Contains("scene.textures.texture"))                      {                          var sdot = line.Split('.');                          string keyname = sdot[2];                          if(!texmap.ContainsKey(keyname))                              texmap.Add(keyname' new TexInfo());                          if(line.Contains(keyname + ".gain"))                          {                              var vals = line.Split('=')[1];                              vals.Trim();                              texmap[keyname].Gain = StringToFloat(vals);                          }                          if(line.Contains(keyname + ".value"))                          {                              var vals = line.Split('=')[1].Trim().Split(' ');                              if(vals.Length >= 3)                                  texmap[keyname].Value = new Vector3(StringToFloat(vals[0])' StringToFloat(vals[1])' StringToFloat(vals[2]));                              else if(vals.Length == 1)                                  texmap[keyname].Value = new Vector3(StringToFloat(vals[0]));                          }                          if(line.Contains(keyname + ".uvscale"))                          {                              var vals = line.Split('=')[1].Trim().Split(' ');                              if(vals.Length >= 2)                                  texmap[keyname].UVScale = new Vector2(StringToFloat(vals[0])' StringToFloat(vals[1]));                              else if(vals.Length == 1)                                  texmap[keyname].UVScale = new Vector2(StringToFloat(vals[0]));                          }                          if(line.Contains(keyname + ".file"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              texmap[keyname].TexFile = vals.Replace(".exr"' ".png");                          }                          if(line.Contains(keyname + ".type"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              texmap[keyname].Type = vals;                          }                      }                      else if(line.Contains("scene.materials.material"))                      {                          var sdot = line.Split('.');                          string keyname = sdot[2];                          if(!matermap.ContainsKey(keyname))                              matermap.Add(keyname' new GenericMaterial());                          if(line.Contains(keyname + ".d ") || line.Contains(keyname + ".kd "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                    //matermap[keyname].                                  //matermap[keyname].if(texmap.ContainsKey(vals))                                  {                                      if(texmap[vals].TexFile.Length > 1)                                      {                                          matermap[keyname].DiffuseTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                      }                                      else                                      {                                          matermap[keyname].DiffuseColor = texmap[vals].Value;                                      }                                      // matermap[keyname].InvertUVYAxis = texmap[vals].InvertUVX || texmap[vals].InvertUVY;                                  }                              }                          }                          if(line.Contains(keyname + ".uroughness"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].RoughnessTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].Roughness = Math.Max(1f' texmap[vals].Value.X);                                  }                              }                          }                          if(line.Contains(keyname + ".vroughness"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].RoughnessTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].DiffuseColor = texmap[vals].Value;                                  }                              }                          }                          if(line.Contains(keyname + ".n "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].NormalsTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                              }                          }                          if(line.Contains(keyname + ".k ") || line.Contains(keyname + ".ks "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].SpecularTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].SpecularColor = texmap[vals].Value;                                  }                              }                          }                      }                      else if(line.Contains(".ply"))                      {                          var s = line.Split('=')[1];                          s = s.Trim(' '' '"');                          var ply = Object3dManager.LoadFromRaw(Media.Get(System.IO.Path.GetFileName(s) + ".raw"));                          if(mat.NormalsTexture == null && mat.RoughnessTexture == null)                          {                              //     mat.NormalsTexture = mat.Roughness < 0.3 ? glossyNtex : fussyNtex;                              //     mat.NormalMapScale = 100.0f;                          }                          var mesh = Mesh3d.Create(new Object3dInfo(ply.Vertices)' mat);                          trans.Transpose();                          trans = trans * Matrix4.CreateScale(0.6f) * Matrix4.CreateRotationX(MathHelper.DegreesToRadians(-90.0f));                          mesh.GetInstance(0).Transformation.SetPosition(trans.ExtractTranslation());                          mesh.GetInstance(0).Transformation.SetOrientation(trans.ExtractRotation());                          mesh.GetInstance(0).Transformation.SetScale(trans.ExtractScale());                          scene.Add(mesh);                          mat = new GenericMaterial();                          trans = Matrix4.Identity;                      }                      else if(line.Contains(".material"))                      {                          var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                          if(matermap.ContainsKey(vals))                          {                              mat = matermap[vals];                          }                      }                      if(line.Contains(".transformation"))                      {                          var s = line.Split('=')[1];                          s = s.Trim(' ');                          var numbers = s.Split(' ');                          for(int f = 0; f < numbers.Length; f++)                          {                              trans[f % 4' (int)Math.Floor((float)f / 4)] = StringToFloat(numbers[f]);                          }                      }                  }                    //DynamicCubeMapController.Create();                  DynamicCubeMapController.Create();              });
Magic Number,ShadowsTester,HotelScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\HotelScene.cs,HotelScene,The following statement contains a magic number: Game.Invoke(() =>              {                    var unknownMaterial = new GenericMaterial(new Vector3(1));                    var lines = System.IO.File.ReadAllLines(Media.Get("scene.scn"));                  int linec = lines.Length;                    var texmap = new Dictionary<string' TexInfo>();                  var matermap = new Dictionary<string' GenericMaterial>();                    var mat = new GenericMaterial();                  var trans = Matrix4.Identity;                  var glossyNtex = new Texture(Media.Get("200_norm.jpg"));                  var fussyNtex = new Texture(Media.Get("174_norm.jpg"));                    for(int i = 0; i < linec; i++)                  {                      var line = lines[i];                      if(line.Contains("scene.textures.texture"))                      {                          var sdot = line.Split('.');                          string keyname = sdot[2];                          if(!texmap.ContainsKey(keyname))                              texmap.Add(keyname' new TexInfo());                          if(line.Contains(keyname + ".gain"))                          {                              var vals = line.Split('=')[1];                              vals.Trim();                              texmap[keyname].Gain = StringToFloat(vals);                          }                          if(line.Contains(keyname + ".value"))                          {                              var vals = line.Split('=')[1].Trim().Split(' ');                              if(vals.Length >= 3)                                  texmap[keyname].Value = new Vector3(StringToFloat(vals[0])' StringToFloat(vals[1])' StringToFloat(vals[2]));                              else if(vals.Length == 1)                                  texmap[keyname].Value = new Vector3(StringToFloat(vals[0]));                          }                          if(line.Contains(keyname + ".uvscale"))                          {                              var vals = line.Split('=')[1].Trim().Split(' ');                              if(vals.Length >= 2)                                  texmap[keyname].UVScale = new Vector2(StringToFloat(vals[0])' StringToFloat(vals[1]));                              else if(vals.Length == 1)                                  texmap[keyname].UVScale = new Vector2(StringToFloat(vals[0]));                          }                          if(line.Contains(keyname + ".file"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              texmap[keyname].TexFile = vals.Replace(".exr"' ".png");                          }                          if(line.Contains(keyname + ".type"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              texmap[keyname].Type = vals;                          }                      }                      else if(line.Contains("scene.materials.material"))                      {                          var sdot = line.Split('.');                          string keyname = sdot[2];                          if(!matermap.ContainsKey(keyname))                              matermap.Add(keyname' new GenericMaterial());                          if(line.Contains(keyname + ".d ") || line.Contains(keyname + ".kd "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                    //matermap[keyname].                                  //matermap[keyname].if(texmap.ContainsKey(vals))                                  {                                      if(texmap[vals].TexFile.Length > 1)                                      {                                          matermap[keyname].DiffuseTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                      }                                      else                                      {                                          matermap[keyname].DiffuseColor = texmap[vals].Value;                                      }                                      // matermap[keyname].InvertUVYAxis = texmap[vals].InvertUVX || texmap[vals].InvertUVY;                                  }                              }                          }                          if(line.Contains(keyname + ".uroughness"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].RoughnessTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].Roughness = Math.Max(1f' texmap[vals].Value.X);                                  }                              }                          }                          if(line.Contains(keyname + ".vroughness"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].RoughnessTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].DiffuseColor = texmap[vals].Value;                                  }                              }                          }                          if(line.Contains(keyname + ".n "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].NormalsTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                              }                          }                          if(line.Contains(keyname + ".k ") || line.Contains(keyname + ".ks "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].SpecularTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].SpecularColor = texmap[vals].Value;                                  }                              }                          }                      }                      else if(line.Contains(".ply"))                      {                          var s = line.Split('=')[1];                          s = s.Trim(' '' '"');                          var ply = Object3dManager.LoadFromRaw(Media.Get(System.IO.Path.GetFileName(s) + ".raw"));                          if(mat.NormalsTexture == null && mat.RoughnessTexture == null)                          {                              //     mat.NormalsTexture = mat.Roughness < 0.3 ? glossyNtex : fussyNtex;                              //     mat.NormalMapScale = 100.0f;                          }                          var mesh = Mesh3d.Create(new Object3dInfo(ply.Vertices)' mat);                          trans.Transpose();                          trans = trans * Matrix4.CreateScale(0.6f) * Matrix4.CreateRotationX(MathHelper.DegreesToRadians(-90.0f));                          mesh.GetInstance(0).Transformation.SetPosition(trans.ExtractTranslation());                          mesh.GetInstance(0).Transformation.SetOrientation(trans.ExtractRotation());                          mesh.GetInstance(0).Transformation.SetScale(trans.ExtractScale());                          scene.Add(mesh);                          mat = new GenericMaterial();                          trans = Matrix4.Identity;                      }                      else if(line.Contains(".material"))                      {                          var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                          if(matermap.ContainsKey(vals))                          {                              mat = matermap[vals];                          }                      }                      if(line.Contains(".transformation"))                      {                          var s = line.Split('=')[1];                          s = s.Trim(' ');                          var numbers = s.Split(' ');                          for(int f = 0; f < numbers.Length; f++)                          {                              trans[f % 4' (int)Math.Floor((float)f / 4)] = StringToFloat(numbers[f]);                          }                      }                  }                    //DynamicCubeMapController.Create();                  DynamicCubeMapController.Create();              });
Magic Number,ShadowsTester,HotelScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\HotelScene.cs,HotelScene,The following statement contains a magic number: Game.Invoke(() =>              {                    var unknownMaterial = new GenericMaterial(new Vector3(1));                    var lines = System.IO.File.ReadAllLines(Media.Get("scene.scn"));                  int linec = lines.Length;                    var texmap = new Dictionary<string' TexInfo>();                  var matermap = new Dictionary<string' GenericMaterial>();                    var mat = new GenericMaterial();                  var trans = Matrix4.Identity;                  var glossyNtex = new Texture(Media.Get("200_norm.jpg"));                  var fussyNtex = new Texture(Media.Get("174_norm.jpg"));                    for(int i = 0; i < linec; i++)                  {                      var line = lines[i];                      if(line.Contains("scene.textures.texture"))                      {                          var sdot = line.Split('.');                          string keyname = sdot[2];                          if(!texmap.ContainsKey(keyname))                              texmap.Add(keyname' new TexInfo());                          if(line.Contains(keyname + ".gain"))                          {                              var vals = line.Split('=')[1];                              vals.Trim();                              texmap[keyname].Gain = StringToFloat(vals);                          }                          if(line.Contains(keyname + ".value"))                          {                              var vals = line.Split('=')[1].Trim().Split(' ');                              if(vals.Length >= 3)                                  texmap[keyname].Value = new Vector3(StringToFloat(vals[0])' StringToFloat(vals[1])' StringToFloat(vals[2]));                              else if(vals.Length == 1)                                  texmap[keyname].Value = new Vector3(StringToFloat(vals[0]));                          }                          if(line.Contains(keyname + ".uvscale"))                          {                              var vals = line.Split('=')[1].Trim().Split(' ');                              if(vals.Length >= 2)                                  texmap[keyname].UVScale = new Vector2(StringToFloat(vals[0])' StringToFloat(vals[1]));                              else if(vals.Length == 1)                                  texmap[keyname].UVScale = new Vector2(StringToFloat(vals[0]));                          }                          if(line.Contains(keyname + ".file"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              texmap[keyname].TexFile = vals.Replace(".exr"' ".png");                          }                          if(line.Contains(keyname + ".type"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              texmap[keyname].Type = vals;                          }                      }                      else if(line.Contains("scene.materials.material"))                      {                          var sdot = line.Split('.');                          string keyname = sdot[2];                          if(!matermap.ContainsKey(keyname))                              matermap.Add(keyname' new GenericMaterial());                          if(line.Contains(keyname + ".d ") || line.Contains(keyname + ".kd "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                    //matermap[keyname].                                  //matermap[keyname].if(texmap.ContainsKey(vals))                                  {                                      if(texmap[vals].TexFile.Length > 1)                                      {                                          matermap[keyname].DiffuseTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                      }                                      else                                      {                                          matermap[keyname].DiffuseColor = texmap[vals].Value;                                      }                                      // matermap[keyname].InvertUVYAxis = texmap[vals].InvertUVX || texmap[vals].InvertUVY;                                  }                              }                          }                          if(line.Contains(keyname + ".uroughness"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].RoughnessTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].Roughness = Math.Max(1f' texmap[vals].Value.X);                                  }                              }                          }                          if(line.Contains(keyname + ".vroughness"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].RoughnessTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].DiffuseColor = texmap[vals].Value;                                  }                              }                          }                          if(line.Contains(keyname + ".n "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].NormalsTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                              }                          }                          if(line.Contains(keyname + ".k ") || line.Contains(keyname + ".ks "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].SpecularTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].SpecularColor = texmap[vals].Value;                                  }                              }                          }                      }                      else if(line.Contains(".ply"))                      {                          var s = line.Split('=')[1];                          s = s.Trim(' '' '"');                          var ply = Object3dManager.LoadFromRaw(Media.Get(System.IO.Path.GetFileName(s) + ".raw"));                          if(mat.NormalsTexture == null && mat.RoughnessTexture == null)                          {                              //     mat.NormalsTexture = mat.Roughness < 0.3 ? glossyNtex : fussyNtex;                              //     mat.NormalMapScale = 100.0f;                          }                          var mesh = Mesh3d.Create(new Object3dInfo(ply.Vertices)' mat);                          trans.Transpose();                          trans = trans * Matrix4.CreateScale(0.6f) * Matrix4.CreateRotationX(MathHelper.DegreesToRadians(-90.0f));                          mesh.GetInstance(0).Transformation.SetPosition(trans.ExtractTranslation());                          mesh.GetInstance(0).Transformation.SetOrientation(trans.ExtractRotation());                          mesh.GetInstance(0).Transformation.SetScale(trans.ExtractScale());                          scene.Add(mesh);                          mat = new GenericMaterial();                          trans = Matrix4.Identity;                      }                      else if(line.Contains(".material"))                      {                          var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                          if(matermap.ContainsKey(vals))                          {                              mat = matermap[vals];                          }                      }                      if(line.Contains(".transformation"))                      {                          var s = line.Split('=')[1];                          s = s.Trim(' ');                          var numbers = s.Split(' ');                          for(int f = 0; f < numbers.Length; f++)                          {                              trans[f % 4' (int)Math.Floor((float)f / 4)] = StringToFloat(numbers[f]);                          }                      }                  }                    //DynamicCubeMapController.Create();                  DynamicCubeMapController.Create();              });
Magic Number,ShadowsTester,HotelScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\HotelScene.cs,HotelScene,The following statement contains a magic number: Game.Invoke(() =>              {                    var unknownMaterial = new GenericMaterial(new Vector3(1));                    var lines = System.IO.File.ReadAllLines(Media.Get("scene.scn"));                  int linec = lines.Length;                    var texmap = new Dictionary<string' TexInfo>();                  var matermap = new Dictionary<string' GenericMaterial>();                    var mat = new GenericMaterial();                  var trans = Matrix4.Identity;                  var glossyNtex = new Texture(Media.Get("200_norm.jpg"));                  var fussyNtex = new Texture(Media.Get("174_norm.jpg"));                    for(int i = 0; i < linec; i++)                  {                      var line = lines[i];                      if(line.Contains("scene.textures.texture"))                      {                          var sdot = line.Split('.');                          string keyname = sdot[2];                          if(!texmap.ContainsKey(keyname))                              texmap.Add(keyname' new TexInfo());                          if(line.Contains(keyname + ".gain"))                          {                              var vals = line.Split('=')[1];                              vals.Trim();                              texmap[keyname].Gain = StringToFloat(vals);                          }                          if(line.Contains(keyname + ".value"))                          {                              var vals = line.Split('=')[1].Trim().Split(' ');                              if(vals.Length >= 3)                                  texmap[keyname].Value = new Vector3(StringToFloat(vals[0])' StringToFloat(vals[1])' StringToFloat(vals[2]));                              else if(vals.Length == 1)                                  texmap[keyname].Value = new Vector3(StringToFloat(vals[0]));                          }                          if(line.Contains(keyname + ".uvscale"))                          {                              var vals = line.Split('=')[1].Trim().Split(' ');                              if(vals.Length >= 2)                                  texmap[keyname].UVScale = new Vector2(StringToFloat(vals[0])' StringToFloat(vals[1]));                              else if(vals.Length == 1)                                  texmap[keyname].UVScale = new Vector2(StringToFloat(vals[0]));                          }                          if(line.Contains(keyname + ".file"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              texmap[keyname].TexFile = vals.Replace(".exr"' ".png");                          }                          if(line.Contains(keyname + ".type"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              texmap[keyname].Type = vals;                          }                      }                      else if(line.Contains("scene.materials.material"))                      {                          var sdot = line.Split('.');                          string keyname = sdot[2];                          if(!matermap.ContainsKey(keyname))                              matermap.Add(keyname' new GenericMaterial());                          if(line.Contains(keyname + ".d ") || line.Contains(keyname + ".kd "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                    //matermap[keyname].                                  //matermap[keyname].if(texmap.ContainsKey(vals))                                  {                                      if(texmap[vals].TexFile.Length > 1)                                      {                                          matermap[keyname].DiffuseTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                      }                                      else                                      {                                          matermap[keyname].DiffuseColor = texmap[vals].Value;                                      }                                      // matermap[keyname].InvertUVYAxis = texmap[vals].InvertUVX || texmap[vals].InvertUVY;                                  }                              }                          }                          if(line.Contains(keyname + ".uroughness"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].RoughnessTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].Roughness = Math.Max(1f' texmap[vals].Value.X);                                  }                              }                          }                          if(line.Contains(keyname + ".vroughness"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].RoughnessTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].DiffuseColor = texmap[vals].Value;                                  }                              }                          }                          if(line.Contains(keyname + ".n "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].NormalsTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                              }                          }                          if(line.Contains(keyname + ".k ") || line.Contains(keyname + ".ks "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].SpecularTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].SpecularColor = texmap[vals].Value;                                  }                              }                          }                      }                      else if(line.Contains(".ply"))                      {                          var s = line.Split('=')[1];                          s = s.Trim(' '' '"');                          var ply = Object3dManager.LoadFromRaw(Media.Get(System.IO.Path.GetFileName(s) + ".raw"));                          if(mat.NormalsTexture == null && mat.RoughnessTexture == null)                          {                              //     mat.NormalsTexture = mat.Roughness < 0.3 ? glossyNtex : fussyNtex;                              //     mat.NormalMapScale = 100.0f;                          }                          var mesh = Mesh3d.Create(new Object3dInfo(ply.Vertices)' mat);                          trans.Transpose();                          trans = trans * Matrix4.CreateScale(0.6f) * Matrix4.CreateRotationX(MathHelper.DegreesToRadians(-90.0f));                          mesh.GetInstance(0).Transformation.SetPosition(trans.ExtractTranslation());                          mesh.GetInstance(0).Transformation.SetOrientation(trans.ExtractRotation());                          mesh.GetInstance(0).Transformation.SetScale(trans.ExtractScale());                          scene.Add(mesh);                          mat = new GenericMaterial();                          trans = Matrix4.Identity;                      }                      else if(line.Contains(".material"))                      {                          var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                          if(matermap.ContainsKey(vals))                          {                              mat = matermap[vals];                          }                      }                      if(line.Contains(".transformation"))                      {                          var s = line.Split('=')[1];                          s = s.Trim(' ');                          var numbers = s.Split(' ');                          for(int f = 0; f < numbers.Length; f++)                          {                              trans[f % 4' (int)Math.Floor((float)f / 4)] = StringToFloat(numbers[f]);                          }                      }                  }                    //DynamicCubeMapController.Create();                  DynamicCubeMapController.Create();              });
Magic Number,ShadowsTester,HotelScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\HotelScene.cs,HotelScene,The following statement contains a magic number: Game.Invoke(() =>              {                    var unknownMaterial = new GenericMaterial(new Vector3(1));                    var lines = System.IO.File.ReadAllLines(Media.Get("scene.scn"));                  int linec = lines.Length;                    var texmap = new Dictionary<string' TexInfo>();                  var matermap = new Dictionary<string' GenericMaterial>();                    var mat = new GenericMaterial();                  var trans = Matrix4.Identity;                  var glossyNtex = new Texture(Media.Get("200_norm.jpg"));                  var fussyNtex = new Texture(Media.Get("174_norm.jpg"));                    for(int i = 0; i < linec; i++)                  {                      var line = lines[i];                      if(line.Contains("scene.textures.texture"))                      {                          var sdot = line.Split('.');                          string keyname = sdot[2];                          if(!texmap.ContainsKey(keyname))                              texmap.Add(keyname' new TexInfo());                          if(line.Contains(keyname + ".gain"))                          {                              var vals = line.Split('=')[1];                              vals.Trim();                              texmap[keyname].Gain = StringToFloat(vals);                          }                          if(line.Contains(keyname + ".value"))                          {                              var vals = line.Split('=')[1].Trim().Split(' ');                              if(vals.Length >= 3)                                  texmap[keyname].Value = new Vector3(StringToFloat(vals[0])' StringToFloat(vals[1])' StringToFloat(vals[2]));                              else if(vals.Length == 1)                                  texmap[keyname].Value = new Vector3(StringToFloat(vals[0]));                          }                          if(line.Contains(keyname + ".uvscale"))                          {                              var vals = line.Split('=')[1].Trim().Split(' ');                              if(vals.Length >= 2)                                  texmap[keyname].UVScale = new Vector2(StringToFloat(vals[0])' StringToFloat(vals[1]));                              else if(vals.Length == 1)                                  texmap[keyname].UVScale = new Vector2(StringToFloat(vals[0]));                          }                          if(line.Contains(keyname + ".file"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              texmap[keyname].TexFile = vals.Replace(".exr"' ".png");                          }                          if(line.Contains(keyname + ".type"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              texmap[keyname].Type = vals;                          }                      }                      else if(line.Contains("scene.materials.material"))                      {                          var sdot = line.Split('.');                          string keyname = sdot[2];                          if(!matermap.ContainsKey(keyname))                              matermap.Add(keyname' new GenericMaterial());                          if(line.Contains(keyname + ".d ") || line.Contains(keyname + ".kd "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                    //matermap[keyname].                                  //matermap[keyname].if(texmap.ContainsKey(vals))                                  {                                      if(texmap[vals].TexFile.Length > 1)                                      {                                          matermap[keyname].DiffuseTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                      }                                      else                                      {                                          matermap[keyname].DiffuseColor = texmap[vals].Value;                                      }                                      // matermap[keyname].InvertUVYAxis = texmap[vals].InvertUVX || texmap[vals].InvertUVY;                                  }                              }                          }                          if(line.Contains(keyname + ".uroughness"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].RoughnessTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].Roughness = Math.Max(1f' texmap[vals].Value.X);                                  }                              }                          }                          if(line.Contains(keyname + ".vroughness"))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].RoughnessTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].DiffuseColor = texmap[vals].Value;                                  }                              }                          }                          if(line.Contains(keyname + ".n "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].NormalsTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                              }                          }                          if(line.Contains(keyname + ".k ") || line.Contains(keyname + ".ks "))                          {                              var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                              if(texmap.ContainsKey(vals))                              {                                  if(texmap[vals].TexFile.Length > 1)                                  {                                      matermap[keyname].SpecularTexture = new Texture(Media.Get(System.IO.Path.GetFileName(texmap[vals].TexFile)));                                  }                                  else                                  {                                      matermap[keyname].SpecularColor = texmap[vals].Value;                                  }                              }                          }                      }                      else if(line.Contains(".ply"))                      {                          var s = line.Split('=')[1];                          s = s.Trim(' '' '"');                          var ply = Object3dManager.LoadFromRaw(Media.Get(System.IO.Path.GetFileName(s) + ".raw"));                          if(mat.NormalsTexture == null && mat.RoughnessTexture == null)                          {                              //     mat.NormalsTexture = mat.Roughness < 0.3 ? glossyNtex : fussyNtex;                              //     mat.NormalMapScale = 100.0f;                          }                          var mesh = Mesh3d.Create(new Object3dInfo(ply.Vertices)' mat);                          trans.Transpose();                          trans = trans * Matrix4.CreateScale(0.6f) * Matrix4.CreateRotationX(MathHelper.DegreesToRadians(-90.0f));                          mesh.GetInstance(0).Transformation.SetPosition(trans.ExtractTranslation());                          mesh.GetInstance(0).Transformation.SetOrientation(trans.ExtractRotation());                          mesh.GetInstance(0).Transformation.SetScale(trans.ExtractScale());                          scene.Add(mesh);                          mat = new GenericMaterial();                          trans = Matrix4.Identity;                      }                      else if(line.Contains(".material"))                      {                          var vals = line.Split('=')[1].Trim(new char[] { ' '' '"' });                          if(matermap.ContainsKey(vals))                          {                              mat = matermap[vals];                          }                      }                      if(line.Contains(".transformation"))                      {                          var s = line.Split('=')[1];                          s = s.Trim(' ');                          var numbers = s.Split(' ');                          for(int f = 0; f < numbers.Length; f++)                          {                              trans[f % 4' (int)Math.Floor((float)f / 4)] = StringToFloat(numbers[f]);                          }                      }                  }                    //DynamicCubeMapController.Create();                  DynamicCubeMapController.Create();              });
Magic Number,ShadowsTester,ItemSelector,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\ItemSelector.cs,InitializeComponent,The following statement contains a magic number: this.treeView1.Size = new System.Drawing.Size(290' 478);
Magic Number,ShadowsTester,ItemSelector,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\ItemSelector.cs,InitializeComponent,The following statement contains a magic number: this.treeView1.Size = new System.Drawing.Size(290' 478);
Magic Number,ShadowsTester,ItemSelector,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\ItemSelector.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,ShadowsTester,ItemSelector,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\ItemSelector.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,ShadowsTester,ItemSelector,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\ItemSelector.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(290' 478);
Magic Number,ShadowsTester,ItemSelector,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\ItemSelector.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(290' 478);
Magic Number,ShadowsTester,VictorianHouseScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\VictorianHouseScene.cs,CreateDiffuseModelFromRaw,The following statement contains a magic number: terrainMaterial.Roughness = 0.5f;
Magic Number,ShadowsTester,VictorianHouseScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\VictorianHouseScene.cs,VictorianHouseScene,The following statement contains a magic number: var ground = CreateWall(new Vector2(-1000)' new Vector2(1000)' Quaternion.Identity' Vector3.Zero' new Vector3(0.1f' 0.4f' 1));
Magic Number,ShadowsTester,VictorianHouseScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\VictorianHouseScene.cs,VictorianHouseScene,The following statement contains a magic number: var ground = CreateWall(new Vector2(-1000)' new Vector2(1000)' Quaternion.Identity' Vector3.Zero' new Vector3(0.1f' 0.4f' 1));
Magic Number,ShadowsTester,VictorianHouseScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\VictorianHouseScene.cs,VictorianHouseScene,The following statement contains a magic number: var ground = CreateWall(new Vector2(-1000)' new Vector2(1000)' Quaternion.Identity' Vector3.Zero' new Vector3(0.1f' 0.4f' 1));
Magic Number,ShadowsTester,VictorianHouseScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\VictorianHouseScene.cs,VictorianHouseScene,The following statement contains a magic number: var ground = CreateWall(new Vector2(-1000)' new Vector2(1000)' Quaternion.Identity' Vector3.Zero' new Vector3(0.1f' 0.4f' 1));
Magic Number,ShadowsTester,VictorianHouseScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\VictorianHouseScene.cs,VictorianHouseScene,The following statement contains a magic number: scene.OnObjectFinish += (ox' e) =>              {                  if(e is Mesh3d)                  {                      Game.Invoke(() =>                      {                          var o = e as Mesh3d;                          Game.World.Scene.Add(o);                          o.GetLodLevel(0).DisableFaceCulling = true;                            if(o.GetLodLevel(0).Info3d.Manager.Name.ToLower().Contains("glass"))                          {                              o.GetLodLevel(0).Material.UseForwardRenderer = true;                              o.GetLodLevel(0).Material.Alpha = 0.2f;                          }                            o.GetLodLevel(0).Info3d.Manager = null;                      });                  }              };
Magic Number,ShadowsTester,PhysicsTest,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\PhysicsTest.cs,CreateDiffuseModelFromRaw,The following statement contains a magic number: terrainMaterial.Roughness = 0.1f;
Magic Number,ShadowsTester,PhysicsTest,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\PhysicsTest.cs,PhysicsTest,The following statement contains a magic number: Game.Invoke(() =>              {                  Object3dInfo point3dinfo = new Object3dInfo(new VertexInfo[] { new VertexInfo() {                      Position = Vector3.One'                      Normal = Vector3.UnitZ'                      UV = Vector2.Zero                  } });                  Object3dInfo point3dinfo2 = Object3dGenerator.CreateCube(Vector3.One * 0.1f' Vector2.One).AsObject3dInfo();                  OpenTK.Graphics.OpenGL4.GL.PointSize(111);                  GenericMaterial whitemat = new GenericMaterial()                  {                      DiffuseColor = Vector3.One                  };                  Mesh3d points = Mesh3d.Create(point3dinfo2' whitemat);                  //point3dinfo.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.Points;                  //whitemat.CustomShaderProgram = ShaderProgram.Compile("Points.vertex.glsl"' "Points.fragment.glsl");                  points.ClearInstances();                    ComputeShader updateShader = new ComputeShader("PhysicsUpdater.compute.glsl");                  ShaderStorageBuffer pointsBuffer = new ShaderStorageBuffer();                  var parts = new List<Particle>();                  List<byte> bytes = new List<byte>();                  for(int i = 0; i < 1024 * 2; i++)                  {                      var part = new Particle()                      {                          Position = new Vector3(rand(-20' 20)' rand(0' 20)' rand(-10' 10))'                          Velocity = Vector3.Zero                      };                      points.AddInstance(new TransformationManager(part.Position));                        bytes.AddRange(BitConverter.GetBytes(part.Position.X));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Position.X));                        bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                  }                  pointsBuffer.MapData(bytes.ToArray());                    pointsBuffer.Use(9);                  Game.OnBeforeDraw += (z' x) =>                  {                      updateShader.Use();                      pointsBuffer.Use(9);                      updateShader.SetUniform("ParticlesCount"' 1024 * 2);                      updateShader.Dispatch(2' 1' 1);                                            pointsBuffer.Use(9);                  };                    points.UpdateMatrix();                  scene.Add(points);                                });
Magic Number,ShadowsTester,PhysicsTest,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\PhysicsTest.cs,PhysicsTest,The following statement contains a magic number: Game.Invoke(() =>              {                  Object3dInfo point3dinfo = new Object3dInfo(new VertexInfo[] { new VertexInfo() {                      Position = Vector3.One'                      Normal = Vector3.UnitZ'                      UV = Vector2.Zero                  } });                  Object3dInfo point3dinfo2 = Object3dGenerator.CreateCube(Vector3.One * 0.1f' Vector2.One).AsObject3dInfo();                  OpenTK.Graphics.OpenGL4.GL.PointSize(111);                  GenericMaterial whitemat = new GenericMaterial()                  {                      DiffuseColor = Vector3.One                  };                  Mesh3d points = Mesh3d.Create(point3dinfo2' whitemat);                  //point3dinfo.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.Points;                  //whitemat.CustomShaderProgram = ShaderProgram.Compile("Points.vertex.glsl"' "Points.fragment.glsl");                  points.ClearInstances();                    ComputeShader updateShader = new ComputeShader("PhysicsUpdater.compute.glsl");                  ShaderStorageBuffer pointsBuffer = new ShaderStorageBuffer();                  var parts = new List<Particle>();                  List<byte> bytes = new List<byte>();                  for(int i = 0; i < 1024 * 2; i++)                  {                      var part = new Particle()                      {                          Position = new Vector3(rand(-20' 20)' rand(0' 20)' rand(-10' 10))'                          Velocity = Vector3.Zero                      };                      points.AddInstance(new TransformationManager(part.Position));                        bytes.AddRange(BitConverter.GetBytes(part.Position.X));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Position.X));                        bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                  }                  pointsBuffer.MapData(bytes.ToArray());                    pointsBuffer.Use(9);                  Game.OnBeforeDraw += (z' x) =>                  {                      updateShader.Use();                      pointsBuffer.Use(9);                      updateShader.SetUniform("ParticlesCount"' 1024 * 2);                      updateShader.Dispatch(2' 1' 1);                                            pointsBuffer.Use(9);                  };                    points.UpdateMatrix();                  scene.Add(points);                                });
Magic Number,ShadowsTester,PhysicsTest,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\PhysicsTest.cs,PhysicsTest,The following statement contains a magic number: Game.Invoke(() =>              {                  Object3dInfo point3dinfo = new Object3dInfo(new VertexInfo[] { new VertexInfo() {                      Position = Vector3.One'                      Normal = Vector3.UnitZ'                      UV = Vector2.Zero                  } });                  Object3dInfo point3dinfo2 = Object3dGenerator.CreateCube(Vector3.One * 0.1f' Vector2.One).AsObject3dInfo();                  OpenTK.Graphics.OpenGL4.GL.PointSize(111);                  GenericMaterial whitemat = new GenericMaterial()                  {                      DiffuseColor = Vector3.One                  };                  Mesh3d points = Mesh3d.Create(point3dinfo2' whitemat);                  //point3dinfo.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.Points;                  //whitemat.CustomShaderProgram = ShaderProgram.Compile("Points.vertex.glsl"' "Points.fragment.glsl");                  points.ClearInstances();                    ComputeShader updateShader = new ComputeShader("PhysicsUpdater.compute.glsl");                  ShaderStorageBuffer pointsBuffer = new ShaderStorageBuffer();                  var parts = new List<Particle>();                  List<byte> bytes = new List<byte>();                  for(int i = 0; i < 1024 * 2; i++)                  {                      var part = new Particle()                      {                          Position = new Vector3(rand(-20' 20)' rand(0' 20)' rand(-10' 10))'                          Velocity = Vector3.Zero                      };                      points.AddInstance(new TransformationManager(part.Position));                        bytes.AddRange(BitConverter.GetBytes(part.Position.X));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Position.X));                        bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                  }                  pointsBuffer.MapData(bytes.ToArray());                    pointsBuffer.Use(9);                  Game.OnBeforeDraw += (z' x) =>                  {                      updateShader.Use();                      pointsBuffer.Use(9);                      updateShader.SetUniform("ParticlesCount"' 1024 * 2);                      updateShader.Dispatch(2' 1' 1);                                            pointsBuffer.Use(9);                  };                    points.UpdateMatrix();                  scene.Add(points);                                });
Magic Number,ShadowsTester,PhysicsTest,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\PhysicsTest.cs,PhysicsTest,The following statement contains a magic number: Game.Invoke(() =>              {                  Object3dInfo point3dinfo = new Object3dInfo(new VertexInfo[] { new VertexInfo() {                      Position = Vector3.One'                      Normal = Vector3.UnitZ'                      UV = Vector2.Zero                  } });                  Object3dInfo point3dinfo2 = Object3dGenerator.CreateCube(Vector3.One * 0.1f' Vector2.One).AsObject3dInfo();                  OpenTK.Graphics.OpenGL4.GL.PointSize(111);                  GenericMaterial whitemat = new GenericMaterial()                  {                      DiffuseColor = Vector3.One                  };                  Mesh3d points = Mesh3d.Create(point3dinfo2' whitemat);                  //point3dinfo.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.Points;                  //whitemat.CustomShaderProgram = ShaderProgram.Compile("Points.vertex.glsl"' "Points.fragment.glsl");                  points.ClearInstances();                    ComputeShader updateShader = new ComputeShader("PhysicsUpdater.compute.glsl");                  ShaderStorageBuffer pointsBuffer = new ShaderStorageBuffer();                  var parts = new List<Particle>();                  List<byte> bytes = new List<byte>();                  for(int i = 0; i < 1024 * 2; i++)                  {                      var part = new Particle()                      {                          Position = new Vector3(rand(-20' 20)' rand(0' 20)' rand(-10' 10))'                          Velocity = Vector3.Zero                      };                      points.AddInstance(new TransformationManager(part.Position));                        bytes.AddRange(BitConverter.GetBytes(part.Position.X));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Position.X));                        bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                  }                  pointsBuffer.MapData(bytes.ToArray());                    pointsBuffer.Use(9);                  Game.OnBeforeDraw += (z' x) =>                  {                      updateShader.Use();                      pointsBuffer.Use(9);                      updateShader.SetUniform("ParticlesCount"' 1024 * 2);                      updateShader.Dispatch(2' 1' 1);                                            pointsBuffer.Use(9);                  };                    points.UpdateMatrix();                  scene.Add(points);                                });
Magic Number,ShadowsTester,PhysicsTest,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\PhysicsTest.cs,PhysicsTest,The following statement contains a magic number: Game.Invoke(() =>              {                  Object3dInfo point3dinfo = new Object3dInfo(new VertexInfo[] { new VertexInfo() {                      Position = Vector3.One'                      Normal = Vector3.UnitZ'                      UV = Vector2.Zero                  } });                  Object3dInfo point3dinfo2 = Object3dGenerator.CreateCube(Vector3.One * 0.1f' Vector2.One).AsObject3dInfo();                  OpenTK.Graphics.OpenGL4.GL.PointSize(111);                  GenericMaterial whitemat = new GenericMaterial()                  {                      DiffuseColor = Vector3.One                  };                  Mesh3d points = Mesh3d.Create(point3dinfo2' whitemat);                  //point3dinfo.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.Points;                  //whitemat.CustomShaderProgram = ShaderProgram.Compile("Points.vertex.glsl"' "Points.fragment.glsl");                  points.ClearInstances();                    ComputeShader updateShader = new ComputeShader("PhysicsUpdater.compute.glsl");                  ShaderStorageBuffer pointsBuffer = new ShaderStorageBuffer();                  var parts = new List<Particle>();                  List<byte> bytes = new List<byte>();                  for(int i = 0; i < 1024 * 2; i++)                  {                      var part = new Particle()                      {                          Position = new Vector3(rand(-20' 20)' rand(0' 20)' rand(-10' 10))'                          Velocity = Vector3.Zero                      };                      points.AddInstance(new TransformationManager(part.Position));                        bytes.AddRange(BitConverter.GetBytes(part.Position.X));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Position.X));                        bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                  }                  pointsBuffer.MapData(bytes.ToArray());                    pointsBuffer.Use(9);                  Game.OnBeforeDraw += (z' x) =>                  {                      updateShader.Use();                      pointsBuffer.Use(9);                      updateShader.SetUniform("ParticlesCount"' 1024 * 2);                      updateShader.Dispatch(2' 1' 1);                                            pointsBuffer.Use(9);                  };                    points.UpdateMatrix();                  scene.Add(points);                                });
Magic Number,ShadowsTester,PhysicsTest,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\PhysicsTest.cs,PhysicsTest,The following statement contains a magic number: Game.Invoke(() =>              {                  Object3dInfo point3dinfo = new Object3dInfo(new VertexInfo[] { new VertexInfo() {                      Position = Vector3.One'                      Normal = Vector3.UnitZ'                      UV = Vector2.Zero                  } });                  Object3dInfo point3dinfo2 = Object3dGenerator.CreateCube(Vector3.One * 0.1f' Vector2.One).AsObject3dInfo();                  OpenTK.Graphics.OpenGL4.GL.PointSize(111);                  GenericMaterial whitemat = new GenericMaterial()                  {                      DiffuseColor = Vector3.One                  };                  Mesh3d points = Mesh3d.Create(point3dinfo2' whitemat);                  //point3dinfo.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.Points;                  //whitemat.CustomShaderProgram = ShaderProgram.Compile("Points.vertex.glsl"' "Points.fragment.glsl");                  points.ClearInstances();                    ComputeShader updateShader = new ComputeShader("PhysicsUpdater.compute.glsl");                  ShaderStorageBuffer pointsBuffer = new ShaderStorageBuffer();                  var parts = new List<Particle>();                  List<byte> bytes = new List<byte>();                  for(int i = 0; i < 1024 * 2; i++)                  {                      var part = new Particle()                      {                          Position = new Vector3(rand(-20' 20)' rand(0' 20)' rand(-10' 10))'                          Velocity = Vector3.Zero                      };                      points.AddInstance(new TransformationManager(part.Position));                        bytes.AddRange(BitConverter.GetBytes(part.Position.X));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Position.X));                        bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                  }                  pointsBuffer.MapData(bytes.ToArray());                    pointsBuffer.Use(9);                  Game.OnBeforeDraw += (z' x) =>                  {                      updateShader.Use();                      pointsBuffer.Use(9);                      updateShader.SetUniform("ParticlesCount"' 1024 * 2);                      updateShader.Dispatch(2' 1' 1);                                            pointsBuffer.Use(9);                  };                    points.UpdateMatrix();                  scene.Add(points);                                });
Magic Number,ShadowsTester,PhysicsTest,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\PhysicsTest.cs,PhysicsTest,The following statement contains a magic number: Game.Invoke(() =>              {                  Object3dInfo point3dinfo = new Object3dInfo(new VertexInfo[] { new VertexInfo() {                      Position = Vector3.One'                      Normal = Vector3.UnitZ'                      UV = Vector2.Zero                  } });                  Object3dInfo point3dinfo2 = Object3dGenerator.CreateCube(Vector3.One * 0.1f' Vector2.One).AsObject3dInfo();                  OpenTK.Graphics.OpenGL4.GL.PointSize(111);                  GenericMaterial whitemat = new GenericMaterial()                  {                      DiffuseColor = Vector3.One                  };                  Mesh3d points = Mesh3d.Create(point3dinfo2' whitemat);                  //point3dinfo.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.Points;                  //whitemat.CustomShaderProgram = ShaderProgram.Compile("Points.vertex.glsl"' "Points.fragment.glsl");                  points.ClearInstances();                    ComputeShader updateShader = new ComputeShader("PhysicsUpdater.compute.glsl");                  ShaderStorageBuffer pointsBuffer = new ShaderStorageBuffer();                  var parts = new List<Particle>();                  List<byte> bytes = new List<byte>();                  for(int i = 0; i < 1024 * 2; i++)                  {                      var part = new Particle()                      {                          Position = new Vector3(rand(-20' 20)' rand(0' 20)' rand(-10' 10))'                          Velocity = Vector3.Zero                      };                      points.AddInstance(new TransformationManager(part.Position));                        bytes.AddRange(BitConverter.GetBytes(part.Position.X));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Position.X));                        bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                  }                  pointsBuffer.MapData(bytes.ToArray());                    pointsBuffer.Use(9);                  Game.OnBeforeDraw += (z' x) =>                  {                      updateShader.Use();                      pointsBuffer.Use(9);                      updateShader.SetUniform("ParticlesCount"' 1024 * 2);                      updateShader.Dispatch(2' 1' 1);                                            pointsBuffer.Use(9);                  };                    points.UpdateMatrix();                  scene.Add(points);                                });
Magic Number,ShadowsTester,PhysicsTest,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\PhysicsTest.cs,PhysicsTest,The following statement contains a magic number: Game.Invoke(() =>              {                  Object3dInfo point3dinfo = new Object3dInfo(new VertexInfo[] { new VertexInfo() {                      Position = Vector3.One'                      Normal = Vector3.UnitZ'                      UV = Vector2.Zero                  } });                  Object3dInfo point3dinfo2 = Object3dGenerator.CreateCube(Vector3.One * 0.1f' Vector2.One).AsObject3dInfo();                  OpenTK.Graphics.OpenGL4.GL.PointSize(111);                  GenericMaterial whitemat = new GenericMaterial()                  {                      DiffuseColor = Vector3.One                  };                  Mesh3d points = Mesh3d.Create(point3dinfo2' whitemat);                  //point3dinfo.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.Points;                  //whitemat.CustomShaderProgram = ShaderProgram.Compile("Points.vertex.glsl"' "Points.fragment.glsl");                  points.ClearInstances();                    ComputeShader updateShader = new ComputeShader("PhysicsUpdater.compute.glsl");                  ShaderStorageBuffer pointsBuffer = new ShaderStorageBuffer();                  var parts = new List<Particle>();                  List<byte> bytes = new List<byte>();                  for(int i = 0; i < 1024 * 2; i++)                  {                      var part = new Particle()                      {                          Position = new Vector3(rand(-20' 20)' rand(0' 20)' rand(-10' 10))'                          Velocity = Vector3.Zero                      };                      points.AddInstance(new TransformationManager(part.Position));                        bytes.AddRange(BitConverter.GetBytes(part.Position.X));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Position.X));                        bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                  }                  pointsBuffer.MapData(bytes.ToArray());                    pointsBuffer.Use(9);                  Game.OnBeforeDraw += (z' x) =>                  {                      updateShader.Use();                      pointsBuffer.Use(9);                      updateShader.SetUniform("ParticlesCount"' 1024 * 2);                      updateShader.Dispatch(2' 1' 1);                                            pointsBuffer.Use(9);                  };                    points.UpdateMatrix();                  scene.Add(points);                                });
Magic Number,ShadowsTester,PhysicsTest,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\PhysicsTest.cs,PhysicsTest,The following statement contains a magic number: Game.Invoke(() =>              {                  Object3dInfo point3dinfo = new Object3dInfo(new VertexInfo[] { new VertexInfo() {                      Position = Vector3.One'                      Normal = Vector3.UnitZ'                      UV = Vector2.Zero                  } });                  Object3dInfo point3dinfo2 = Object3dGenerator.CreateCube(Vector3.One * 0.1f' Vector2.One).AsObject3dInfo();                  OpenTK.Graphics.OpenGL4.GL.PointSize(111);                  GenericMaterial whitemat = new GenericMaterial()                  {                      DiffuseColor = Vector3.One                  };                  Mesh3d points = Mesh3d.Create(point3dinfo2' whitemat);                  //point3dinfo.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.Points;                  //whitemat.CustomShaderProgram = ShaderProgram.Compile("Points.vertex.glsl"' "Points.fragment.glsl");                  points.ClearInstances();                    ComputeShader updateShader = new ComputeShader("PhysicsUpdater.compute.glsl");                  ShaderStorageBuffer pointsBuffer = new ShaderStorageBuffer();                  var parts = new List<Particle>();                  List<byte> bytes = new List<byte>();                  for(int i = 0; i < 1024 * 2; i++)                  {                      var part = new Particle()                      {                          Position = new Vector3(rand(-20' 20)' rand(0' 20)' rand(-10' 10))'                          Velocity = Vector3.Zero                      };                      points.AddInstance(new TransformationManager(part.Position));                        bytes.AddRange(BitConverter.GetBytes(part.Position.X));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Position.X));                        bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                  }                  pointsBuffer.MapData(bytes.ToArray());                    pointsBuffer.Use(9);                  Game.OnBeforeDraw += (z' x) =>                  {                      updateShader.Use();                      pointsBuffer.Use(9);                      updateShader.SetUniform("ParticlesCount"' 1024 * 2);                      updateShader.Dispatch(2' 1' 1);                                            pointsBuffer.Use(9);                  };                    points.UpdateMatrix();                  scene.Add(points);                                });
Magic Number,ShadowsTester,PhysicsTest,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\PhysicsTest.cs,PhysicsTest,The following statement contains a magic number: Game.Invoke(() =>              {                  Object3dInfo point3dinfo = new Object3dInfo(new VertexInfo[] { new VertexInfo() {                      Position = Vector3.One'                      Normal = Vector3.UnitZ'                      UV = Vector2.Zero                  } });                  Object3dInfo point3dinfo2 = Object3dGenerator.CreateCube(Vector3.One * 0.1f' Vector2.One).AsObject3dInfo();                  OpenTK.Graphics.OpenGL4.GL.PointSize(111);                  GenericMaterial whitemat = new GenericMaterial()                  {                      DiffuseColor = Vector3.One                  };                  Mesh3d points = Mesh3d.Create(point3dinfo2' whitemat);                  //point3dinfo.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.Points;                  //whitemat.CustomShaderProgram = ShaderProgram.Compile("Points.vertex.glsl"' "Points.fragment.glsl");                  points.ClearInstances();                    ComputeShader updateShader = new ComputeShader("PhysicsUpdater.compute.glsl");                  ShaderStorageBuffer pointsBuffer = new ShaderStorageBuffer();                  var parts = new List<Particle>();                  List<byte> bytes = new List<byte>();                  for(int i = 0; i < 1024 * 2; i++)                  {                      var part = new Particle()                      {                          Position = new Vector3(rand(-20' 20)' rand(0' 20)' rand(-10' 10))'                          Velocity = Vector3.Zero                      };                      points.AddInstance(new TransformationManager(part.Position));                        bytes.AddRange(BitConverter.GetBytes(part.Position.X));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Position.X));                        bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                  }                  pointsBuffer.MapData(bytes.ToArray());                    pointsBuffer.Use(9);                  Game.OnBeforeDraw += (z' x) =>                  {                      updateShader.Use();                      pointsBuffer.Use(9);                      updateShader.SetUniform("ParticlesCount"' 1024 * 2);                      updateShader.Dispatch(2' 1' 1);                                            pointsBuffer.Use(9);                  };                    points.UpdateMatrix();                  scene.Add(points);                                });
Magic Number,ShadowsTester,PhysicsTest,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\PhysicsTest.cs,PhysicsTest,The following statement contains a magic number: Game.Invoke(() =>              {                  Object3dInfo point3dinfo = new Object3dInfo(new VertexInfo[] { new VertexInfo() {                      Position = Vector3.One'                      Normal = Vector3.UnitZ'                      UV = Vector2.Zero                  } });                  Object3dInfo point3dinfo2 = Object3dGenerator.CreateCube(Vector3.One * 0.1f' Vector2.One).AsObject3dInfo();                  OpenTK.Graphics.OpenGL4.GL.PointSize(111);                  GenericMaterial whitemat = new GenericMaterial()                  {                      DiffuseColor = Vector3.One                  };                  Mesh3d points = Mesh3d.Create(point3dinfo2' whitemat);                  //point3dinfo.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.Points;                  //whitemat.CustomShaderProgram = ShaderProgram.Compile("Points.vertex.glsl"' "Points.fragment.glsl");                  points.ClearInstances();                    ComputeShader updateShader = new ComputeShader("PhysicsUpdater.compute.glsl");                  ShaderStorageBuffer pointsBuffer = new ShaderStorageBuffer();                  var parts = new List<Particle>();                  List<byte> bytes = new List<byte>();                  for(int i = 0; i < 1024 * 2; i++)                  {                      var part = new Particle()                      {                          Position = new Vector3(rand(-20' 20)' rand(0' 20)' rand(-10' 10))'                          Velocity = Vector3.Zero                      };                      points.AddInstance(new TransformationManager(part.Position));                        bytes.AddRange(BitConverter.GetBytes(part.Position.X));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Position.X));                        bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                  }                  pointsBuffer.MapData(bytes.ToArray());                    pointsBuffer.Use(9);                  Game.OnBeforeDraw += (z' x) =>                  {                      updateShader.Use();                      pointsBuffer.Use(9);                      updateShader.SetUniform("ParticlesCount"' 1024 * 2);                      updateShader.Dispatch(2' 1' 1);                                            pointsBuffer.Use(9);                  };                    points.UpdateMatrix();                  scene.Add(points);                                });
Magic Number,ShadowsTester,PhysicsTest,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\PhysicsTest.cs,PhysicsTest,The following statement contains a magic number: Game.Invoke(() =>              {                  Object3dInfo point3dinfo = new Object3dInfo(new VertexInfo[] { new VertexInfo() {                      Position = Vector3.One'                      Normal = Vector3.UnitZ'                      UV = Vector2.Zero                  } });                  Object3dInfo point3dinfo2 = Object3dGenerator.CreateCube(Vector3.One * 0.1f' Vector2.One).AsObject3dInfo();                  OpenTK.Graphics.OpenGL4.GL.PointSize(111);                  GenericMaterial whitemat = new GenericMaterial()                  {                      DiffuseColor = Vector3.One                  };                  Mesh3d points = Mesh3d.Create(point3dinfo2' whitemat);                  //point3dinfo.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.Points;                  //whitemat.CustomShaderProgram = ShaderProgram.Compile("Points.vertex.glsl"' "Points.fragment.glsl");                  points.ClearInstances();                    ComputeShader updateShader = new ComputeShader("PhysicsUpdater.compute.glsl");                  ShaderStorageBuffer pointsBuffer = new ShaderStorageBuffer();                  var parts = new List<Particle>();                  List<byte> bytes = new List<byte>();                  for(int i = 0; i < 1024 * 2; i++)                  {                      var part = new Particle()                      {                          Position = new Vector3(rand(-20' 20)' rand(0' 20)' rand(-10' 10))'                          Velocity = Vector3.Zero                      };                      points.AddInstance(new TransformationManager(part.Position));                        bytes.AddRange(BitConverter.GetBytes(part.Position.X));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Position.X));                        bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                  }                  pointsBuffer.MapData(bytes.ToArray());                    pointsBuffer.Use(9);                  Game.OnBeforeDraw += (z' x) =>                  {                      updateShader.Use();                      pointsBuffer.Use(9);                      updateShader.SetUniform("ParticlesCount"' 1024 * 2);                      updateShader.Dispatch(2' 1' 1);                                            pointsBuffer.Use(9);                  };                    points.UpdateMatrix();                  scene.Add(points);                                });
Magic Number,ShadowsTester,PhysicsTest,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\PhysicsTest.cs,PhysicsTest,The following statement contains a magic number: Game.Invoke(() =>              {                  Object3dInfo point3dinfo = new Object3dInfo(new VertexInfo[] { new VertexInfo() {                      Position = Vector3.One'                      Normal = Vector3.UnitZ'                      UV = Vector2.Zero                  } });                  Object3dInfo point3dinfo2 = Object3dGenerator.CreateCube(Vector3.One * 0.1f' Vector2.One).AsObject3dInfo();                  OpenTK.Graphics.OpenGL4.GL.PointSize(111);                  GenericMaterial whitemat = new GenericMaterial()                  {                      DiffuseColor = Vector3.One                  };                  Mesh3d points = Mesh3d.Create(point3dinfo2' whitemat);                  //point3dinfo.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.Points;                  //whitemat.CustomShaderProgram = ShaderProgram.Compile("Points.vertex.glsl"' "Points.fragment.glsl");                  points.ClearInstances();                    ComputeShader updateShader = new ComputeShader("PhysicsUpdater.compute.glsl");                  ShaderStorageBuffer pointsBuffer = new ShaderStorageBuffer();                  var parts = new List<Particle>();                  List<byte> bytes = new List<byte>();                  for(int i = 0; i < 1024 * 2; i++)                  {                      var part = new Particle()                      {                          Position = new Vector3(rand(-20' 20)' rand(0' 20)' rand(-10' 10))'                          Velocity = Vector3.Zero                      };                      points.AddInstance(new TransformationManager(part.Position));                        bytes.AddRange(BitConverter.GetBytes(part.Position.X));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Position.X));                        bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                  }                  pointsBuffer.MapData(bytes.ToArray());                    pointsBuffer.Use(9);                  Game.OnBeforeDraw += (z' x) =>                  {                      updateShader.Use();                      pointsBuffer.Use(9);                      updateShader.SetUniform("ParticlesCount"' 1024 * 2);                      updateShader.Dispatch(2' 1' 1);                                            pointsBuffer.Use(9);                  };                    points.UpdateMatrix();                  scene.Add(points);                                });
Magic Number,ShadowsTester,PhysicsTest,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\PhysicsTest.cs,PhysicsTest,The following statement contains a magic number: Game.Invoke(() =>              {                  Object3dInfo point3dinfo = new Object3dInfo(new VertexInfo[] { new VertexInfo() {                      Position = Vector3.One'                      Normal = Vector3.UnitZ'                      UV = Vector2.Zero                  } });                  Object3dInfo point3dinfo2 = Object3dGenerator.CreateCube(Vector3.One * 0.1f' Vector2.One).AsObject3dInfo();                  OpenTK.Graphics.OpenGL4.GL.PointSize(111);                  GenericMaterial whitemat = new GenericMaterial()                  {                      DiffuseColor = Vector3.One                  };                  Mesh3d points = Mesh3d.Create(point3dinfo2' whitemat);                  //point3dinfo.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.Points;                  //whitemat.CustomShaderProgram = ShaderProgram.Compile("Points.vertex.glsl"' "Points.fragment.glsl");                  points.ClearInstances();                    ComputeShader updateShader = new ComputeShader("PhysicsUpdater.compute.glsl");                  ShaderStorageBuffer pointsBuffer = new ShaderStorageBuffer();                  var parts = new List<Particle>();                  List<byte> bytes = new List<byte>();                  for(int i = 0; i < 1024 * 2; i++)                  {                      var part = new Particle()                      {                          Position = new Vector3(rand(-20' 20)' rand(0' 20)' rand(-10' 10))'                          Velocity = Vector3.Zero                      };                      points.AddInstance(new TransformationManager(part.Position));                        bytes.AddRange(BitConverter.GetBytes(part.Position.X));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Position.X));                        bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                  }                  pointsBuffer.MapData(bytes.ToArray());                    pointsBuffer.Use(9);                  Game.OnBeforeDraw += (z' x) =>                  {                      updateShader.Use();                      pointsBuffer.Use(9);                      updateShader.SetUniform("ParticlesCount"' 1024 * 2);                      updateShader.Dispatch(2' 1' 1);                                            pointsBuffer.Use(9);                  };                    points.UpdateMatrix();                  scene.Add(points);                                });
Magic Number,ShadowsTester,PhysicsTest,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\PhysicsTest.cs,PhysicsTest,The following statement contains a magic number: Game.Invoke(() =>              {                  Object3dInfo point3dinfo = new Object3dInfo(new VertexInfo[] { new VertexInfo() {                      Position = Vector3.One'                      Normal = Vector3.UnitZ'                      UV = Vector2.Zero                  } });                  Object3dInfo point3dinfo2 = Object3dGenerator.CreateCube(Vector3.One * 0.1f' Vector2.One).AsObject3dInfo();                  OpenTK.Graphics.OpenGL4.GL.PointSize(111);                  GenericMaterial whitemat = new GenericMaterial()                  {                      DiffuseColor = Vector3.One                  };                  Mesh3d points = Mesh3d.Create(point3dinfo2' whitemat);                  //point3dinfo.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.Points;                  //whitemat.CustomShaderProgram = ShaderProgram.Compile("Points.vertex.glsl"' "Points.fragment.glsl");                  points.ClearInstances();                    ComputeShader updateShader = new ComputeShader("PhysicsUpdater.compute.glsl");                  ShaderStorageBuffer pointsBuffer = new ShaderStorageBuffer();                  var parts = new List<Particle>();                  List<byte> bytes = new List<byte>();                  for(int i = 0; i < 1024 * 2; i++)                  {                      var part = new Particle()                      {                          Position = new Vector3(rand(-20' 20)' rand(0' 20)' rand(-10' 10))'                          Velocity = Vector3.Zero                      };                      points.AddInstance(new TransformationManager(part.Position));                        bytes.AddRange(BitConverter.GetBytes(part.Position.X));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Position.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Position.X));                        bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Y));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.Z));                      bytes.AddRange(BitConverter.GetBytes(part.Velocity.X));                  }                  pointsBuffer.MapData(bytes.ToArray());                    pointsBuffer.Use(9);                  Game.OnBeforeDraw += (z' x) =>                  {                      updateShader.Use();                      pointsBuffer.Use(9);                      updateShader.SetUniform("ParticlesCount"' 1024 * 2);                      updateShader.Dispatch(2' 1' 1);                                            pointsBuffer.Use(9);                  };                    points.UpdateMatrix();                  scene.Add(points);                                });
Magic Number,ShadowsTester,LightningTestScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\LightningTestScene.cs,LightningTestScene,The following statement contains a magic number: Game.Invoke(() =>              {                  var ground = CreateWall(new Vector2(-1000)' new Vector2(1000)' Quaternion.Identity' Vector3.Zero' new Vector3(0.1f' 0.4f' 1));                  // scene.Add(ground);                    var obj = Object3dManager.LoadFromObjSingle(Media.Get("emily.obj"));                  obj.RecalulateNormals(Object3dManager.NormalRecalculationType.Smooth' 1);                  var t1 = CreateModel(obj.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                    t1.GetLodLevel(0).Material.SetDiffuseTexture("00_diffuse_unlit_unpainted.png");                  t1.GetLodLevel(0).Material.SetSpecularTexture("00_specular_unlit_unpainted.png");                  t1.GetLodLevel(0).Material.SetBumpTexture("00_displacement_misdfcro.png");                                    scene.Add(t1);                    var obj2 = Object3dManager.LoadFromObjSingle(Media.Get("emilylashes.obj"));                  var t2 = CreateModel(obj2.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                    t2.GetLodLevel(0).Material.DiffuseColor = Vector3.Zero;                  t2.GetLodLevel(0).Material.SpecularColor = Vector3.Zero;                    scene.Add(t2);                   // var obj2 = Object3dManager.LoadFromObjSingle(Media.Get("emilyeyes.obj"));                //  var t2 = CreateModel(obj2.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                  //  t2.GetLodLevel(0).Material.DiffuseColor = Vector3.Zero;                //  t2.GetLodLevel(0).Material.SpecularColor = Vector3.Zero;                  //  scene.Add(t2);                    /*                  var m = CreateDiffuseModelFromObj("hipolysphere.obj"' new Vector3(1));                  m.GetLodLevel(0).Material.SpecularColor = new Vector3(1.0f);                  m.GetLodLevel(0).Material.DiffuseColor= new Vector3(0.0f);                  m.GetLodLevel(0).Material.Roughness = 0.9f;                  scene.Add(m);*/                    /* var green = CreateWall(new Vector2(-100)' new Vector2(100)' Quaternion.FromAxisAngle(Vector3.UnitX' MathHelper.DegreesToRadians(90))' Vector3.Zero' new Vector3(0.2f' 1' 0.3f));                   var red = CreateWall(new Vector2(-100)' new Vector2(100)' Quaternion.FromAxisAngle(Vector3.UnitZ' MathHelper.DegreesToRadians(90))' Vector3.Zero' new Vector3(1' 0.2f' 0.2f));                   green.GetInstance(0).Translate(0' 0' -15);                   red.GetInstance(0).Translate(15' 0' 0);                     var lucy = CreateDiffuseModelFromRaw("lucy.vbo.raw"' new Vector3(1));                   //scene.Add(green);                   //scene.Add(red);                     Game.CascadeShadowMaps.SetDirection(Quaternion.FromAxisAngle(Vector3.UnitX' MathHelper.DegreesToRadians(-25)));                     scene.Add(lucy);                     float[] billboardfloats = {                       -1.0f' 0' 0' 0.0f' 0.0f' 0.0f' 0.0f' 0.0f'                       1.0f' 0' 0' 1.0f' 0.0f' 0.0f' 0.0f' 0.0f'                       -1.0f' 1.0f' 0' 0.0f' 1.0f' 0.0f' 0.0f' 0.0f'                       1.0f' 1.0f' 0' 1.0f' 1.0f' 0.0f' 0.0f' 0.0f                   };                     var billboardObj = new Object3dManager(VertexInfo.FromFloatArray(billboardfloats)).AsObject3dInfo();                   billboardObj.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.TriangleStrip;                   string[] trees = new string[] { "vurt_PineSnowy.dds" };                   for(int id = 0; id < 1; id++)                   {                       var billboardMaterial = new GenericMaterial();                       billboardMaterial.UseForwardRenderer = true;                       billboardMaterial.IsBillboard = true;                       billboardMaterial.SetDiffuseTexture(trees[id]);                       //billboardMaterial.SetNormalsTexture("alphatest_n.png");                       billboardMaterial.Roughness = 0.8f;                       billboardMaterial.InvertUVy = true;                         var billboardMesh = Mesh3d.Create(billboardObj' billboardMaterial);                       billboardMesh.ClearInstances();                         for(int i = 0; i < 30000; i++)                       {                           var pos = new Vector3(rand(-1000' 1000)' 0' rand(-1000' 1000));                           float uniscale = rand(1.7f' 2.5f);                           var scale = new Vector3(uniscale' rand(12.3f' 12.4f)' uniscale);                           billboardMesh.AddInstance(new TransformationManager(pos' scale));                       }                       billboardMesh.UpdateMatrix();                         Game.CreateThread(() =>                       {                           while(true)                           {                               //billboardMesh.IterationSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position' 50);                               billboardMesh.FullSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position);                               billboardMesh.UpdateMatrix(false);                           }                       });                             scene.Add(billboardMesh);                   }                   string[] vegs = new string[] { "fieldgrassobj01.dds"' "vurt_brownplants.dds" };                   for(int id = 0; id < 1; id++)                   {                       var billboardMaterial = new GenericMaterial();                       billboardMaterial.UseForwardRenderer = true;                       billboardMaterial.IsBillboard = true;                       billboardMaterial.SetDiffuseTexture(vegs[id]);                       //billboardMaterial.SetNormalsTexture("alphatest_n.png");                       billboardMaterial.Roughness = 0.8f;                       billboardMaterial.InvertUVy = true;                       billboardMaterial.Blending = GenericMaterial.BlendingEnum.Alpha;                         var billboardMesh = Mesh3d.Create(billboardObj' billboardMaterial);                       billboardMesh.ClearInstances();                         for(int i = 0; i < 3000000; i++)                       {                           var pos = new Vector3(rand(-1000' 1000)' 0' rand(-1000' 1000));                           float uniscale = rand(1.7f' 2.5f);                           var scale = new Vector3(uniscale' rand(2.3f' 2.4f)' uniscale);                           billboardMesh.AddInstance(new TransformationManager(pos' scale));                       }                       billboardMesh.UpdateMatrix();                         Game.CreateThread(() =>                       {                           while(true)                           {                               //billboardMesh.IterationSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position' 50);                               billboardMesh.FullSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position);                               billboardMesh.UpdateMatrix(false);                           }                       });                             scene.Add(billboardMesh);                   }*/                    /*                  var trootobj = new Object3dInfo(Object3dManager.LoadFromObjSingle(Media.Get("tree2r.obj")).Vertices);                  var tleavobj = new Object3dInfo(Object3dManager.LoadFromObjSingle(Media.Get("tree2l.obj")).Vertices);                  var rootmaterial = new GenericMaterial()                  {                      Roughness = 0.9f'                      DiffuseColor = Vector3.One'                      SpecularColor = Vector3.Zero                  };                  var leavmaterial = new GenericMaterial()                  {                      Roughness = 0.9f'                      DiffuseColor = Vector3.One'                      SpecularColor = Vector3.Zero                  };                //  leavmaterial.SetAlphaTexture("Branches0018_1_S_mask.png");                  leavmaterial.SetDiffuseTexture("Hedge 00 seamless.jpg");                    var trm = Mesh3d.Create(trootobj' rootmaterial);                  var tlm = Mesh3d.Create(tleavobj' leavmaterial);                  scene.Add(trm);                  scene.Add(tlm);                    trm.ClearInstances();                  tlm.ClearInstances();                        for(int i = 0; i < 100; i++)                  {                      var pos = new Vector3(rand(-100' 100)' 0' rand(-100' 100));                      float uniscale = rand(0.7f' 1.5f);                      var scale = new Vector3(uniscale' rand(0.7f' 3.0f)' uniscale);                      trm.AddInstance(new TransformationManager(pos' scale));                      tlm.AddInstance(new TransformationManager(pos' scale));                  }                  trm.UpdateMatrix();                  tlm.UpdateMatrix();                  */                  /*                  var cubeMaterial = new GenericMaterial(new Vector3(1' 0' 0));                  var cubeObj3d = new Object3dInfo(Object3dGenerator.CreateCube(new Vector3(1)' new Vector2(1)).Vertices);                  //var cubeObj3d = new Object3dInfo(Object3dGenerator.CreateGround(new Vector2(-1)' new Vector2(1)' new Vector2(1)' Vector3.UnitY).Vertices);                                    var cubes = Mesh3d.Create(cubeObj3d' cubeMaterial);                  cubes.ClearInstances();                    for(int x = 0; x < 100; x++)                      for(int y = 0; y < 100; y++)                          for(int z = 0; z < 100; z++)                          {                              cubes.AddInstance(new TransformationManager(new Vector3(x' y' z) * 4));                          }                  cubes.UpdateMatrix();                    scene.Add(cubes);*/                    /*                  var cityMgr = Object3dManager.LoadFromObjSingle(Media.Get("somecity.obj"));                  cityMgr.TryToFixVertexWinding();                  cityMgr.RecalulateNormals(Object3dManager.NormalRecalculationType.Flat);                  var cityObj = cityMgr.AsObject3dInfo();                  var cityMat = new GenericMaterial()                  {                      DiffuseColor = new Vector3(1' 0.89f' 0.97f)'                      Roughness = 0.2f                  };                  var cityMesh = Mesh3d.Create(cityObj' cityMat);                  cityMesh.GetInstance(0).Translate(0' 0.1f' 0);                  scene.Add(cityMesh);*/                  //                  //  var citimul = Object3dManager.LoadSceneFromObj("somecity.obj"' "somecity.mtl");                  //  foreach(var m in citimul)                  //      scene.Add(m);                  /*                  var terrain = new Object3dInfo( Object3dGenerator.CreateTerrain(new Vector2(-10000' -10000)' new Vector2(10000' 10000)' new Vector2(1' -1)' Vector3.UnitY' 512' (x'y) => 0).Vertices );                  var terrainMaterial = new GenericMaterial();                  terrainMaterial.Type = GenericMaterial.MaterialType.TessellatedTerrain;                  terrainMaterial.TessellationMultiplier = 1.0f;                  terrainMaterial.ParallaxHeightMultiplier = 200.0f;                  terrainMaterial.SetBumpTexture("ee.png");                  var terrainMesh = Mesh3d.Create(terrain' terrainMaterial);                  scene.Add(terrainMesh);*/                    // DynamicCubeMapController.Create();              });
Magic Number,ShadowsTester,LightningTestScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\LightningTestScene.cs,LightningTestScene,The following statement contains a magic number: Game.Invoke(() =>              {                  var ground = CreateWall(new Vector2(-1000)' new Vector2(1000)' Quaternion.Identity' Vector3.Zero' new Vector3(0.1f' 0.4f' 1));                  // scene.Add(ground);                    var obj = Object3dManager.LoadFromObjSingle(Media.Get("emily.obj"));                  obj.RecalulateNormals(Object3dManager.NormalRecalculationType.Smooth' 1);                  var t1 = CreateModel(obj.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                    t1.GetLodLevel(0).Material.SetDiffuseTexture("00_diffuse_unlit_unpainted.png");                  t1.GetLodLevel(0).Material.SetSpecularTexture("00_specular_unlit_unpainted.png");                  t1.GetLodLevel(0).Material.SetBumpTexture("00_displacement_misdfcro.png");                                    scene.Add(t1);                    var obj2 = Object3dManager.LoadFromObjSingle(Media.Get("emilylashes.obj"));                  var t2 = CreateModel(obj2.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                    t2.GetLodLevel(0).Material.DiffuseColor = Vector3.Zero;                  t2.GetLodLevel(0).Material.SpecularColor = Vector3.Zero;                    scene.Add(t2);                   // var obj2 = Object3dManager.LoadFromObjSingle(Media.Get("emilyeyes.obj"));                //  var t2 = CreateModel(obj2.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                  //  t2.GetLodLevel(0).Material.DiffuseColor = Vector3.Zero;                //  t2.GetLodLevel(0).Material.SpecularColor = Vector3.Zero;                  //  scene.Add(t2);                    /*                  var m = CreateDiffuseModelFromObj("hipolysphere.obj"' new Vector3(1));                  m.GetLodLevel(0).Material.SpecularColor = new Vector3(1.0f);                  m.GetLodLevel(0).Material.DiffuseColor= new Vector3(0.0f);                  m.GetLodLevel(0).Material.Roughness = 0.9f;                  scene.Add(m);*/                    /* var green = CreateWall(new Vector2(-100)' new Vector2(100)' Quaternion.FromAxisAngle(Vector3.UnitX' MathHelper.DegreesToRadians(90))' Vector3.Zero' new Vector3(0.2f' 1' 0.3f));                   var red = CreateWall(new Vector2(-100)' new Vector2(100)' Quaternion.FromAxisAngle(Vector3.UnitZ' MathHelper.DegreesToRadians(90))' Vector3.Zero' new Vector3(1' 0.2f' 0.2f));                   green.GetInstance(0).Translate(0' 0' -15);                   red.GetInstance(0).Translate(15' 0' 0);                     var lucy = CreateDiffuseModelFromRaw("lucy.vbo.raw"' new Vector3(1));                   //scene.Add(green);                   //scene.Add(red);                     Game.CascadeShadowMaps.SetDirection(Quaternion.FromAxisAngle(Vector3.UnitX' MathHelper.DegreesToRadians(-25)));                     scene.Add(lucy);                     float[] billboardfloats = {                       -1.0f' 0' 0' 0.0f' 0.0f' 0.0f' 0.0f' 0.0f'                       1.0f' 0' 0' 1.0f' 0.0f' 0.0f' 0.0f' 0.0f'                       -1.0f' 1.0f' 0' 0.0f' 1.0f' 0.0f' 0.0f' 0.0f'                       1.0f' 1.0f' 0' 1.0f' 1.0f' 0.0f' 0.0f' 0.0f                   };                     var billboardObj = new Object3dManager(VertexInfo.FromFloatArray(billboardfloats)).AsObject3dInfo();                   billboardObj.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.TriangleStrip;                   string[] trees = new string[] { "vurt_PineSnowy.dds" };                   for(int id = 0; id < 1; id++)                   {                       var billboardMaterial = new GenericMaterial();                       billboardMaterial.UseForwardRenderer = true;                       billboardMaterial.IsBillboard = true;                       billboardMaterial.SetDiffuseTexture(trees[id]);                       //billboardMaterial.SetNormalsTexture("alphatest_n.png");                       billboardMaterial.Roughness = 0.8f;                       billboardMaterial.InvertUVy = true;                         var billboardMesh = Mesh3d.Create(billboardObj' billboardMaterial);                       billboardMesh.ClearInstances();                         for(int i = 0; i < 30000; i++)                       {                           var pos = new Vector3(rand(-1000' 1000)' 0' rand(-1000' 1000));                           float uniscale = rand(1.7f' 2.5f);                           var scale = new Vector3(uniscale' rand(12.3f' 12.4f)' uniscale);                           billboardMesh.AddInstance(new TransformationManager(pos' scale));                       }                       billboardMesh.UpdateMatrix();                         Game.CreateThread(() =>                       {                           while(true)                           {                               //billboardMesh.IterationSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position' 50);                               billboardMesh.FullSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position);                               billboardMesh.UpdateMatrix(false);                           }                       });                             scene.Add(billboardMesh);                   }                   string[] vegs = new string[] { "fieldgrassobj01.dds"' "vurt_brownplants.dds" };                   for(int id = 0; id < 1; id++)                   {                       var billboardMaterial = new GenericMaterial();                       billboardMaterial.UseForwardRenderer = true;                       billboardMaterial.IsBillboard = true;                       billboardMaterial.SetDiffuseTexture(vegs[id]);                       //billboardMaterial.SetNormalsTexture("alphatest_n.png");                       billboardMaterial.Roughness = 0.8f;                       billboardMaterial.InvertUVy = true;                       billboardMaterial.Blending = GenericMaterial.BlendingEnum.Alpha;                         var billboardMesh = Mesh3d.Create(billboardObj' billboardMaterial);                       billboardMesh.ClearInstances();                         for(int i = 0; i < 3000000; i++)                       {                           var pos = new Vector3(rand(-1000' 1000)' 0' rand(-1000' 1000));                           float uniscale = rand(1.7f' 2.5f);                           var scale = new Vector3(uniscale' rand(2.3f' 2.4f)' uniscale);                           billboardMesh.AddInstance(new TransformationManager(pos' scale));                       }                       billboardMesh.UpdateMatrix();                         Game.CreateThread(() =>                       {                           while(true)                           {                               //billboardMesh.IterationSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position' 50);                               billboardMesh.FullSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position);                               billboardMesh.UpdateMatrix(false);                           }                       });                             scene.Add(billboardMesh);                   }*/                    /*                  var trootobj = new Object3dInfo(Object3dManager.LoadFromObjSingle(Media.Get("tree2r.obj")).Vertices);                  var tleavobj = new Object3dInfo(Object3dManager.LoadFromObjSingle(Media.Get("tree2l.obj")).Vertices);                  var rootmaterial = new GenericMaterial()                  {                      Roughness = 0.9f'                      DiffuseColor = Vector3.One'                      SpecularColor = Vector3.Zero                  };                  var leavmaterial = new GenericMaterial()                  {                      Roughness = 0.9f'                      DiffuseColor = Vector3.One'                      SpecularColor = Vector3.Zero                  };                //  leavmaterial.SetAlphaTexture("Branches0018_1_S_mask.png");                  leavmaterial.SetDiffuseTexture("Hedge 00 seamless.jpg");                    var trm = Mesh3d.Create(trootobj' rootmaterial);                  var tlm = Mesh3d.Create(tleavobj' leavmaterial);                  scene.Add(trm);                  scene.Add(tlm);                    trm.ClearInstances();                  tlm.ClearInstances();                        for(int i = 0; i < 100; i++)                  {                      var pos = new Vector3(rand(-100' 100)' 0' rand(-100' 100));                      float uniscale = rand(0.7f' 1.5f);                      var scale = new Vector3(uniscale' rand(0.7f' 3.0f)' uniscale);                      trm.AddInstance(new TransformationManager(pos' scale));                      tlm.AddInstance(new TransformationManager(pos' scale));                  }                  trm.UpdateMatrix();                  tlm.UpdateMatrix();                  */                  /*                  var cubeMaterial = new GenericMaterial(new Vector3(1' 0' 0));                  var cubeObj3d = new Object3dInfo(Object3dGenerator.CreateCube(new Vector3(1)' new Vector2(1)).Vertices);                  //var cubeObj3d = new Object3dInfo(Object3dGenerator.CreateGround(new Vector2(-1)' new Vector2(1)' new Vector2(1)' Vector3.UnitY).Vertices);                                    var cubes = Mesh3d.Create(cubeObj3d' cubeMaterial);                  cubes.ClearInstances();                    for(int x = 0; x < 100; x++)                      for(int y = 0; y < 100; y++)                          for(int z = 0; z < 100; z++)                          {                              cubes.AddInstance(new TransformationManager(new Vector3(x' y' z) * 4));                          }                  cubes.UpdateMatrix();                    scene.Add(cubes);*/                    /*                  var cityMgr = Object3dManager.LoadFromObjSingle(Media.Get("somecity.obj"));                  cityMgr.TryToFixVertexWinding();                  cityMgr.RecalulateNormals(Object3dManager.NormalRecalculationType.Flat);                  var cityObj = cityMgr.AsObject3dInfo();                  var cityMat = new GenericMaterial()                  {                      DiffuseColor = new Vector3(1' 0.89f' 0.97f)'                      Roughness = 0.2f                  };                  var cityMesh = Mesh3d.Create(cityObj' cityMat);                  cityMesh.GetInstance(0).Translate(0' 0.1f' 0);                  scene.Add(cityMesh);*/                  //                  //  var citimul = Object3dManager.LoadSceneFromObj("somecity.obj"' "somecity.mtl");                  //  foreach(var m in citimul)                  //      scene.Add(m);                  /*                  var terrain = new Object3dInfo( Object3dGenerator.CreateTerrain(new Vector2(-10000' -10000)' new Vector2(10000' 10000)' new Vector2(1' -1)' Vector3.UnitY' 512' (x'y) => 0).Vertices );                  var terrainMaterial = new GenericMaterial();                  terrainMaterial.Type = GenericMaterial.MaterialType.TessellatedTerrain;                  terrainMaterial.TessellationMultiplier = 1.0f;                  terrainMaterial.ParallaxHeightMultiplier = 200.0f;                  terrainMaterial.SetBumpTexture("ee.png");                  var terrainMesh = Mesh3d.Create(terrain' terrainMaterial);                  scene.Add(terrainMesh);*/                    // DynamicCubeMapController.Create();              });
Magic Number,ShadowsTester,LightningTestScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\LightningTestScene.cs,LightningTestScene,The following statement contains a magic number: Game.Invoke(() =>              {                  var ground = CreateWall(new Vector2(-1000)' new Vector2(1000)' Quaternion.Identity' Vector3.Zero' new Vector3(0.1f' 0.4f' 1));                  // scene.Add(ground);                    var obj = Object3dManager.LoadFromObjSingle(Media.Get("emily.obj"));                  obj.RecalulateNormals(Object3dManager.NormalRecalculationType.Smooth' 1);                  var t1 = CreateModel(obj.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                    t1.GetLodLevel(0).Material.SetDiffuseTexture("00_diffuse_unlit_unpainted.png");                  t1.GetLodLevel(0).Material.SetSpecularTexture("00_specular_unlit_unpainted.png");                  t1.GetLodLevel(0).Material.SetBumpTexture("00_displacement_misdfcro.png");                                    scene.Add(t1);                    var obj2 = Object3dManager.LoadFromObjSingle(Media.Get("emilylashes.obj"));                  var t2 = CreateModel(obj2.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                    t2.GetLodLevel(0).Material.DiffuseColor = Vector3.Zero;                  t2.GetLodLevel(0).Material.SpecularColor = Vector3.Zero;                    scene.Add(t2);                   // var obj2 = Object3dManager.LoadFromObjSingle(Media.Get("emilyeyes.obj"));                //  var t2 = CreateModel(obj2.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                  //  t2.GetLodLevel(0).Material.DiffuseColor = Vector3.Zero;                //  t2.GetLodLevel(0).Material.SpecularColor = Vector3.Zero;                  //  scene.Add(t2);                    /*                  var m = CreateDiffuseModelFromObj("hipolysphere.obj"' new Vector3(1));                  m.GetLodLevel(0).Material.SpecularColor = new Vector3(1.0f);                  m.GetLodLevel(0).Material.DiffuseColor= new Vector3(0.0f);                  m.GetLodLevel(0).Material.Roughness = 0.9f;                  scene.Add(m);*/                    /* var green = CreateWall(new Vector2(-100)' new Vector2(100)' Quaternion.FromAxisAngle(Vector3.UnitX' MathHelper.DegreesToRadians(90))' Vector3.Zero' new Vector3(0.2f' 1' 0.3f));                   var red = CreateWall(new Vector2(-100)' new Vector2(100)' Quaternion.FromAxisAngle(Vector3.UnitZ' MathHelper.DegreesToRadians(90))' Vector3.Zero' new Vector3(1' 0.2f' 0.2f));                   green.GetInstance(0).Translate(0' 0' -15);                   red.GetInstance(0).Translate(15' 0' 0);                     var lucy = CreateDiffuseModelFromRaw("lucy.vbo.raw"' new Vector3(1));                   //scene.Add(green);                   //scene.Add(red);                     Game.CascadeShadowMaps.SetDirection(Quaternion.FromAxisAngle(Vector3.UnitX' MathHelper.DegreesToRadians(-25)));                     scene.Add(lucy);                     float[] billboardfloats = {                       -1.0f' 0' 0' 0.0f' 0.0f' 0.0f' 0.0f' 0.0f'                       1.0f' 0' 0' 1.0f' 0.0f' 0.0f' 0.0f' 0.0f'                       -1.0f' 1.0f' 0' 0.0f' 1.0f' 0.0f' 0.0f' 0.0f'                       1.0f' 1.0f' 0' 1.0f' 1.0f' 0.0f' 0.0f' 0.0f                   };                     var billboardObj = new Object3dManager(VertexInfo.FromFloatArray(billboardfloats)).AsObject3dInfo();                   billboardObj.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.TriangleStrip;                   string[] trees = new string[] { "vurt_PineSnowy.dds" };                   for(int id = 0; id < 1; id++)                   {                       var billboardMaterial = new GenericMaterial();                       billboardMaterial.UseForwardRenderer = true;                       billboardMaterial.IsBillboard = true;                       billboardMaterial.SetDiffuseTexture(trees[id]);                       //billboardMaterial.SetNormalsTexture("alphatest_n.png");                       billboardMaterial.Roughness = 0.8f;                       billboardMaterial.InvertUVy = true;                         var billboardMesh = Mesh3d.Create(billboardObj' billboardMaterial);                       billboardMesh.ClearInstances();                         for(int i = 0; i < 30000; i++)                       {                           var pos = new Vector3(rand(-1000' 1000)' 0' rand(-1000' 1000));                           float uniscale = rand(1.7f' 2.5f);                           var scale = new Vector3(uniscale' rand(12.3f' 12.4f)' uniscale);                           billboardMesh.AddInstance(new TransformationManager(pos' scale));                       }                       billboardMesh.UpdateMatrix();                         Game.CreateThread(() =>                       {                           while(true)                           {                               //billboardMesh.IterationSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position' 50);                               billboardMesh.FullSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position);                               billboardMesh.UpdateMatrix(false);                           }                       });                             scene.Add(billboardMesh);                   }                   string[] vegs = new string[] { "fieldgrassobj01.dds"' "vurt_brownplants.dds" };                   for(int id = 0; id < 1; id++)                   {                       var billboardMaterial = new GenericMaterial();                       billboardMaterial.UseForwardRenderer = true;                       billboardMaterial.IsBillboard = true;                       billboardMaterial.SetDiffuseTexture(vegs[id]);                       //billboardMaterial.SetNormalsTexture("alphatest_n.png");                       billboardMaterial.Roughness = 0.8f;                       billboardMaterial.InvertUVy = true;                       billboardMaterial.Blending = GenericMaterial.BlendingEnum.Alpha;                         var billboardMesh = Mesh3d.Create(billboardObj' billboardMaterial);                       billboardMesh.ClearInstances();                         for(int i = 0; i < 3000000; i++)                       {                           var pos = new Vector3(rand(-1000' 1000)' 0' rand(-1000' 1000));                           float uniscale = rand(1.7f' 2.5f);                           var scale = new Vector3(uniscale' rand(2.3f' 2.4f)' uniscale);                           billboardMesh.AddInstance(new TransformationManager(pos' scale));                       }                       billboardMesh.UpdateMatrix();                         Game.CreateThread(() =>                       {                           while(true)                           {                               //billboardMesh.IterationSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position' 50);                               billboardMesh.FullSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position);                               billboardMesh.UpdateMatrix(false);                           }                       });                             scene.Add(billboardMesh);                   }*/                    /*                  var trootobj = new Object3dInfo(Object3dManager.LoadFromObjSingle(Media.Get("tree2r.obj")).Vertices);                  var tleavobj = new Object3dInfo(Object3dManager.LoadFromObjSingle(Media.Get("tree2l.obj")).Vertices);                  var rootmaterial = new GenericMaterial()                  {                      Roughness = 0.9f'                      DiffuseColor = Vector3.One'                      SpecularColor = Vector3.Zero                  };                  var leavmaterial = new GenericMaterial()                  {                      Roughness = 0.9f'                      DiffuseColor = Vector3.One'                      SpecularColor = Vector3.Zero                  };                //  leavmaterial.SetAlphaTexture("Branches0018_1_S_mask.png");                  leavmaterial.SetDiffuseTexture("Hedge 00 seamless.jpg");                    var trm = Mesh3d.Create(trootobj' rootmaterial);                  var tlm = Mesh3d.Create(tleavobj' leavmaterial);                  scene.Add(trm);                  scene.Add(tlm);                    trm.ClearInstances();                  tlm.ClearInstances();                        for(int i = 0; i < 100; i++)                  {                      var pos = new Vector3(rand(-100' 100)' 0' rand(-100' 100));                      float uniscale = rand(0.7f' 1.5f);                      var scale = new Vector3(uniscale' rand(0.7f' 3.0f)' uniscale);                      trm.AddInstance(new TransformationManager(pos' scale));                      tlm.AddInstance(new TransformationManager(pos' scale));                  }                  trm.UpdateMatrix();                  tlm.UpdateMatrix();                  */                  /*                  var cubeMaterial = new GenericMaterial(new Vector3(1' 0' 0));                  var cubeObj3d = new Object3dInfo(Object3dGenerator.CreateCube(new Vector3(1)' new Vector2(1)).Vertices);                  //var cubeObj3d = new Object3dInfo(Object3dGenerator.CreateGround(new Vector2(-1)' new Vector2(1)' new Vector2(1)' Vector3.UnitY).Vertices);                                    var cubes = Mesh3d.Create(cubeObj3d' cubeMaterial);                  cubes.ClearInstances();                    for(int x = 0; x < 100; x++)                      for(int y = 0; y < 100; y++)                          for(int z = 0; z < 100; z++)                          {                              cubes.AddInstance(new TransformationManager(new Vector3(x' y' z) * 4));                          }                  cubes.UpdateMatrix();                    scene.Add(cubes);*/                    /*                  var cityMgr = Object3dManager.LoadFromObjSingle(Media.Get("somecity.obj"));                  cityMgr.TryToFixVertexWinding();                  cityMgr.RecalulateNormals(Object3dManager.NormalRecalculationType.Flat);                  var cityObj = cityMgr.AsObject3dInfo();                  var cityMat = new GenericMaterial()                  {                      DiffuseColor = new Vector3(1' 0.89f' 0.97f)'                      Roughness = 0.2f                  };                  var cityMesh = Mesh3d.Create(cityObj' cityMat);                  cityMesh.GetInstance(0).Translate(0' 0.1f' 0);                  scene.Add(cityMesh);*/                  //                  //  var citimul = Object3dManager.LoadSceneFromObj("somecity.obj"' "somecity.mtl");                  //  foreach(var m in citimul)                  //      scene.Add(m);                  /*                  var terrain = new Object3dInfo( Object3dGenerator.CreateTerrain(new Vector2(-10000' -10000)' new Vector2(10000' 10000)' new Vector2(1' -1)' Vector3.UnitY' 512' (x'y) => 0).Vertices );                  var terrainMaterial = new GenericMaterial();                  terrainMaterial.Type = GenericMaterial.MaterialType.TessellatedTerrain;                  terrainMaterial.TessellationMultiplier = 1.0f;                  terrainMaterial.ParallaxHeightMultiplier = 200.0f;                  terrainMaterial.SetBumpTexture("ee.png");                  var terrainMesh = Mesh3d.Create(terrain' terrainMaterial);                  scene.Add(terrainMesh);*/                    // DynamicCubeMapController.Create();              });
Magic Number,ShadowsTester,LightningTestScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\LightningTestScene.cs,LightningTestScene,The following statement contains a magic number: Game.Invoke(() =>              {                  var ground = CreateWall(new Vector2(-1000)' new Vector2(1000)' Quaternion.Identity' Vector3.Zero' new Vector3(0.1f' 0.4f' 1));                  // scene.Add(ground);                    var obj = Object3dManager.LoadFromObjSingle(Media.Get("emily.obj"));                  obj.RecalulateNormals(Object3dManager.NormalRecalculationType.Smooth' 1);                  var t1 = CreateModel(obj.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                    t1.GetLodLevel(0).Material.SetDiffuseTexture("00_diffuse_unlit_unpainted.png");                  t1.GetLodLevel(0).Material.SetSpecularTexture("00_specular_unlit_unpainted.png");                  t1.GetLodLevel(0).Material.SetBumpTexture("00_displacement_misdfcro.png");                                    scene.Add(t1);                    var obj2 = Object3dManager.LoadFromObjSingle(Media.Get("emilylashes.obj"));                  var t2 = CreateModel(obj2.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                    t2.GetLodLevel(0).Material.DiffuseColor = Vector3.Zero;                  t2.GetLodLevel(0).Material.SpecularColor = Vector3.Zero;                    scene.Add(t2);                   // var obj2 = Object3dManager.LoadFromObjSingle(Media.Get("emilyeyes.obj"));                //  var t2 = CreateModel(obj2.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                  //  t2.GetLodLevel(0).Material.DiffuseColor = Vector3.Zero;                //  t2.GetLodLevel(0).Material.SpecularColor = Vector3.Zero;                  //  scene.Add(t2);                    /*                  var m = CreateDiffuseModelFromObj("hipolysphere.obj"' new Vector3(1));                  m.GetLodLevel(0).Material.SpecularColor = new Vector3(1.0f);                  m.GetLodLevel(0).Material.DiffuseColor= new Vector3(0.0f);                  m.GetLodLevel(0).Material.Roughness = 0.9f;                  scene.Add(m);*/                    /* var green = CreateWall(new Vector2(-100)' new Vector2(100)' Quaternion.FromAxisAngle(Vector3.UnitX' MathHelper.DegreesToRadians(90))' Vector3.Zero' new Vector3(0.2f' 1' 0.3f));                   var red = CreateWall(new Vector2(-100)' new Vector2(100)' Quaternion.FromAxisAngle(Vector3.UnitZ' MathHelper.DegreesToRadians(90))' Vector3.Zero' new Vector3(1' 0.2f' 0.2f));                   green.GetInstance(0).Translate(0' 0' -15);                   red.GetInstance(0).Translate(15' 0' 0);                     var lucy = CreateDiffuseModelFromRaw("lucy.vbo.raw"' new Vector3(1));                   //scene.Add(green);                   //scene.Add(red);                     Game.CascadeShadowMaps.SetDirection(Quaternion.FromAxisAngle(Vector3.UnitX' MathHelper.DegreesToRadians(-25)));                     scene.Add(lucy);                     float[] billboardfloats = {                       -1.0f' 0' 0' 0.0f' 0.0f' 0.0f' 0.0f' 0.0f'                       1.0f' 0' 0' 1.0f' 0.0f' 0.0f' 0.0f' 0.0f'                       -1.0f' 1.0f' 0' 0.0f' 1.0f' 0.0f' 0.0f' 0.0f'                       1.0f' 1.0f' 0' 1.0f' 1.0f' 0.0f' 0.0f' 0.0f                   };                     var billboardObj = new Object3dManager(VertexInfo.FromFloatArray(billboardfloats)).AsObject3dInfo();                   billboardObj.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.TriangleStrip;                   string[] trees = new string[] { "vurt_PineSnowy.dds" };                   for(int id = 0; id < 1; id++)                   {                       var billboardMaterial = new GenericMaterial();                       billboardMaterial.UseForwardRenderer = true;                       billboardMaterial.IsBillboard = true;                       billboardMaterial.SetDiffuseTexture(trees[id]);                       //billboardMaterial.SetNormalsTexture("alphatest_n.png");                       billboardMaterial.Roughness = 0.8f;                       billboardMaterial.InvertUVy = true;                         var billboardMesh = Mesh3d.Create(billboardObj' billboardMaterial);                       billboardMesh.ClearInstances();                         for(int i = 0; i < 30000; i++)                       {                           var pos = new Vector3(rand(-1000' 1000)' 0' rand(-1000' 1000));                           float uniscale = rand(1.7f' 2.5f);                           var scale = new Vector3(uniscale' rand(12.3f' 12.4f)' uniscale);                           billboardMesh.AddInstance(new TransformationManager(pos' scale));                       }                       billboardMesh.UpdateMatrix();                         Game.CreateThread(() =>                       {                           while(true)                           {                               //billboardMesh.IterationSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position' 50);                               billboardMesh.FullSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position);                               billboardMesh.UpdateMatrix(false);                           }                       });                             scene.Add(billboardMesh);                   }                   string[] vegs = new string[] { "fieldgrassobj01.dds"' "vurt_brownplants.dds" };                   for(int id = 0; id < 1; id++)                   {                       var billboardMaterial = new GenericMaterial();                       billboardMaterial.UseForwardRenderer = true;                       billboardMaterial.IsBillboard = true;                       billboardMaterial.SetDiffuseTexture(vegs[id]);                       //billboardMaterial.SetNormalsTexture("alphatest_n.png");                       billboardMaterial.Roughness = 0.8f;                       billboardMaterial.InvertUVy = true;                       billboardMaterial.Blending = GenericMaterial.BlendingEnum.Alpha;                         var billboardMesh = Mesh3d.Create(billboardObj' billboardMaterial);                       billboardMesh.ClearInstances();                         for(int i = 0; i < 3000000; i++)                       {                           var pos = new Vector3(rand(-1000' 1000)' 0' rand(-1000' 1000));                           float uniscale = rand(1.7f' 2.5f);                           var scale = new Vector3(uniscale' rand(2.3f' 2.4f)' uniscale);                           billboardMesh.AddInstance(new TransformationManager(pos' scale));                       }                       billboardMesh.UpdateMatrix();                         Game.CreateThread(() =>                       {                           while(true)                           {                               //billboardMesh.IterationSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position' 50);                               billboardMesh.FullSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position);                               billboardMesh.UpdateMatrix(false);                           }                       });                             scene.Add(billboardMesh);                   }*/                    /*                  var trootobj = new Object3dInfo(Object3dManager.LoadFromObjSingle(Media.Get("tree2r.obj")).Vertices);                  var tleavobj = new Object3dInfo(Object3dManager.LoadFromObjSingle(Media.Get("tree2l.obj")).Vertices);                  var rootmaterial = new GenericMaterial()                  {                      Roughness = 0.9f'                      DiffuseColor = Vector3.One'                      SpecularColor = Vector3.Zero                  };                  var leavmaterial = new GenericMaterial()                  {                      Roughness = 0.9f'                      DiffuseColor = Vector3.One'                      SpecularColor = Vector3.Zero                  };                //  leavmaterial.SetAlphaTexture("Branches0018_1_S_mask.png");                  leavmaterial.SetDiffuseTexture("Hedge 00 seamless.jpg");                    var trm = Mesh3d.Create(trootobj' rootmaterial);                  var tlm = Mesh3d.Create(tleavobj' leavmaterial);                  scene.Add(trm);                  scene.Add(tlm);                    trm.ClearInstances();                  tlm.ClearInstances();                        for(int i = 0; i < 100; i++)                  {                      var pos = new Vector3(rand(-100' 100)' 0' rand(-100' 100));                      float uniscale = rand(0.7f' 1.5f);                      var scale = new Vector3(uniscale' rand(0.7f' 3.0f)' uniscale);                      trm.AddInstance(new TransformationManager(pos' scale));                      tlm.AddInstance(new TransformationManager(pos' scale));                  }                  trm.UpdateMatrix();                  tlm.UpdateMatrix();                  */                  /*                  var cubeMaterial = new GenericMaterial(new Vector3(1' 0' 0));                  var cubeObj3d = new Object3dInfo(Object3dGenerator.CreateCube(new Vector3(1)' new Vector2(1)).Vertices);                  //var cubeObj3d = new Object3dInfo(Object3dGenerator.CreateGround(new Vector2(-1)' new Vector2(1)' new Vector2(1)' Vector3.UnitY).Vertices);                                    var cubes = Mesh3d.Create(cubeObj3d' cubeMaterial);                  cubes.ClearInstances();                    for(int x = 0; x < 100; x++)                      for(int y = 0; y < 100; y++)                          for(int z = 0; z < 100; z++)                          {                              cubes.AddInstance(new TransformationManager(new Vector3(x' y' z) * 4));                          }                  cubes.UpdateMatrix();                    scene.Add(cubes);*/                    /*                  var cityMgr = Object3dManager.LoadFromObjSingle(Media.Get("somecity.obj"));                  cityMgr.TryToFixVertexWinding();                  cityMgr.RecalulateNormals(Object3dManager.NormalRecalculationType.Flat);                  var cityObj = cityMgr.AsObject3dInfo();                  var cityMat = new GenericMaterial()                  {                      DiffuseColor = new Vector3(1' 0.89f' 0.97f)'                      Roughness = 0.2f                  };                  var cityMesh = Mesh3d.Create(cityObj' cityMat);                  cityMesh.GetInstance(0).Translate(0' 0.1f' 0);                  scene.Add(cityMesh);*/                  //                  //  var citimul = Object3dManager.LoadSceneFromObj("somecity.obj"' "somecity.mtl");                  //  foreach(var m in citimul)                  //      scene.Add(m);                  /*                  var terrain = new Object3dInfo( Object3dGenerator.CreateTerrain(new Vector2(-10000' -10000)' new Vector2(10000' 10000)' new Vector2(1' -1)' Vector3.UnitY' 512' (x'y) => 0).Vertices );                  var terrainMaterial = new GenericMaterial();                  terrainMaterial.Type = GenericMaterial.MaterialType.TessellatedTerrain;                  terrainMaterial.TessellationMultiplier = 1.0f;                  terrainMaterial.ParallaxHeightMultiplier = 200.0f;                  terrainMaterial.SetBumpTexture("ee.png");                  var terrainMesh = Mesh3d.Create(terrain' terrainMaterial);                  scene.Add(terrainMesh);*/                    // DynamicCubeMapController.Create();              });
Magic Number,ShadowsTester,LightningTestScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\LightningTestScene.cs,LightningTestScene,The following statement contains a magic number: Game.Invoke(() =>              {                  var ground = CreateWall(new Vector2(-1000)' new Vector2(1000)' Quaternion.Identity' Vector3.Zero' new Vector3(0.1f' 0.4f' 1));                  // scene.Add(ground);                    var obj = Object3dManager.LoadFromObjSingle(Media.Get("emily.obj"));                  obj.RecalulateNormals(Object3dManager.NormalRecalculationType.Smooth' 1);                  var t1 = CreateModel(obj.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                    t1.GetLodLevel(0).Material.SetDiffuseTexture("00_diffuse_unlit_unpainted.png");                  t1.GetLodLevel(0).Material.SetSpecularTexture("00_specular_unlit_unpainted.png");                  t1.GetLodLevel(0).Material.SetBumpTexture("00_displacement_misdfcro.png");                                    scene.Add(t1);                    var obj2 = Object3dManager.LoadFromObjSingle(Media.Get("emilylashes.obj"));                  var t2 = CreateModel(obj2.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                    t2.GetLodLevel(0).Material.DiffuseColor = Vector3.Zero;                  t2.GetLodLevel(0).Material.SpecularColor = Vector3.Zero;                    scene.Add(t2);                   // var obj2 = Object3dManager.LoadFromObjSingle(Media.Get("emilyeyes.obj"));                //  var t2 = CreateModel(obj2.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                  //  t2.GetLodLevel(0).Material.DiffuseColor = Vector3.Zero;                //  t2.GetLodLevel(0).Material.SpecularColor = Vector3.Zero;                  //  scene.Add(t2);                    /*                  var m = CreateDiffuseModelFromObj("hipolysphere.obj"' new Vector3(1));                  m.GetLodLevel(0).Material.SpecularColor = new Vector3(1.0f);                  m.GetLodLevel(0).Material.DiffuseColor= new Vector3(0.0f);                  m.GetLodLevel(0).Material.Roughness = 0.9f;                  scene.Add(m);*/                    /* var green = CreateWall(new Vector2(-100)' new Vector2(100)' Quaternion.FromAxisAngle(Vector3.UnitX' MathHelper.DegreesToRadians(90))' Vector3.Zero' new Vector3(0.2f' 1' 0.3f));                   var red = CreateWall(new Vector2(-100)' new Vector2(100)' Quaternion.FromAxisAngle(Vector3.UnitZ' MathHelper.DegreesToRadians(90))' Vector3.Zero' new Vector3(1' 0.2f' 0.2f));                   green.GetInstance(0).Translate(0' 0' -15);                   red.GetInstance(0).Translate(15' 0' 0);                     var lucy = CreateDiffuseModelFromRaw("lucy.vbo.raw"' new Vector3(1));                   //scene.Add(green);                   //scene.Add(red);                     Game.CascadeShadowMaps.SetDirection(Quaternion.FromAxisAngle(Vector3.UnitX' MathHelper.DegreesToRadians(-25)));                     scene.Add(lucy);                     float[] billboardfloats = {                       -1.0f' 0' 0' 0.0f' 0.0f' 0.0f' 0.0f' 0.0f'                       1.0f' 0' 0' 1.0f' 0.0f' 0.0f' 0.0f' 0.0f'                       -1.0f' 1.0f' 0' 0.0f' 1.0f' 0.0f' 0.0f' 0.0f'                       1.0f' 1.0f' 0' 1.0f' 1.0f' 0.0f' 0.0f' 0.0f                   };                     var billboardObj = new Object3dManager(VertexInfo.FromFloatArray(billboardfloats)).AsObject3dInfo();                   billboardObj.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.TriangleStrip;                   string[] trees = new string[] { "vurt_PineSnowy.dds" };                   for(int id = 0; id < 1; id++)                   {                       var billboardMaterial = new GenericMaterial();                       billboardMaterial.UseForwardRenderer = true;                       billboardMaterial.IsBillboard = true;                       billboardMaterial.SetDiffuseTexture(trees[id]);                       //billboardMaterial.SetNormalsTexture("alphatest_n.png");                       billboardMaterial.Roughness = 0.8f;                       billboardMaterial.InvertUVy = true;                         var billboardMesh = Mesh3d.Create(billboardObj' billboardMaterial);                       billboardMesh.ClearInstances();                         for(int i = 0; i < 30000; i++)                       {                           var pos = new Vector3(rand(-1000' 1000)' 0' rand(-1000' 1000));                           float uniscale = rand(1.7f' 2.5f);                           var scale = new Vector3(uniscale' rand(12.3f' 12.4f)' uniscale);                           billboardMesh.AddInstance(new TransformationManager(pos' scale));                       }                       billboardMesh.UpdateMatrix();                         Game.CreateThread(() =>                       {                           while(true)                           {                               //billboardMesh.IterationSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position' 50);                               billboardMesh.FullSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position);                               billboardMesh.UpdateMatrix(false);                           }                       });                             scene.Add(billboardMesh);                   }                   string[] vegs = new string[] { "fieldgrassobj01.dds"' "vurt_brownplants.dds" };                   for(int id = 0; id < 1; id++)                   {                       var billboardMaterial = new GenericMaterial();                       billboardMaterial.UseForwardRenderer = true;                       billboardMaterial.IsBillboard = true;                       billboardMaterial.SetDiffuseTexture(vegs[id]);                       //billboardMaterial.SetNormalsTexture("alphatest_n.png");                       billboardMaterial.Roughness = 0.8f;                       billboardMaterial.InvertUVy = true;                       billboardMaterial.Blending = GenericMaterial.BlendingEnum.Alpha;                         var billboardMesh = Mesh3d.Create(billboardObj' billboardMaterial);                       billboardMesh.ClearInstances();                         for(int i = 0; i < 3000000; i++)                       {                           var pos = new Vector3(rand(-1000' 1000)' 0' rand(-1000' 1000));                           float uniscale = rand(1.7f' 2.5f);                           var scale = new Vector3(uniscale' rand(2.3f' 2.4f)' uniscale);                           billboardMesh.AddInstance(new TransformationManager(pos' scale));                       }                       billboardMesh.UpdateMatrix();                         Game.CreateThread(() =>                       {                           while(true)                           {                               //billboardMesh.IterationSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position' 50);                               billboardMesh.FullSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position);                               billboardMesh.UpdateMatrix(false);                           }                       });                             scene.Add(billboardMesh);                   }*/                    /*                  var trootobj = new Object3dInfo(Object3dManager.LoadFromObjSingle(Media.Get("tree2r.obj")).Vertices);                  var tleavobj = new Object3dInfo(Object3dManager.LoadFromObjSingle(Media.Get("tree2l.obj")).Vertices);                  var rootmaterial = new GenericMaterial()                  {                      Roughness = 0.9f'                      DiffuseColor = Vector3.One'                      SpecularColor = Vector3.Zero                  };                  var leavmaterial = new GenericMaterial()                  {                      Roughness = 0.9f'                      DiffuseColor = Vector3.One'                      SpecularColor = Vector3.Zero                  };                //  leavmaterial.SetAlphaTexture("Branches0018_1_S_mask.png");                  leavmaterial.SetDiffuseTexture("Hedge 00 seamless.jpg");                    var trm = Mesh3d.Create(trootobj' rootmaterial);                  var tlm = Mesh3d.Create(tleavobj' leavmaterial);                  scene.Add(trm);                  scene.Add(tlm);                    trm.ClearInstances();                  tlm.ClearInstances();                        for(int i = 0; i < 100; i++)                  {                      var pos = new Vector3(rand(-100' 100)' 0' rand(-100' 100));                      float uniscale = rand(0.7f' 1.5f);                      var scale = new Vector3(uniscale' rand(0.7f' 3.0f)' uniscale);                      trm.AddInstance(new TransformationManager(pos' scale));                      tlm.AddInstance(new TransformationManager(pos' scale));                  }                  trm.UpdateMatrix();                  tlm.UpdateMatrix();                  */                  /*                  var cubeMaterial = new GenericMaterial(new Vector3(1' 0' 0));                  var cubeObj3d = new Object3dInfo(Object3dGenerator.CreateCube(new Vector3(1)' new Vector2(1)).Vertices);                  //var cubeObj3d = new Object3dInfo(Object3dGenerator.CreateGround(new Vector2(-1)' new Vector2(1)' new Vector2(1)' Vector3.UnitY).Vertices);                                    var cubes = Mesh3d.Create(cubeObj3d' cubeMaterial);                  cubes.ClearInstances();                    for(int x = 0; x < 100; x++)                      for(int y = 0; y < 100; y++)                          for(int z = 0; z < 100; z++)                          {                              cubes.AddInstance(new TransformationManager(new Vector3(x' y' z) * 4));                          }                  cubes.UpdateMatrix();                    scene.Add(cubes);*/                    /*                  var cityMgr = Object3dManager.LoadFromObjSingle(Media.Get("somecity.obj"));                  cityMgr.TryToFixVertexWinding();                  cityMgr.RecalulateNormals(Object3dManager.NormalRecalculationType.Flat);                  var cityObj = cityMgr.AsObject3dInfo();                  var cityMat = new GenericMaterial()                  {                      DiffuseColor = new Vector3(1' 0.89f' 0.97f)'                      Roughness = 0.2f                  };                  var cityMesh = Mesh3d.Create(cityObj' cityMat);                  cityMesh.GetInstance(0).Translate(0' 0.1f' 0);                  scene.Add(cityMesh);*/                  //                  //  var citimul = Object3dManager.LoadSceneFromObj("somecity.obj"' "somecity.mtl");                  //  foreach(var m in citimul)                  //      scene.Add(m);                  /*                  var terrain = new Object3dInfo( Object3dGenerator.CreateTerrain(new Vector2(-10000' -10000)' new Vector2(10000' 10000)' new Vector2(1' -1)' Vector3.UnitY' 512' (x'y) => 0).Vertices );                  var terrainMaterial = new GenericMaterial();                  terrainMaterial.Type = GenericMaterial.MaterialType.TessellatedTerrain;                  terrainMaterial.TessellationMultiplier = 1.0f;                  terrainMaterial.ParallaxHeightMultiplier = 200.0f;                  terrainMaterial.SetBumpTexture("ee.png");                  var terrainMesh = Mesh3d.Create(terrain' terrainMaterial);                  scene.Add(terrainMesh);*/                    // DynamicCubeMapController.Create();              });
Magic Number,ShadowsTester,LightningTestScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\LightningTestScene.cs,LightningTestScene,The following statement contains a magic number: Game.Invoke(() =>              {                  var ground = CreateWall(new Vector2(-1000)' new Vector2(1000)' Quaternion.Identity' Vector3.Zero' new Vector3(0.1f' 0.4f' 1));                  // scene.Add(ground);                    var obj = Object3dManager.LoadFromObjSingle(Media.Get("emily.obj"));                  obj.RecalulateNormals(Object3dManager.NormalRecalculationType.Smooth' 1);                  var t1 = CreateModel(obj.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                    t1.GetLodLevel(0).Material.SetDiffuseTexture("00_diffuse_unlit_unpainted.png");                  t1.GetLodLevel(0).Material.SetSpecularTexture("00_specular_unlit_unpainted.png");                  t1.GetLodLevel(0).Material.SetBumpTexture("00_displacement_misdfcro.png");                                    scene.Add(t1);                    var obj2 = Object3dManager.LoadFromObjSingle(Media.Get("emilylashes.obj"));                  var t2 = CreateModel(obj2.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                    t2.GetLodLevel(0).Material.DiffuseColor = Vector3.Zero;                  t2.GetLodLevel(0).Material.SpecularColor = Vector3.Zero;                    scene.Add(t2);                   // var obj2 = Object3dManager.LoadFromObjSingle(Media.Get("emilyeyes.obj"));                //  var t2 = CreateModel(obj2.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                  //  t2.GetLodLevel(0).Material.DiffuseColor = Vector3.Zero;                //  t2.GetLodLevel(0).Material.SpecularColor = Vector3.Zero;                  //  scene.Add(t2);                    /*                  var m = CreateDiffuseModelFromObj("hipolysphere.obj"' new Vector3(1));                  m.GetLodLevel(0).Material.SpecularColor = new Vector3(1.0f);                  m.GetLodLevel(0).Material.DiffuseColor= new Vector3(0.0f);                  m.GetLodLevel(0).Material.Roughness = 0.9f;                  scene.Add(m);*/                    /* var green = CreateWall(new Vector2(-100)' new Vector2(100)' Quaternion.FromAxisAngle(Vector3.UnitX' MathHelper.DegreesToRadians(90))' Vector3.Zero' new Vector3(0.2f' 1' 0.3f));                   var red = CreateWall(new Vector2(-100)' new Vector2(100)' Quaternion.FromAxisAngle(Vector3.UnitZ' MathHelper.DegreesToRadians(90))' Vector3.Zero' new Vector3(1' 0.2f' 0.2f));                   green.GetInstance(0).Translate(0' 0' -15);                   red.GetInstance(0).Translate(15' 0' 0);                     var lucy = CreateDiffuseModelFromRaw("lucy.vbo.raw"' new Vector3(1));                   //scene.Add(green);                   //scene.Add(red);                     Game.CascadeShadowMaps.SetDirection(Quaternion.FromAxisAngle(Vector3.UnitX' MathHelper.DegreesToRadians(-25)));                     scene.Add(lucy);                     float[] billboardfloats = {                       -1.0f' 0' 0' 0.0f' 0.0f' 0.0f' 0.0f' 0.0f'                       1.0f' 0' 0' 1.0f' 0.0f' 0.0f' 0.0f' 0.0f'                       -1.0f' 1.0f' 0' 0.0f' 1.0f' 0.0f' 0.0f' 0.0f'                       1.0f' 1.0f' 0' 1.0f' 1.0f' 0.0f' 0.0f' 0.0f                   };                     var billboardObj = new Object3dManager(VertexInfo.FromFloatArray(billboardfloats)).AsObject3dInfo();                   billboardObj.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.TriangleStrip;                   string[] trees = new string[] { "vurt_PineSnowy.dds" };                   for(int id = 0; id < 1; id++)                   {                       var billboardMaterial = new GenericMaterial();                       billboardMaterial.UseForwardRenderer = true;                       billboardMaterial.IsBillboard = true;                       billboardMaterial.SetDiffuseTexture(trees[id]);                       //billboardMaterial.SetNormalsTexture("alphatest_n.png");                       billboardMaterial.Roughness = 0.8f;                       billboardMaterial.InvertUVy = true;                         var billboardMesh = Mesh3d.Create(billboardObj' billboardMaterial);                       billboardMesh.ClearInstances();                         for(int i = 0; i < 30000; i++)                       {                           var pos = new Vector3(rand(-1000' 1000)' 0' rand(-1000' 1000));                           float uniscale = rand(1.7f' 2.5f);                           var scale = new Vector3(uniscale' rand(12.3f' 12.4f)' uniscale);                           billboardMesh.AddInstance(new TransformationManager(pos' scale));                       }                       billboardMesh.UpdateMatrix();                         Game.CreateThread(() =>                       {                           while(true)                           {                               //billboardMesh.IterationSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position' 50);                               billboardMesh.FullSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position);                               billboardMesh.UpdateMatrix(false);                           }                       });                             scene.Add(billboardMesh);                   }                   string[] vegs = new string[] { "fieldgrassobj01.dds"' "vurt_brownplants.dds" };                   for(int id = 0; id < 1; id++)                   {                       var billboardMaterial = new GenericMaterial();                       billboardMaterial.UseForwardRenderer = true;                       billboardMaterial.IsBillboard = true;                       billboardMaterial.SetDiffuseTexture(vegs[id]);                       //billboardMaterial.SetNormalsTexture("alphatest_n.png");                       billboardMaterial.Roughness = 0.8f;                       billboardMaterial.InvertUVy = true;                       billboardMaterial.Blending = GenericMaterial.BlendingEnum.Alpha;                         var billboardMesh = Mesh3d.Create(billboardObj' billboardMaterial);                       billboardMesh.ClearInstances();                         for(int i = 0; i < 3000000; i++)                       {                           var pos = new Vector3(rand(-1000' 1000)' 0' rand(-1000' 1000));                           float uniscale = rand(1.7f' 2.5f);                           var scale = new Vector3(uniscale' rand(2.3f' 2.4f)' uniscale);                           billboardMesh.AddInstance(new TransformationManager(pos' scale));                       }                       billboardMesh.UpdateMatrix();                         Game.CreateThread(() =>                       {                           while(true)                           {                               //billboardMesh.IterationSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position' 50);                               billboardMesh.FullSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position);                               billboardMesh.UpdateMatrix(false);                           }                       });                             scene.Add(billboardMesh);                   }*/                    /*                  var trootobj = new Object3dInfo(Object3dManager.LoadFromObjSingle(Media.Get("tree2r.obj")).Vertices);                  var tleavobj = new Object3dInfo(Object3dManager.LoadFromObjSingle(Media.Get("tree2l.obj")).Vertices);                  var rootmaterial = new GenericMaterial()                  {                      Roughness = 0.9f'                      DiffuseColor = Vector3.One'                      SpecularColor = Vector3.Zero                  };                  var leavmaterial = new GenericMaterial()                  {                      Roughness = 0.9f'                      DiffuseColor = Vector3.One'                      SpecularColor = Vector3.Zero                  };                //  leavmaterial.SetAlphaTexture("Branches0018_1_S_mask.png");                  leavmaterial.SetDiffuseTexture("Hedge 00 seamless.jpg");                    var trm = Mesh3d.Create(trootobj' rootmaterial);                  var tlm = Mesh3d.Create(tleavobj' leavmaterial);                  scene.Add(trm);                  scene.Add(tlm);                    trm.ClearInstances();                  tlm.ClearInstances();                        for(int i = 0; i < 100; i++)                  {                      var pos = new Vector3(rand(-100' 100)' 0' rand(-100' 100));                      float uniscale = rand(0.7f' 1.5f);                      var scale = new Vector3(uniscale' rand(0.7f' 3.0f)' uniscale);                      trm.AddInstance(new TransformationManager(pos' scale));                      tlm.AddInstance(new TransformationManager(pos' scale));                  }                  trm.UpdateMatrix();                  tlm.UpdateMatrix();                  */                  /*                  var cubeMaterial = new GenericMaterial(new Vector3(1' 0' 0));                  var cubeObj3d = new Object3dInfo(Object3dGenerator.CreateCube(new Vector3(1)' new Vector2(1)).Vertices);                  //var cubeObj3d = new Object3dInfo(Object3dGenerator.CreateGround(new Vector2(-1)' new Vector2(1)' new Vector2(1)' Vector3.UnitY).Vertices);                                    var cubes = Mesh3d.Create(cubeObj3d' cubeMaterial);                  cubes.ClearInstances();                    for(int x = 0; x < 100; x++)                      for(int y = 0; y < 100; y++)                          for(int z = 0; z < 100; z++)                          {                              cubes.AddInstance(new TransformationManager(new Vector3(x' y' z) * 4));                          }                  cubes.UpdateMatrix();                    scene.Add(cubes);*/                    /*                  var cityMgr = Object3dManager.LoadFromObjSingle(Media.Get("somecity.obj"));                  cityMgr.TryToFixVertexWinding();                  cityMgr.RecalulateNormals(Object3dManager.NormalRecalculationType.Flat);                  var cityObj = cityMgr.AsObject3dInfo();                  var cityMat = new GenericMaterial()                  {                      DiffuseColor = new Vector3(1' 0.89f' 0.97f)'                      Roughness = 0.2f                  };                  var cityMesh = Mesh3d.Create(cityObj' cityMat);                  cityMesh.GetInstance(0).Translate(0' 0.1f' 0);                  scene.Add(cityMesh);*/                  //                  //  var citimul = Object3dManager.LoadSceneFromObj("somecity.obj"' "somecity.mtl");                  //  foreach(var m in citimul)                  //      scene.Add(m);                  /*                  var terrain = new Object3dInfo( Object3dGenerator.CreateTerrain(new Vector2(-10000' -10000)' new Vector2(10000' 10000)' new Vector2(1' -1)' Vector3.UnitY' 512' (x'y) => 0).Vertices );                  var terrainMaterial = new GenericMaterial();                  terrainMaterial.Type = GenericMaterial.MaterialType.TessellatedTerrain;                  terrainMaterial.TessellationMultiplier = 1.0f;                  terrainMaterial.ParallaxHeightMultiplier = 200.0f;                  terrainMaterial.SetBumpTexture("ee.png");                  var terrainMesh = Mesh3d.Create(terrain' terrainMaterial);                  scene.Add(terrainMesh);*/                    // DynamicCubeMapController.Create();              });
Magic Number,ShadowsTester,LightningTestScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\LightningTestScene.cs,LightningTestScene,The following statement contains a magic number: Game.Invoke(() =>              {                  var ground = CreateWall(new Vector2(-1000)' new Vector2(1000)' Quaternion.Identity' Vector3.Zero' new Vector3(0.1f' 0.4f' 1));                  // scene.Add(ground);                    var obj = Object3dManager.LoadFromObjSingle(Media.Get("emily.obj"));                  obj.RecalulateNormals(Object3dManager.NormalRecalculationType.Smooth' 1);                  var t1 = CreateModel(obj.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                    t1.GetLodLevel(0).Material.SetDiffuseTexture("00_diffuse_unlit_unpainted.png");                  t1.GetLodLevel(0).Material.SetSpecularTexture("00_specular_unlit_unpainted.png");                  t1.GetLodLevel(0).Material.SetBumpTexture("00_displacement_misdfcro.png");                                    scene.Add(t1);                    var obj2 = Object3dManager.LoadFromObjSingle(Media.Get("emilylashes.obj"));                  var t2 = CreateModel(obj2.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                    t2.GetLodLevel(0).Material.DiffuseColor = Vector3.Zero;                  t2.GetLodLevel(0).Material.SpecularColor = Vector3.Zero;                    scene.Add(t2);                   // var obj2 = Object3dManager.LoadFromObjSingle(Media.Get("emilyeyes.obj"));                //  var t2 = CreateModel(obj2.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                  //  t2.GetLodLevel(0).Material.DiffuseColor = Vector3.Zero;                //  t2.GetLodLevel(0).Material.SpecularColor = Vector3.Zero;                  //  scene.Add(t2);                    /*                  var m = CreateDiffuseModelFromObj("hipolysphere.obj"' new Vector3(1));                  m.GetLodLevel(0).Material.SpecularColor = new Vector3(1.0f);                  m.GetLodLevel(0).Material.DiffuseColor= new Vector3(0.0f);                  m.GetLodLevel(0).Material.Roughness = 0.9f;                  scene.Add(m);*/                    /* var green = CreateWall(new Vector2(-100)' new Vector2(100)' Quaternion.FromAxisAngle(Vector3.UnitX' MathHelper.DegreesToRadians(90))' Vector3.Zero' new Vector3(0.2f' 1' 0.3f));                   var red = CreateWall(new Vector2(-100)' new Vector2(100)' Quaternion.FromAxisAngle(Vector3.UnitZ' MathHelper.DegreesToRadians(90))' Vector3.Zero' new Vector3(1' 0.2f' 0.2f));                   green.GetInstance(0).Translate(0' 0' -15);                   red.GetInstance(0).Translate(15' 0' 0);                     var lucy = CreateDiffuseModelFromRaw("lucy.vbo.raw"' new Vector3(1));                   //scene.Add(green);                   //scene.Add(red);                     Game.CascadeShadowMaps.SetDirection(Quaternion.FromAxisAngle(Vector3.UnitX' MathHelper.DegreesToRadians(-25)));                     scene.Add(lucy);                     float[] billboardfloats = {                       -1.0f' 0' 0' 0.0f' 0.0f' 0.0f' 0.0f' 0.0f'                       1.0f' 0' 0' 1.0f' 0.0f' 0.0f' 0.0f' 0.0f'                       -1.0f' 1.0f' 0' 0.0f' 1.0f' 0.0f' 0.0f' 0.0f'                       1.0f' 1.0f' 0' 1.0f' 1.0f' 0.0f' 0.0f' 0.0f                   };                     var billboardObj = new Object3dManager(VertexInfo.FromFloatArray(billboardfloats)).AsObject3dInfo();                   billboardObj.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.TriangleStrip;                   string[] trees = new string[] { "vurt_PineSnowy.dds" };                   for(int id = 0; id < 1; id++)                   {                       var billboardMaterial = new GenericMaterial();                       billboardMaterial.UseForwardRenderer = true;                       billboardMaterial.IsBillboard = true;                       billboardMaterial.SetDiffuseTexture(trees[id]);                       //billboardMaterial.SetNormalsTexture("alphatest_n.png");                       billboardMaterial.Roughness = 0.8f;                       billboardMaterial.InvertUVy = true;                         var billboardMesh = Mesh3d.Create(billboardObj' billboardMaterial);                       billboardMesh.ClearInstances();                         for(int i = 0; i < 30000; i++)                       {                           var pos = new Vector3(rand(-1000' 1000)' 0' rand(-1000' 1000));                           float uniscale = rand(1.7f' 2.5f);                           var scale = new Vector3(uniscale' rand(12.3f' 12.4f)' uniscale);                           billboardMesh.AddInstance(new TransformationManager(pos' scale));                       }                       billboardMesh.UpdateMatrix();                         Game.CreateThread(() =>                       {                           while(true)                           {                               //billboardMesh.IterationSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position' 50);                               billboardMesh.FullSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position);                               billboardMesh.UpdateMatrix(false);                           }                       });                             scene.Add(billboardMesh);                   }                   string[] vegs = new string[] { "fieldgrassobj01.dds"' "vurt_brownplants.dds" };                   for(int id = 0; id < 1; id++)                   {                       var billboardMaterial = new GenericMaterial();                       billboardMaterial.UseForwardRenderer = true;                       billboardMaterial.IsBillboard = true;                       billboardMaterial.SetDiffuseTexture(vegs[id]);                       //billboardMaterial.SetNormalsTexture("alphatest_n.png");                       billboardMaterial.Roughness = 0.8f;                       billboardMaterial.InvertUVy = true;                       billboardMaterial.Blending = GenericMaterial.BlendingEnum.Alpha;                         var billboardMesh = Mesh3d.Create(billboardObj' billboardMaterial);                       billboardMesh.ClearInstances();                         for(int i = 0; i < 3000000; i++)                       {                           var pos = new Vector3(rand(-1000' 1000)' 0' rand(-1000' 1000));                           float uniscale = rand(1.7f' 2.5f);                           var scale = new Vector3(uniscale' rand(2.3f' 2.4f)' uniscale);                           billboardMesh.AddInstance(new TransformationManager(pos' scale));                       }                       billboardMesh.UpdateMatrix();                         Game.CreateThread(() =>                       {                           while(true)                           {                               //billboardMesh.IterationSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position' 50);                               billboardMesh.FullSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position);                               billboardMesh.UpdateMatrix(false);                           }                       });                             scene.Add(billboardMesh);                   }*/                    /*                  var trootobj = new Object3dInfo(Object3dManager.LoadFromObjSingle(Media.Get("tree2r.obj")).Vertices);                  var tleavobj = new Object3dInfo(Object3dManager.LoadFromObjSingle(Media.Get("tree2l.obj")).Vertices);                  var rootmaterial = new GenericMaterial()                  {                      Roughness = 0.9f'                      DiffuseColor = Vector3.One'                      SpecularColor = Vector3.Zero                  };                  var leavmaterial = new GenericMaterial()                  {                      Roughness = 0.9f'                      DiffuseColor = Vector3.One'                      SpecularColor = Vector3.Zero                  };                //  leavmaterial.SetAlphaTexture("Branches0018_1_S_mask.png");                  leavmaterial.SetDiffuseTexture("Hedge 00 seamless.jpg");                    var trm = Mesh3d.Create(trootobj' rootmaterial);                  var tlm = Mesh3d.Create(tleavobj' leavmaterial);                  scene.Add(trm);                  scene.Add(tlm);                    trm.ClearInstances();                  tlm.ClearInstances();                        for(int i = 0; i < 100; i++)                  {                      var pos = new Vector3(rand(-100' 100)' 0' rand(-100' 100));                      float uniscale = rand(0.7f' 1.5f);                      var scale = new Vector3(uniscale' rand(0.7f' 3.0f)' uniscale);                      trm.AddInstance(new TransformationManager(pos' scale));                      tlm.AddInstance(new TransformationManager(pos' scale));                  }                  trm.UpdateMatrix();                  tlm.UpdateMatrix();                  */                  /*                  var cubeMaterial = new GenericMaterial(new Vector3(1' 0' 0));                  var cubeObj3d = new Object3dInfo(Object3dGenerator.CreateCube(new Vector3(1)' new Vector2(1)).Vertices);                  //var cubeObj3d = new Object3dInfo(Object3dGenerator.CreateGround(new Vector2(-1)' new Vector2(1)' new Vector2(1)' Vector3.UnitY).Vertices);                                    var cubes = Mesh3d.Create(cubeObj3d' cubeMaterial);                  cubes.ClearInstances();                    for(int x = 0; x < 100; x++)                      for(int y = 0; y < 100; y++)                          for(int z = 0; z < 100; z++)                          {                              cubes.AddInstance(new TransformationManager(new Vector3(x' y' z) * 4));                          }                  cubes.UpdateMatrix();                    scene.Add(cubes);*/                    /*                  var cityMgr = Object3dManager.LoadFromObjSingle(Media.Get("somecity.obj"));                  cityMgr.TryToFixVertexWinding();                  cityMgr.RecalulateNormals(Object3dManager.NormalRecalculationType.Flat);                  var cityObj = cityMgr.AsObject3dInfo();                  var cityMat = new GenericMaterial()                  {                      DiffuseColor = new Vector3(1' 0.89f' 0.97f)'                      Roughness = 0.2f                  };                  var cityMesh = Mesh3d.Create(cityObj' cityMat);                  cityMesh.GetInstance(0).Translate(0' 0.1f' 0);                  scene.Add(cityMesh);*/                  //                  //  var citimul = Object3dManager.LoadSceneFromObj("somecity.obj"' "somecity.mtl");                  //  foreach(var m in citimul)                  //      scene.Add(m);                  /*                  var terrain = new Object3dInfo( Object3dGenerator.CreateTerrain(new Vector2(-10000' -10000)' new Vector2(10000' 10000)' new Vector2(1' -1)' Vector3.UnitY' 512' (x'y) => 0).Vertices );                  var terrainMaterial = new GenericMaterial();                  terrainMaterial.Type = GenericMaterial.MaterialType.TessellatedTerrain;                  terrainMaterial.TessellationMultiplier = 1.0f;                  terrainMaterial.ParallaxHeightMultiplier = 200.0f;                  terrainMaterial.SetBumpTexture("ee.png");                  var terrainMesh = Mesh3d.Create(terrain' terrainMaterial);                  scene.Add(terrainMesh);*/                    // DynamicCubeMapController.Create();              });
Magic Number,ShadowsTester,LightningTestScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\LightningTestScene.cs,LightningTestScene,The following statement contains a magic number: Game.Invoke(() =>              {                  var ground = CreateWall(new Vector2(-1000)' new Vector2(1000)' Quaternion.Identity' Vector3.Zero' new Vector3(0.1f' 0.4f' 1));                  // scene.Add(ground);                    var obj = Object3dManager.LoadFromObjSingle(Media.Get("emily.obj"));                  obj.RecalulateNormals(Object3dManager.NormalRecalculationType.Smooth' 1);                  var t1 = CreateModel(obj.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                    t1.GetLodLevel(0).Material.SetDiffuseTexture("00_diffuse_unlit_unpainted.png");                  t1.GetLodLevel(0).Material.SetSpecularTexture("00_specular_unlit_unpainted.png");                  t1.GetLodLevel(0).Material.SetBumpTexture("00_displacement_misdfcro.png");                                    scene.Add(t1);                    var obj2 = Object3dManager.LoadFromObjSingle(Media.Get("emilylashes.obj"));                  var t2 = CreateModel(obj2.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                    t2.GetLodLevel(0).Material.DiffuseColor = Vector3.Zero;                  t2.GetLodLevel(0).Material.SpecularColor = Vector3.Zero;                    scene.Add(t2);                   // var obj2 = Object3dManager.LoadFromObjSingle(Media.Get("emilyeyes.obj"));                //  var t2 = CreateModel(obj2.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                  //  t2.GetLodLevel(0).Material.DiffuseColor = Vector3.Zero;                //  t2.GetLodLevel(0).Material.SpecularColor = Vector3.Zero;                  //  scene.Add(t2);                    /*                  var m = CreateDiffuseModelFromObj("hipolysphere.obj"' new Vector3(1));                  m.GetLodLevel(0).Material.SpecularColor = new Vector3(1.0f);                  m.GetLodLevel(0).Material.DiffuseColor= new Vector3(0.0f);                  m.GetLodLevel(0).Material.Roughness = 0.9f;                  scene.Add(m);*/                    /* var green = CreateWall(new Vector2(-100)' new Vector2(100)' Quaternion.FromAxisAngle(Vector3.UnitX' MathHelper.DegreesToRadians(90))' Vector3.Zero' new Vector3(0.2f' 1' 0.3f));                   var red = CreateWall(new Vector2(-100)' new Vector2(100)' Quaternion.FromAxisAngle(Vector3.UnitZ' MathHelper.DegreesToRadians(90))' Vector3.Zero' new Vector3(1' 0.2f' 0.2f));                   green.GetInstance(0).Translate(0' 0' -15);                   red.GetInstance(0).Translate(15' 0' 0);                     var lucy = CreateDiffuseModelFromRaw("lucy.vbo.raw"' new Vector3(1));                   //scene.Add(green);                   //scene.Add(red);                     Game.CascadeShadowMaps.SetDirection(Quaternion.FromAxisAngle(Vector3.UnitX' MathHelper.DegreesToRadians(-25)));                     scene.Add(lucy);                     float[] billboardfloats = {                       -1.0f' 0' 0' 0.0f' 0.0f' 0.0f' 0.0f' 0.0f'                       1.0f' 0' 0' 1.0f' 0.0f' 0.0f' 0.0f' 0.0f'                       -1.0f' 1.0f' 0' 0.0f' 1.0f' 0.0f' 0.0f' 0.0f'                       1.0f' 1.0f' 0' 1.0f' 1.0f' 0.0f' 0.0f' 0.0f                   };                     var billboardObj = new Object3dManager(VertexInfo.FromFloatArray(billboardfloats)).AsObject3dInfo();                   billboardObj.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.TriangleStrip;                   string[] trees = new string[] { "vurt_PineSnowy.dds" };                   for(int id = 0; id < 1; id++)                   {                       var billboardMaterial = new GenericMaterial();                       billboardMaterial.UseForwardRenderer = true;                       billboardMaterial.IsBillboard = true;                       billboardMaterial.SetDiffuseTexture(trees[id]);                       //billboardMaterial.SetNormalsTexture("alphatest_n.png");                       billboardMaterial.Roughness = 0.8f;                       billboardMaterial.InvertUVy = true;                         var billboardMesh = Mesh3d.Create(billboardObj' billboardMaterial);                       billboardMesh.ClearInstances();                         for(int i = 0; i < 30000; i++)                       {                           var pos = new Vector3(rand(-1000' 1000)' 0' rand(-1000' 1000));                           float uniscale = rand(1.7f' 2.5f);                           var scale = new Vector3(uniscale' rand(12.3f' 12.4f)' uniscale);                           billboardMesh.AddInstance(new TransformationManager(pos' scale));                       }                       billboardMesh.UpdateMatrix();                         Game.CreateThread(() =>                       {                           while(true)                           {                               //billboardMesh.IterationSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position' 50);                               billboardMesh.FullSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position);                               billboardMesh.UpdateMatrix(false);                           }                       });                             scene.Add(billboardMesh);                   }                   string[] vegs = new string[] { "fieldgrassobj01.dds"' "vurt_brownplants.dds" };                   for(int id = 0; id < 1; id++)                   {                       var billboardMaterial = new GenericMaterial();                       billboardMaterial.UseForwardRenderer = true;                       billboardMaterial.IsBillboard = true;                       billboardMaterial.SetDiffuseTexture(vegs[id]);                       //billboardMaterial.SetNormalsTexture("alphatest_n.png");                       billboardMaterial.Roughness = 0.8f;                       billboardMaterial.InvertUVy = true;                       billboardMaterial.Blending = GenericMaterial.BlendingEnum.Alpha;                         var billboardMesh = Mesh3d.Create(billboardObj' billboardMaterial);                       billboardMesh.ClearInstances();                         for(int i = 0; i < 3000000; i++)                       {                           var pos = new Vector3(rand(-1000' 1000)' 0' rand(-1000' 1000));                           float uniscale = rand(1.7f' 2.5f);                           var scale = new Vector3(uniscale' rand(2.3f' 2.4f)' uniscale);                           billboardMesh.AddInstance(new TransformationManager(pos' scale));                       }                       billboardMesh.UpdateMatrix();                         Game.CreateThread(() =>                       {                           while(true)                           {                               //billboardMesh.IterationSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position' 50);                               billboardMesh.FullSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position);                               billboardMesh.UpdateMatrix(false);                           }                       });                             scene.Add(billboardMesh);                   }*/                    /*                  var trootobj = new Object3dInfo(Object3dManager.LoadFromObjSingle(Media.Get("tree2r.obj")).Vertices);                  var tleavobj = new Object3dInfo(Object3dManager.LoadFromObjSingle(Media.Get("tree2l.obj")).Vertices);                  var rootmaterial = new GenericMaterial()                  {                      Roughness = 0.9f'                      DiffuseColor = Vector3.One'                      SpecularColor = Vector3.Zero                  };                  var leavmaterial = new GenericMaterial()                  {                      Roughness = 0.9f'                      DiffuseColor = Vector3.One'                      SpecularColor = Vector3.Zero                  };                //  leavmaterial.SetAlphaTexture("Branches0018_1_S_mask.png");                  leavmaterial.SetDiffuseTexture("Hedge 00 seamless.jpg");                    var trm = Mesh3d.Create(trootobj' rootmaterial);                  var tlm = Mesh3d.Create(tleavobj' leavmaterial);                  scene.Add(trm);                  scene.Add(tlm);                    trm.ClearInstances();                  tlm.ClearInstances();                        for(int i = 0; i < 100; i++)                  {                      var pos = new Vector3(rand(-100' 100)' 0' rand(-100' 100));                      float uniscale = rand(0.7f' 1.5f);                      var scale = new Vector3(uniscale' rand(0.7f' 3.0f)' uniscale);                      trm.AddInstance(new TransformationManager(pos' scale));                      tlm.AddInstance(new TransformationManager(pos' scale));                  }                  trm.UpdateMatrix();                  tlm.UpdateMatrix();                  */                  /*                  var cubeMaterial = new GenericMaterial(new Vector3(1' 0' 0));                  var cubeObj3d = new Object3dInfo(Object3dGenerator.CreateCube(new Vector3(1)' new Vector2(1)).Vertices);                  //var cubeObj3d = new Object3dInfo(Object3dGenerator.CreateGround(new Vector2(-1)' new Vector2(1)' new Vector2(1)' Vector3.UnitY).Vertices);                                    var cubes = Mesh3d.Create(cubeObj3d' cubeMaterial);                  cubes.ClearInstances();                    for(int x = 0; x < 100; x++)                      for(int y = 0; y < 100; y++)                          for(int z = 0; z < 100; z++)                          {                              cubes.AddInstance(new TransformationManager(new Vector3(x' y' z) * 4));                          }                  cubes.UpdateMatrix();                    scene.Add(cubes);*/                    /*                  var cityMgr = Object3dManager.LoadFromObjSingle(Media.Get("somecity.obj"));                  cityMgr.TryToFixVertexWinding();                  cityMgr.RecalulateNormals(Object3dManager.NormalRecalculationType.Flat);                  var cityObj = cityMgr.AsObject3dInfo();                  var cityMat = new GenericMaterial()                  {                      DiffuseColor = new Vector3(1' 0.89f' 0.97f)'                      Roughness = 0.2f                  };                  var cityMesh = Mesh3d.Create(cityObj' cityMat);                  cityMesh.GetInstance(0).Translate(0' 0.1f' 0);                  scene.Add(cityMesh);*/                  //                  //  var citimul = Object3dManager.LoadSceneFromObj("somecity.obj"' "somecity.mtl");                  //  foreach(var m in citimul)                  //      scene.Add(m);                  /*                  var terrain = new Object3dInfo( Object3dGenerator.CreateTerrain(new Vector2(-10000' -10000)' new Vector2(10000' 10000)' new Vector2(1' -1)' Vector3.UnitY' 512' (x'y) => 0).Vertices );                  var terrainMaterial = new GenericMaterial();                  terrainMaterial.Type = GenericMaterial.MaterialType.TessellatedTerrain;                  terrainMaterial.TessellationMultiplier = 1.0f;                  terrainMaterial.ParallaxHeightMultiplier = 200.0f;                  terrainMaterial.SetBumpTexture("ee.png");                  var terrainMesh = Mesh3d.Create(terrain' terrainMaterial);                  scene.Add(terrainMesh);*/                    // DynamicCubeMapController.Create();              });
Magic Number,ShadowsTester,LightningTestScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\LightningTestScene.cs,LightningTestScene,The following statement contains a magic number: Game.Invoke(() =>              {                  var ground = CreateWall(new Vector2(-1000)' new Vector2(1000)' Quaternion.Identity' Vector3.Zero' new Vector3(0.1f' 0.4f' 1));                  // scene.Add(ground);                    var obj = Object3dManager.LoadFromObjSingle(Media.Get("emily.obj"));                  obj.RecalulateNormals(Object3dManager.NormalRecalculationType.Smooth' 1);                  var t1 = CreateModel(obj.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                    t1.GetLodLevel(0).Material.SetDiffuseTexture("00_diffuse_unlit_unpainted.png");                  t1.GetLodLevel(0).Material.SetSpecularTexture("00_specular_unlit_unpainted.png");                  t1.GetLodLevel(0).Material.SetBumpTexture("00_displacement_misdfcro.png");                                    scene.Add(t1);                    var obj2 = Object3dManager.LoadFromObjSingle(Media.Get("emilylashes.obj"));                  var t2 = CreateModel(obj2.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                    t2.GetLodLevel(0).Material.DiffuseColor = Vector3.Zero;                  t2.GetLodLevel(0).Material.SpecularColor = Vector3.Zero;                    scene.Add(t2);                   // var obj2 = Object3dManager.LoadFromObjSingle(Media.Get("emilyeyes.obj"));                //  var t2 = CreateModel(obj2.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                  //  t2.GetLodLevel(0).Material.DiffuseColor = Vector3.Zero;                //  t2.GetLodLevel(0).Material.SpecularColor = Vector3.Zero;                  //  scene.Add(t2);                    /*                  var m = CreateDiffuseModelFromObj("hipolysphere.obj"' new Vector3(1));                  m.GetLodLevel(0).Material.SpecularColor = new Vector3(1.0f);                  m.GetLodLevel(0).Material.DiffuseColor= new Vector3(0.0f);                  m.GetLodLevel(0).Material.Roughness = 0.9f;                  scene.Add(m);*/                    /* var green = CreateWall(new Vector2(-100)' new Vector2(100)' Quaternion.FromAxisAngle(Vector3.UnitX' MathHelper.DegreesToRadians(90))' Vector3.Zero' new Vector3(0.2f' 1' 0.3f));                   var red = CreateWall(new Vector2(-100)' new Vector2(100)' Quaternion.FromAxisAngle(Vector3.UnitZ' MathHelper.DegreesToRadians(90))' Vector3.Zero' new Vector3(1' 0.2f' 0.2f));                   green.GetInstance(0).Translate(0' 0' -15);                   red.GetInstance(0).Translate(15' 0' 0);                     var lucy = CreateDiffuseModelFromRaw("lucy.vbo.raw"' new Vector3(1));                   //scene.Add(green);                   //scene.Add(red);                     Game.CascadeShadowMaps.SetDirection(Quaternion.FromAxisAngle(Vector3.UnitX' MathHelper.DegreesToRadians(-25)));                     scene.Add(lucy);                     float[] billboardfloats = {                       -1.0f' 0' 0' 0.0f' 0.0f' 0.0f' 0.0f' 0.0f'                       1.0f' 0' 0' 1.0f' 0.0f' 0.0f' 0.0f' 0.0f'                       -1.0f' 1.0f' 0' 0.0f' 1.0f' 0.0f' 0.0f' 0.0f'                       1.0f' 1.0f' 0' 1.0f' 1.0f' 0.0f' 0.0f' 0.0f                   };                     var billboardObj = new Object3dManager(VertexInfo.FromFloatArray(billboardfloats)).AsObject3dInfo();                   billboardObj.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.TriangleStrip;                   string[] trees = new string[] { "vurt_PineSnowy.dds" };                   for(int id = 0; id < 1; id++)                   {                       var billboardMaterial = new GenericMaterial();                       billboardMaterial.UseForwardRenderer = true;                       billboardMaterial.IsBillboard = true;                       billboardMaterial.SetDiffuseTexture(trees[id]);                       //billboardMaterial.SetNormalsTexture("alphatest_n.png");                       billboardMaterial.Roughness = 0.8f;                       billboardMaterial.InvertUVy = true;                         var billboardMesh = Mesh3d.Create(billboardObj' billboardMaterial);                       billboardMesh.ClearInstances();                         for(int i = 0; i < 30000; i++)                       {                           var pos = new Vector3(rand(-1000' 1000)' 0' rand(-1000' 1000));                           float uniscale = rand(1.7f' 2.5f);                           var scale = new Vector3(uniscale' rand(12.3f' 12.4f)' uniscale);                           billboardMesh.AddInstance(new TransformationManager(pos' scale));                       }                       billboardMesh.UpdateMatrix();                         Game.CreateThread(() =>                       {                           while(true)                           {                               //billboardMesh.IterationSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position' 50);                               billboardMesh.FullSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position);                               billboardMesh.UpdateMatrix(false);                           }                       });                             scene.Add(billboardMesh);                   }                   string[] vegs = new string[] { "fieldgrassobj01.dds"' "vurt_brownplants.dds" };                   for(int id = 0; id < 1; id++)                   {                       var billboardMaterial = new GenericMaterial();                       billboardMaterial.UseForwardRenderer = true;                       billboardMaterial.IsBillboard = true;                       billboardMaterial.SetDiffuseTexture(vegs[id]);                       //billboardMaterial.SetNormalsTexture("alphatest_n.png");                       billboardMaterial.Roughness = 0.8f;                       billboardMaterial.InvertUVy = true;                       billboardMaterial.Blending = GenericMaterial.BlendingEnum.Alpha;                         var billboardMesh = Mesh3d.Create(billboardObj' billboardMaterial);                       billboardMesh.ClearInstances();                         for(int i = 0; i < 3000000; i++)                       {                           var pos = new Vector3(rand(-1000' 1000)' 0' rand(-1000' 1000));                           float uniscale = rand(1.7f' 2.5f);                           var scale = new Vector3(uniscale' rand(2.3f' 2.4f)' uniscale);                           billboardMesh.AddInstance(new TransformationManager(pos' scale));                       }                       billboardMesh.UpdateMatrix();                         Game.CreateThread(() =>                       {                           while(true)                           {                               //billboardMesh.IterationSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position' 50);                               billboardMesh.FullSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position);                               billboardMesh.UpdateMatrix(false);                           }                       });                             scene.Add(billboardMesh);                   }*/                    /*                  var trootobj = new Object3dInfo(Object3dManager.LoadFromObjSingle(Media.Get("tree2r.obj")).Vertices);                  var tleavobj = new Object3dInfo(Object3dManager.LoadFromObjSingle(Media.Get("tree2l.obj")).Vertices);                  var rootmaterial = new GenericMaterial()                  {                      Roughness = 0.9f'                      DiffuseColor = Vector3.One'                      SpecularColor = Vector3.Zero                  };                  var leavmaterial = new GenericMaterial()                  {                      Roughness = 0.9f'                      DiffuseColor = Vector3.One'                      SpecularColor = Vector3.Zero                  };                //  leavmaterial.SetAlphaTexture("Branches0018_1_S_mask.png");                  leavmaterial.SetDiffuseTexture("Hedge 00 seamless.jpg");                    var trm = Mesh3d.Create(trootobj' rootmaterial);                  var tlm = Mesh3d.Create(tleavobj' leavmaterial);                  scene.Add(trm);                  scene.Add(tlm);                    trm.ClearInstances();                  tlm.ClearInstances();                        for(int i = 0; i < 100; i++)                  {                      var pos = new Vector3(rand(-100' 100)' 0' rand(-100' 100));                      float uniscale = rand(0.7f' 1.5f);                      var scale = new Vector3(uniscale' rand(0.7f' 3.0f)' uniscale);                      trm.AddInstance(new TransformationManager(pos' scale));                      tlm.AddInstance(new TransformationManager(pos' scale));                  }                  trm.UpdateMatrix();                  tlm.UpdateMatrix();                  */                  /*                  var cubeMaterial = new GenericMaterial(new Vector3(1' 0' 0));                  var cubeObj3d = new Object3dInfo(Object3dGenerator.CreateCube(new Vector3(1)' new Vector2(1)).Vertices);                  //var cubeObj3d = new Object3dInfo(Object3dGenerator.CreateGround(new Vector2(-1)' new Vector2(1)' new Vector2(1)' Vector3.UnitY).Vertices);                                    var cubes = Mesh3d.Create(cubeObj3d' cubeMaterial);                  cubes.ClearInstances();                    for(int x = 0; x < 100; x++)                      for(int y = 0; y < 100; y++)                          for(int z = 0; z < 100; z++)                          {                              cubes.AddInstance(new TransformationManager(new Vector3(x' y' z) * 4));                          }                  cubes.UpdateMatrix();                    scene.Add(cubes);*/                    /*                  var cityMgr = Object3dManager.LoadFromObjSingle(Media.Get("somecity.obj"));                  cityMgr.TryToFixVertexWinding();                  cityMgr.RecalulateNormals(Object3dManager.NormalRecalculationType.Flat);                  var cityObj = cityMgr.AsObject3dInfo();                  var cityMat = new GenericMaterial()                  {                      DiffuseColor = new Vector3(1' 0.89f' 0.97f)'                      Roughness = 0.2f                  };                  var cityMesh = Mesh3d.Create(cityObj' cityMat);                  cityMesh.GetInstance(0).Translate(0' 0.1f' 0);                  scene.Add(cityMesh);*/                  //                  //  var citimul = Object3dManager.LoadSceneFromObj("somecity.obj"' "somecity.mtl");                  //  foreach(var m in citimul)                  //      scene.Add(m);                  /*                  var terrain = new Object3dInfo( Object3dGenerator.CreateTerrain(new Vector2(-10000' -10000)' new Vector2(10000' 10000)' new Vector2(1' -1)' Vector3.UnitY' 512' (x'y) => 0).Vertices );                  var terrainMaterial = new GenericMaterial();                  terrainMaterial.Type = GenericMaterial.MaterialType.TessellatedTerrain;                  terrainMaterial.TessellationMultiplier = 1.0f;                  terrainMaterial.ParallaxHeightMultiplier = 200.0f;                  terrainMaterial.SetBumpTexture("ee.png");                  var terrainMesh = Mesh3d.Create(terrain' terrainMaterial);                  scene.Add(terrainMesh);*/                    // DynamicCubeMapController.Create();              });
Magic Number,ShadowsTester,LightningTestScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\LightningTestScene.cs,LightningTestScene,The following statement contains a magic number: Game.Invoke(() =>              {                  var ground = CreateWall(new Vector2(-1000)' new Vector2(1000)' Quaternion.Identity' Vector3.Zero' new Vector3(0.1f' 0.4f' 1));                  // scene.Add(ground);                    var obj = Object3dManager.LoadFromObjSingle(Media.Get("emily.obj"));                  obj.RecalulateNormals(Object3dManager.NormalRecalculationType.Smooth' 1);                  var t1 = CreateModel(obj.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                    t1.GetLodLevel(0).Material.SetDiffuseTexture("00_diffuse_unlit_unpainted.png");                  t1.GetLodLevel(0).Material.SetSpecularTexture("00_specular_unlit_unpainted.png");                  t1.GetLodLevel(0).Material.SetBumpTexture("00_displacement_misdfcro.png");                                    scene.Add(t1);                    var obj2 = Object3dManager.LoadFromObjSingle(Media.Get("emilylashes.obj"));                  var t2 = CreateModel(obj2.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                    t2.GetLodLevel(0).Material.DiffuseColor = Vector3.Zero;                  t2.GetLodLevel(0).Material.SpecularColor = Vector3.Zero;                    scene.Add(t2);                   // var obj2 = Object3dManager.LoadFromObjSingle(Media.Get("emilyeyes.obj"));                //  var t2 = CreateModel(obj2.AsObject3dInfo()' new Vector3(0.8f)' new Vector3(0.2f)' 0.1f);                  //  t2.GetLodLevel(0).Material.DiffuseColor = Vector3.Zero;                //  t2.GetLodLevel(0).Material.SpecularColor = Vector3.Zero;                  //  scene.Add(t2);                    /*                  var m = CreateDiffuseModelFromObj("hipolysphere.obj"' new Vector3(1));                  m.GetLodLevel(0).Material.SpecularColor = new Vector3(1.0f);                  m.GetLodLevel(0).Material.DiffuseColor= new Vector3(0.0f);                  m.GetLodLevel(0).Material.Roughness = 0.9f;                  scene.Add(m);*/                    /* var green = CreateWall(new Vector2(-100)' new Vector2(100)' Quaternion.FromAxisAngle(Vector3.UnitX' MathHelper.DegreesToRadians(90))' Vector3.Zero' new Vector3(0.2f' 1' 0.3f));                   var red = CreateWall(new Vector2(-100)' new Vector2(100)' Quaternion.FromAxisAngle(Vector3.UnitZ' MathHelper.DegreesToRadians(90))' Vector3.Zero' new Vector3(1' 0.2f' 0.2f));                   green.GetInstance(0).Translate(0' 0' -15);                   red.GetInstance(0).Translate(15' 0' 0);                     var lucy = CreateDiffuseModelFromRaw("lucy.vbo.raw"' new Vector3(1));                   //scene.Add(green);                   //scene.Add(red);                     Game.CascadeShadowMaps.SetDirection(Quaternion.FromAxisAngle(Vector3.UnitX' MathHelper.DegreesToRadians(-25)));                     scene.Add(lucy);                     float[] billboardfloats = {                       -1.0f' 0' 0' 0.0f' 0.0f' 0.0f' 0.0f' 0.0f'                       1.0f' 0' 0' 1.0f' 0.0f' 0.0f' 0.0f' 0.0f'                       -1.0f' 1.0f' 0' 0.0f' 1.0f' 0.0f' 0.0f' 0.0f'                       1.0f' 1.0f' 0' 1.0f' 1.0f' 0.0f' 0.0f' 0.0f                   };                     var billboardObj = new Object3dManager(VertexInfo.FromFloatArray(billboardfloats)).AsObject3dInfo();                   billboardObj.DrawMode = OpenTK.Graphics.OpenGL4.PrimitiveType.TriangleStrip;                   string[] trees = new string[] { "vurt_PineSnowy.dds" };                   for(int id = 0; id < 1; id++)                   {                       var billboardMaterial = new GenericMaterial();                       billboardMaterial.UseForwardRenderer = true;                       billboardMaterial.IsBillboard = true;                       billboardMaterial.SetDiffuseTexture(trees[id]);                       //billboardMaterial.SetNormalsTexture("alphatest_n.png");                       billboardMaterial.Roughness = 0.8f;                       billboardMaterial.InvertUVy = true;                         var billboardMesh = Mesh3d.Create(billboardObj' billboardMaterial);                       billboardMesh.ClearInstances();                         for(int i = 0; i < 30000; i++)                       {                           var pos = new Vector3(rand(-1000' 1000)' 0' rand(-1000' 1000));                           float uniscale = rand(1.7f' 2.5f);                           var scale = new Vector3(uniscale' rand(12.3f' 12.4f)' uniscale);                           billboardMesh.AddInstance(new TransformationManager(pos' scale));                       }                       billboardMesh.UpdateMatrix();                         Game.CreateThread(() =>                       {                           while(true)                           {                               //billboardMesh.IterationSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position' 50);                               billboardMesh.FullSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position);                               billboardMesh.UpdateMatrix(false);                           }                       });                             scene.Add(billboardMesh);                   }                   string[] vegs = new string[] { "fieldgrassobj01.dds"' "vurt_brownplants.dds" };                   for(int id = 0; id < 1; id++)                   {                       var billboardMaterial = new GenericMaterial();                       billboardMaterial.UseForwardRenderer = true;                       billboardMaterial.IsBillboard = true;                       billboardMaterial.SetDiffuseTexture(vegs[id]);                       //billboardMaterial.SetNormalsTexture("alphatest_n.png");                       billboardMaterial.Roughness = 0.8f;                       billboardMaterial.InvertUVy = true;                       billboardMaterial.Blending = GenericMaterial.BlendingEnum.Alpha;                         var billboardMesh = Mesh3d.Create(billboardObj' billboardMaterial);                       billboardMesh.ClearInstances();                         for(int i = 0; i < 3000000; i++)                       {                           var pos = new Vector3(rand(-1000' 1000)' 0' rand(-1000' 1000));                           float uniscale = rand(1.7f' 2.5f);                           var scale = new Vector3(uniscale' rand(2.3f' 2.4f)' uniscale);                           billboardMesh.AddInstance(new TransformationManager(pos' scale));                       }                       billboardMesh.UpdateMatrix();                         Game.CreateThread(() =>                       {                           while(true)                           {                               //billboardMesh.IterationSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position' 50);                               billboardMesh.FullSortInstancesByDistanceFrom(Camera.MainDisplayCamera.Transformation.Position);                               billboardMesh.UpdateMatrix(false);                           }                       });                             scene.Add(billboardMesh);                   }*/                    /*                  var trootobj = new Object3dInfo(Object3dManager.LoadFromObjSingle(Media.Get("tree2r.obj")).Vertices);                  var tleavobj = new Object3dInfo(Object3dManager.LoadFromObjSingle(Media.Get("tree2l.obj")).Vertices);                  var rootmaterial = new GenericMaterial()                  {                      Roughness = 0.9f'                      DiffuseColor = Vector3.One'                      SpecularColor = Vector3.Zero                  };                  var leavmaterial = new GenericMaterial()                  {                      Roughness = 0.9f'                      DiffuseColor = Vector3.One'                      SpecularColor = Vector3.Zero                  };                //  leavmaterial.SetAlphaTexture("Branches0018_1_S_mask.png");                  leavmaterial.SetDiffuseTexture("Hedge 00 seamless.jpg");                    var trm = Mesh3d.Create(trootobj' rootmaterial);                  var tlm = Mesh3d.Create(tleavobj' leavmaterial);                  scene.Add(trm);                  scene.Add(tlm);                    trm.ClearInstances();                  tlm.ClearInstances();                        for(int i = 0; i < 100; i++)                  {                      var pos = new Vector3(rand(-100' 100)' 0' rand(-100' 100));                      float uniscale = rand(0.7f' 1.5f);                      var scale = new Vector3(uniscale' rand(0.7f' 3.0f)' uniscale);                      trm.AddInstance(new TransformationManager(pos' scale));                      tlm.AddInstance(new TransformationManager(pos' scale));                  }                  trm.UpdateMatrix();                  tlm.UpdateMatrix();                  */                  /*                  var cubeMaterial = new GenericMaterial(new Vector3(1' 0' 0));                  var cubeObj3d = new Object3dInfo(Object3dGenerator.CreateCube(new Vector3(1)' new Vector2(1)).Vertices);                  //var cubeObj3d = new Object3dInfo(Object3dGenerator.CreateGround(new Vector2(-1)' new Vector2(1)' new Vector2(1)' Vector3.UnitY).Vertices);                                    var cubes = Mesh3d.Create(cubeObj3d' cubeMaterial);                  cubes.ClearInstances();                    for(int x = 0; x < 100; x++)                      for(int y = 0; y < 100; y++)                          for(int z = 0; z < 100; z++)                          {                              cubes.AddInstance(new TransformationManager(new Vector3(x' y' z) * 4));                          }                  cubes.UpdateMatrix();                    scene.Add(cubes);*/                    /*                  var cityMgr = Object3dManager.LoadFromObjSingle(Media.Get("somecity.obj"));                  cityMgr.TryToFixVertexWinding();                  cityMgr.RecalulateNormals(Object3dManager.NormalRecalculationType.Flat);                  var cityObj = cityMgr.AsObject3dInfo();                  var cityMat = new GenericMaterial()                  {                      DiffuseColor = new Vector3(1' 0.89f' 0.97f)'                      Roughness = 0.2f                  };                  var cityMesh = Mesh3d.Create(cityObj' cityMat);                  cityMesh.GetInstance(0).Translate(0' 0.1f' 0);                  scene.Add(cityMesh);*/                  //                  //  var citimul = Object3dManager.LoadSceneFromObj("somecity.obj"' "somecity.mtl");                  //  foreach(var m in citimul)                  //      scene.Add(m);                  /*                  var terrain = new Object3dInfo( Object3dGenerator.CreateTerrain(new Vector2(-10000' -10000)' new Vector2(10000' 10000)' new Vector2(1' -1)' Vector3.UnitY' 512' (x'y) => 0).Vertices );                  var terrainMaterial = new GenericMaterial();                  terrainMaterial.Type = GenericMaterial.MaterialType.TessellatedTerrain;                  terrainMaterial.TessellationMultiplier = 1.0f;                  terrainMaterial.ParallaxHeightMultiplier = 200.0f;                  terrainMaterial.SetBumpTexture("ee.png");                  var terrainMesh = Mesh3d.Create(terrain' terrainMaterial);                  scene.Add(terrainMesh);*/                    // DynamicCubeMapController.Create();              });
Magic Number,ShadowsTester,OldCityScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\OldCityScene.cs,CreateDiffuseModelFromRaw,The following statement contains a magic number: terrain3dManager.ScaleUV(20);
Magic Number,ShadowsTester,OldCityScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\OldCityScene.cs,CreateDiffuseModelFromRaw,The following statement contains a magic number: terrainMaterial.DiffuseColor = new Vector3(0.7f);
Magic Number,ShadowsTester,OldCityScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\OldCityScene.cs,CreateDiffuseModelFromRaw,The following statement contains a magic number: terrainMaterial.SpecularColor = new Vector3(0.7f);
Magic Number,ShadowsTester,OldCityScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\OldCityScene.cs,CreateDiffuseModelFromRaw,The following statement contains a magic number: terrainMaterial.Roughness = 0.5f;
Magic Number,ShadowsTester,OldCityScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\OldCityScene.cs,CreateDiffuseModelFromObj,The following statement contains a magic number: terrain3dManager.ScaleUV(20);
Magic Number,ShadowsTester,OldCityScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\OldCityScene.cs,CreateDiffuseModelFromObj,The following statement contains a magic number: terrainMaterial.DiffuseColor = new Vector3(0.7f);
Magic Number,ShadowsTester,OldCityScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\OldCityScene.cs,CreateDiffuseModelFromObj,The following statement contains a magic number: terrainMaterial.SpecularColor = new Vector3(0.7f);
Magic Number,ShadowsTester,OldCityScene,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\OldCityScene.cs,CreateDiffuseModelFromObj,The following statement contains a magic number: terrainMaterial.Roughness = 0.5f;
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: float fovdegree = 90;
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Cam = new Camera(new Vector3(0' 5' 0)' new Vector3(0' 0' 1)' Vector3.UnitY' aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.01f' 10000.0f);
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Cam = new Camera(new Vector3(0' 5' 0)' new Vector3(0' 0' 1)' Vector3.UnitY' aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.01f' 10000.0f);
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Cam = new Camera(new Vector3(0' 5' 0)' new Vector3(0' 0' 1)' Vector3.UnitY' aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.01f' 10000.0f);
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnResize += (o' e) =>              {                  float aspect = (float)Game.Resolution.Width / (float)Game.Resolution.Height;                  aspectRatio = aspect;                  Cam.UpdatePerspective(aspect' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                  Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnResize += (o' e) =>              {                  float aspect = (float)Game.Resolution.Width / (float)Game.Resolution.Height;                  aspectRatio = aspect;                  Cam.UpdatePerspective(aspect' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                  Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnResize += (o' e) =>              {                  float aspect = (float)Game.Resolution.Width / (float)Game.Resolution.Height;                  aspectRatio = aspect;                  Cam.UpdatePerspective(aspect' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                  Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnResize += (o' e) =>              {                  float aspect = (float)Game.Resolution.Width / (float)Game.Resolution.Height;                  aspectRatio = aspect;                  Cam.UpdatePerspective(aspect' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                  Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnResize += (o' e) =>              {                  float aspect = (float)Game.Resolution.Width / (float)Game.Resolution.Height;                  aspectRatio = aspect;                  Cam.UpdatePerspective(aspect' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                  Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnResize += (o' e) =>              {                  float aspect = (float)Game.Resolution.Width / (float)Game.Resolution.Height;                  aspectRatio = aspect;                  Cam.UpdatePerspective(aspect' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                  Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.M)                  {                      fovdegree += 5f;                      if(fovdegree >= 179)                          fovdegree = 179;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }                  if(e.Key == OpenTK.Input.Key.N)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.M)                  {                      fovdegree += 5f;                      if(fovdegree >= 179)                          fovdegree = 179;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }                  if(e.Key == OpenTK.Input.Key.N)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.M)                  {                      fovdegree += 5f;                      if(fovdegree >= 179)                          fovdegree = 179;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }                  if(e.Key == OpenTK.Input.Key.N)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.M)                  {                      fovdegree += 5f;                      if(fovdegree >= 179)                          fovdegree = 179;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }                  if(e.Key == OpenTK.Input.Key.N)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.M)                  {                      fovdegree += 5f;                      if(fovdegree >= 179)                          fovdegree = 179;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }                  if(e.Key == OpenTK.Input.Key.N)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.M)                  {                      fovdegree += 5f;                      if(fovdegree >= 179)                          fovdegree = 179;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }                  if(e.Key == OpenTK.Input.Key.N)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.M)                  {                      fovdegree += 5f;                      if(fovdegree >= 179)                          fovdegree = 179;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }                  if(e.Key == OpenTK.Input.Key.N)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.M)                  {                      fovdegree += 5f;                      if(fovdegree >= 179)                          fovdegree = 179;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }                  if(e.Key == OpenTK.Input.Key.N)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.M)                  {                      fovdegree += 5f;                      if(fovdegree >= 179)                          fovdegree = 179;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }                  if(e.Key == OpenTK.Input.Key.N)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.M)                  {                      fovdegree += 5f;                      if(fovdegree >= 179)                          fovdegree = 179;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }                  if(e.Key == OpenTK.Input.Key.N)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.M)                  {                      fovdegree += 5f;                      if(fovdegree >= 179)                          fovdegree = 179;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }                  if(e.Key == OpenTK.Input.Key.N)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.M)                  {                      fovdegree += 5f;                      if(fovdegree >= 179)                          fovdegree = 179;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }                  if(e.Key == OpenTK.Input.Key.N)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.M)                  {                      fovdegree += 5f;                      if(fovdegree >= 179)                          fovdegree = 179;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }                  if(e.Key == OpenTK.Input.Key.N)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.M)                  {                      fovdegree += 5f;                      if(fovdegree >= 179)                          fovdegree = 179;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }                  if(e.Key == OpenTK.Input.Key.N)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.M)                  {                      fovdegree += 5f;                      if(fovdegree >= 179)                          fovdegree = 179;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }                  if(e.Key == OpenTK.Input.Key.N)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.M)                  {                      fovdegree += 5f;                      if(fovdegree >= 179)                          fovdegree = 179;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }                  if(e.Key == OpenTK.Input.Key.N)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.M)                  {                      fovdegree += 5f;                      if(fovdegree >= 179)                          fovdegree = 179;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }                  if(e.Key == OpenTK.Input.Key.N)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,FreeCamera,The following statement contains a magic number: Game.OnKeyUp += (o' e) =>              {                  if(e.Key == OpenTK.Input.Key.M)                  {                      fovdegree += 5f;                      if(fovdegree >= 179)                          fovdegree = 179;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }                  if(e.Key == OpenTK.Input.Key.N)                  {                      fovdegree -= 5f;                      if(fovdegree <= 10)                          fovdegree = 10;                      Cam.UpdatePerspective(aspectRatio' MathHelper.DegreesToRadians(fovdegree)' 0.1f' 10000.0f);                      Cam.FocalLength = (float)(43.266f / (2.0f * Math.Tan(Math.PI * fovdegree / 360.0f))) / 1.5f;                  }              };
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: float fps = (float)Math.Round(1.0 / e.Time' 2);
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: float ft = (float)Math.Round(e.Time * 1000.0' 2);
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: float ft = (float)Math.Round(e.Time * 1000.0' 2);
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: var mem = (double)GC.GetTotalMemory(false) / 1024.0 / 1024.0;
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: var mem = (double)GC.GetTotalMemory(false) / 1024.0 / 1024.0;
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: float MBmemory = (float)Math.Round(mem' 2);
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: newTitle.Length < 71
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: var p = Game.DisplayAdapter.PointToScreen(new System.Drawing.Point(Game.Resolution.Width / 2' Game.Resolution.Height / 2));
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: var p = Game.DisplayAdapter.PointToScreen(new System.Drawing.Point(Game.Resolution.Width / 2' Game.Resolution.Height / 2));
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: var p3 = (new System.Drawing.Point(Game.Resolution.Width / 2' Game.Resolution.Height / 2));
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: var p3 = (new System.Drawing.Point(Game.Resolution.Width / 2' Game.Resolution.Height / 2));
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: mousespeedX += (float)deltaX / 200.0f;
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: mousespeedX *= 0.7f;
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: mousespeedY += (float)deltaY / 200.0f;
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: mousespeedY *= 0.7f;
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: newRoll = MathHelper.Pi / 2;
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: newRoll > MathHelper.Pi / 2
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: float speed = 0.01f;
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: speed *= 7f;
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: speed *= 20f;
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: speed *= 300f;
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: Camera.MainDisplayCamera.Brightness -= 0.003f;
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: Camera.MainDisplayCamera.Brightness += 0.003f;
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: currentPosition += camvelocity * 0.1f;
Magic Number,ShadowsTester,FreeCamera,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\FreeCamera.cs,UpdateSterring,The following statement contains a magic number: camvelocity *= 0.93f;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: return 0.395f * (n0 + n1);
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: const float F2 = 0.366025403f;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: const float G2 = 0.211324865f;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: float x2 = x0 - 1.0f + 2.0f * G2;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: float y2 = y0 - 1.0f + 2.0f * G2;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: int ii = i % 256;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: int jj = j % 256;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: float t0 = 0.5f - x0 * x0 - y0 * y0;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: float t1 = 0.5f - x1 * x1 - y1 * y1;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: float t2 = 0.5f - x2 * x2 - y2 * y2;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: return 40.0f * (n0 + n1 + n2);
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: const float F3 = 0.333333333f;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: const float G3 = 0.166666667f;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: float x2 = x0 - i2 + 2.0f * G3;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: float y2 = y0 - j2 + 2.0f * G3;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: float z2 = z0 - k2 + 2.0f * G3;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: float x3 = x0 - 1.0f + 3.0f * G3;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: float y3 = y0 - 1.0f + 3.0f * G3;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: float z3 = z0 - 1.0f + 3.0f * G3;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: int ii = Mod(i' 256);
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: int jj = Mod(j' 256);
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: int kk = Mod(k' 256);
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: float t0 = 0.6f - x0 * x0 - y0 * y0 - z0 * z0;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: float t1 = 0.6f - x1 * x1 - y1 * y1 - z1 * z1;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: float t2 = 0.6f - x2 * x2 - y2 * y2 - z2 * z2;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: float t3 = 0.6f - x3 * x3 - y3 * y3 - z3 * z3;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,Generate,The following statement contains a magic number: return 32.0f * (n0 + n1 + n2 + n3);
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,grad,The following statement contains a magic number: int h = hash & 15;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,grad,The following statement contains a magic number: float grad = 1.0f + (h & 7);
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,grad,The following statement contains a magic number: (h & 8) != 0
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,grad,The following statement contains a magic number: int h = hash & 7;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,grad,The following statement contains a magic number: float u = h < 4 ? x : y;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,grad,The following statement contains a magic number: float v = h < 4 ? y : x;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,grad,The following statement contains a magic number: return ((h & 1) != 0 ? -u : u) + ((h & 2) != 0 ? -2.0f * v : 2.0f * v);
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,grad,The following statement contains a magic number: return ((h & 1) != 0 ? -u : u) + ((h & 2) != 0 ? -2.0f * v : 2.0f * v);
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,grad,The following statement contains a magic number: return ((h & 1) != 0 ? -u : u) + ((h & 2) != 0 ? -2.0f * v : 2.0f * v);
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,grad,The following statement contains a magic number: int h = hash & 15;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,grad,The following statement contains a magic number: float u = h < 8 ? x : y;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,grad,The following statement contains a magic number: float v = h < 4 ? y : h == 12 || h == 14 ? x : z;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,grad,The following statement contains a magic number: float v = h < 4 ? y : h == 12 || h == 14 ? x : z;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,grad,The following statement contains a magic number: float v = h < 4 ? y : h == 12 || h == 14 ? x : z;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,grad,The following statement contains a magic number: return ((h & 1) != 0 ? -u : u) + ((h & 2) != 0 ? -v : v);
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,grad,The following statement contains a magic number: int h = hash & 31;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,grad,The following statement contains a magic number: float u = h < 24 ? x : y;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,grad,The following statement contains a magic number: float v = h < 16 ? y : z;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,grad,The following statement contains a magic number: float w = h < 8 ? z : t;
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,grad,The following statement contains a magic number: return ((h & 1) != 0 ? -u : u) + ((h & 2) != 0 ? -v : v) + ((h & 4) != 0 ? -w : w);
Magic Number,SimplexNoise,Noise,D:\research\architectureSmells\repos\achlubek_vengine\ShadowsTester\SimplexNoise.cs,grad,The following statement contains a magic number: return ((h & 1) != 0 ? -u : u) + ((h & 2) != 0 ? -v : v) + ((h & 4) != 0 ? -w : w);
