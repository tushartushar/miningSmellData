Implementation smell,Namespace,Class,File,Method,Description
Long Method,EventStore.Projections.Core.Services.Management,ProjectionManagerResponseReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManagerResponseReader.cs,PublishCommand,The method has 240 lines of code.
Long Method,EventStore.Projections.Core.Services.Processing,ProjectionCoreServiceCommandReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionCoreServiceCommandReader.cs,PublishCommand,The method has 137 lines of code.
Long Method,EventStore.Projections.Core.Services.Processing,CheckpointTag,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CheckpointTag.cs,FromJson,The method has 154 lines of code.
Long Method,EventStore.Projections.Core.Services.Processing,CoreProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjection.cs,GoToState,The method has 101 lines of code.
Complex Method,EventStore.Projections.Core.Services.Processing,CheckpointTagExtensions,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CheckpointTagExtensions.cs,ParseCheckpointTagCorrelationId,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Projections.Core.Services.Processing,IndexBased,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventByTypeIndexEventReader.cs,Handle,Cyclomatic complexity of the method is 10
Complex Method,EventStore.Projections.Core.Services.Processing,IndexBased,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventByTypeIndexEventReader.cs,ProcessBuffers,Cyclomatic complexity of the method is 10
Complex Method,EventStore.Projections.Core.Services.Processing,MultiStreamEventReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\MultiStreamEventReader.cs,ProcessBuffers,Cyclomatic complexity of the method is 13
Complex Method,EventStore.Projections.Core.Services.Processing,ReaderSubscriptionBase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderSubscriptionBase.cs,ProcessOne,Cyclomatic complexity of the method is 9
Complex Method,EventStore.Projections.Core.Services.Processing,EmittedStream,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,EmittedStream,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Projections.Core.Services.Processing,EmittedStream,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,ReadStreamEventsBackwardCompleted,Cyclomatic complexity of the method is 10
Complex Method,EventStore.Projections.Core.Services.Processing,EmittedStream,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,SubmitWriteEvents,Cyclomatic complexity of the method is 9
Complex Method,EventStore.Projections.Core.Services.Processing,ReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderStrategy.cs,Create,Cyclomatic complexity of the method is 16
Complex Method,EventStore.Projections.Core.Services.Processing,ReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderStrategy.cs,CreateEventFilter,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Projections.Core.Services.Processing,ReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderStrategy.cs,CreatePositionTagger,Cyclomatic complexity of the method is 9
Complex Method,EventStore.Projections.Core.Services.Processing,TransactionFileEventReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\TransactionFileEventReader.cs,Handle,Cyclomatic complexity of the method is 9
Complex Method,EventStore.Projections.Core.Services.Processing,WriteQueryResultProjectionProcessingPhaseBase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\WriteQueryResultProjectionProcessingPhaseBase.cs,WriteQueryResultProjectionProcessingPhaseBase,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Projections.Core.Standard,StreamCategoryExtractor,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Standard\StreamCategoryExtractor.cs,GetExtractor,Cyclomatic complexity of the method is 8
Long Parameter List,EventStore.Projections.Core.EventReaders.Feeds,FeedReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\EventReaders\Feeds\FeedReader.cs,FeedReader,The method has 8 parameters. Parameters: subscriptionDispatcher' user' querySource' fromPosition' maxEvents' requestCorrelationId' replyEnvelope' timeProvider
Long Parameter List,EventStore.Projections.Core.Messages,CreateAndPrepare,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\CoreProjectionManagementMessage.cs,CreateAndPrepare,The method has 7 parameters. Parameters: projectionId' workerId' name' version' config' handlerType' query
Long Parameter List,EventStore.Projections.Core.Messages,CreateAndPrepareSlave,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\CoreProjectionManagementMessage.cs,CreateAndPrepareSlave,The method has 9 parameters. Parameters: projectionId' workerId' name' version' config' masterMasterWorkerId' masterCoreProjectionId' handlerType' query
Long Parameter List,EventStore.Projections.Core.Messages,CreatePrepared,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\CoreProjectionManagementMessage.cs,CreatePrepared,The method has 8 parameters. Parameters: projectionId' workerId' name' version' config' sourceDefinition' handlerType' query
Long Parameter List,EventStore.Projections.Core.Messages,StateReport,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\CoreProjectionStatusMessage.cs,StateReport,The method has 5 parameters. Parameters: correlationId' projectionId' partition' state' position
Long Parameter List,EventStore.Projections.Core.Messages,ResultReport,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\CoreProjectionStatusMessage.cs,ResultReport,The method has 5 parameters. Parameters: correlationId' projectionId' partition' result' position
Long Parameter List,EventStore.Projections.Core.Messages,PartitionProcessingResultOutput,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ParallelQueryProcessingOutputMessages.cs,PartitionProcessingResultOutput,The method has 7 parameters. Parameters: workerId' masterProjectionId' subscriptionId' partition' causedByGuid' position' result
Long Parameter List,EventStore.Projections.Core.Messages,PartitionMeasuredOutput,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ParallelQueryProcessingOutputMessages.cs,PartitionMeasuredOutput,The method has 5 parameters. Parameters: workerId' masterProjectionId' subscriptionId' partition' size
Long Parameter List,EventStore.Projections.Core.Messages,PartitionProcessingResult,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ParallelQueryProcessingMessages.cs,PartitionProcessingResult,The method has 7 parameters. Parameters: workerId' masterProjectionId' subscriptionId' partition' causedByGuid' position' result
Long Parameter List,EventStore.Projections.Core.Messages,PartitionMeasured,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ParallelQueryProcessingMessages.cs,PartitionMeasured,The method has 5 parameters. Parameters: workerId' masterProjectionId' subscriptionId' partition' size
Long Parameter List,EventStore.Projections.Core.Messages,PartitionMeasured,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ParallelQueryProcessingMessages.cs,PartitionMeasured,The method has 5 parameters. Parameters: subscriptionId' partition' size' subscriptionMessageSequenceNumber' source
Long Parameter List,EventStore.Projections.Core.Messages,SpoolStreamReading,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ReaderSubscriptionManagement.cs,SpoolStreamReading,The method has 5 parameters. Parameters: workerId' subscriptionId' streamId' catalogSequenceNumber' limitingCommitPosition
Long Parameter List,EventStore.Projections.Core.Messages,CheckpointSuggested,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,CheckpointSuggested,The method has 5 parameters. Parameters: subscriptionId' checkpointTag' progress' subscriptionMessageSequenceNumber' source
Long Parameter List,EventStore.Projections.Core.Messages,ProgressChanged,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,ProgressChanged,The method has 5 parameters. Parameters: subscriptionId' checkpointTag' progress' subscriptionMessageSequenceNumber' source
Long Parameter List,EventStore.Projections.Core.Messages,SubscriptionStarted,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,SubscriptionStarted,The method has 5 parameters. Parameters: subscriptionId' checkpointTag' startingLastCommitPosition' subscriptionMessageSequenceNumber' source
Long Parameter List,EventStore.Projections.Core.Messages,NotAuthorized,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,NotAuthorized,The method has 5 parameters. Parameters: subscriptionId' checkpointTag' progress' subscriptionMessageSequenceNumber' source
Long Parameter List,EventStore.Projections.Core.Messages,PartitionEofReached,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,PartitionEofReached,The method has 5 parameters. Parameters: subscriptionId' checkpointTag' partition' subscriptionMessageSequenceNumber' source
Long Parameter List,EventStore.Projections.Core.Messages,PartitionDeleted,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,PartitionDeleted,The method has 5 parameters. Parameters: subscriptionId' checkpointTag' partition' subscriptionMessageSequenceNumber' source
Long Parameter List,EventStore.Projections.Core.Messages,CommittedEventReceived,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,CommittedEventReceived,The method has 7 parameters. Parameters: subscriptionId' checkpointTag' eventCategory' data' progress' subscriptionMessageSequenceNumber' source
Long Parameter List,EventStore.Projections.Core.Messages,CommittedEventReceived,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,CommittedEventReceived,The method has 6 parameters. Parameters: subscriptionId' phase' eventCategory' data' progress' subscriptionMessageSequenceNumber
Long Parameter List,EventStore.Projections.Core.Messages,CommittedEventReceived,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,FromCommittedEventDistributed,The method has 5 parameters. Parameters: message' checkpointTag' eventCategory' subscriptionId' subscriptionMessageSequenceNumber
Long Parameter List,EventStore.Projections.Core.Messages,EventReaderSubscriptionMessageBase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,EventReaderSubscriptionMessageBase,The method has 5 parameters. Parameters: subscriptionId' checkpointTag' progress' subscriptionMessageSequenceNumber' source
Long Parameter List,EventStore.Projections.Core.Messages,EventReaderPartitionDeleted,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ReaderSubscriptionMessage.cs,EventReaderPartitionDeleted,The method has 9 parameters. Parameters: correlationId' partition' lastEventNumber' deleteLinkOrEventPosition' deleteEventOrLinkTargetPosition' positionStreamId' positionEventNumber' preTagged' source
Long Parameter List,EventStore.Projections.Core.Messages,CommittedEventDistributed,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ReaderSubscriptionMessage.cs,Sample,The method has 15 parameters. Parameters: correlationId' position' originalPosition' positionStreamId' positionSequenceNumber' eventStreamId' eventSequenceNumber' resolvedLinkTo' eventId' eventType' isJson' data' metadata' safeTransactionFileReaderJoinPosition' progress
Long Parameter List,EventStore.Projections.Core.Messages,CommittedEventDistributed,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ReaderSubscriptionMessage.cs,Sample,The method has 11 parameters. Parameters: correlationId' position' eventStreamId' eventSequenceNumber' resolvedLinkTo' eventId' eventType' isJson' data' metadata' timestamp
Long Parameter List,EventStore.Projections.Core.Messages,CommittedEventDistributed,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ReaderSubscriptionMessage.cs,CommittedEventDistributed,The method has 6 parameters. Parameters: correlationId' data' safeTransactionFileReaderJoinPosition' progress' source' preTagged
Long Parameter List,EventStore.Projections.Core.Messages,Definition,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\SlaveProjectionDefinitions.cs,Definition,The method has 10 parameters. Parameters: name' handlerType' query' requestedNumber' mode' emitEnabled' checkpointsEnabled' enableRunAs' trackEmittedStreams' runAs1
Long Parameter List,EventStore.Projections.Core.Messages,Post,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ProjectionManagementMessage.cs,Post,The method has 11 parameters. Parameters: envelope' mode' name' runAs' handlerType' query' enabled' checkpointsEnabled' emitEnabled' trackEmittedStreams' enableRunAs
Long Parameter List,EventStore.Projections.Core.Messages,Post,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ProjectionManagementMessage.cs,Post,The method has 11 parameters. Parameters: envelope' mode' name' runAs' handlerType' query' enabled' checkpointsEnabled' emitEnabled' trackEmittedStreams' enableRunAs
Long Parameter List,EventStore.Projections.Core.Messages,UpdateQuery,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ProjectionManagementMessage.cs,UpdateQuery,The method has 6 parameters. Parameters: envelope' name' runAs' handlerType' query' emitEnabled
Long Parameter List,EventStore.Projections.Core.Messages,Delete,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ProjectionManagementMessage.cs,Delete,The method has 6 parameters. Parameters: envelope' name' runAs' deleteCheckpointStream' deleteStateStream' deleteEmittedStreams
Long Parameter List,EventStore.Projections.Core.Messages,UpdateConfig,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ProjectionManagementMessage.cs,UpdateConfig,The method has 11 parameters. Parameters: envelope' name' emitEnabled' trackEmittedStreams' checkpointAfterMs' checkpointHandledThreshold' checkpointUnhandledBytesThreshold' pendingEventsThreshold' maxWriteBatchLength' maxAllowedWritesInFlight' runAs
Long Parameter List,EventStore.Projections.Core.Messages,StartSlaveProjections,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ProjectionManagementMessage.cs,StartSlaveProjections,The method has 6 parameters. Parameters: envelope' runAs' name' slaveProjections' masterWorkerId' masterCorrelationId
Long Parameter List,EventStore.Projections.Core.Messages,RunAs,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ProjectionManagementMessage.cs,ValidateRunAs,The method has 5 parameters. Parameters: mode' readWrite' existingRunAs' message' replace
Long Parameter List,EventStore.Projections.Core.Messages,ProjectionState,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ProjectionManagementMessage.cs,ProjectionState,The method has 5 parameters. Parameters: name' partition' state' position' exception
Long Parameter List,EventStore.Projections.Core.Messages,ProjectionResult,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ProjectionManagementMessage.cs,ProjectionResult,The method has 5 parameters. Parameters: name' partition' result' position' exception
Long Parameter List,EventStore.Projections.Core.Messages,ProjectionQuery,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ProjectionManagementMessage.cs,ProjectionQuery,The method has 5 parameters. Parameters: name' query' emitEnabled' definition' outputConfig
Long Parameter List,EventStore.Projections.Core.Messages,ProjectionConfig,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ProjectionManagementMessage.cs,ProjectionConfig,The method has 8 parameters. Parameters: emitEnabled' trackEmittedStreams' checkpointAfterMs' checkpointHandledThreshold' checkpointUnhandledBytesThreshold' pendingEventsThreshold' maxWriteBatchLength' maxAllowedWritesInFlight
Long Parameter List,EventStore.Projections.Core.Messages.EventReaders.Feeds,ReadPage,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaders\Feeds\FeedReaderMessage.cs,ReadPage,The method has 6 parameters. Parameters: correlationId' envelope' user' querySource' fromPosition' maxEvents
Long Parameter List,ParallelQueryProcessingMessages,PartitionProcessingResultOutput,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ParallelQueryProcessingOutputMessages.cs,PartitionProcessingResultOutput,The method has 7 parameters. Parameters: workerId' masterProjectionId' subscriptionId' partition' causedByGuid' position' result
Long Parameter List,ParallelQueryProcessingMessages,PartitionMeasuredOutput,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ParallelQueryProcessingOutputMessages.cs,PartitionMeasuredOutput,The method has 5 parameters. Parameters: workerId' masterProjectionId' subscriptionId' partition' size
Long Parameter List,ParallelQueryProcessingMessages,PartitionProcessingResult,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ParallelQueryProcessingMessages.cs,PartitionProcessingResult,The method has 7 parameters. Parameters: workerId' masterProjectionId' subscriptionId' partition' causedByGuid' position' result
Long Parameter List,ParallelQueryProcessingMessages,PartitionMeasured,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ParallelQueryProcessingMessages.cs,PartitionMeasured,The method has 5 parameters. Parameters: workerId' masterProjectionId' subscriptionId' partition' size
Long Parameter List,EventStore.Projections.Core,ProjectionManagerNode,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\ProjectionManagerNode.cs,SubscribeMainBus,The method has 6 parameters. Parameters: mainBus' projectionManager' runProjections' projectionManagerResponseReader' ioDispatcher' projectionManagerCommandWriter
Long Parameter List,EventStore.Projections.Core,ProjectionsStandardComponents,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\ProjectionsStandardComponents.cs,ProjectionsStandardComponents,The method has 5 parameters. Parameters: projectionWorkerThreadCount' runProjections' masterOutputBus' masterInputQueue' masterMainBus
Long Parameter List,EventStore.Projections.Core,ProjectionWorkerNode,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\ProjectionWorkerNode.cs,ProjectionWorkerNode,The method has 6 parameters. Parameters: workerId' db' inputQueue' timeProvider' timeoutScheduler' runProjections
Long Parameter List,EventStore.Projections.Core.Services,IProjectionStateHandler,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\IProjectionStateHandler.cs,ProcessEvent,The method has 7 parameters. Parameters: partition' eventPosition' category' data' newState' newSharedState' emittedEvents
Long Parameter List,EventStore.Projections.Core.Services,ProjectionStateHandlerTestExtensions,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\IProjectionStateHandler.cs,ProcessEvent,The method has 13 parameters. Parameters: self' partition' eventPosition' streamId' eventType' category' eventId' eventSequenceNumber' metadata' data' state' emittedEvents' isJson
Long Parameter List,EventStore.Projections.Core.Services,ProjectionStateHandlerTestExtensions,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\IProjectionStateHandler.cs,ProcessEvent,The method has 14 parameters. Parameters: self' partition' eventPosition' streamId' eventType' category' eventId' eventSequenceNumber' metadata' data' state' sharedState' emittedEvents' isJson
Long Parameter List,EventStore.Projections.Core.Services,ProjectionConfig,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionConfig.cs,ProjectionConfig,The method has 13 parameters. Parameters: runAs' checkpointHandledThreshold' checkpointUnhandledBytesThreshold' pendingEventsThreshold' maxWriteBatchLength' emitEventEnabled' checkpointsEnabled' createTempStreams' stopOnEof' isSlaveProjection' trackEmittedStreams' checkpointAfterMs' maximumAllowedWritesInFlight
Long Parameter List,EventStore.Projections.Core.Services.Management,ManagedProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ManagedProjection.cs,ManagedProjection,The method has 18 parameters. Parameters: workerId' id' projectionId' name' enabledToRun' logger' streamDispatcher' writeDispatcher' readDispatcher' output' timeProvider' getStateDispatcher' getResultDispatcher' ioDispatcher' projectionQueryExpiry' isSlave' slaveMasterWorkerId' slaveMasterCorrelationId
Long Parameter List,EventStore.Projections.Core.Services.Management,ProjectionCoreCoordinator,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionCoreCoordinator.cs,ProjectionCoreCoordinator,The method has 5 parameters. Parameters: runProjections' timeoutSchedulers' queues' publisher' publishEnvelope
Long Parameter List,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,ProjectionManager,The method has 8 parameters. Parameters: inputQueue' publisher' queueMap' timeProvider' runProjections' ioDispatcher' projectionQueryExpiry' initializeSystemProjections
Long Parameter List,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,CreateManagedProjectionInstance,The method has 7 parameters. Parameters: name' projectionId' projectionCorrelationId' workerID' isSlave' slaveMasterWorkerId' slaveMasterCorrelationId
Long Parameter List,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,BeginWriteProjectionRegistration,The method has 5 parameters. Parameters: name' eventId' completed' envelope' retryCount
Long Parameter List,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,WriteProjectionRegistrationCompleted,The method has 7 parameters. Parameters: message' eventId' completed' name' eventStreamId' replyEnvelope' retryCount
Long Parameter List,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,CINP,The method has 6 parameters. Parameters: message' group' resultArray' queueIndex' arrayIndex' completed
Long Parameter List,EventStore.Projections.Core.Services.Management,NewProjectionInitializer,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,NewProjectionInitializer,The method has 12 parameters. Parameters: projectionId' name' projectionMode' handlerType' query' enabled' emitEnabled' checkpointsEnabled' enableRunAs' trackEmittedStreams' runAs' replyEnvelope
Long Parameter List,EventStore.Projections.Core.Services.Management,NewProjectionInitializer,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,CreateAndInitializeNewProjection,The method has 7 parameters. Parameters: projectionManager' projectionCorrelationId' workerId' isSlave' slaveMasterWorkerId' slaveMasterCorrelationId' version
Long Parameter List,EventStore.Projections.Core.Services.Processing,AllStreamsCatalogEventReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\AllStreamsCatalogEventReader.cs,AllStreamsCatalogEventReader,The method has 7 parameters. Parameters: ioDispatcher' publisher' eventReaderCorrelationId' readAs' fromSequenceNumber' timeProvider' stopOnEof
Long Parameter List,EventStore.Projections.Core.Services.Processing,ByStreamCatalogEventReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ByStreamCatalogEventReader.cs,ByStreamCatalogEventReader,The method has 10 parameters. Parameters: publisher' eventReaderCorrelationId' readAs' ioDispatcher' catalogCatalogStreamName' catalogNextSequenceNumber' dataStreamName' dataNextSequenceNumber' limitingCommitPosition' resolveLinkTos
Long Parameter List,EventStore.Projections.Core.Services.Processing,ContinuousProjectionProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ContinuousProjectionProcessingStrategy.cs,ContinuousProjectionProcessingStrategy,The method has 7 parameters. Parameters: name' projectionVersion' stateHandler' projectionConfig' sourceDefinition' logger' subscriptionDispatcher
Long Parameter List,EventStore.Projections.Core.Services.Processing,ContinuousProjectionProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ContinuousProjectionProcessingStrategy.cs,CreateProjectionProcessingPhases,The method has 8 parameters. Parameters: publisher' inputQueue' projectionCorrelationId' namingBuilder' partitionStateCache' coreProjection' ioDispatcher' firstPhase
Long Parameter List,EventStore.Projections.Core.Services.Processing,CoreProjectionCheckpointManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjectionCheckpointManager.cs,CoreProjectionCheckpointManager,The method has 7 parameters. Parameters: publisher' projectionCorrelationId' projectionConfig' name' positionTagger' namingBuilder' usePersistentCheckpoints
Long Parameter List,EventStore.Projections.Core.Services.Processing,CoreProjectionCheckpointReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjectionCheckpointReader.cs,CoreProjectionCheckpointReader,The method has 6 parameters. Parameters: publisher' projectionCorrelationId' ioDispatcher' projectionCheckpointStreamId' projectionVersion' useCheckpoints
Long Parameter List,EventStore.Projections.Core.Services.Processing,DefaultCheckpointManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\DefaultCheckpointManager.cs,DefaultCheckpointManager,The method has 13 parameters. Parameters: publisher' projectionCorrelationId' projectionVersion' runAs' ioDispatcher' projectionConfig' name' positionTagger' namingBuilder' usePersistentCheckpoints' producesRunningResults' definesFold' coreProjectionCheckpointWriter
Long Parameter List,EventStore.Projections.Core.Services.Processing,DefaultCheckpointManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\DefaultCheckpointManager.cs,OnLoadPartitionStateReadStreamEventsBackwardCompleted,The method has 5 parameters. Parameters: message' requestedStateCheckpointTag' loadCompleted' partitionStreamName' stateEventType
Long Parameter List,EventStore.Projections.Core.Services.Processing,EventReaderBasedProjectionProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\DefaultProjectionProcessingStrategy.cs,EventReaderBasedProjectionProcessingStrategy,The method has 6 parameters. Parameters: name' projectionVersion' projectionConfig' sourceDefinition' logger' subscriptionDispatcher
Long Parameter List,EventStore.Projections.Core.Services.Processing,EventReaderBasedProjectionProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\DefaultProjectionProcessingStrategy.cs,CreateProcessingPhases,The method has 10 parameters. Parameters: publisher' inputQueue' projectionCorrelationId' partitionStateCache' updateStatistics' coreProjection' namingBuilder' timeProvider' ioDispatcher' coreProjectionCheckpointWriter
Long Parameter List,EventStore.Projections.Core.Services.Processing,EventReaderBasedProjectionProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\DefaultProjectionProcessingStrategy.cs,CreateFirstProcessingPhase,The method has 12 parameters. Parameters: publisher' inputQueue' projectionCorrelationId' partitionStateCache' updateStatistics' coreProjection' subscriptionDispatcher' zeroCheckpointTag' checkpointManager' readerStrategy' resultWriter' emittedStreamsTracker
Long Parameter List,EventStore.Projections.Core.Services.Processing,EventReaderBasedProjectionProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\DefaultProjectionProcessingStrategy.cs,CreateProjectionProcessingPhases,The method has 8 parameters. Parameters: publisher' inputQueue' projectionCorrelationId' namingBuilder' partitionStateCache' coreProjection' ioDispatcher' firstPhase
Long Parameter List,EventStore.Projections.Core.Services.Processing,EventReaderBasedProjectionProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\DefaultProjectionProcessingStrategy.cs,CreateCheckpointManager,The method has 7 parameters. Parameters: projectionCorrelationId' publisher' ioDispatcher' namingBuilder' coreProjectionCheckpointWriter' definesFold' readerStrategy
Long Parameter List,EventStore.Projections.Core.Services.Processing,DefaultProjectionProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\DefaultProjectionProcessingStrategy.cs,DefaultProjectionProcessingStrategy,The method has 7 parameters. Parameters: name' projectionVersion' stateHandler' projectionConfig' sourceDefinition' logger' subscriptionDispatcher
Long Parameter List,EventStore.Projections.Core.Services.Processing,DefaultProjectionProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\DefaultProjectionProcessingStrategy.cs,CreateFirstProcessingPhase,The method has 12 parameters. Parameters: publisher' inputQueue' projectionCorrelationId' partitionStateCache' updateStatistics' coreProjection' subscriptionDispatcher' zeroCheckpointTag' checkpointManager' readerStrategy' resultWriter' emittedStreamsTracker
Long Parameter List,EventStore.Projections.Core.Services.Processing,EmittedDataEvent,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedDataEvent.cs,EmittedDataEvent,The method has 9 parameters. Parameters: streamId' eventId' eventType' isJson' data' metadata' causedByTag' expectedTag' onCommitted
Long Parameter List,EventStore.Projections.Core.Services.Processing,EmittedLinkTo,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedLinkTo.cs,EmittedLinkTo,The method has 6 parameters. Parameters: streamId' eventId' targetStreamId' causedByTag' expectedTag' onCommitted
Long Parameter List,EventStore.Projections.Core.Services.Processing,EmittedLinkTo,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedLinkTo.cs,EmittedLinkTo,The method has 7 parameters. Parameters: streamId' eventId' targetStreamId' targetEventNumber' causedByTag' expectedTag' originalStreamId
Long Parameter List,EventStore.Projections.Core.Services.Processing,EmittedStreamsWriter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStreamsWriter.cs,WriteEvents,The method has 5 parameters. Parameters: streamId' expectedVersion' events' writeAs' complete
Long Parameter List,EventStore.Projections.Core.Services.Processing,EventByTypeIndexEventReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventByTypeIndexEventReader.cs,EventByTypeIndexEventReader,The method has 10 parameters. Parameters: publisher' eventReaderCorrelationId' readAs' eventTypes' includeDeletedStreamNotification' fromTfPosition' fromPositions' resolveLinkTos' timeProvider' stopOnEof
Long Parameter List,EventStore.Projections.Core.Services.Processing,TfBased,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventByTypeIndexEventReader.cs,TfBased,The method has 5 parameters. Parameters: timeProvider' reader' fromTfPosition' publisher' readAs
Long Parameter List,EventStore.Projections.Core.Services.Processing,EventProcessedResult,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventProcessedResult.cs,EventProcessedResult,The method has 10 parameters. Parameters: partition' checkpointTag' oldState' newState' oldSharedState' newSharedState' emittedEvents' causedBy' correlationId' isPartitionTombstone
Long Parameter List,EventStore.Projections.Core.Services.Processing,EventReorderingReaderSubscription,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventReorderingReaderSubscription.cs,EventReorderingReaderSubscription,The method has 11 parameters. Parameters: publisher' subscriptionId' from' readerStrategy' timeProvider' checkpointUnhandledBytesThreshold' checkpointProcessedEventsThreshold' checkpointAfterMs' processingLagMs' stopOnEof' stopAfterNEvents
Long Parameter List,EventStore.Projections.Core.Services.Processing,ExternallyFedByStreamEventReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ExternallyFedByStreamEventReader.cs,ExternallyFedByStreamEventReader,The method has 7 parameters. Parameters: publisher' eventReaderCorrelationId' readAs' ioDispatcher' limitingCommitPosition' timeProvider' resolveLinkTos
Long Parameter List,EventStore.Projections.Core.Services.Processing,ExternallyFedReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ExternallyFedReaderStrategy.cs,CreatePausedEventReader,The method has 6 parameters. Parameters: eventReaderId' publisher' ioDispatcher' checkpointTag' stopOnEof' stopAfterNEvents
Long Parameter List,EventStore.Projections.Core.Services.Processing,GetDataWorkItemBase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\GetDataWorkItemBase.cs,GetDataWorkItemBase,The method has 5 parameters. Parameters: publisher' correlationId' projectionId' projection' partition
Long Parameter List,EventStore.Projections.Core.Services.Processing,GetResultWorkItem,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\GetResultWorkItem.cs,GetResultWorkItem,The method has 5 parameters. Parameters: publisher' correlationId' projectionId' projection' partition
Long Parameter List,EventStore.Projections.Core.Services.Processing,GetStateWorkItem,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\GetStateWorkItem.cs,GetStateWorkItem,The method has 5 parameters. Parameters: publisher' correlationId' projectionId' projection' partition
Long Parameter List,EventStore.Projections.Core.Services.Processing,IEmittedStreamsWriter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\IEmittedStreamsWriter.cs,WriteEvents,The method has 5 parameters. Parameters: streamId' expectedVersion' events' writeAs' complete
Long Parameter List,EventStore.Projections.Core.Services.Processing,IEventProcessingProjectionPhase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\IEventProcessingPhase.cs,EmitEofResult,The method has 5 parameters. Parameters: partition' resultBody' causedBy' causedByGuid' correlationId
Long Parameter List,EventStore.Projections.Core.Services.Processing,IReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\IReaderStrategy.cs,CreatePausedEventReader,The method has 6 parameters. Parameters: eventReaderId' publisher' ioDispatcher' checkpointTag' stopOnEof' stopAfterNEvents
Long Parameter List,EventStore.Projections.Core.Services.Processing,IResultWriter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\IResultWriter.cs,WriteEofResult,The method has 6 parameters. Parameters: subscriptionId' partition' resultBody' causedBy' causedByGuid' correlationId
Long Parameter List,EventStore.Projections.Core.Services.Processing,MultiStreamEventReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\MultiStreamEventReader.cs,MultiStreamEventReader,The method has 11 parameters. Parameters: ioDispatcher' publisher' eventReaderCorrelationId' readAs' phase' streams' fromPositions' resolveLinkTos' timeProvider' stopOnEof' stopAfterNEvents
Long Parameter List,EventStore.Projections.Core.Services.Processing,MultiStreamMultiOutputCheckpointManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\MultiStreamMultiOutputCheckpointManager.cs,MultiStreamMultiOutputCheckpointManager,The method has 13 parameters. Parameters: publisher' projectionCorrelationId' projectionVersion' runAs' ioDispatcher' projectionConfig' name' positionTagger' namingBuilder' usePersistentCheckpoints' producesRunningResults' definesFold' coreProjectionCheckpointWriter
Long Parameter List,EventStore.Projections.Core.Services.Processing,EventReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventReader.cs,SendPartitionDeleted_WhenReadingDataStream,The method has 7 parameters. Parameters: partition' lastEventNumber' deletedLinkOrEventPosition' deletedEventPosition' positionStreamId' positionEventNumber' preTagged
Long Parameter List,EventStore.Projections.Core.Services.Processing,NoopCheckpointManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\NoopCheckpointManager.cs,NoopCheckpointManager,The method has 6 parameters. Parameters: publisher' projectionCorrelationId' projectionConfig' name' positionTagger' namingBuilder
Long Parameter List,EventStore.Projections.Core.Services.Processing,ParallelQueryAllStreamsMasterReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ParallelQueryAllStreamsMasterReaderStrategy.cs,CreatePausedEventReader,The method has 6 parameters. Parameters: eventReaderId' publisher' ioDispatcher' checkpointTag' stopOnEof' stopAfterNEvents
Long Parameter List,EventStore.Projections.Core.Services.Processing,ParallelQueryMasterProjectionProcessingPhase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ParallelQueryMasterProjectionProcessingPhase.cs,ParallelQueryMasterProjectionProcessingPhase,The method has 19 parameters. Parameters: coreProjection' projectionCorrelationId' publisher' inputQueue' projectionConfig' updateStatistics' stateHandler' partitionStateCache' name' logger' zeroCheckpointTag' checkpointManager' subscriptionDispatcher' readerStrategy' resultWriter' checkpointsEnabled' stopOnEof' spoolProcessingResponseDispatcher' emittedStreamsTracker
Long Parameter List,EventStore.Projections.Core.Services.Processing,ParallelQueryMasterReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ParallelQueryMasterReaderStrategy.cs,ParallelQueryMasterReaderStrategy,The method has 5 parameters. Parameters: tag' phase' runAs' timeProvider' catalogStream
Long Parameter List,EventStore.Projections.Core.Services.Processing,ParallelQueryMasterReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ParallelQueryMasterReaderStrategy.cs,CreatePausedEventReader,The method has 6 parameters. Parameters: eventReaderId' publisher' ioDispatcher' checkpointTag' stopOnEof' stopAfterNEvents
Long Parameter List,EventStore.Projections.Core.Services.Processing,ParallelQueryProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ParallelQueryProcessingStrategy.cs,ParallelQueryProcessingStrategy,The method has 11 parameters. Parameters: name' projectionVersion' stateHandler' projectionConfig' sourceDefinition' handlerType' query' namesBuilder' logger' spoolProcessingResponseDispatcher' subscriptionDispatcher
Long Parameter List,EventStore.Projections.Core.Services.Processing,ParallelQueryProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ParallelQueryProcessingStrategy.cs,CreateProjectionProcessingPhases,The method has 8 parameters. Parameters: publisher' inputQueue' projectionCorrelationId' namingBuilder' partitionStateCache' coreProjection' ioDispatcher' firstPhase
Long Parameter List,EventStore.Projections.Core.Services.Processing,ParallelQueryProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ParallelQueryProcessingStrategy.cs,CreateFirstProcessingPhase,The method has 12 parameters. Parameters: publisher' inputQueue' projectionCorrelationId' partitionStateCache' updateStatistics' coreProjection' subscriptionDispatcher' zeroCheckpointTag' checkpointManager' readerStrategy' resultWriter' emittedStreamsTracker
Long Parameter List,EventStore.Projections.Core.Services.Processing,ProcessingStrategySelector,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProcessingStrategySelector.cs,CreateProjectionProcessingStrategy,The method has 8 parameters. Parameters: name' projectionVersion' namesBuilder' sourceDefinition' projectionConfig' stateHandler' handlerType' query
Long Parameter List,EventStore.Projections.Core.Services.Processing,ProcessingStrategySelector,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProcessingStrategySelector.cs,CreateSlaveProjectionProcessingStrategy,The method has 9 parameters. Parameters: name' projectionVersion' sourceDefinition' projectionConfig' stateHandler' workerId' publisher' masterCoreProjectionId' projectionCoreService
Long Parameter List,EventStore.Projections.Core.Services.Processing,EventReaderCoreService,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventReaderCoreService.cs,EventReaderCoreService,The method has 5 parameters. Parameters: publisher' ioDispatcher' eventCacheSize' writerCheckpoint' runHeadingReader
Long Parameter List,EventStore.Projections.Core.Services.Processing,EventProcessingProjectionProcessingPhase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventProcessingProjectionProcessingPhase.cs,EventProcessingProjectionProcessingPhase,The method has 22 parameters. Parameters: coreProjection' projectionCorrelationId' publisher' inputQueue' projectionConfig' updateStatistics' projectionStateHandler' partitionStateCache' definesStateTransform' projectionName' logger' zeroCheckpointTag' coreProjectionCheckpointManager' statePartitionSelector' subscriptionDispatcher' readerStrategy' resultWriter' useCheckpoints' stopOnEof' isBiState' orderedPartitionProcessing' emittedStreamsTracker
Long Parameter List,EventStore.Projections.Core.Services.Processing,EventProcessingProjectionProcessingPhase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventProcessingProjectionProcessingPhase.cs,SafeProcessEventByHandler,The method has 6 parameters. Parameters: partition' message' newState' newSharedState' projectionResult' emittedEvents
Long Parameter List,EventStore.Projections.Core.Services.Processing,EventProcessingProjectionProcessingPhase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventProcessingProjectionProcessingPhase.cs,ProcessEventByHandler,The method has 6 parameters. Parameters: partition' message' newState' newSharedState' projectionResult' emittedEvents
Long Parameter List,EventStore.Projections.Core.Services.Processing,EventSubscriptionBasedProjectionProcessingPhase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventSubscriptionBasedProjectionProcessingPhase.cs,EventSubscriptionBasedProjectionProcessingPhase,The method has 19 parameters. Parameters: publisher' inputQueue' coreProjection' projectionCorrelationId' checkpointManager' projectionConfig' projectionName' logger' zeroCheckpointTag' partitionStateCache' resultWriter' updateStatistics' subscriptionDispatcher' readerStrategy' useCheckpoints' stopOnEof' orderedPartitionProcessing' isBiState' emittedStreamsTracker
Long Parameter List,EventStore.Projections.Core.Services.Processing,EventSubscriptionBasedProjectionProcessingPhase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventSubscriptionBasedProjectionProcessingPhase.cs,InternalCommittedEventProcessed,The method has 5 parameters. Parameters: partition' message' emittedEvents' newPartitionState' newSharedPartitionState
Long Parameter List,EventStore.Projections.Core.Services.Processing,EventSubscriptionBasedProjectionProcessingPhase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventSubscriptionBasedProjectionProcessingPhase.cs,EmitEofResult,The method has 5 parameters. Parameters: partition' resultBody' causedBy' causedByGuid' correlationId
Long Parameter List,EventStore.Projections.Core.Services.Processing,ProjectionProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionProcessingStrategy.cs,Create,The method has 8 parameters. Parameters: projectionCorrelationId' inputQueue' workerId' runAs' publisher' ioDispatcher' subscriptionDispatcher' timeProvider
Long Parameter List,EventStore.Projections.Core.Services.Processing,ProjectionProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionProcessingStrategy.cs,CreateProcessingPhases,The method has 10 parameters. Parameters: publisher' inputQueue' projectionCorrelationId' partitionStateCache' updateStatistics' coreProjection' namingBuilder' timeProvider' ioDispatcher' coreProjectionCheckpointWriter
Long Parameter List,EventStore.Projections.Core.Services.Processing,QueuedEmittedStreamsWriter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\QueuedEmittedStreamsWriter.cs,WriteEvents,The method has 5 parameters. Parameters: streamId' expectedVersion' events' writeAs' complete
Long Parameter List,EventStore.Projections.Core.Services.Processing,ReaderSubscriptionBase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderSubscriptionBase.cs,ReaderSubscriptionBase,The method has 10 parameters. Parameters: publisher' subscriptionId' from' readerStrategy' timeProvider' checkpointUnhandledBytesThreshold' checkpointProcessedEventsThreshold' checkpointAfterMs' stopOnEof' stopAfterNEvents
Long Parameter List,EventStore.Projections.Core.Services.Processing,QueryProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\QueryProcessingStrategy.cs,QueryProcessingStrategy,The method has 7 parameters. Parameters: name' projectionVersion' stateHandler' projectionConfig' sourceDefinition' logger' subscriptionDispatcher
Long Parameter List,EventStore.Projections.Core.Services.Processing,QueryProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\QueryProcessingStrategy.cs,CreateProjectionProcessingPhases,The method has 8 parameters. Parameters: publisher' inputQueue' projectionCorrelationId' namingBuilder' partitionStateCache' coreProjection' ioDispatcher' firstPhase
Long Parameter List,EventStore.Projections.Core.Services.Processing,ResultWriter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ResultWriter.cs,ResultWriter,The method has 5 parameters. Parameters: resultEventEmitter' coreProjectionCheckpointManager' producesRunningResults' zeroCheckpointTag' partitionCatalogStreamName
Long Parameter List,EventStore.Projections.Core.Services.Processing,ResultWriter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ResultWriter.cs,WriteEofResult,The method has 6 parameters. Parameters: subscriptionId' partition' resultBody' causedBy' causedByGuid' correlationId
Long Parameter List,EventStore.Projections.Core.Services.Processing,ResultWriter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ResultWriter.cs,WriteResult,The method has 5 parameters. Parameters: partition' resultBody' causedBy' causedByGuid' correlationId
Long Parameter List,EventStore.Projections.Core.Services.Processing,SlaveQueryProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\SlaveQueryProcessingStrategy.cs,SlaveQueryProcessingStrategy,The method has 10 parameters. Parameters: name' projectionVersion' stateHandler' projectionConfig' sourceDefinition' logger' workerId' publisher' masterCoreProjectionId' subscriptionDispatcher
Long Parameter List,EventStore.Projections.Core.Services.Processing,SlaveQueryProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\SlaveQueryProcessingStrategy.cs,CreateProjectionProcessingPhases,The method has 8 parameters. Parameters: publisher' inputQueue' projectionCorrelationId' namingBuilder' partitionStateCache' coreProjection' ioDispatcher' firstPhase
Long Parameter List,EventStore.Projections.Core.Services.Processing,SlaveQueryProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\SlaveQueryProcessingStrategy.cs,CreateCheckpointManager,The method has 7 parameters. Parameters: projectionCorrelationId' publisher' ioDispatcher' namingBuilder' coreProjectionCheckpointWriter' definesFold' readerStrategy
Long Parameter List,EventStore.Projections.Core.Services.Processing,SlaveResultWriter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\SlaveResultWriter.cs,WriteEofResult,The method has 6 parameters. Parameters: subscriptionId' partition' resultBody' causedBy' causedByGuid' correlationId
Long Parameter List,EventStore.Projections.Core.Services.Processing,CheckpointTag,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CheckpointTag.cs,CheckpointTag,The method has 6 parameters. Parameters: phase' catalogStream' catalogPosition' dataStream' dataPosition' commitPosition
Long Parameter List,EventStore.Projections.Core.Services.Processing,CheckpointTag,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CheckpointTag.cs,FromByStreamPosition,The method has 6 parameters. Parameters: phase' catalogStream' catalogPosition' dataStream' dataPosition' commitPosition
Long Parameter List,EventStore.Projections.Core.Services.Processing,EmittedEvent,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedEvent.cs,EmittedEvent,The method has 6 parameters. Parameters: streamId' eventId' eventType' causedByTag' expectedTag' onCommitted
Long Parameter List,EventStore.Projections.Core.Services.Processing,EmittedStream,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,EmittedStream,The method has 9 parameters. Parameters: streamId' writerConfiguration' projectionVersion' positionTagger' fromCheckpointPosition' publisher' ioDispatcher' readyHandler' noCheckpoints
Long Parameter List,EventStore.Projections.Core.Services.Processing,WriterConfiguration,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,WriterConfiguration,The method has 5 parameters. Parameters: writer' streamMetadata' writeAs' maxWriteBatchLength' logger
Long Parameter List,EventStore.Projections.Core.Services.Processing,ReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderStrategy.cs,CreateExternallyFedReaderStrategy,The method has 5 parameters. Parameters: tag' phase' timeProvider' runAs' limitingCommitPosition
Long Parameter List,EventStore.Projections.Core.Services.Processing,ReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderStrategy.cs,Create,The method has 6 parameters. Parameters: tag' phase' sources' timeProvider' stopOnEof' runAs
Long Parameter List,EventStore.Projections.Core.Services.Processing,ReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderStrategy.cs,ReaderStrategy,The method has 14 parameters. Parameters: tag' phase' allStreams' categories' streams' allEvents' includeLinks' events' includeStreamDeletedNotification' catalogStream' processingLag' reorderEvents' runAs' timeProvider
Long Parameter List,EventStore.Projections.Core.Services.Processing,ReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderStrategy.cs,CreatePausedEventReader,The method has 6 parameters. Parameters: eventReaderId' publisher' ioDispatcher' checkpointTag' stopOnEof' stopAfterNEvents
Long Parameter List,EventStore.Projections.Core.Services.Processing,ReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderStrategy.cs,CreatePausedStreamEventReader,The method has 9 parameters. Parameters: eventReaderId' ioDispatcher' publisher' checkpointTag' streamName' stopOnEof' stopAfterNEvents' resolveLinkTos' produceStreamDeletes
Long Parameter List,EventStore.Projections.Core.Services.Processing,ReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderStrategy.cs,CreatePausedEventIndexEventReader,The method has 9 parameters. Parameters: eventReaderId' ioDispatcher' publisher' checkpointTag' stopOnEof' stopAfterNEvents' resolveLinkTos' eventTypes' includeStreamDeletedNotification
Long Parameter List,EventStore.Projections.Core.Services.Processing,ReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderStrategy.cs,CreatePausedMultiStreamEventReader,The method has 8 parameters. Parameters: eventReaderId' ioDispatcher' publisher' checkpointTag' stopOnEof' stopAfterNEvents' resolveLinkTos' streams
Long Parameter List,EventStore.Projections.Core.Services.Processing,ReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderStrategy.cs,CreatePausedCatalogReader,The method has 8 parameters. Parameters: eventReaderId' publisher' ioDispatcher' checkpointTag' stopOnEof' stopAfterNEvents' resolveLinkTos' catalogStream
Long Parameter List,EventStore.Projections.Core.Services.Processing,ReaderSubscriptionOptions,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderSubscriptionOptions.cs,ReaderSubscriptionOptions,The method has 5 parameters. Parameters: checkpointUnhandledBytesThreshold' checkpointProcessedEventsThreshold' checkpointAfterMs' stopOnEof' stopAfterNEvents
Long Parameter List,EventStore.Projections.Core.Services.Processing,ResolvedEvent,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ResolvedEvent.cs,ResolvedEvent,The method has 15 parameters. Parameters: positionStreamId' positionSequenceNumber' eventStreamId' eventSequenceNumber' resolvedLinkTo' position' eventOrLinkTargetPosition' eventId' eventType' isJson' data' metadata' positionMetadata' streamMetadata' timestamp
Long Parameter List,EventStore.Projections.Core.Services.Processing,ResolvedEvent,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ResolvedEvent.cs,ResolvedEvent,The method has 13 parameters. Parameters: positionStreamId' positionSequenceNumber' eventStreamId' eventSequenceNumber' resolvedLinkTo' position' eventId' eventType' isJson' data' metadata' positionMetadata' streamMetadata
Long Parameter List,EventStore.Projections.Core.Services.Processing,EmittedLinkToWithRecategorization,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedLinkToWithRecategorization.cs,EmittedLinkToWithRecategorization,The method has 7 parameters. Parameters: streamId' eventId' target' causedByTag' expectedTag' originalStreamId' streamDeletedAt
Long Parameter List,EventStore.Projections.Core.Services.Processing,SpoolStreamProcessingWorkItem,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\SpoolStreamProcessingWorkItem.cs,SpoolStreamProcessingWorkItem,The method has 10 parameters. Parameters: container' publisher' resultWriter' loadBalancer' message' slaves' spoolProcessingResponseDispatcher' limitingCommitPosition' subscriptionId' definesCatalogTransform
Long Parameter List,EventStore.Projections.Core.Services.Processing,StreamEventReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\StreamEventReader.cs,StreamEventReader,The method has 9 parameters. Parameters: publisher' eventReaderCorrelationId' readAs' streamName' fromSequenceNumber' timeProvider' resolveLinkTos' produceStreamDeletes' stopOnEof
Long Parameter List,EventStore.Projections.Core.Services.Processing,CoreProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjection.cs,CoreProjection,The method has 15 parameters. Parameters: projectionProcessingStrategy' version' projectionCorrelationId' inputQueue' workerId' runAs' publisher' ioDispatcher' subscriptionDispatcher' logger' namingBuilder' coreProjectionCheckpointWriter' partitionStateCache' effectiveProjectionName' timeProvider
Long Parameter List,EventStore.Projections.Core.Services.Processing,ProjectionCheckpoint,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionCheckpoint.cs,ProjectionCheckpoint,The method has 10 parameters. Parameters: publisher' ioDispatcher' projectionVersion' runAs' readyHandler' from' positionTagger' maxWriteBatchLength' maximumAllowedWritesInFlight' logger
Long Parameter List,EventStore.Projections.Core.Services.Processing,ReaderSubscription,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderSubscription.cs,ReaderSubscription,The method has 11 parameters. Parameters: tag' publisher' subscriptionId' from' readerStrategy' timeProvider' checkpointUnhandledBytesThreshold' checkpointProcessedEventsThreshold' checkpointAfterMs' stopOnEof' stopAfterNEvents
Long Parameter List,EventStore.Projections.Core.Services.Processing,TransactionFileEventReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\TransactionFileEventReader.cs,TransactionFileEventReader,The method has 8 parameters. Parameters: publisher' eventReaderCorrelationId' readAs' from' timeProvider' stopOnEof' deliverEndOfTFPosition' resolveLinkTos
Long Parameter List,EventStore.Projections.Core.Services.Processing,WriteQueryEofProjectionProcessingPhase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\WriteQueryEofProjectionProcessingPhase.cs,WriteQueryEofProjectionProcessingPhase,The method has 8 parameters. Parameters: publisher' phase' resultStream' coreProjection' stateCache' checkpointManager' emittedEventWriter' emittedStreamsTracker
Long Parameter List,EventStore.Projections.Core.Services.Processing,WriteQueryResultProjectionProcessingPhase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\WriteQueryResultProjectionProcessingPhase.cs,WriteQueryResultProjectionProcessingPhase,The method has 8 parameters. Parameters: publisher' phase' resultStream' coreProjection' stateCache' checkpointManager' emittedEventWriter' emittedStreamsTracker
Long Parameter List,EventStore.Projections.Core.Services.Processing,WriteQueryResultProjectionProcessingPhaseBase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\WriteQueryResultProjectionProcessingPhaseBase.cs,WriteQueryResultProjectionProcessingPhaseBase,The method has 8 parameters. Parameters: publisher' phase' resultStream' coreProjection' stateCache' checkpointManager' emittedEventWriter' emittedStreamsTracker
Long Parameter List,EventStore.Projections.Core.Services.Processing,ProjectionCoreService,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionCoreService.cs,ProjectionCoreService,The method has 8 parameters. Parameters: workerId' inputQueue' publisher' subscriptionDispatcher' timeProvider' ioDispatcher' spoolProcessingResponseDispatcher' timeoutScheduler
Long Parameter List,EventStore.Projections.Core.Services.v8,V8ProjectionStateHandler,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\v8\V8ProjectionStateHandler.cs,V8ProjectionStateHandler,The method has 5 parameters. Parameters: preludeName' querySource' getModuleSource' logger' cancelCallbackFactory
Long Parameter List,EventStore.Projections.Core.Services.v8,V8ProjectionStateHandler,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\v8\V8ProjectionStateHandler.cs,ProcessEvent,The method has 7 parameters. Parameters: partition' eventPosition' category' data' newState' newSharedState' emittedEvents
Long Parameter List,EventStore.Projections.Core.Standard,CategorizeEventsByStreamPath,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Standard\CategorizeEventsByStreamPath.cs,ProcessEvent,The method has 7 parameters. Parameters: partition' eventPosition' category1' data' newState' newSharedState' emittedEvents
Long Parameter List,EventStore.Projections.Core.Standard,CategorizeStreamByPath,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Standard\CategorizeStreamByPath.cs,ProcessEvent,The method has 7 parameters. Parameters: partition' eventPosition' category1' data' newState' newSharedState' emittedEvents
Long Parameter List,EventStore.Projections.Core.Standard,IndexEventsByEventType,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Standard\IndexEventsByEventType.cs,ProcessEvent,The method has 7 parameters. Parameters: partition' eventPosition' category1' data' newState' newSharedState' emittedEvents
Long Parameter List,EventStore.Projections.Core.Standard,IndexStreams,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Standard\IndexStreams.cs,ProcessEvent,The method has 7 parameters. Parameters: partition' eventPosition' category1' data' newState' newSharedState' emittedEvents
Long Parameter List,EventStore.Projections.Core.Standard,StubHandler,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Standard\StubHandler.cs,ProcessEvent,The method has 7 parameters. Parameters: partition' eventPosition' category1' data' newState' newSharedState' emittedEvents
Long Parameter List,EventStore.Projections.Core.v8,Js1,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\v8\js1.cs,CompilePrelude,The method has 6 parameters. Parameters: prelude' fileName' loadModuleHandler' enterCancellableRegionHandler' exitCancellableRegionHandler' logHandler
Long Parameter List,EventStore.Projections.Core.v8,Js1,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\v8\js1.cs,CompileQuery,The method has 5 parameters. Parameters: prelude' script' fileName' commandHandlerRegisteredCallback' reverseCommandHandler
Long Parameter List,EventStore.Projections.Core.v8,Js1,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\v8\js1.cs,ExecuteCommandHandler,The method has 8 parameters. Parameters: scriptHandle' eventHandlerHandle' dataJson' dataOther' otherLength' resultJson' result2Json' memoryHandle
Long Parameter List,EventStore.Projections.Core.v8,PreludeScript,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\v8\PreludeScript.cs,PreludeScript,The method has 5 parameters. Parameters: script' fileName' getModuleSourceAndFileName' cancelCallbackFactory' logger
Long Identifier,EventStore.Projections.Core.Common,ProjectionConsts,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Common\ProjectionConsts.cs,,The length of the parameter CheckpointUnhandledBytesThreshold is 33.
Long Identifier,EventStore.Projections.Core.Messages,PartitionMeasured,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ParallelQueryProcessingMessages.cs,PartitionMeasured,The length of the parameter subscriptionMessageSequenceNumber is 33.
Long Identifier,EventStore.Projections.Core.Messages,CheckpointSuggested,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,CheckpointSuggested,The length of the parameter subscriptionMessageSequenceNumber is 33.
Long Identifier,EventStore.Projections.Core.Messages,ProgressChanged,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,ProgressChanged,The length of the parameter subscriptionMessageSequenceNumber is 33.
Long Identifier,EventStore.Projections.Core.Messages,SubscriptionStarted,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,SubscriptionStarted,The length of the parameter subscriptionMessageSequenceNumber is 33.
Long Identifier,EventStore.Projections.Core.Messages,NotAuthorized,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,NotAuthorized,The length of the parameter subscriptionMessageSequenceNumber is 33.
Long Identifier,EventStore.Projections.Core.Messages,EofReached,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,EofReached,The length of the parameter subscriptionMessageSequenceNumber is 33.
Long Identifier,EventStore.Projections.Core.Messages,PartitionEofReached,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,PartitionEofReached,The length of the parameter subscriptionMessageSequenceNumber is 33.
Long Identifier,EventStore.Projections.Core.Messages,PartitionDeleted,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,PartitionDeleted,The length of the parameter subscriptionMessageSequenceNumber is 33.
Long Identifier,EventStore.Projections.Core.Messages,CommittedEventReceived,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,Sample,The length of the parameter subscriptionMessageSequenceNumber is 33.
Long Identifier,EventStore.Projections.Core.Messages,CommittedEventReceived,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,Sample,The length of the parameter subscriptionMessageSequenceNumber is 33.
Long Identifier,EventStore.Projections.Core.Messages,CommittedEventReceived,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,CommittedEventReceived,The length of the parameter subscriptionMessageSequenceNumber is 33.
Long Identifier,EventStore.Projections.Core.Messages,CommittedEventReceived,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,CommittedEventReceived,The length of the parameter subscriptionMessageSequenceNumber is 33.
Long Identifier,EventStore.Projections.Core.Messages,CommittedEventReceived,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,FromCommittedEventDistributed,The length of the parameter subscriptionMessageSequenceNumber is 33.
Long Identifier,EventStore.Projections.Core.Messages,EventReaderSubscriptionMessageBase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,EventReaderSubscriptionMessageBase,The length of the parameter subscriptionMessageSequenceNumber is 33.
Long Identifier,EventStore.Projections.Core.Messages,EventReaderSubscriptionMessageBase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\EventReaderSubscriptionMessageBase.cs,,The length of the parameter _subscriptionMessageSequenceNumber is 34.
Long Identifier,EventStore.Projections.Core.Messages,EventReaderPartitionDeleted,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ReaderSubscriptionMessage.cs,EventReaderPartitionDeleted,The length of the parameter deleteEventOrLinkTargetPosition is 31.
Long Identifier,EventStore.Projections.Core.Messages,EventReaderPartitionDeleted,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ReaderSubscriptionMessage.cs,,The length of the parameter _deleteEventOrLinkTargetPosition is 32.
Long Identifier,EventStore.Projections.Core.Messages,CommittedEventDistributed,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ReaderSubscriptionMessage.cs,Sample,The length of the parameter safeTransactionFileReaderJoinPosition is 37.
Long Identifier,EventStore.Projections.Core.Messages,CommittedEventDistributed,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ReaderSubscriptionMessage.cs,CommittedEventDistributed,The length of the parameter safeTransactionFileReaderJoinPosition is 37.
Long Identifier,EventStore.Projections.Core.Messages,CommittedEventDistributed,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ReaderSubscriptionMessage.cs,,The length of the parameter _safeTransactionFileReaderJoinPosition is 38.
Long Identifier,EventStore.Projections.Core.Messages,UpdateConfig,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ProjectionManagementMessage.cs,UpdateConfig,The length of the parameter checkpointUnhandledBytesThreshold is 33.
Long Identifier,EventStore.Projections.Core.Messages,UpdateConfig,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ProjectionManagementMessage.cs,,The length of the parameter _checkpointUnhandledBytesThreshold is 34.
Long Identifier,EventStore.Projections.Core.Messages,ProjectionConfig,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ProjectionManagementMessage.cs,ProjectionConfig,The length of the parameter checkpointUnhandledBytesThreshold is 33.
Long Identifier,EventStore.Projections.Core.Messages,ProjectionConfig,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ProjectionManagementMessage.cs,,The length of the parameter _checkpointUnhandledBytesThreshold is 34.
Long Identifier,EventStore.Projections.Core.Messages.Persisted.Commands,PersistedProjectionConfig,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\Persisted\Commands\PersistedProjectionConfig.cs,,The length of the parameter CheckpointUnhandledBytesThreshold is 33.
Long Identifier,EventStore.Projections.Core,ProjectionManagerNode,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\ProjectionManagerNode.cs,CreateManagerService,The length of the parameter projectionManagerCommandWriter is 30.
Long Identifier,EventStore.Projections.Core,ProjectionManagerNode,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\ProjectionManagerNode.cs,CreateManagerService,The length of the parameter projectionManagerResponseReader is 31.
Long Identifier,EventStore.Projections.Core,ProjectionManagerNode,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\ProjectionManagerNode.cs,SubscribeMainBus,The length of the parameter projectionManagerResponseReader is 31.
Long Identifier,EventStore.Projections.Core,ProjectionManagerNode,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\ProjectionManagerNode.cs,SubscribeMainBus,The length of the parameter projectionManagerCommandWriter is 30.
Long Identifier,EventStore.Projections.Core,ProjectionWorkerNode,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\ProjectionWorkerNode.cs,,The length of the parameter _projectionCoreServiceCommandReader is 35.
Long Identifier,EventStore.Projections.Core,ProjectionWorkerNode,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\ProjectionWorkerNode.cs,,The length of the parameter _spoolProcessingResponseDispatcher is 34.
Long Identifier,EventStore.Projections.Core,ProjectionWorkerNode,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\ProjectionWorkerNode.cs,,The length of the parameter _slaveProjectionResponseWriter is 30.
Long Identifier,EventStore.Projections.Core.Services,ProjectionConfig,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionConfig.cs,ProjectionConfig,The length of the parameter checkpointUnhandledBytesThreshold is 33.
Long Identifier,EventStore.Projections.Core.Services,ProjectionConfig,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionConfig.cs,,The length of the parameter _checkpointUnhandledBytesThreshold is 34.
Long Identifier,EventStore.Projections.Core.Services.Management,ManagedProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ManagedProjection.cs,CreateDefaultProjectionConfiguration,The length of the parameter checkpointUnhandledBytesThreshold is 33.
Long Identifier,EventStore.Projections.Core.Services.Management,PersistedState,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ManagedProjection.cs,,The length of the parameter NumberOfPrequisitesMetForDeletion is 33.
Long Identifier,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,ReadProjectionsList,The length of the parameter projectionsRegistrationStreamId is 31.
Long Identifier,EventStore.Projections.Core.Services.Processing,CoreProjectionCheckpointManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjectionCheckpointManager.cs,SendPrerecordedEvent,The length of the parameter prerecordedEventMessageSequenceNumber is 37.
Long Identifier,EventStore.Projections.Core.Services.Processing,CoreProjectionCheckpointManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjectionCheckpointManager.cs,CheckpointWritten,The length of the parameter lastCompletedCheckpointPosition is 31.
Long Identifier,EventStore.Projections.Core.Services.Processing,CoreProjectionCheckpointManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjectionCheckpointManager.cs,,The length of the parameter _lastCompletedCheckpointPosition is 32.
Long Identifier,EventStore.Projections.Core.Services.Processing,CoreProjectionCheckpointReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjectionCheckpointReader.cs,,The length of the parameter _lastWrittenCheckpointEventNumber is 33.
Long Identifier,EventStore.Projections.Core.Services.Processing,CoreProjectionCheckpointWriter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjectionCheckpointWriter.cs,,The length of the parameter _lastWrittenCheckpointEventNumber is 33.
Long Identifier,EventStore.Projections.Core.Services.Processing,DefaultCheckpointManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\DefaultCheckpointManager.cs,DefaultCheckpointManager,The length of the parameter coreProjectionCheckpointWriter is 30.
Long Identifier,EventStore.Projections.Core.Services.Processing,DefaultCheckpointManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\DefaultCheckpointManager.cs,,The length of the parameter _coreProjectionCheckpointWriter is 31.
Long Identifier,EventStore.Projections.Core.Services.Processing,EventReaderBasedProjectionProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\DefaultProjectionProcessingStrategy.cs,CreateProcessingPhases,The length of the parameter coreProjectionCheckpointWriter is 30.
Long Identifier,EventStore.Projections.Core.Services.Processing,EventReaderBasedProjectionProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\DefaultProjectionProcessingStrategy.cs,CreateCheckpointManager,The length of the parameter coreProjectionCheckpointWriter is 30.
Long Identifier,EventStore.Projections.Core.Services.Processing,EmittedStreamsDeleter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStreamsDeleter.cs,EmittedStreamsDeleter,The length of the parameter emittedStreamsCheckpointStreamId is 32.
Long Identifier,EventStore.Projections.Core.Services.Processing,EmittedStreamsDeleter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStreamsDeleter.cs,,The length of the parameter _emittedStreamsCheckpointStreamId is 33.
Long Identifier,EventStore.Projections.Core.Services.Processing,EventByTypeIndexEventReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventByTypeIndexEventReader.cs,EventByTypeIndexEventReader,The length of the parameter includeDeletedStreamNotification is 32.
Long Identifier,EventStore.Projections.Core.Services.Processing,EventByTypeIndexEventReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventByTypeIndexEventReader.cs,DoSwitch,The length of the parameter lastKnownIndexCheckpointPosition is 32.
Long Identifier,EventStore.Projections.Core.Services.Processing,EventByTypeIndexEventReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventByTypeIndexEventReader.cs,,The length of the parameter _includeDeletedStreamNotification is 33.
Long Identifier,EventStore.Projections.Core.Services.Processing,IndexBased,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventByTypeIndexEventReader.cs,,The length of the parameter _indexCheckpointStreamRequested is 31.
Long Identifier,EventStore.Projections.Core.Services.Processing,IndexBased,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventByTypeIndexEventReader.cs,,The length of the parameter _lastKnownIndexCheckpointEventNumber is 36.
Long Identifier,EventStore.Projections.Core.Services.Processing,IndexBased,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventByTypeIndexEventReader.cs,,The length of the parameter _lastKnownIndexCheckpointPosition is 33.
Long Identifier,EventStore.Projections.Core.Services.Processing,EventByTypeIndexPositionTagger,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventByTypeIndexPositionTagger.cs,EventByTypeIndexPositionTagger,The length of the parameter includeStreamDeletedNotification is 32.
Long Identifier,EventStore.Projections.Core.Services.Processing,EventReorderingReaderSubscription,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventReorderingReaderSubscription.cs,EventReorderingReaderSubscription,The length of the parameter checkpointUnhandledBytesThreshold is 33.
Long Identifier,EventStore.Projections.Core.Services.Processing,EventReorderingReaderSubscription,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventReorderingReaderSubscription.cs,EventReorderingReaderSubscription,The length of the parameter checkpointProcessedEventsThreshold is 34.
Long Identifier,EventStore.Projections.Core.Services.Processing,MultiStreamMultiOutputCheckpointManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\MultiStreamMultiOutputCheckpointManager.cs,MultiStreamMultiOutputCheckpointManager,The length of the parameter coreProjectionCheckpointWriter is 30.
Long Identifier,EventStore.Projections.Core.Services.Processing,NoopCheckpointManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\NoopCheckpointManager.cs,,The length of the parameter _lastCompletedCheckpointPosition is 32.
Long Identifier,EventStore.Projections.Core.Services.Processing,ParallelQueryMasterProjectionProcessingPhase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ParallelQueryMasterProjectionProcessingPhase.cs,ParallelQueryMasterProjectionProcessingPhase,The length of the parameter spoolProcessingResponseDispatcher is 33.
Long Identifier,EventStore.Projections.Core.Services.Processing,ParallelQueryMasterProjectionProcessingPhase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ParallelQueryMasterProjectionProcessingPhase.cs,,The length of the parameter _spoolProcessingResponseDispatcher is 34.
Long Identifier,EventStore.Projections.Core.Services.Processing,ParallelQueryProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ParallelQueryProcessingStrategy.cs,ParallelQueryProcessingStrategy,The length of the parameter spoolProcessingResponseDispatcher is 33.
Long Identifier,EventStore.Projections.Core.Services.Processing,ParallelQueryProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ParallelQueryProcessingStrategy.cs,CreateProjectionProcessingPhases,The length of the parameter coreProjectionCheckpointWriter is 30.
Long Identifier,EventStore.Projections.Core.Services.Processing,ParallelQueryProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ParallelQueryProcessingStrategy.cs,,The length of the parameter _spoolProcessingResponseDispatcher is 34.
Long Identifier,EventStore.Projections.Core.Services.Processing,PartitionStateUpdateManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\PartitionStateUpdateManager.cs,,The length of the parameter _partitionCheckpointStreamMetadata is 34.
Long Identifier,EventStore.Projections.Core.Services.Processing,ProcessingStrategySelector,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProcessingStrategySelector.cs,ProcessingStrategySelector,The length of the parameter spoolProcessingResponseDispatcher is 33.
Long Identifier,EventStore.Projections.Core.Services.Processing,ProcessingStrategySelector,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProcessingStrategySelector.cs,,The length of the parameter _spoolProcessingResponseDispatcher is 34.
Long Identifier,EventStore.Projections.Core.Services.Processing,ProjectionNamesBuilder,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionNamesBuilder.cs,,The length of the parameter SlaveProjectionControlStreamMaxAge is 34.
Long Identifier,EventStore.Projections.Core.Services.Processing,ProjectionNamesBuilder,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionNamesBuilder.cs,,The length of the parameter ProjectionsControlStreamPrefix is 30.
Long Identifier,EventStore.Projections.Core.Services.Processing,ProjectionNamesBuilder,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionNamesBuilder.cs,,The length of the parameter ProjectionCheckpointStreamSuffix is 32.
Long Identifier,EventStore.Projections.Core.Services.Processing,ProjectionNamesBuilder,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionNamesBuilder.cs,,The length of the parameter ProjectionPartitionCatalogStreamSuffix is 38.
Long Identifier,EventStore.Projections.Core.Services.Processing,ProjectionNamesBuilder,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionNamesBuilder.cs,,The length of the parameter CategoryCatalogStreamNamePrefix is 31.
Long Identifier,EventStore.Projections.Core.Services.Processing,StandardProjections,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionNamesBuilder.cs,,The length of the parameter StreamByCategoryStandardProjection is 34.
Long Identifier,EventStore.Projections.Core.Services.Processing,StandardProjections,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionNamesBuilder.cs,,The length of the parameter EventByCategoryStandardProjection is 33.
Long Identifier,EventStore.Projections.Core.Services.Processing,EventReaderCoreService,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventReaderCoreService.cs,StartReaders,The length of the parameter distributionPointCorrelationId is 30.
Long Identifier,EventStore.Projections.Core.Services.Processing,EventProcessingProjectionProcessingPhase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventProcessingProjectionProcessingPhase.cs,EventProcessingProjectionProcessingPhase,The length of the parameter coreProjectionCheckpointManager is 31.
Long Identifier,EventStore.Projections.Core.Services.Processing,EventSubscriptionBasedProjectionProcessingPhase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventSubscriptionBasedProjectionProcessingPhase.cs,,The length of the parameter _expectedSubscriptionMessageSequenceNumber is 42.
Long Identifier,EventStore.Projections.Core.Services.Processing,EventSubscriptionBasedProjectionProcessingPhase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventSubscriptionBasedProjectionProcessingPhase.cs,,The length of the parameter _subscriptionStartedAtLastCommitPosition is 40.
Long Identifier,EventStore.Projections.Core.Services.Processing,EventSubscriptionBasedProjectionProcessingPhase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventSubscriptionBasedProjectionProcessingPhase.cs,,The length of the parameter _updateStatisticsTicketPending is 30.
Long Identifier,EventStore.Projections.Core.Services.Processing,ProjectionProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionProcessingStrategy.cs,Create,The length of the parameter coreProjectionCheckpointWriter is 30.
Long Identifier,EventStore.Projections.Core.Services.Processing,ProjectionProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionProcessingStrategy.cs,CreateProcessingPhases,The length of the parameter coreProjectionCheckpointWriter is 30.
Long Identifier,EventStore.Projections.Core.Services.Processing,ReaderSubscriptionBase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderSubscriptionBase.cs,ReaderSubscriptionBase,The length of the parameter checkpointUnhandledBytesThreshold is 33.
Long Identifier,EventStore.Projections.Core.Services.Processing,ReaderSubscriptionBase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderSubscriptionBase.cs,ReaderSubscriptionBase,The length of the parameter checkpointProcessedEventsThreshold is 34.
Long Identifier,EventStore.Projections.Core.Services.Processing,ReaderSubscriptionBase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderSubscriptionBase.cs,,The length of the parameter _checkpointUnhandledBytesThreshold is 34.
Long Identifier,EventStore.Projections.Core.Services.Processing,ReaderSubscriptionBase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderSubscriptionBase.cs,,The length of the parameter _checkpointProcessedEventsThreshold is 35.
Long Identifier,EventStore.Projections.Core.Services.Processing,ReaderSubscriptionBase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderSubscriptionBase.cs,,The length of the parameter _lastPassedOrCheckpointedEventPosition is 38.
Long Identifier,EventStore.Projections.Core.Services.Processing,ReaderSubscriptionBase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderSubscriptionBase.cs,,The length of the parameter _subscriptionMessageSequenceNumber is 34.
Long Identifier,EventStore.Projections.Core.Services.Processing,ReaderSubscriptionBase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderSubscriptionBase.cs,,The length of the parameter _eventsSinceLastCheckpointSuggestedOrStart is 42.
Long Identifier,EventStore.Projections.Core.Services.Processing,QueryProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\QueryProcessingStrategy.cs,CreateProjectionProcessingPhases,The length of the parameter coreProjectionCheckpointWriter is 30.
Long Identifier,EventStore.Projections.Core.Services.Processing,ResultWriter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ResultWriter.cs,ResultWriter,The length of the parameter coreProjectionCheckpointManager is 31.
Long Identifier,EventStore.Projections.Core.Services.Processing,ResultWriter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ResultWriter.cs,,The length of the parameter _coreProjectionCheckpointManager is 32.
Long Identifier,EventStore.Projections.Core.Services.Processing,SlaveQueryProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\SlaveQueryProcessingStrategy.cs,CreateCheckpointManager,The length of the parameter coreProjectionCheckpointWriter is 30.
Long Identifier,EventStore.Projections.Core.Services.Processing,SourceDefinitionBuilder,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\SourceDefinitionBuilder.cs,SetPartitionResultStreamNamePatternOption,The length of the parameter partitionResultStreamNamePattern is 32.
Long Identifier,EventStore.Projections.Core.Services.Processing,EmittedStream,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,,The length of the parameter _awaitingMetadataWriteCompleted is 31.
Long Identifier,EventStore.Projections.Core.Services.Processing,EmittedStream,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,,The length of the parameter _lastCommittedOrSubmittedEventPosition is 38.
Long Identifier,EventStore.Projections.Core.Services.Processing,EmittedStream,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,,The length of the parameter _submittedToWriteEmittedEvents is 30.
Long Identifier,EventStore.Projections.Core.Services.Processing,EmittedStream,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,,The length of the parameter _submittedWriteMetaStreamEvent is 30.
Long Identifier,EventStore.Projections.Core.Services.Processing,ReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderStrategy.cs,ReaderStrategy,The length of the parameter includeStreamDeletedNotification is 32.
Long Identifier,EventStore.Projections.Core.Services.Processing,ReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderStrategy.cs,CreatePausedEventIndexEventReader,The length of the parameter includeStreamDeletedNotification is 32.
Long Identifier,EventStore.Projections.Core.Services.Processing,ReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderStrategy.cs,CreatePausedCatalogReader,The length of the parameter startFromDataStreamEventNumber is 30.
Long Identifier,EventStore.Projections.Core.Services.Processing,ReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderStrategy.cs,,The length of the parameter _includeStreamDeletedNotification is 33.
Long Identifier,EventStore.Projections.Core.Services.Processing,ReaderSubscriptionOptions,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderSubscriptionOptions.cs,ReaderSubscriptionOptions,The length of the parameter checkpointUnhandledBytesThreshold is 33.
Long Identifier,EventStore.Projections.Core.Services.Processing,ReaderSubscriptionOptions,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderSubscriptionOptions.cs,ReaderSubscriptionOptions,The length of the parameter checkpointProcessedEventsThreshold is 34.
Long Identifier,EventStore.Projections.Core.Services.Processing,ReaderSubscriptionOptions,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderSubscriptionOptions.cs,,The length of the parameter _checkpointUnhandledBytesThreshold is 34.
Long Identifier,EventStore.Projections.Core.Services.Processing,ReaderSubscriptionOptions,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderSubscriptionOptions.cs,,The length of the parameter _checkpointProcessedEventsThreshold is 35.
Long Identifier,EventStore.Projections.Core.Services.Processing,ResolvedEvent,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ResolvedEvent.cs,,The length of the parameter IsLinkToDeletedStreamTombstone is 30.
Long Identifier,EventStore.Projections.Core.Services.Processing,SpoolStreamProcessingWorkItem,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\SpoolStreamProcessingWorkItem.cs,SpoolStreamProcessingWorkItem,The length of the parameter spoolProcessingResponseDispatcher is 33.
Long Identifier,EventStore.Projections.Core.Services.Processing,SpoolStreamProcessingWorkItem,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\SpoolStreamProcessingWorkItem.cs,,The length of the parameter _spoolProcessingResponseDispatcher is 34.
Long Identifier,EventStore.Projections.Core.Services.Processing,CoreProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjection.cs,CoreProjection,The length of the parameter coreProjectionCheckpointWriter is 30.
Long Identifier,EventStore.Projections.Core.Services.Processing,CoreProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjection.cs,CheckpointCompleted,The length of the parameter lastCompletedCheckpointPosition is 31.
Long Identifier,EventStore.Projections.Core.Services.Processing,CoreProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjection.cs,,The length of the parameter _coreProjectionCheckpointWriter is 31.
Long Identifier,EventStore.Projections.Core.Services.Processing,CoreProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjection.cs,,The length of the parameter _masterProjectionResponseReader is 31.
Long Identifier,EventStore.Projections.Core.Services.Processing,ReaderSubscription,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderSubscription.cs,ReaderSubscription,The length of the parameter checkpointUnhandledBytesThreshold is 33.
Long Identifier,EventStore.Projections.Core.Services.Processing,ReaderSubscription,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderSubscription.cs,ReaderSubscription,The length of the parameter checkpointProcessedEventsThreshold is 34.
Long Identifier,EventStore.Projections.Core.Services.Processing,ProjectionCoreService,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionCoreService.cs,ProjectionCoreService,The length of the parameter spoolProcessingResponseDispatcher is 33.
Long Identifier,EventStore.Projections.Core.Services.Processing,ProjectionCoreService,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionCoreService.cs,,The length of the parameter _spoolProcessingResponseDispatcher is 34.
Long Identifier,EventStore.Projections.Core.v8,Js1,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\v8\js1.cs,CompileQuery,The length of the parameter commandHandlerRegisteredCallback is 32.
Long Identifier,EventStore.Projections.Core.v8,QueryScript,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\v8\QueryScript.cs,,The length of the parameter _commandHandlerRegisteredCallback is 33.
Long Identifier,EventStore.Projections.Core.v8,QueryScript,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\v8\QueryScript.cs,,The length of the parameter _reverseCommandHandlerDelegate is 30.
Long Identifier,EventStore.Projections.Core.v8,QueryScript,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\v8\QueryScript.cs,,The length of the parameter _reverseCommandHandlerException is 31.
Long Statement,EventStore.Projections.Core,ProjectionsSubsystem,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\ProjectionsSubsystem.cs,Register,The length of the statement  "            ProjectionManagerNode.CreateManagerService(standardComponents' projectionsStandardComponents' _queueMap' _projectionsQueryExpiry); " is 130.
Long Statement,EventStore.Projections.Core,ProjectionWorkerNode,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\ProjectionWorkerNode.cs,SetupMessaging,The length of the statement  "            coreInputBus.Subscribe(_subscriptionDispatcher.CreateSubscriber<EventReaderSubscriptionMessage.CommittedEventReceived>()); " is 122.
Long Statement,EventStore.Projections.Core,ProjectionWorkerNode,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\ProjectionWorkerNode.cs,SetupMessaging,The length of the statement  "            coreInputBus.Subscribe(_subscriptionDispatcher.CreateSubscriber<EventReaderSubscriptionMessage.ReaderAssignedReader>()); " is 120.
Long Statement,EventStore.Projections.Core.Services.Http,ProjectionsController,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Http\ProjectionsController.cs,SubscribeCore,The length of the statement  "            Register(service' "/projections/onetime?name={name}&type={type}&enabled={enabled}&checkpoints={checkpoints}&emit={emit}&trackemittedstreams={trackemittedstreams}"' " is 163.
Long Statement,EventStore.Projections.Core.Services.Http,ProjectionsController,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Http\ProjectionsController.cs,SubscribeCore,The length of the statement  "            Register(service' "/projections/continuous?name={name}&type={type}&enabled={enabled}&emit={emit}&trackemittedstreams={trackemittedstreams}"' " is 140.
Long Statement,EventStore.Projections.Core.Services.Http,ProjectionsController,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Http\ProjectionsController.cs,SubscribeCore,The length of the statement  "            Register(service' "/projection/{name}?deleteStateStream={deleteStateStream}&deleteCheckpointStream={deleteCheckpointStream}&deleteEmittedStreams={deleteEmittedStreams}"' " is 169.
Long Statement,EventStore.Projections.Core.Services.Http,ProjectionsController,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Http\ProjectionsController.cs,OnProjectionQueryGet,The length of the statement  "            Publish(new ProjectionManagementMessage.Command.GetQuery(envelope' match.BoundVariables["name"]' GetRunAs(http' match))); " is 121.
Long Statement,EventStore.Projections.Core.Services.Http,ProjectionsController,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Http\ProjectionsController.cs,OnProjectionQueryPut,The length of the statement  "                        envelope' match.BoundVariables["name"]' GetRunAs(http' match)' match.BoundVariables["type"]' s' emitEnabled: emitEnabled))' Console.WriteLine); " is 143.
Long Statement,EventStore.Projections.Core.Services.Http,ProjectionsController,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Http\ProjectionsController.cs,OnProjectionCommandDisable,The length of the statement  "            Publish(new ProjectionManagementMessage.Command.Disable(envelope' match.BoundVariables["name"]' GetRunAs(http' match))); " is 120.
Long Statement,EventStore.Projections.Core.Services.Http,ProjectionsController,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Http\ProjectionsController.cs,ProjectionsPost,The length of the statement  "                                checkpointsEnabled: checkpointsEnabled' emitEnabled: emitEnabled' trackEmittedStreams: trackEmittedStreams' enableRunAs: true); " is 127.
Long Statement,EventStore.Projections.Core.Services.Http,ProjectionsController,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Http\ProjectionsController.cs,ProjectionsPost,The length of the statement  "                                checkpointsEnabled: checkpointsEnabled' emitEnabled: emitEnabled' trackEmittedStreams: trackEmittedStreams' enableRunAs: true); " is 127.
Long Statement,EventStore.Projections.Core.Services,ProjectionConfig,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionConfig.cs,SetIsSlave,The length of the statement  "                MaxWriteBatchLength' EmitEventEnabled' _checkpointsEnabled' CreateTempStreams' StopOnEof' true' true' _checkpointAfterMs' _maximumAllowedWritesInFlight); " is 153.
Long Statement,EventStore.Projections.Core.Services.Management,MasterCoreProjectionResponseReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\MasterCoreProjectionResponseReader.cs,StartReaderSteps,The length of the statement  "                    _ioDispatcher.BeginSubscribeAwake(_cancellationScope' _streamId' subscribeFrom' message => { }' _lastAwakeCorrelationId) " is 120.
Long Statement,EventStore.Projections.Core.Services.Management,MultiStreamMessageWriter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\MultiStreamMessageWriter.cs,PublishResponse,The length of the statement  "                Log.Debug("PROJECTIONS: Scheduling the writing of {0} to {1}. Current status of Writer: Busy: {2}"' command' "$projections-$" + workerId' queue.Busy); " is 150.
Long Statement,EventStore.Projections.Core.Services.Management,ManagedProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ManagedProjection.cs,GetStatistics,The length of the statement  "                var enabledSuffix = ((_state == ManagedProjectionState.Stopped || _state == ManagedProjectionState.Faulted) && Enabled ? " (Enabled)" : ""); " is 140.
Long Statement,EventStore.Projections.Core.Services.Management,ManagedProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ManagedProjection.cs,Handle,The length of the statement  "            if ((_state != ManagedProjectionState.Stopped && _state != ManagedProjectionState.Faulted) && Mode != ProjectionMode.Transient) " is 127.
Long Statement,EventStore.Projections.Core.Services.Management,ManagedProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ManagedProjection.cs,Handle,The length of the statement  "            if ((PersistedProjectionState.EmitEnabled ?? false) && ((PersistedProjectionState.TrackEmittedStreams ?? false) && PersistedProjectionState.DeleteEmittedStreams)) " is 162.
Long Statement,EventStore.Projections.Core.Services.Management,ManagedProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ManagedProjection.cs,Handle,The length of the statement  "                new ProjectionManagementMessage.ProjectionConfig(emitEnabled' trackEmittedStreams' PersistedProjectionState.CheckpointAfterMs' " is 126.
Long Statement,EventStore.Projections.Core.Services.Management,ManagedProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ManagedProjection.cs,Handle,The length of the statement  "                    PersistedProjectionState.PendingEventsThreshold' PersistedProjectionState.MaxWriteBatchLength' PersistedProjectionState.MaxAllowedWritesInFlight)); " is 147.
Long Statement,EventStore.Projections.Core.Services.Management,ManagedProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ManagedProjection.cs,Handle,The length of the statement  "            if ((_state != ManagedProjectionState.Stopped && _state != ManagedProjectionState.Faulted) && Mode != ProjectionMode.Transient) " is 127.
Long Statement,EventStore.Projections.Core.Services.Management,ManagedProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ManagedProjection.cs,Handle,The length of the statement  "            WritePersistedState(CreatePersistedStateEvent(Guid.NewGuid()' PersistedProjectionState' ProjectionNamesBuilder.ProjectionsStreamPrefix + _name)); " is 145.
Long Statement,EventStore.Projections.Core.Services.Management,ManagedProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ManagedProjection.cs,IsExpiredProjection,The length of the statement  "            return Mode == ProjectionMode.Transient && !_isSlave && _lastAccessed.Add(_projectionsQueryExpiry) < _timeProvider.Now && _persistedStateLoaded; " is 144.
Long Statement,EventStore.Projections.Core.Services.Management,ManagedProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ManagedProjection.cs,PersistedStateReadCompleted,The length of the statement  "                "Projection manager did not find any projection configuration records in the {0} stream.  Projection stays in CREATING state"' " is 126.
Long Statement,EventStore.Projections.Core.Services.Management,ManagedProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ManagedProjection.cs,WriteStartOrLoadStopped,The length of the statement  "                WritePersistedState(CreatePersistedStateEvent(Guid.NewGuid()' PersistedProjectionState' ProjectionNamesBuilder.ProjectionsStreamPrefix + _name)); " is 145.
Long Statement,EventStore.Projections.Core.Services.Management,ManagedProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ManagedProjection.cs,CreatePreparedMessage,The length of the statement  "                    "The projection cannot be loaded as stopped as it was stored in the old format.  Update the projection query text to force prepare"); " is 133.
Long Statement,EventStore.Projections.Core.Services.Management,ManagedProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ManagedProjection.cs,CreateDefaultProjectionConfiguration,The length of the statement  "            var checkpointUnhandledBytesThreshold = checkpointsEnabled ? PersistedProjectionState.CheckpointUnhandledBytesThreshold : 0; " is 124.
Long Statement,EventStore.Projections.Core.Services.Management,ProjectionCoreResponseWriter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionCoreResponseWriter.cs,Handle,The length of the statement  "            var command = new Stopped {Id = message.ProjectionId.ToString("N")' Completed = message.Completed' Name = message.Name}; " is 120.
Long Statement,EventStore.Projections.Core.Services.Management,ProjectionManagerResponseReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManagerResponseReader.cs,ReadForward,The length of the statement  "                new ProjectionManagementMessage.Internal.ReadTimeout(_correlationId' ProjectionNamesBuilder._projectionsMasterStream))); " is 120.
Long Statement,EventStore.Projections.Core.Services.Management,ProjectionManagerResponseReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManagerResponseReader.cs,ReadForwardCompleted,The length of the statement  "                Log.Error("Failed reading stream {0}. Read result: {1}' Error: '{2}'"' ProjectionNamesBuilder._projectionsMasterStream' completed.Result' completed.Error); " is 155.
Long Statement,EventStore.Projections.Core.Services.Management,ResponseWriter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ResponseWriter.cs,PublishCommand,The length of the statement  "                _logger.Debug("PROJECTIONS: Scheduling the writing of {0} to {1}. Current status of Writer: Busy: {2}"' command' ProjectionNamesBuilder._projectionsMasterStream' Busy); " is 168.
Long Statement,EventStore.Projections.Core.Services.Management,ResponseWriter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ResponseWriter.cs,EmitEvents,The length of the statement  "                                _logger.Debug("PROJECTIONS: Finished writing events to {0}: {1}"' ProjectionNamesBuilder._projectionsMasterStream' evt.EventType); " is 130.
Long Statement,EventStore.Projections.Core.Services.Management,ResponseWriter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ResponseWriter.cs,EmitEvents,The length of the statement  "                            completed.Result' String.Join("'"' events.Select(x => String.Format("{0}-{1}"' x.EventType' Helper.UTF8NoBom.GetString(x.Data))))); " is 131.
Long Statement,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,Handle,The length of the statement  "                message.Envelope.ReplyWith(new ProjectionManagementMessage.OperationFailed("We currently don't allow for the deletion of System Projections.")); " is 144.
Long Statement,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,Handle,The length of the statement  "                if (!ProjectionManagementMessage.RunAs.ValidateRunAs(projection.Mode' ReadWrite.Write' projection.RunAs' message)) return; " is 122.
Long Statement,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,Handle,The length of the statement  "                if (!ProjectionManagementMessage.RunAs.ValidateRunAs(projection.Mode' ReadWrite.Read' projection.RunAs' message)) return; " is 121.
Long Statement,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,Handle,The length of the statement  "                if (!ProjectionManagementMessage.RunAs.ValidateRunAs(projection.Mode' ReadWrite.Write' projection.RunAs' message)) return; " is 122.
Long Statement,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,Handle,The length of the statement  "                if (!ProjectionManagementMessage.RunAs.ValidateRunAs(projection.Mode' ReadWrite.Write' projection.RunAs' message)) return; " is 122.
Long Statement,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,Handle,The length of the statement  "                if (!ProjectionManagementMessage.RunAs.ValidateRunAs(projection.Mode' ReadWrite.Write' projection.RunAs' message)) return; " is 122.
Long Statement,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,Handle,The length of the statement  "                if (!ProjectionManagementMessage.RunAs.ValidateRunAs(projection.Mode' ReadWrite.Write' projection.RunAs' message)) return; " is 122.
Long Statement,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,Handle,The length of the statement  "                if (!ProjectionManagementMessage.RunAs.ValidateRunAs(projection.Mode' ReadWrite.Write' projection.RunAs' message)) return; " is 122.
Long Statement,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,Handle,The length of the statement  "                if (!ProjectionManagementMessage.RunAs.ValidateRunAs(projection.Mode' ReadWrite.Read' projection.RunAs' message)) return; " is 121.
Long Statement,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,Handle,The length of the statement  "                if (!ProjectionManagementMessage.RunAs.ValidateRunAs(projection.Mode' ReadWrite.Read' projection.RunAs' message)) return; " is 121.
Long Statement,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,OnProjectionsListReadCompleted,The length of the statement  "                                _logger.Warn("PROJECTIONS: The following projection: {0} has a duplicate created event. Using projection Id {1}"' projectionName' projectionId); " is 144.
Long Statement,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,OnProjectionsListReadCompleted,The length of the statement  "                    _logger.Fatal("There was an error reading the projections list due to {0}. Projections could not be loaded."' msg.Result); " is 122.
Long Statement,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,StartRegisteredProjections,The length of the statement  "                _logger.Debug("PROJECTIONS: No projections were found in {0}' starting from empty stream"' ProjectionNamesBuilder.ProjectionsRegistrationStream); " is 145.
Long Statement,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,StartRegisteredProjections,The length of the statement  "            _logger.Debug("PROJECTIONS: Found the following projections. {1}"' ProjectionNamesBuilder.ProjectionsRegistrationStream'  " is 120.
Long Statement,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,StartRegisteredProjections,The length of the statement  "            foreach (var projectionRegistration in registeredProjections.Where(x => x.Key != ProjectionEventTypes.ProjectionsInitialized)) " is 126.
Long Statement,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,BeginWriteProjectionRegistration,The length of the statement  "                m => WriteProjectionRegistrationCompleted(m' eventId' completed' name' ProjectionNamesBuilder.ProjectionsRegistrationStream' envelope' retryCount)); " is 148.
Long Statement,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,WriteProjectionRegistrationCompleted,The length of the statement  "                string.Format("The projection '{0}' could not be created because the registration could not be written due to {1}"' name' message.Result))); " is 140.
Long Statement,EventStore.Projections.Core.Services.Processing,ByStreamCatalogEventReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ByStreamCatalogEventReader.cs,EnqueueStreamForProcessing,The length of the statement  "            var streamId = SystemEventTypes.StreamReferenceEventToStreamId(resolvedEvent.Event.EventType' resolvedEvent.Event.Data); " is 120.
Long Statement,EventStore.Projections.Core.Services.Processing,CoreProjectionCheckpointManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjectionCheckpointManager.cs,CheckpointWritten,The length of the statement  "                // ignore any writes pending in the current checkpoint (this is not the best' but they will never hit the storage' so it is safe) " is 129.
Long Statement,EventStore.Projections.Core.Services.Processing,CoreProjectionCheckpointReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjectionCheckpointReader.cs,OnLoadStateReadRequestCompleted,The length of the statement  "                var checkpoint = message.Events.Where(v => v.Event.EventType == ProjectionEventTypes.ProjectionCheckpoint).Select(x => x.Event).FirstOrDefault(); " is 145.
Long Statement,EventStore.Projections.Core.Services.Processing,CoreProjectionCheckpointWriter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjectionCheckpointWriter.cs,WriteCheckpointEventCompleted,The length of the statement  "                        _envelope.ReplyWith(new CoreProjectionCheckpointWriterMessage.RestartRequested("Checkpoint stream has been written to from the outside")); " is 138.
Long Statement,EventStore.Projections.Core.Services.Processing,CoreProjectionCheckpointWriter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjectionCheckpointWriter.cs,WriteCheckpointEventCompleted,The length of the statement  "                            //The first parameter is not needed in this case as the CoreProjectionCheckpointManager takes care of filling in the projection id when it reconstructs the message " is 163.
Long Statement,EventStore.Projections.Core.Services.Processing,CoreProjectionCheckpointWriter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjectionCheckpointWriter.cs,WriteCheckpointEventCompleted,The length of the statement  "                            _envelope.ReplyWith(new CoreProjectionProcessingMessage.Failed(Guid.Empty' string.Format("After retrying {0} times' we failed to write the checkpoint for {1} to {2} due to a {3}"' MaxNumberOfRetries' _name' eventStreamId' Enum.GetName(typeof(OperationResult)' operationResult)))); " is 280.
Long Statement,EventStore.Projections.Core.Services.Processing,CoreProjectionCheckpointWriter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjectionCheckpointWriter.cs,PublishWriteStreamMetadataAndCheckpointEvent,The length of the statement  "                    "Writing checkpoint for {0} at {1} with expected version number {2}"' _name' _requestedCheckpointPosition' _lastWrittenCheckpointEventNumber); " is 142.
Long Statement,EventStore.Projections.Core.Services.Processing,EmittedStreamsDeleter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStreamsDeleter.cs,GetPositionToDeleteFrom,The length of the statement  "                    var checkpoint = onReadCompleted.Events.Where(v => v.Event.EventType == ProjectionEventTypes.ProjectionCheckpoint).Select(x => x.Event).FirstOrDefault(); " is 153.
Long Statement,EventStore.Projections.Core.Services.Processing,EmittedStreamsDeleter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStreamsDeleter.cs,DeleteEmittedStreamsFrom,The length of the statement  "            _ioDispatcher.ReadForward(_emittedStreamsId' fromPosition' 1' false' SystemAccount.Principal' x => ReadCompleted(x' onEmittedStreamsDeleted)); " is 142.
Long Statement,EventStore.Projections.Core.Services.Processing,EmittedStreamsDeleter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStreamsDeleter.cs,ReadCompleted,The length of the statement  "                            Log.Error("PROJECTIONS: Failed to delete projection stream '{0}'. Reason: {1}"' _emittedStreamsCheckpointStreamId' x.Result); " is 125.
Long Statement,EventStore.Projections.Core.Services.Processing,EmittedStreamsDeleter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStreamsDeleter.cs,ReadCompleted,The length of the statement  "                    _ioDispatcher.DeleteStream(streamId' ExpectedVersion.Any' false' SystemAccount.Principal' x => DeleteStreamCompleted(x' onEmittedStreamsDeleted' streamId' onReadCompleted.Events[0].OriginalEventNumber)); " is 203.
Long Statement,EventStore.Projections.Core.Services.Processing,EmittedStreamsDeleter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStreamsDeleter.cs,DeleteStreamCompleted,The length of the statement  "            if (deleteStreamCompleted.Result == OperationResult.Success || deleteStreamCompleted.Result == OperationResult.StreamDeleted) " is 125.
Long Statement,EventStore.Projections.Core.Services.Processing,EmittedStreamsDeleter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStreamsDeleter.cs,DeleteStreamCompleted,The length of the statement  "                    Log.Error("PROJECTIONS: Retry limit reached' could not delete stream: {0}. Manual intervention is required and you may need to delete this stream manually"' streamId); " is 167.
Long Statement,EventStore.Projections.Core.Services.Processing,EmittedStreamsDeleter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStreamsDeleter.cs,DeleteStreamCompleted,The length of the statement  "                Log.Error("PROJECTIONS: Failed to delete emitted stream {0}' Retrying ({1}/{2}). Reason: {3}"' streamId' (RetryLimit - _retryCount) + 1' RetryLimit' deleteStreamCompleted.Result); " is 179.
Long Statement,EventStore.Projections.Core.Services.Processing,EmittedStreamsDeleter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStreamsDeleter.cs,TryMarkCheckpoint,The length of the statement  "            _ioDispatcher.WriteEvent(_emittedStreamsCheckpointStreamId' ExpectedVersion.Any' new Event(Guid.NewGuid()' ProjectionEventTypes.PartitionCheckpoint' true' eventNumber.ToJson()' null)' SystemAccount.Principal' x => " is 213.
Long Statement,EventStore.Projections.Core.Services.Processing,EmittedStreamsTracker,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStreamsTracker.cs,ReadEmittedStreamStreamIdsIntoCache,The length of the statement  "            _ioDispatcher.ReadForward(_projectionNamesBuilder.GetEmittedStreamsName()' position' 1' false' SystemAccount.Principal' x => " is 124.
Long Statement,EventStore.Projections.Core.Services.Processing,EmittedStreamsTracker,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStreamsTracker.cs,TrackEmittedStream,The length of the statement  "                    var trackEvent = new Event(Guid.NewGuid()' ProjectionEventTypes.StreamTracked' false' Helper.UTF8NoBom.GetBytes(emittedEvent.StreamId)' null); " is 142.
Long Statement,EventStore.Projections.Core.Services.Processing,EmittedStreamsTracker,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStreamsTracker.cs,WriteEvent,The length of the statement  "            _ioDispatcher.WriteEvent(_projectionNamesBuilder.GetEmittedStreamsName()' ExpectedVersion.Any' evnt' SystemAccount.Principal' x => OnWriteComplete(x' evnt' Helper.UTF8NoBom.GetString(evnt.Data)' retryCount)); " is 208.
Long Statement,EventStore.Projections.Core.Services.Processing,EmittedStreamsTracker,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStreamsTracker.cs,OnWriteComplete,The length of the statement  "                    Log.Error("PROJECTIONS: Failed to write a tracked stream id of {0} to the {1} stream. Retry limit of {2} reached. Reason: {3}"' streamId' _projectionNamesBuilder.GetEmittedStreamsName()' MaxRetryCount' completed.Result); " is 220.
Long Statement,EventStore.Projections.Core.Services.Processing,IndexBased,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventByTypeIndexEventReader.cs,RequestCheckpointStream,The length of the statement  "                        pendingRequestCorrelationId' pendingRequestCorrelationId' new SendToThisEnvelope(this)' "$et"' -1' 1' false' false' null' " is 121.
Long Statement,EventStore.Projections.Core.Services.Processing,TfBased,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventByTypeIndexEventReader.cs,Handle,The length of the statement  "                                    var unresolvedLinkEvent = EventStore.Core.Data.ResolvedEvent.ForUnresolvedEvent(link' originalTfPosition.CommitPosition); " is 121.
Long Statement,EventStore.Projections.Core.Services.Processing,EventByTypeIndexPositionTagger,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventByTypeIndexPositionTagger.cs,AdjustTag,The length of the statement  "                    throw new NotSupportedException(string.Format("The given checkpoint is invalid. Possible causes might include having written an event to the projection's managed stream. The bad checkpoint: {0}"' tag.ToString())); " is 213.
Long Statement,EventStore.Projections.Core.Services.Processing,MultiStreamEventReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\MultiStreamEventReader.cs,DeliverEvent,The length of the statement  "                        "Event number {0} was expected in the stream {1}' but event number {2} was received. This may happen if events have been deleted from the beginning of your stream' please reset your projection."' " is 195.
Long Statement,EventStore.Projections.Core.Services.Processing,MultiStreamMultiOutputCheckpointManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\MultiStreamMultiOutputCheckpointManager.cs,CreateOrderStream,The length of the statement  "                    new EmittedStreamsWriter(_ioDispatcher)' new EmittedStream.WriterConfiguration.StreamMetadata()' SystemAccount.Principal' 100' _logger)' " is 136.
Long Statement,EventStore.Projections.Core.Services.Processing,CoreProjectionQueue,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjectionQueue.cs,ValidateQueueingOrder,The length of the statement  "            if (eventTag < _lastEnqueuedEventTag || (!(allowCurrentPosition || _justInitialized) && eventTag <= _lastEnqueuedEventTag)) " is 123.
Long Statement,EventStore.Projections.Core.Services.Processing,MultiStreamPositionTagger,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\MultiStreamPositionTagger.cs,AdjustTag,The length of the statement  "                    throw new NotSupportedException(string.Format("The given checkpoint is invalid. Possible causes might include having written an event to the projection's managed stream. The bad checkpoint: {0}"' tag.ToString())); " is 213.
Long Statement,EventStore.Projections.Core.Services.Processing,ParallelQueryAllStreamsMasterReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ParallelQueryAllStreamsMasterReaderStrategy.cs,CreatePausedEventReader,The length of the statement  "                ioDispatcher' publisher' eventReaderId' _runAs' checkpointTag.CatalogPosition + 1' _timeProvider' stopOnEof: stopOnEof); " is 120.
Long Statement,EventStore.Projections.Core.Services.Processing,ParallelQueryProcessingStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ParallelQueryProcessingStrategy.cs,GetSlaveProjections,The length of the statement  "                        _projectionConfig.EmitEventEnabled' _projectionConfig.CheckpointsEnabled' trackEmittedStreams: _projectionConfig.TrackEmittedStreams' " is 133.
Long Statement,EventStore.Projections.Core.Services.Processing,PreparePositionTagger,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\PreparePositionTagger.cs,AdjustTag,The length of the statement  "                    throw new NotSupportedException(string.Format("The given checkpoint is invalid. Possible causes might include having written an event to the projection's managed stream. The bad checkpoint: {0}"' tag.ToString())); " is 213.
Long Statement,EventStore.Projections.Core.Services.Processing,EventReaderCoreService,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventReaderCoreService.cs,Handle,The length of the statement  "                        string.Format("The subscription failed to handle an event {0}:{1}@{2} because {3}"' message.Data.EventStreamId' message.Data.EventType' message.Data.EventSequenceNumber' ex.Message))); " is 184.
Long Statement,EventStore.Projections.Core.Services.Processing,EventProcessingProjectionProcessingPhase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventProcessingProjectionProcessingPhase.cs,SafeProcessPartitionDeletedByHandler,The length of the statement  "                        "The {0} projection failed to process a delete partition notification.\r\nHandler: {1}\r\nEvent Position: {2}\r\n\r\nMessage:\r\n\r\n{3}"' " is 138.
Long Statement,EventStore.Projections.Core.Services.Processing,EventProcessingProjectionProcessingPhase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventProcessingProjectionProcessingPhase.cs,SafeTransformCatalogEventByHandler,The length of the statement  "                        "The {0} projection failed to transform a catalog event.\r\nHandler: {1}\r\nEvent Position: {2}\r\n\r\nMessage:\r\n\r\n{3}"' " is 124.
Long Statement,EventStore.Projections.Core.Services.Processing,EventProcessingProjectionProcessingPhase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventProcessingProjectionProcessingPhase.cs,ProcessEventByHandler,The length of the statement  "                //TODO: depending on query processing final state to result transformation should happen either here (if EOF) on while writing results " is 134.
Long Statement,EventStore.Projections.Core.Services.Processing,EventProcessingProjectionProcessingPhase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventProcessingProjectionProcessingPhase.cs,ProcessPartitionDeletedByHandler,The length of the statement  "                //TODO: depending on query processing final state to result transformation should happen either here (if EOF) on while writing results " is 134.
Long Statement,EventStore.Projections.Core.Services.Processing,EventProcessingProjectionProcessingPhase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventProcessingProjectionProcessingPhase.cs,NewCheckpointStarted,The length of the statement  "                            "The {0} projection failed to process a checkpoint start.\r\nHandler: {1}\r\nEvent Position: {2}\r\n\r\nMessage:\r\n\r\n{3}"' " is 125.
Long Statement,EventStore.Projections.Core.Services.Processing,SourceDefinitionBuilder,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\SourceDefinitionBuilder.cs,SetPartitionResultStreamNamePatternOption,The length of the statement  "            _options.PartitionResultStreamNamePattern = String.IsNullOrWhiteSpace(partitionResultStreamNamePattern) ? null : partitionResultStreamNamePattern; " is 146.
Long Statement,EventStore.Projections.Core.Services.Processing,QuerySourceOptions,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\SourceDefinitionBuilder.cs,GetHashCode,The length of the statement  "                hashCode = (hashCode*397) ^ (PartitionResultStreamNamePattern != null ? PartitionResultStreamNamePattern.GetHashCode() : 0); " is 124.
Long Statement,EventStore.Projections.Core.Services.Processing,EmittedStream,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,EmitEvents,The length of the statement  "                    if (!(_lastQueuedEventPosition != null && groupCausedBy > _lastQueuedEventPosition) && !(_lastQueuedEventPosition == null && groupCausedBy >= _fromCheckpointPosition)) " is 167.
Long Statement,EventStore.Projections.Core.Services.Processing,EmittedStream,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,HandleWriteEventsCompleted,The length of the statement  "                    RequestRestart(string.Format("The '{0}' stream has been written to from the outside. Expected Version: {1}' Current Version: {2}. Checkpoint: {3}."' _streamId' _lastKnownEventNumber' message.CurrentVersion' _fromCheckpointPosition)); " is 233.
Long Statement,EventStore.Projections.Core.Services.Processing,EmittedStream,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,HandleWriteEventsCompleted,The length of the statement  "                        Failed(string.Format("Failed to write events to {0}. Retry limit of {1} reached. Reason: {2}. Checkpoint: {3}."' _streamId' MaxRetryCount' message.Result' _fromCheckpointPosition)); " is 181.
Long Statement,EventStore.Projections.Core.Services.Processing,EmittedStream,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,ReadStreamEventsBackwardCompleted,The length of the statement  "                        Failed(string.Format("The '{0}' stream managed by projection {1} has been written to from the outside."' _streamId' _projectionVersion.ProjectionId)); " is 150.
Long Statement,EventStore.Projections.Core.Services.Processing,EmittedStream,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,ReadStreamEventsBackwardCompleted,The length of the statement  "                                "Multiple projections emitting to the same stream detected.  Stream: '{0}'. Last event projection: '{1}'.  Emitting projection: '{2}'"' " is 135.
Long Statement,EventStore.Projections.Core.Services.Processing,EmittedStream,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,ReadStreamEventsBackwardCompleted,The length of the statement  "                    || (_projectionVersion.ProjectionId != parsed.Version.ProjectionId || _projectionVersion.Epoch > parsed.Version.Version); " is 121.
Long Statement,EventStore.Projections.Core.Services.Processing,EmittedStream,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,HandleMetadataWriteCompleted,The length of the statement  "                        Failed(string.Format("Failed to write an events to {0}. Retry limit of {1} reached. Reason: {2}"' _metadataStreamId' MaxRetryCount' message.Result)); " is 149.
Long Statement,EventStore.Projections.Core.Services.Processing,EmittedStream,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,SubmitWriteEvents,The length of the statement  "                                "Wrong expected tag while submitting write event request to the '{0}' stream.  The last known stream tag is: '{1}'  the expected tag is: '{2}'"' " is 144.
Long Statement,EventStore.Projections.Core.Services.Processing,EmittedStream,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,ValidateEmittedEventInRecoveryMode,The length of the statement  "            var failed = topAlreadyCommitted.Item1 != eventsToWrite.CausedByTag || topAlreadyCommitted.Item2 != eventsToWrite.EventType; " is 124.
Long Statement,EventStore.Projections.Core.Services.Processing,EmittedStream,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,ValidateEmittedEventInRecoveryMode,The length of the statement  "                        "An event emitted in recovery for stream {0} differs from the originally emitted event. Existing('{1}'' '{2}'). New('{3}'' '{4}')"' " is 131.
Long Statement,EventStore.Projections.Core.Services.Processing,HeadingEventReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\HeadingEventReader.cs,DispatchRecentMessagesTo,The length of the statement  "                            message = string.Format("The heading subscription failed to handle a recently cached deleted event at position {0} because {1}"' " is 128.
Long Statement,EventStore.Projections.Core.Services.Processing,HeadingEventReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\HeadingEventReader.cs,DistributeMessage,The length of the statement  "                        string.Format("The heading subscription failed to handle an event {0}:{1}@{2} because {3}"' message.Data.EventStreamId' message.Data.EventType' message.Data.PositionSequenceNumber' ex.Message))); " is 195.
Long Statement,EventStore.Projections.Core.Services.Processing,ReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderStrategy.cs,CreatePausedStreamEventReader,The length of the statement  "            var eventReader = new StreamEventReader(publisher' eventReaderId' _runAs' streamName' fromSequenceNumber' _timeProvider' " is 120.
Long Statement,EventStore.Projections.Core.Services.Processing,ReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderStrategy.cs,CreatePausedEventIndexEventReader,The length of the statement  "            return new EventByTypeIndexEventReader(publisher' eventReaderId' _runAs' eventTypes.ToArray()' includeStreamDeletedNotification' " is 128.
Long Statement,EventStore.Projections.Core.Services.Processing,StagedProcessingQueue,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\StagedProcessingQueue.cs,SetEntryCorrelation,The length of the statement  "                            throw new InvalidOperationException("Cannot inject task correlation id before another task with the same correlation id"); " is 122.
Long Statement,EventStore.Projections.Core.Services.Processing,StreamEventReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\StreamEventReader.cs,DeliverEvent,The length of the statement  "                string reason = string.Format("Event number {0} was expected in the stream {1}' but event number {2} was received. This may happen if events have been deleted from the beginning of your stream' please reset your projection." " is 224.
Long Statement,EventStore.Projections.Core.Services.Processing,StreamEventReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\StreamEventReader.cs,DeliverEvent,The length of the statement  "            bool isDeletedStreamEvent = StreamDeletedHelper.IsStreamDeletedEventOrLinkToStreamDeletedEvent(resolvedEvent' out deletedPartitionStreamId); " is 140.
Long Statement,EventStore.Projections.Core.Services.Processing,StreamPositionTagger,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\StreamPositionTagger.cs,MakeCheckpointTag,The length of the statement  "            return CheckpointTag.FromStreamPosition(previous.Phase' committedEvent.Data.PositionStreamId' committedEvent.Data.PositionSequenceNumber); " is 138.
Long Statement,EventStore.Projections.Core.Services.Processing,StreamPositionTagger,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\StreamPositionTagger.cs,AdjustTag,The length of the statement  "                    throw new NotSupportedException(string.Format("The given checkpoint is invalid. Possible causes might include having written an event to the projection's managed stream. The bad checkpoint: {0}"' tag.ToString())); " is 213.
Long Statement,EventStore.Projections.Core.Services.Processing,CoreProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjection.cs,Handle,The length of the statement  "                //TODO: write test to ensure projection state is correctly loaded from a checkpoint and posted back when enough empty records processed " is 135.
Long Statement,EventStore.Projections.Core.Services.Processing,CoreProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjection.cs,Handle,The length of the statement  "                    _partitionStateCache.CacheAndLockPartitionState(""' PartitionState.Deserialize(message.CheckpointData' checkpointTag)' null); " is 125.
Long Statement,EventStore.Projections.Core.Services.Processing,CoreProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjection.cs,Handle,The length of the statement  "                        "A concurrency violation was detected' but the projection is not running. Current state is: {0}.  The reason for the restart is: '{1}' "' " is 137.
Long Statement,EventStore.Projections.Core.Services.Processing,ProjectionCheckpoint,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionCheckpoint.cs,EmitEventsToStream,The length of the statement  "                stream = new EmittedStream(streamId' writerConfiguration' _projectionVersion' _positionTagger' _from' _publisher' _ioDispatcher' this); " is 135.
Long Statement,EventStore.Projections.Core.Services.Processing,TransactionFilePositionTagger,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\TransactionFilePositionTagger.cs,AdjustTag,The length of the statement  "                    throw new NotSupportedException(string.Format("The given checkpoint is invalid. Possible causes might include having written an event to the projection's managed stream. The bad checkpoint: {0}"' tag.ToString())); " is 213.
Long Statement,EventStore.Projections.Core.Standard,StreamDeletedHelper,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Standard\StreamDeletedHelper.cs,IsStreamDeletedEvent,The length of the statement  "                    //NOTE: we do not ignore JSON deserialization exceptions here assuming that metadata stream events must be deserializable " is 121.
Long Statement,EventStore.Projections.Core.Standard,StreamDeletedHelper,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Standard\StreamDeletedHelper.cs,IsStreamDeletedEvent,The length of the statement  "                    //NOTE: we do not ignore JSON deserialization exceptions here assuming that metadata stream events must be deserializable " is 121.
Long Statement,EventStore.Projections.Core.v8,PreludeScript,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\v8\PreludeScript.cs,CompileScript,The length of the statement  "                    "The projection subsystem failed to load a libjs1.so/js1.dll/... or one of its dependencies.  The original error message is: " " is 126.
Long Statement,EventStore.Projections.Core.v8,PreludeScript,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\v8\PreludeScript.cs,ScheduleTerminateExecution,The length of the statement  "            if (Interlocked.CompareExchange(ref _cancelTokenOrStatus' Scheduled' NonScheduled) != NonScheduled) //TODO: no need for interlocked? " is 132.
Long Statement,EventStore.Projections.Core.v8,PreludeScript,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\v8\PreludeScript.cs,ScheduleTerminateExecution,The length of the statement  "                throw new InvalidOperationException("ScheduleTerminateExecution cannot be called while previous one has not been canceled"); " is 124.
Complex Conditional,EventStore.Projections.Core.Messages,RunAs,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Messages\ProjectionManagementMessage.cs,ValidateRunAs,The conditional expression  "mode > ProjectionMode.Transient && readWrite == ReadWrite.Write                      && (message.RunAs == null || message.RunAs.Principal == null                          || !message.RunAs.Principal.IsInRole(SystemRoles.Admins))"  is complex.
Complex Conditional,EventStore.Projections.Core.Services.Management,ManagedProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ManagedProjection.cs,Handle,The conditional expression  "Enabled                  && !(_state == ManagedProjectionState.Completed || _state == ManagedProjectionState.Faulted                       || _state == ManagedProjectionState.Aborted || _state == ManagedProjectionState.Loaded                       || _state == ManagedProjectionState.Prepared || _state == ManagedProjectionState.Stopped)"  is complex.
Complex Conditional,EventStore.Projections.Core.Services.Management,ManagedProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ManagedProjection.cs,WritePersistedStateCompleted,The conditional expression  "message.Result == OperationResult.CommitTimeout || message.Result == OperationResult.ForwardTimeout                  || message.Result == OperationResult.PrepareTimeout                  || message.Result == OperationResult.WrongExpectedVersion"  is complex.
Complex Conditional,EventStore.Projections.Core.Services.Management,ManagedProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ManagedProjection.cs,StartOrLoadStopped,The conditional expression  "_state == ManagedProjectionState.Aborted || _state == ManagedProjectionState.Completed                       || _state == ManagedProjectionState.Faulted || _state == ManagedProjectionState.Stopped                       || _state == ManagedProjectionState.Deleting"  is complex.
Complex Conditional,EventStore.Projections.Core.Services.Management,ManagedProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ManagedProjection.cs,PrepareOrWriteStartOrLoadStopped,The conditional expression  "Prepared && Created && !(Enabled && _enabledToRun)"  is complex.
Complex Conditional,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,WriteProjectionRegistrationCompleted,The conditional expression  "message.Result == OperationResult.CommitTimeout || message.Result == OperationResult.ForwardTimeout                  || message.Result == OperationResult.PrepareTimeout                  || message.Result == OperationResult.WrongExpectedVersion"  is complex.
Complex Conditional,EventStore.Projections.Core.Services.Processing,CoreProjectionQueue,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjectionQueue.cs,ValidateQueueingOrder,The conditional expression  "eventTag < _lastEnqueuedEventTag || (!(allowCurrentPosition || _justInitialized) && eventTag <= _lastEnqueuedEventTag)"  is complex.
Complex Conditional,EventStore.Projections.Core.Services.Processing,ProcessingStrategySelector,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProcessingStrategySelector.cs,CreateProjectionProcessingStrategy,The conditional expression  "!sourceDefinition.DisableParallelismOption && projectionConfig.StopOnEof && sourceDefinition.ByStreams                  && sourceDefinition.DefinesFold && !string.IsNullOrEmpty(sourceDefinition.CatalogStream)"  is complex.
Complex Conditional,EventStore.Projections.Core.Services.Processing,ProcessingStrategySelector,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProcessingStrategySelector.cs,CreateProjectionProcessingStrategy,The conditional expression  "!sourceDefinition.DisableParallelismOption && projectionConfig.StopOnEof && sourceDefinition.ByStreams                  && sourceDefinition.DefinesFold && sourceDefinition.HasCategories()"  is complex.
Complex Conditional,EventStore.Projections.Core.Services.Processing,ReaderSubscriptionBase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderSubscriptionBase.cs,ProcessOne,The conditional expression  "_checkpointUnhandledBytesThreshold > 0                     && timeDifference > _checkpointAfter                     && (_lastPassedOrCheckpointedEventPosition != null                         && message.Data.Position.PreparePosition - _lastPassedOrCheckpointedEventPosition.Value                         > _checkpointUnhandledBytesThreshold)"  is complex.
Complex Conditional,EventStore.Projections.Core.Services.Processing,EmittedStream,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,EmitEvents,The conditional expression  "!(_lastQueuedEventPosition != null && groupCausedBy > _lastQueuedEventPosition) && !(_lastQueuedEventPosition == null && groupCausedBy >= _fromCheckpointPosition)"  is complex.
Complex Conditional,EventStore.Projections.Core.Services.Processing,EmittedStream,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,ProcessWrites,The conditional expression  "_started && !_awaitingListEventsCompleted && !_awaitingWriteCompleted                  && !_awaitingMetadataWriteCompleted && _pendingWrites.Count > 0"  is complex.
Complex Conditional,EventStore.Projections.Core.Services.Processing,EmittedStream,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,ProcessRequestedCheckpoint,The conditional expression  "_checkpointRequested && !_awaitingWriteCompleted && !_awaitingMetadataWriteCompleted                  && _pendingWrites.Count == 0"  is complex.
Complex Conditional,EventStore.Projections.Core.Services.Processing,ReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderStrategy.cs,Create,The conditional expression  "!sources.AllStreams && !sources.HasCategories() && !sources.HasStreams()                  && string.IsNullOrEmpty(sources.CatalogStream)"  is complex.
Complex Conditional,EventStore.Projections.Core.Services.Processing,StagedProcessingQueue,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\StagedProcessingQueue.cs,GetEntryToProcess,The conditional expression  "taskEntry != null && taskEntry.ReadForStage == stageIndex && !taskEntry.Busy                          && !taskEntry.Completed && taskEntry.PreviousByCorrelation == null"  is complex.
Virtual Method Call from Constructor,EventStore.Projections.Core.Services.Processing,CoreProjectionCheckpointManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjectionCheckpointManager.cs,CoreProjectionCheckpointManager,The constructor "CoreProjectionCheckpointManager" calls a virtual method "MakeZeroCheckpointTag".
Virtual Method Call from Constructor,EventStore.Projections.Core.Services.Processing,DefaultCheckpointManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\DefaultCheckpointManager.cs,DefaultCheckpointManager,The constructor "DefaultCheckpointManager" calls a virtual method "MakeZeroCheckpointTag".
Virtual Method Call from Constructor,EventStore.Projections.Core.Services.Processing,EmittedStream,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EmittedStream.cs,EmittedStream,The constructor "EmittedStream" calls a virtual method "MakeZeroCheckpointTag".
Virtual Method Call from Constructor,EventStore.Projections.Core.Services.Processing,CoreProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjection.cs,CoreProjection,The constructor "CoreProjection" calls a virtual method "GetStopOnEof".
Virtual Method Call from Constructor,EventStore.Projections.Core.Services.Processing,CoreProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjection.cs,CoreProjection,The constructor "CoreProjection" calls a virtual method "GetRequiresRootPartition".
Virtual Method Call from Constructor,EventStore.Projections.Core.Services.Processing,CoreProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjection.cs,CoreProjection,The constructor "CoreProjection" calls a virtual method "GetUseCheckpoints".
Virtual Method Call from Constructor,EventStore.Projections.Core.Services.Processing,CoreProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjection.cs,CoreProjection,The constructor "CoreProjection" calls a virtual method "CreateProcessingPhases".
Magic Number,EventStore.Projections.Core.EventReaders.Feeds,FeedReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\EventReaders\Feeds\FeedReader.cs,Start,The following statement contains a magic number: var readerOptions = new ReaderSubscriptionOptions(                  1024*1024'                  checkpointAfterMs: 10000'                  checkpointProcessedEventsThreshold: null'                  stopOnEof: true'                  stopAfterNEvents: _maxEvents);
Magic Number,EventStore.Projections.Core.EventReaders.Feeds,FeedReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\EventReaders\Feeds\FeedReader.cs,Start,The following statement contains a magic number: var readerOptions = new ReaderSubscriptionOptions(                  1024*1024'                  checkpointAfterMs: 10000'                  checkpointProcessedEventsThreshold: null'                  stopOnEof: true'                  stopAfterNEvents: _maxEvents);
Magic Number,EventStore.Projections.Core.EventReaders.Feeds,FeedReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\EventReaders\Feeds\FeedReader.cs,Start,The following statement contains a magic number: var readerOptions = new ReaderSubscriptionOptions(                  1024*1024'                  checkpointAfterMs: 10000'                  checkpointProcessedEventsThreshold: null'                  stopOnEof: true'                  stopAfterNEvents: _maxEvents);
Magic Number,EventStore.Projections.Core,ProjectionWorkerNode,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\ProjectionWorkerNode.cs,ProjectionWorkerNode,The following statement contains a magic number: _eventReaderCoreService = new EventReaderCoreService(                  publisher'                  _ioDispatcher'                  10'                  db.Config.WriterCheckpoint'                  runHeadingReader: runProjections >= ProjectionType.System);
Magic Number,EventStore.Projections.Core.Services.Http,ProjectionsController,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Http\ProjectionsController.cs,OnProjections,The following statement contains a magic number: http.ReplyTextContent(                  "Moved"' 302' "Found"' "text/plain"'                  new[]                      {                          new KeyValuePair<string' string>(                      "Location"' new Uri(match.BaseUri' "/web/projections.htm").AbsoluteUri)                      }' x => Log.DebugException(x' "Reply Text Content Failed."));
Magic Number,EventStore.Projections.Core.Services.Http,ProjectionsController,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Http\ProjectionsController.cs,OnProjectionsReadEvents,The following statement contains a magic number: http.ReadTextRequestAsync(                  (o' body) =>                      {                          var bodyParsed = body.ParseJson<ReadEventsBody>();                          var fromPosition = CheckpointTag.FromJson(                              new JTokenReader(bodyParsed.Position)' new ProjectionVersion(0' 0' 0));                              Publish(                              new FeedReaderMessage.ReadPage(                                  Guid.NewGuid()'                                  envelope'                                  http.User'                                  bodyParsed.Query'                                  fromPosition.Tag'                                  bodyParsed.MaxEvents ?? 10));                      }'                  x => Log.DebugException(x' "Read Request Body Failed."));
Magic Number,EventStore.Projections.Core.Services.Http,ProjectionsController,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Http\ProjectionsController.cs,ProjectionsPost,The following statement contains a magic number: var envelope = new SendToHttpEnvelope<ProjectionManagementMessage.Updated>(                  _networkSendQueue' http' DefaultFormatter' (codec' message) =>                      {                          var localPath = string.Format("/projection/{0}"' message.Name);                          var url = MakeUrl(http' localPath);                          return new ResponseConfiguration(                              201' "Created"' codec.ContentType' codec.Encoding' new KeyValuePair<string' string>("Location"' url));                      }' ErrorsEnvelope(http));
Magic Number,EventStore.Projections.Core.Services.Http,ProjectionsController,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Http\ProjectionsController.cs,OkResponseConfigurator,The following statement contains a magic number: return new ResponseConfiguration(200' "OK"' codec.ContentType' Helper.UTF8NoBom);
Magic Number,EventStore.Projections.Core.Services.Http,ProjectionsController,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Http\ProjectionsController.cs,NotFoundConfigurator,The following statement contains a magic number: return new ResponseConfiguration(404' "Not Found"' "text/plain"' Helper.UTF8NoBom);
Magic Number,EventStore.Projections.Core.Services.Http,ProjectionsController,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Http\ProjectionsController.cs,NotAuthorizedConfigurator,The following statement contains a magic number: return new ResponseConfiguration(401' "Not Authorized"' "text/plain"' Encoding.UTF8);
Magic Number,EventStore.Projections.Core.Services.Http,ProjectionsController,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Http\ProjectionsController.cs,OperationFailedConfigurator,The following statement contains a magic number: return new ResponseConfiguration(500' "Failed"' "text/plain"' Helper.UTF8NoBom);
Magic Number,EventStore.Projections.Core.Services.Http,ProjectionsController,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Http\ProjectionsController.cs,ConflictConfigurator,The following statement contains a magic number: return new ResponseConfiguration(409' "Conflict"' "text/plain"' Helper.UTF8NoBom);
Magic Number,EventStore.Projections.Core.Services,ProjectionConfig,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionConfig.cs,GetTest,The following statement contains a magic number: return new ProjectionConfig(null' 1000' 1000*1000' 100' 500' true' true' false' false' false' true' 10000' 1);
Magic Number,EventStore.Projections.Core.Services,ProjectionConfig,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionConfig.cs,GetTest,The following statement contains a magic number: return new ProjectionConfig(null' 1000' 1000*1000' 100' 500' true' true' false' false' false' true' 10000' 1);
Magic Number,EventStore.Projections.Core.Services,ProjectionConfig,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionConfig.cs,GetTest,The following statement contains a magic number: return new ProjectionConfig(null' 1000' 1000*1000' 100' 500' true' true' false' false' false' true' 10000' 1);
Magic Number,EventStore.Projections.Core.Services,ProjectionConfig,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionConfig.cs,GetTest,The following statement contains a magic number: return new ProjectionConfig(null' 1000' 1000*1000' 100' 500' true' true' false' false' false' true' 10000' 1);
Magic Number,EventStore.Projections.Core.Services,ProjectionConfig,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionConfig.cs,GetTest,The following statement contains a magic number: return new ProjectionConfig(null' 1000' 1000*1000' 100' 500' true' true' false' false' false' true' 10000' 1);
Magic Number,EventStore.Projections.Core.Services,ProjectionConfig,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionConfig.cs,GetTest,The following statement contains a magic number: return new ProjectionConfig(null' 1000' 1000*1000' 100' 500' true' true' false' false' false' true' 10000' 1);
Magic Number,EventStore.Projections.Core.Services,ProjectionStatistics,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionStatistics.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Status != null ? Status.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Enabled.GetHashCode();                  hashCode = (hashCode*397) ^ (int) MasterStatus;                  hashCode = (hashCode*397) ^ (StateReason != null ? StateReason.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  hashCode = (hashCode*397) ^ (int) Mode;                  hashCode = (hashCode*397) ^ (Position != null ? Position.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Progress.GetHashCode();                  hashCode = (hashCode*397) ^ (LastCheckpoint != null ? LastCheckpoint.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ EventsProcessedAfterRestart;                  hashCode = (hashCode*397) ^ BufferedEvents;                  hashCode = (hashCode*397) ^ (CheckpointStatus != null ? CheckpointStatus.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ WritePendingEventsBeforeCheckpoint;                  hashCode = (hashCode*397) ^ WritePendingEventsAfterCheckpoint;                  hashCode = (hashCode*397) ^ PartitionsCached;                  hashCode = (hashCode*397) ^ ReadsInProgress;                  hashCode = (hashCode*397) ^ WritesInProgress;                  hashCode = (hashCode*397) ^ (EffectiveName != null ? EffectiveName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ CoreProcessingTime.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services,ProjectionStatistics,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionStatistics.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Status != null ? Status.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Enabled.GetHashCode();                  hashCode = (hashCode*397) ^ (int) MasterStatus;                  hashCode = (hashCode*397) ^ (StateReason != null ? StateReason.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  hashCode = (hashCode*397) ^ (int) Mode;                  hashCode = (hashCode*397) ^ (Position != null ? Position.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Progress.GetHashCode();                  hashCode = (hashCode*397) ^ (LastCheckpoint != null ? LastCheckpoint.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ EventsProcessedAfterRestart;                  hashCode = (hashCode*397) ^ BufferedEvents;                  hashCode = (hashCode*397) ^ (CheckpointStatus != null ? CheckpointStatus.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ WritePendingEventsBeforeCheckpoint;                  hashCode = (hashCode*397) ^ WritePendingEventsAfterCheckpoint;                  hashCode = (hashCode*397) ^ PartitionsCached;                  hashCode = (hashCode*397) ^ ReadsInProgress;                  hashCode = (hashCode*397) ^ WritesInProgress;                  hashCode = (hashCode*397) ^ (EffectiveName != null ? EffectiveName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ CoreProcessingTime.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services,ProjectionStatistics,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionStatistics.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Status != null ? Status.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Enabled.GetHashCode();                  hashCode = (hashCode*397) ^ (int) MasterStatus;                  hashCode = (hashCode*397) ^ (StateReason != null ? StateReason.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  hashCode = (hashCode*397) ^ (int) Mode;                  hashCode = (hashCode*397) ^ (Position != null ? Position.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Progress.GetHashCode();                  hashCode = (hashCode*397) ^ (LastCheckpoint != null ? LastCheckpoint.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ EventsProcessedAfterRestart;                  hashCode = (hashCode*397) ^ BufferedEvents;                  hashCode = (hashCode*397) ^ (CheckpointStatus != null ? CheckpointStatus.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ WritePendingEventsBeforeCheckpoint;                  hashCode = (hashCode*397) ^ WritePendingEventsAfterCheckpoint;                  hashCode = (hashCode*397) ^ PartitionsCached;                  hashCode = (hashCode*397) ^ ReadsInProgress;                  hashCode = (hashCode*397) ^ WritesInProgress;                  hashCode = (hashCode*397) ^ (EffectiveName != null ? EffectiveName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ CoreProcessingTime.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services,ProjectionStatistics,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionStatistics.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Status != null ? Status.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Enabled.GetHashCode();                  hashCode = (hashCode*397) ^ (int) MasterStatus;                  hashCode = (hashCode*397) ^ (StateReason != null ? StateReason.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  hashCode = (hashCode*397) ^ (int) Mode;                  hashCode = (hashCode*397) ^ (Position != null ? Position.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Progress.GetHashCode();                  hashCode = (hashCode*397) ^ (LastCheckpoint != null ? LastCheckpoint.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ EventsProcessedAfterRestart;                  hashCode = (hashCode*397) ^ BufferedEvents;                  hashCode = (hashCode*397) ^ (CheckpointStatus != null ? CheckpointStatus.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ WritePendingEventsBeforeCheckpoint;                  hashCode = (hashCode*397) ^ WritePendingEventsAfterCheckpoint;                  hashCode = (hashCode*397) ^ PartitionsCached;                  hashCode = (hashCode*397) ^ ReadsInProgress;                  hashCode = (hashCode*397) ^ WritesInProgress;                  hashCode = (hashCode*397) ^ (EffectiveName != null ? EffectiveName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ CoreProcessingTime.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services,ProjectionStatistics,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionStatistics.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Status != null ? Status.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Enabled.GetHashCode();                  hashCode = (hashCode*397) ^ (int) MasterStatus;                  hashCode = (hashCode*397) ^ (StateReason != null ? StateReason.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  hashCode = (hashCode*397) ^ (int) Mode;                  hashCode = (hashCode*397) ^ (Position != null ? Position.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Progress.GetHashCode();                  hashCode = (hashCode*397) ^ (LastCheckpoint != null ? LastCheckpoint.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ EventsProcessedAfterRestart;                  hashCode = (hashCode*397) ^ BufferedEvents;                  hashCode = (hashCode*397) ^ (CheckpointStatus != null ? CheckpointStatus.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ WritePendingEventsBeforeCheckpoint;                  hashCode = (hashCode*397) ^ WritePendingEventsAfterCheckpoint;                  hashCode = (hashCode*397) ^ PartitionsCached;                  hashCode = (hashCode*397) ^ ReadsInProgress;                  hashCode = (hashCode*397) ^ WritesInProgress;                  hashCode = (hashCode*397) ^ (EffectiveName != null ? EffectiveName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ CoreProcessingTime.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services,ProjectionStatistics,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionStatistics.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Status != null ? Status.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Enabled.GetHashCode();                  hashCode = (hashCode*397) ^ (int) MasterStatus;                  hashCode = (hashCode*397) ^ (StateReason != null ? StateReason.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  hashCode = (hashCode*397) ^ (int) Mode;                  hashCode = (hashCode*397) ^ (Position != null ? Position.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Progress.GetHashCode();                  hashCode = (hashCode*397) ^ (LastCheckpoint != null ? LastCheckpoint.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ EventsProcessedAfterRestart;                  hashCode = (hashCode*397) ^ BufferedEvents;                  hashCode = (hashCode*397) ^ (CheckpointStatus != null ? CheckpointStatus.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ WritePendingEventsBeforeCheckpoint;                  hashCode = (hashCode*397) ^ WritePendingEventsAfterCheckpoint;                  hashCode = (hashCode*397) ^ PartitionsCached;                  hashCode = (hashCode*397) ^ ReadsInProgress;                  hashCode = (hashCode*397) ^ WritesInProgress;                  hashCode = (hashCode*397) ^ (EffectiveName != null ? EffectiveName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ CoreProcessingTime.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services,ProjectionStatistics,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionStatistics.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Status != null ? Status.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Enabled.GetHashCode();                  hashCode = (hashCode*397) ^ (int) MasterStatus;                  hashCode = (hashCode*397) ^ (StateReason != null ? StateReason.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  hashCode = (hashCode*397) ^ (int) Mode;                  hashCode = (hashCode*397) ^ (Position != null ? Position.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Progress.GetHashCode();                  hashCode = (hashCode*397) ^ (LastCheckpoint != null ? LastCheckpoint.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ EventsProcessedAfterRestart;                  hashCode = (hashCode*397) ^ BufferedEvents;                  hashCode = (hashCode*397) ^ (CheckpointStatus != null ? CheckpointStatus.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ WritePendingEventsBeforeCheckpoint;                  hashCode = (hashCode*397) ^ WritePendingEventsAfterCheckpoint;                  hashCode = (hashCode*397) ^ PartitionsCached;                  hashCode = (hashCode*397) ^ ReadsInProgress;                  hashCode = (hashCode*397) ^ WritesInProgress;                  hashCode = (hashCode*397) ^ (EffectiveName != null ? EffectiveName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ CoreProcessingTime.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services,ProjectionStatistics,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionStatistics.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Status != null ? Status.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Enabled.GetHashCode();                  hashCode = (hashCode*397) ^ (int) MasterStatus;                  hashCode = (hashCode*397) ^ (StateReason != null ? StateReason.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  hashCode = (hashCode*397) ^ (int) Mode;                  hashCode = (hashCode*397) ^ (Position != null ? Position.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Progress.GetHashCode();                  hashCode = (hashCode*397) ^ (LastCheckpoint != null ? LastCheckpoint.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ EventsProcessedAfterRestart;                  hashCode = (hashCode*397) ^ BufferedEvents;                  hashCode = (hashCode*397) ^ (CheckpointStatus != null ? CheckpointStatus.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ WritePendingEventsBeforeCheckpoint;                  hashCode = (hashCode*397) ^ WritePendingEventsAfterCheckpoint;                  hashCode = (hashCode*397) ^ PartitionsCached;                  hashCode = (hashCode*397) ^ ReadsInProgress;                  hashCode = (hashCode*397) ^ WritesInProgress;                  hashCode = (hashCode*397) ^ (EffectiveName != null ? EffectiveName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ CoreProcessingTime.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services,ProjectionStatistics,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionStatistics.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Status != null ? Status.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Enabled.GetHashCode();                  hashCode = (hashCode*397) ^ (int) MasterStatus;                  hashCode = (hashCode*397) ^ (StateReason != null ? StateReason.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  hashCode = (hashCode*397) ^ (int) Mode;                  hashCode = (hashCode*397) ^ (Position != null ? Position.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Progress.GetHashCode();                  hashCode = (hashCode*397) ^ (LastCheckpoint != null ? LastCheckpoint.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ EventsProcessedAfterRestart;                  hashCode = (hashCode*397) ^ BufferedEvents;                  hashCode = (hashCode*397) ^ (CheckpointStatus != null ? CheckpointStatus.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ WritePendingEventsBeforeCheckpoint;                  hashCode = (hashCode*397) ^ WritePendingEventsAfterCheckpoint;                  hashCode = (hashCode*397) ^ PartitionsCached;                  hashCode = (hashCode*397) ^ ReadsInProgress;                  hashCode = (hashCode*397) ^ WritesInProgress;                  hashCode = (hashCode*397) ^ (EffectiveName != null ? EffectiveName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ CoreProcessingTime.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services,ProjectionStatistics,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionStatistics.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Status != null ? Status.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Enabled.GetHashCode();                  hashCode = (hashCode*397) ^ (int) MasterStatus;                  hashCode = (hashCode*397) ^ (StateReason != null ? StateReason.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  hashCode = (hashCode*397) ^ (int) Mode;                  hashCode = (hashCode*397) ^ (Position != null ? Position.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Progress.GetHashCode();                  hashCode = (hashCode*397) ^ (LastCheckpoint != null ? LastCheckpoint.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ EventsProcessedAfterRestart;                  hashCode = (hashCode*397) ^ BufferedEvents;                  hashCode = (hashCode*397) ^ (CheckpointStatus != null ? CheckpointStatus.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ WritePendingEventsBeforeCheckpoint;                  hashCode = (hashCode*397) ^ WritePendingEventsAfterCheckpoint;                  hashCode = (hashCode*397) ^ PartitionsCached;                  hashCode = (hashCode*397) ^ ReadsInProgress;                  hashCode = (hashCode*397) ^ WritesInProgress;                  hashCode = (hashCode*397) ^ (EffectiveName != null ? EffectiveName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ CoreProcessingTime.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services,ProjectionStatistics,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionStatistics.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Status != null ? Status.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Enabled.GetHashCode();                  hashCode = (hashCode*397) ^ (int) MasterStatus;                  hashCode = (hashCode*397) ^ (StateReason != null ? StateReason.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  hashCode = (hashCode*397) ^ (int) Mode;                  hashCode = (hashCode*397) ^ (Position != null ? Position.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Progress.GetHashCode();                  hashCode = (hashCode*397) ^ (LastCheckpoint != null ? LastCheckpoint.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ EventsProcessedAfterRestart;                  hashCode = (hashCode*397) ^ BufferedEvents;                  hashCode = (hashCode*397) ^ (CheckpointStatus != null ? CheckpointStatus.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ WritePendingEventsBeforeCheckpoint;                  hashCode = (hashCode*397) ^ WritePendingEventsAfterCheckpoint;                  hashCode = (hashCode*397) ^ PartitionsCached;                  hashCode = (hashCode*397) ^ ReadsInProgress;                  hashCode = (hashCode*397) ^ WritesInProgress;                  hashCode = (hashCode*397) ^ (EffectiveName != null ? EffectiveName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ CoreProcessingTime.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services,ProjectionStatistics,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionStatistics.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Status != null ? Status.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Enabled.GetHashCode();                  hashCode = (hashCode*397) ^ (int) MasterStatus;                  hashCode = (hashCode*397) ^ (StateReason != null ? StateReason.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  hashCode = (hashCode*397) ^ (int) Mode;                  hashCode = (hashCode*397) ^ (Position != null ? Position.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Progress.GetHashCode();                  hashCode = (hashCode*397) ^ (LastCheckpoint != null ? LastCheckpoint.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ EventsProcessedAfterRestart;                  hashCode = (hashCode*397) ^ BufferedEvents;                  hashCode = (hashCode*397) ^ (CheckpointStatus != null ? CheckpointStatus.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ WritePendingEventsBeforeCheckpoint;                  hashCode = (hashCode*397) ^ WritePendingEventsAfterCheckpoint;                  hashCode = (hashCode*397) ^ PartitionsCached;                  hashCode = (hashCode*397) ^ ReadsInProgress;                  hashCode = (hashCode*397) ^ WritesInProgress;                  hashCode = (hashCode*397) ^ (EffectiveName != null ? EffectiveName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ CoreProcessingTime.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services,ProjectionStatistics,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionStatistics.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Status != null ? Status.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Enabled.GetHashCode();                  hashCode = (hashCode*397) ^ (int) MasterStatus;                  hashCode = (hashCode*397) ^ (StateReason != null ? StateReason.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  hashCode = (hashCode*397) ^ (int) Mode;                  hashCode = (hashCode*397) ^ (Position != null ? Position.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Progress.GetHashCode();                  hashCode = (hashCode*397) ^ (LastCheckpoint != null ? LastCheckpoint.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ EventsProcessedAfterRestart;                  hashCode = (hashCode*397) ^ BufferedEvents;                  hashCode = (hashCode*397) ^ (CheckpointStatus != null ? CheckpointStatus.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ WritePendingEventsBeforeCheckpoint;                  hashCode = (hashCode*397) ^ WritePendingEventsAfterCheckpoint;                  hashCode = (hashCode*397) ^ PartitionsCached;                  hashCode = (hashCode*397) ^ ReadsInProgress;                  hashCode = (hashCode*397) ^ WritesInProgress;                  hashCode = (hashCode*397) ^ (EffectiveName != null ? EffectiveName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ CoreProcessingTime.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services,ProjectionStatistics,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionStatistics.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Status != null ? Status.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Enabled.GetHashCode();                  hashCode = (hashCode*397) ^ (int) MasterStatus;                  hashCode = (hashCode*397) ^ (StateReason != null ? StateReason.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  hashCode = (hashCode*397) ^ (int) Mode;                  hashCode = (hashCode*397) ^ (Position != null ? Position.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Progress.GetHashCode();                  hashCode = (hashCode*397) ^ (LastCheckpoint != null ? LastCheckpoint.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ EventsProcessedAfterRestart;                  hashCode = (hashCode*397) ^ BufferedEvents;                  hashCode = (hashCode*397) ^ (CheckpointStatus != null ? CheckpointStatus.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ WritePendingEventsBeforeCheckpoint;                  hashCode = (hashCode*397) ^ WritePendingEventsAfterCheckpoint;                  hashCode = (hashCode*397) ^ PartitionsCached;                  hashCode = (hashCode*397) ^ ReadsInProgress;                  hashCode = (hashCode*397) ^ WritesInProgress;                  hashCode = (hashCode*397) ^ (EffectiveName != null ? EffectiveName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ CoreProcessingTime.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services,ProjectionStatistics,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionStatistics.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Status != null ? Status.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Enabled.GetHashCode();                  hashCode = (hashCode*397) ^ (int) MasterStatus;                  hashCode = (hashCode*397) ^ (StateReason != null ? StateReason.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  hashCode = (hashCode*397) ^ (int) Mode;                  hashCode = (hashCode*397) ^ (Position != null ? Position.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Progress.GetHashCode();                  hashCode = (hashCode*397) ^ (LastCheckpoint != null ? LastCheckpoint.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ EventsProcessedAfterRestart;                  hashCode = (hashCode*397) ^ BufferedEvents;                  hashCode = (hashCode*397) ^ (CheckpointStatus != null ? CheckpointStatus.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ WritePendingEventsBeforeCheckpoint;                  hashCode = (hashCode*397) ^ WritePendingEventsAfterCheckpoint;                  hashCode = (hashCode*397) ^ PartitionsCached;                  hashCode = (hashCode*397) ^ ReadsInProgress;                  hashCode = (hashCode*397) ^ WritesInProgress;                  hashCode = (hashCode*397) ^ (EffectiveName != null ? EffectiveName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ CoreProcessingTime.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services,ProjectionStatistics,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionStatistics.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Status != null ? Status.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Enabled.GetHashCode();                  hashCode = (hashCode*397) ^ (int) MasterStatus;                  hashCode = (hashCode*397) ^ (StateReason != null ? StateReason.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  hashCode = (hashCode*397) ^ (int) Mode;                  hashCode = (hashCode*397) ^ (Position != null ? Position.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Progress.GetHashCode();                  hashCode = (hashCode*397) ^ (LastCheckpoint != null ? LastCheckpoint.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ EventsProcessedAfterRestart;                  hashCode = (hashCode*397) ^ BufferedEvents;                  hashCode = (hashCode*397) ^ (CheckpointStatus != null ? CheckpointStatus.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ WritePendingEventsBeforeCheckpoint;                  hashCode = (hashCode*397) ^ WritePendingEventsAfterCheckpoint;                  hashCode = (hashCode*397) ^ PartitionsCached;                  hashCode = (hashCode*397) ^ ReadsInProgress;                  hashCode = (hashCode*397) ^ WritesInProgress;                  hashCode = (hashCode*397) ^ (EffectiveName != null ? EffectiveName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ CoreProcessingTime.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services,ProjectionStatistics,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionStatistics.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Status != null ? Status.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Enabled.GetHashCode();                  hashCode = (hashCode*397) ^ (int) MasterStatus;                  hashCode = (hashCode*397) ^ (StateReason != null ? StateReason.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  hashCode = (hashCode*397) ^ (int) Mode;                  hashCode = (hashCode*397) ^ (Position != null ? Position.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Progress.GetHashCode();                  hashCode = (hashCode*397) ^ (LastCheckpoint != null ? LastCheckpoint.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ EventsProcessedAfterRestart;                  hashCode = (hashCode*397) ^ BufferedEvents;                  hashCode = (hashCode*397) ^ (CheckpointStatus != null ? CheckpointStatus.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ WritePendingEventsBeforeCheckpoint;                  hashCode = (hashCode*397) ^ WritePendingEventsAfterCheckpoint;                  hashCode = (hashCode*397) ^ PartitionsCached;                  hashCode = (hashCode*397) ^ ReadsInProgress;                  hashCode = (hashCode*397) ^ WritesInProgress;                  hashCode = (hashCode*397) ^ (EffectiveName != null ? EffectiveName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ CoreProcessingTime.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services,ProjectionStatistics,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionStatistics.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Status != null ? Status.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Enabled.GetHashCode();                  hashCode = (hashCode*397) ^ (int) MasterStatus;                  hashCode = (hashCode*397) ^ (StateReason != null ? StateReason.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  hashCode = (hashCode*397) ^ (int) Mode;                  hashCode = (hashCode*397) ^ (Position != null ? Position.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Progress.GetHashCode();                  hashCode = (hashCode*397) ^ (LastCheckpoint != null ? LastCheckpoint.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ EventsProcessedAfterRestart;                  hashCode = (hashCode*397) ^ BufferedEvents;                  hashCode = (hashCode*397) ^ (CheckpointStatus != null ? CheckpointStatus.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ WritePendingEventsBeforeCheckpoint;                  hashCode = (hashCode*397) ^ WritePendingEventsAfterCheckpoint;                  hashCode = (hashCode*397) ^ PartitionsCached;                  hashCode = (hashCode*397) ^ ReadsInProgress;                  hashCode = (hashCode*397) ^ WritesInProgress;                  hashCode = (hashCode*397) ^ (EffectiveName != null ? EffectiveName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ CoreProcessingTime.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services,ProjectionStatistics,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionStatistics.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Status != null ? Status.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Enabled.GetHashCode();                  hashCode = (hashCode*397) ^ (int) MasterStatus;                  hashCode = (hashCode*397) ^ (StateReason != null ? StateReason.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  hashCode = (hashCode*397) ^ (int) Mode;                  hashCode = (hashCode*397) ^ (Position != null ? Position.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Progress.GetHashCode();                  hashCode = (hashCode*397) ^ (LastCheckpoint != null ? LastCheckpoint.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ EventsProcessedAfterRestart;                  hashCode = (hashCode*397) ^ BufferedEvents;                  hashCode = (hashCode*397) ^ (CheckpointStatus != null ? CheckpointStatus.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ WritePendingEventsBeforeCheckpoint;                  hashCode = (hashCode*397) ^ WritePendingEventsAfterCheckpoint;                  hashCode = (hashCode*397) ^ PartitionsCached;                  hashCode = (hashCode*397) ^ ReadsInProgress;                  hashCode = (hashCode*397) ^ WritesInProgress;                  hashCode = (hashCode*397) ^ (EffectiveName != null ? EffectiveName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ CoreProcessingTime.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services,ProjectionStatistics,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionStatistics.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Status != null ? Status.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Enabled.GetHashCode();                  hashCode = (hashCode*397) ^ (int) MasterStatus;                  hashCode = (hashCode*397) ^ (StateReason != null ? StateReason.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  hashCode = (hashCode*397) ^ (int) Mode;                  hashCode = (hashCode*397) ^ (Position != null ? Position.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Progress.GetHashCode();                  hashCode = (hashCode*397) ^ (LastCheckpoint != null ? LastCheckpoint.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ EventsProcessedAfterRestart;                  hashCode = (hashCode*397) ^ BufferedEvents;                  hashCode = (hashCode*397) ^ (CheckpointStatus != null ? CheckpointStatus.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ WritePendingEventsBeforeCheckpoint;                  hashCode = (hashCode*397) ^ WritePendingEventsAfterCheckpoint;                  hashCode = (hashCode*397) ^ PartitionsCached;                  hashCode = (hashCode*397) ^ ReadsInProgress;                  hashCode = (hashCode*397) ^ WritesInProgress;                  hashCode = (hashCode*397) ^ (EffectiveName != null ? EffectiveName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ CoreProcessingTime.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services,ProjectionStatistics,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionStatistics.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Status != null ? Status.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Enabled.GetHashCode();                  hashCode = (hashCode*397) ^ (int) MasterStatus;                  hashCode = (hashCode*397) ^ (StateReason != null ? StateReason.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  hashCode = (hashCode*397) ^ (int) Mode;                  hashCode = (hashCode*397) ^ (Position != null ? Position.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Progress.GetHashCode();                  hashCode = (hashCode*397) ^ (LastCheckpoint != null ? LastCheckpoint.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ EventsProcessedAfterRestart;                  hashCode = (hashCode*397) ^ BufferedEvents;                  hashCode = (hashCode*397) ^ (CheckpointStatus != null ? CheckpointStatus.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ WritePendingEventsBeforeCheckpoint;                  hashCode = (hashCode*397) ^ WritePendingEventsAfterCheckpoint;                  hashCode = (hashCode*397) ^ PartitionsCached;                  hashCode = (hashCode*397) ^ ReadsInProgress;                  hashCode = (hashCode*397) ^ WritesInProgress;                  hashCode = (hashCode*397) ^ (EffectiveName != null ? EffectiveName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ CoreProcessingTime.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services,ProjectionStatistics,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\ProjectionStatistics.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Status != null ? Status.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Enabled.GetHashCode();                  hashCode = (hashCode*397) ^ (int) MasterStatus;                  hashCode = (hashCode*397) ^ (StateReason != null ? StateReason.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  hashCode = (hashCode*397) ^ (int) Mode;                  hashCode = (hashCode*397) ^ (Position != null ? Position.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ Progress.GetHashCode();                  hashCode = (hashCode*397) ^ (LastCheckpoint != null ? LastCheckpoint.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ EventsProcessedAfterRestart;                  hashCode = (hashCode*397) ^ BufferedEvents;                  hashCode = (hashCode*397) ^ (CheckpointStatus != null ? CheckpointStatus.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ WritePendingEventsBeforeCheckpoint;                  hashCode = (hashCode*397) ^ WritePendingEventsAfterCheckpoint;                  hashCode = (hashCode*397) ^ PartitionsCached;                  hashCode = (hashCode*397) ^ ReadsInProgress;                  hashCode = (hashCode*397) ^ WritesInProgress;                  hashCode = (hashCode*397) ^ (EffectiveName != null ? EffectiveName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ CoreProcessingTime.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services.Management,MasterCoreProjectionResponseReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\MasterCoreProjectionResponseReader.cs,StartReaderSteps,The following statement contains a magic number: while (!_stopped)              {                  var eof = false;                  var subscribeFrom = default(TFPos);                  do                  {                      yield return                          _ioDispatcher.BeginReadForward(                              _cancellationScope'                              _streamId'                              @from'                              10'                              false'                              SystemAccount.Principal'                              completed =>                              {                                  if (completed.Result == ReadStreamResult.Success                                      || completed.Result == ReadStreamResult.NoStream)                                  {                                      @from = completed.NextEventNumber == -1 ? 0 : completed.NextEventNumber;                                      eof = completed.IsEndOfStream;                                      // subscribeFrom is only used if eof                                      subscribeFrom = new TFPos(                                          completed.TfLastCommitPosition'                                          completed.TfLastCommitPosition);                                      if (completed.Result == ReadStreamResult.Success)                                      {                                          foreach (var e in completed.Events)                                              PublishCommand(e);                                      }                                  }                              });                  } while (!eof);                  _lastAwakeCorrelationId = Guid.NewGuid();                  yield return                      _ioDispatcher.BeginSubscribeAwake(_cancellationScope' _streamId' subscribeFrom' message => { }' _lastAwakeCorrelationId)                      ;              }
Magic Number,EventStore.Projections.Core.Services.Management,ManagedProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ManagedProjection.cs,FixupOldProjectionModes,The following statement contains a magic number: switch ((int) persistedState.Mode)              {                  case 2: // old continuous                      persistedState.Mode = ProjectionMode.Continuous;                      break;                  case 3: // old persistent                      persistedState.Mode = ProjectionMode.Continuous;                      persistedState.EmitEnabled = persistedState.EmitEnabled ?? true;                      break;              }
Magic Number,EventStore.Projections.Core.Services.Management,ManagedProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ManagedProjection.cs,FixupOldProjectionModes,The following statement contains a magic number: switch ((int) persistedState.Mode)              {                  case 2: // old continuous                      persistedState.Mode = ProjectionMode.Continuous;                      break;                  case 3: // old persistent                      persistedState.Mode = ProjectionMode.Continuous;                      persistedState.EmitEnabled = persistedState.EmitEnabled ?? true;                      break;              }
Magic Number,EventStore.Projections.Core.Services.Management,ProjectionCoreCoordinator,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionCoreCoordinator.cs,ScheduleRegularTimeout,The following statement contains a magic number: _publisher.Publish(                  TimerMessage.Schedule.Create(                      TimeSpan.FromMilliseconds(100)'                      _publishEnvelope'                      new ProjectionManagementMessage.Internal.RegularTimeout()));
Magic Number,EventStore.Projections.Core.Services.Management,ProjectionManagerResponseReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManagerResponseReader.cs,ReadForward,The following statement contains a magic number: _cancellationScope.Register(                  _ioDispatcher.ReadForward(                      ProjectionNamesBuilder._projectionsMasterStream'                      _readFrom'                      10'                      false'                      SystemAccount.Principal'                      ReadForwardCompleted'                      _correlationId)              );
Magic Number,EventStore.Projections.Core.Services.Management,TimeoutScheduler,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\TimeoutScheduler.cs,Tick,The following statement contains a magic number: if (entry != null)              {                  entry.Timeout -= 100;                  if (entry.Timeout <= 0)                  {                      if (Interlocked.CompareExchange(ref _current' null' entry) == entry)                      {                          entry.Action();                      }                  }              }
Magic Number,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,ScheduleExpire,The following statement contains a magic number: _publisher.Publish(                  TimerMessage.Schedule.Create(                      TimeSpan.FromSeconds(60)'                      _publishEnvelope'                      new ProjectionManagementMessage.Internal.CleanupExpired()));
Magic Number,EventStore.Projections.Core.Services.Processing,ByStreamCatalogEventReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ByStreamCatalogEventReader.cs,RequestEvents,The following statement contains a magic number: if (_pendingStreams.Count < 10 && !_catalogEof)              {                  _catalogReadRequestId = _ioDispatcher.ReadForward(                      _catalogStreamName' _catalogNextSequenceNumber' _maxReadCount' false' ReadAs' ReadCatalogCompleted);              }              else              {                  TakeNextStreamIfRequired();                  if (!_disposed)                  {                      _dataReadRequestId = _ioDispatcher.ReadForward(                          _dataStreamName' _dataNextSequenceNumber' _maxReadCount' _resolveLinkTos' ReadAs'                          ReadDataStreamCompleted);                  }              }
Magic Number,EventStore.Projections.Core.Services.Processing,CoreProjectionCheckpointReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjectionCheckpointReader.cs,RequestLoadState,The following statement contains a magic number: const int recordsToRequest = 10;
Magic Number,EventStore.Projections.Core.Services.Processing,CoreProjectionCheckpointWriter,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjectionCheckpointWriter.cs,CreateStreamMetadataEvent,The following statement contains a magic number: var metadata = new StreamMetadata(maxCount: 2' maxAge: null' cacheControl: null' acl: acl);
Magic Number,EventStore.Projections.Core.Services.Processing,IndexBased,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventByTypeIndexEventReader.cs,RequestCheckpointStream,The following statement contains a magic number: if (_lastKnownIndexCheckpointEventNumber == -1)                  {                      readRequest = new ClientMessage.ReadStreamEventsBackward(                          pendingRequestCorrelationId' pendingRequestCorrelationId' new SendToThisEnvelope(this)' "$et"' -1' 1' false' false' null'                          _readAs);                  }                  else                  {                      readRequest = new ClientMessage.ReadStreamEventsForward(                          pendingRequestCorrelationId' pendingRequestCorrelationId' new SendToThisEnvelope(this)' "$et"'                          _lastKnownIndexCheckpointEventNumber + 1' 100' false' false' null' _readAs);                  }
Magic Number,EventStore.Projections.Core.Services.Processing,MultiStreamEventReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\MultiStreamEventReader.cs,RequestEvents,The following statement contains a magic number: if (_eofs.Any(v => v.Value))                  _publisher.Publish(                      TimerMessage.Schedule.Create(                          TimeSpan.FromMilliseconds(250)' new PublishEnvelope(_publisher' crossThread: true)'                          new UnwrapEnvelopeMessage(ProcessBuffers2)));
Magic Number,EventStore.Projections.Core.Services.Processing,MultiStreamMultiOutputCheckpointManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\MultiStreamMultiOutputCheckpointManager.cs,CreateOrderStream,The following statement contains a magic number: return new EmittedStream(                  /* MUST NEVER SEND READY MESSAGE */                  _namingBuilder.GetOrderStreamName()'                  new EmittedStream.WriterConfiguration(                      new EmittedStreamsWriter(_ioDispatcher)' new EmittedStream.WriterConfiguration.StreamMetadata()' SystemAccount.Principal' 100' _logger)'                  _projectionVersion' _positionTagger' @from' _publisher' _ioDispatcher' this' noCheckpoints: true);
Magic Number,EventStore.Projections.Core.Services.Processing,MultiStreamMultiOutputCheckpointManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\MultiStreamMultiOutputCheckpointManager.cs,BeginLoadPrerecordedEventsChunk,The following statement contains a magic number: _ioDispatcher.ReadBackward(                  _namingBuilder.GetOrderStreamName()' fromEventNumber' 100' false' SystemAccount.Principal' completed =>                  {                      switch (completed.Result)                      {                          case ReadStreamResult.NoStream:                              _lastOrderCheckpointTag = _positionTagger.MakeZeroCheckpointTag();                              PrerecordedEventsLoaded(checkpointTag);                              break;                          case ReadStreamResult.Success:                              var epochEnded = false;                              foreach (var @event in completed.Events)                              {                                  var parsed = @event.Event.Metadata.ParseCheckpointTagVersionExtraJson(                                      _projectionVersion);                                  //TODO: throw exception if different projectionID?                                  if (_projectionVersion.ProjectionId != parsed.Version.ProjectionId                                      || _projectionVersion.Epoch > parsed.Version.Version)                                  {                                      epochEnded = true;                                      break;                                  }                                  var tag = parsed.AdjustBy(_positionTagger' _projectionVersion);                                  //NOTE: even if this tag <= checkpointTag we set last tag                                  // this is to know the exact last tag to request when writing                                  if (_lastOrderCheckpointTag == null)                                      _lastOrderCheckpointTag = tag;                                    if (tag <= checkpointTag)                                  {                                      SetOrderStreamReadCompleted();                                      return;                                  }                                  EnqueuePrerecordedEvent(@event.Event' tag);                              }                              if (epochEnded || completed.IsEndOfStream)                                  SetOrderStreamReadCompleted();                              else                                  BeginLoadPrerecordedEventsChunk(checkpointTag' completed.NextEventNumber);                              break;                          default:                              throw new Exception("Cannot read order stream");                      }                  });
Magic Number,EventStore.Projections.Core.Services.Processing,MultiStreamMultiOutputCheckpointManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\MultiStreamMultiOutputCheckpointManager.cs,EnqueuePrerecordedEvent,The following statement contains a magic number: string[] parts = linkTo.Split(_linkToSeparator' 2);
Magic Number,EventStore.Projections.Core.Services.Processing,CoreProjectionQueue,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjectionQueue.cs,ProcessOneEventBatch,The following statement contains a magic number: var processed = _queuePendingEvents.Process(max: 30);
Magic Number,EventStore.Projections.Core.Services.Processing,CoreProjectionQueue,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjectionQueue.cs,ProcessOneEventBatch,The following statement contains a magic number: if (_subscriptionPaused && _queuePendingEvents.Count < _pendingEventsThreshold / 2)                  ResumeSubscription();
Magic Number,EventStore.Projections.Core.Services.Processing,PartitionState,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\PartitionState.cs,Deserialize,The following statement contains a magic number: if (!string.IsNullOrEmpty(serializedState))              {                  var deserialized = JsonConvert.DeserializeObject(serializedState);                  var array = deserialized as JArray;                  if (array != null && array.Count > 0)                  {                      state = array[0] as JToken;                      if (array.Count == 2)                      {                          result = array[1] as JToken;                      }                  }                  else                  {                      state = deserialized as JObject;                  }              }
Magic Number,EventStore.Projections.Core.Services.Processing,PartitionStateCache,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\PartitionStateCache.cs,CleanUp,The following statement contains a magic number: while (removeAllUnlocked || _cacheOrder.Count > _maxCachedPartitions*5                     || CachedItemCount > _maxCachedPartitions)              {                  if (_cacheOrder.Count == 0)                      break;                  Tuple<CheckpointTag' string> top = _cacheOrder.FirstOrDefault();                  if (top.Item1 >= _unlockedBefore)                      break; // other entries were locked after the checkpoint (or almost .. order is not very strong)                  _cacheOrder.RemoveFirst();                  Tuple<PartitionState' CheckpointTag> entry;                  if (!_partitionStates.TryGetValue(top.Item2' out entry))                      continue; // already removed                  if (entry.Item2 >= _unlockedBefore)                      continue; // was relocked                    _partitionStates.Remove(top.Item2);                  _cachedItemCount = _partitionStates.Count;              }
Magic Number,EventStore.Projections.Core.Services.Processing,ProjectionCoreServiceCommandReader,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionCoreServiceCommandReader.cs,StartCoreSteps,The following statement contains a magic number: while (!_stopped)              {                  var eof = false;                  var subscribeFrom = default(TFPos);                  do                  {                      yield return                          _ioDispatcher.BeginReadForward(                          _cancellationScope'                              coreControlStreamID'                              @from'                              10'                              false'                              SystemAccount.Principal'                              completed =>                              {                                  @from = completed.NextEventNumber == -1 ? 0 : completed.NextEventNumber;                                  eof = completed.IsEndOfStream;                                  // subscribeFrom is only used if eof                                  subscribeFrom = new TFPos(                                      completed.TfLastCommitPosition'                                      completed.TfLastCommitPosition);                                  foreach (var e in completed.Events)                                      PublishCommand(e);                              });                  } while (!eof);                  yield return                      _ioDispatcher.BeginSubscribeAwake(_cancellationScope' coreControlStreamID' subscribeFrom' message => { });              }
Magic Number,EventStore.Projections.Core.Services.Processing,ProjectionSourceDefinition,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionSourceDefinition.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = AllEvents.GetHashCode();                  hashCode = (hashCode*397) ^ AllStreams.GetHashCode();                  hashCode = (hashCode*397) ^ ByStream.GetHashCode();                  hashCode = (hashCode*397) ^ ByCustomPartitions.GetHashCode();                  hashCode = (hashCode*397) ^ (CatalogStream != null ? CatalogStream.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ LimitingCommitPosition.GetHashCode();                  hashCode = (hashCode*397) ^ (Options != null ? Options.GetHashCode() : 0);                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services.Processing,ProjectionSourceDefinition,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionSourceDefinition.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = AllEvents.GetHashCode();                  hashCode = (hashCode*397) ^ AllStreams.GetHashCode();                  hashCode = (hashCode*397) ^ ByStream.GetHashCode();                  hashCode = (hashCode*397) ^ ByCustomPartitions.GetHashCode();                  hashCode = (hashCode*397) ^ (CatalogStream != null ? CatalogStream.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ LimitingCommitPosition.GetHashCode();                  hashCode = (hashCode*397) ^ (Options != null ? Options.GetHashCode() : 0);                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services.Processing,ProjectionSourceDefinition,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionSourceDefinition.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = AllEvents.GetHashCode();                  hashCode = (hashCode*397) ^ AllStreams.GetHashCode();                  hashCode = (hashCode*397) ^ ByStream.GetHashCode();                  hashCode = (hashCode*397) ^ ByCustomPartitions.GetHashCode();                  hashCode = (hashCode*397) ^ (CatalogStream != null ? CatalogStream.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ LimitingCommitPosition.GetHashCode();                  hashCode = (hashCode*397) ^ (Options != null ? Options.GetHashCode() : 0);                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services.Processing,ProjectionSourceDefinition,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionSourceDefinition.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = AllEvents.GetHashCode();                  hashCode = (hashCode*397) ^ AllStreams.GetHashCode();                  hashCode = (hashCode*397) ^ ByStream.GetHashCode();                  hashCode = (hashCode*397) ^ ByCustomPartitions.GetHashCode();                  hashCode = (hashCode*397) ^ (CatalogStream != null ? CatalogStream.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ LimitingCommitPosition.GetHashCode();                  hashCode = (hashCode*397) ^ (Options != null ? Options.GetHashCode() : 0);                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services.Processing,ProjectionSourceDefinition,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionSourceDefinition.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = AllEvents.GetHashCode();                  hashCode = (hashCode*397) ^ AllStreams.GetHashCode();                  hashCode = (hashCode*397) ^ ByStream.GetHashCode();                  hashCode = (hashCode*397) ^ ByCustomPartitions.GetHashCode();                  hashCode = (hashCode*397) ^ (CatalogStream != null ? CatalogStream.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ LimitingCommitPosition.GetHashCode();                  hashCode = (hashCode*397) ^ (Options != null ? Options.GetHashCode() : 0);                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services.Processing,ProjectionSourceDefinition,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionSourceDefinition.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = AllEvents.GetHashCode();                  hashCode = (hashCode*397) ^ AllStreams.GetHashCode();                  hashCode = (hashCode*397) ^ ByStream.GetHashCode();                  hashCode = (hashCode*397) ^ ByCustomPartitions.GetHashCode();                  hashCode = (hashCode*397) ^ (CatalogStream != null ? CatalogStream.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ LimitingCommitPosition.GetHashCode();                  hashCode = (hashCode*397) ^ (Options != null ? Options.GetHashCode() : 0);                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services.Processing,ReaderSubscriptionBase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderSubscriptionBase.cs,PublishProgress,The following statement contains a magic number: if (now - _lastProgressPublished > TimeSpan.FromMilliseconds(500))              {                  _lastProgressPublished = now;                  _progress = roundedProgress;                  _publisher.Publish(                      new EventReaderSubscriptionMessage.ProgressChanged(                          _subscriptionId'                          _positionTracker.LastTag'                          _progress'                          _subscriptionMessageSequenceNumber++));              }
Magic Number,EventStore.Projections.Core.Services.Processing,ProjectionVersion,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionVersion.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services.Processing,ProjectionVersion,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ProjectionVersion.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = ProjectionId.GetHashCode();                  hashCode = (hashCode*397) ^ Epoch.GetHashCode();                  hashCode = (hashCode*397) ^ Version.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services.Processing,QuerySourceOptions,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\SourceDefinitionBuilder.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (PartitionResultStreamNamePattern != null ? PartitionResultStreamNamePattern.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ReorderEvents.GetHashCode();                  hashCode = (hashCode*397) ^ ProcessingLag;                  hashCode = (hashCode*397) ^ IsBiState.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesStateTransform.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesCatalogTransform.GetHashCode();                  hashCode = (hashCode*397) ^ ProducesResults.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesFold.GetHashCode();                  hashCode = (hashCode*397) ^ HandlesDeletedNotifications.GetHashCode();                  hashCode = (hashCode*397) ^ IncludeLinks.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services.Processing,QuerySourceOptions,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\SourceDefinitionBuilder.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (PartitionResultStreamNamePattern != null ? PartitionResultStreamNamePattern.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ReorderEvents.GetHashCode();                  hashCode = (hashCode*397) ^ ProcessingLag;                  hashCode = (hashCode*397) ^ IsBiState.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesStateTransform.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesCatalogTransform.GetHashCode();                  hashCode = (hashCode*397) ^ ProducesResults.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesFold.GetHashCode();                  hashCode = (hashCode*397) ^ HandlesDeletedNotifications.GetHashCode();                  hashCode = (hashCode*397) ^ IncludeLinks.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services.Processing,QuerySourceOptions,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\SourceDefinitionBuilder.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (PartitionResultStreamNamePattern != null ? PartitionResultStreamNamePattern.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ReorderEvents.GetHashCode();                  hashCode = (hashCode*397) ^ ProcessingLag;                  hashCode = (hashCode*397) ^ IsBiState.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesStateTransform.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesCatalogTransform.GetHashCode();                  hashCode = (hashCode*397) ^ ProducesResults.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesFold.GetHashCode();                  hashCode = (hashCode*397) ^ HandlesDeletedNotifications.GetHashCode();                  hashCode = (hashCode*397) ^ IncludeLinks.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services.Processing,QuerySourceOptions,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\SourceDefinitionBuilder.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (PartitionResultStreamNamePattern != null ? PartitionResultStreamNamePattern.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ReorderEvents.GetHashCode();                  hashCode = (hashCode*397) ^ ProcessingLag;                  hashCode = (hashCode*397) ^ IsBiState.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesStateTransform.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesCatalogTransform.GetHashCode();                  hashCode = (hashCode*397) ^ ProducesResults.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesFold.GetHashCode();                  hashCode = (hashCode*397) ^ HandlesDeletedNotifications.GetHashCode();                  hashCode = (hashCode*397) ^ IncludeLinks.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services.Processing,QuerySourceOptions,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\SourceDefinitionBuilder.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (PartitionResultStreamNamePattern != null ? PartitionResultStreamNamePattern.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ReorderEvents.GetHashCode();                  hashCode = (hashCode*397) ^ ProcessingLag;                  hashCode = (hashCode*397) ^ IsBiState.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesStateTransform.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesCatalogTransform.GetHashCode();                  hashCode = (hashCode*397) ^ ProducesResults.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesFold.GetHashCode();                  hashCode = (hashCode*397) ^ HandlesDeletedNotifications.GetHashCode();                  hashCode = (hashCode*397) ^ IncludeLinks.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services.Processing,QuerySourceOptions,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\SourceDefinitionBuilder.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (PartitionResultStreamNamePattern != null ? PartitionResultStreamNamePattern.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ReorderEvents.GetHashCode();                  hashCode = (hashCode*397) ^ ProcessingLag;                  hashCode = (hashCode*397) ^ IsBiState.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesStateTransform.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesCatalogTransform.GetHashCode();                  hashCode = (hashCode*397) ^ ProducesResults.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesFold.GetHashCode();                  hashCode = (hashCode*397) ^ HandlesDeletedNotifications.GetHashCode();                  hashCode = (hashCode*397) ^ IncludeLinks.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services.Processing,QuerySourceOptions,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\SourceDefinitionBuilder.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (PartitionResultStreamNamePattern != null ? PartitionResultStreamNamePattern.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ReorderEvents.GetHashCode();                  hashCode = (hashCode*397) ^ ProcessingLag;                  hashCode = (hashCode*397) ^ IsBiState.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesStateTransform.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesCatalogTransform.GetHashCode();                  hashCode = (hashCode*397) ^ ProducesResults.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesFold.GetHashCode();                  hashCode = (hashCode*397) ^ HandlesDeletedNotifications.GetHashCode();                  hashCode = (hashCode*397) ^ IncludeLinks.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services.Processing,QuerySourceOptions,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\SourceDefinitionBuilder.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (PartitionResultStreamNamePattern != null ? PartitionResultStreamNamePattern.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ReorderEvents.GetHashCode();                  hashCode = (hashCode*397) ^ ProcessingLag;                  hashCode = (hashCode*397) ^ IsBiState.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesStateTransform.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesCatalogTransform.GetHashCode();                  hashCode = (hashCode*397) ^ ProducesResults.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesFold.GetHashCode();                  hashCode = (hashCode*397) ^ HandlesDeletedNotifications.GetHashCode();                  hashCode = (hashCode*397) ^ IncludeLinks.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services.Processing,QuerySourceOptions,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\SourceDefinitionBuilder.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (PartitionResultStreamNamePattern != null ? PartitionResultStreamNamePattern.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ReorderEvents.GetHashCode();                  hashCode = (hashCode*397) ^ ProcessingLag;                  hashCode = (hashCode*397) ^ IsBiState.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesStateTransform.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesCatalogTransform.GetHashCode();                  hashCode = (hashCode*397) ^ ProducesResults.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesFold.GetHashCode();                  hashCode = (hashCode*397) ^ HandlesDeletedNotifications.GetHashCode();                  hashCode = (hashCode*397) ^ IncludeLinks.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services.Processing,QuerySourceOptions,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\SourceDefinitionBuilder.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (ResultStreamName != null ? ResultStreamName.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (PartitionResultStreamNamePattern != null ? PartitionResultStreamNamePattern.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ ReorderEvents.GetHashCode();                  hashCode = (hashCode*397) ^ ProcessingLag;                  hashCode = (hashCode*397) ^ IsBiState.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesStateTransform.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesCatalogTransform.GetHashCode();                  hashCode = (hashCode*397) ^ ProducesResults.GetHashCode();                  hashCode = (hashCode*397) ^ DefinesFold.GetHashCode();                  hashCode = (hashCode*397) ^ HandlesDeletedNotifications.GetHashCode();                  hashCode = (hashCode*397) ^ IncludeLinks.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Projections.Core.Services.Processing,CheckpointTag,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CheckpointTag.cs,FromJson,The following statement contains a magic number: while (true)              {                  Check(reader.Read()' reader);                  if (reader.TokenType == JsonToken.EndObject)                      break;                  Check(JsonToken.PropertyName' reader);                  var name = (string) reader.Value;                  switch (name)                  {                      case "$cp":                          Check(reader.Read()' reader);                          var completed = (bool)reader.Value;                          commitPosition = completed ? Int64.MaxValue : Int64.MinValue;                          preparePosition = completed ? Int64.MaxValue : Int64.MinValue;                          break;                      case "$v":                      case "v":                          Check(reader.Read()' reader);                          if (reader.ValueType == typeof (long))                          {                              var v = (int)(long)reader.Value;                              if (v > 0) // TODO: remove this if with time                                  projectionVersion = v;                          }                          else                          {                              //TODO: better handle errors                              var v = (string) reader.Value;                              string[] parts = v.Split(':');                              if (parts.Length == 2)                              {                                  projectionVersion = Int32.Parse(parts[1]);                              }                              else                              {                                  projectionId = Int32.Parse(parts[0]);                                  projectionEpoch = Int32.Parse(parts[1]);                                  projectionVersion = Int32.Parse(parts[2]);                                  if (parts.Length >= 4)                                       projectionSystemVersion = Int32.Parse(parts[3]);                              }                          }                          break;                      case "$c":                      case "c":                      case "commitPosition":                          Check(reader.Read()' reader);                          commitPosition = (long) reader.Value;                          break;                      case "$p":                      case "p":                      case "preparePosition":                          Check(reader.Read()' reader);                          preparePosition = (long) reader.Value;                          break;                      case "$s":                      case "s":                      case "streams":                          Check(reader.Read()' reader);                          if (reader.TokenType == JsonToken.StartArray)                          {                              Check(reader.Read()' reader);                              Check(JsonToken.StartObject' reader);                              Check(reader.Read()' reader);                              Check(JsonToken.PropertyName' reader);                              catalogStream = (string)reader.Value;                              Check(reader.Read()' reader);                              catalogPosition = (int) (long) reader.Value;                              Check(reader.Read()' reader);                              Check(JsonToken.EndObject' reader);                                Check(reader.Read()' reader);                              if (reader.TokenType == JsonToken.StartObject)                              {                                  Check(reader.Read()' reader);                                  Check(JsonToken.PropertyName' reader);                                  dataStream = (string) reader.Value;                                  Check(reader.Read()' reader);                                  dataPosition = (int) (long) reader.Value;                                  Check(reader.Read()' reader);                                  Check(JsonToken.EndObject' reader);                                  Check(reader.Read()' reader);                              }                              Check(JsonToken.EndArray' reader);                          }                          else                          {                              Check(JsonToken.StartObject' reader);                              streams = new Dictionary<string' long>();                              while (true)                              {                                  Check(reader.Read()' reader);                                  if (reader.TokenType == JsonToken.EndObject)                                      break;                                  Check(JsonToken.PropertyName' reader);                                  var streamName = (string) reader.Value;                                  Check(reader.Read()' reader);                                  var position = (int) (long) reader.Value;                                  streams.Add(streamName' position);                              }                          }                          break;                      case "$ph":                          Check(reader.Read()' reader);                          projectionPhase = (int)(long) reader.Value;                          break;                      case "$m":                          Check(reader.Read()' reader);                          var readMode = (string) reader.Value;                          if (readMode != "bs")                              throw new ApplicationException("Unknown checkpoint tag mode: " + readMode);                          byStreamMode = true;                          break;                      default:                          if (extra == null)                              extra = new Dictionary<string' JToken>();                          Check(reader.Read()' reader);                          var jToken = JToken.ReadFrom(reader);                          extra.Add(name' jToken);                          break;                  }              }
Magic Number,EventStore.Projections.Core.Services.Processing,CheckpointTag,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CheckpointTag.cs,FromJson,The following statement contains a magic number: while (true)              {                  Check(reader.Read()' reader);                  if (reader.TokenType == JsonToken.EndObject)                      break;                  Check(JsonToken.PropertyName' reader);                  var name = (string) reader.Value;                  switch (name)                  {                      case "$cp":                          Check(reader.Read()' reader);                          var completed = (bool)reader.Value;                          commitPosition = completed ? Int64.MaxValue : Int64.MinValue;                          preparePosition = completed ? Int64.MaxValue : Int64.MinValue;                          break;                      case "$v":                      case "v":                          Check(reader.Read()' reader);                          if (reader.ValueType == typeof (long))                          {                              var v = (int)(long)reader.Value;                              if (v > 0) // TODO: remove this if with time                                  projectionVersion = v;                          }                          else                          {                              //TODO: better handle errors                              var v = (string) reader.Value;                              string[] parts = v.Split(':');                              if (parts.Length == 2)                              {                                  projectionVersion = Int32.Parse(parts[1]);                              }                              else                              {                                  projectionId = Int32.Parse(parts[0]);                                  projectionEpoch = Int32.Parse(parts[1]);                                  projectionVersion = Int32.Parse(parts[2]);                                  if (parts.Length >= 4)                                       projectionSystemVersion = Int32.Parse(parts[3]);                              }                          }                          break;                      case "$c":                      case "c":                      case "commitPosition":                          Check(reader.Read()' reader);                          commitPosition = (long) reader.Value;                          break;                      case "$p":                      case "p":                      case "preparePosition":                          Check(reader.Read()' reader);                          preparePosition = (long) reader.Value;                          break;                      case "$s":                      case "s":                      case "streams":                          Check(reader.Read()' reader);                          if (reader.TokenType == JsonToken.StartArray)                          {                              Check(reader.Read()' reader);                              Check(JsonToken.StartObject' reader);                              Check(reader.Read()' reader);                              Check(JsonToken.PropertyName' reader);                              catalogStream = (string)reader.Value;                              Check(reader.Read()' reader);                              catalogPosition = (int) (long) reader.Value;                              Check(reader.Read()' reader);                              Check(JsonToken.EndObject' reader);                                Check(reader.Read()' reader);                              if (reader.TokenType == JsonToken.StartObject)                              {                                  Check(reader.Read()' reader);                                  Check(JsonToken.PropertyName' reader);                                  dataStream = (string) reader.Value;                                  Check(reader.Read()' reader);                                  dataPosition = (int) (long) reader.Value;                                  Check(reader.Read()' reader);                                  Check(JsonToken.EndObject' reader);                                  Check(reader.Read()' reader);                              }                              Check(JsonToken.EndArray' reader);                          }                          else                          {                              Check(JsonToken.StartObject' reader);                              streams = new Dictionary<string' long>();                              while (true)                              {                                  Check(reader.Read()' reader);                                  if (reader.TokenType == JsonToken.EndObject)                                      break;                                  Check(JsonToken.PropertyName' reader);                                  var streamName = (string) reader.Value;                                  Check(reader.Read()' reader);                                  var position = (int) (long) reader.Value;                                  streams.Add(streamName' position);                              }                          }                          break;                      case "$ph":                          Check(reader.Read()' reader);                          projectionPhase = (int)(long) reader.Value;                          break;                      case "$m":                          Check(reader.Read()' reader);                          var readMode = (string) reader.Value;                          if (readMode != "bs")                              throw new ApplicationException("Unknown checkpoint tag mode: " + readMode);                          byStreamMode = true;                          break;                      default:                          if (extra == null)                              extra = new Dictionary<string' JToken>();                          Check(reader.Read()' reader);                          var jToken = JToken.ReadFrom(reader);                          extra.Add(name' jToken);                          break;                  }              }
Magic Number,EventStore.Projections.Core.Services.Processing,CheckpointTag,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CheckpointTag.cs,FromJson,The following statement contains a magic number: while (true)              {                  Check(reader.Read()' reader);                  if (reader.TokenType == JsonToken.EndObject)                      break;                  Check(JsonToken.PropertyName' reader);                  var name = (string) reader.Value;                  switch (name)                  {                      case "$cp":                          Check(reader.Read()' reader);                          var completed = (bool)reader.Value;                          commitPosition = completed ? Int64.MaxValue : Int64.MinValue;                          preparePosition = completed ? Int64.MaxValue : Int64.MinValue;                          break;                      case "$v":                      case "v":                          Check(reader.Read()' reader);                          if (reader.ValueType == typeof (long))                          {                              var v = (int)(long)reader.Value;                              if (v > 0) // TODO: remove this if with time                                  projectionVersion = v;                          }                          else                          {                              //TODO: better handle errors                              var v = (string) reader.Value;                              string[] parts = v.Split(':');                              if (parts.Length == 2)                              {                                  projectionVersion = Int32.Parse(parts[1]);                              }                              else                              {                                  projectionId = Int32.Parse(parts[0]);                                  projectionEpoch = Int32.Parse(parts[1]);                                  projectionVersion = Int32.Parse(parts[2]);                                  if (parts.Length >= 4)                                       projectionSystemVersion = Int32.Parse(parts[3]);                              }                          }                          break;                      case "$c":                      case "c":                      case "commitPosition":                          Check(reader.Read()' reader);                          commitPosition = (long) reader.Value;                          break;                      case "$p":                      case "p":                      case "preparePosition":                          Check(reader.Read()' reader);                          preparePosition = (long) reader.Value;                          break;                      case "$s":                      case "s":                      case "streams":                          Check(reader.Read()' reader);                          if (reader.TokenType == JsonToken.StartArray)                          {                              Check(reader.Read()' reader);                              Check(JsonToken.StartObject' reader);                              Check(reader.Read()' reader);                              Check(JsonToken.PropertyName' reader);                              catalogStream = (string)reader.Value;                              Check(reader.Read()' reader);                              catalogPosition = (int) (long) reader.Value;                              Check(reader.Read()' reader);                              Check(JsonToken.EndObject' reader);                                Check(reader.Read()' reader);                              if (reader.TokenType == JsonToken.StartObject)                              {                                  Check(reader.Read()' reader);                                  Check(JsonToken.PropertyName' reader);                                  dataStream = (string) reader.Value;                                  Check(reader.Read()' reader);                                  dataPosition = (int) (long) reader.Value;                                  Check(reader.Read()' reader);                                  Check(JsonToken.EndObject' reader);                                  Check(reader.Read()' reader);                              }                              Check(JsonToken.EndArray' reader);                          }                          else                          {                              Check(JsonToken.StartObject' reader);                              streams = new Dictionary<string' long>();                              while (true)                              {                                  Check(reader.Read()' reader);                                  if (reader.TokenType == JsonToken.EndObject)                                      break;                                  Check(JsonToken.PropertyName' reader);                                  var streamName = (string) reader.Value;                                  Check(reader.Read()' reader);                                  var position = (int) (long) reader.Value;                                  streams.Add(streamName' position);                              }                          }                          break;                      case "$ph":                          Check(reader.Read()' reader);                          projectionPhase = (int)(long) reader.Value;                          break;                      case "$m":                          Check(reader.Read()' reader);                          var readMode = (string) reader.Value;                          if (readMode != "bs")                              throw new ApplicationException("Unknown checkpoint tag mode: " + readMode);                          byStreamMode = true;                          break;                      default:                          if (extra == null)                              extra = new Dictionary<string' JToken>();                          Check(reader.Read()' reader);                          var jToken = JToken.ReadFrom(reader);                          extra.Add(name' jToken);                          break;                  }              }
Magic Number,EventStore.Projections.Core.Services.Processing,CheckpointTag,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CheckpointTag.cs,FromJson,The following statement contains a magic number: while (true)              {                  Check(reader.Read()' reader);                  if (reader.TokenType == JsonToken.EndObject)                      break;                  Check(JsonToken.PropertyName' reader);                  var name = (string) reader.Value;                  switch (name)                  {                      case "$cp":                          Check(reader.Read()' reader);                          var completed = (bool)reader.Value;                          commitPosition = completed ? Int64.MaxValue : Int64.MinValue;                          preparePosition = completed ? Int64.MaxValue : Int64.MinValue;                          break;                      case "$v":                      case "v":                          Check(reader.Read()' reader);                          if (reader.ValueType == typeof (long))                          {                              var v = (int)(long)reader.Value;                              if (v > 0) // TODO: remove this if with time                                  projectionVersion = v;                          }                          else                          {                              //TODO: better handle errors                              var v = (string) reader.Value;                              string[] parts = v.Split(':');                              if (parts.Length == 2)                              {                                  projectionVersion = Int32.Parse(parts[1]);                              }                              else                              {                                  projectionId = Int32.Parse(parts[0]);                                  projectionEpoch = Int32.Parse(parts[1]);                                  projectionVersion = Int32.Parse(parts[2]);                                  if (parts.Length >= 4)                                       projectionSystemVersion = Int32.Parse(parts[3]);                              }                          }                          break;                      case "$c":                      case "c":                      case "commitPosition":                          Check(reader.Read()' reader);                          commitPosition = (long) reader.Value;                          break;                      case "$p":                      case "p":                      case "preparePosition":                          Check(reader.Read()' reader);                          preparePosition = (long) reader.Value;                          break;                      case "$s":                      case "s":                      case "streams":                          Check(reader.Read()' reader);                          if (reader.TokenType == JsonToken.StartArray)                          {                              Check(reader.Read()' reader);                              Check(JsonToken.StartObject' reader);                              Check(reader.Read()' reader);                              Check(JsonToken.PropertyName' reader);                              catalogStream = (string)reader.Value;                              Check(reader.Read()' reader);                              catalogPosition = (int) (long) reader.Value;                              Check(reader.Read()' reader);                              Check(JsonToken.EndObject' reader);                                Check(reader.Read()' reader);                              if (reader.TokenType == JsonToken.StartObject)                              {                                  Check(reader.Read()' reader);                                  Check(JsonToken.PropertyName' reader);                                  dataStream = (string) reader.Value;                                  Check(reader.Read()' reader);                                  dataPosition = (int) (long) reader.Value;                                  Check(reader.Read()' reader);                                  Check(JsonToken.EndObject' reader);                                  Check(reader.Read()' reader);                              }                              Check(JsonToken.EndArray' reader);                          }                          else                          {                              Check(JsonToken.StartObject' reader);                              streams = new Dictionary<string' long>();                              while (true)                              {                                  Check(reader.Read()' reader);                                  if (reader.TokenType == JsonToken.EndObject)                                      break;                                  Check(JsonToken.PropertyName' reader);                                  var streamName = (string) reader.Value;                                  Check(reader.Read()' reader);                                  var position = (int) (long) reader.Value;                                  streams.Add(streamName' position);                              }                          }                          break;                      case "$ph":                          Check(reader.Read()' reader);                          projectionPhase = (int)(long) reader.Value;                          break;                      case "$m":                          Check(reader.Read()' reader);                          var readMode = (string) reader.Value;                          if (readMode != "bs")                              throw new ApplicationException("Unknown checkpoint tag mode: " + readMode);                          byStreamMode = true;                          break;                      default:                          if (extra == null)                              extra = new Dictionary<string' JToken>();                          Check(reader.Read()' reader);                          var jToken = JToken.ReadFrom(reader);                          extra.Add(name' jToken);                          break;                  }              }
Magic Number,EventStore.Projections.Core.Services.Processing,ReaderStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\ReaderStrategy.cs,Create,The following statement contains a magic number: if (sources.ReorderEventsOption)              {                  if (!string.IsNullOrEmpty(sources.CatalogStream))                      throw new InvalidOperationException("Event reordering cannot be used with stream catalogs");                  if (sources.AllStreams)                      throw new InvalidOperationException("Event reordering cannot be used with fromAll()");                  if (!(sources.HasStreams() && sources.Streams.Length > 1))                  {                      throw new InvalidOperationException(                          "Event reordering is only available in fromStreams([]) projections");                  }                  if (sources.ProcessingLagOption < 50)                      throw new InvalidOperationException("Event reordering requires processing lag at least of 50ms");              }
Magic Number,EventStore.Projections.Core.Services.Processing,WorkItem,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\WorkItem.cs,WorkItem,The following statement contains a magic number: _lastStage = 5;
Magic Number,EventStore.Projections.Core.Services.Processing,WorkItem,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\WorkItem.cs,Process,The following statement contains a magic number: if (_requiresRunning && !Queue.IsRunning)                  NextStage();              else              {                  switch (onStage)                  {                      case 0:                          RecordEventOrder();                          break;                      case 1:                          GetStatePartition();                          break;                      case 2:                          Load(_checkpointTag);                          break;                      case 3:                          ProcessEvent();                          break;                      case 4:                          WriteOutput();                          break;                      case 5:                          CompleteItem();                          break;                      default:                          throw new NotSupportedException();                  }              }
Magic Number,EventStore.Projections.Core.Services.Processing,WorkItem,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\WorkItem.cs,Process,The following statement contains a magic number: if (_requiresRunning && !Queue.IsRunning)                  NextStage();              else              {                  switch (onStage)                  {                      case 0:                          RecordEventOrder();                          break;                      case 1:                          GetStatePartition();                          break;                      case 2:                          Load(_checkpointTag);                          break;                      case 3:                          ProcessEvent();                          break;                      case 4:                          WriteOutput();                          break;                      case 5:                          CompleteItem();                          break;                      default:                          throw new NotSupportedException();                  }              }
Magic Number,EventStore.Projections.Core.Services.Processing,WorkItem,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\WorkItem.cs,Process,The following statement contains a magic number: if (_requiresRunning && !Queue.IsRunning)                  NextStage();              else              {                  switch (onStage)                  {                      case 0:                          RecordEventOrder();                          break;                      case 1:                          GetStatePartition();                          break;                      case 2:                          Load(_checkpointTag);                          break;                      case 3:                          ProcessEvent();                          break;                      case 4:                          WriteOutput();                          break;                      case 5:                          CompleteItem();                          break;                      default:                          throw new NotSupportedException();                  }              }
Magic Number,EventStore.Projections.Core.Services.Processing,WorkItem,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\WorkItem.cs,Process,The following statement contains a magic number: if (_requiresRunning && !Queue.IsRunning)                  NextStage();              else              {                  switch (onStage)                  {                      case 0:                          RecordEventOrder();                          break;                      case 1:                          GetStatePartition();                          break;                      case 2:                          Load(_checkpointTag);                          break;                      case 3:                          ProcessEvent();                          break;                      case 4:                          WriteOutput();                          break;                      case 5:                          CompleteItem();                          break;                      default:                          throw new NotSupportedException();                  }              }
Magic Number,EventStore.Projections.Core.Services.Processing,WorkLoadEstimationStrategy,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\WorkLoadEstimationStrategy.cs,EstimateWorkerLoad,The following statement contains a magic number: return workerState.UnmeasuredTasksScheduled*10 + workerState.ScheduledSize;
Magic Number,EventStore.Projections.Core.Standard,StreamCategoryExtractor,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Standard\StreamCategoryExtractor.cs,GetExtractor,The following statement contains a magic number: if (parts.Length != 2)                  throw new InvalidOperationException(                      "Cannot initialize categorization projection handler.  "                      + "Invalid configuration  "                      + ConfigurationFormatIs);
Magic Number,EventStore.Projections.Core.v8,CompiledScript,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\v8\CompiledScript.cs,CheckResult,The following statement contains a magic number: if (terminated)                  throw new Js1Exception(                      -2' "Failed to compile script. Script execution terminated.  Timeout expired. (1)");
Magic Number,EventStore.Projections.Core.v8,CompiledScript,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\v8\CompiledScript.cs,CheckResult,The following statement contains a magic number: if (errorCode != null)              {                  if (disposeScriptOnException)                  {                      Js1.DisposeScript(scriptHandle);                  }                  if (errorCode == 2)                      throw new Js1Exception(                          errorCode.Value' "Failed to compile script. Script execution terminated.  Timeout expired. (3)");                  throw new Js1Exception(errorCode.Value' errorMessage);              }
Magic Number,EventStore.Projections.Core.v8,PreludeScript,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\v8\PreludeScript.cs,CompileScript,The following statement contains a magic number: try              {                  var attempts = RetryLimit;                  var prelude = default(IntPtr);                  do                  {                      attempts--;                      try                      {                          ScheduleTerminateExecution();                          prelude = Js1.CompilePrelude(                              script' fileName' _loadModuleDelegate' _enterCancellableRegion' _exitCancellableRegion'                              _logDelegate);                          CancelTerminateExecution();                          CompiledScript.CheckResult(prelude' false' disposeScriptOnException: true);                      }                      catch (Js1Exception ex)                      {                          if (attempts > 0 && (ex.ErrorCode == -1 || ex.ErrorCode == -2))                          {                              // timeouts                              Thread.Sleep(2000);                          }                          else throw;                      }                  } while (prelude == default(IntPtr));                  return new CompiledScript(prelude);              }              catch (DllNotFoundException ex)              {                  Log.Info("{0}\n{1}\n{2}"'ex.ToString()' ex.Message' ex.StackTrace);                  throw new ApplicationException(                      "The projection subsystem failed to load a libjs1.so/js1.dll/... or one of its dependencies.  The original error message is: "                      + ex.Message' ex);              }
Magic Number,EventStore.Projections.Core.v8,PreludeScript,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\v8\PreludeScript.cs,CompileScript,The following statement contains a magic number: try              {                  var attempts = RetryLimit;                  var prelude = default(IntPtr);                  do                  {                      attempts--;                      try                      {                          ScheduleTerminateExecution();                          prelude = Js1.CompilePrelude(                              script' fileName' _loadModuleDelegate' _enterCancellableRegion' _exitCancellableRegion'                              _logDelegate);                          CancelTerminateExecution();                          CompiledScript.CheckResult(prelude' false' disposeScriptOnException: true);                      }                      catch (Js1Exception ex)                      {                          if (attempts > 0 && (ex.ErrorCode == -1 || ex.ErrorCode == -2))                          {                              // timeouts                              Thread.Sleep(2000);                          }                          else throw;                      }                  } while (prelude == default(IntPtr));                  return new CompiledScript(prelude);              }              catch (DllNotFoundException ex)              {                  Log.Info("{0}\n{1}\n{2}"'ex.ToString()' ex.Message' ex.StackTrace);                  throw new ApplicationException(                      "The projection subsystem failed to load a libjs1.so/js1.dll/... or one of its dependencies.  The original error message is: "                      + ex.Message' ex);              }
Missing Default,EventStore.Projections.Core.Services.Management,ManagedProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ManagedProjection.cs,FixupOldProjectionModes,The following switch statement is missing a default case: switch ((int) persistedState.Mode)              {                  case 2: // old continuous                      persistedState.Mode = ProjectionMode.Continuous;                      break;                  case 3: // old persistent                      persistedState.Mode = ProjectionMode.Continuous;                      persistedState.EmitEnabled = persistedState.EmitEnabled ?? true;                      break;              }
Missing Default,EventStore.Projections.Core.Services.Management,ProjectionManager,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Management\ProjectionManager.cs,OnProjectionsListReadCompleted,The following switch statement is missing a default case: switch (msg.Result)              {                  case ReadStreamResult.Success:                      foreach (var evnt in msg.Events)                      {                          var projectionId = evnt.Event.EventNumber;                          if (projectionId == 0)                              projectionId = Int32.MaxValue - 1;                          if(evnt.Event.EventType == ProjectionEventTypes.ProjectionsInitialized)                          {                              registeredProjections.Add(ProjectionEventTypes.ProjectionsInitialized' projectionId);                              continue;                          }                          var projectionName = Helper.UTF8NoBom.GetString(evnt.Event.Data);                          if (string.IsNullOrEmpty(projectionName)                              || _projections.ContainsKey(projectionName))                          {                              _logger.Warn("PROJECTIONS: The following projection: {0} has a duplicate registration event."' projectionName);                              continue;                          }                          if (evnt.Event.EventType == ProjectionEventTypes.ProjectionCreated)                          {                              if(registeredProjections.ContainsKey(projectionName))                              {                                  registeredProjections[projectionName] = projectionId;                                  _logger.Warn("PROJECTIONS: The following projection: {0} has a duplicate created event. Using projection Id {1}"' projectionName' projectionId);                                  continue;                              }                              registeredProjections.Add(projectionName' projectionId);                          }                          else if(evnt.Event.EventType == ProjectionEventTypes.ProjectionDeleted)                          {                              registeredProjections.Remove(projectionName);                          }                      }                      if (!msg.IsEndOfStream)                      {                          ReadProjectionsList(msg.EventStreamId' registeredProjections' completedAction' @from: msg.NextEventNumber);                          return;                      }                  break;                  case ReadStreamResult.StreamDeleted:                  case ReadStreamResult.Error:                  case ReadStreamResult.AccessDenied:                      _logger.Fatal("There was an error reading the projections list due to {0}. Projections could not be loaded."' msg.Result);                      return;              }
Missing Default,EventStore.Projections.Core.Services.Processing,DeliverEventOutItem,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\AllStreamsCatalogEventReader.cs,ReadCompleted,The following switch statement is missing a default case: switch (completed.Result)                  {                      case ReadStreamResult.NoStream:                      case ReadStreamResult.AccessDenied:                      case ReadStreamResult.StreamDeleted:                          _ready = true;                          Reader.MetaStreamReadCompleted();                          break;                      case ReadStreamResult.Success:                          _ready = true;                          if (completed.Events.Length > 0)                              _metadata = completed.Events[0].Event;                          Reader.MetaStreamReadCompleted();                          break;                  }
Missing Default,EventStore.Projections.Core.Services.Processing,EventSubscriptionBasedProjectionProcessingPhase,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\EventSubscriptionBasedProjectionProcessingPhase.cs,RecordEventOrder,The following switch statement is missing a default case: switch (_state)              {                  case PhaseState.Running:                      _checkpointManager.RecordEventOrder(                          resolvedEvent' orderCheckpointTag' completed);                      break;                  case PhaseState.Stopped:                      _logger.Error("Should not receive events in stopped state anymore");                      completed(); // allow collecting events for debugging                      break;              }
Missing Default,EventStore.Projections.Core.Services.Processing,CheckpointTag,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CheckpointTag.cs,WriteTo,The following switch statement is missing a default case: switch (Mode_)              {                  case Mode.Phase:                      jsonWriter.WritePropertyName("$cp");                      jsonWriter.WriteValue(Completed);                      break;                  case Mode.Position:                  case Mode.EventTypeIndex:                      jsonWriter.WritePropertyName("$c");                      jsonWriter.WriteValue(CommitPosition.GetValueOrDefault());                      jsonWriter.WritePropertyName("$p");                      jsonWriter.WriteValue(PreparePosition.GetValueOrDefault());                      if (Mode_ == Mode.EventTypeIndex)                          goto case Mode.MultiStream;                      break;                  case Mode.PreparePosition:                      jsonWriter.WritePropertyName("$p");                      jsonWriter.WriteValue(PreparePosition.GetValueOrDefault());                      break;                  case Mode.Stream:                  case Mode.MultiStream:                      jsonWriter.WritePropertyName("$s");                      jsonWriter.WriteStartObject();                      foreach (var stream in Streams)                      {                          jsonWriter.WritePropertyName(stream.Key);                          jsonWriter.WriteValue(stream.Value);                      }                      jsonWriter.WriteEndObject();                      break;                  case Mode.ByStream:                      jsonWriter.WritePropertyName("$m");                      jsonWriter.WriteValue("bs");                      jsonWriter.WritePropertyName("$c");                      jsonWriter.WriteValue(CommitPosition.GetValueOrDefault());                      jsonWriter.WritePropertyName("$s");                      jsonWriter.WriteStartArray();                      jsonWriter.WriteStartObject();                      jsonWriter.WritePropertyName(CatalogStream);                      jsonWriter.WriteValue(CatalogPosition);                      jsonWriter.WriteEndObject();                      if (!string.IsNullOrEmpty(DataStream))                      {                          jsonWriter.WriteStartObject();                          jsonWriter.WritePropertyName(DataStream);                          jsonWriter.WriteValue(DataPosition);                          jsonWriter.WriteEndObject();                      }                      jsonWriter.WriteEndArray();                      break;              }
Missing Default,EventStore.Projections.Core.Services.Processing,CoreProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjection.cs,GoToState,The following switch statement is missing a default case: switch (state)              {                  case State.Stopped:                  case State.Faulted:                  case State.PhaseCompleted:                      if (wasStarted && !wasStopped)                          _checkpointManager.Stopped();                      break;                  case State.Stopping:                  case State.FaultedStopping:                  case State.CompletingPhase:                      if (wasStarted && !wasStopping)                          _checkpointManager.Stopping();                      break;              }
Missing Default,EventStore.Projections.Core.Services.Processing,CoreProjection,C:\repos\EventStore_EventStore\src\EventStore.Projections.Core\Services\Processing\CoreProjection.cs,CheckpointCompleted,The following switch statement is missing a default case: switch (_state)              {                  case State.Stopping:                      GoToState(State.Stopped);                      break;                  case State.FaultedStopping:                      GoToState(State.Faulted);                      break;                  case State.CompletingPhase:                      GoToState(State.PhaseCompleted);                      break;              }
