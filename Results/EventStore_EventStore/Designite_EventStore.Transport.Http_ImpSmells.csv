Implementation smell,Namespace,Class,File,Method,Description
Complex Method,EventStore.Transport.Http,MediaType,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\MediaType.cs,TryParseInternal,Cyclomatic complexity of the method is 11
Complex Method,EventStore.Transport.Http.EntityManagement,HttpEntity,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntity.cs,BuildRequestedUrl,Cyclomatic complexity of the method is 10
Complex Method,EventStore.Transport.Http.EntityManagement,HttpEntityManager,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManager.cs,ForwardReply,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Transport.Http.Atom,EntryElement,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Atom\Feed.cs,WriteXml,Cyclomatic complexity of the method is 8
Long Parameter List,EventStore.Transport.Http.Codecs,Codec,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Codecs\Codec.cs,CreateCustom,The method has 5 parameters. Parameters: codec' contentType' encoding' hasEventIds' hasEventTypes
Long Parameter List,EventStore.Transport.Http.Codecs,CustomCodec,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Codecs\CustomCodec.cs,CustomCodec,The method has 5 parameters. Parameters: codec' contentType' encoding' hasEventIds' hasEventTypes
Long Parameter List,EventStore.Transport.Http,MediaType,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\MediaType.cs,MediaType,The method has 6 parameters. Parameters: range' type' subtype' priority' encodingSpecified' encoding
Long Parameter List,EventStore.Transport.Http.Client,HttpAsyncClient,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Client\HttpAsyncClient.cs,Post,The method has 5 parameters. Parameters: url' body' contentType' onSuccess' onException
Long Parameter List,EventStore.Transport.Http.Client,HttpAsyncClient,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Client\HttpAsyncClient.cs,Post,The method has 6 parameters. Parameters: url' body' contentType' headers' onSuccess' onException
Long Parameter List,EventStore.Transport.Http.Client,HttpAsyncClient,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Client\HttpAsyncClient.cs,Put,The method has 5 parameters. Parameters: url' body' contentType' onSuccess' onException
Long Parameter List,EventStore.Transport.Http.Client,HttpAsyncClient,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Client\HttpAsyncClient.cs,Receive,The method has 5 parameters. Parameters: method' url' headers' onSuccess' onException
Long Parameter List,EventStore.Transport.Http.Client,HttpAsyncClient,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Client\HttpAsyncClient.cs,Send,The method has 7 parameters. Parameters: method' url' body' contentType' headers' onSuccess' onException
Long Parameter List,EventStore.Transport.Http.Client,IHttpClient,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Client\IHttpClient.cs,Post,The method has 5 parameters. Parameters: url' request' contentType' onSuccess' onException
Long Parameter List,EventStore.Transport.Http.Client,IHttpClient,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Client\IHttpClient.cs,Put,The method has 5 parameters. Parameters: url' request' contentType' onSuccess' onException
Long Parameter List,EventStore.Transport.Http.EntityManagement,HttpEntity,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntity.cs,HttpEntity,The method has 6 parameters. Parameters: request' response' user' logHttpRequests' advertiseAsAddress' advertiseAsPort
Long Parameter List,EventStore.Transport.Http.EntityManagement,HttpEntityManager,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManager.cs,HttpEntityManager,The method has 6 parameters. Parameters: httpEntity' allowedMethods' onRequestSatisfied' requestCodec' responseCodec' logHttpRequests
Long Parameter List,EventStore.Transport.Http.EntityManagement,HttpEntityManager,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManager.cs,BeginReply,The method has 5 parameters. Parameters: code' description' contentType' encoding' headers
Long Parameter List,EventStore.Transport.Http.EntityManagement,HttpEntityManager,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManager.cs,Reply,The method has 7 parameters. Parameters: response' code' description' contentType' encoding' headers' onError
Long Parameter List,EventStore.Transport.Http.EntityManagement,HttpEntityManagerExtensions,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManagerExtensions.cs,ReplyStatus,The method has 5 parameters. Parameters: self' code' description' onError' headers
Long Parameter List,EventStore.Transport.Http.EntityManagement,HttpEntityManagerExtensions,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManagerExtensions.cs,ReplyContent,The method has 7 parameters. Parameters: self' response' code' description' type' headers' onError
Long Parameter List,EventStore.Transport.Http.EntityManagement,HttpEntityManagerExtensions,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManagerExtensions.cs,ReplyTextContent,The method has 7 parameters. Parameters: self' response' code' description' type' headers' onError
Long Identifier,EventStore.Transport.Http.EntityManagement,HttpEntityManager,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManager.cs,,The length of the parameter SupportedCompressionAlgorithms is 30.
Long Statement,EventStore.Transport.Http.EntityManagement,HttpEntityManager,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManager.cs,SetRequiredHeaders,The length of the statement  "                HttpEntity.Response.AddHeader("Access-Control-Allow-Headers"' "Content-Type' X-Requested-With' X-Forwarded-Host' X-Forwarded-Prefix' X-PINGOTHER' Authorization' ES-LongPoll' ES-ExpectedVersion' ES-EventId' ES-EventType' ES-RequiresMaster' ES-HardDelete' ES-ResolveLinkTos"); " is 274.
Long Statement,EventStore.Transport.Http.EntityManagement,HttpEntityManager,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManager.cs,CompressResponse,The length of the statement  "            if (string.IsNullOrEmpty(compressionAlgorithm) || !SupportedCompressionAlgorithms.Contains(compressionAlgorithm)) return response; " is 130.
Long Statement,EventStore.Transport.Http.EntityManagement,HttpEntityManager,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManager.cs,CompressResponse,The length of the statement  "            var useBufferManager = 10L * response.Length <= 9L * _compressionBufferManager.ChunkSize; //in some rare cases' compression can result in larger outputs. Added a 10% overhead just to be sure. " is 191.
Long Statement,EventStore.Transport.Http.EntityManagement,HttpEntityManager,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManager.cs,CompressResponse,The length of the statement  "                outputStream = new MemoryStream(bufferManagerArraySegment.Array'bufferManagerArraySegment.Offset'bufferManagerArraySegment.Count); " is 130.
Long Statement,EventStore.Transport.Http.EntityManagement,HttpEntityManager,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManager.cs,CompressResponse,The length of the statement  "                //since Gzip/Deflate compression ratio doesn't go below 20% in most cases' we can initialize the array to a quarter of the original response length " is 147.
Long Statement,EventStore.Transport.Http.EntityManagement,HttpEntityManagerExtensions,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManagerExtensions.cs,ReplyTextContent,The length of the statement  "            self.Reply(Helper.UTF8NoBom.GetBytes(response ?? string.Empty)' code' description' type' Helper.UTF8NoBom' headers' onError); " is 125.
Long Statement,EventStore.Transport.Http.Atom,FeedElement,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Atom\Feed.cs,WriteXml,The length of the statement  "                                                        + "rel attribute value of 'self'. This is the preferred URI for retrieving Atom Feed Documents representing this Atom feed."); " is 126.
Long Statement,EventStore.Transport.Http.Atom,LinkElement,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Atom\Feed.cs,WriteXml,The length of the statement  "                ThrowHelper.ThrowSpecificationViolation("atom:link elements MUST have an href attribute' whose value MUST be a URI reference"); " is 127.
Long Statement,EventStore.Transport.Http.Server,HttpAsyncServer,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Server\HttpAsyncServer.cs,TryAddAcl,The length of the statement  "            var args = string.Format("http add urlacl url={0} user=\"{1}\\{2}\""' address' Environment.UserDomainName' Environment.UserName); " is 129.
Complex Conditional,EventStore.Transport.Http.EntityManagement,HttpEntityManagerExtensions,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManagerExtensions.cs,ReadTextRequestAsync,The conditional expression  "bytes.Length >= 3 && bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF"  is complex.
Empty Catch Block,EventStore.Transport.Http.EntityManagement,HttpEntityManager,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManager.cs,SetResponseCode,The method has an empty catch block.
Empty Catch Block,EventStore.Transport.Http.EntityManagement,HttpEntityManager,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManager.cs,SetResponseDescription,The method has an empty catch block.
Empty Catch Block,EventStore.Transport.Http.EntityManagement,HttpEntityManager,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManager.cs,SetContentType,The method has an empty catch block.
Empty Catch Block,EventStore.Transport.Http.EntityManagement,HttpEntityManager,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManager.cs,SetResponseLength,The method has an empty catch block.
Empty Catch Block,EventStore.Transport.Http.EntityManagement,HttpEntityManager,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManager.cs,SetRequiredHeaders,The method has an empty catch block.
Empty Catch Block,EventStore.Transport.Http.EntityManagement,HttpEntityManager,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManager.cs,SetAdditionalHeaders,The method has an empty catch block.
Empty Catch Block,EventStore.Transport.Http.Server,HttpAsyncServer,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Server\HttpAsyncServer.cs,Shutdown,The method has an empty catch block.
Empty Catch Block,EventStore.Transport.Http.Server,HttpAsyncServer,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Server\HttpAsyncServer.cs,ContextAcquired,The method has an empty catch block.
Empty Catch Block,EventStore.Transport.Http.Server,HttpAsyncServer,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Server\HttpAsyncServer.cs,ContextAcquired,The method has an empty catch block.
Empty Catch Block,EventStore.Transport.Http.Server,HttpAsyncServer,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Server\HttpAsyncServer.cs,ContextAcquired,The method has an empty catch block.
Empty Catch Block,EventStore.Transport.Http.Server,HttpAsyncServer,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Server\HttpAsyncServer.cs,ContextAcquired,The method has an empty catch block.
Empty Catch Block,EventStore.Transport.Http.Server,HttpAsyncServer,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Server\HttpAsyncServer.cs,ContextAcquired,The method has an empty catch block.
Empty Catch Block,EventStore.Transport.Http.Server,HttpAsyncServer,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Server\HttpAsyncServer.cs,ContextAcquired,The method has an empty catch block.
Empty Catch Block,EventStore.Transport.Http.Server,HttpAsyncServer,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Server\HttpAsyncServer.cs,ContextAcquired,The method has an empty catch block.
Empty Catch Block,EventStore.Transport.Http.Server,HttpAsyncServer,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Server\HttpAsyncServer.cs,ContextAcquired,The method has an empty catch block.
Empty Catch Block,EventStore.Transport.Http.Server,HttpAsyncServer,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Server\HttpAsyncServer.cs,ContextAcquired,The method has an empty catch block.
Empty Catch Block,EventStore.Transport.Http.Server,HttpAsyncServer,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Server\HttpAsyncServer.cs,ContextAcquired,The method has an empty catch block.
Magic Number,EventStore.Transport.Http.Codecs,CustomCodec,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Codecs\CustomCodec.cs,CustomCodec,The following statement contains a magic number: var parts = contentType.Split(new[] {'/'}' 2);
Magic Number,EventStore.Transport.Http.Codecs,CustomCodec,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Codecs\CustomCodec.cs,CustomCodec,The following statement contains a magic number: if (parts.Length != 2)                  throw new ArgumentException("contentType");
Magic Number,EventStore.Transport.Http,MediaType,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\MediaType.cs,TryParseInternal,The following statement contains a magic number: var typeParts = mediaRange.Split(new[] { '/' }' 2);
Magic Number,EventStore.Transport.Http,MediaType,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\MediaType.cs,TryParseInternal,The following statement contains a magic number: if (typeParts.Length != 2)              {                  if (throwExceptions)                      throw new ArgumentException("componentText");                  return false;              }
Magic Number,EventStore.Transport.Http,MediaType,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\MediaType.cs,TryParseInternal,The following statement contains a magic number: if (parts.Length > 1)              {                  for (var i = 1; i < parts.Length; i++)                  {                      var part = parts[i].ToLowerInvariant().Trim();                      if (part.StartsWith("q="))                      {                          var quality = part.Substring(2);                          float q;                          if (float.TryParse(quality' NumberStyles.Float' CultureInfo.InvariantCulture' out q))                          {                              priority = q;                          }                      }                       else if (part.StartsWith("charset="))                      {                          encodingSpecified = true;                          try                          {                              var encName = part.Substring(8);                              encoding = encName.Equals("utf-8"' StringComparison.OrdinalIgnoreCase)                                                 ? Helper.UTF8NoBom                                                 : Encoding.GetEncoding(encName);                          }                          catch (ArgumentException)                          {                              encoding = null;                          }                      }                  }              }
Magic Number,EventStore.Transport.Http,MediaType,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\MediaType.cs,TryParseInternal,The following statement contains a magic number: if (parts.Length > 1)              {                  for (var i = 1; i < parts.Length; i++)                  {                      var part = parts[i].ToLowerInvariant().Trim();                      if (part.StartsWith("q="))                      {                          var quality = part.Substring(2);                          float q;                          if (float.TryParse(quality' NumberStyles.Float' CultureInfo.InvariantCulture' out q))                          {                              priority = q;                          }                      }                       else if (part.StartsWith("charset="))                      {                          encodingSpecified = true;                          try                          {                              var encName = part.Substring(8);                              encoding = encName.Equals("utf-8"' StringComparison.OrdinalIgnoreCase)                                                 ? Helper.UTF8NoBom                                                 : Encoding.GetEncoding(encName);                          }                          catch (ArgumentException)                          {                              encoding = null;                          }                      }                  }              }
Magic Number,EventStore.Transport.Http.Client,HttpAsyncClient,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Client\HttpAsyncClient.cs,HttpAsyncClient,The following statement contains a magic number: ServicePointManager.MaxServicePointIdleTime = 10000;
Magic Number,EventStore.Transport.Http.Client,HttpAsyncClient,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Client\HttpAsyncClient.cs,HttpAsyncClient,The following statement contains a magic number: ServicePointManager.DefaultConnectionLimit = 500;
Magic Number,EventStore.Transport.Http.EntityManagement,HttpEntityManager,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManager.cs,CompressResponse,The following statement contains a magic number: if (useBufferManager)              {                  //use buffer manager to handle responses less than ~50kb long to prevent excessive memory allocations                  bufferManagerArraySegment = _compressionBufferManager.CheckOut();                  outputStream = new MemoryStream(bufferManagerArraySegment.Array'bufferManagerArraySegment.Offset'bufferManagerArraySegment.Count);                  outputStream.SetLength(0);              }              else              {                  //since Gzip/Deflate compression ratio doesn't go below 20% in most cases' we can initialize the array to a quarter of the original response length                  //this also limits memory stream growth operations to at most 2.                  outputStream = new MemoryStream((response.Length+4-1)/4);              }
Magic Number,EventStore.Transport.Http.EntityManagement,HttpEntityManager,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManager.cs,CompressResponse,The following statement contains a magic number: if (useBufferManager)              {                  //use buffer manager to handle responses less than ~50kb long to prevent excessive memory allocations                  bufferManagerArraySegment = _compressionBufferManager.CheckOut();                  outputStream = new MemoryStream(bufferManagerArraySegment.Array'bufferManagerArraySegment.Offset'bufferManagerArraySegment.Count);                  outputStream.SetLength(0);              }              else              {                  //since Gzip/Deflate compression ratio doesn't go below 20% in most cases' we can initialize the array to a quarter of the original response length                  //this also limits memory stream growth operations to at most 2.                  outputStream = new MemoryStream((response.Length+4-1)/4);              }
Magic Number,EventStore.Transport.Http.EntityManagement,HttpEntityManagerExtensions,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManagerExtensions.cs,ReadTextRequestAsync,The following statement contains a magic number: self.ReadRequestAsync(                  (manager' bytes) =>                  {                      int offset = 0;                        // check for UTF-8 BOM (0xEF' 0xBB' 0xBF) and skip it safely' if any                      if (bytes.Length >= 3 && bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF)                          offset = 3;                        onSuccess(manager' Helper.UTF8NoBom.GetString(bytes' offset' bytes.Length - offset));                  }'                   onError);
Magic Number,EventStore.Transport.Http.EntityManagement,HttpEntityManagerExtensions,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManagerExtensions.cs,ReadTextRequestAsync,The following statement contains a magic number: self.ReadRequestAsync(                  (manager' bytes) =>                  {                      int offset = 0;                        // check for UTF-8 BOM (0xEF' 0xBB' 0xBF) and skip it safely' if any                      if (bytes.Length >= 3 && bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF)                          offset = 3;                        onSuccess(manager' Helper.UTF8NoBom.GetString(bytes' offset' bytes.Length - offset));                  }'                   onError);
Magic Number,EventStore.Transport.Http.EntityManagement,HttpEntityManagerExtensions,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\EntityManagement\HttpEntityManagerExtensions.cs,ReadTextRequestAsync,The following statement contains a magic number: self.ReadRequestAsync(                  (manager' bytes) =>                  {                      int offset = 0;                        // check for UTF-8 BOM (0xEF' 0xBB' 0xBF) and skip it safely' if any                      if (bytes.Length >= 3 && bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF)                          offset = 3;                        onSuccess(manager' Helper.UTF8NoBom.GetString(bytes' offset' bytes.Length - offset));                  }'                   onError);
Magic Number,EventStore.Transport.Http.Server,HttpAsyncServer,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Server\HttpAsyncServer.cs,TryStart,The following statement contains a magic number: try              {                  Logger.Info("Starting HTTP server on [{0}]..."' string.Join("'"' _listener.Prefixes));                  try                  {                      _listener.Start();                  }                  catch(HttpListenerException ex)                  {                      if (ex.ErrorCode == 5) //Access error don't see any better way of getting it                      {                          if (_listenPrefixes.Length > 0)                              TryAddAcl(_listenPrefixes[0]);                          CreateListener(_listenPrefixes);                          Logger.Info("Retrying HTTP server on [{0}]..."' string.Join("'"' _listener.Prefixes));                          _listener.Start();                      }                  }                    _listener.BeginGetContext(ContextAcquired' null);                    Logger.Info("HTTP server is up and listening on [{0}]"' string.Join("'"' _listener.Prefixes));                    return true;              }              catch (Exception e)              {                  Logger.FatalException(e' "Failed to start http server");                  return false;              }
Magic Number,EventStore.Transport.Http.Server,HttpAsyncServer,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Server\HttpAsyncServer.cs,Shutdown,The following statement contains a magic number: try              {                  var counter = 10;                  while (_listener.IsListening && counter-- > 0)                  {                      _listener.Abort();                      _listener.Stop();                      _listener.Close();                      if (_listener.IsListening)                          System.Threading.Thread.Sleep(50);                  }              }              catch (ObjectDisposedException)              {                  // that's ok              }              catch (Exception e)              {                  Logger.ErrorException(e' "Error while shutting down http server");              }
Magic Number,EventStore.Transport.Http.Server,HttpAsyncServer,C:\repos\EventStore_EventStore\src\EventStore.Transport.Http\Server\HttpAsyncServer.cs,Shutdown,The following statement contains a magic number: try              {                  var counter = 10;                  while (_listener.IsListening && counter-- > 0)                  {                      _listener.Abort();                      _listener.Stop();                      _listener.Close();                      if (_listener.IsListening)                          System.Threading.Thread.Sleep(50);                  }              }              catch (ObjectDisposedException)              {                  // that's ok              }              catch (Exception e)              {                  Logger.ErrorException(e' "Error while shutting down http server");              }
