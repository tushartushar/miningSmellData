Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,EventStore.Common.Log,NLogValueFormatter,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.Common\Log\NLogValueFormatter.cs,FormatValue,The method has 5 parameters. Parameters: value' format' captureType' formatProvider' builder
Long Identifier,EventStore.Common.Log,LogManager,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.Common\Log\LogManager.cs,Init,The length of the parameter potentialNLogConfigurationFilePaths is 35.
Empty Catch Block,EventStore.Common.Utils,Helper,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.Common\Utils\Helper.cs,EatException,The method has an empty catch block.
Magic Number,EventStore.Common.Log,LogManager,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.Common\Log\LogManager.cs,Init,The following statement contains a magic number: AppDomain.CurrentDomain.UnhandledException += (s' e) => {  				var exc = e.ExceptionObject as Exception;  				if (exc != null)  					GlobalLogger.FatalException(exc' "Global Unhandled Exception occurred.");  				else  					GlobalLogger.Fatal("Global Unhandled Exception object: {e}."' e.ExceptionObject);  				GlobalLogger.Flush(TimeSpan.FromMilliseconds(500));  			};
Magic Number,EventStore.Common.Log,NLogger,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.Common\Log\NLogger.cs,FlushLog,The following statement contains a magic number: countdown.Wait(maxTimeToWait ?? TimeSpan.FromMilliseconds(500));
Magic Number,EventStore.Common.Options,EventStoreOptions,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.Common\Options\EventStoreOptions.cs,ResolvePrecedence,The following statement contains a magic number: var options = optionSources.OrderBy(x =>  				x.Source == "Command Line" ? 0 :  				x.Source == "Environment Variable" ? 1 :  				x.Source == "Config File" ? 2 : 3);
Magic Number,EventStore.Common.Options,EventStoreOptions,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.Common\Options\EventStoreOptions.cs,ResolvePrecedence,The following statement contains a magic number: var options = optionSources.OrderBy(x =>  				x.Source == "Command Line" ? 0 :  				x.Source == "Environment Variable" ? 1 :  				x.Source == "Config File" ? 2 : 3);
Magic Number,EventStore.Common.Utils,BytesFormatter,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.Common\Utils\BytesFormatter.cs,FormatLong,The following statement contains a magic number: const int scale = 1024;
Magic Number,EventStore.Common.Utils,BytesFormatter,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.Common\Utils\BytesFormatter.cs,FormatSpeed,The following statement contains a magic number: const int scale = 1024;
Magic Number,EventStore.Common.Utils,Helper,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.Common\Utils\Helper.cs,FormatBinaryDump,The following statement contains a magic number: sb.AppendFormat("{0:000000}:"' row * 16);
Magic Number,EventStore.Common.Utils,Helper,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.Common\Utils\Helper.cs,FormatBinaryDump,The following statement contains a magic number: i < 16
Magic Number,EventStore.Common.Utils,Helper,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.Common\Utils\Helper.cs,FormatBinaryDump,The following statement contains a magic number: cur -= 16;
Magic Number,EventStore.Common.Utils,Helper,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.Common\Utils\Helper.cs,FormatBinaryDump,The following statement contains a magic number: i < 16
Missing Default,EventStore.Common.Log,NLogValueFormatter,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.Common\Log\NLogValueFormatter.cs,FormatValue,The following switch statement is missing a default case: switch (Convert.GetTypeCode(value)) {  					case TypeCode.String: {  						builder.Append((string)value);  						return true;  					}  					case TypeCode.Char: {  						builder.Append((char)value);  						return true;  					}  					case TypeCode.Empty:  						return true; // null becomes empty string  				}
