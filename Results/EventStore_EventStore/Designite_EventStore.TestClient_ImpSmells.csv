Implementation smell,Namespace,Class,File,Method,Description
Long Method,EventStore.TestClient.Commands,RunTestScenariosProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenariosProcessor.cs,Execute,The method has 167 lines of code.
Long Method,EventStore.TestClient.Commands,TransactionWriteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\TransactionWriteProcessor.cs,Execute,The method has 125 lines of code.
Long Method,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,WriteFlood,The method has 143 lines of code.
Long Method,EventStore.TestClient.Commands,WriteLongTermProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteLongTermProcessor.cs,Flood,The method has 126 lines of code.
Complex Method,EventStore.TestClient.Commands,ReadAllProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadAllProcessor.cs,Execute,Cyclomatic complexity of the method is 9
Complex Method,EventStore.TestClient.Commands,RunTestScenariosProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenariosProcessor.cs,Execute,Cyclomatic complexity of the method is 10
Complex Method,EventStore.TestClient.Commands.DvuBasic,DvuBasicProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\DvuBasicProcessor.cs,Execute,Cyclomatic complexity of the method is 9
Complex Method,EventStore.TestClient.Commands.DvuBasic,DvuBasicProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\DvuBasicProcessor.cs,Verify,Cyclomatic complexity of the method is 8
Complex Method,EventStore.TestClient.Commands.RunTestScenarios,MassProjectionsScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\MassProjectionsScenario.cs,RunInternal,Cyclomatic complexity of the method is 9
Complex Method,EventStore.TestClient.Commands.RunTestScenarios,ProjectionsKillScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjectionsKillScenario.cs,RunInternal,Cyclomatic complexity of the method is 8
Complex Method,EventStore.TestClient.Commands.RunTestScenarios,ProjForeachForcedCommonNameScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjForeachForcedCommonNameScenario.cs,InnerRun,Cyclomatic complexity of the method is 15
Long Parameter List,EventStore.TestClient,Client,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Client.cs,CreateTcpConnection,The method has 6 parameters. Parameters: context' handlePackage' connectionEstablished' connectionClosed' failContextOnError' tcpEndPoint
Long Parameter List,EventStore.TestClient.Commands,ReadFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadFloodProcessor.cs,ReadFlood,The method has 7 parameters. Parameters: context' eventStreamId' clientsCnt' requestsCnt' resolveLinkTos' requireMaster' monitor
Long Parameter List,EventStore.TestClient.Commands,WriteFloodClientApiProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodClientApiProcessor.cs,WriteFlood,The method has 5 parameters. Parameters: context' clientsCnt' requestsCnt' streamsCnt' size
Long Parameter List,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,WriteFlood,The method has 7 parameters. Parameters: context' clientsCnt' requestsCnt' streamsCnt' size' batchSize' monitor
Long Parameter List,EventStore.TestClient.Commands,WriteLongTermProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteLongTermProcessor.cs,Flood,The method has 6 parameters. Parameters: context' eventStreamId' clientsCnt' minPerSecond' maxPerSecond' runTimeMinutes
Long Parameter List,EventStore.TestClient.Commands.DvuBasic,DvuBasicProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\DvuBasicProcessor.cs,Run,The method has 5 parameters. Parameters: context' writers' readers' events' streams
Long Parameter List,EventStore.TestClient.Commands.DvuBasic,DvuBasicProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\DvuBasicProcessor.cs,Write,The method has 5 parameters. Parameters: status' writerIdx' context' requests' finish
Long Parameter List,EventStore.TestClient.Commands.DvuBasic,Status,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\Status.cs,ReportWritesProgress,The method has 9 parameters. Parameters: threadId' sent' prepareTimeouts' commitTimeouts' forwardTimeouts' wrongExpctdVersions' streamsDeleted' fails' requests
Long Parameter List,EventStore.TestClient.Commands.RunTestScenarios,LoopingProjectionKillScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingProjectionKillScenario.cs,LoopingProjectionKillScenario,The method has 9 parameters. Parameters: directSendOverTcp' maxConcurrentRequests' connections' streams' eventsPerStream' streamDeleteStep' executionPeriod' dbParentPath' customNode
Long Parameter List,EventStore.TestClient.Commands.RunTestScenarios,LoopingProjTranWriteScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingProjTranWriteScenario.cs,LoopingProjTranWriteScenario,The method has 9 parameters. Parameters: directSendOverTcp' maxConcurrentRequests' connections' streams' eventsPerStream' streamDeleteStep' executionPeriod' dbParentPath' customNode
Long Parameter List,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,LoopingScenario,The method has 9 parameters. Parameters: directSendOverTcp' maxConcurrentRequests' connections' streams' eventsPerStream' streamDeleteStep' executionPeriod' dbParentPath' customNodeConnection
Long Parameter List,EventStore.TestClient.Commands.RunTestScenarios,MassProjectionsScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\MassProjectionsScenario.cs,MassProjectionsScenario,The method has 8 parameters. Parameters: directSendOverTcp' maxConcurrentRequests' threads' streams' eventsPerStream' streamDeleteStep' dbParentPath' customNode
Long Parameter List,EventStore.TestClient.Commands.RunTestScenarios,ProjectionsKillScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjectionsKillScenario.cs,ProjectionsKillScenario,The method has 8 parameters. Parameters: directSendOverTcp' maxConcurrentRequests' connections' streams' eventsPerStream' streamDeleteStep' dbParentPath' customNode
Long Parameter List,EventStore.TestClient.Commands.RunTestScenarios,ProjectionsScenarioBase,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjectionsScenarioBase.cs,ProjectionsScenarioBase,The method has 8 parameters. Parameters: directSendOverTcp' maxConcurrentRequests' connections' streams' eventsPerStream' streamDeleteStep' dbParentPath' customNode
Long Parameter List,EventStore.TestClient.Commands.RunTestScenarios,ProjectionWrongTagCheck,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjectionWrongTagCheck.cs,ProjectionWrongTagCheck,The method has 9 parameters. Parameters: directSendOverTcp' maxConcurrentRequests' connections' streams' eventsPerStream' streamDeleteStep' executionPeriod' dbParentPath' customNode
Long Parameter List,EventStore.TestClient.Commands.RunTestScenarios,ProjForeachForcedCommonNameScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjForeachForcedCommonNameScenario.cs,ProjForeachForcedCommonNameScenario,The method has 9 parameters. Parameters: directSendOverTcp' maxConcurrentRequests' connections' streams' eventsPerStream' streamDeleteStep' executionPeriod' dbParentPath' customNode
Long Parameter List,EventStore.TestClient.Commands.RunTestScenarios,ProjForeachForcedCommonNameNoRestartScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjForeachForcedCommonNameScenario.cs,ProjForeachForcedCommonNameNoRestartScenario,The method has 9 parameters. Parameters: directSendOverTcp' maxConcurrentRequests' connections' streams' eventsPerStream' streamDeleteStep' executionPeriod' dbParentPath' customNode
Long Parameter List,EventStore.TestClient.Commands.RunTestScenarios,ScenarioBase,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ScenarioBase.cs,ScenarioBase,The method has 8 parameters. Parameters: directSendOverTcp' maxConcurrentRequests' connections' streams' eventsPerStream' streamDeleteStep' dbParentPath' customNodeConnection
Long Statement,EventStore.TestClient,PortsHelper,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\PortsHelper.cs,GetAvailablePort,The length of the statement  "//                        string.Format("HttpListener couldn't listen on port {0}' but TcpListener was OK.\nError: {1}"' port' exc)' exc); " is 138.
Long Statement,EventStore.TestClient.Commands,TcpSanitazationCheckProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\TcpSanitazationCheckProcessor.cs,Execute,The length of the statement  "				"Sent {packages} packages. {commandsToCheck} invalid dtos' {barFormattedPackages} bar formatted packages. Got {badRequests} BadRequests. Success"' " is 146.
Long Statement,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,WriteFlood,The length of the statement  "								"\nDONE TOTAL {writes} WRITES IN {elapsed} ({rate:0.0}/s) [S:{success}' F:{failures} (WEV:{wrongExpectedVersion}' P:{prepareTimeout}' C:{commitTimeout}' F:{forwardTimeout}' D:{streamDeleted})]."' " is 195.
Long Statement,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,WriteFlood,The length of the statement  "				"Completed. Successes: {success}' failures: {failures} (WRONG VERSION: {wrongExpectedVersion}' P: {prepareTimeout}' C: {commitTimeout}' F: {forwardTimeout}' D: {streamDeleted})"' " is 178.
Long Statement,EventStore.TestClient.Commands.RunTestScenarios,LoopingProjectionKillScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingProjectionKillScenario.cs,RunInternal,The length of the statement  "					"=================== Start run #{iteration}' elapsed {elapsed} of {executionPeriod} minutes' {type} =================== "' " is 122.
Long Statement,EventStore.TestClient.Commands.RunTestScenarios,LoopingProjTranWriteScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingProjTranWriteScenario.cs,RunInternal,The length of the statement  "					"=================== Start run #{runIndex}' elapsed {elapsed} of {executionPeriod} minutes' {type} =================== "' " is 121.
Long Statement,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,RunInternal,The length of the statement  "					"=================== Start run #{runIndex}' elapsed {elapsed} of {executionPeriod} minutes' {type} =================== "' " is 121.
Long Statement,EventStore.TestClient.Commands.RunTestScenarios,MassProjectionsScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\MassProjectionsScenario.cs,StartOrStopProjection,The length of the statement  "							"Failed to StartOrStopProjection (enable:{enable}; isRunning:{isRunning}) projection {projection}' retry #{retry}' wait {waitTime}ms"' " is 134.
Long Statement,EventStore.TestClient.Commands.RunTestScenarios,ProjectionWrongTagCheck,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjectionWrongTagCheck.cs,RunInternal,The length of the statement  "					"=================== Start run #{iteration}' elapsed {elapsed} of {executionPeriod} minutes' {type} =================== "' " is 122.
Long Statement,EventStore.TestClient.Commands.RunTestScenarios,ProjForeachForcedCommonNameScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjForeachForcedCommonNameScenario.cs,RunInternal,The length of the statement  "					"=================== Start run #{iteration}' elapsed {elapsed} of {executionPeriod} minutes' {type} =================== "' " is 122.
Complex Conditional,EventStore.TestClient,PortsHelper,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\PortsHelper.cs,InitPorts,The conditional expression  "read != 3 || buffer[0] != 1 || buffer[1] != 2 || buffer[2] != 3"  is complex.
Complex Conditional,EventStore.TestClient.Commands,RunTestScenariosProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenariosProcessor.cs,Execute,The conditional expression  "atoms.Length == 3  					    && IPAddress.TryParse(atoms[0]' out ip)  					    && int.TryParse(atoms[1]' out tcpPort)  					    && int.TryParse(atoms[2]' out httpPort)"  is complex.
Magic Number,EventStore.TestClient,Client,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Client.cs,Run,The following statement contains a magic number: new Thread(() => {  				Thread.Sleep(100);  				Console.Write(">>> ");    				string line;  				while ((line = Console.ReadLine()) != null) {  					try {  						if (string.IsNullOrWhiteSpace(line))  							continue;    						try {  							var args = ParseCommandLine(line);  							Execute(args);  						} catch (Exception exc) {  							Log.ErrorException(exc' "Error during executing command.");  						}  					} finally {  						Thread.Sleep(100);  						Console.Write(">>> ");  					}  				}  			}) {IsBackground = true' Name = "Client Main Loop Thread"}.Start();
Magic Number,EventStore.TestClient,Client,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Client.cs,Run,The following statement contains a magic number: new Thread(() => {  				Thread.Sleep(100);  				Console.Write(">>> ");    				string line;  				while ((line = Console.ReadLine()) != null) {  					try {  						if (string.IsNullOrWhiteSpace(line))  							continue;    						try {  							var args = ParseCommandLine(line);  							Execute(args);  						} catch (Exception exc) {  							Log.ErrorException(exc' "Error during executing command.");  						}  					} finally {  						Thread.Sleep(100);  						Console.Write(">>> ");  					}  				}  			}) {IsBackground = true' Name = "Client Main Loop Thread"}.Start();
Magic Number,EventStore.TestClient,Client,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Client.cs,CreateTcpConnection,The following statement contains a magic number: Action<ITcpConnection> onConnectionEstablished = conn => {  				// we execute callback on ThreadPool because on FreeBSD it can be called synchronously  				// causing deadlock  				ThreadPool.QueueUserWorkItem(_ => {  					if (!InteractiveMode)  						Log.Info(  							"TcpTypedConnection: connected to [{remoteEndPoint}' L{localEndPoint}' {connectionId:B}]."'  							conn.RemoteEndPoint' conn.LocalEndPoint' conn.ConnectionId);  					if (connectionEstablished != null) {  						if (!connectionCreatedEvent.Wait(10000))  							throw new Exception("TcpTypedConnection: creation took too long!");  						connectionEstablished(typedConnection);  					}  				});  			};
Magic Number,EventStore.TestClient,ClientOptions,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\ClientOptions.cs,ClientOptions,The following statement contains a magic number: TcpPort = 1113;
Magic Number,EventStore.TestClient,ClientOptions,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\ClientOptions.cs,ClientOptions,The following statement contains a magic number: HttpPort = 2113;
Magic Number,EventStore.TestClient,ClientOptions,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\ClientOptions.cs,ClientOptions,The following statement contains a magic number: ReadWindow = 2000;
Magic Number,EventStore.TestClient,ClientOptions,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\ClientOptions.cs,ClientOptions,The following statement contains a magic number: WriteWindow = 2000;
Magic Number,EventStore.TestClient,ClientOptions,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\ClientOptions.cs,ClientOptions,The following statement contains a magic number: PingWindow = 2000;
Magic Number,EventStore.TestClient,CommandsProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\CommandsProcessor.cs,TryProcess,The following statement contains a magic number: executedEvent.WaitOne(1000);
Magic Number,EventStore.TestClient,CommandsProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\CommandsProcessor.cs,BuildFullException,The following statement contains a magic number: const int maxLevel = 3;
Magic Number,EventStore.TestClient,CommandsProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\CommandsProcessor.cs,BuildFullException,The following statement contains a magic number: details.AppendFormat("\n{0}-->{1}"' new string(' '' level * 2)' ex.Message);
Magic Number,EventStore.TestClient,CommandsProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\CommandsProcessor.cs,BuildFullException,The following statement contains a magic number: aggregated.InnerExceptions.Take(2)
Magic Number,EventStore.TestClient,ConsoleTable,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\ConsoleTable.cs,ConsoleTable,The following statement contains a magic number: _columnWidths = _header.Select(s => s.Length + 4).ToArray();
Magic Number,EventStore.TestClient,PortsHelper,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\PortsHelper.cs,InitPorts,The following statement contains a magic number: var listenTask = Task.Factory.StartNew(() => {  						try {  							var context = httpListener.GetContext();  							context.Response.Close(new byte[] {1' 2' 3}' true);  						} catch (Exception exc) {  							httpListenerError = exc;  						}  					});
Magic Number,EventStore.TestClient,PortsHelper,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\PortsHelper.cs,InitPorts,The following statement contains a magic number: var listenTask = Task.Factory.StartNew(() => {  						try {  							var context = httpListener.GetContext();  							context.Response.Close(new byte[] {1' 2' 3}' true);  						} catch (Exception exc) {  							httpListenerError = exc;  						}  					});
Magic Number,EventStore.TestClient,PortsHelper,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\PortsHelper.cs,InitPorts,The following statement contains a magic number: var buffer = new byte[256];
Magic Number,EventStore.TestClient,PortsHelper,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\PortsHelper.cs,InitPorts,The following statement contains a magic number: read != 3 || buffer[0] != 1 || buffer[1] != 2 || buffer[2] != 3
Magic Number,EventStore.TestClient,PortsHelper,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\PortsHelper.cs,InitPorts,The following statement contains a magic number: read != 3 || buffer[0] != 1 || buffer[1] != 2 || buffer[2] != 3
Magic Number,EventStore.TestClient,PortsHelper,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\PortsHelper.cs,InitPorts,The following statement contains a magic number: read != 3 || buffer[0] != 1 || buffer[1] != 2 || buffer[2] != 3
Magic Number,EventStore.TestClient,PortsHelper,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\PortsHelper.cs,InitPorts,The following statement contains a magic number: read != 3 || buffer[0] != 1 || buffer[1] != 2 || buffer[2] != 3
Magic Number,EventStore.TestClient,PortsHelper,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\PortsHelper.cs,InitPorts,The following statement contains a magic number: !listenTask.Wait(5000)
Magic Number,EventStore.TestClient,PortsHelper,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\PortsHelper.cs,InitPorts,The following statement contains a magic number: succ <= PortCount / 2
Magic Number,EventStore.TestClient,PortsHelper,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\PortsHelper.cs,GetAvailablePort,The following statement contains a magic number: i < 50
Magic Number,EventStore.TestClient,Program,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Program.cs,Start,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,EventStore.TestClient.Commands,DeleteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DeleteProcessor.cs,Execute,The following statement contains a magic number: args.Length > 2
Magic Number,EventStore.TestClient.Commands,DeleteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DeleteProcessor.cs,Execute,The following statement contains a magic number: args.Length == 2
Magic Number,EventStore.TestClient.Commands,MultiWriteFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\MultiWriteFloodWaiting.cs,Execute,The following statement contains a magic number: long requestsCnt = 5000;
Magic Number,EventStore.TestClient.Commands,MultiWriteFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\MultiWriteFloodWaiting.cs,Execute,The following statement contains a magic number: var writeCount = 10;
Magic Number,EventStore.TestClient.Commands,MultiWriteFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\MultiWriteFloodWaiting.cs,Execute,The following statement contains a magic number: args.Length != 1 && args.Length != 3
Magic Number,EventStore.TestClient.Commands,MultiWriteFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\MultiWriteFloodWaiting.cs,Execute,The following statement contains a magic number: requestsCnt = long.Parse(args[2]);
Magic Number,EventStore.TestClient.Commands,MultiWriteFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\MultiWriteFloodWaiting.cs,WriteFlood,The following statement contains a magic number: var client = context.Client.CreateTcpConnection(  					context'  					(conn' pkg) => {  						if (pkg.Command != TcpCommand.WriteEventsCompleted) {  							context.Fail(reason: string.Format("Unexpected TCP package: {0}."' pkg.Command));  							return;  						}    						var dto = pkg.Data.Deserialize<TcpClientMessageDto.WriteEventsCompleted>();  						if (dto.Result == TcpClientMessageDto.OperationResult.Success) {  							if (Interlocked.Increment(ref succ) % 1000 == 0) Console.Write(".");  						} else {  							if (Interlocked.Increment(ref fail) % 1000 == 0) Console.Write("#");  						}    						if (Interlocked.Increment(ref all) == requestsCnt) {  							context.Success();  							doneEvent.Set();  						}    						localDoneEvent.Set();  					}'  					connectionClosed: (conn' err) => context.Fail(reason: "Connection was closed prematurely."));
Magic Number,EventStore.TestClient.Commands,MultiWriteFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\MultiWriteFloodWaiting.cs,WriteFlood,The following statement contains a magic number: var client = context.Client.CreateTcpConnection(  					context'  					(conn' pkg) => {  						if (pkg.Command != TcpCommand.WriteEventsCompleted) {  							context.Fail(reason: string.Format("Unexpected TCP package: {0}."' pkg.Command));  							return;  						}    						var dto = pkg.Data.Deserialize<TcpClientMessageDto.WriteEventsCompleted>();  						if (dto.Result == TcpClientMessageDto.OperationResult.Success) {  							if (Interlocked.Increment(ref succ) % 1000 == 0) Console.Write(".");  						} else {  							if (Interlocked.Increment(ref fail) % 1000 == 0) Console.Write("#");  						}    						if (Interlocked.Increment(ref all) == requestsCnt) {  							context.Success();  							doneEvent.Set();  						}    						localDoneEvent.Set();  					}'  					connectionClosed: (conn' err) => context.Fail(reason: "Connection was closed prematurely."));
Magic Number,EventStore.TestClient.Commands,MultiWriteFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\MultiWriteFloodWaiting.cs,WriteFlood,The following statement contains a magic number: var reqPerSec = (all + 0.0) / sw.ElapsedMilliseconds * 1000;
Magic Number,EventStore.TestClient.Commands,MultiWriteFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\MultiWriteFloodWaiting.cs,WriteFlood,The following statement contains a magic number: PerfUtils.LogTeamCityGraphData(  				string.Format("{0}-{1}-{2}-failureSuccessRate"' Keyword' clientsCnt' requestsCnt)'  				(int)(100.0 * fail / (fail + succ)));
Magic Number,EventStore.TestClient.Commands,MultiWriteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\MultiWriteProcessor.cs,Execute,The following statement contains a magic number: var writeCount = 10;
Magic Number,EventStore.TestClient.Commands,MultiWriteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\MultiWriteProcessor.cs,Execute,The following statement contains a magic number: args.Length > 3
Magic Number,EventStore.TestClient.Commands,MultiWriteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\MultiWriteProcessor.cs,Execute,The following statement contains a magic number: args.Length >= 2
Magic Number,EventStore.TestClient.Commands,MultiWriteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\MultiWriteProcessor.cs,Execute,The following statement contains a magic number: expectedVersion = args[2].Trim().ToUpper() == "ANY"  						? ExpectedVersion.Any  						: int.Parse(args[2].Trim());
Magic Number,EventStore.TestClient.Commands,MultiWriteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\MultiWriteProcessor.cs,Execute,The following statement contains a magic number: expectedVersion = args[2].Trim().ToUpper() == "ANY"  						? ExpectedVersion.Any  						: int.Parse(args[2].Trim());
Magic Number,EventStore.TestClient.Commands,MultiWriteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\MultiWriteProcessor.cs,Execute,The following statement contains a magic number: args.Length >= 3
Magic Number,EventStore.TestClient.Commands,PingFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\PingFloodProcessor.cs,Execute,The following statement contains a magic number: long requestsCnt = 1000000;
Magic Number,EventStore.TestClient.Commands,PingFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\PingFloodProcessor.cs,Execute,The following statement contains a magic number: args.Length != 2
Magic Number,EventStore.TestClient.Commands,PingFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\PingFloodProcessor.cs,PingFlood,The following statement contains a magic number: var client = context.Client.CreateTcpConnection(  					context'  					(conn' msg) => {  						Interlocked.Increment(ref received);  						var pongs = Interlocked.Increment(ref all);  						if (pongs % 10000 == 0) Console.Write('.');  						if (pongs == requestsCnt) {  							context.Success();  							doneEvent.Set();  						}  					}'  					connectionClosed: (conn' err) => context.Fail(reason: "Connection was closed prematurely."));
Magic Number,EventStore.TestClient.Commands,PingFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\PingFloodProcessor.cs,PingFlood,The following statement contains a magic number: var reqPerSec = (all + 0.0) / sw.ElapsedMilliseconds * 1000;
Magic Number,EventStore.TestClient.Commands,PingFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\PingFloodWaitingProcessor.cs,Execute,The following statement contains a magic number: long requestsCnt = 100000;
Magic Number,EventStore.TestClient.Commands,PingFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\PingFloodWaitingProcessor.cs,Execute,The following statement contains a magic number: args.Length != 2
Magic Number,EventStore.TestClient.Commands,PingFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\PingFloodWaitingProcessor.cs,PingFloodWaiting,The following statement contains a magic number: var reqPerSec = (all + 0.0) / sw.ElapsedMilliseconds * 1000;
Magic Number,EventStore.TestClient.Commands,ReadAllProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadAllProcessor.cs,Execute,The following statement contains a magic number: args.Length != 1 && args.Length != 3 && args.Length != 4
Magic Number,EventStore.TestClient.Commands,ReadAllProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadAllProcessor.cs,Execute,The following statement contains a magic number: args.Length != 1 && args.Length != 3 && args.Length != 4
Magic Number,EventStore.TestClient.Commands,ReadAllProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadAllProcessor.cs,Execute,The following statement contains a magic number: !long.TryParse(args[1]' out commitPos) || !long.TryParse(args[2]' out preparePos)
Magic Number,EventStore.TestClient.Commands,ReadAllProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadAllProcessor.cs,Execute,The following statement contains a magic number: args.Length >= 3
Magic Number,EventStore.TestClient.Commands,ReadAllProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadAllProcessor.cs,Execute,The following statement contains a magic number: requireMaster = bool.Parse(args[3]);
Magic Number,EventStore.TestClient.Commands,ReadAllProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadAllProcessor.cs,Execute,The following statement contains a magic number: args.Length >= 4
Magic Number,EventStore.TestClient.Commands,ReadAllProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadAllProcessor.cs,Execute,The following statement contains a magic number: context.Client.CreateTcpConnection(  				context'  				connectionEstablished: conn => {  					context.Log.Info("[{remoteEndPoint}' L{localEndPoint}]: Reading all {readDirection}..."'  						conn.RemoteEndPoint' conn.LocalEndPoint' forward ? "FORWARD" : "BACKWARD");    					var readDto =  						new TcpClientMessageDto.ReadAllEvents(commitPos' preparePos' 10' resolveLinkTos' requireMaster);  					var package = new TcpPackage(tcpCommand' Guid.NewGuid()' readDto.Serialize()).AsByteArray();  					sw.Start();  					conn.EnqueueSend(package);  				}'  				handlePackage: (conn' pkg) => {  					if (pkg.Command != tcpCommand) {  						context.Fail(reason: string.Format("Unexpected TCP package: {0}."' pkg.Command));  						return;  					}    					var dto = pkg.Data.Deserialize<TcpClientMessageDto.ReadAllEventsCompleted>();  					if (dto.Events.IsEmpty()) {  						sw.Stop();  						context.Log.Info("=== Reading ALL {readDirection} completed in {elapsed}. Total read: {total}"'  							forward ? "FORWARD" : "BACKWARD"' sw.Elapsed' total);  						context.Success();  						conn.Close();  						return;  					}    					var sb = new StringBuilder();  					for (int i = 0; i < dto.Events.Length; ++i) {  						var evnt = dto.Events[i].Event;  						sb.AppendFormat(  							"\n{0}:\tStreamId: {1}'\n\tEventNumber: {2}'\n\tData:\n{3}'\n\tEventType: {4}\n"'  							total'  							evnt.EventStreamId'  							evnt.EventNumber'  							Helper.UTF8NoBom.GetString(evnt.Data)'  							evnt.EventType);  						total += 1;  					}    					context.Log.Info("Next {count} events read:\n{events}"' dto.Events.Length' sb.ToString());    					var readDto = new TcpClientMessageDto.ReadAllEvents(dto.NextCommitPosition' dto.NextPreparePosition'  						10' resolveLinkTos' requireMaster);  					var package = new TcpPackage(tcpCommand' Guid.NewGuid()' readDto.Serialize()).AsByteArray();  					conn.EnqueueSend(package);  				}'  				connectionClosed: (connection' error) => context.Fail(reason: "Connection was closed prematurely."));
Magic Number,EventStore.TestClient.Commands,ReadAllProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadAllProcessor.cs,Execute,The following statement contains a magic number: context.Client.CreateTcpConnection(  				context'  				connectionEstablished: conn => {  					context.Log.Info("[{remoteEndPoint}' L{localEndPoint}]: Reading all {readDirection}..."'  						conn.RemoteEndPoint' conn.LocalEndPoint' forward ? "FORWARD" : "BACKWARD");    					var readDto =  						new TcpClientMessageDto.ReadAllEvents(commitPos' preparePos' 10' resolveLinkTos' requireMaster);  					var package = new TcpPackage(tcpCommand' Guid.NewGuid()' readDto.Serialize()).AsByteArray();  					sw.Start();  					conn.EnqueueSend(package);  				}'  				handlePackage: (conn' pkg) => {  					if (pkg.Command != tcpCommand) {  						context.Fail(reason: string.Format("Unexpected TCP package: {0}."' pkg.Command));  						return;  					}    					var dto = pkg.Data.Deserialize<TcpClientMessageDto.ReadAllEventsCompleted>();  					if (dto.Events.IsEmpty()) {  						sw.Stop();  						context.Log.Info("=== Reading ALL {readDirection} completed in {elapsed}. Total read: {total}"'  							forward ? "FORWARD" : "BACKWARD"' sw.Elapsed' total);  						context.Success();  						conn.Close();  						return;  					}    					var sb = new StringBuilder();  					for (int i = 0; i < dto.Events.Length; ++i) {  						var evnt = dto.Events[i].Event;  						sb.AppendFormat(  							"\n{0}:\tStreamId: {1}'\n\tEventNumber: {2}'\n\tData:\n{3}'\n\tEventType: {4}\n"'  							total'  							evnt.EventStreamId'  							evnt.EventNumber'  							Helper.UTF8NoBom.GetString(evnt.Data)'  							evnt.EventType);  						total += 1;  					}    					context.Log.Info("Next {count} events read:\n{events}"' dto.Events.Length' sb.ToString());    					var readDto = new TcpClientMessageDto.ReadAllEvents(dto.NextCommitPosition' dto.NextPreparePosition'  						10' resolveLinkTos' requireMaster);  					var package = new TcpPackage(tcpCommand' Guid.NewGuid()' readDto.Serialize()).AsByteArray();  					conn.EnqueueSend(package);  				}'  				connectionClosed: (connection' error) => context.Fail(reason: "Connection was closed prematurely."));
Magic Number,EventStore.TestClient.Commands,ReadFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadFloodProcessor.cs,Execute,The following statement contains a magic number: long requestsCnt = 5000;
Magic Number,EventStore.TestClient.Commands,ReadFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadFloodProcessor.cs,Execute,The following statement contains a magic number: args.Length != 2 && args.Length != 3 && args.Length != 4
Magic Number,EventStore.TestClient.Commands,ReadFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadFloodProcessor.cs,Execute,The following statement contains a magic number: args.Length != 2 && args.Length != 3 && args.Length != 4
Magic Number,EventStore.TestClient.Commands,ReadFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadFloodProcessor.cs,Execute,The following statement contains a magic number: args.Length != 2 && args.Length != 3 && args.Length != 4
Magic Number,EventStore.TestClient.Commands,ReadFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadFloodProcessor.cs,Execute,The following statement contains a magic number: eventStreamId = args[2];
Magic Number,EventStore.TestClient.Commands,ReadFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadFloodProcessor.cs,Execute,The following statement contains a magic number: args.Length >= 3
Magic Number,EventStore.TestClient.Commands,ReadFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadFloodProcessor.cs,Execute,The following statement contains a magic number: requireMaster = bool.Parse(args[3]);
Magic Number,EventStore.TestClient.Commands,ReadFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadFloodProcessor.cs,Execute,The following statement contains a magic number: args.Length >= 4
Magic Number,EventStore.TestClient.Commands,ReadFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadFloodProcessor.cs,ReadFlood,The following statement contains a magic number: var client = context.Client.CreateTcpConnection(  					context'  					(conn' pkg) => {  						if (pkg.Command != TcpCommand.ReadEventCompleted) {  							context.Fail(reason: string.Format("Unexpected TCP package: {0}."' pkg.Command));  							return;  						}    						var dto = pkg.Data.Deserialize<TcpClientMessageDto.ReadEventCompleted>();  						monitor.EndOperation(pkg.CorrelationId);  						if (dto.Result == TcpClientMessageDto.ReadEventCompleted.ReadEventResult.Success) {  							if (Interlocked.Increment(ref succ) % 1000 == 0) Console.Write(".");  						} else {  							if (Interlocked.Increment(ref fail) % 1000 == 0) Console.Write("#");  						}    						Interlocked.Increment(ref received);  						var localAll = Interlocked.Increment(ref all);  						if (localAll % 100000 == 0) {  							var elapsed = sw2.Elapsed;  							sw2.Restart();  							context.Log.Trace("\nDONE TOTAL {reads} READS IN {elapsed} ({rate:0.0}/s)."' localAll'  								elapsed' 1000.0 * 100000 / elapsed.TotalMilliseconds);  						}    						if (localAll == requestsCnt) {  							context.Success();  							doneEvent.Set();  						}  					}'  					connectionClosed: (conn' err) => context.Fail(reason: "Connection was closed prematurely."));
Magic Number,EventStore.TestClient.Commands,ReadFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadFloodProcessor.cs,ReadFlood,The following statement contains a magic number: var client = context.Client.CreateTcpConnection(  					context'  					(conn' pkg) => {  						if (pkg.Command != TcpCommand.ReadEventCompleted) {  							context.Fail(reason: string.Format("Unexpected TCP package: {0}."' pkg.Command));  							return;  						}    						var dto = pkg.Data.Deserialize<TcpClientMessageDto.ReadEventCompleted>();  						monitor.EndOperation(pkg.CorrelationId);  						if (dto.Result == TcpClientMessageDto.ReadEventCompleted.ReadEventResult.Success) {  							if (Interlocked.Increment(ref succ) % 1000 == 0) Console.Write(".");  						} else {  							if (Interlocked.Increment(ref fail) % 1000 == 0) Console.Write("#");  						}    						Interlocked.Increment(ref received);  						var localAll = Interlocked.Increment(ref all);  						if (localAll % 100000 == 0) {  							var elapsed = sw2.Elapsed;  							sw2.Restart();  							context.Log.Trace("\nDONE TOTAL {reads} READS IN {elapsed} ({rate:0.0}/s)."' localAll'  								elapsed' 1000.0 * 100000 / elapsed.TotalMilliseconds);  						}    						if (localAll == requestsCnt) {  							context.Success();  							doneEvent.Set();  						}  					}'  					connectionClosed: (conn' err) => context.Fail(reason: "Connection was closed prematurely."));
Magic Number,EventStore.TestClient.Commands,ReadFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadFloodProcessor.cs,ReadFlood,The following statement contains a magic number: var client = context.Client.CreateTcpConnection(  					context'  					(conn' pkg) => {  						if (pkg.Command != TcpCommand.ReadEventCompleted) {  							context.Fail(reason: string.Format("Unexpected TCP package: {0}."' pkg.Command));  							return;  						}    						var dto = pkg.Data.Deserialize<TcpClientMessageDto.ReadEventCompleted>();  						monitor.EndOperation(pkg.CorrelationId);  						if (dto.Result == TcpClientMessageDto.ReadEventCompleted.ReadEventResult.Success) {  							if (Interlocked.Increment(ref succ) % 1000 == 0) Console.Write(".");  						} else {  							if (Interlocked.Increment(ref fail) % 1000 == 0) Console.Write("#");  						}    						Interlocked.Increment(ref received);  						var localAll = Interlocked.Increment(ref all);  						if (localAll % 100000 == 0) {  							var elapsed = sw2.Elapsed;  							sw2.Restart();  							context.Log.Trace("\nDONE TOTAL {reads} READS IN {elapsed} ({rate:0.0}/s)."' localAll'  								elapsed' 1000.0 * 100000 / elapsed.TotalMilliseconds);  						}    						if (localAll == requestsCnt) {  							context.Success();  							doneEvent.Set();  						}  					}'  					connectionClosed: (conn' err) => context.Fail(reason: "Connection was closed prematurely."));
Magic Number,EventStore.TestClient.Commands,ReadFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadFloodProcessor.cs,ReadFlood,The following statement contains a magic number: var client = context.Client.CreateTcpConnection(  					context'  					(conn' pkg) => {  						if (pkg.Command != TcpCommand.ReadEventCompleted) {  							context.Fail(reason: string.Format("Unexpected TCP package: {0}."' pkg.Command));  							return;  						}    						var dto = pkg.Data.Deserialize<TcpClientMessageDto.ReadEventCompleted>();  						monitor.EndOperation(pkg.CorrelationId);  						if (dto.Result == TcpClientMessageDto.ReadEventCompleted.ReadEventResult.Success) {  							if (Interlocked.Increment(ref succ) % 1000 == 0) Console.Write(".");  						} else {  							if (Interlocked.Increment(ref fail) % 1000 == 0) Console.Write("#");  						}    						Interlocked.Increment(ref received);  						var localAll = Interlocked.Increment(ref all);  						if (localAll % 100000 == 0) {  							var elapsed = sw2.Elapsed;  							sw2.Restart();  							context.Log.Trace("\nDONE TOTAL {reads} READS IN {elapsed} ({rate:0.0}/s)."' localAll'  								elapsed' 1000.0 * 100000 / elapsed.TotalMilliseconds);  						}    						if (localAll == requestsCnt) {  							context.Success();  							doneEvent.Set();  						}  					}'  					connectionClosed: (conn' err) => context.Fail(reason: "Connection was closed prematurely."));
Magic Number,EventStore.TestClient.Commands,ReadFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadFloodProcessor.cs,ReadFlood,The following statement contains a magic number: var client = context.Client.CreateTcpConnection(  					context'  					(conn' pkg) => {  						if (pkg.Command != TcpCommand.ReadEventCompleted) {  							context.Fail(reason: string.Format("Unexpected TCP package: {0}."' pkg.Command));  							return;  						}    						var dto = pkg.Data.Deserialize<TcpClientMessageDto.ReadEventCompleted>();  						monitor.EndOperation(pkg.CorrelationId);  						if (dto.Result == TcpClientMessageDto.ReadEventCompleted.ReadEventResult.Success) {  							if (Interlocked.Increment(ref succ) % 1000 == 0) Console.Write(".");  						} else {  							if (Interlocked.Increment(ref fail) % 1000 == 0) Console.Write("#");  						}    						Interlocked.Increment(ref received);  						var localAll = Interlocked.Increment(ref all);  						if (localAll % 100000 == 0) {  							var elapsed = sw2.Elapsed;  							sw2.Restart();  							context.Log.Trace("\nDONE TOTAL {reads} READS IN {elapsed} ({rate:0.0}/s)."' localAll'  								elapsed' 1000.0 * 100000 / elapsed.TotalMilliseconds);  						}    						if (localAll == requestsCnt) {  							context.Success();  							doneEvent.Set();  						}  					}'  					connectionClosed: (conn' err) => context.Fail(reason: "Connection was closed prematurely."));
Magic Number,EventStore.TestClient.Commands,ReadFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadFloodProcessor.cs,ReadFlood,The following statement contains a magic number: var reqPerSec = (all + 0.0) / sw.ElapsedMilliseconds * 1000;
Magic Number,EventStore.TestClient.Commands,ReadProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadProcessor.cs,Execute,The following statement contains a magic number: args.Length > 3
Magic Number,EventStore.TestClient.Commands,ReadProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadProcessor.cs,Execute,The following statement contains a magic number: args.Length >= 2
Magic Number,EventStore.TestClient.Commands,ReadProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadProcessor.cs,Execute,The following statement contains a magic number: requireMaster = bool.Parse(args[2]);
Magic Number,EventStore.TestClient.Commands,ReadProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\ReadProcessor.cs,Execute,The following statement contains a magic number: args.Length >= 3
Magic Number,EventStore.TestClient.Commands,RequestMonitor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RequestMonitor.cs,GetMeasurementDetails,The following statement contains a magic number: Console.WriteLine(i + "% : " + items[GetPercentile((decimal)i - 20' items.Length)] + "-" +  				                  items[GetPercentile((decimal)i' items.Length)]);
Magic Number,EventStore.TestClient.Commands,RequestMonitor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RequestMonitor.cs,GetMeasurementDetails,The following statement contains a magic number: i <= 100
Magic Number,EventStore.TestClient.Commands,RequestMonitor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RequestMonitor.cs,GetMeasurementDetails,The following statement contains a magic number: Console.WriteLine("90% : " + items[GetPercentile(90m' items.Length)]);
Magic Number,EventStore.TestClient.Commands,RequestMonitor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RequestMonitor.cs,GetMeasurementDetails,The following statement contains a magic number: Console.WriteLine("95% : " + items[GetPercentile(95m' items.Length)]);
Magic Number,EventStore.TestClient.Commands,RequestMonitor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RequestMonitor.cs,GetMeasurementDetails,The following statement contains a magic number: Console.WriteLine("98% : " + items[GetPercentile(98m' items.Length)]);
Magic Number,EventStore.TestClient.Commands,RequestMonitor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RequestMonitor.cs,GetMeasurementDetails,The following statement contains a magic number: Console.WriteLine("99% : " + items[GetPercentile(99m' items.Length)]);
Magic Number,EventStore.TestClient.Commands,RequestMonitor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RequestMonitor.cs,GetMeasurementDetails,The following statement contains a magic number: Console.WriteLine("99.5% : " + items[GetPercentile(99.5m' items.Length)]);
Magic Number,EventStore.TestClient.Commands,RequestMonitor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RequestMonitor.cs,GetMeasurementDetails,The following statement contains a magic number: Console.WriteLine("99.9% : " + items[GetPercentile(99.9m' items.Length)]);
Magic Number,EventStore.TestClient.Commands,RequestMonitor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RequestMonitor.cs,GetMeasurementDetails,The following statement contains a magic number: Console.WriteLine("99.99% : " + items[GetPercentile(99.99m' items.Length)]);
Magic Number,EventStore.TestClient.Commands,RequestMonitor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RequestMonitor.cs,GetMeasurementDetails,The following statement contains a magic number: Console.WriteLine("99.999% : " + items[GetPercentile(99.999m' items.Length)]);
Magic Number,EventStore.TestClient.Commands,RequestMonitor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RequestMonitor.cs,GetMeasurementDetails,The following statement contains a magic number: Console.WriteLine("99.9999% : " + items[GetPercentile(99.9999m' items.Length)]);
Magic Number,EventStore.TestClient.Commands,RequestMonitor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RequestMonitor.cs,GetMeasurementDetails,The following statement contains a magic number: Console.WriteLine("99.99999% : " + items[GetPercentile(99.99999m' items.Length)]);
Magic Number,EventStore.TestClient.Commands,RequestMonitor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RequestMonitor.cs,GetPercentile,The following statement contains a magic number: percent = percentile / 100m;
Magic Number,EventStore.TestClient.Commands,RunTestScenariosProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenariosProcessor.cs,Execute,The following statement contains a magic number: args.Length != 0 && false == (args.Length == 7 || args.Length == 8)
Magic Number,EventStore.TestClient.Commands,RunTestScenariosProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenariosProcessor.cs,Execute,The following statement contains a magic number: args.Length != 0 && false == (args.Length == 7 || args.Length == 8)
Magic Number,EventStore.TestClient.Commands,RunTestScenariosProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenariosProcessor.cs,Execute,The following statement contains a magic number: var maxConcurrentRequests = 20;
Magic Number,EventStore.TestClient.Commands,RunTestScenariosProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenariosProcessor.cs,Execute,The following statement contains a magic number: var connections = 10;
Magic Number,EventStore.TestClient.Commands,RunTestScenariosProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenariosProcessor.cs,Execute,The following statement contains a magic number: var streams = 100;
Magic Number,EventStore.TestClient.Commands,RunTestScenariosProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenariosProcessor.cs,Execute,The following statement contains a magic number: var eventsPerStream = 400;
Magic Number,EventStore.TestClient.Commands,RunTestScenariosProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenariosProcessor.cs,Execute,The following statement contains a magic number: var streamDeleteStep = 7;
Magic Number,EventStore.TestClient.Commands,RunTestScenariosProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenariosProcessor.cs,Execute,The following statement contains a magic number: var executionPeriodMinutes = 2;
Magic Number,EventStore.TestClient.Commands,RunTestScenariosProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenariosProcessor.cs,Execute,The following statement contains a magic number: var atoms = args[7].Split(':');
Magic Number,EventStore.TestClient.Commands,RunTestScenariosProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenariosProcessor.cs,Execute,The following statement contains a magic number: streams = int.Parse(args[2]);
Magic Number,EventStore.TestClient.Commands,RunTestScenariosProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenariosProcessor.cs,Execute,The following statement contains a magic number: eventsPerStream = int.Parse(args[3]);
Magic Number,EventStore.TestClient.Commands,RunTestScenariosProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenariosProcessor.cs,Execute,The following statement contains a magic number: streamDeleteStep = int.Parse(args[4]);
Magic Number,EventStore.TestClient.Commands,RunTestScenariosProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenariosProcessor.cs,Execute,The following statement contains a magic number: scenarioName = args[5];
Magic Number,EventStore.TestClient.Commands,RunTestScenariosProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenariosProcessor.cs,Execute,The following statement contains a magic number: executionPeriodMinutes = int.Parse(args[6]);
Magic Number,EventStore.TestClient.Commands,RunTestScenariosProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenariosProcessor.cs,Execute,The following statement contains a magic number: dbParentPath = args[7];
Magic Number,EventStore.TestClient.Commands,RunTestScenariosProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenariosProcessor.cs,CutLastArgument,The following statement contains a magic number: var cutArgs = new string[7];
Magic Number,EventStore.TestClient.Commands,RunTestScenariosProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenariosProcessor.cs,CutLastArgument,The following statement contains a magic number: Array.Copy(args' cutArgs' 7);
Magic Number,EventStore.TestClient.Commands,RunTestScenariosProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenariosProcessor.cs,CreateDirectTcpSender,The following statement contains a magic number: const int timeoutMilliseconds = 4000;
Magic Number,EventStore.TestClient.Commands,SubscriptionStressTestProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\SubscriptionStressTestProcessor.cs,Execute,The following statement contains a magic number: int subscriptionCount = 5000;
Magic Number,EventStore.TestClient.Commands,SubscriptionStressTestProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\SubscriptionStressTestProcessor.cs,Execute,The following statement contains a magic number: conn.SubscribeToStreamAsync(  					string.Format("stream-{0}"' i)'  					false'  					(s' e) => {  						var c = Interlocked.Increment(ref appearedCnt);  						if (c % 1000 == 0) Console.Write('\'');  						if (c % 100000 == 0) {  							context.Log.Trace("Received total {events} events ({rate} per sec)..."' c'  								100000.0 / sw.Elapsed.TotalSeconds);  							sw.Restart();  						}    						return Task.CompletedTask;  					}).Wait();
Magic Number,EventStore.TestClient.Commands,SubscriptionStressTestProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\SubscriptionStressTestProcessor.cs,Execute,The following statement contains a magic number: conn.SubscribeToStreamAsync(  					string.Format("stream-{0}"' i)'  					false'  					(s' e) => {  						var c = Interlocked.Increment(ref appearedCnt);  						if (c % 1000 == 0) Console.Write('\'');  						if (c % 100000 == 0) {  							context.Log.Trace("Received total {events} events ({rate} per sec)..."' c'  								100000.0 / sw.Elapsed.TotalSeconds);  							sw.Restart();  						}    						return Task.CompletedTask;  					}).Wait();
Magic Number,EventStore.TestClient.Commands,SubscriptionStressTestProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\SubscriptionStressTestProcessor.cs,Execute,The following statement contains a magic number: conn.SubscribeToStreamAsync(  					string.Format("stream-{0}"' i)'  					false'  					(s' e) => {  						var c = Interlocked.Increment(ref appearedCnt);  						if (c % 1000 == 0) Console.Write('\'');  						if (c % 100000 == 0) {  							context.Log.Trace("Received total {events} events ({rate} per sec)..."' c'  								100000.0 / sw.Elapsed.TotalSeconds);  							sw.Restart();  						}    						return Task.CompletedTask;  					}).Wait();
Magic Number,EventStore.TestClient.Commands,TcpSanitazationCheckProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\TcpSanitazationCheckProcessor.cs,Execute,The following statement contains a magic number: var packages = commandsToCheck.Select(c =>  					new TcpPackage((TcpCommand)c' Guid.NewGuid()' new byte[] {0' 1' 0' 1}).AsByteArray())  				.Union(new[] {  					BitConverter.GetBytes(int.MaxValue).Union(new byte[] {1' 2' 3' 4}).ToArray()'  					BitConverter.GetBytes(int.MinValue).Union(new byte[] {1' 2' 3' 4}).ToArray()'  					BitConverter.GetBytes(0).Union(Enumerable.Range(0' 256).Select(x => (byte)x)).ToArray()  				});
Magic Number,EventStore.TestClient.Commands,TcpSanitazationCheckProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\TcpSanitazationCheckProcessor.cs,Execute,The following statement contains a magic number: var packages = commandsToCheck.Select(c =>  					new TcpPackage((TcpCommand)c' Guid.NewGuid()' new byte[] {0' 1' 0' 1}).AsByteArray())  				.Union(new[] {  					BitConverter.GetBytes(int.MaxValue).Union(new byte[] {1' 2' 3' 4}).ToArray()'  					BitConverter.GetBytes(int.MinValue).Union(new byte[] {1' 2' 3' 4}).ToArray()'  					BitConverter.GetBytes(0).Union(Enumerable.Range(0' 256).Select(x => (byte)x)).ToArray()  				});
Magic Number,EventStore.TestClient.Commands,TcpSanitazationCheckProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\TcpSanitazationCheckProcessor.cs,Execute,The following statement contains a magic number: var packages = commandsToCheck.Select(c =>  					new TcpPackage((TcpCommand)c' Guid.NewGuid()' new byte[] {0' 1' 0' 1}).AsByteArray())  				.Union(new[] {  					BitConverter.GetBytes(int.MaxValue).Union(new byte[] {1' 2' 3' 4}).ToArray()'  					BitConverter.GetBytes(int.MinValue).Union(new byte[] {1' 2' 3' 4}).ToArray()'  					BitConverter.GetBytes(0).Union(Enumerable.Range(0' 256).Select(x => (byte)x)).ToArray()  				});
Magic Number,EventStore.TestClient.Commands,TcpSanitazationCheckProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\TcpSanitazationCheckProcessor.cs,Execute,The following statement contains a magic number: var packages = commandsToCheck.Select(c =>  					new TcpPackage((TcpCommand)c' Guid.NewGuid()' new byte[] {0' 1' 0' 1}).AsByteArray())  				.Union(new[] {  					BitConverter.GetBytes(int.MaxValue).Union(new byte[] {1' 2' 3' 4}).ToArray()'  					BitConverter.GetBytes(int.MinValue).Union(new byte[] {1' 2' 3' 4}).ToArray()'  					BitConverter.GetBytes(0).Union(Enumerable.Range(0' 256).Select(x => (byte)x)).ToArray()  				});
Magic Number,EventStore.TestClient.Commands,TcpSanitazationCheckProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\TcpSanitazationCheckProcessor.cs,Execute,The following statement contains a magic number: var packages = commandsToCheck.Select(c =>  					new TcpPackage((TcpCommand)c' Guid.NewGuid()' new byte[] {0' 1' 0' 1}).AsByteArray())  				.Union(new[] {  					BitConverter.GetBytes(int.MaxValue).Union(new byte[] {1' 2' 3' 4}).ToArray()'  					BitConverter.GetBytes(int.MinValue).Union(new byte[] {1' 2' 3' 4}).ToArray()'  					BitConverter.GetBytes(0).Union(Enumerable.Range(0' 256).Select(x => (byte)x)).ToArray()  				});
Magic Number,EventStore.TestClient.Commands,TcpSanitazationCheckProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\TcpSanitazationCheckProcessor.cs,Execute,The following statement contains a magic number: var packages = commandsToCheck.Select(c =>  					new TcpPackage((TcpCommand)c' Guid.NewGuid()' new byte[] {0' 1' 0' 1}).AsByteArray())  				.Union(new[] {  					BitConverter.GetBytes(int.MaxValue).Union(new byte[] {1' 2' 3' 4}).ToArray()'  					BitConverter.GetBytes(int.MinValue).Union(new byte[] {1' 2' 3' 4}).ToArray()'  					BitConverter.GetBytes(0).Union(Enumerable.Range(0' 256).Select(x => (byte)x)).ToArray()  				});
Magic Number,EventStore.TestClient.Commands,TcpSanitazationCheckProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\TcpSanitazationCheckProcessor.cs,Execute,The following statement contains a magic number: var packages = commandsToCheck.Select(c =>  					new TcpPackage((TcpCommand)c' Guid.NewGuid()' new byte[] {0' 1' 0' 1}).AsByteArray())  				.Union(new[] {  					BitConverter.GetBytes(int.MaxValue).Union(new byte[] {1' 2' 3' 4}).ToArray()'  					BitConverter.GetBytes(int.MinValue).Union(new byte[] {1' 2' 3' 4}).ToArray()'  					BitConverter.GetBytes(0).Union(Enumerable.Range(0' 256).Select(x => (byte)x)).ToArray()  				});
Magic Number,EventStore.TestClient.Commands,TcpSanitazationCheckProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\TcpSanitazationCheckProcessor.cs,Execute,The following statement contains a magic number: Console.WriteLine("{0} Starting step {1} ({2}) {0}"' new string('#'' 20)' step'  						(TcpCommand)commandsToCheck[step]);
Magic Number,EventStore.TestClient.Commands,TcpSanitazationCheckProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\TcpSanitazationCheckProcessor.cs,Execute,The following statement contains a magic number: Console.WriteLine("{0} Step {1} ({2}) Completed {0}"' new string('#'' 20)' step'  						(TcpCommand)commandsToCheck[step]);
Magic Number,EventStore.TestClient.Commands,TransactionWriteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\TransactionWriteProcessor.cs,Execute,The following statement contains a magic number: int eventsCnt = 10;
Magic Number,EventStore.TestClient.Commands,TransactionWriteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\TransactionWriteProcessor.cs,Execute,The following statement contains a magic number: args.Length > 3
Magic Number,EventStore.TestClient.Commands,TransactionWriteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\TransactionWriteProcessor.cs,Execute,The following statement contains a magic number: args.Length > 2
Magic Number,EventStore.TestClient.Commands,WriteFloodClientApiProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodClientApiProcessor.cs,Execute,The following statement contains a magic number: long requestsCnt = 5000;
Magic Number,EventStore.TestClient.Commands,WriteFloodClientApiProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodClientApiProcessor.cs,Execute,The following statement contains a magic number: int streamsCnt = 1000;
Magic Number,EventStore.TestClient.Commands,WriteFloodClientApiProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodClientApiProcessor.cs,Execute,The following statement contains a magic number: int size = 256;
Magic Number,EventStore.TestClient.Commands,WriteFloodClientApiProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodClientApiProcessor.cs,Execute,The following statement contains a magic number: args.Length < 2 || args.Length > 4
Magic Number,EventStore.TestClient.Commands,WriteFloodClientApiProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodClientApiProcessor.cs,Execute,The following statement contains a magic number: args.Length < 2 || args.Length > 4
Magic Number,EventStore.TestClient.Commands,WriteFloodClientApiProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodClientApiProcessor.cs,Execute,The following statement contains a magic number: streamsCnt = int.Parse(args[2]);
Magic Number,EventStore.TestClient.Commands,WriteFloodClientApiProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodClientApiProcessor.cs,Execute,The following statement contains a magic number: args.Length >= 3
Magic Number,EventStore.TestClient.Commands,WriteFloodClientApiProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodClientApiProcessor.cs,Execute,The following statement contains a magic number: size = int.Parse(args[3]);
Magic Number,EventStore.TestClient.Commands,WriteFloodClientApiProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodClientApiProcessor.cs,Execute,The following statement contains a magic number: args.Length >= 4
Magic Number,EventStore.TestClient.Commands,WriteFloodClientApiProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodClientApiProcessor.cs,WriteFlood,The following statement contains a magic number: var settings = ConnectionSettings.Create()  					.UseConsoleLogger()  					.PerformOnAnyNode()  					.LimitReconnectionsTo(10)  					.LimitRetriesForOperationTo(10)  					.LimitOperationsQueueTo(10000)  					.LimitConcurrentOperationsTo(context.Client.Options.WriteWindow / clientsCnt)  					.FailOnNoServerResponse();
Magic Number,EventStore.TestClient.Commands,WriteFloodClientApiProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodClientApiProcessor.cs,WriteFlood,The following statement contains a magic number: var settings = ConnectionSettings.Create()  					.UseConsoleLogger()  					.PerformOnAnyNode()  					.LimitReconnectionsTo(10)  					.LimitRetriesForOperationTo(10)  					.LimitOperationsQueueTo(10000)  					.LimitConcurrentOperationsTo(context.Client.Options.WriteWindow / clientsCnt)  					.FailOnNoServerResponse();
Magic Number,EventStore.TestClient.Commands,WriteFloodClientApiProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodClientApiProcessor.cs,WriteFlood,The following statement contains a magic number: var settings = ConnectionSettings.Create()  					.UseConsoleLogger()  					.PerformOnAnyNode()  					.LimitReconnectionsTo(10)  					.LimitRetriesForOperationTo(10)  					.LimitOperationsQueueTo(10000)  					.LimitConcurrentOperationsTo(context.Client.Options.WriteWindow / clientsCnt)  					.FailOnNoServerResponse();
Magic Number,EventStore.TestClient.Commands,WriteFloodClientApiProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodClientApiProcessor.cs,WriteFlood,The following statement contains a magic number: threads.Add(new Thread(_ => {  					client.ErrorOccurred += (s' e) => context.Fail(e.Exception' "Error on connection");  					client.ConnectAsync().Wait();    					for (int j = 0; j < count; ++j) {  						var task = client.AppendToStreamAsync(streams[rnd.Next(streamsCnt)]'  							ExpectedVersion.Any'  							new EventData(Guid.NewGuid()'  								"TakeSomeSpaceEvent"'  								false'  								Common.Utils.Helper.UTF8NoBom.GetBytes("DATA" + new string('*'' size))'  								Common.Utils.Helper.UTF8NoBom.GetBytes("METADATA" + new string('$'' 100))));  						task.ContinueWith(x => {  							if (x.IsFaulted) {  								context.Fail(x.Exception.InnerException' "Error on writing operation.");  								return;  							}    							var localAll = Interlocked.Increment(ref succ);  							if (localAll % 1000 == 0) Console.Write('.');  							if (localAll % 100000 == 0) {  								var elapsed = sw2.Elapsed;  								sw2.Restart();  								context.Log.Trace("\nDONE TOTAL {writes} WRITES IN {elapsed} ({rate:0.0}/s)."'  									localAll'  									elapsed'  									1000.0 * 100000 / elapsed.TotalMilliseconds);  							}    							if (localAll == requestsCnt) {  								context.Success();  								doneEvent.Set();  							}  						});  					}  				}) {IsBackground = true});
Magic Number,EventStore.TestClient.Commands,WriteFloodClientApiProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodClientApiProcessor.cs,WriteFlood,The following statement contains a magic number: threads.Add(new Thread(_ => {  					client.ErrorOccurred += (s' e) => context.Fail(e.Exception' "Error on connection");  					client.ConnectAsync().Wait();    					for (int j = 0; j < count; ++j) {  						var task = client.AppendToStreamAsync(streams[rnd.Next(streamsCnt)]'  							ExpectedVersion.Any'  							new EventData(Guid.NewGuid()'  								"TakeSomeSpaceEvent"'  								false'  								Common.Utils.Helper.UTF8NoBom.GetBytes("DATA" + new string('*'' size))'  								Common.Utils.Helper.UTF8NoBom.GetBytes("METADATA" + new string('$'' 100))));  						task.ContinueWith(x => {  							if (x.IsFaulted) {  								context.Fail(x.Exception.InnerException' "Error on writing operation.");  								return;  							}    							var localAll = Interlocked.Increment(ref succ);  							if (localAll % 1000 == 0) Console.Write('.');  							if (localAll % 100000 == 0) {  								var elapsed = sw2.Elapsed;  								sw2.Restart();  								context.Log.Trace("\nDONE TOTAL {writes} WRITES IN {elapsed} ({rate:0.0}/s)."'  									localAll'  									elapsed'  									1000.0 * 100000 / elapsed.TotalMilliseconds);  							}    							if (localAll == requestsCnt) {  								context.Success();  								doneEvent.Set();  							}  						});  					}  				}) {IsBackground = true});
Magic Number,EventStore.TestClient.Commands,WriteFloodClientApiProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodClientApiProcessor.cs,WriteFlood,The following statement contains a magic number: threads.Add(new Thread(_ => {  					client.ErrorOccurred += (s' e) => context.Fail(e.Exception' "Error on connection");  					client.ConnectAsync().Wait();    					for (int j = 0; j < count; ++j) {  						var task = client.AppendToStreamAsync(streams[rnd.Next(streamsCnt)]'  							ExpectedVersion.Any'  							new EventData(Guid.NewGuid()'  								"TakeSomeSpaceEvent"'  								false'  								Common.Utils.Helper.UTF8NoBom.GetBytes("DATA" + new string('*'' size))'  								Common.Utils.Helper.UTF8NoBom.GetBytes("METADATA" + new string('$'' 100))));  						task.ContinueWith(x => {  							if (x.IsFaulted) {  								context.Fail(x.Exception.InnerException' "Error on writing operation.");  								return;  							}    							var localAll = Interlocked.Increment(ref succ);  							if (localAll % 1000 == 0) Console.Write('.');  							if (localAll % 100000 == 0) {  								var elapsed = sw2.Elapsed;  								sw2.Restart();  								context.Log.Trace("\nDONE TOTAL {writes} WRITES IN {elapsed} ({rate:0.0}/s)."'  									localAll'  									elapsed'  									1000.0 * 100000 / elapsed.TotalMilliseconds);  							}    							if (localAll == requestsCnt) {  								context.Success();  								doneEvent.Set();  							}  						});  					}  				}) {IsBackground = true});
Magic Number,EventStore.TestClient.Commands,WriteFloodClientApiProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodClientApiProcessor.cs,WriteFlood,The following statement contains a magic number: threads.Add(new Thread(_ => {  					client.ErrorOccurred += (s' e) => context.Fail(e.Exception' "Error on connection");  					client.ConnectAsync().Wait();    					for (int j = 0; j < count; ++j) {  						var task = client.AppendToStreamAsync(streams[rnd.Next(streamsCnt)]'  							ExpectedVersion.Any'  							new EventData(Guid.NewGuid()'  								"TakeSomeSpaceEvent"'  								false'  								Common.Utils.Helper.UTF8NoBom.GetBytes("DATA" + new string('*'' size))'  								Common.Utils.Helper.UTF8NoBom.GetBytes("METADATA" + new string('$'' 100))));  						task.ContinueWith(x => {  							if (x.IsFaulted) {  								context.Fail(x.Exception.InnerException' "Error on writing operation.");  								return;  							}    							var localAll = Interlocked.Increment(ref succ);  							if (localAll % 1000 == 0) Console.Write('.');  							if (localAll % 100000 == 0) {  								var elapsed = sw2.Elapsed;  								sw2.Restart();  								context.Log.Trace("\nDONE TOTAL {writes} WRITES IN {elapsed} ({rate:0.0}/s)."'  									localAll'  									elapsed'  									1000.0 * 100000 / elapsed.TotalMilliseconds);  							}    							if (localAll == requestsCnt) {  								context.Success();  								doneEvent.Set();  							}  						});  					}  				}) {IsBackground = true});
Magic Number,EventStore.TestClient.Commands,WriteFloodClientApiProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodClientApiProcessor.cs,WriteFlood,The following statement contains a magic number: threads.Add(new Thread(_ => {  					client.ErrorOccurred += (s' e) => context.Fail(e.Exception' "Error on connection");  					client.ConnectAsync().Wait();    					for (int j = 0; j < count; ++j) {  						var task = client.AppendToStreamAsync(streams[rnd.Next(streamsCnt)]'  							ExpectedVersion.Any'  							new EventData(Guid.NewGuid()'  								"TakeSomeSpaceEvent"'  								false'  								Common.Utils.Helper.UTF8NoBom.GetBytes("DATA" + new string('*'' size))'  								Common.Utils.Helper.UTF8NoBom.GetBytes("METADATA" + new string('$'' 100))));  						task.ContinueWith(x => {  							if (x.IsFaulted) {  								context.Fail(x.Exception.InnerException' "Error on writing operation.");  								return;  							}    							var localAll = Interlocked.Increment(ref succ);  							if (localAll % 1000 == 0) Console.Write('.');  							if (localAll % 100000 == 0) {  								var elapsed = sw2.Elapsed;  								sw2.Restart();  								context.Log.Trace("\nDONE TOTAL {writes} WRITES IN {elapsed} ({rate:0.0}/s)."'  									localAll'  									elapsed'  									1000.0 * 100000 / elapsed.TotalMilliseconds);  							}    							if (localAll == requestsCnt) {  								context.Success();  								doneEvent.Set();  							}  						});  					}  				}) {IsBackground = true});
Magic Number,EventStore.TestClient.Commands,WriteFloodClientApiProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodClientApiProcessor.cs,WriteFlood,The following statement contains a magic number: var reqPerSec = (succ + 0.0) / sw.ElapsedMilliseconds * 1000;
Magic Number,EventStore.TestClient.Commands,WriteFloodClientApiProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodClientApiProcessor.cs,WriteFlood,The following statement contains a magic number: var failuresRate = (int)(100 * fail / (fail + succ));
Magic Number,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,Execute,The following statement contains a magic number: long requestsCnt = 5000;
Magic Number,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,Execute,The following statement contains a magic number: int streamsCnt = 1000;
Magic Number,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,Execute,The following statement contains a magic number: int size = 256;
Magic Number,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,Execute,The following statement contains a magic number: args.Length < 2 || args.Length > 5
Magic Number,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,Execute,The following statement contains a magic number: args.Length < 2 || args.Length > 5
Magic Number,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,Execute,The following statement contains a magic number: streamsCnt = int.Parse(args[2]);
Magic Number,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,Execute,The following statement contains a magic number: args.Length >= 3
Magic Number,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,Execute,The following statement contains a magic number: size = int.Parse(args[3]);
Magic Number,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,Execute,The following statement contains a magic number: args.Length >= 4
Magic Number,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,Execute,The following statement contains a magic number: batchSize = int.Parse(args[4]);
Magic Number,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,Execute,The following statement contains a magic number: args.Length >= 5
Magic Number,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,WriteFlood,The following statement contains a magic number: var client = context.Client.CreateTcpConnection(  					context'  					(conn' pkg) => {  						if (pkg.Command != TcpCommand.WriteEventsCompleted) {  							context.Fail(reason: string.Format("Unexpected TCP package: {0}."' pkg.Command));  							return;  						}    						var dto = pkg.Data.Deserialize<TcpClientMessageDto.WriteEventsCompleted>();  						monitor.EndOperation(pkg.CorrelationId);  						switch (dto.Result) {  							case TcpClientMessageDto.OperationResult.Success:  								Interlocked.Add(ref succ' batchSize);  								if (succ - last > 1000) {  									last = succ;  									Console.Write(".");  								}    								break;  							case TcpClientMessageDto.OperationResult.PrepareTimeout:  								Interlocked.Increment(ref prepTimeout);  								break;  							case TcpClientMessageDto.OperationResult.CommitTimeout:  								Interlocked.Increment(ref commitTimeout);  								break;  							case TcpClientMessageDto.OperationResult.ForwardTimeout:  								Interlocked.Increment(ref forwardTimeout);  								break;  							case TcpClientMessageDto.OperationResult.WrongExpectedVersion:  								Interlocked.Increment(ref wrongExpVersion);  								break;  							case TcpClientMessageDto.OperationResult.StreamDeleted:  								Interlocked.Increment(ref streamDeleted);  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						if (dto.Result != TcpClientMessageDto.OperationResult.Success)  							if (Interlocked.Increment(ref fail) % 1000 == 0)  								Console.Write('#');  						Interlocked.Increment(ref received);  						var localAll = Interlocked.Add(ref all' batchSize);  						if (localAll % 100000 == 0) {  							var elapsed = sw2.Elapsed;  							sw2.Restart();  							context.Log.Trace(  								"\nDONE TOTAL {writes} WRITES IN {elapsed} ({rate:0.0}/s) [S:{success}' F:{failures} (WEV:{wrongExpectedVersion}' P:{prepareTimeout}' C:{commitTimeout}' F:{forwardTimeout}' D:{streamDeleted})]."'  								localAll' elapsed' 1000.0 * 100000 / elapsed.TotalMilliseconds'  								succ' fail'  								wrongExpVersion' prepTimeout' commitTimeout' forwardTimeout' streamDeleted);  						}    						if (localAll >= requestsCnt) {  							context.Success();  							doneEvent.Set();  						}  					}'  					connectionClosed: (conn' err) => context.Fail(reason: "Connection was closed prematurely."));
Magic Number,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,WriteFlood,The following statement contains a magic number: var client = context.Client.CreateTcpConnection(  					context'  					(conn' pkg) => {  						if (pkg.Command != TcpCommand.WriteEventsCompleted) {  							context.Fail(reason: string.Format("Unexpected TCP package: {0}."' pkg.Command));  							return;  						}    						var dto = pkg.Data.Deserialize<TcpClientMessageDto.WriteEventsCompleted>();  						monitor.EndOperation(pkg.CorrelationId);  						switch (dto.Result) {  							case TcpClientMessageDto.OperationResult.Success:  								Interlocked.Add(ref succ' batchSize);  								if (succ - last > 1000) {  									last = succ;  									Console.Write(".");  								}    								break;  							case TcpClientMessageDto.OperationResult.PrepareTimeout:  								Interlocked.Increment(ref prepTimeout);  								break;  							case TcpClientMessageDto.OperationResult.CommitTimeout:  								Interlocked.Increment(ref commitTimeout);  								break;  							case TcpClientMessageDto.OperationResult.ForwardTimeout:  								Interlocked.Increment(ref forwardTimeout);  								break;  							case TcpClientMessageDto.OperationResult.WrongExpectedVersion:  								Interlocked.Increment(ref wrongExpVersion);  								break;  							case TcpClientMessageDto.OperationResult.StreamDeleted:  								Interlocked.Increment(ref streamDeleted);  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						if (dto.Result != TcpClientMessageDto.OperationResult.Success)  							if (Interlocked.Increment(ref fail) % 1000 == 0)  								Console.Write('#');  						Interlocked.Increment(ref received);  						var localAll = Interlocked.Add(ref all' batchSize);  						if (localAll % 100000 == 0) {  							var elapsed = sw2.Elapsed;  							sw2.Restart();  							context.Log.Trace(  								"\nDONE TOTAL {writes} WRITES IN {elapsed} ({rate:0.0}/s) [S:{success}' F:{failures} (WEV:{wrongExpectedVersion}' P:{prepareTimeout}' C:{commitTimeout}' F:{forwardTimeout}' D:{streamDeleted})]."'  								localAll' elapsed' 1000.0 * 100000 / elapsed.TotalMilliseconds'  								succ' fail'  								wrongExpVersion' prepTimeout' commitTimeout' forwardTimeout' streamDeleted);  						}    						if (localAll >= requestsCnt) {  							context.Success();  							doneEvent.Set();  						}  					}'  					connectionClosed: (conn' err) => context.Fail(reason: "Connection was closed prematurely."));
Magic Number,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,WriteFlood,The following statement contains a magic number: var client = context.Client.CreateTcpConnection(  					context'  					(conn' pkg) => {  						if (pkg.Command != TcpCommand.WriteEventsCompleted) {  							context.Fail(reason: string.Format("Unexpected TCP package: {0}."' pkg.Command));  							return;  						}    						var dto = pkg.Data.Deserialize<TcpClientMessageDto.WriteEventsCompleted>();  						monitor.EndOperation(pkg.CorrelationId);  						switch (dto.Result) {  							case TcpClientMessageDto.OperationResult.Success:  								Interlocked.Add(ref succ' batchSize);  								if (succ - last > 1000) {  									last = succ;  									Console.Write(".");  								}    								break;  							case TcpClientMessageDto.OperationResult.PrepareTimeout:  								Interlocked.Increment(ref prepTimeout);  								break;  							case TcpClientMessageDto.OperationResult.CommitTimeout:  								Interlocked.Increment(ref commitTimeout);  								break;  							case TcpClientMessageDto.OperationResult.ForwardTimeout:  								Interlocked.Increment(ref forwardTimeout);  								break;  							case TcpClientMessageDto.OperationResult.WrongExpectedVersion:  								Interlocked.Increment(ref wrongExpVersion);  								break;  							case TcpClientMessageDto.OperationResult.StreamDeleted:  								Interlocked.Increment(ref streamDeleted);  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						if (dto.Result != TcpClientMessageDto.OperationResult.Success)  							if (Interlocked.Increment(ref fail) % 1000 == 0)  								Console.Write('#');  						Interlocked.Increment(ref received);  						var localAll = Interlocked.Add(ref all' batchSize);  						if (localAll % 100000 == 0) {  							var elapsed = sw2.Elapsed;  							sw2.Restart();  							context.Log.Trace(  								"\nDONE TOTAL {writes} WRITES IN {elapsed} ({rate:0.0}/s) [S:{success}' F:{failures} (WEV:{wrongExpectedVersion}' P:{prepareTimeout}' C:{commitTimeout}' F:{forwardTimeout}' D:{streamDeleted})]."'  								localAll' elapsed' 1000.0 * 100000 / elapsed.TotalMilliseconds'  								succ' fail'  								wrongExpVersion' prepTimeout' commitTimeout' forwardTimeout' streamDeleted);  						}    						if (localAll >= requestsCnt) {  							context.Success();  							doneEvent.Set();  						}  					}'  					connectionClosed: (conn' err) => context.Fail(reason: "Connection was closed prematurely."));
Magic Number,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,WriteFlood,The following statement contains a magic number: var client = context.Client.CreateTcpConnection(  					context'  					(conn' pkg) => {  						if (pkg.Command != TcpCommand.WriteEventsCompleted) {  							context.Fail(reason: string.Format("Unexpected TCP package: {0}."' pkg.Command));  							return;  						}    						var dto = pkg.Data.Deserialize<TcpClientMessageDto.WriteEventsCompleted>();  						monitor.EndOperation(pkg.CorrelationId);  						switch (dto.Result) {  							case TcpClientMessageDto.OperationResult.Success:  								Interlocked.Add(ref succ' batchSize);  								if (succ - last > 1000) {  									last = succ;  									Console.Write(".");  								}    								break;  							case TcpClientMessageDto.OperationResult.PrepareTimeout:  								Interlocked.Increment(ref prepTimeout);  								break;  							case TcpClientMessageDto.OperationResult.CommitTimeout:  								Interlocked.Increment(ref commitTimeout);  								break;  							case TcpClientMessageDto.OperationResult.ForwardTimeout:  								Interlocked.Increment(ref forwardTimeout);  								break;  							case TcpClientMessageDto.OperationResult.WrongExpectedVersion:  								Interlocked.Increment(ref wrongExpVersion);  								break;  							case TcpClientMessageDto.OperationResult.StreamDeleted:  								Interlocked.Increment(ref streamDeleted);  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						if (dto.Result != TcpClientMessageDto.OperationResult.Success)  							if (Interlocked.Increment(ref fail) % 1000 == 0)  								Console.Write('#');  						Interlocked.Increment(ref received);  						var localAll = Interlocked.Add(ref all' batchSize);  						if (localAll % 100000 == 0) {  							var elapsed = sw2.Elapsed;  							sw2.Restart();  							context.Log.Trace(  								"\nDONE TOTAL {writes} WRITES IN {elapsed} ({rate:0.0}/s) [S:{success}' F:{failures} (WEV:{wrongExpectedVersion}' P:{prepareTimeout}' C:{commitTimeout}' F:{forwardTimeout}' D:{streamDeleted})]."'  								localAll' elapsed' 1000.0 * 100000 / elapsed.TotalMilliseconds'  								succ' fail'  								wrongExpVersion' prepTimeout' commitTimeout' forwardTimeout' streamDeleted);  						}    						if (localAll >= requestsCnt) {  							context.Success();  							doneEvent.Set();  						}  					}'  					connectionClosed: (conn' err) => context.Fail(reason: "Connection was closed prematurely."));
Magic Number,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,WriteFlood,The following statement contains a magic number: var client = context.Client.CreateTcpConnection(  					context'  					(conn' pkg) => {  						if (pkg.Command != TcpCommand.WriteEventsCompleted) {  							context.Fail(reason: string.Format("Unexpected TCP package: {0}."' pkg.Command));  							return;  						}    						var dto = pkg.Data.Deserialize<TcpClientMessageDto.WriteEventsCompleted>();  						monitor.EndOperation(pkg.CorrelationId);  						switch (dto.Result) {  							case TcpClientMessageDto.OperationResult.Success:  								Interlocked.Add(ref succ' batchSize);  								if (succ - last > 1000) {  									last = succ;  									Console.Write(".");  								}    								break;  							case TcpClientMessageDto.OperationResult.PrepareTimeout:  								Interlocked.Increment(ref prepTimeout);  								break;  							case TcpClientMessageDto.OperationResult.CommitTimeout:  								Interlocked.Increment(ref commitTimeout);  								break;  							case TcpClientMessageDto.OperationResult.ForwardTimeout:  								Interlocked.Increment(ref forwardTimeout);  								break;  							case TcpClientMessageDto.OperationResult.WrongExpectedVersion:  								Interlocked.Increment(ref wrongExpVersion);  								break;  							case TcpClientMessageDto.OperationResult.StreamDeleted:  								Interlocked.Increment(ref streamDeleted);  								break;  							default:  								throw new ArgumentOutOfRangeException();  						}    						if (dto.Result != TcpClientMessageDto.OperationResult.Success)  							if (Interlocked.Increment(ref fail) % 1000 == 0)  								Console.Write('#');  						Interlocked.Increment(ref received);  						var localAll = Interlocked.Add(ref all' batchSize);  						if (localAll % 100000 == 0) {  							var elapsed = sw2.Elapsed;  							sw2.Restart();  							context.Log.Trace(  								"\nDONE TOTAL {writes} WRITES IN {elapsed} ({rate:0.0}/s) [S:{success}' F:{failures} (WEV:{wrongExpectedVersion}' P:{prepareTimeout}' C:{commitTimeout}' F:{forwardTimeout}' D:{streamDeleted})]."'  								localAll' elapsed' 1000.0 * 100000 / elapsed.TotalMilliseconds'  								succ' fail'  								wrongExpVersion' prepTimeout' commitTimeout' forwardTimeout' streamDeleted);  						}    						if (localAll >= requestsCnt) {  							context.Success();  							doneEvent.Set();  						}  					}'  					connectionClosed: (conn' err) => context.Fail(reason: "Connection was closed prematurely."));
Magic Number,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,WriteFlood,The following statement contains a magic number: threads.Add(new Thread(() => {  					for (int j = 0; j < count; ++j) {  						var events = new TcpClientMessageDto.NewEvent[batchSize];  						for (int q = 0; q < batchSize; q++) {  							events[q] = new TcpClientMessageDto.NewEvent(Guid.NewGuid().ToByteArray()'  								"TakeSomeSpaceEvent"'  								1' 0'  								Common.Utils.Helper.UTF8NoBom.GetBytes(  									"{ \"DATA\" : \"" + new string('*'' size) + "\"}")'  								Common.Utils.Helper.UTF8NoBom.GetBytes(  									"{ \"METADATA\" : \"" + new string('$'' 100) + "\"}"));  						}    						var corrid = Guid.NewGuid();  						var write = new TcpClientMessageDto.WriteEvents(  							streams[rnd.Next(streamsCnt)]'  							ExpectedVersion.Any'  							events'  							false);  						var package = new TcpPackage(TcpCommand.WriteEvents' corrid' write.Serialize());  						monitor.StartOperation(corrid);  						client.EnqueueSend(package.AsByteArray());    						var localSent = Interlocked.Increment(ref sent);  						while (localSent - Interlocked.Read(ref received) >  						       context.Client.Options.WriteWindow / clientsCnt) {  							Thread.Sleep(1);  						}  					}  				}) {IsBackground = true});
Magic Number,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,WriteFlood,The following statement contains a magic number: var reqPerSec = (all + 0.0) / sw.ElapsedMilliseconds * 1000;
Magic Number,EventStore.TestClient.Commands,WriteFloodProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodProcessor.cs,WriteFlood,The following statement contains a magic number: var failuresRate = (int)(100 * fail / (fail + succ));
Magic Number,EventStore.TestClient.Commands,WriteFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodWaitingProcessor.cs,Execute,The following statement contains a magic number: int requestsCnt = 5000;
Magic Number,EventStore.TestClient.Commands,WriteFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodWaitingProcessor.cs,Execute,The following statement contains a magic number: int payloadSize = 256 + 100;
Magic Number,EventStore.TestClient.Commands,WriteFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodWaitingProcessor.cs,Execute,The following statement contains a magic number: int payloadSize = 256 + 100;
Magic Number,EventStore.TestClient.Commands,WriteFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodWaitingProcessor.cs,Execute,The following statement contains a magic number: args.Length > 3 || args.Length < 2
Magic Number,EventStore.TestClient.Commands,WriteFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodWaitingProcessor.cs,Execute,The following statement contains a magic number: args.Length > 3 || args.Length < 2
Magic Number,EventStore.TestClient.Commands,WriteFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodWaitingProcessor.cs,Execute,The following statement contains a magic number: payloadSize = int.Parse(args[2]);
Magic Number,EventStore.TestClient.Commands,WriteFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodWaitingProcessor.cs,Execute,The following statement contains a magic number: args.Length == 3
Magic Number,EventStore.TestClient.Commands,WriteFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodWaitingProcessor.cs,WriteFlood,The following statement contains a magic number: var dataSize = Math.Max(0' payloadSize - 100);
Magic Number,EventStore.TestClient.Commands,WriteFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodWaitingProcessor.cs,WriteFlood,The following statement contains a magic number: var metadataSize = Math.Min(100' payloadSize);
Magic Number,EventStore.TestClient.Commands,WriteFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodWaitingProcessor.cs,WriteFlood,The following statement contains a magic number: var client = context.Client.CreateTcpConnection(  					context'  					(conn' pkg) => {  						if (pkg.Command != TcpCommand.WriteEventsCompleted) {  							context.Fail(reason: string.Format("Unexpected TCP package: {0}."' pkg.Command));  							return;  						}    						Interlocked.Increment(ref received);  						var dto = pkg.Data.Deserialize<TcpClientMessageDto.WriteEventsCompleted>();  						if (dto.Result == TcpClientMessageDto.OperationResult.Success) {  							if (Interlocked.Increment(ref succ) % 1000 == 0) Console.Write(".");  						} else {  							if (Interlocked.Increment(ref fail) % 1000 == 0) Console.Write("#");  						}    						if (Interlocked.Increment(ref all) == requestsCnt) {  							context.Success();  							doneEvent.Set();  						}    						autoEvent.Set();  					}'  					connectionClosed: (conn' err) => context.Fail(reason: "Connection was closed prematurely."));
Magic Number,EventStore.TestClient.Commands,WriteFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodWaitingProcessor.cs,WriteFlood,The following statement contains a magic number: var client = context.Client.CreateTcpConnection(  					context'  					(conn' pkg) => {  						if (pkg.Command != TcpCommand.WriteEventsCompleted) {  							context.Fail(reason: string.Format("Unexpected TCP package: {0}."' pkg.Command));  							return;  						}    						Interlocked.Increment(ref received);  						var dto = pkg.Data.Deserialize<TcpClientMessageDto.WriteEventsCompleted>();  						if (dto.Result == TcpClientMessageDto.OperationResult.Success) {  							if (Interlocked.Increment(ref succ) % 1000 == 0) Console.Write(".");  						} else {  							if (Interlocked.Increment(ref fail) % 1000 == 0) Console.Write("#");  						}    						if (Interlocked.Increment(ref all) == requestsCnt) {  							context.Success();  							doneEvent.Set();  						}    						autoEvent.Set();  					}'  					connectionClosed: (conn' err) => context.Fail(reason: "Connection was closed prematurely."));
Magic Number,EventStore.TestClient.Commands,WriteFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodWaitingProcessor.cs,WriteFlood,The following statement contains a magic number: var reqPerSec = (all + 0.0) / sw.ElapsedMilliseconds * 1000;
Magic Number,EventStore.TestClient.Commands,WriteFloodWaitingProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteFloodWaitingProcessor.cs,WriteFlood,The following statement contains a magic number: PerfUtils.LogTeamCityGraphData(  				string.Format("{0}-{1}-{2}-failureSuccessRate"' Keyword' clientsCnt' requestsCnt)'  				(int)(100.0 * fail / (fail + succ)));
Magic Number,EventStore.TestClient.Commands,WriteJsonProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteJsonProcessor.cs,Execute,The following statement contains a magic number: args.Length < 3 || args.Length > 4
Magic Number,EventStore.TestClient.Commands,WriteJsonProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteJsonProcessor.cs,Execute,The following statement contains a magic number: args.Length < 3 || args.Length > 4
Magic Number,EventStore.TestClient.Commands,WriteJsonProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteJsonProcessor.cs,Execute,The following statement contains a magic number: data = args[2];
Magic Number,EventStore.TestClient.Commands,WriteJsonProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteJsonProcessor.cs,Execute,The following statement contains a magic number: metadata = args[3];
Magic Number,EventStore.TestClient.Commands,WriteJsonProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteJsonProcessor.cs,Execute,The following statement contains a magic number: args.Length == 4
Magic Number,EventStore.TestClient.Commands,WriteJsonProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteJsonProcessor.cs,GenerateTestData,The following statement contains a magic number: return Codec.Json.To(new TestData(Guid.NewGuid().ToString()' _random.Next(1' 101)));
Magic Number,EventStore.TestClient.Commands,WriteLongTermProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteLongTermProcessor.cs,Execute,The following statement contains a magic number: int maxPerSecond = 2;
Magic Number,EventStore.TestClient.Commands,WriteLongTermProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteLongTermProcessor.cs,Execute,The following statement contains a magic number: args.Length != 4 && args.Length != 5
Magic Number,EventStore.TestClient.Commands,WriteLongTermProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteLongTermProcessor.cs,Execute,The following statement contains a magic number: args.Length != 4 && args.Length != 5
Magic Number,EventStore.TestClient.Commands,WriteLongTermProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteLongTermProcessor.cs,Execute,The following statement contains a magic number: maxPerSecond = int.Parse(args[2]);
Magic Number,EventStore.TestClient.Commands,WriteLongTermProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteLongTermProcessor.cs,Execute,The following statement contains a magic number: runTimeMinutes = int.Parse(args[3]);
Magic Number,EventStore.TestClient.Commands,WriteLongTermProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteLongTermProcessor.cs,Execute,The following statement contains a magic number: eventStreamId = args[4];
Magic Number,EventStore.TestClient.Commands,WriteLongTermProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteLongTermProcessor.cs,Execute,The following statement contains a magic number: args.Length == 5
Magic Number,EventStore.TestClient.Commands,WriteLongTermProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteLongTermProcessor.cs,Flood,The following statement contains a magic number: var esId = eventStreamId ?? "Stream-" + Thread.CurrentThread.ManagedThreadId % 3;
Magic Number,EventStore.TestClient.Commands,WriteLongTermProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteLongTermProcessor.cs,Flood,The following statement contains a magic number: threads.Add(new Thread(() => {  					var sentCount = 0;  					var sleepTime = 0;    					var dataSizeCoefficient = 1;  					var currentMinute = -1;    					while (true) {  						TimeSpan elapsed;  						lock (watchLockRoot)  							elapsed = sw.Elapsed;    						if (elapsed.TotalMinutes > runTimeMinutes) {  							done = true;  							doneEvent.Set();  							break;  						}    						if (sentCount == 0) {  							int elapsedMinutesInt = (int)elapsed.TotalMinutes;  							lock (_randomLockRoot) {  								sentCount = minPerSecond == maxPerSecond  									? maxPerSecond  									: _random.Next(minPerSecond' maxPerSecond);  								dataSizeCoefficient = _random.Next(8' 256);  							}    							if (currentMinute != elapsedMinutesInt) {  								currentMinute = elapsedMinutesInt;  								context.Log.Info(  									"\nElapsed {elapsed} of {runTime} minutes' sent {sent}; next block coef. {dataSizeCoefficient}"'  									elapsedMinutesInt'  									runTimeMinutes'  									sent'  									dataSizeCoefficient);  							}    							sleepTime = 1000 / sentCount;  						}    						var dataSize = dataSizeCoefficient * 8;  						var write = new TcpClientMessageDto.WriteEvents(  							esId'  							ExpectedVersion.Any'  							new[] {  								new TcpClientMessageDto.NewEvent(  									Guid.NewGuid().ToByteArray()'  									"TakeSomeSpaceEvent"'  									0' 0'  									Helper.UTF8NoBom.GetBytes(  										"DATA" + dataSize.ToString(" 00000 ") + new string('*'' dataSize))'  									Helper.UTF8NoBom.GetBytes("METADATA" + new string('$'' 100)))  							}'  							false);  						var package = new TcpPackage(TcpCommand.WriteEvents' Guid.NewGuid()' write.Serialize());  						client.EnqueueSend(package.AsByteArray());    						Interlocked.Increment(ref sent);    						Thread.Sleep(sleepTime);  						sentCount -= 1;    						while (sent - received > context.Client.Options.WriteWindow / clientsCnt) {  							Thread.Sleep(1);  						}  					}  				}));
Magic Number,EventStore.TestClient.Commands,WriteLongTermProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteLongTermProcessor.cs,Flood,The following statement contains a magic number: threads.Add(new Thread(() => {  					var sentCount = 0;  					var sleepTime = 0;    					var dataSizeCoefficient = 1;  					var currentMinute = -1;    					while (true) {  						TimeSpan elapsed;  						lock (watchLockRoot)  							elapsed = sw.Elapsed;    						if (elapsed.TotalMinutes > runTimeMinutes) {  							done = true;  							doneEvent.Set();  							break;  						}    						if (sentCount == 0) {  							int elapsedMinutesInt = (int)elapsed.TotalMinutes;  							lock (_randomLockRoot) {  								sentCount = minPerSecond == maxPerSecond  									? maxPerSecond  									: _random.Next(minPerSecond' maxPerSecond);  								dataSizeCoefficient = _random.Next(8' 256);  							}    							if (currentMinute != elapsedMinutesInt) {  								currentMinute = elapsedMinutesInt;  								context.Log.Info(  									"\nElapsed {elapsed} of {runTime} minutes' sent {sent}; next block coef. {dataSizeCoefficient}"'  									elapsedMinutesInt'  									runTimeMinutes'  									sent'  									dataSizeCoefficient);  							}    							sleepTime = 1000 / sentCount;  						}    						var dataSize = dataSizeCoefficient * 8;  						var write = new TcpClientMessageDto.WriteEvents(  							esId'  							ExpectedVersion.Any'  							new[] {  								new TcpClientMessageDto.NewEvent(  									Guid.NewGuid().ToByteArray()'  									"TakeSomeSpaceEvent"'  									0' 0'  									Helper.UTF8NoBom.GetBytes(  										"DATA" + dataSize.ToString(" 00000 ") + new string('*'' dataSize))'  									Helper.UTF8NoBom.GetBytes("METADATA" + new string('$'' 100)))  							}'  							false);  						var package = new TcpPackage(TcpCommand.WriteEvents' Guid.NewGuid()' write.Serialize());  						client.EnqueueSend(package.AsByteArray());    						Interlocked.Increment(ref sent);    						Thread.Sleep(sleepTime);  						sentCount -= 1;    						while (sent - received > context.Client.Options.WriteWindow / clientsCnt) {  							Thread.Sleep(1);  						}  					}  				}));
Magic Number,EventStore.TestClient.Commands,WriteLongTermProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteLongTermProcessor.cs,Flood,The following statement contains a magic number: threads.Add(new Thread(() => {  					var sentCount = 0;  					var sleepTime = 0;    					var dataSizeCoefficient = 1;  					var currentMinute = -1;    					while (true) {  						TimeSpan elapsed;  						lock (watchLockRoot)  							elapsed = sw.Elapsed;    						if (elapsed.TotalMinutes > runTimeMinutes) {  							done = true;  							doneEvent.Set();  							break;  						}    						if (sentCount == 0) {  							int elapsedMinutesInt = (int)elapsed.TotalMinutes;  							lock (_randomLockRoot) {  								sentCount = minPerSecond == maxPerSecond  									? maxPerSecond  									: _random.Next(minPerSecond' maxPerSecond);  								dataSizeCoefficient = _random.Next(8' 256);  							}    							if (currentMinute != elapsedMinutesInt) {  								currentMinute = elapsedMinutesInt;  								context.Log.Info(  									"\nElapsed {elapsed} of {runTime} minutes' sent {sent}; next block coef. {dataSizeCoefficient}"'  									elapsedMinutesInt'  									runTimeMinutes'  									sent'  									dataSizeCoefficient);  							}    							sleepTime = 1000 / sentCount;  						}    						var dataSize = dataSizeCoefficient * 8;  						var write = new TcpClientMessageDto.WriteEvents(  							esId'  							ExpectedVersion.Any'  							new[] {  								new TcpClientMessageDto.NewEvent(  									Guid.NewGuid().ToByteArray()'  									"TakeSomeSpaceEvent"'  									0' 0'  									Helper.UTF8NoBom.GetBytes(  										"DATA" + dataSize.ToString(" 00000 ") + new string('*'' dataSize))'  									Helper.UTF8NoBom.GetBytes("METADATA" + new string('$'' 100)))  							}'  							false);  						var package = new TcpPackage(TcpCommand.WriteEvents' Guid.NewGuid()' write.Serialize());  						client.EnqueueSend(package.AsByteArray());    						Interlocked.Increment(ref sent);    						Thread.Sleep(sleepTime);  						sentCount -= 1;    						while (sent - received > context.Client.Options.WriteWindow / clientsCnt) {  							Thread.Sleep(1);  						}  					}  				}));
Magic Number,EventStore.TestClient.Commands,WriteLongTermProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteLongTermProcessor.cs,Flood,The following statement contains a magic number: threads.Add(new Thread(() => {  					var sentCount = 0;  					var sleepTime = 0;    					var dataSizeCoefficient = 1;  					var currentMinute = -1;    					while (true) {  						TimeSpan elapsed;  						lock (watchLockRoot)  							elapsed = sw.Elapsed;    						if (elapsed.TotalMinutes > runTimeMinutes) {  							done = true;  							doneEvent.Set();  							break;  						}    						if (sentCount == 0) {  							int elapsedMinutesInt = (int)elapsed.TotalMinutes;  							lock (_randomLockRoot) {  								sentCount = minPerSecond == maxPerSecond  									? maxPerSecond  									: _random.Next(minPerSecond' maxPerSecond);  								dataSizeCoefficient = _random.Next(8' 256);  							}    							if (currentMinute != elapsedMinutesInt) {  								currentMinute = elapsedMinutesInt;  								context.Log.Info(  									"\nElapsed {elapsed} of {runTime} minutes' sent {sent}; next block coef. {dataSizeCoefficient}"'  									elapsedMinutesInt'  									runTimeMinutes'  									sent'  									dataSizeCoefficient);  							}    							sleepTime = 1000 / sentCount;  						}    						var dataSize = dataSizeCoefficient * 8;  						var write = new TcpClientMessageDto.WriteEvents(  							esId'  							ExpectedVersion.Any'  							new[] {  								new TcpClientMessageDto.NewEvent(  									Guid.NewGuid().ToByteArray()'  									"TakeSomeSpaceEvent"'  									0' 0'  									Helper.UTF8NoBom.GetBytes(  										"DATA" + dataSize.ToString(" 00000 ") + new string('*'' dataSize))'  									Helper.UTF8NoBom.GetBytes("METADATA" + new string('$'' 100)))  							}'  							false);  						var package = new TcpPackage(TcpCommand.WriteEvents' Guid.NewGuid()' write.Serialize());  						client.EnqueueSend(package.AsByteArray());    						Interlocked.Increment(ref sent);    						Thread.Sleep(sleepTime);  						sentCount -= 1;    						while (sent - received > context.Client.Options.WriteWindow / clientsCnt) {  							Thread.Sleep(1);  						}  					}  				}));
Magic Number,EventStore.TestClient.Commands,WriteLongTermProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteLongTermProcessor.cs,Flood,The following statement contains a magic number: threads.Add(new Thread(() => {  					var sentCount = 0;  					var sleepTime = 0;    					var dataSizeCoefficient = 1;  					var currentMinute = -1;    					while (true) {  						TimeSpan elapsed;  						lock (watchLockRoot)  							elapsed = sw.Elapsed;    						if (elapsed.TotalMinutes > runTimeMinutes) {  							done = true;  							doneEvent.Set();  							break;  						}    						if (sentCount == 0) {  							int elapsedMinutesInt = (int)elapsed.TotalMinutes;  							lock (_randomLockRoot) {  								sentCount = minPerSecond == maxPerSecond  									? maxPerSecond  									: _random.Next(minPerSecond' maxPerSecond);  								dataSizeCoefficient = _random.Next(8' 256);  							}    							if (currentMinute != elapsedMinutesInt) {  								currentMinute = elapsedMinutesInt;  								context.Log.Info(  									"\nElapsed {elapsed} of {runTime} minutes' sent {sent}; next block coef. {dataSizeCoefficient}"'  									elapsedMinutesInt'  									runTimeMinutes'  									sent'  									dataSizeCoefficient);  							}    							sleepTime = 1000 / sentCount;  						}    						var dataSize = dataSizeCoefficient * 8;  						var write = new TcpClientMessageDto.WriteEvents(  							esId'  							ExpectedVersion.Any'  							new[] {  								new TcpClientMessageDto.NewEvent(  									Guid.NewGuid().ToByteArray()'  									"TakeSomeSpaceEvent"'  									0' 0'  									Helper.UTF8NoBom.GetBytes(  										"DATA" + dataSize.ToString(" 00000 ") + new string('*'' dataSize))'  									Helper.UTF8NoBom.GetBytes("METADATA" + new string('$'' 100)))  							}'  							false);  						var package = new TcpPackage(TcpCommand.WriteEvents' Guid.NewGuid()' write.Serialize());  						client.EnqueueSend(package.AsByteArray());    						Interlocked.Increment(ref sent);    						Thread.Sleep(sleepTime);  						sentCount -= 1;    						while (sent - received > context.Client.Options.WriteWindow / clientsCnt) {  							Thread.Sleep(1);  						}  					}  				}));
Magic Number,EventStore.TestClient.Commands,WriteLongTermProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteLongTermProcessor.cs,Flood,The following statement contains a magic number: var reqPerSec = (requestsCnt + 0.0) / sw.ElapsedMilliseconds * 1000;
Magic Number,EventStore.TestClient.Commands,WriteLongTermProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteLongTermProcessor.cs,Flood,The following statement contains a magic number: PerfUtils.LogTeamCityGraphData(  				string.Format("{0}-{1}-{2}-failureSuccessRate"' Keyword' clientsCnt' requestsCnt)'  				100 * fail / (fail + succ));
Magic Number,EventStore.TestClient.Commands,WriteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteProcessor.cs,Execute,The following statement contains a magic number: args.Length < 3 || args.Length > 7 || args.Length == 6
Magic Number,EventStore.TestClient.Commands,WriteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteProcessor.cs,Execute,The following statement contains a magic number: args.Length < 3 || args.Length > 7 || args.Length == 6
Magic Number,EventStore.TestClient.Commands,WriteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteProcessor.cs,Execute,The following statement contains a magic number: args.Length < 3 || args.Length > 7 || args.Length == 6
Magic Number,EventStore.TestClient.Commands,WriteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteProcessor.cs,Execute,The following statement contains a magic number: data = args[2];
Magic Number,EventStore.TestClient.Commands,WriteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteProcessor.cs,Execute,The following statement contains a magic number: metadata = args[3];
Magic Number,EventStore.TestClient.Commands,WriteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteProcessor.cs,Execute,The following statement contains a magic number: args.Length >= 4
Magic Number,EventStore.TestClient.Commands,WriteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteProcessor.cs,Execute,The following statement contains a magic number: isJson = bool.Parse(args[4]);
Magic Number,EventStore.TestClient.Commands,WriteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteProcessor.cs,Execute,The following statement contains a magic number: args.Length >= 5
Magic Number,EventStore.TestClient.Commands,WriteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteProcessor.cs,Execute,The following statement contains a magic number: login = args[5];
Magic Number,EventStore.TestClient.Commands,WriteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteProcessor.cs,Execute,The following statement contains a magic number: pass = args[6];
Magic Number,EventStore.TestClient.Commands,WriteProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\WriteProcessor.cs,Execute,The following statement contains a magic number: args.Length >= 7
Magic Number,EventStore.TestClient.Commands.DvuBasic,AccountCheckPoint,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\BankAccountBasicProducer.cs,GetHashCode,The following statement contains a magic number: return (CreditedAmount.GetHashCode() * 397) ^ DebitedAmount.GetHashCode();
Magic Number,EventStore.TestClient.Commands.DvuBasic,BankAccountEventFactory,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\BankAccountEventFactory.cs,CreateAccountObject,The following statement contains a magic number: const int checkpointVersion = 10;
Magic Number,EventStore.TestClient.Commands.DvuBasic,BankAccountEventFactory,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\BankAccountEventFactory.cs,CreateAccountObject,The following statement contains a magic number: var elementsCount = internalCounter / 2;
Magic Number,EventStore.TestClient.Commands.DvuBasic,BankAccountEventFactory,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\BankAccountEventFactory.cs,CreateAccountObject,The following statement contains a magic number: var creditedSum = ComputeSum(20' elementsCount' 20) - ComputeSum(100' otherCheckPointsCount' 100);
Magic Number,EventStore.TestClient.Commands.DvuBasic,BankAccountEventFactory,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\BankAccountEventFactory.cs,CreateAccountObject,The following statement contains a magic number: var creditedSum = ComputeSum(20' elementsCount' 20) - ComputeSum(100' otherCheckPointsCount' 100);
Magic Number,EventStore.TestClient.Commands.DvuBasic,BankAccountEventFactory,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\BankAccountEventFactory.cs,CreateAccountObject,The following statement contains a magic number: var creditedSum = ComputeSum(20' elementsCount' 20) - ComputeSum(100' otherCheckPointsCount' 100);
Magic Number,EventStore.TestClient.Commands.DvuBasic,BankAccountEventFactory,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\BankAccountEventFactory.cs,CreateAccountObject,The following statement contains a magic number: var creditedSum = ComputeSum(20' elementsCount' 20) - ComputeSum(100' otherCheckPointsCount' 100);
Magic Number,EventStore.TestClient.Commands.DvuBasic,BankAccountEventFactory,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\BankAccountEventFactory.cs,CreateAccountObject,The following statement contains a magic number: var debitedSum = ComputeSum(10' elementsCount' 20);
Magic Number,EventStore.TestClient.Commands.DvuBasic,BankAccountEventFactory,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\BankAccountEventFactory.cs,CreateAccountObject,The following statement contains a magic number: var debitedSum = ComputeSum(10' elementsCount' 20);
Magic Number,EventStore.TestClient.Commands.DvuBasic,BankAccountEventFactory,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\BankAccountEventFactory.cs,ComputeSum,The following statement contains a magic number: var sum = count * (2 * first + step * (count - 1)) / 2;
Magic Number,EventStore.TestClient.Commands.DvuBasic,BankAccountEventFactory,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\BankAccountEventFactory.cs,ComputeSum,The following statement contains a magic number: var sum = count * (2 * first + step * (count - 1)) / 2;
Magic Number,EventStore.TestClient.Commands.DvuBasic,DvuBasicProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\DvuBasicProcessor.cs,Execute,The following statement contains a magic number: var writers = 20;
Magic Number,EventStore.TestClient.Commands.DvuBasic,DvuBasicProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\DvuBasicProcessor.cs,Execute,The following statement contains a magic number: var readers = 30;
Magic Number,EventStore.TestClient.Commands.DvuBasic,DvuBasicProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\DvuBasicProcessor.cs,Execute,The following statement contains a magic number: var events = 1000000;
Magic Number,EventStore.TestClient.Commands.DvuBasic,DvuBasicProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\DvuBasicProcessor.cs,Execute,The following statement contains a magic number: var streams = 1000;
Magic Number,EventStore.TestClient.Commands.DvuBasic,DvuBasicProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\DvuBasicProcessor.cs,Execute,The following statement contains a magic number: args.Length != 0 && args.Length != 5
Magic Number,EventStore.TestClient.Commands.DvuBasic,DvuBasicProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\DvuBasicProcessor.cs,Execute,The following statement contains a magic number: !int.TryParse(args[2]' out eventsArg)
Magic Number,EventStore.TestClient.Commands.DvuBasic,DvuBasicProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\DvuBasicProcessor.cs,Execute,The following statement contains a magic number: !int.TryParse(args[3]' out streamsArg)
Magic Number,EventStore.TestClient.Commands.DvuBasic,DvuBasicProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\DvuBasicProcessor.cs,Execute,The following statement contains a magic number: string[] producersArg = args[4].Split(new[] {"'"}' StringSplitOptions.RemoveEmptyEntries)  					.Select(p => p.Trim().ToLower()).Distinct().ToArray();
Magic Number,EventStore.TestClient.Commands.DvuBasic,DvuBasicProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\DvuBasicProcessor.cs,Write,The following statement contains a magic number: Action<TcpTypedConnection<byte[]>' TcpPackage> packageHandler = (conn' pkg) => {  				var dto = pkg.Data.Deserialize<TcpClientMessageDto.WriteEventsCompleted>();  				switch (dto.Result) {  					case TcpClientMessageDto.OperationResult.Success:  						lock (_heads) {  							var currentHead = _heads[streamIdx];  							Ensure.Equal(currentHead' head' "currentHead");  							_heads[streamIdx]++;  						}    						break;  					case TcpClientMessageDto.OperationResult.PrepareTimeout:  						prepareTimeouts++;  						failed++;  						break;  					case TcpClientMessageDto.OperationResult.CommitTimeout:  						commitTimeouts++;  						failed++;  						break;  					case TcpClientMessageDto.OperationResult.ForwardTimeout:  						forwardTimeouts++;  						failed++;  						break;  					case TcpClientMessageDto.OperationResult.WrongExpectedVersion:  						wrongExpectedVersion++;  						failed++;  						break;  					case TcpClientMessageDto.OperationResult.StreamDeleted:  						streamsDeleted++;  						failed++;  						break;  					default:  						throw new ArgumentOutOfRangeException();  				}    				sent++;  				if (sent % 1000 == 0)  					status.ReportWritesProgress(writerIdx' sent' prepareTimeouts' commitTimeouts' forwardTimeouts'  						wrongExpectedVersion' streamsDeleted' failed' requests);  				iteration.Set();  			};
Magic Number,EventStore.TestClient.Commands.DvuBasic,DvuBasicProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\DvuBasicProcessor.cs,Read,The following statement contains a magic number: Action<TcpTypedConnection<byte[]>' TcpPackage> packageReceived = (conn' pkg) => {  				var dto = pkg.Data.Deserialize<TcpClientMessageDto.ReadEventCompleted>();  				switch ((ReadEventResult)dto.Result) {  					case ReadEventResult.Success:  						if (Equal(_streams[streamIdx]' eventidx' dto.Event.Event.EventType' dto.Event.Event.Data)) {  							successes++;  							if (successes % 1000 == 0)  								status.ReportReadsProgress(readerIdx' successes' fails);  						} else {  							fails++;  							status.ReportReadError(readerIdx' _streams[streamIdx]' eventidx);  						}    						break;  					case ReadEventResult.NotFound:  					case ReadEventResult.NoStream:  					case ReadEventResult.StreamDeleted:  					case ReadEventResult.Error:  					case ReadEventResult.AccessDenied:  						fails++;  						status.ReportNotFoundOnRead(readerIdx' _streams[streamIdx]' eventidx);  						break;  					default:  						throw new ArgumentOutOfRangeException();  				}    				iteration.Set();  			};
Magic Number,EventStore.TestClient.Commands.DvuBasic,DvuBasicProcessor,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\DvuBasicProcessor.cs,NextRandomEventVersion,The following statement contains a magic number: return head % 2 == 0 ? head : rnd.Next(1' head);
Magic Number,EventStore.TestClient.Commands.DvuBasic,Status,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\Status.cs,ReportWritesProgress,The following statement contains a magic number: failsP > 50d
Magic Number,EventStore.TestClient.Commands.DvuBasic,Status,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\Status.cs,ToPercent,The following statement contains a magic number: var approx = (value / (double)max) * 100d;
Magic Number,EventStore.TestClient.Commands.DvuBasic,Status,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\Status.cs,ToPercent,The following statement contains a magic number: return approx <= 100d ? approx : 100;
Magic Number,EventStore.TestClient.Commands.DvuBasic,Status,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\DvuBasic\Status.cs,ToPercent,The following statement contains a magic number: return approx <= 100d ? approx : 100;
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingProjectionKillScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingProjectionKillScenario.cs,LoopingProjectionKillScenario,The following statement contains a magic number: _iterationLoopDuration = TimeSpan.FromMilliseconds(10 * (Streams * EventsPerStream + Streams) + 20 * 1000);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingProjectionKillScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingProjectionKillScenario.cs,LoopingProjectionKillScenario,The following statement contains a magic number: _iterationLoopDuration = TimeSpan.FromMilliseconds(10 * (Streams * EventsPerStream + Streams) + 20 * 1000);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingProjectionKillScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingProjectionKillScenario.cs,LoopingProjectionKillScenario,The following statement contains a magic number: _iterationLoopDuration = TimeSpan.FromMilliseconds(10 * (Streams * EventsPerStream + Streams) + 20 * 1000);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingProjectionKillScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingProjectionKillScenario.cs,LoopingProjectionKillScenario,The following statement contains a magic number: _firstKillInterval = TimeSpan.FromSeconds(_iterationLoopDuration.TotalSeconds / 2);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingProjectionKillScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingProjectionKillScenario.cs,RunIteration,The following statement contains a magic number: var successTask = Task.Factory.StartNew(() => {  				var success = false;  				var stopWatch = new Stopwatch();  				while (stopWatch.Elapsed < _iterationLoopDuration) {  					if (writeTask.IsFaulted)  						throw new ApplicationException("Failed to write data");    					if (writeTask.IsCompleted && !stopWatch.IsRunning) {  						stopWatch.Start();  					}    					success = CheckProjectionState(countItem' "count"' x => x == expectedAllEventsCount)  					          && CheckProjectionState(sumCheckForBankAccount0' "success"'  						          x => x == lastExpectedEventVersion);    					if (success)  						break;    					Thread.Sleep(4000);  				}    				if (!CheckProjectionState(countItem' "count"' x => x == expectedAllEventsCount))  					Log.Error(  						"Projection '{projection}' has not completed with expected result {expectedCount} in time. "'  						countItem' expectedAllEventsCount);    				if (!CheckProjectionState(sumCheckForBankAccount0' "success"' x => x == lastExpectedEventVersion))  					Log.Error(  						"Projection '{projection}' has not completed with expected result {lastExpectedEventVersion} in time."'  						sumCheckForBankAccount0' lastExpectedEventVersion);    				return success;  			});
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingProjTranWriteScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingProjTranWriteScenario.cs,InnerRun,The following statement contains a magic number: var batchSizeA = _random.Next(1' EventsPerStream / 10);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingProjTranWriteScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingProjTranWriteScenario.cs,InnerRun,The following statement contains a magic number: var batchSizeB = _random.Next(1' EventsPerStream / 10);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingProjTranWriteScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingProjTranWriteScenario.cs,WaitAndCheckIfIsFaulted,The following statement contains a magic number: var waitDuration = TimeSpan.FromMilliseconds(20 * 1000 + 5 * Streams * EventsPerStream);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingProjTranWriteScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingProjTranWriteScenario.cs,WaitAndCheckIfIsFaulted,The following statement contains a magic number: var waitDuration = TimeSpan.FromMilliseconds(20 * 1000 + 5 * Streams * EventsPerStream);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingProjTranWriteScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingProjTranWriteScenario.cs,WaitAndCheckIfIsFaulted,The following statement contains a magic number: var waitDuration = TimeSpan.FromMilliseconds(20 * 1000 + 5 * Streams * EventsPerStream);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingProjTranWriteScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingProjTranWriteScenario.cs,WaitAndCheckIfIsFaulted,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,LoopingScenario,The following statement contains a magic number: SetStartupWaitInterval(TimeSpan.FromSeconds(10));
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,RunInternal,The following statement contains a magic number: SetStartupWaitInterval(TimeSpan.FromSeconds(10 + (2 * (runIndex % 200))));
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,RunInternal,The following statement contains a magic number: SetStartupWaitInterval(TimeSpan.FromSeconds(10 + (2 * (runIndex % 200))));
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,RunInternal,The following statement contains a magic number: SetStartupWaitInterval(TimeSpan.FromSeconds(10 + (2 * (runIndex % 200))));
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,InnerRun,The following statement contains a magic number: var parallelWritesTimeout = TimeSpan.FromMinutes((EventsPerStream / 1000.0) * 10);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,InnerRun,The following statement contains a magic number: var parallelWritesTimeout = TimeSpan.FromMinutes((EventsPerStream / 1000.0) * 10);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,InnerRun,The following statement contains a magic number: var slices = Split(streams' 3);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,InnerRun,The following statement contains a magic number: var transSlice = slices.Skip(2).Take(1).SelectMany(x => x).ToArray();
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,InnerRun,The following statement contains a magic number: runIndex % 4 == 0
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,InnerRun,The following statement contains a magic number: var readCnt = Math.Min(100' EventsPerStream / 3);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,InnerRun,The following statement contains a magic number: var readCnt = Math.Min(100' EventsPerStream / 3);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,InnerRun,The following statement contains a magic number: var rd3 = Read(exceptDeleted' @from: EventsPerStream / 2'  				count: Math.Min(readCnt' EventsPerStream - EventsPerStream / 2));
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,InnerRun,The following statement contains a magic number: var rd3 = Read(exceptDeleted' @from: EventsPerStream / 2'  				count: Math.Min(readCnt' EventsPerStream - EventsPerStream / 2));
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,InnerRun,The following statement contains a magic number: var allExistingStreamsSlice = (from run in Enumerable.Range(0' runIndex + 1)  				from streamNum in Enumerable.Range(0' Streams)  				where streamNum % StreamDeleteStep != 0  				where _rnd.NextDouble() < 0.1  				select FormatStreamName(run' streamNum)).ToArray();
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,InnerRun,The following statement contains a magic number: var allDeletedStreamsSlice = (from run in Enumerable.Range(0' runIndex + 1)  				from streamNum in Enumerable.Range(0' Streams)  				where streamNum % StreamDeleteStep == 0  				where _rnd.NextDouble() < 0.1  				select FormatStreamName(run' streamNum)).ToArray();
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,InnerRun,The following statement contains a magic number: var rd4 = Read(allExistingStreamsSlice' 0' Math.Max(1' EventsPerStream / 5));
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,InnerRun,The following statement contains a magic number: var rd5 = Read(allExistingStreamsSlice' EventsPerStream / 2' Math.Max(1' EventsPerStream / 5));
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,InnerRun,The following statement contains a magic number: var rd5 = Read(allExistingStreamsSlice' EventsPerStream / 2' Math.Max(1' EventsPerStream / 5));
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,RunParallelWrites,The following statement contains a magic number: return Task.Factory.StartNew(() => {  				int index = 0;  				while (!_stopParalleWrites) {  					Log.Debug("Start RunParallelWrites #{index} for runIndex {runIndex}"' index' runIndex);    					var parallelStreams = Enumerable.Range(0' 2)  						.Select(x => string.Format("parallel-write-stream-in{0}-{1}-{2}"'  							runIndex'  							x'  							string.Format("rnd{0}-{1}"' _rnd.Next()' DateTime.UtcNow.Ticks)))  						.ToArray();    					var wr = Write(WriteMode.SingleEventAtTime' parallelStreams' EventsPerStream);  					wr.Wait();    					Log.Debug("Wrote RunParallelWrites #{index} for runIndex {runIndex}"' index' runIndex);    					var rd1 = Read(parallelStreams' 0' EventsPerStream / 6);  					var rd2 = Read(parallelStreams' EventsPerStream / 3' EventsPerStream / 6);  					var rd3 = Read(parallelStreams' EventsPerStream - EventsPerStream / 10' EventsPerStream / 10);  					Task.WaitAll(rd1' rd2' rd3);    					Log.Debug("Done RunParallelWrites #{index} for runIndex {runIndex}"' index' runIndex);    					index += 1;  				}  			}' TaskCreationOptions.LongRunning);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,RunParallelWrites,The following statement contains a magic number: return Task.Factory.StartNew(() => {  				int index = 0;  				while (!_stopParalleWrites) {  					Log.Debug("Start RunParallelWrites #{index} for runIndex {runIndex}"' index' runIndex);    					var parallelStreams = Enumerable.Range(0' 2)  						.Select(x => string.Format("parallel-write-stream-in{0}-{1}-{2}"'  							runIndex'  							x'  							string.Format("rnd{0}-{1}"' _rnd.Next()' DateTime.UtcNow.Ticks)))  						.ToArray();    					var wr = Write(WriteMode.SingleEventAtTime' parallelStreams' EventsPerStream);  					wr.Wait();    					Log.Debug("Wrote RunParallelWrites #{index} for runIndex {runIndex}"' index' runIndex);    					var rd1 = Read(parallelStreams' 0' EventsPerStream / 6);  					var rd2 = Read(parallelStreams' EventsPerStream / 3' EventsPerStream / 6);  					var rd3 = Read(parallelStreams' EventsPerStream - EventsPerStream / 10' EventsPerStream / 10);  					Task.WaitAll(rd1' rd2' rd3);    					Log.Debug("Done RunParallelWrites #{index} for runIndex {runIndex}"' index' runIndex);    					index += 1;  				}  			}' TaskCreationOptions.LongRunning);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,RunParallelWrites,The following statement contains a magic number: return Task.Factory.StartNew(() => {  				int index = 0;  				while (!_stopParalleWrites) {  					Log.Debug("Start RunParallelWrites #{index} for runIndex {runIndex}"' index' runIndex);    					var parallelStreams = Enumerable.Range(0' 2)  						.Select(x => string.Format("parallel-write-stream-in{0}-{1}-{2}"'  							runIndex'  							x'  							string.Format("rnd{0}-{1}"' _rnd.Next()' DateTime.UtcNow.Ticks)))  						.ToArray();    					var wr = Write(WriteMode.SingleEventAtTime' parallelStreams' EventsPerStream);  					wr.Wait();    					Log.Debug("Wrote RunParallelWrites #{index} for runIndex {runIndex}"' index' runIndex);    					var rd1 = Read(parallelStreams' 0' EventsPerStream / 6);  					var rd2 = Read(parallelStreams' EventsPerStream / 3' EventsPerStream / 6);  					var rd3 = Read(parallelStreams' EventsPerStream - EventsPerStream / 10' EventsPerStream / 10);  					Task.WaitAll(rd1' rd2' rd3);    					Log.Debug("Done RunParallelWrites #{index} for runIndex {runIndex}"' index' runIndex);    					index += 1;  				}  			}' TaskCreationOptions.LongRunning);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,RunParallelWrites,The following statement contains a magic number: return Task.Factory.StartNew(() => {  				int index = 0;  				while (!_stopParalleWrites) {  					Log.Debug("Start RunParallelWrites #{index} for runIndex {runIndex}"' index' runIndex);    					var parallelStreams = Enumerable.Range(0' 2)  						.Select(x => string.Format("parallel-write-stream-in{0}-{1}-{2}"'  							runIndex'  							x'  							string.Format("rnd{0}-{1}"' _rnd.Next()' DateTime.UtcNow.Ticks)))  						.ToArray();    					var wr = Write(WriteMode.SingleEventAtTime' parallelStreams' EventsPerStream);  					wr.Wait();    					Log.Debug("Wrote RunParallelWrites #{index} for runIndex {runIndex}"' index' runIndex);    					var rd1 = Read(parallelStreams' 0' EventsPerStream / 6);  					var rd2 = Read(parallelStreams' EventsPerStream / 3' EventsPerStream / 6);  					var rd3 = Read(parallelStreams' EventsPerStream - EventsPerStream / 10' EventsPerStream / 10);  					Task.WaitAll(rd1' rd2' rd3);    					Log.Debug("Done RunParallelWrites #{index} for runIndex {runIndex}"' index' runIndex);    					index += 1;  				}  			}' TaskCreationOptions.LongRunning);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,RunParallelWrites,The following statement contains a magic number: return Task.Factory.StartNew(() => {  				int index = 0;  				while (!_stopParalleWrites) {  					Log.Debug("Start RunParallelWrites #{index} for runIndex {runIndex}"' index' runIndex);    					var parallelStreams = Enumerable.Range(0' 2)  						.Select(x => string.Format("parallel-write-stream-in{0}-{1}-{2}"'  							runIndex'  							x'  							string.Format("rnd{0}-{1}"' _rnd.Next()' DateTime.UtcNow.Ticks)))  						.ToArray();    					var wr = Write(WriteMode.SingleEventAtTime' parallelStreams' EventsPerStream);  					wr.Wait();    					Log.Debug("Wrote RunParallelWrites #{index} for runIndex {runIndex}"' index' runIndex);    					var rd1 = Read(parallelStreams' 0' EventsPerStream / 6);  					var rd2 = Read(parallelStreams' EventsPerStream / 3' EventsPerStream / 6);  					var rd3 = Read(parallelStreams' EventsPerStream - EventsPerStream / 10' EventsPerStream / 10);  					Task.WaitAll(rd1' rd2' rd3);    					Log.Debug("Done RunParallelWrites #{index} for runIndex {runIndex}"' index' runIndex);    					index += 1;  				}  			}' TaskCreationOptions.LongRunning);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,LoopingScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\LoopingScenario.cs,RunParallelWrites,The following statement contains a magic number: return Task.Factory.StartNew(() => {  				int index = 0;  				while (!_stopParalleWrites) {  					Log.Debug("Start RunParallelWrites #{index} for runIndex {runIndex}"' index' runIndex);    					var parallelStreams = Enumerable.Range(0' 2)  						.Select(x => string.Format("parallel-write-stream-in{0}-{1}-{2}"'  							runIndex'  							x'  							string.Format("rnd{0}-{1}"' _rnd.Next()' DateTime.UtcNow.Ticks)))  						.ToArray();    					var wr = Write(WriteMode.SingleEventAtTime' parallelStreams' EventsPerStream);  					wr.Wait();    					Log.Debug("Wrote RunParallelWrites #{index} for runIndex {runIndex}"' index' runIndex);    					var rd1 = Read(parallelStreams' 0' EventsPerStream / 6);  					var rd2 = Read(parallelStreams' EventsPerStream / 3' EventsPerStream / 6);  					var rd3 = Read(parallelStreams' EventsPerStream - EventsPerStream / 10' EventsPerStream / 10);  					Task.WaitAll(rd1' rd2' rd3);    					Log.Debug("Done RunParallelWrites #{index} for runIndex {runIndex}"' index' runIndex);    					index += 1;  				}  			}' TaskCreationOptions.LongRunning);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,MassProjectionsScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\MassProjectionsScenario.cs,RunInternal,The following statement contains a magic number: GetIterationCode() < Streams / 3
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,MassProjectionsScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\MassProjectionsScenario.cs,RunInternal,The following statement contains a magic number: int count = 10;
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,MassProjectionsScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\MassProjectionsScenario.cs,RunInternal,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromSeconds(10));
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,MassProjectionsScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\MassProjectionsScenario.cs,RunInternal,The following statement contains a magic number: var sleepTimeSeconds = 10 + Streams * EventsPerStream / 1000.0;
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,MassProjectionsScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\MassProjectionsScenario.cs,RunInternal,The following statement contains a magic number: var sleepTimeSeconds = 10 + Streams * EventsPerStream / 1000.0;
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,MassProjectionsScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\MassProjectionsScenario.cs,RunInternal,The following statement contains a magic number: count = 20;
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,MassProjectionsScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\MassProjectionsScenario.cs,RunInternal,The following statement contains a magic number: var sleepTimeSeconds = 10 + (Streams * EventsPerStream) / 500;
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,MassProjectionsScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\MassProjectionsScenario.cs,RunInternal,The following statement contains a magic number: var sleepTimeSeconds = 10 + (Streams * EventsPerStream) / 500;
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,MassProjectionsScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\MassProjectionsScenario.cs,StartOrStopProjection,The following statement contains a magic number: const int retriesNumber = 5;
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,MassProjectionsScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\MassProjectionsScenario.cs,StartOrStopProjection,The following statement contains a magic number: int shortWait = 50 + _random.Next(100);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,MassProjectionsScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\MassProjectionsScenario.cs,StartOrStopProjection,The following statement contains a magic number: int shortWait = 50 + _random.Next(100);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ProjectionsKillScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjectionsKillScenario.cs,RunInternal,The following statement contains a magic number: var waitDuration = TimeSpan.FromMilliseconds(20 * 1000 + 5 * Streams * EventsPerStream);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ProjectionsKillScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjectionsKillScenario.cs,RunInternal,The following statement contains a magic number: var waitDuration = TimeSpan.FromMilliseconds(20 * 1000 + 5 * Streams * EventsPerStream);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ProjectionsKillScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjectionsKillScenario.cs,RunInternal,The following statement contains a magic number: var waitDuration = TimeSpan.FromMilliseconds(20 * 1000 + 5 * Streams * EventsPerStream);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ProjectionsKillScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjectionsKillScenario.cs,RunInternal,The following statement contains a magic number: Thread.Sleep((int)(waitDuration.TotalMilliseconds / 10));
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ProjectionsKillScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjectionsKillScenario.cs,WriteData,The following statement contains a magic number: var slices = Split(streams' 3);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ProjectionsKillScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjectionsKillScenario.cs,WriteData,The following statement contains a magic number: var w3 = Write(WriteMode.Transactional' slices[2]' EventsPerStream' CreateBankEvent);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ProjectionsScenarioBase,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjectionsScenarioBase.cs,GetProjectionPosition,The following statement contains a magic number: var positionString = subpositions.Length == 2 ? subpositions[1] : value;
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ProjectionsScenarioBase,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjectionsScenarioBase.cs,EnableProjectionByCategory,The following statement contains a magic number: Thread.Sleep(250 * (retryCount * retryCount));
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ProjectionsScenarioBase,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjectionsScenarioBase.cs,EnableProjectionByCategory,The following statement contains a magic number: retryCount < 5
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ProjectionWrongTagCheck,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjectionWrongTagCheck.cs,RunIteration,The following statement contains a magic number: var successTask = Task.Factory.StartNew<bool>(() => {  				var success = true;  				var stopWatch = new Stopwatch();    				var wasLessLastTime = false;  				while (stopWatch.Elapsed < TimeSpan.FromMilliseconds(10 * (Streams * EventsPerStream + Streams))) {  					if (!wasLessLastTime) {  						KillNode(nodeProcessId);  						nodeProcessId = StartNode();  					}    					if (writeTask.IsFaulted)  						throw new ApplicationException("Failed to write data");    					if (writeTask.IsCompleted && !stopWatch.IsRunning) {  						stopWatch.Start();  					}    					var count1 = GetProjectionStateValue(sumCheckForBankAccount0' "success"' int.Parse' -1);  					for (var i = 0; i < 5; ++i) {  						Thread.Sleep(TimeSpan.FromSeconds(1));  						var count2 = GetProjectionStateValue(sumCheckForBankAccount0' "success"' int.Parse' -1);    						if (count1 > count2) {  							if (wasLessLastTime) {  								success = false;  								break;  							}    							wasLessLastTime = true;  						}    						count1 = count2;  					}    					if (!success)  						break;    					if (CheckProjectionState(sumCheckForBankAccount0' "success"' x => x == lastExpectedEventVersion))  						break;  				}    				KillNode(nodeProcessId);    				if (!success)  					throw new ApplicationException(string.Format(  						"Projection {0} has not completed with expected result {1} in time."' sumCheckForBankAccount0'  						lastExpectedEventVersion));    				return success;  			});
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ProjectionWrongTagCheck,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjectionWrongTagCheck.cs,RunIteration,The following statement contains a magic number: var successTask = Task.Factory.StartNew<bool>(() => {  				var success = true;  				var stopWatch = new Stopwatch();    				var wasLessLastTime = false;  				while (stopWatch.Elapsed < TimeSpan.FromMilliseconds(10 * (Streams * EventsPerStream + Streams))) {  					if (!wasLessLastTime) {  						KillNode(nodeProcessId);  						nodeProcessId = StartNode();  					}    					if (writeTask.IsFaulted)  						throw new ApplicationException("Failed to write data");    					if (writeTask.IsCompleted && !stopWatch.IsRunning) {  						stopWatch.Start();  					}    					var count1 = GetProjectionStateValue(sumCheckForBankAccount0' "success"' int.Parse' -1);  					for (var i = 0; i < 5; ++i) {  						Thread.Sleep(TimeSpan.FromSeconds(1));  						var count2 = GetProjectionStateValue(sumCheckForBankAccount0' "success"' int.Parse' -1);    						if (count1 > count2) {  							if (wasLessLastTime) {  								success = false;  								break;  							}    							wasLessLastTime = true;  						}    						count1 = count2;  					}    					if (!success)  						break;    					if (CheckProjectionState(sumCheckForBankAccount0' "success"' x => x == lastExpectedEventVersion))  						break;  				}    				KillNode(nodeProcessId);    				if (!success)  					throw new ApplicationException(string.Format(  						"Projection {0} has not completed with expected result {1} in time."' sumCheckForBankAccount0'  						lastExpectedEventVersion));    				return success;  			});
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ProjForeachForcedCommonNameScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjForeachForcedCommonNameScenario.cs,InnerRun,The following statement contains a magic number: var waitDuration = TimeSpan.FromMilliseconds(20 * 1000 + 5 * Streams * EventsPerStream);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ProjForeachForcedCommonNameScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjForeachForcedCommonNameScenario.cs,InnerRun,The following statement contains a magic number: var waitDuration = TimeSpan.FromMilliseconds(20 * 1000 + 5 * Streams * EventsPerStream);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ProjForeachForcedCommonNameScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjForeachForcedCommonNameScenario.cs,InnerRun,The following statement contains a magic number: var waitDuration = TimeSpan.FromMilliseconds(20 * 1000 + 5 * Streams * EventsPerStream);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ProjForeachForcedCommonNameScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjForeachForcedCommonNameScenario.cs,InnerRun,The following statement contains a magic number: Thread.Sleep((int)(waitDuration.TotalMilliseconds / 6));
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ProjForeachForcedCommonNameScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjForeachForcedCommonNameScenario.cs,InnerRun,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ProjForeachForcedCommonNameScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjForeachForcedCommonNameScenario.cs,InnerRun,The following statement contains a magic number: i < 11
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ProjForeachForcedCommonNameScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjForeachForcedCommonNameScenario.cs,WriteData,The following statement contains a magic number: var slices = Split(streams' 3);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ProjForeachForcedCommonNameScenario,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ProjForeachForcedCommonNameScenario.cs,WriteData,The following statement contains a magic number: var w3 = Write(WriteMode.Transactional' slices[2]' EventsPerStream' CreateBankEvent);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ScenarioBase,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ScenarioBase.cs,ScenarioBase,The following statement contains a magic number: _projectionsManager = new ProjectionsManager(new ConsoleLogger()'  				new IPEndPoint(_nodeConnection.IpAddress' _nodeConnection.HttpPort)' TimeSpan.FromMilliseconds(5000));
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ScenarioBase,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ScenarioBase.cs,Run,The following statement contains a magic number: const int maxReconnections = 200;
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ScenarioBase,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ScenarioBase.cs,Run,The following statement contains a magic number: const int maxOperationRetries = 200;
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ScenarioBase,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ScenarioBase.cs,StartNewNode,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ScenarioBase,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ScenarioBase.cs,KillStartedNode,The following statement contains a magic number: var waitCount = 200;
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ScenarioBase,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ScenarioBase.cs,KillStartedNode,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ScenarioBase,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ScenarioBase.cs,KillStartedNode,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ScenarioBase,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ScenarioBase.cs,Dispose,The following statement contains a magic number: Thread.Sleep(2 * 1000);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ScenarioBase,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ScenarioBase.cs,Dispose,The following statement contains a magic number: Thread.Sleep(2 * 1000);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,ScenarioBase,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\ScenarioBase.cs,WriteBucketOfEventsAtTime,The following statement contains a magic number: const int bucketSize = 25;
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,TestEvent,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\TestEvent.cs,NewTestEvent,The following statement contains a magic number: var subIndex = (index % 50);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,TestEvent,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\TestEvent.cs,VerifyIfMatched,The following statement contains a magic number: atoms.Length != 3
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,TestEvent,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\TestEvent.cs,VerifyIfMatched,The following statement contains a magic number: expectedLength != atoms[2].Length
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,TestEvent,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\TestEvent.cs,VerifyIfMatched,The following statement contains a magic number: new string('#'' expectedLength) != atoms[2]
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,TestEvent,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\TestEvent.cs,RecordDetailsString,The following statement contains a magic number: return string.Format("[stream:{0}; eventNumber:{1}; type:{2}; data:{3}]"'  				evnt.EventStreamId'  				evnt.EventNumber'  				evnt.EventType'  				data.Length > 12 ? (data.Substring(0' 12) + "...") : data);
Magic Number,EventStore.TestClient.Commands.RunTestScenarios,TestEvent,D:\research\architectureSmells\repos\EventStore_EventStore\src\EventStore.TestClient\Commands\RunTestScenarios\TestEvent.cs,RecordDetailsString,The following statement contains a magic number: return string.Format("[stream:{0}; eventNumber:{1}; type:{2}; data:{3}]"'  				evnt.EventStreamId'  				evnt.EventNumber'  				evnt.EventType'  				data.Length > 12 ? (data.Substring(0' 12) + "...") : data);
