Implementation smell,Namespace,Class,File,Method,Description
Complex Method,EventStore.Transport.Tcp,TcpConnectionLockless,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnectionLockless.cs,TrySend,Cyclomatic complexity of the method is 8
Long Parameter List,EventStore.Transport.Tcp,TcpConnectionLockless,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnectionLockless.cs,CreateConnectingTcpConnection,The method has 7 parameters. Parameters: connectionId' remoteEndPoint' connector' connectionTimeout' onConnectionEstablished' onConnectionFailed' verbose
Long Parameter List,EventStore.Transport.Tcp,TcpConnectionSsl,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnectionSsl.cs,CreateConnectingConnection,The method has 9 parameters. Parameters: connectionId' remoteEndPoint' targetHost' validateServer' connector' connectionTimeout' onConnectionEstablished' onConnectionFailed' verbose
Long Parameter List,EventStore.Transport.Tcp,TcpConnectionSsl,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnectionSsl.cs,CreateClientFromSocket,The method has 6 parameters. Parameters: connectionId' remoteEndPoint' socket' targetHost' validateServer' verbose
Long Parameter List,EventStore.Transport.Tcp,TcpConnectionSsl,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnectionSsl.cs,CreateServerFromSocket,The method has 5 parameters. Parameters: connectionId' remoteEndPoint' socket' certificate' verbose
Long Parameter List,EventStore.Transport.Tcp,TcpConnection,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnection.cs,CreateConnectingTcpConnection,The method has 7 parameters. Parameters: connectionId' remoteEndPoint' connector' connectionTimeout' onConnectionEstablished' onConnectionFailed' verbose
Long Parameter List,EventStore.Transport.Tcp,TcpClientConnector,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpClientConnector.cs,ConnectTo,The method has 6 parameters. Parameters: connectionId' remoteEndPoint' connectionTimeout' onConnectionEstablished' onConnectionFailed' verbose
Long Parameter List,EventStore.Transport.Tcp,TcpClientConnector,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpClientConnector.cs,ConnectSslTo,The method has 8 parameters. Parameters: connectionId' remoteEndPoint' connectionTimeout' targetHost' validateServer' onConnectionEstablished' onConnectionFailed' verbose
Long Parameter List,EventStore.Transport.Tcp,TcpClientConnector,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpClientConnector.cs,InitConnect,The method has 5 parameters. Parameters: serverEndPoint' onConnectionEstablished' onConnectionFailed' connection' connectionTimeout
Long Parameter List,EventStore.Transport.Tcp,TcpStats,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpStats.cs,TcpStats,The method has 9 parameters. Parameters: connections' sentBytesTotal' receivedBytesTotal' sentBytesSinceLastRunSinceLastRun' receivedBytesSinceLastRun' pendingSend' inSend' pendingReceived' measureTime
Long Identifier,EventStore.Transport.Tcp,TcpStats,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpStats.cs,TcpStats,The length of the parameter sentBytesSinceLastRunSinceLastRun is 33.
Long Statement,EventStore.Transport.Tcp,TcpConnectionLockless,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnectionLockless.cs,ProcessReceive,The length of the statement  "                CloseInternal(socketArgs.SocketError' socketArgs.SocketError != SocketError.Success ? "Socket receive error" : "Socket closed"); " is 128.
Long Statement,EventStore.Transport.Tcp,TcpConnectionSsl,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnectionSsl.cs,InitServerSocket,The length of the statement  "                    _sslStream.BeginAuthenticateAsServer(certificate' false' enabledSslProtocols' true' OnEndAuthenticateAsServer' _sslStream); " is 123.
Long Statement,EventStore.Transport.Tcp,TcpConnectionSsl,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnectionSsl.cs,InitServerSocket,The length of the statement  "                    Log.InfoException(exc' "[S{0}' L{1}]: Authentication exception on BeginAuthenticateAsServer."' RemoteEndPoint' LocalEndPoint); " is 126.
Long Statement,EventStore.Transport.Tcp,TcpConnectionSsl,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnectionSsl.cs,OnEndAuthenticateAsServer,The length of the statement  "                Log.InfoException(exc' "[S{0}' L{1}]: Authentication exception on EndAuthenticateAsServer."' RemoteEndPoint' LocalEndPoint); " is 124.
Long Statement,EventStore.Transport.Tcp,TcpConnectionSsl,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnectionSsl.cs,InitClientSocket,The length of the statement  "                    Log.InfoException(exc' "[S{0}' L{1}]: Authentication exception on BeginAuthenticateAsClient."' RemoteEndPoint' LocalEndPoint); " is 126.
Long Statement,EventStore.Transport.Tcp,TcpConnectionSsl,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnectionSsl.cs,OnEndAuthenticateAsClient,The length of the statement  "                Log.InfoException(exc' "[S{0}' L{1}]: Authentication exception on EndAuthenticateAsClient."' RemoteEndPoint' LocalEndPoint); " is 124.
Long Statement,EventStore.Transport.Tcp,TcpConnection,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnection.cs,ProcessReceive,The length of the statement  "                CloseInternal(socketArgs.SocketError' socketArgs.SocketError != SocketError.Success ? "Socket receive error" : "Socket closed"); " is 128.
Long Statement,EventStore.Transport.Tcp,TcpConnectionMonitor,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnectionMonitor.cs,CheckMissingReceiveCallback,The length of the statement  "                Log.Error("# {0} {1}ms since last Receive started. No completion callback received' but socket status is READY_FOR_RECEIVE"' " is 124.
Long Statement,EventStore.Transport.Tcp,TcpConnectionMonitor,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnectionMonitor.cs,CheckMissingSendCallback,The length of the statement  "                    "# {0} {1}ms since last send started. No completion callback received' but socket status is READY_FOR_SEND. In send: {2}"' " is 122.
Complex Conditional,EventStore.Transport.Tcp,TcpConnectionSsl,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnectionSsl.cs,TrySend,The conditional expression  "_isSending || _sendQueue.Count == 0 || _sslStream == null || !_isAuthenticated"  is complex.
Empty Catch Block,EventStore.Transport.Tcp,Helper,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\Helper.cs,EatException,The method has an empty catch block.
Magic Number,EventStore.Transport.Tcp,TcpConnectionMonitor,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnectionMonitor.cs,CheckMissingReceiveCallback,The following statement contains a magic number: bool missingReceiveCallback = inReceive && isReadyForReceive && sinceLastReceive > 500;
Magic Number,EventStore.Transport.Tcp,TcpConnectionMonitor,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnectionMonitor.cs,CheckMissingSendCallback,The following statement contains a magic number: bool missingSendCallback = inSend && isReadyForSend && sinceLastSend > 500;
Magic Number,EventStore.Transport.Tcp,TcpConnectionMonitor,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnectionMonitor.cs,CheckPendingSend,The following statement contains a magic number: if (pendingSendBytes > 128 * 1024)              {                  Log.Info("# {0} {1}kb pending send"' connection' pendingSendBytes / 1024);              }
Magic Number,EventStore.Transport.Tcp,TcpConnectionMonitor,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnectionMonitor.cs,CheckPendingSend,The following statement contains a magic number: if (pendingSendBytes > 128 * 1024)              {                  Log.Info("# {0} {1}kb pending send"' connection' pendingSendBytes / 1024);              }
Magic Number,EventStore.Transport.Tcp,TcpConnectionMonitor,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnectionMonitor.cs,CheckPendingSend,The following statement contains a magic number: if (pendingSendBytes > 128 * 1024)              {                  Log.Info("# {0} {1}kb pending send"' connection' pendingSendBytes / 1024);              }
Magic Number,EventStore.Transport.Tcp,TcpConnectionMonitor,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnectionMonitor.cs,CheckPendingReceived,The following statement contains a magic number: if (pendingReceivedBytes > 128 * 1024)              {                  Log.Info("# {0} {1}kb are not dispatched"' connection' pendingReceivedBytes / 1024);              }
Magic Number,EventStore.Transport.Tcp,TcpConnectionMonitor,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnectionMonitor.cs,CheckPendingReceived,The following statement contains a magic number: if (pendingReceivedBytes > 128 * 1024)              {                  Log.Info("# {0} {1}kb are not dispatched"' connection' pendingReceivedBytes / 1024);              }
Magic Number,EventStore.Transport.Tcp,TcpConnectionMonitor,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpConnectionMonitor.cs,CheckPendingReceived,The following statement contains a magic number: if (pendingReceivedBytes > 128 * 1024)              {                  Log.Info("# {0} {1}kb are not dispatched"' connection' pendingReceivedBytes / 1024);              }
Magic Number,EventStore.Transport.Tcp,TcpServerListener,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpServerListener.cs,TcpServerListener,The following statement contains a magic number: _acceptSocketArgsPool = new SocketArgsPool("TcpServerListener.AcceptSocketArgsPool"'                                                         TcpConfiguration.ConcurrentAccepts*2'                                                         CreateAcceptSocketArgs);
Magic Number,EventStore.Transport.Tcp,TcpStats,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpStats.cs,TcpStats,The following statement contains a magic number: SendingSpeed =  (MeasureTime.TotalSeconds < 0.00001) ? 0 : SentBytesSinceLastRun / MeasureTime.TotalSeconds;
Magic Number,EventStore.Transport.Tcp,TcpStats,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\TcpStats.cs,TcpStats,The following statement contains a magic number: ReceivingSpeed =  (MeasureTime.TotalSeconds < 0.00001) ? 0 : ReceivedBytesSinceLastRun / MeasureTime.TotalSeconds;
Magic Number,EventStore.Transport.Tcp.Framing,LengthPrefixMessageFramerWithBufferPool,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\Framing\LengthPrefixMessageFramerWithBufferPool.cs,Parse,The following statement contains a magic number: for (int i = bytes.Offset; i < bytes.Offset + bytes.Count; )              {                  if (_headerBytes < PrefixLength)                  {                      _packageLength |= (data[i] << (_headerBytes * 8)); // little-endian order                      ++_headerBytes;                      i += 1;                      if (_headerBytes == PrefixLength)                      {                          if (_packageLength <= 0 || _packageLength > _maxPackageSize)                          {                              Log.Error("FRAMING ERROR! Data:");                              Log.Error(Common.Utils.Helper.FormatBinaryDump(bytes));                              throw new PackageFramingException(string.Format("Package size is out of bounds: {0} (max: {1})."'                                                                              _packageLength' _maxPackageSize));                          }                            _messageBuffer = new BufferPool(_bufferManager);                      }                  }                  else                  {                      int copyCnt = Math.Min(bytes.Count + bytes.Offset - i' _packageLength - _messageBuffer.Length);                      _messageBuffer.Append(bytes.Array' i' copyCnt);                      i += copyCnt;                        if (_messageBuffer.Length == _packageLength)                      {                          if (_receivedHandler != null)                              _receivedHandler(_messageBuffer);                          _messageBuffer = null;                          _headerBytes = 0;                          _packageLength = 0;                      }                  }              }
Magic Number,EventStore.Transport.Tcp.Framing,LengthPrefixMessageFramerWithBufferPool,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\Framing\LengthPrefixMessageFramerWithBufferPool.cs,FrameData,The following statement contains a magic number: yield return new ArraySegment<byte>(                  new[] { (byte)length' (byte)(length >> 8)' (byte)(length >> 16)' (byte)(length >> 24) });
Magic Number,EventStore.Transport.Tcp.Framing,LengthPrefixMessageFramerWithBufferPool,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\Framing\LengthPrefixMessageFramerWithBufferPool.cs,FrameData,The following statement contains a magic number: yield return new ArraySegment<byte>(                  new[] { (byte)length' (byte)(length >> 8)' (byte)(length >> 16)' (byte)(length >> 24) });
Magic Number,EventStore.Transport.Tcp.Framing,LengthPrefixMessageFramerWithBufferPool,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\Framing\LengthPrefixMessageFramerWithBufferPool.cs,FrameData,The following statement contains a magic number: yield return new ArraySegment<byte>(                  new[] { (byte)length' (byte)(length >> 8)' (byte)(length >> 16)' (byte)(length >> 24) });
Magic Number,EventStore.Transport.Tcp.Framing,LengthPrefixMessageFramer,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\Framing\LengthPrefixMessageFramer.cs,Parse,The following statement contains a magic number: for (int i = bytes.Offset' n = bytes.Offset + bytes.Count; i < n; i++)              {                  if (_headerBytes < HeaderLength)                  {                      _packageLength |= (data[i] << (_headerBytes*8)); // little-endian order                      ++_headerBytes;                      if (_headerBytes == HeaderLength)                      {                          if (_packageLength <= 0 || _packageLength > _maxPackageSize)                          {                              Log.Error("FRAMING ERROR! Data:");                              Log.Error(Common.Utils.Helper.FormatBinaryDump(bytes));                              throw new PackageFramingException(string.Format("Package size is out of bounds: {0} (max: {1})."'                                                                              _packageLength' _maxPackageSize));                          }                            _messageBuffer = new byte[_packageLength];                      }                  }                   else                  {                      int copyCnt = Math.Min(bytes.Count + bytes.Offset - i' _packageLength - _bufferIndex);                      Buffer.BlockCopy(bytes.Array' i' _messageBuffer' _bufferIndex' copyCnt);                      _bufferIndex += copyCnt;                      i += copyCnt - 1;                        if (_bufferIndex == _packageLength)                      {                          if (_receivedHandler != null)                              _receivedHandler(new ArraySegment<byte>(_messageBuffer' 0' _bufferIndex));                          _messageBuffer = null;                          _headerBytes = 0;                          _packageLength = 0;                          _bufferIndex = 0;                      }                  }              }
Magic Number,EventStore.Transport.Tcp.Framing,LengthPrefixMessageFramer,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\Framing\LengthPrefixMessageFramer.cs,FrameData,The following statement contains a magic number: yield return new ArraySegment<byte>(                  new[] { (byte) length' (byte) (length >> 8)' (byte) (length >> 16)' (byte) (length >> 24) });
Magic Number,EventStore.Transport.Tcp.Framing,LengthPrefixMessageFramer,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\Framing\LengthPrefixMessageFramer.cs,FrameData,The following statement contains a magic number: yield return new ArraySegment<byte>(                  new[] { (byte) length' (byte) (length >> 8)' (byte) (length >> 16)' (byte) (length >> 24) });
Magic Number,EventStore.Transport.Tcp.Framing,LengthPrefixMessageFramer,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\Framing\LengthPrefixMessageFramer.cs,FrameData,The following statement contains a magic number: yield return new ArraySegment<byte>(                  new[] { (byte) length' (byte) (length >> 8)' (byte) (length >> 16)' (byte) (length >> 24) });
Magic Number,EventStore.Transport.Tcp.Framing,StxEtxMessageFramer,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\Framing\StxEtxMessageFramer.cs,Parse,The following statement contains a magic number: for (int i = bytes.Offset; i < bytes.Offset + bytes.Count; i++)              {                  if ((data[i] > 3 || data[i] == 1) && _currentState == ParserState.AwaitingEtx)                  {                      if (_bufferIndex == _messageBuffer.Length)                      {                          var tmp = new byte[_messageBuffer.Length * 2];                          Buffer.BlockCopy(_messageBuffer' 0' tmp' 0' _messageBuffer.Length);                          _messageBuffer = tmp;                      }                      _messageBuffer[_bufferIndex] = data[i];                      _bufferIndex++;                  }                  else if (data[i] == STX)                  {                      _currentState = ParserState.AwaitingEtx;                      _bufferIndex = 0;                  }                  else if (data[i] == ETX && _currentState == ParserState.AwaitingEtx)                  {                      _currentState = ParserState.AwaitingStx;                      if (_receivedHandler != null)                          _receivedHandler(new ArraySegment<byte>(_messageBuffer' 0' _bufferIndex));                      _bufferIndex = 0;                  }              }
Magic Number,EventStore.Transport.Tcp.Framing,StxEtxMessageFramer,C:\repos\EventStore_EventStore\src\EventStore.Transport.Tcp\Framing\StxEtxMessageFramer.cs,Parse,The following statement contains a magic number: for (int i = bytes.Offset; i < bytes.Offset + bytes.Count; i++)              {                  if ((data[i] > 3 || data[i] == 1) && _currentState == ParserState.AwaitingEtx)                  {                      if (_bufferIndex == _messageBuffer.Length)                      {                          var tmp = new byte[_messageBuffer.Length * 2];                          Buffer.BlockCopy(_messageBuffer' 0' tmp' 0' _messageBuffer.Length);                          _messageBuffer = tmp;                      }                      _messageBuffer[_bufferIndex] = data[i];                      _bufferIndex++;                  }                  else if (data[i] == STX)                  {                      _currentState = ParserState.AwaitingEtx;                      _bufferIndex = 0;                  }                  else if (data[i] == ETX && _currentState == ParserState.AwaitingEtx)                  {                      _currentState = ParserState.AwaitingStx;                      if (_receivedHandler != null)                          _receivedHandler(new ArraySegment<byte>(_messageBuffer' 0' _bufferIndex));                      _bufferIndex = 0;                  }              }
