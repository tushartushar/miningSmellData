Implementation smell,Namespace,Class,File,Method,Description
Long Method,EventStore.Core,ClusterVNode,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ClusterVNode.cs,ClusterVNode,The method has 338 lines of code.
Complex Method,EventStore.Core.Bus,QueuedHandlerSleep,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerSleep.cs,ReadFromQueue,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Core.Bus,QueuedHandlerMresWithMpsc,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerMRESWithMPSC.cs,ReadFromQueue,Cyclomatic complexity of the method is 9
Complex Method,EventStore.Core.Bus,QueuedHandlerAutoResetWithMpsc,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerAutoResetWithMPSC.cs,ReadFromQueue,Cyclomatic complexity of the method is 9
Complex Method,EventStore.Core,ClusterVNode,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ClusterVNode.cs,ClusterVNode,Cyclomatic complexity of the method is 19
Complex Method,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,GetCertificateFromStore,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,EnsureHttpPrefixes,Cyclomatic complexity of the method is 11
Complex Method,EventStore.Core.Data,SystemSettings,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\SystemSettings.cs,FromJsonBytes,Cyclomatic complexity of the method is 12
Complex Method,EventStore.Core.Data,StreamMetadata,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\StreamMetadata.cs,FromJsonReader,Cyclomatic complexity of the method is 16
Complex Method,EventStore.Core.Data,StreamMetadata,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\StreamMetadata.cs,ReadAcl,Cyclomatic complexity of the method is 17
Complex Method,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,SaveToFile,Cyclomatic complexity of the method is 12
Complex Method,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,PTable,Cyclomatic complexity of the method is 9
Complex Method,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,Cyclomatic complexity of the method is 12
Complex Method,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,FromMemtable,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,MergeTo,Cyclomatic complexity of the method is 12
Complex Method,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,MergeTo2,Cyclomatic complexity of the method is 10
Complex Method,EventStore.Core.Index,TableIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,GetRangeInternal,Cyclomatic complexity of the method is 10
Complex Method,EventStore.Core.Index.Hashes,Murmur2Unsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,Cyclomatic complexity of the method is 16
Complex Method,EventStore.Core.Messaging,MessageHierarchy,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Messaging\Message.cs,MessageHierarchy,Cyclomatic complexity of the method is 12
Complex Method,EventStore.Core.Services.AwakeReaderService,AwakeService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\AwakeReaderService\AwakeService.cs,NotifyEventInStream,Cyclomatic complexity of the method is 9
Complex Method,EventStore.Core.Services,ClusterStorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Core.Services,SubscriptionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,Handle,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Core.Services,SubscriptionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,Handle,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Core.Services,HttpSendService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,Handle,Cyclomatic complexity of the method is 17
Complex Method,EventStore.Core.Services,HttpSendService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,ForwardRequest,Cyclomatic complexity of the method is 39
Complex Method,EventStore.Core.Services,SystemEventTypes,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\SystemNames.cs,StreamReferenceEventToStreamId,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Core.Services,SystemEventTypes,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\SystemNames.cs,StreamReferenceEventToStreamId,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,HandleNackedMessage,Cyclomatic complexity of the method is 19
Complex Method,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,HandleLoadCompleted,Cyclomatic complexity of the method is 12
Complex Method,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,HandleSaveConfigurationCompleted,Cyclomatic complexity of the method is 10
Complex Method,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,GetValidLogPosition,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,SetSubscriptionPosition,Cyclomatic complexity of the method is 10
Complex Method,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,ManageSubscriptions,Cyclomatic complexity of the method is 9
Complex Method,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,ManageRoleAssignments,Cyclomatic complexity of the method is 14
Complex Method,EventStore.Core.Services.Replication,ReplicaService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\ReplicaService.cs,Handle,Cyclomatic complexity of the method is 15
Complex Method,EventStore.Core.Services.Replication,ReplicaService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\ReplicaService.cs,Handle,Cyclomatic complexity of the method is 9
Complex Method,EventStore.Core.Services.Storage.ReaderIndex,AllReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\AllReader.cs,ReadAllEventsForward,Cyclomatic complexity of the method is 22
Complex Method,EventStore.Core.Services.Storage.ReaderIndex,AllReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\AllReader.cs,ReadAllEventsBackward,Cyclomatic complexity of the method is 21
Complex Method,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Init,Cyclomatic complexity of the method is 18
Complex Method,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Commit,Cyclomatic complexity of the method is 15
Complex Method,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Commit,Cyclomatic complexity of the method is 16
Complex Method,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,CheckStreamAccessInternal,Cyclomatic complexity of the method is 26
Complex Method,EventStore.Core.Services.Storage.ReaderIndex,IndexWriter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexWriter.cs,CheckCommit,Cyclomatic complexity of the method is 10
Complex Method,EventStore.Core.Services.RequestManager.Managers,SingleAckRequestManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\SingleAckRequestManager.cs,CompleteSuccessRequest,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Core.Services.RequestManager.Managers,SingleAckRequestManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\SingleAckRequestManager.cs,CompleteFailedRequest,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Core.Services.Monitoring,MonitoringService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\MonitoringService.cs,Handle,Cyclomatic complexity of the method is 14
Complex Method,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,Handle,Cyclomatic complexity of the method is 16
Complex Method,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,Handle,Cyclomatic complexity of the method is 17
Complex Method,EventStore.Core.Services.Storage,StorageChaser,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageChaser.cs,ProcessLogRecord,Cyclomatic complexity of the method is 9
Complex Method,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Handle,Cyclomatic complexity of the method is 11
Complex Method,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,ActOnCommitCheckFailure,Cyclomatic complexity of the method is 17
Complex Method,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,StatsConfiguration,Cyclomatic complexity of the method is 13
Complex Method,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,PostEvents,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Core.Services.Transport.Http,AuthenticatedHttpRequestProcessor,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\AuthenticatedHttpRequestProcessor.cs,ProcessRequest,Cyclomatic complexity of the method is 10
Complex Method,EventStore.Core.Services.Transport.Http,AuthenticatedHttpRequestProcessor,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\AuthenticatedHttpRequestProcessor.cs,GetFormatOrDefault,Cyclomatic complexity of the method is 9
Complex Method,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,EventEntry,Cyclomatic complexity of the method is 14
Complex Method,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,GetStreamEventsBackward,Cyclomatic complexity of the method is 13
Complex Method,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,GetStreamEventsForward,Cyclomatic complexity of the method is 13
Complex Method,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,ReadAllEventsBackwardCompleted,Cyclomatic complexity of the method is 11
Complex Method,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,ReadAllEventsForwardCompleted,Cyclomatic complexity of the method is 11
Complex Method,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,WriteEventsCompleted,Cyclomatic complexity of the method is 12
Complex Method,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,DeleteStreamCompleted,Cyclomatic complexity of the method is 11
Complex Method,EventStore.Core.Services.Transport.Http,AutoEventConverter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\AutoEventConverter.cs,SmartFormat,Cyclomatic complexity of the method is 11
Complex Method,EventStore.Core.Services.Transport.Http,AutoEventConverter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\AutoEventConverter.cs,SmartParse,Cyclomatic complexity of the method is 15
Complex Method,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToEntry,Cyclomatic complexity of the method is 18
Complex Method,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,ProcessPackage,Cyclomatic complexity of the method is 20
Complex Method,EventStore.Core.Services.UserManagement,AllUsersReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\AllUsersReader.cs,ReadUsersForwardCompleted,Cyclomatic complexity of the method is 13
Complex Method,EventStore.Core.Services.UserManagement,AllUsersReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\AllUsersReader.cs,ReadUserDetailsBackwardCompleted,Cyclomatic complexity of the method is 14
Complex Method,EventStore.Core.Services.UserManagement,UserManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\UserManagementService.cs,WritePasswordChangedEventCompleted,Cyclomatic complexity of the method is 17
Complex Method,EventStore.Core.Services.UserManagement,UserManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\UserManagementService.cs,ReplyByWriteResult,Cyclomatic complexity of the method is 15
Complex Method,EventStore.Core.TransactionLog.Chunks,TFChunkDbTruncator,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDbTruncator.cs,TruncateDb,Cyclomatic complexity of the method is 17
Complex Method,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,Scavenge,Cyclomatic complexity of the method is 12
Complex Method,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ScavengeChunks,Cyclomatic complexity of the method is 11
Complex Method,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ShouldKeepPrepare,Cyclomatic complexity of the method is 12
Complex Method,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,TraverseChunk,Cyclomatic complexity of the method is 9
Complex Method,EventStore.Core.TransactionLog.Chunks,TFChunkDb,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDb.cs,Open,Cyclomatic complexity of the method is 15
Complex Method,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,VerifyFileHash,Cyclomatic complexity of the method is 9
Complex Method,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CacheInMemory,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Core.Services.Monitoring.Utils,PerfCounterHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\Utils\PerfCounterHelper.cs,Dispose,Cyclomatic complexity of the method is 17
Long Parameter List,EventStore.Core.Authentication,IAuthenticationProviderFactory,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Authentication\IAuthenticationProviderFactory.cs,RegisterHttpControllers,The method has 5 parameters.
Long Parameter List,EventStore.Core.Authentication,InternalAuthenticationProviderFactory,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Authentication\InternalAuthenticationProviderFactory.cs,RegisterHttpControllers,The method has 5 parameters.
Long Parameter List,EventStore.Core.Bus,QueuedHandlerAutoReset,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerAutoReset.cs,QueuedHandlerAutoReset,The method has 6 parameters.
Long Parameter List,EventStore.Core.Bus,QueuedHandlerMRES,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerMRES.cs,QueuedHandlerMRES,The method has 6 parameters.
Long Parameter List,EventStore.Core.Bus,QueuedHandlerThreadPool,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerThreadPool.cs,QueuedHandlerThreadPool,The method has 6 parameters.
Long Parameter List,EventStore.Core.Bus,QueuedHandlerSleep,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerSleep.cs,QueuedHandlerSleep,The method has 6 parameters.
Long Parameter List,EventStore.Core.Bus,QueuedHandlerMresWithMpsc,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerMRESWithMPSC.cs,QueuedHandlerMresWithMpsc,The method has 6 parameters.
Long Parameter List,EventStore.Core.Bus,QueuedHandler,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandler.cs,CreateQueuedHandler,The method has 6 parameters.
Long Parameter List,EventStore.Core.Bus,QueuedHandler,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandler.cs,QueuedHandler,The method has 6 parameters.
Long Parameter List,EventStore.Core.Bus,QueuedHandlerPulse,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerPulse.cs,QueuedHandlerPulse,The method has 6 parameters.
Long Parameter List,EventStore.Core.Bus,QueuedHandlerAutoResetWithMpsc,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerAutoResetWithMPSC.cs,QueuedHandlerAutoResetWithMpsc,The method has 6 parameters.
Long Parameter List,EventStore.Core,ClusterVNode,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ClusterVNode.cs,ClusterVNode,The method has 5 parameters.
Long Parameter List,EventStore.Core,StandardComponents,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\StandardComponents.cs,StandardComponents,The method has 8 parameters.
Long Parameter List,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,CreateDbConfig,The method has 8 parameters.
Long Parameter List,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,ForManager,The method has 5 parameters.
Long Parameter List,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,ForVNode,The method has 17 parameters.
Long Parameter List,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,MemberInfo,The method has 17 parameters.
Long Parameter List,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,Updated,The method has 6 parameters.
Long Parameter List,EventStore.Core.Cluster.Settings,ClusterVNodeSettings,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\Settings\ClusterVNodeSettings.cs,ClusterVNodeSettings,The method has 59 parameters.
Long Parameter List,EventStore.Core.DataStructures,ObjectPool,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\DataStructures\ObjectPool.cs,ObjectPool,The method has 6 parameters.
Long Parameter List,EventStore.Core.Data,GossipAdvertiseInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\GossipAdvertiseInfo.cs,GossipAdvertiseInfo,The method has 10 parameters.
Long Parameter List,EventStore.Core.Data,StreamAcl,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\StreamAcl.cs,StreamAcl,The method has 5 parameters.
Long Parameter List,EventStore.Core.Data,StreamAcl,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\StreamAcl.cs,StreamAcl,The method has 5 parameters.
Long Parameter List,EventStore.Core.Data,VNodeInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\VNodeInfo.cs,VNodeInfo,The method has 8 parameters.
Long Parameter List,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,EventRecord,The method has 13 parameters.
Long Parameter List,EventStore.Core.Data,StreamMetadata,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\StreamMetadata.cs,StreamMetadata,The method has 6 parameters.
Long Parameter List,EventStore.Core.Data,UserData,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\UserData.cs,UserData,The method has 6 parameters.
Long Parameter List,EventStore.Core.Data,Event,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\Event.cs,Event,The method has 5 parameters.
Long Parameter List,EventStore.Core.Data,Event,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\Event.cs,Event,The method has 5 parameters.
Long Parameter List,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,BeginReadForward,The method has 8 parameters.
Long Parameter List,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,BeginReadBackward,The method has 8 parameters.
Long Parameter List,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,BeginWriteEvents,The method has 7 parameters.
Long Parameter List,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,BeginDeleteStream,The method has 7 parameters.
Long Parameter List,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,BeginSubscribeAwake,The method has 6 parameters.
Long Parameter List,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,BeginUpdateStreamAcl,The method has 7 parameters.
Long Parameter List,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,WriteEventsWithRetry,The method has 8 parameters.
Long Parameter List,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,DeleteStreamWithRetry,The method has 8 parameters.
Long Parameter List,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,UpdateStreamAclWithRetry,The method has 8 parameters.
Long Parameter List,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,PerformWithRetry,The method has 6 parameters.
Long Parameter List,EventStore.Core.Helpers,IODispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,ReadBackward,The method has 6 parameters.
Long Parameter List,EventStore.Core.Helpers,IODispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,ReadForward,The method has 6 parameters.
Long Parameter List,EventStore.Core.Helpers,IODispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,ConfigureStreamAndWriteEvents,The method has 6 parameters.
Long Parameter List,EventStore.Core.Helpers,IODispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,WriteEvents,The method has 5 parameters.
Long Parameter List,EventStore.Core.Helpers,IODispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,WriteEvent,The method has 5 parameters.
Long Parameter List,EventStore.Core.Helpers,IODispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,DeleteStream,The method has 5 parameters.
Long Parameter List,EventStore.Core.Helpers,IODispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,UpdateStreamAcl,The method has 5 parameters.
Long Parameter List,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,IndexMap,The method has 5 parameters.
Long Parameter List,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,AddPTable,The method has 9 parameters.
Long Parameter List,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,PTable,The method has 5 parameters.
Long Parameter List,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,MergeTo,The method has 7 parameters.
Long Parameter List,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,MergeTo2,The method has 9 parameters.
Long Parameter List,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,AppendRecordTo,The method has 5 parameters.
Long Parameter List,EventStore.Core.Index,TableIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,TableIndex,The method has 11 parameters.
Long Parameter List,EventStore.Core.Messaging,RequestResponseDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Messaging\RequestResponseDispatcher.cs,RequestResponseDispatcher,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services,ClusterStorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,ClusterStorageWriterService,The method has 8 parameters.
Long Parameter List,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,ElectionsService,The method has 8 parameters.
Long Parameter List,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,FormatNodeInfo,The method has 8 parameters.
Long Parameter List,EventStore.Core.Services,SubscriptionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,SubscribeToStream,The method has 7 parameters.
Long Parameter List,EventStore.Core.Services,SubscriptionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,SubscribePoller,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.Gossip,GossipServiceBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Gossip\GossipServiceBase.cs,GossipServiceBase,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.Gossip,NodeGossipService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Gossip\NodeGossipService.cs,NodeGossipService,The method has 10 parameters.
Long Parameter List,EventStore.Core.Services.PersistentSubscription.ConsumerStrategy.PinnedState,Node,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\ConsumerStrategy\PinnedState\Node.cs,Node,The method has 8 parameters.
Long Parameter List,EventStore.Core.Services.PersistentSubscription,IPersistentSubscriptionStreamReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\IPersistentSubscriptionStreamReader.cs,BeginReadEvents,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,AddClient,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionClient,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionClient.cs,PersistentSubscriptionClient,The method has 8 parameters.
Long Parameter List,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionParams,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionParams.cs,PersistentSubscriptionParams,The method has 20 parameters.
Long Parameter List,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionParamsBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionParamsBuilder.cs,PersistentSubscriptionParamsBuilder,The method has 16 parameters.
Long Parameter List,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,PersistentSubscriptionService,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,CreateSubscriptionGroup,The method has 15 parameters.
Long Parameter List,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionStreamReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionStreamReader.cs,BeginReadEvents,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,MasterReplicationService,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,SubscribeReplica,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,SetSubscriptionPosition,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Replication,ReplicaService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\ReplicaService.cs,ReplicaService,The method has 11 parameters.
Long Parameter List,EventStore.Core.Services.Storage.EpochManager,EpochManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\EpochManager\EpochManager.cs,EpochManager,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,IndexCommitter,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.Storage.ReaderIndex,CommitCheckResult,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\CommitCheckResult.cs,CommitCheckResult,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Storage.ReaderIndex,IndexReadEventResult,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReadEventResult.cs,IndexReadEventResult,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.Storage.ReaderIndex,ReadIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\ReadIndex.cs,ReadIndex,The method has 7 parameters.
Long Parameter List,EventStore.Core.Services.Storage.ReaderIndex,IndexReadStreamResult,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReadStreamResult.cs,IndexReadStreamResult,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.Storage.ReaderIndex,IndexReadStreamResult,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReadStreamResult.cs,IndexReadStreamResult,The method has 7 parameters.
Long Parameter List,EventStore.Core.Services.Storage.ReaderIndex,ReadIndexStats,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\ReadIndexStats.cs,ReadIndexStats,The method has 7 parameters.
Long Parameter List,EventStore.Core.Services.RequestManager.Managers,DeleteStreamTwoPhaseRequestManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\DeleteStreamTwoPhaseRequestManager.cs,DeleteStreamTwoPhaseRequestManager,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.RequestManager.Managers,TransactionCommitTwoPhaseRequestManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\TransactionCommitTwoPhaseRequestManager.cs,TransactionCommitTwoPhaseRequestManager,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.RequestManager.Managers,TwoPhaseRequestManagerBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\TwoPhaseRequestManagerBase.cs,TwoPhaseRequestManagerBase,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.RequestManager.Managers,TwoPhaseRequestManagerBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\TwoPhaseRequestManagerBase.cs,InitNoPreparePhase,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.RequestManager.Managers,TwoPhaseRequestManagerBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\TwoPhaseRequestManagerBase.cs,InitTwoPhase,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.RequestManager.Managers,WriteStreamTwoPhaseRequestManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\WriteStreamTwoPhaseRequestManager.cs,WriteStreamTwoPhaseRequestManager,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Monitoring,MonitoringService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\MonitoringService.cs,MonitoringService,The method has 10 parameters.
Long Parameter List,EventStore.Core.Services.Monitoring.Stats,QueueStats,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\Stats\QueueStats.cs,QueueStats,The method has 13 parameters.
Long Parameter List,EventStore.Core.Services.Monitoring.Stats,GcStats,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\Stats\GcStats.cs,GcStats,The method has 10 parameters.
Long Parameter List,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,NoData,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,NoData,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,NoData,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,NoData,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.Storage,StorageScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,StorageScavenger,The method has 9 parameters.
Long Parameter List,EventStore.Core.Services.Storage,StorageScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeCompletedEvent,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Storage,StorageChaser,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageChaser.cs,StorageChaser,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.Storage,StorageReaderService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderService.cs,StorageReaderService,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,StorageWriterService,The method has 7 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Http.Controllers,HttpHelpers,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\HttpHelpers.cs,Reply,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Http.Controllers,CommunicationController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\CommunicationController.cs,Register,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Http.Controllers,CommunicationController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\CommunicationController.cs,RegisterCustom,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,PostEntry,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetStreamEvent,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetStreamEventsBackward,The method has 8 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetStreamEventsForward,The method has 9 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Http,TrieUriRouter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\UriRouters.cs,GetAllUriMatches,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,Ok,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Http,Format,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Format.cs,ReadNextNPersistentMessagesCompleted,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Http,SendToHttpWithConversionEnvelope,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\SendToHttpWithConversionEnvelope.cs,SendToHttpWithConversionEnvelope,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToNextNPersistentMessagesFeed,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,SetEntryProperties,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Http,ResponseConfiguration,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\ResponseConfiguration.cs,ResponseConfiguration,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Http,ResponseConfiguration,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\ResponseConfiguration.cs,ResponseConfiguration,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Http,HttpService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\HttpService.cs,HttpService,The method has 8 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Http,SendToHttpEnvelope,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\SendToHttpEnvelope.cs,SendToHttpEnvelope,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ITcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ITcpDispatcher.cs,UnwrapPackage,The method has 7 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Tcp,TcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpDispatcher.cs,UnwrapPackage,The method has 7 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Tcp,TcpService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpService.cs,TcpService,The method has 10 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Tcp,TcpService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpService.cs,TcpService,The method has 10 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapWriteEvents,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapTransactionStart,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapTransactionWrite,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapTransactionCommit,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapDeleteStream,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapSubscribeToStream,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapCreatePersistentSubscription,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapUpdatePersistentSubscription,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapDeletePersistentSubscription,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapConnectToPersistentSubscription,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapPersistentSubscriptionAckEvents,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapPersistentSubscriptionNackEvents,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,TcpConnectionManager,The method has 10 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,TcpConnectionManager,The method has 15 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Tcp,TcpPackage,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,TcpPackage,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.Transport.Tcp,TcpPackage,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,TcpPackage,The method has 6 parameters.
Long Parameter List,EventStore.Core.Services.UserManagement,AllUsersReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\AllUsersReader.cs,AddLoadedUserDetails,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.UserManagement,UserManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\UserManagementService.cs,WriteUserEvent,The method has 5 parameters.
Long Parameter List,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,ClusterVNodeController,The method has 7 parameters.
Long Parameter List,EventStore.Core.Services.VNode,MessageForwardingProxy,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\MessageForwardingProxy.cs,Register,The method has 5 parameters.
Long Parameter List,EventStore.Core.Settings,SingleVNodeSettings,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Settings\VNodeSettings.cs,SingleVNodeSettings,The method has 15 parameters.
Long Parameter List,EventStore.Core.TransactionLog.Checkpoint,FileCheckpoint,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Checkpoint\FileCheckpoint.cs,FileCheckpoint,The method has 5 parameters.
Long Parameter List,EventStore.Core.TransactionLog.Checkpoint,MemoryMappedFileCheckpoint,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Checkpoint\MemoryMappedFileCheckpoint.cs,MemoryMappedFileCheckpoint,The method has 5 parameters.
Long Parameter List,EventStore.Core.TransactionLog.Checkpoint,Filenative,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Checkpoint\WriteThroughFileCheckpoint.cs,CreateFile,The method has 7 parameters.
Long Parameter List,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,TFChunkScavenger,The method has 8 parameters.
Long Parameter List,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,PublishChunksCompletedEvent,The method has 6 parameters.
Long Parameter List,EventStore.Core.TransactionLog.Chunks,ChunkFooter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\ChunkFooter.cs,ChunkFooter,The method has 6 parameters.
Long Parameter List,EventStore.Core.TransactionLog.Chunks,ChunkHeader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\ChunkHeader.cs,ChunkHeader,The method has 6 parameters.
Long Parameter List,EventStore.Core.TransactionLog.Chunks,TFChunkDbConfig,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDbConfig.cs,TFChunkDbConfig,The method has 11 parameters.
Long Parameter List,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TFChunk,The method has 7 parameters.
Long Parameter List,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,FromOngoingFile,The method has 5 parameters.
Long Parameter List,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateNew,The method has 8 parameters.
Long Parameter List,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateWithHeader,The method has 6 parameters.
Long Parameter List,EventStore.Core.TransactionLog,SeqReadResult,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\ReadResults.cs,SeqReadResult,The method has 6 parameters.
Long Parameter List,EventStore.Core.TransactionLog.LogRecords,EpochRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\EpochRecord.cs,EpochRecord,The method has 5 parameters.
Long Parameter List,EventStore.Core.TransactionLog.LogRecords,SystemLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\SystemLogRecord.cs,SystemLogRecord,The method has 5 parameters.
Long Parameter List,EventStore.Core.TransactionLog.LogRecords,CommitLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\CommitLogRecord.cs,CommitLogRecord,The method has 6 parameters.
Long Parameter List,EventStore.Core.TransactionLog.LogRecords,LogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,Prepare,The method has 12 parameters.
Long Parameter List,EventStore.Core.TransactionLog.LogRecords,LogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,SingleWrite,The method has 10 parameters.
Long Parameter List,EventStore.Core.TransactionLog.LogRecords,LogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,TransactionWrite,The method has 10 parameters.
Long Parameter List,EventStore.Core.TransactionLog.LogRecords,LogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,TransactionEnd,The method has 5 parameters.
Long Parameter List,EventStore.Core.TransactionLog.LogRecords,LogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,DeleteTombstone,The method has 6 parameters.
Long Parameter List,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,PrepareLogRecord,The method has 13 parameters.
Long Parameter List,EventStore.Core.TransactionLog.Unbuffered,NativeFile,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Unbuffered\NativeFile.cs,Create,The method has 5 parameters.
Long Parameter List,EventStore.Core.TransactionLog.Unbuffered,NativeFile,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Unbuffered\NativeFile.cs,CreateUnbufferedRW,The method has 5 parameters.
Long Parameter List,EventStore.Core.TransactionLog.Unbuffered,UnbufferedFileStream,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Unbuffered\UnbufferedFileStream.cs,Create,The method has 9 parameters.
Long Parameter List,EventStore.Core.TransactionLog.Unbuffered,UnbufferedFileStream,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Unbuffered\UnbufferedFileStream.cs,MemCopy,The method has 5 parameters.
Long Parameter List,EventStore.Core.TransactionLog.Unbuffered,UnbufferedFileStream,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Unbuffered\UnbufferedFileStream.cs,MemCopy,The method has 5 parameters.
Long Parameter List,EventStore.Core.TransactionLog.Unbuffered,UnbufferedFileStream,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Unbuffered\UnbufferedFileStream.cs,MemCopy,The method has 5 parameters.
Long Parameter List,EventStore.Core.TransactionLog.Unbuffered,WinNative,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Unbuffered\WinNative.cs,GetDiskFreeSpace,The method has 5 parameters.
Long Parameter List,EventStore.Core.TransactionLog.Unbuffered,WinNative,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Unbuffered\WinNative.cs,WriteFile,The method has 5 parameters.
Long Parameter List,EventStore.Core.TransactionLog.Unbuffered,WinNative,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Unbuffered\WinNative.cs,ReadFile,The method has 5 parameters.
Long Parameter List,EventStore.Core.TransactionLog.Unbuffered,WinNative,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Unbuffered\WinNative.cs,CreateFile,The method has 7 parameters.
Long Parameter List,EventStore.Core.Services.RequestManager,RequestManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\RequestManagementService.cs,RequestManagementService,The method has 6 parameters.
Long Identifier,EventStore.Core.Authentication,InternalAuthenticationProviderFactory,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Authentication\InternalAuthenticationProviderFactory.cs,BuildAuthenticationProvider,The length of the parameter passwordChangeNotificationReader is 32.
Long Identifier,EventStore.Core,ClusterVNode,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ClusterVNode.cs,ClusterVNode,The length of the parameter persistentSubscriptionController is 32.
Long Identifier,EventStore.Core.Services.PersistentSubscription.ConsumerStrategy.PinnedState,PinnedConsumerState,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\ConsumerStrategy\PinnedState\PinnedConsumerState.cs,AddNode,The length of the parameter maxBalancedClientAssignmentCount is 32.
Long Identifier,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,HandleLoadCompleted,The length of the parameter readStreamEventsBackwardCompleted is 33.
Long Identifier,EventStore.Core.Services.Transport.Http.Authentication,BasicHttpAuthenticationProvider,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Authentication\BasicHttpAuthenticationProvider.cs,BasicHttpAuthenticationProvider,The length of the parameter internalAuthenticationProvider is 30.
Long Identifier,EventStore.Core.Services.UserManagement,UserManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\UserManagementService.cs,UserManagementService,The length of the parameter skipInitializeStandardUsersCheck is 32.
Long Identifier,EventStore.Core.Settings,SingleVNodeSettings,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Settings\VNodeSettings.cs,SingleVNodeSettings,The length of the parameter skipInitializeStandardUsersCheck is 32.
Long Identifier,EventStore.Core.TransactionLog.Chunks,TFChunkManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkManager.cs,SwitchChunk,The length of the parameter removeChunksWithGreaterNumbers is 30.
Long Statement,EventStore.Core.Authentication,InternalAuthenticationProviderFactory,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Authentication\InternalAuthenticationProviderFactory.cs,BuildAuthenticationProvider,The length of the statement  "	var userManagement = new UserManagementService (mainQueue' ioDispatcher' passwordHashAlgorithm' skipInitializeStandardUsersCheck: false); " is 137.
Long Statement,EventStore.Core.Authentication,InternalAuthenticationProvider,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Authentication\InternalAuthenticationProvider.cs,Authenticate,The length of the statement  "		_ioDispatcher.ReadBackward (userStreamId' -1' 1' false' SystemAccount.Principal' m => ReadUserDataCompleted (m' authenticationRequest)); " is 136.
Long Statement,EventStore.Core.Authentication,InternalAuthenticationProvider,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Authentication\InternalAuthenticationProvider.cs,ReadUserDataCompleted,The length of the statement  "		if (completed.Result == ReadStreamResult.StreamDeleted || completed.Result == ReadStreamResult.NoStream || completed.Result == ReadStreamResult.AccessDenied) { " is 159.
Long Statement,EventStore.Core.Bus,MPSCMessageQueue,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\MPSCMessageQueue.cs,TryDequeue,The length of the statement  "	// To do not get volatile read' the value is stored in a separate field and then persisted in both the sequenceReadToValue and sequenceRead. " is 140.
Long Statement,EventStore.Core.Bus,QueuedHandlerAutoReset,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerAutoReset.cs,ReadFromQueue,The length of the statement  "						Log.Trace ("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count); " is 154.
Long Statement,EventStore.Core.Bus,QueuedHandlerAutoReset,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerAutoReset.cs,ReadFromQueue,The length of the statement  "							Log.Error ("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count); " is 166.
Long Statement,EventStore.Core.Bus,QueuedHandlerMRES,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerMRES.cs,ReadFromQueue,The length of the statement  "						Log.Trace ("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count); " is 154.
Long Statement,EventStore.Core.Bus,QueuedHandlerMRES,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerMRES.cs,ReadFromQueue,The length of the statement  "							Log.Error ("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count); " is 166.
Long Statement,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,GetStatistics,The length of the statement  "		var idleTimePercent = Math.Min (100.0' lastRunMs.Ticks != 0 ? 100.0 * (totalIdleTime - _lastTotalIdleTime).Ticks / lastRunMs.Ticks : 100); " is 138.
Long Statement,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,GetStatistics,The length of the statement  "		var stats = new QueueStats (Name' GroupName' currentQueueLength' avgItemsPerSecond' avgProcessingTime' idleTimePercent' _busyWatch.IsRunning ? _busyWatch.Elapsed : (TimeSpan?)null' _idleWatch.IsRunning ? _idleWatch.Elapsed : (TimeSpan?)null' totalItems' _currentQueueLengthPeak' _lifetimeQueueLengthPeak' _lastProcessedMsgType' _inProgressMsgType); " is 348.
Long Statement,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The length of the statement  "			while (_nonIdle > 0 || _length > 0 || AreCheckpointsDifferent (0) || AreCheckpointsDifferent (1) || AreCheckpointsDifferent (2) || AnyCheckpointsDifferent () || (waitForNonEmptyTf && _writerCheckpoint [0].Read () == 0)) { " is 221.
Long Statement,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,AreCheckpointsDifferent,The length of the statement  "	return _writerCheckpoint [index] != null && _chaserCheckpoint [index] != null && _writerCheckpoint [index].ReadNonFlushed () != _chaserCheckpoint [index].Read (); " is 162.
Long Statement,EventStore.Core.Bus,QueuedHandlerThreadPool,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerThreadPool.cs,ReadFromQueue,The length of the statement  "						Log.Trace ("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' _queueStats.Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' queueCnt' _queue.Count); " is 171.
Long Statement,EventStore.Core.Bus,QueuedHandlerThreadPool,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerThreadPool.cs,ReadFromQueue,The length of the statement  "							Log.Error ("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' _queueStats.Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' queueCnt' _queue.Count); " is 183.
Long Statement,EventStore.Core.Bus,QueuedHandlerSleep,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerSleep.cs,ReadFromQueue,The length of the statement  "						Log.Trace ("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count); " is 154.
Long Statement,EventStore.Core.Bus,QueuedHandlerSleep,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerSleep.cs,ReadFromQueue,The length of the statement  "							Log.Error ("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count); " is 166.
Long Statement,EventStore.Core.Bus,QueuedHandlerMresWithMpsc,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerMRESWithMPSC.cs,ReadFromQueue,The length of the statement  "								Log.Trace ("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' estimatedQueueCount' _queue.EstimageCurrentQueueCount ()); " is 193.
Long Statement,EventStore.Core.Bus,QueuedHandlerMresWithMpsc,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerMRESWithMPSC.cs,ReadFromQueue,The length of the statement  "									Log.Error ("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' estimatedQueueCount' _queue.EstimageCurrentQueueCount ()); " is 205.
Long Statement,EventStore.Core.Bus,QueuedHandlerPulse,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerPulse.cs,ReadFromQueue,The length of the statement  "					Log.Trace ("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count); " is 154.
Long Statement,EventStore.Core.Bus,QueuedHandlerPulse,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerPulse.cs,ReadFromQueue,The length of the statement  "						Log.Error ("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count); " is 166.
Long Statement,EventStore.Core.Bus,SPSCMessageQueue,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\SPSCMessageQueue.cs,TryDequeue,The length of the statement  "	// To do not get volatile read' the value is stored in a separate field and then persisted in both the sequenceReadToValue and sequenceRead. " is 140.
Long Statement,EventStore.Core.Bus,InMemoryBusUnoptimized,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\InMemoryBus.cs,PublishByType,The length of the statement  "					Log.Trace ("SLOW BUS MSG [{0}]: {1} - {2}ms. Handler: {3}."' Name' message.GetType ().Name' (int)elapsed.TotalMilliseconds' handler.HandlerName); " is 145.
Long Statement,EventStore.Core.Bus,InMemoryBus2,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\InMemoryBus.cs,PublishByType,The length of the statement  "				Log.Trace ("SLOW BUS MSG [{0}]: {1} - {2}ms. Handler: {3}."' Name' message.GetType ().Name' (int)elapsed.TotalMilliseconds' handler.HandlerName); " is 145.
Long Statement,EventStore.Core.Bus,InMemoryBus,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\InMemoryBus.cs,Publish,The length of the statement  "				Log.Trace ("SLOW BUS MSG [{0}]: {1} - {2}ms. Handler: {3}."' Name' message.GetType ().Name' (int)elapsed.TotalMilliseconds' handler.HandlerName); " is 145.
Long Statement,EventStore.Core.Bus,InMemoryBus,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\InMemoryBus.cs,Publish,The length of the statement  "					Log.Error ("---!!! VERY SLOW BUS MSG [{0}]: {1} - {2}ms. Handler: {3}."' Name' message.GetType ().Name' (int)elapsed.TotalMilliseconds' handler.HandlerName); " is 157.
Long Statement,EventStore.Core.Bus,QueuedHandlerAutoResetWithMpsc,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerAutoResetWithMPSC.cs,ReadFromQueue,The length of the statement  "								Log.Trace ("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' estimatedQueueCount' _queue.EstimageCurrentQueueCount ()); " is 193.
Long Statement,EventStore.Core.Bus,QueuedHandlerAutoResetWithMpsc,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerAutoResetWithMPSC.cs,ReadFromQueue,The length of the statement  "									Log.Error ("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' estimatedQueueCount' _queue.EstimageCurrentQueueCount ()); " is 205.
Long Statement,EventStore.Core,ClusterNodeMutex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ClusterNodeMutex.cs,Acquire,The length of the statement  "		Log.InfoException (exc' "Cluster Node mutex '{0}' is said to be abandoned. " + "Probably previous instance of server was terminated abruptly."' MutexName); " is 155.
Long Statement,EventStore.Core,ClusterVNode,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ClusterVNode.cs,ToString,The length of the statement  "	return string.Format ("[{0:B}' {1}' {2}' {3}' {4}]"' _nodeInfo.InstanceId' _nodeInfo.InternalTcp' _nodeInfo.ExternalTcp' _nodeInfo.InternalHttp' _nodeInfo.ExternalHttp); " is 169.
Long Statement,EventStore.Core,ExclusiveDbLock,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ExclusiveDbLock.cs,Acquire,The length of the statement  "		Log.InfoException (exc' "DB mutex '{0}' is said to be abandoned. " + "Probably previous instance of server was terminated abruptly."' MutexName); " is 145.
Long Statement,EventStore.Core,ProgramBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ProgramBase.cs,Run,The length of the statement  "		var options = EventStoreOptions.Parse<TOptions> (args' Opts.EnvPrefix' Path.Combine (Locations.DefaultConfigurationDirectory' DefaultFiles.DefaultConfigFile)); " is 159.
Long Statement,EventStore.Core,ProgramBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ProgramBase.cs,Run,The length of the statement  "			Console.WriteLine ("EventStore version {0} ({1}/{2}' {3})"' VersionInfo.Version' VersionInfo.Branch' VersionInfo.Hashtag' VersionInfo.Timestamp); " is 145.
Long Statement,EventStore.Core,ProgramBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ProgramBase.cs,CommitSuicideIfInBoehmOrOnBadVersionsOfMono,The length of the statement  "			Application.Exit (3' "Appears that we are running in mono with boehm GC this is generally not a good idea' please run with sgen instead." + "to run with sgen use mono --gc=sgen. If you really want to run with boehm GC you can use --force to override this error."); " is 264.
Long Statement,EventStore.Core,ProgramBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ProgramBase.cs,CommitSuicideIfInBoehmOrOnBadVersionsOfMono,The length of the statement  "			Log.Warn ("You appear to be running a version of Mono which is untested and not supported. Only Mono 4.6.2 is supported at this time."); " is 136.
Long Statement,EventStore.Core,ProgramBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ProgramBase.cs,Init,The length of the statement  "	Log.Info ("\n{0'-25} {1} ({2}/{3}' {4})"' "ES VERSION:"' VersionInfo.Version' VersionInfo.Branch' VersionInfo.Hashtag' VersionInfo.Timestamp); " is 142.
Long Statement,EventStore.Core,ProgramBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ProgramBase.cs,Init,The length of the statement  "	Log.Info ("{0'-25} {1}"' "GC:"' GC.MaxGeneration == 0 ? "NON-GENERATION (PROBABLY BOEHM)" : string.Format ("{0} GENERATIONS"' GC.MaxGeneration + 1)); " is 149.
Long Statement,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,RunInMemory,The length of the statement  "	_dbPath = Path.Combine (Path.GetTempPath ()' "EmbeddedEventStore"' string.Format ("{0:yyyy-MM-dd_HH.mm.ss.ffffff}-EmbeddedNode"' DateTime.UtcNow)); " is 147.
Long Statement,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,GetCertificateFromStore,The length of the statement  "		throw new Exception (string.Format ("Could not open certificate store '{0}' in location {1}'."' store.Name' store.Location)' exc); " is 130.
Long Statement,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,GetCertificateFromStore,The length of the statement  "			throw new Exception (string.Format ("Could not determine a unique certificate from thumbprint '{0}'."' certificateThumbprint)); " is 127.
Long Statement,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,GetCertificateFromStore,The length of the statement  "			throw new Exception (string.Format ("Could not find valid certificate with subject name '{0}'."' certificateSubjectName)); " is 122.
Long Statement,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,GetCertificateFromStore,The length of the statement  "			throw new Exception (string.Format ("Could not determine a unique certificate from subject name '{0}'."' certificateSubjectName)); " is 130.
Long Statement,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,GetCertificateFromStore,The length of the statement  "	throw new ArgumentException ("No thumbprint or subject name was specified for a certificate' but a certificate store was specified."); " is 134.
Long Statement,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,EnsureHttpPrefixes,The length of the statement  "	if ((_internalHttp.Address.Equals (IPAddress.Parse ("0.0.0.0")) || _externalHttp.Address.Equals (IPAddress.Parse ("0.0.0.0"))) && _addInterfacePrefixes) { " is 154.
Long Statement,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,EnsureGossipAdvertiseInfo,The length of the statement  "		if ((_internalTcp.Address.Equals (IPAddress.Parse ("0.0.0.0")) || _externalTcp.Address.Equals (IPAddress.Parse ("0.0.0.0"))) && _addInterfacePrefixes) { " is 152.
Long Statement,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,EnsureGossipAdvertiseInfo,The length of the statement  "		var intSecureTcpPort = _advertiseInternalSecureTcpPortAs > 0 ? _advertiseInternalSecureTcpPortAs : _internalSecureTcp == null ? 0 : _internalSecureTcp.Port; " is 156.
Long Statement,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,EnsureGossipAdvertiseInfo,The length of the statement  "		var extSecureTcpPort = _advertiseExternalSecureTcpPortAs > 0 ? _advertiseExternalSecureTcpPortAs : _externalSecureTcp == null ? 0 : _externalSecureTcp.Port; " is 156.
Long Statement,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,EnsureGossipAdvertiseInfo,The length of the statement  "		_gossipAdvertiseInfo = new GossipAdvertiseInfo (intTcpEndPoint' intSecureTcpEndPoint' extTcpEndPoint' extSecureTcpEndPoint' intHttpEndPoint' extHttpEndPoint' _advertiseInternalIPAs' _advertiseExternalIPAs' _advertiseInternalHttpPortAs' _advertiseExternalHttpPortAs); " is 266.
Long Statement,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,Build,The length of the statement  "	_dbConfig = CreateDbConfig (_chunkSize' _cachedChunks' _dbPath' _chunksCacheSize' _inMemoryDb' _unbuffered' _writethrough' _log); " is 129.
Long Statement,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,Build,The length of the statement  "	_vNodeSettings = new ClusterVNodeSettings (Guid.NewGuid ()' 0' _internalTcp' _internalSecureTcp' _externalTcp' _externalSecureTcp' _internalHttp' _externalHttp' _gossipAdvertiseInfo' _intHttpPrefixes.ToArray ()' _extHttpPrefixes.ToArray ()' _enableTrustedAuth' _certificate' _workerThreads' _discoverViaDns' _clusterDns' _gossipSeeds.ToArray ()' _minFlushDelay' _clusterNodeCount' _prepareAckCount' _commitAckCount' _prepareTimeout' _commitTimeout' _useSsl' _disableInsecureTCP' _sslTargetHost' _sslValidateServer' _statsPeriod' _statsStorage' _nodePriority' _authenticationProviderFactory' _disableScavengeMerging' _scavengeHistoryMaxAge' _adminOnPublic' _statsOnPublic' _gossipOnPublic' _gossipInterval' _gossipAllowedTimeDifference' _gossipTimeout' _intTcpHeartbeatTimeout' _intTcpHeartbeatInterval' _extTcpHeartbeatTimeout' _extTcpHeartbeatInterval' !_skipVerifyDbHashes' _maxMemtableSize' _hashCollisionReadLimit' _startStandardProjections' _disableHTTPCaching' _logHttpRequests' _index' _enableHistograms' _indexCacheDepth' _indexBitnessVersion' consumerStrategies' _unsafeIgnoreHardDelete' _betterOrdering' _readerThreadsCount' _alwaysKeepScavenged' _gossipOnSingleNode); " is 1178.
Long Statement,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,GetGossipSource,The length of the statement  "			throw new Exception ("DNS discovery is disabled' but no gossip seed endpoints have been specified. " + "Specify gossip seeds using the `GossipSeed` option."); " is 158.
Long Statement,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,CreateDbConfig,The length of the statement  "				log.Info ("Access to path {0} denied. The Event Store database will be created in {1}"' dbPath' Locations.FallbackDefaultDataDirectory); " is 136.
Long Statement,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,CreateDbConfig,The length of the statement  "	var cache = cachedChunks >= 0 ? cachedChunks * (long)(TFConsts.ChunkSize + ChunkHeader.Size + ChunkFooter.Size) : chunksCacheSize; " is 130.
Long Statement,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,CreateDbConfig,The length of the statement  "	var nodeConfig = new TFChunkDbConfig (dbPath' new VersionedPatternFileNamingStrategy (dbPath' "chunk-")' chunkSize' cache' writerChk' chaserChk' epochChk' truncateChk' inMemDb' unbuffered' writethrough); " is 203.
Long Statement,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,ForManager,The length of the statement  "	return new MemberInfo (instanceId' timeStamp' VNodeState.Manager' true' internalHttpEndPoint' null' externalHttpEndPoint' null' internalHttpEndPoint' externalHttpEndPoint' -1' -1' -1' -1' -1' Guid.Empty' 0); " is 207.
Long Statement,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,ForVNode,The length of the statement  "	return new MemberInfo (instanceId' timeStamp' state' isAlive' internalTcpEndPoint' internalSecureTcpEndPoint' externalTcpEndPoint' externalSecureTcpEndPoint' internalHttpEndPoint' externalHttpEndPoint' lastCommitPosition' writerCheckpoint' chaserCheckpoint' epochPosition' epochNumber' epochId' nodePriority); " is 309.
Long Statement,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,Is,The length of the statement  "	return endPoint != null && (InternalHttpEndPoint.Equals (endPoint) || ExternalHttpEndPoint.Equals (endPoint) || InternalTcpEndPoint.Equals (endPoint) || (InternalSecureTcpEndPoint != null && InternalSecureTcpEndPoint.Equals (endPoint)) || ExternalTcpEndPoint.Equals (endPoint) || (ExternalSecureTcpEndPoint != null && ExternalSecureTcpEndPoint.Equals (endPoint))); " is 364.
Long Statement,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,Updated,The length of the statement  "	return new MemberInfo (InstanceId' DateTime.UtcNow' state ?? State' isAlive ?? IsAlive' InternalTcpEndPoint' InternalSecureTcpEndPoint' ExternalTcpEndPoint' ExternalSecureTcpEndPoint' InternalHttpEndPoint' ExternalHttpEndPoint' lastCommitPosition ?? LastCommitPosition' writerCheckpoint ?? WriterCheckpoint' chaserCheckpoint ?? ChaserCheckpoint' epoch != null ? epoch.EpochPosition : EpochPosition' epoch != null ? epoch.EpochNumber : EpochNumber' epoch != null ? epoch.EpochId : EpochId' NodePriority); " is 503.
Long Statement,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,ToString,The length of the statement  "		return string.Format ("MAN {0:B} <{1}> [{2}' {3}' {4}] | {5:yyyy-MM-dd HH:mm:ss.fff}"' InstanceId' IsAlive ? "LIVE" : "DEAD"' State' InternalHttpEndPoint' ExternalHttpEndPoint' TimeStamp); " is 188.
Long Statement,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,ToString,The length of the statement  "	return string.Format ("VND {0:B} <{1}> [{2}' {3}' {4}' {5}' {6}' {7}' {8}] {9}/{10}/{11}/E{12}@{13}:{14:B} | {15:yyyy-MM-dd HH:mm:ss.fff}"' InstanceId' IsAlive ? "LIVE" : "DEAD"' State' InternalTcpEndPoint' InternalSecureTcpEndPoint == null ? "n/a" : InternalSecureTcpEndPoint.ToString ()' ExternalTcpEndPoint' ExternalSecureTcpEndPoint == null ? "n/a" : ExternalSecureTcpEndPoint.ToString ()' InternalHttpEndPoint' ExternalHttpEndPoint' LastCommitPosition' WriterCheckpoint' ChaserCheckpoint' EpochNumber' EpochPosition' EpochId' TimeStamp); " is 542.
Long Statement,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,Equals,The length of the statement  "	return other.InstanceId == InstanceId && other.State == State && other.IsAlive == IsAlive && Equals (other.InternalTcpEndPoint' InternalTcpEndPoint) && Equals (other.InternalSecureTcpEndPoint' InternalSecureTcpEndPoint) && Equals (other.ExternalTcpEndPoint' ExternalTcpEndPoint) && Equals (other.ExternalSecureTcpEndPoint' ExternalSecureTcpEndPoint) && Equals (other.InternalHttpEndPoint' InternalHttpEndPoint) && Equals (other.ExternalHttpEndPoint' ExternalHttpEndPoint) && other.EpochPosition == EpochPosition && other.EpochNumber == EpochNumber && other.EpochId == EpochId && other.NodePriority == NodePriority; " is 614.
Long Statement,EventStore.Core.Cluster,VNodeInfoHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\VNodeInfo.cs,FromMemberInfo,The length of the statement  "	return new VNodeInfo (member.InstanceId' 0' member.InternalTcpEndPoint' member.InternalSecureTcpEndPoint' member.ExternalTcpEndPoint' member.ExternalSecureTcpEndPoint' member.InternalHttpEndPoint' member.ExternalHttpEndPoint); " is 226.
Long Statement,EventStore.Core.Cluster.Settings,ClusterVNodeSettings,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\Settings\ClusterVNodeSettings.cs,ToString,The length of the statement  "	return string.Format ("InstanceId: {0}\n" + "InternalTcp: {1}\n" + "InternalSecureTcp: {2}\n" + "ExternalTcp: {3}\n" + "ExternalSecureTcp: {4}\n" + "InternalHttp: {5}\n" + "ExternalHttp: {6}\n" + "IntHttpPrefixes: {7}\n" + "ExtHttpPrefixes: {8}\n" + "EnableTrustedAuth: {9}\n" + "Certificate: {10}\n" + "LogHttpRequests: {11}\n" + "WorkerThreads: {12}\n" + "DiscoverViaDns: {13}\n" + "ClusterDns: {14}\n" + "GossipSeeds: {15}\n" + "ClusterNodeCount: {16}\n" + "MinFlushDelay: {17}\n" + "PrepareAckCount: {18}\n" + "CommitAckCount: {19}\n" + "PrepareTimeout: {20}\n" + "CommitTimeout: {21}\n" + "UseSsl: {22}\n" + "SslTargetHost: {23}\n" + "SslValidateServer: {24}\n" + "StatsPeriod: {25}\n" + "StatsStorage: {26}\n" + "AuthenticationProviderFactory Type: {27}\n" + "NodePriority: {28}" + "GossipInterval: {29}\n" + "GossipAllowedTimeDifference: {30}\n" + "GossipTimeout: {31}\n" + "HistogramEnabled: {32}\n" + "HTTPCachingDisabled: {33}\n" + "IndexPath: {34}\n" + "ScavengeHistoryMaxAge: {35}\n"' NodeInfo.InstanceId' NodeInfo.InternalTcp' NodeInfo.InternalSecureTcp' NodeInfo.ExternalTcp' NodeInfo.ExternalSecureTcp' NodeInfo.InternalHttp' NodeInfo.ExternalHttp' string.Join ("' "' IntHttpPrefixes)' string.Join ("' "' ExtHttpPrefixes)' EnableTrustedAuth' Certificate == null ? "n/a" : Certificate.ToString (true)' LogHttpRequests' WorkerThreads' DiscoverViaDns' ClusterDns' string.Join ("'"' GossipSeeds.Select (x => x.ToString ()))' ClusterNodeCount' MinFlushDelay' PrepareAckCount' CommitAckCount' PrepareTimeout' CommitTimeout' UseSsl' SslTargetHost' SslValidateServer' StatsPeriod' StatsStorage' AuthenticationProviderFactory.GetType ()' NodePriority' GossipInterval' GossipAllowedTimeDifference' GossipTimeout' EnableHistograms' DisableHTTPCaching' Index' ScavengeHistoryMaxAge); " is 1786.
Long Statement,EventStore.Core.Data,GossipAdvertiseInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\GossipAdvertiseInfo.cs,ToString,The length of the statement  "	return string.Format ("IntTcp: {0}' IntSecureTcp: {1}\nExtTcp: {2}' ExtSecureTcp: {3}\nIntHttp: {4}' ExtHttp: {5}' IntAdvertiseAs: {6}:{7}' ExtAdvertiseAs: {8}:{9}"' InternalTcp' InternalSecureTcp' ExternalTcp' ExternalSecureTcp' InternalHttp' ExternalHttp' AdvertiseInternalIPAs' AdvertiseInternalHttpPortAs' AdvertiseExternalIPAs' AdvertiseExternalHttpPortAs); " is 362.
Long Statement,EventStore.Core.Data,StreamAcl,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\StreamAcl.cs,ToString,The length of the statement  "	return string.Format ("Read: {0}' Write: {1}' Delete: {2}' MetaRead: {3}' MetaWrite: {4}"' ReadRoles == null ? "<null>" : "[" + string.Join ("'"' ReadRoles) + "]"' WriteRoles == null ? "<null>" : "[" + string.Join ("'"' WriteRoles) + "]"' DeleteRoles == null ? "<null>" : "[" + string.Join ("'"' DeleteRoles) + "]"' MetaReadRoles == null ? "<null>" : "[" + string.Join ("'"' MetaReadRoles) + "]"' MetaWriteRoles == null ? "<null>" : "[" + string.Join ("'"' MetaWriteRoles) + "]"); " is 480.
Long Statement,EventStore.Core.Data,VNodeInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\VNodeInfo.cs,Is,The length of the statement  "	return endPoint != null && (InternalHttp.Equals (endPoint) || ExternalHttp.Equals (endPoint) || InternalTcp.Equals (endPoint) || (InternalSecureTcp != null && InternalSecureTcp.Equals (endPoint)) || ExternalTcp.Equals (endPoint) || (ExternalSecureTcp != null && ExternalSecureTcp.Equals (endPoint))); " is 300.
Long Statement,EventStore.Core.Data,VNodeInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\VNodeInfo.cs,ToString,The length of the statement  "	return string.Format ("InstanceId: {0:B}' InternalTcp: {1}' InternalSecureTcp: {2}' " + "ExternalTcp: {3}' ExternalSecureTcp: {4}' InternalHttp: {5}' ExternalHttp: {6}"' InstanceId' InternalTcp' InternalSecureTcp' ExternalTcp' ExternalSecureTcp' InternalHttp' ExternalHttp); " is 274.
Long Statement,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,Equals,The length of the statement  "	return EventNumber == other.EventNumber && LogPosition == other.LogPosition && CorrelationId.Equals (other.CorrelationId) && EventId.Equals (other.EventId) && TransactionPosition == other.TransactionPosition && TransactionOffset == other.TransactionOffset && string.Equals (EventStreamId' other.EventStreamId) && ExpectedVersion == other.ExpectedVersion && TimeStamp.Equals (other.TimeStamp) && Flags.Equals (other.Flags) && string.Equals (EventType' other.EventType) && Data.SequenceEqual (other.Data) && Metadata.SequenceEqual (other.Metadata); " is 546.
Long Statement,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,ToString,The length of the statement  "	return string.Format ("EventNumber: {0}' " + "LogPosition: {1}' " + "CorrelationId: {2}' " + "EventId: {3}' " + "TransactionPosition: {4}' " + "TransactionOffset: {5}' " + "EventStreamId: {6}' " + "ExpectedVersion: {7}' " + "TimeStamp: {8}' " + "Flags: {9}' " + "EventType: {10}"' EventNumber' LogPosition' CorrelationId' EventId' TransactionPosition' TransactionOffset' EventStreamId' ExpectedVersion' TimeStamp' Flags' EventType); " is 432.
Long Statement,EventStore.Core.Data,StreamMetadata,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\StreamMetadata.cs,ToString,The length of the statement  "	return string.Format ("MaxCount: {0}' MaxAge: {1}' TruncateBefore: {2}' TempStream: {3}' CacheControl: {4}' Acl: {5}"' MaxCount' MaxAge' TruncateBefore' TempStream' CacheControl' Acl); " is 184.
Long Statement,EventStore.Core.Data,StreamMetadata,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\StreamMetadata.cs,FromJsonReader,The length of the statement  "	return new StreamMetadata (maxCount > 0 ? maxCount : null' maxAge > TimeSpan.Zero ? maxAge : null' truncateBefore >= 0 ? truncateBefore : null' tempStream' cacheControl > TimeSpan.Zero ? cacheControl : null' acl); " is 213.
Long Statement,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,BeginReadForward,The length of the statement  "	return steps => cancellationScope.Register (ioDispatcher.ReadForward (streamId' fromEventNumber' maxCount' resolveLinks' principal' response => { " is 145.
Long Statement,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,BeginReadBackward,The length of the statement  "	return steps => cancellationScope.Register (ioDispatcher.ReadBackward (streamId' fromEventNumber' maxCount' resolveLinks' principal' response => { " is 146.
Long Statement,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,BeginWriteEvents,The length of the statement  "	return steps => WriteEventsWithRetry (ioDispatcher' cancellationScope' streamId' expectedVersion' principal' events' handler' steps); " is 133.
Long Statement,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,BeginDeleteStream,The length of the statement  "	return steps => DeleteStreamWithRetry (ioDispatcher' cancellationScope' streamId' expectedVersion' hardDelete' principal' handler' steps); " is 138.
Long Statement,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,BeginUpdateStreamAcl,The length of the statement  "	return steps => UpdateStreamAclWithRetry (ioDispatcher' cancellationScope' streamId' expectedVersion' principal' metadata' handler' steps); " is 139.
Long Statement,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,WriteEventsWithRetry,The length of the statement  "	PerformWithRetry (ioDispatcher' handler' steps' expectedVersion == ExpectedVersion.Any' TimeSpan.FromMilliseconds (100)' action => cancellationScope.Register (ioDispatcher.WriteEvents (streamId' expectedVersion' events' principal' response => { " is 244.
Long Statement,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,DeleteStreamWithRetry,The length of the statement  "	PerformWithRetry (ioDispatcher' handler' steps' expectedVersion == ExpectedVersion.Any' TimeSpan.FromMilliseconds (100)' action => cancellationScope.Register (ioDispatcher.DeleteStream (streamId' expectedVersion' hardDelete' principal' response => { " is 249.
Long Statement,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,UpdateStreamAclWithRetry,The length of the statement  "	PerformWithRetry (ioDispatcher' handler' steps' expectedVersion == ExpectedVersion.Any' TimeSpan.FromMilliseconds (100)' action => cancellationScope.Register (ioDispatcher.WriteEvents (SystemStreams.MetastreamOf (streamId)' expectedVersion' new[] { " is 248.
Long Statement,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The length of the statement  "					throw new PackageFramingException (string.Format ("Package size is out of bounds: {0} (max: {1})."' _packageLength' _maxPackageSize)); " is 134.
Long Statement,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The length of the statement  "				int suffixLength = (buf [_packageLength - 4] << 0) | (buf [_packageLength - 3] << 8) | (buf [_packageLength - 2] << 16) | (buf [_packageLength - 1] << 24); " is 155.
Long Statement,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The length of the statement  "					throw new Exception (string.Format ("Prefix length: {0} is not equal to suffix length: {1}."' _packageLength - PrefixLength' suffixLength)); " is 140.
Long Statement,EventStore.Core.Helpers,IODispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,ReadBackward,The length of the statement  "	return BackwardReader.Publish (new ClientMessage.ReadStreamEventsBackward (corrId' corrId' BackwardReader.Envelope' streamId' fromEventNumber' maxCount' resolveLinks' false' null' principal)' action); " is 200.
Long Statement,EventStore.Core.Helpers,IODispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,ReadForward,The length of the statement  "	return ForwardReader.Publish (new ClientMessage.ReadStreamEventsForward (corrId' corrId' ForwardReader.Envelope' streamId' fromEventNumber' maxCount' resolveLinks' false' null' principal)' action); " is 197.
Long Statement,EventStore.Core.Helpers,IODispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,ConfigureStreamAndWriteEvents,The length of the statement  "					UpdateStreamAcl (streamId' ExpectedVersion.Any' principal' streamMetadata.Value' metaCompleted => WriteEvents (streamId' expectedVersion' events' principal' action)); " is 166.
Long Statement,EventStore.Core.Helpers,IODispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,WriteEvents,The length of the statement  "	return Writer.Publish (new ClientMessage.WriteEvents (corrId' corrId' Writer.Envelope' false' streamId' expectedVersion' events' principal)' action); " is 149.
Long Statement,EventStore.Core.Helpers,IODispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,WriteEvent,The length of the statement  "	return Writer.Publish (new ClientMessage.WriteEvents (corrId' corrId' Writer.Envelope' false' streamId' expectedVersion' new[] { " is 128.
Long Statement,EventStore.Core.Helpers,IODispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,DeleteStream,The length of the statement  "	return StreamDeleter.Publish (new ClientMessage.DeleteStream (corrId' corrId' Writer.Envelope' false' streamId' expectedVersion' hardDelete' principal)' action); " is 161.
Long Statement,EventStore.Core.Helpers,IODispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,SubscribeAwake,The length of the statement  "	Awaker.Publish (new AwakeServiceMessage.SubscribeAwake (Awaker.Envelope' corrId' streamId' from' new IODispatcherDelayedMessage (corrId' null))' action); " is 153.
Long Statement,EventStore.Core.Helpers,IODispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,Delay,The length of the statement  "	_publisher.Publish (TimerMessage.Schedule.Create (delay' _inputQueueEnvelope' new IODispatcherDelayedMessage (_selfId' action))); " is 129.
Long Statement,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,FromFile,The length of the statement  "				throw new CorruptIndexException (string.Format ("Negative prepare/commit checkpoint in non-empty IndexMap: {0}."' checkpoints)); " is 128.
Long Statement,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,ReadAndCheckHash,The length of the statement  "		throw new CorruptIndexException (string.Format ("Hash validation error (different hash sizes).\n" + "Expected hash ({0}): {1}' real hash ({2}): {3}."' expectedHash.Length' BitConverter.ToString (expectedHash)' realHash.Length' BitConverter.ToString (realHash))); " is 262.
Long Statement,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,ReadAndCheckHash,The length of the statement  "			throw new CorruptIndexException (string.Format ("Hash validation error (different hashes).\n" + "Expected hash ({0}): {1}' real hash ({2}): {3}."' expectedHash.Length' BitConverter.ToString (expectedHash)' realHash.Length' BitConverter.ToString (realHash))); " is 258.
Long Statement,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,LoadPTables,The length of the statement  "			throw new CorruptIndexException (string.Format ("Negative prepare/commit checkpoint in non-empty IndexMap: {0}."' checkpoints)); " is 128.
Long Statement,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,AddPTable,The length of the statement  "			PTable table = PTable.MergeTo (tables [level]' filename' upgradeHash' existsAt' recordExistsAt' version' indexCacheDepth); " is 122.
Long Statement,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The length of the statement  "	using (var stream = UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.Read' FileShare.Read' false' 4096' 4096' false' 4096)) { " is 142.
Long Statement,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,ValidateHash,The length of the statement  "		throw new CorruptIndexException (new HashValidationException (string.Format ("Hash sizes differ! FileHash({0}): {1}' hash({2}): {3}."' computed.Length' BitConverter.ToString (computed)' fromFile.Length' BitConverter.ToString (fromFile)))); " is 239.
Long Statement,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,ValidateHash,The length of the statement  "			throw new CorruptIndexException (new HashValidationException (string.Format ("Hashes are different! computed: {0}' hash: {1}."' BitConverter.ToString (computed)' BitConverter.ToString (fromFile)))); " is 198.
Long Statement,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,TryGetLargestEntry,The length of the statement  "			throw new Exception (string.Format ("candEntry ({0}@{1}) > startKey {2}' stream {3}' startNum {4}' endNum {5}' PTable: {6}."' candEntry.Stream' candEntry.Version' startKey' stream' startNumber' endNumber' Filename)); " is 216.
Long Statement,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,TryGetSmallestEntry,The length of the statement  "			throw new Exception (string.Format ("candEntry ({0}@{1}) < startKey {2}' stream {3}' startNum {4}' endNum {5}' PTable: {6}."' candEntry.Stream' candEntry.Version' startKey' stream' startNumber' endNumber' Filename)); " is 216.
Long Statement,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,GetRange,The length of the statement  "				throw new Exception (string.Format ("entry ({0}@{1}) > endKey {2}' stream {3}' startNum {4}' endNum {5}' PTable: {6}."' entry.Stream' entry.Version' startKey' stream' startNumber' endNumber' Filename)); " is 202.
Long Statement,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,FromMemtable,The length of the statement  "	using (var fs = new FileStream (filename' FileMode.Create' FileAccess.ReadWrite' FileShare.None' DefaultSequentialBufferSize' FileOptions.SequentialScan)) { " is 156.
Long Statement,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,MergeTo,The length of the statement  "	var enumerators = tables.Select (table => new EnumerableTable (version' table' upgradeHash' existsAt' readRecord)).ToList (); " is 125.
Long Statement,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,MergeTo,The length of the statement  "	using (var f = new FileStream (outputFile' FileMode.CreateNew' FileAccess.ReadWrite' FileShare.None' DefaultSequentialBufferSize' FileOptions.SequentialScan)) { " is 160.
Long Statement,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,MergeTo,The length of the statement  "	Log.Trace ("PTables merge finished in {0} ([{1}] entries merged into {2})."' watch.Elapsed' string.Join ("' "' tables.Select (x => x.Count))' dumpedEntryCount); " is 160.
Long Statement,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,MergeTo2,The length of the statement  "	var enumerators = tables.Select (table => new EnumerableTable (version' table' upgradeHash' existsAt' readRecord)).ToList (); " is 125.
Long Statement,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,MergeTo2,The length of the statement  "	using (var f = new FileStream (outputFile' FileMode.CreateNew' FileAccess.ReadWrite' FileShare.None' DefaultSequentialBufferSize' FileOptions.SequentialScan)) { " is 160.
Long Statement,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,MergeTo2,The length of the statement  "	Log.Trace ("PTables merge finished in {0} ([{1}] entries merged into {2})."' watch.Elapsed' string.Join ("' "' tables.Select (x => x.Count))' dumpedEntryCount); " is 160.
Long Statement,EventStore.Core.Index,PTableHeader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTableHeader.cs,FromStream,The length of the statement  "		throw new CorruptIndexException ("Couldn't read version of PTable from header."' new InvalidFileException ("Invalid PTable file.")); " is 132.
Long Statement,EventStore.Core.Index,TableIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,Initialize,The length of the statement  "	var toDeleteFiles = Directory.EnumerateFiles (_directory).Select (Path.GetFileName).Except (indexFiles' StringComparer.OrdinalIgnoreCase); " is 138.
Long Statement,EventStore.Core.Index,TableIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,DumpAndCopyIndex,The length of the statement  "		dumpPath = Path.Combine (Path.GetDirectoryName (_directory)' string.Format ("index-backup-{0:yyyy-MM-dd_HH-mm-ss.fff}"' DateTime.UtcNow)); " is 138.
Long Statement,EventStore.Core.Index,TableIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,AddEntries,The length of the statement  "			newTables.AddRange (_awaitingMemTables.Select ((x' i) => i == 0 ? new TableItem (x.Table' prepareCheckpoint' commitPos) : x)); " is 126.
Long Statement,EventStore.Core.Index,TableIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,ReadOffQueue,The length of the statement  "				mergeResult = _indexMap.AddPTable (ptable' tableItem.PrepareCheckpoint' tableItem.CommitCheckpoint' (streamId' currentHash) => UpgradeHash (streamId' currentHash)' entry => reader.ExistsAt (entry.Position)' entry => ReadEntry (reader' entry.Position)' _fileNameProvider' _ptableVersion' _indexCacheDepth); " is 305.
Long Statement,EventStore.Core.Index,TableIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,ReadEntry,The length of the statement  "		throw new Exception (string.Format ("Incorrect type of log record {0}' expected Prepare record."' result.LogRecord.RecordType)); " is 128.
Long Statement,EventStore.Core.Messages,ClusterInfoDto,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Messages\ClusterInfoDto.cs,ToString,The length of the statement  "	return string.Format ("Server: {0}:{1}' Members: [{2}]"' ServerIp' ServerPort' Members != null ? string.Join ("'"' Members.Select (m => m.ToString ())) : "null"); " is 162.
Long Statement,EventStore.Core.Messages,MemberInfoDto,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Messages\MemberInfoDto.cs,ToString,The length of the statement  "	return string.Format ("InstanceId: {0:B}' TimeStamp: {1:yyyy-MM-dd HH:mm:ss.fff}' State: {2}' IsAlive: {3}' " + "InternalTcpIp: {4}' InternalTcpPort: {5}' InternalSecureTcpPort: {6}' " + "ExternalTcpIp: {7}' ExternalTcpPort: {8}' ExternalSecureTcpPort: {9}' " + "InternalHttpIp: {10}' InternalHttpPort: {11}' ExternalHttpIp: {12}' ExternalHttpPort: {13}' " + "LastCommitPosition: {14}' WriterCheckpoint: {15}' ChaserCheckpoint: {16}' " + "EpochPosition: {17}' EpochNumber: {18}' EpochId: {19:B}' NodePriority: {20}"' InstanceId' TimeStamp' State' IsAlive' InternalTcpIp' InternalTcpPort' InternalSecureTcpPort' ExternalTcpIp' ExternalTcpPort' ExternalSecureTcpPort' InternalHttpIp' InternalHttpPort' ExternalHttpIp' ExternalHttpPort' LastCommitPosition' WriterCheckpoint' ChaserCheckpoint' EpochPosition' EpochNumber' EpochId' NodePriority); " is 841.
Long Statement,EventStore.Core.Messaging,MessageHierarchy,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Messaging\Message.cs,LoadAvailableTypes,The length of the statement  "			Log.Info ("The exception(s) occured when scanning for message types: "' string.Join ("'"' ex.LoaderExceptions.Select (x => x.Message))); " is 136.
Long Statement,EventStore.Core.Messaging,MessageHierarchy,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Messaging\Message.cs,GetMsgTypeId,The length of the statement  "	var msgTypeField = msgType.GetFields (BindingFlags.Static | BindingFlags.NonPublic).FirstOrDefault (x => x.Name == "TypeId"); " is 125.
Long Statement,EventStore.Core.Messaging,PublishEnvelope,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Messaging\PublishEnvelope.cs,ReplyWith,The length of the statement  "	Debug.Assert (_createdOnThread == -1 || Thread.CurrentThread.ManagedThreadId == _createdOnThread || _publisher is IThreadSafePublisher); " is 136.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "	Log.Info ("=== SUBSCRIBED to [{0}'{1:B}] at {2} (0x{2:X}). SubscriptionId: {3:B}."' message.MasterEndPoint' message.MasterId' message.SubscriptionPosition' message.SubscriptionId); " is 180.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "		ReplicationFail ("Master [{0}'{1:B}] subscribed us at {2} (0x{2:X})' which is greater than our writer checkpoint {3} (0x{3:X}). REPLICATION BUG."' message.MasterEndPoint' message.MasterId' message.SubscriptionPosition' writerCheck); " is 232.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "		Log.Info ("Master [{0}'{1:B}] subscribed us at {2} (0x{2:X})' which is less than our writer checkpoint {3} (0x{3:X}). TRUNCATION IS NEEDED."' message.MasterEndPoint' message.MasterId' message.SubscriptionPosition' writerCheck); " is 227.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "			Log.Info ("OFFLINE TRUNCATION IS NEEDED (SubscribedAt {0} (0x{0:X}) <= LastCommitPosition {1} (0x{1:X})). SHUTTING DOWN NODE."' message.SubscriptionPosition' lastCommitPosition); " is 178.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "			Log.Error ("Master [{0}'{1:B}] subscribed us at {2} (0x{2:X})' which is less than our last epoch and LastCommitPosition {3} (0x{3:X}) >= lastEpoch.EpochPosition {4} (0x{4:X}). That might be bad' especially if the LastCommitPosition is way beyond EpochPosition."' message.MasterEndPoint' message.MasterId' message.SubscriptionPosition' lastCommitPosition' lastEpoch.EpochPosition); " is 380.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "			Log.Error ("ATTEMPT TO TRUNCATE EPOCH WITH COMMITTED RECORDS. THIS MAY BE BAD' BUT IT IS OK IF JUST-ELECTED MASTER FAILS IMMEDIATELY AFTER ITS ELECTION."); " is 155.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,AreAnyCommittedRecordsTruncatedWithLastEpoch,The length of the statement  "	return lastEpoch != null && subscriptionPosition <= lastEpoch.EpochPosition && lastCommitPosition >= lastEpoch.EpochPosition; " is 125.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "			ReplicationFail ("Received request to create a new ongoing chunk #{0}-{1}' but current chunks count is {2}."' message.ChunkHeader.ChunkStartNumber' message.ChunkHeader.ChunkEndNumber' Db.Manager.ChunksCount); " is 208.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "	if (_activeChunk.ChunkHeader.ChunkStartNumber != message.ChunkStartNumber || _activeChunk.ChunkHeader.ChunkEndNumber != message.ChunkEndNumber) { " is 145.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "		Log.Error ("Received RawChunkBulk for TFChunk {0}-{1}' but active chunk is {2}."' message.ChunkStartNumber' message.ChunkEndNumber' _activeChunk); " is 146.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "		Log.Error ("Received RawChunkBulk at raw pos {0} (0x{0:X}) while current writer raw pos is {1} (0x{1:X})."' message.RawPosition' _activeChunk.RawWriterPosition); " is 161.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "		ReplicationFail ("Could not append raw bytes to chunk {0}-{1}' raw pos: {2} (0x{2:X})' bytes length: {3} (0x{3:X}). Chunk file size: {4} (0x{4:X})."' message.ChunkStartNumber' message.ChunkEndNumber' message.RawPosition' message.RawBytes.Length' _activeChunk.FileSize); " is 269.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "		if (chunk.ChunkHeader.ChunkStartNumber != message.ChunkStartNumber || chunk.ChunkHeader.ChunkEndNumber != message.ChunkEndNumber) { " is 131.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "			Log.Error ("Received DataChunkBulk for TFChunk {0}-{1}' but active chunk is {2}-{3}."' message.ChunkStartNumber' message.ChunkEndNumber' chunk.ChunkHeader.ChunkStartNumber' chunk.ChunkHeader.ChunkEndNumber); " is 207.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "			Log.Error ("Received DataChunkBulk at SubscriptionPosition {0} (0x{0:X}) while current SubscriptionPosition is {1} (0x{1:X})."' message.SubscriptionPosition' _subscriptionPos); " is 176.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The length of the statement  "	_servers = message.ClusterInfo.Members.Where (x => x.State != VNodeState.Manager).Where (x => x.IsAlive).OrderByDescending (x => x.InternalHttpEndPoint' IPComparer).ToArray (); " is 176.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The length of the statement  "	_publisher.Publish (TimerMessage.Schedule.Create (SendViewChangeProofInterval' _publisherEnvelope' new ElectionMessage.SendViewChangeProof ())); " is 144.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,ShiftToLeaderElection,The length of the statement  "	_publisher.Publish (TimerMessage.Schedule.Create (LeaderElectionProgressTimeout' _publisherEnvelope' new ElectionMessage.ElectionsTimedOut (view))); " is 148.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,SendToAllExceptMe,The length of the statement  "		_publisher.Publish (new HttpMessage.SendOverHttp (server.InternalHttpEndPoint' message' DateTime.Now.Add (LeaderElectionProgressTimeout))); " is 139.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The length of the statement  "	Log.Debug ("ELECTIONS: (V={0}) VIEWCHANGE FROM [{1}' {2:B}]."' message.AttemptedView' message.ServerInternalHttp' message.ServerId); " is 132.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The length of the statement  "		SendToAllExceptMe (new ElectionMessage.ViewChangeProof (_nodeInfo.InstanceId' _nodeInfo.InternalHttp' _lastInstalledView)); " is 123.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The length of the statement  "	_publisher.Publish (TimerMessage.Schedule.Create (SendViewChangeProofInterval' _publisherEnvelope' new ElectionMessage.SendViewChangeProof ())); " is 144.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The length of the statement  "	_publisher.Publish (TimerMessage.Schedule.Create (LeaderElectionProgressTimeout' _publisherEnvelope' new ElectionMessage.ElectionsTimedOut (_lastAttemptedView))); " is 162.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The length of the statement  "		Log.Debug ("ELECTIONS: (IV={0}) VIEWCHANGEPROOF FROM [{1}' {2:B}]. JUMPING TO LEADER STATE."' message.InstalledView' message.ServerInternalHttp' message.ServerId); " is 163.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The length of the statement  "		Log.Debug ("ELECTIONS: (IV={0}) VIEWCHANGEPROOF FROM [{1}' {2:B}]. JUMPING TO NON-LEADER STATE."' message.InstalledView' message.ServerInternalHttp' message.ServerId); " is 167.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The length of the statement  "	Log.Debug ("ELECTIONS: (V={0}) PREPARE FROM [{1}' {2:B}]."' _lastAttemptedView' message.ServerInternalHttp' message.ServerId); " is 126.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The length of the statement  "	_publisher.Publish (new HttpMessage.SendOverHttp (message.ServerInternalHttp' prepareOk' DateTime.Now.Add (LeaderElectionProgressTimeout))); " is 140.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,CreatePrepareOk,The length of the statement  "	return new ElectionMessage.PrepareOk (view' ownInfo.InstanceId' ownInfo.InternalHttp' ownInfo.EpochNumber' ownInfo.EpochPosition' ownInfo.EpochId' ownInfo.LastCommitPosition' ownInfo.WriterCheckpoint' ownInfo.ChaserCheckpoint' ownInfo.NodePriority); " is 249.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The length of the statement  "	Log.Debug ("ELECTIONS: (V={0}) PREPARE_OK FROM {1}."' msg.View' FormatNodeInfo (msg.ServerInternalHttp' msg.ServerId' msg.LastCommitPosition' msg.WriterCheckpoint' msg.ChaserCheckpoint' msg.EpochNumber' msg.EpochPosition' msg.EpochId)); " is 236.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,SendProposal,The length of the statement  "	Log.Debug ("ELECTIONS: (V={0}) SENDING PROPOSAL CANDIDATE: {1}' ME: {2}."' _lastAttemptedView' FormatNodeInfo (master)' FormatNodeInfo (GetOwnInfo ())); " is 152.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,SendProposal,The length of the statement  "	var proposal = new ElectionMessage.Proposal (_nodeInfo.InstanceId' _nodeInfo.InternalHttp' master.InstanceId' master.InternalHttp' _lastInstalledView' master.EpochNumber' master.EpochPosition' master.EpochId' master.LastCommitPosition' master.WriterCheckpoint' master.ChaserCheckpoint); " is 286.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,SendProposal,The length of the statement  "	Handle (new ElectionMessage.Accept (_nodeInfo.InstanceId' _nodeInfo.InternalHttp' master.InstanceId' master.InternalHttp' _lastInstalledView)); " is 143.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,GetBestMasterCandidate,The length of the statement  "			return new MasterCandidate (masterMsg.ServerId' masterMsg.ServerInternalHttp' masterMsg.EpochNumber' masterMsg.EpochPosition' masterMsg.EpochId' masterMsg.LastCommitPosition' masterMsg.WriterCheckpoint' masterMsg.ChaserCheckpoint' masterMsg.NodePriority); " is 255.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,GetBestMasterCandidate,The length of the statement  "		var master = _servers.FirstOrDefault (x => x.IsAlive && x.InstanceId == _lastElectedMaster && x.State == VNodeState.Master); " is 124.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,GetBestMasterCandidate,The length of the statement  "			return new MasterCandidate (master.InstanceId' master.InternalHttpEndPoint' master.EpochNumber' master.EpochPosition' master.EpochId' master.LastCommitPosition' master.WriterCheckpoint' master.ChaserCheckpoint' master.NodePriority); " is 232.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,GetBestMasterCandidate,The length of the statement  "	var best = _prepareOkReceived.Values.OrderByDescending (x => x.EpochNumber).ThenByDescending (x => x.LastCommitPosition).ThenByDescending (x => x.WriterCheckpoint).ThenByDescending (x => x.NodePriority).ThenByDescending (x => x.ChaserCheckpoint).ThenByDescending (x => x.ServerId).FirstOrDefault (); " is 299.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,GetBestMasterCandidate,The length of the statement  "	return new MasterCandidate (best.ServerId' best.ServerInternalHttp' best.EpochNumber' best.EpochPosition' best.EpochId' best.LastCommitPosition' best.WriterCheckpoint' best.ChaserCheckpoint' best.NodePriority); " is 210.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,IsLegitimateMaster,The length of the statement  "	var master = _servers.FirstOrDefault (x => x.IsAlive && x.InstanceId == _lastElectedMaster && x.State == VNodeState.Master); " is 124.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,IsLegitimateMaster,The length of the statement  "		if (candidate.InstanceId == master.InstanceId || candidate.EpochNumber > master.EpochNumber || (candidate.EpochNumber == master.EpochNumber && candidate.EpochId != master.EpochId)) " is 180.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,IsLegitimateMaster,The length of the statement  "		Log.Debug ("ELECTIONS: (V={0}) NOT LEGITIMATE MASTER PROPOSAL FROM [{1}'{2:B}] M={3}. " + "PREVIOUS MASTER IS ALIVE: [{4}'{5:B}]."' view' proposingServerEndPoint' proposingServerId' FormatNodeInfo (candidate)' master.InternalHttpEndPoint' master.InstanceId); " is 258.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,IsLegitimateMaster,The length of the statement  "		Log.Debug ("ELECTIONS: (V={0}) NOT LEGITIMATE MASTER PROPOSAL FROM [{1}'{2:B}] M={3}. ME={4}."' view' proposingServerEndPoint' proposingServerId' FormatNodeInfo (candidate)' FormatNodeInfo (ownInfo)); " is 200.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The length of the statement  "	var candidate = new MasterCandidate (message.MasterId' message.MasterInternalHttp' message.EpochNumber' message.EpochPosition' message.EpochId' message.LastCommitPosition' message.WriterCheckpoint' message.ChaserCheckpoint' 0); " is 227.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The length of the statement  "	Log.Debug ("ELECTIONS: (V={0}) PROPOSAL FROM [{1}'{2:B}] M={3}. ME={4}."' _lastAttemptedView' message.ServerInternalHttp' message.ServerId' FormatNodeInfo (candidate)' FormatNodeInfo (GetOwnInfo ())); " is 200.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The length of the statement  "		Handle (new ElectionMessage.Accept (message.ServerId' message.ServerInternalHttp' message.MasterId' message.MasterInternalHttp' message.View)); " is 143.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The length of the statement  "		var accept = new ElectionMessage.Accept (_nodeInfo.InstanceId' _nodeInfo.InternalHttp' message.MasterId' message.MasterInternalHttp' message.View); " is 147.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The length of the statement  "	Log.Debug ("ELECTIONS: (V={0}) ACCEPT FROM [{1}'{2:B}] M=[{3}'{4:B}])."' message.View' message.ServerInternalHttp' message.ServerId' message.MasterInternalHttp' message.MasterId); " is 179.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The length of the statement  "			Log.Info ("ELECTIONS: (V={0}) DONE. ELECTED MASTER = {1}. ME={2}."' message.View' FormatNodeInfo (_masterProposal)' FormatNodeInfo (GetOwnInfo ())); " is 148.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,GetOwnInfo,The length of the statement  "	return new MasterCandidate (_nodeInfo.InstanceId' _nodeInfo.InternalHttp' lastEpoch == null ? -1 : lastEpoch.EpochNumber' lastEpoch == null ? -1 : lastEpoch.EpochPosition' lastEpoch == null ? Guid.Empty : lastEpoch.EpochId' lastCommitPosition' writerCheckpoint' chaserCheckpoint' _nodePriority); " is 295.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,FormatNodeInfo,The length of the statement  "	return FormatNodeInfo (candidate.InternalHttp' candidate.InstanceId' candidate.LastCommitPosition' candidate.WriterCheckpoint' candidate.ChaserCheckpoint' candidate.EpochNumber' candidate.EpochPosition' candidate.EpochId); " is 222.
Long Statement,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,FormatNodeInfo,The length of the statement  "	return string.Format ("[{0}'{1:B}](L={2}'W={3}'C={4}'E{5}@{6}:{7:B})"' serverEndPoint' serverId' lastCommitPosition' writerCheckpoint' chaserCheckpoint' epochNumber' epochPosition' epochId); " is 190.
Long Statement,EventStore.Core.Services,RequestForwardingService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestForwardingService.cs,Handle,The length of the statement  "	_forwardingProxy.TryForwardReply (message.CorrelationId' message' (clientCorrId' m) => new ClientMessage.NotHandled (clientCorrId' m.Reason' m.AdditionalInfo)); " is 160.
Long Statement,EventStore.Core.Services,RequestForwardingService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestForwardingService.cs,Handle,The length of the statement  "	_forwardingProxy.TryForwardReply (message.CorrelationId' message' (clientCorrId' m) => m.WithCorrelationId (clientCorrId)); " is 123.
Long Statement,EventStore.Core.Services,RequestForwardingService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestForwardingService.cs,Handle,The length of the statement  "	_forwardingProxy.TryForwardReply (message.CorrelationId' message' (clientCorrId' m) => m.WithCorrelationId (clientCorrId)); " is 123.
Long Statement,EventStore.Core.Services,RequestForwardingService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestForwardingService.cs,Handle,The length of the statement  "	_forwardingProxy.TryForwardReply (message.CorrelationId' message' (clientCorrId' m) => m.WithCorrelationId (clientCorrId)); " is 123.
Long Statement,EventStore.Core.Services,RequestForwardingService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestForwardingService.cs,Handle,The length of the statement  "	_forwardingProxy.TryForwardReply (message.CorrelationId' message' (clientCorrId' m) => m.WithCorrelationId (clientCorrId)); " is 123.
Long Statement,EventStore.Core.Services,RequestForwardingService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestForwardingService.cs,Handle,The length of the statement  "	_forwardingProxy.TryForwardReply (message.CorrelationId' message' (clientCorrId' m) => m.WithCorrelationId (clientCorrId)); " is 123.
Long Statement,EventStore.Core.Services,SubscriptionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,Handle,The length of the statement  "	var streamAccess = _readIndex.CheckStreamAccess (msg.EventStreamId.IsEmptyString () ? SystemStreams.AllStream : msg.EventStreamId' StreamAccessType.Read' msg.User); " is 164.
Long Statement,EventStore.Core.Services,SubscriptionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,Handle,The length of the statement  "		var lastEventNumber = msg.EventStreamId.IsEmptyString () ? (long?)null : _readIndex.GetStreamLastEventNumber (msg.EventStreamId); " is 129.
Long Statement,EventStore.Core.Services,SubscriptionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,Handle,The length of the statement  "		SubscribeToStream (msg.CorrelationId' msg.Envelope' msg.ConnectionId' msg.EventStreamId' msg.ResolveLinkTos' lastCommitPos' lastEventNumber); " is 141.
Long Statement,EventStore.Core.Services,SubscriptionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,Handle,The length of the statement  "		msg.Envelope.ReplyWith (new ClientMessage.SubscriptionDropped (msg.CorrelationId' SubscriptionDropReason.AccessDenied)); " is 120.
Long Statement,EventStore.Core.Services,SubscriptionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,SubscribeToStream,The length of the statement  "	var subscription = new Subscription (correlationId' envelope' connectionId' eventStreamId.IsEmptyString () ? AllStreamsSubscriptionId : eventStreamId' resolveLinkTos' lastCommitPosition' lastEventNumber ?? -1); " is 210.
Long Statement,EventStore.Core.Services,SubscriptionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,DropSubscription,The length of the statement  "		subscription.Envelope.ReplyWith (new ClientMessage.SubscriptionDropped (subscription.CorrelationId' SubscriptionDropReason.Unsubscribed)); " is 138.
Long Statement,EventStore.Core.Services,SubscriptionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,Handle,The length of the statement  "	SubscribePoller (message.StreamId' message.ExpireAt' message.LastCommitPosition' message.LastEventNumber' message.OriginalRequest); " is 131.
Long Statement,EventStore.Core.Services,SubscriptionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,CloneReadRequestWithNoPollFlag,The length of the statement  "		return new ClientMessage.ReadStreamEventsForward (streamReq.InternalCorrId' streamReq.CorrelationId' streamReq.Envelope' streamReq.EventStreamId' streamReq.FromEventNumber' streamReq.MaxCount' streamReq.ResolveLinkTos' streamReq.RequireMaster' streamReq.ValidationStreamVersion' streamReq.User); " is 295.
Long Statement,EventStore.Core.Services,SubscriptionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,CloneReadRequestWithNoPollFlag,The length of the statement  "		return new ClientMessage.ReadAllEventsForward (allReq.InternalCorrId' allReq.CorrelationId' allReq.Envelope' allReq.CommitPosition' allReq.PreparePosition' allReq.MaxCount' allReq.ResolveLinkTos' allReq.RequireMaster' allReq.ValidationTfLastCommitPosition' allReq.User); " is 270.
Long Statement,EventStore.Core.Services,SubscriptionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,CloneReadRequestWithNoPollFlag,The length of the statement  "	throw new Exception (string.Format ("Unexpected read request of type {0} for long polling: {1}."' originalRequest.GetType ()' originalRequest)); " is 144.
Long Statement,EventStore.Core.Services,HttpSendService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,Handle,The length of the statement  "		Log.Debug ("Dropping HTTP send message due to TTL being over. {1} To : {0}"' message.EndPoint' message.Message.GetType ().Name.ToString ()); " is 140.
Long Statement,EventStore.Core.Services,HttpSendService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,Handle,The length of the statement  "		message.HttpEntityManager.ReplyStatus (code' deniedToHandle.Details' exc => Log.Debug ("Error occurred while replying to HTTP with message {0}: {1}."' message.Message' exc.Message)); " is 182.
Long Statement,EventStore.Core.Services,HttpSendService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,Handle,The length of the statement  "		HistogramService.SetValue (_httpSendHistogram' (long)((((double)_watch.ElapsedTicks - start) / Stopwatch.Frequency) * 1000000000)); " is 131.
Long Statement,EventStore.Core.Services,HttpSendService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,Handle,The length of the statement  "			message.HttpEntityManager.ReplyContent (response as byte[]' config.Code' config.Description' config.ContentType' config.Headers' exc => Log.Debug ("Error occurred while replying to HTTP with message {0}: {1}."' message.Message' exc.Message)); " is 242.
Long Statement,EventStore.Core.Services,HttpSendService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,Handle,The length of the statement  "			message.HttpEntityManager.ReplyTextContent (response as string' config.Code' config.Description' config.ContentType' config.Headers' exc => Log.Debug ("Error occurred while replying to HTTP with message {0}: {1}."' message.Message' exc.Message)); " is 246.
Long Statement,EventStore.Core.Services,HttpSendService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,Handle,The length of the statement  "		HistogramService.SetValue (_httpSendHistogram' (long)((((double)_watch.ElapsedTicks - start) / Stopwatch.Frequency) * 1000000000)); " is 131.
Long Statement,EventStore.Core.Services,HttpSendService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,Handle,The length of the statement  "	message.HttpEntityManager.BeginReply (config.Code' config.Description' config.ContentType' config.Encoding' config.Headers); " is 124.
Long Statement,EventStore.Core.Services,HttpSendService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,Handle,The length of the statement  "	message.HttpEntityManager.ContinueReplyTextContent (response' exc => Log.Debug ("Error occurred while replying to HTTP with message {0}: {1}."' message' exc.Message)' () => { " is 174.
Long Statement,EventStore.Core.Services,HttpSendService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,ForwardRequest,The length of the statement  "		request.Headers.Add (ProxyHeaders.XForwardedHost' string.Format ("{0}:{1}"' manager.RequestedUrl.Host' manager.RequestedUrl.Port)); " is 131.
Long Statement,EventStore.Core.Services,HttpSendService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,ForwardRequest,The length of the statement  "	if (!string.Equals (srcReq.HttpMethod' "GET"' StringComparison.OrdinalIgnoreCase) && !string.Equals (srcReq.HttpMethod' "HEAD"' StringComparison.OrdinalIgnoreCase) && srcReq.HasEntityBody) { " is 190.
Long Statement,EventStore.Core.Services,HttpSendService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,ForwardResponse,The length of the statement  "			Log.Debug ("Error in SendAsync for forwarded request for '{0}': {1}."' manager.RequestedUrl' ex.InnerException.Message); " is 120.
Long Statement,EventStore.Core.Services,HttpSendService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,ForwardResponse,The length of the statement  "		manager.ForwardReply (response' exc => Log.Debug ("Error forwarding response for '{0}': {1}."' manager.RequestedUrl' exc.Message)); " is 131.
Long Statement,EventStore.Core.Services,TcpSendService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\TcpSendService.cs,Handle,The length of the statement  "	HistogramService.SetValue (_tcpSendHistogram' (long)((((double)_watch.ElapsedTicks - start) / Stopwatch.Frequency) * 1000000000)); " is 130.
Long Statement,EventStore.Core.Services.Gossip,GossipServiceBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Gossip\GossipServiceBase.cs,Handle,The length of the statement  "		_bus.Publish (TimerMessage.Schedule.Create (DnsRetryTimeout' _publishEnvelope' new GossipMessage.RetrieveGossipSeedSources ())); " is 128.
Long Statement,EventStore.Core.Services.Gossip,GossipServiceBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Gossip\GossipServiceBase.cs,OnGotGossipSeedSources,The length of the statement  "		_bus.Publish (TimerMessage.Schedule.Create (DnsRetryTimeout' _publishEnvelope' new GossipMessage.RetrieveGossipSeedSources ())); " is 128.
Long Statement,EventStore.Core.Services.Gossip,GossipServiceBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Gossip\GossipServiceBase.cs,Handle,The length of the statement  "	var dnsCluster = new ClusterInfo (message.GossipSeeds.Select (x => MemberInfo.ForManager (Guid.Empty' now' true' x' x)).ToArray ()); " is 132.
Long Statement,EventStore.Core.Services.Gossip,GossipServiceBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Gossip\GossipServiceBase.cs,Handle,The length of the statement  "		_bus.Publish (new HttpMessage.SendOverHttp (node.InternalHttpEndPoint' new GossipMessage.SendGossip (_cluster' NodeInfo.InternalHttp)' DateTime.Now.Add (GossipInterval))); " is 171.
Long Statement,EventStore.Core.Services.Gossip,GossipServiceBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Gossip\GossipServiceBase.cs,Handle,The length of the statement  "	_cluster = MergeClusters (_cluster' message.ClusterInfo' message.Server' x => x.InstanceId == NodeInfo.InstanceId ? GetUpdatedMe (x) : x); " is 138.
Long Statement,EventStore.Core.Services.Gossip,GossipServiceBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Gossip\GossipServiceBase.cs,Handle,The length of the statement  "		Log.Trace ("Looks like master [{0}' {1:B}] is DEAD (Gossip send failed)' though we wait for TCP to decide."' message.Recipient' node.InstanceId); " is 145.
Long Statement,EventStore.Core.Services.Gossip,GossipServiceBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Gossip\GossipServiceBase.cs,MergeClusters,The length of the statement  "				Log.Error ("Time difference between us and [{0}] is too great! " + "UTC now: {1:yyyy-MM-dd HH:mm:ss.fff}' peer's time stamp: {2:yyyy-MM-dd HH:mm:ss.fff}."' peerEndPoint' DateTime.UtcNow' member.TimeStamp); " is 205.
Long Statement,EventStore.Core.Services.Gossip,GossipServiceBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Gossip\GossipServiceBase.cs,MergeClusters,The length of the statement  "	var newMembers = mems.Values.Select (update).Where (x => x.IsAlive || DateTime.UtcNow - x.TimeStamp < DeadMemberRemovalTimeout); " is 128.
Long Statement,EventStore.Core.Services.Gossip,GossipServiceBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Gossip\GossipServiceBase.cs,UpdateCluster,The length of the statement  "	var newMembers = cluster.Members.Select (update).Where (x => x.IsAlive || DateTime.UtcNow - x.TimeStamp < DeadMemberRemovalTimeout); " is 132.
Long Statement,EventStore.Core.Services.Gossip,NodeGossipService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Gossip\NodeGossipService.cs,GetInitialMe,The length of the statement  "	return MemberInfo.ForVNode (NodeInfo.InstanceId' DateTime.UtcNow' VNodeState.Unknown' true' NodeInfo.InternalTcp' NodeInfo.InternalSecureTcp' NodeInfo.ExternalTcp' NodeInfo.ExternalSecureTcp' NodeInfo.InternalHttp' NodeInfo.ExternalHttp' _getLastCommitPosition ()' _writerCheckpoint.Read ()' _chaserCheckpoint.Read ()' lastEpoch == null ? -1 : lastEpoch.EpochPosition' lastEpoch == null ? -1 : lastEpoch.EpochNumber' lastEpoch == null ? Guid.Empty : lastEpoch.EpochId' _nodePriority); " is 484.
Long Statement,EventStore.Core.Services.Gossip,NodeGossipService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Gossip\NodeGossipService.cs,GetUpdatedMe,The length of the statement  "	return me.Updated (isAlive: true' state: CurrentRole' lastCommitPosition: _getLastCommitPosition ()' writerCheckpoint: _writerCheckpoint.ReadNonFlushed ()' chaserCheckpoint: _chaserCheckpoint.ReadNonFlushed ()' epoch: _epochManager.GetLastEpoch ()); " is 249.
Long Statement,EventStore.Core.Services.PersistentSubscription.ConsumerStrategy,PersistentSubscriptionConsumerStrategyRegistry,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\ConsumerStrategy\PersistentSubscriptionConsumerStrategyRegistry.cs,GetInstance,The length of the statement  "		throw new ArgumentException (string.Format ("The named consumer strategy '{0}' is unknown."' namedConsumerStrategy)' "namedConsumerStrategy"); " is 142.
Long Statement,EventStore.Core.Services.PersistentSubscription.ConsumerStrategy.PinnedState,PinnedConsumerState,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\ConsumerStrategy\PinnedState\PinnedConsumerState.cs,AddNode,The length of the statement  "			var assignmentsToMove = Assignments.Select ((node' bucket) => Tuple.Create (node' bucket)).Where (_ => _.Item1.NodeId == existingClient.NodeId && _.Item1.State == BucketAssignment.BucketState.Assigned).OrderBy (_ => _.Item1.InFlightCount)// Take buckets without inflight messages first. " is 286.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,TryReadingNewBatch,The length of the statement  "		_settings.StreamReader.BeginReadEvents (_settings.EventStreamId' _nextEventToPullFrom' Math.Max (_settings.ReadBatchSize' 10)' _settings.ReadBatchSize' _settings.ResolveLinkTos' HandleReadCompleted); " is 199.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,MarkBeginProcessing,The length of the statement  "	StartMessage (message' _settings.MessageTimeout == TimeSpan.MaxValue ? DateTime.MaxValue : DateTime.UtcNow + _settings.MessageTimeout); " is 135.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,AddClient,The length of the statement  "		var client = new PersistentSubscriptionClient (correlationId' connectionId' envelope' maxInFlight' user' @from' _totalTimeWatch' _settings.ExtraStatistics); " is 156.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,RemoveClientByCorrelationId,The length of the statement  "		var lostMessages = _pushClients.RemoveClientByCorrelationId (correlationId' sendDropNotification).OrderBy (v => v.OriginalEventNumber); " is 135.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,AddMessageAsProcessing,The length of the statement  "		StartMessage (new OutstandingMessage (ev.OriginalEvent.EventId' client' ev' 0)' _settings.MessageTimeout == TimeSpan.MaxValue ? DateTime.MaxValue : DateTime.UtcNow + _settings.MessageTimeout); " is 192.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,ParkMessage,The length of the statement  "				Log.Info ("Unable to park message {0}/{1} operation failed {2} retrying."' e.OriginalStreamId' e.OriginalEventNumber' result); " is 126.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,ParkMessage,The length of the statement  "			Log.Error ("Unable to park message {0}/{1} operation failed {2} after retries. Possible message loss."' e.OriginalStreamId' e.OriginalEventNumber' result); " is 155.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,TryReadingParkedMessagesFrom,The length of the statement  "	_settings.StreamReader.BeginReadEvents (_settings.ParkedMessageStream' position' count' _settings.ReadBatchSize' true' (events' newposition' isstop) => HandleParkedReadCompleted (events' newposition' isstop' stopAt)); " is 217.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,StartMessage,The length of the statement  "		Log.Warn ("Skipping message {0}/{1} with duplicate eventId {2}"' message.ResolvedEvent.OriginalStreamId' message.ResolvedEvent.OriginalEventNumber' message.EventId); " is 165.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,NotifyClockTick,The length of the statement  "		if ((_state & PersistentSubscriptionState.Behind | PersistentSubscriptionState.OutstandingPageRequest) == PersistentSubscriptionState.Behind) " is 141.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionCheckpointReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionCheckpointReader.cs,BeginLoadState,The length of the statement  "	_ioDispatcher.ReadBackward (subscriptionStateStream' -1' 1' false' SystemAccount.Principal' new ResponseHandler (onStateLoaded).LoadStateCompleted); " is 148.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionCheckpointWriter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionCheckpointWriter.cs,BeginDelete,The length of the statement  "	_ioDispatcher.DeleteStream (_subscriptionStateStream' ExpectedVersion.Any' false' SystemAccount.Principal' x => completed (this)); " is 130.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionCheckpointWriter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionCheckpointWriter.cs,PublishMetadata,The length of the statement  "	_ioDispatcher.WriteEvent (metaStreamId' ExpectedVersion.Any' CreateStreamMetadataEvent ()' SystemAccount.Principal' msg => { " is 124.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionCheckpointWriter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionCheckpointWriter.cs,CreateStreamMetadataEvent,The length of the statement  "	var acl = new StreamAcl (readRole: SystemRoles.Admins' writeRole: SystemRoles.Admins' deleteRole: SystemRoles.Admins' metaReadRole: SystemRoles.All' metaWriteRole: SystemRoles.Admins); " is 184.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionConfig,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionConfig.cs,UpdateIfRequired,The length of the statement  "					persistentSubscriptionEntry.NamedConsumerStrategy = persistentSubscriptionEntry.PreferRoundRobin ? SystemConsumerStrategies.RoundRobin : SystemConsumerStrategies.DispatchToSingle; " is 179.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionMessageParker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionMessageParker.cs,CreateStreamMetadataEvent,The length of the statement  "	var acl = new StreamAcl (readRole: SystemRoles.Admins' writeRole: SystemRoles.Admins' deleteRole: SystemRoles.Admins' metaReadRole: SystemRoles.Admins' metaWriteRole: SystemRoles.Admins); " is 187.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionMessageParker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionMessageParker.cs,BeginParkMessage,The length of the statement  "	_ioDispatcher.WriteEvent (_parkedStreamId' ExpectedVersion.Any' parkedEvent' SystemAccount.Principal' x => WriteStateCompleted (completed' ev' x)); " is 147.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionMessageParker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionMessageParker.cs,BeginDelete,The length of the statement  "	_ioDispatcher.DeleteStream (_parkedStreamId' ExpectedVersion.Any' false' SystemAccount.Principal' x => completed (this)); " is 121.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionMessageParker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionMessageParker.cs,BeginReadEndSequence,The length of the statement  "			Log.Error ("An error occured reading the last event in the parked message stream {0} due to {1}."' _parkedStreamId' comp.Result); " is 129.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionMessageParker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionMessageParker.cs,BeginMarkParkedMessagesReprocessed,The length of the statement  "	_ioDispatcher.WriteEvent (metaStreamId' ExpectedVersion.Any' CreateStreamMetadataEvent (sequence)' SystemAccount.Principal' msg => { " is 132.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionParamsBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionParamsBuilder.cs,CreateFor,The length of the statement  "	return new PersistentSubscriptionParamsBuilder (streamName + ":" + groupName' streamName' groupName' false' 0' false' TimeSpan.FromSeconds (30)' 500' 500' 10' 20' TimeSpan.FromSeconds (1)' 5' 1000' 0' new RoundRobinPersistentSubscriptionConsumerStrategy ()); " is 258.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new ClientMessage.CreatePersistentSubscriptionCompleted (message.CorrelationId' ClientMessage.CreatePersistentSubscriptionCompleted.CreatePersistentSubscriptionResult.AccessDenied' "You do not have permissions to create streams")); " is 259.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new ClientMessage.CreatePersistentSubscriptionCompleted (message.CorrelationId' ClientMessage.CreatePersistentSubscriptionCompleted.CreatePersistentSubscriptionResult.AlreadyExists' "Group '" + message.GroupName + "' already exists.")); " is 264.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new ClientMessage.CreatePersistentSubscriptionCompleted (message.CorrelationId' ClientMessage.CreatePersistentSubscriptionCompleted.CreatePersistentSubscriptionResult.Fail' "Bad stream name.")); " is 222.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new ClientMessage.CreatePersistentSubscriptionCompleted (message.CorrelationId' ClientMessage.CreatePersistentSubscriptionCompleted.CreatePersistentSubscriptionResult.Fail' string.Format ("Consumer strategy {0} does not exist."' message.NamedConsumerStrategy))); " is 290.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "	var msgTimeout = message.MessageTimeoutMilliseconds == 0 ? TimeSpan.MaxValue : TimeSpan.FromMilliseconds (message.MessageTimeoutMilliseconds); " is 142.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "	var checkPointAfter = message.CheckPointAfterMilliseconds == 0 ? TimeSpan.MaxValue : TimeSpan.FromMilliseconds (message.CheckPointAfterMilliseconds); " is 149.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "	CreateSubscriptionGroup (message.EventStreamId' message.GroupName' message.ResolveLinkTos' message.StartFrom' message.RecordStatistics' message.MaxRetryCount' message.LiveBufferSize' message.BufferSize' message.ReadBatchSize' checkPointAfter' message.MinCheckPointCount' message.MaxCheckPointCount' message.MaxSubscriberCount' message.NamedConsumerStrategy' msgTimeout); " is 370.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "	SaveConfiguration (() => message.Envelope.ReplyWith (new ClientMessage.CreatePersistentSubscriptionCompleted (message.CorrelationId' ClientMessage.CreatePersistentSubscriptionCompleted.CreatePersistentSubscriptionResult.Success' ""))); " is 235.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new ClientMessage.UpdatePersistentSubscriptionCompleted (message.CorrelationId' ClientMessage.UpdatePersistentSubscriptionCompleted.UpdatePersistentSubscriptionResult.AccessDenied' "You do not have permissions to update the subscription")); " is 268.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new ClientMessage.UpdatePersistentSubscriptionCompleted (message.CorrelationId' ClientMessage.UpdatePersistentSubscriptionCompleted.UpdatePersistentSubscriptionResult.DoesNotExist' "Group '" + message.GroupName + "' does not exist.")); " is 263.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new ClientMessage.UpdatePersistentSubscriptionCompleted (message.CorrelationId' ClientMessage.UpdatePersistentSubscriptionCompleted.UpdatePersistentSubscriptionResult.Fail' string.Format ("Consumer strategy {0} does not exist."' message.NamedConsumerStrategy))); " is 290.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "	var msgTimeout = message.MessageTimeoutMilliseconds == 0 ? TimeSpan.MaxValue : TimeSpan.FromMilliseconds (message.MessageTimeoutMilliseconds); " is 142.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "	var checkPointAfter = message.CheckPointAfterMilliseconds == 0 ? TimeSpan.MaxValue : TimeSpan.FromMilliseconds (message.CheckPointAfterMilliseconds); " is 149.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "	CreateSubscriptionGroup (message.EventStreamId' message.GroupName' message.ResolveLinkTos' message.StartFrom' message.RecordStatistics' message.MaxRetryCount' message.LiveBufferSize' message.BufferSize' message.ReadBatchSize' checkPointAfter' message.MinCheckPointCount' message.MaxCheckPointCount' message.MaxSubscriberCount' message.NamedConsumerStrategy' msgTimeout); " is 370.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "	SaveConfiguration (() => message.Envelope.ReplyWith (new ClientMessage.UpdatePersistentSubscriptionCompleted (message.CorrelationId' ClientMessage.UpdatePersistentSubscriptionCompleted.UpdatePersistentSubscriptionResult.Success' ""))); " is 235.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,CreateSubscriptionGroup,The length of the statement  "	var subscription = new PersistentSubscription (new PersistentSubscriptionParams (resolveLinkTos' key' eventStreamId' groupName' startFrom' extraStatistics' messageTimeout' maxRetryCount' liveBufferSize' historyBufferSize' readBatchSize' checkPointAfter' minCheckPointCount' maxCheckPointCount' maxSubscriberCount' _consumerStrategyRegistry.GetInstance (namedConsumerStrategy' key)' _streamReader' _checkpointReader' new PersistentSubscriptionCheckpointWriter (key' _ioDispatcher)' new PersistentSubscriptionMessageParker (key' _ioDispatcher))); " is 544.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new ClientMessage.DeletePersistentSubscriptionCompleted (message.CorrelationId' ClientMessage.DeletePersistentSubscriptionCompleted.DeletePersistentSubscriptionResult.AccessDenied' "You do not have permissions to create streams")); " is 259.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new ClientMessage.DeletePersistentSubscriptionCompleted (message.CorrelationId' ClientMessage.DeletePersistentSubscriptionCompleted.DeletePersistentSubscriptionResult.DoesNotExist' "Group '" + message.GroupName + "' does not exist.")); " is 263.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new ClientMessage.DeletePersistentSubscriptionCompleted (message.CorrelationId' ClientMessage.DeletePersistentSubscriptionCompleted.DeletePersistentSubscriptionResult.Fail' "Group '" + message.GroupName + "' does not exist.")); " is 255.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "	SaveConfiguration (() => message.Envelope.ReplyWith (new ClientMessage.DeletePersistentSubscriptionCompleted (message.CorrelationId' ClientMessage.DeletePersistentSubscriptionCompleted.DeletePersistentSubscriptionResult.Success' ""))); " is 235.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new ClientMessage.SubscriptionDropped (message.CorrelationId' SubscriptionDropReason.AccessDenied)); " is 128.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new ClientMessage.SubscriptionDropped (message.CorrelationId' SubscriptionDropReason.NotFound)); " is 124.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new ClientMessage.SubscriptionDropped (message.CorrelationId' SubscriptionDropReason.NotFound)); " is 124.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new ClientMessage.SubscriptionDropped (message.CorrelationId' SubscriptionDropReason.SubscriberMaxCountReached)); " is 141.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "	var subscribedMessage = new ClientMessage.PersistentSubscriptionConfirmation (key' message.CorrelationId' lastCommitPos' lastEventNumber); " is 138.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "	subscription.AddClient (message.CorrelationId' message.ConnectionId' message.Envelope' message.AllowedInFlightMessages' name' message.From); " is 140.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		subscription.NotAcknowledgeMessagesProcessed (message.CorrelationId' message.ProcessedEventIds' (NakAction)message.Action' message.Message); " is 140.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new ClientMessage.ReadNextNPersistentMessagesCompleted (message.CorrelationId' ClientMessage.ReadNextNPersistentMessagesCompleted.ReadNextNPersistentMessagesResult.AccessDenied' "Access Denied."' null)); " is 231.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new ClientMessage.ReadNextNPersistentMessagesCompleted (message.CorrelationId' ClientMessage.ReadNextNPersistentMessagesCompleted.ReadNextNPersistentMessagesResult.DoesNotExist' "Not found."' null)); " is 227.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new ClientMessage.ReadNextNPersistentMessagesCompleted (message.CorrelationId' ClientMessage.ReadNextNPersistentMessagesCompleted.ReadNextNPersistentMessagesResult.DoesNotExist' "Not found."' null)); " is 227.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "	message.Envelope.ReplyWith (new ClientMessage.ReadNextNPersistentMessagesCompleted (message.CorrelationId' ClientMessage.ReadNextNPersistentMessagesCompleted.ReadNextNPersistentMessagesResult.Success' string.Format ("{0} read."' messages.Length)' messages)); " is 258.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new ClientMessage.ReplayMessagesReceived (message.CorrelationId' ClientMessage.ReplayMessagesReceived.ReplayMessagesReceivedResult.AccessDenied' "You do not have permissions to replay messages")); " is 224.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new ClientMessage.ReplayMessagesReceived (message.CorrelationId' ClientMessage.ReplayMessagesReceived.ReplayMessagesReceivedResult.DoesNotExist' "Unable to locate '" + key + "'")); " is 208.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "	message.Envelope.ReplyWith (new ClientMessage.ReplayMessagesReceived (message.CorrelationId' ClientMessage.ReplayMessagesReceived.ReplayMessagesReceivedResult.Success' "")); " is 173.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new ClientMessage.ReplayMessagesReceived (message.CorrelationId' ClientMessage.ReplayMessagesReceived.ReplayMessagesReceivedResult.AccessDenied' "You do not have permissions to replay messages")); " is 224.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new ClientMessage.ReplayMessagesReceived (message.CorrelationId' ClientMessage.ReplayMessagesReceived.ReplayMessagesReceivedResult.DoesNotExist' "Unable to locate '" + key + "'")); " is 208.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "	message.Envelope.ReplyWith (new ClientMessage.ReplayMessagesReceived (message.CorrelationId' ClientMessage.ReplayMessagesReceived.ReplayMessagesReceivedResult.Success' "")); " is 173.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,LoadConfiguration,The length of the statement  "	_ioDispatcher.ReadBackward (SystemStreams.PersistentSubscriptionConfig' -1' 1' false' SystemAccount.Principal' x => HandleLoadCompleted (continueWith' x)); " is 155.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,HandleLoadCompleted,The length of the statement  "					Log.Error ("A persistent subscription exists with an invalid consumer strategy '{0}'. Ignoring it."' entry.NamedConsumerStrategy); " is 130.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,HandleLoadCompleted,The length of the statement  "				CreateSubscriptionGroup (entry.Stream' entry.Group' entry.ResolveLinkTos' entry.StartFrom' entry.ExtraStatistics' entry.MaxRetryCount' entry.LiveBufferSize' entry.HistoryBufferSize' entry.ReadBatchSize' TimeSpan.FromMilliseconds (entry.CheckPointAfter)' entry.MinCheckPointCount' entry.MaxCheckPointCount' entry.MaxSubscriberCount' entry.NamedConsumerStrategy' TimeSpan.FromMilliseconds (entry.MessageTimeout)); " is 411.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,HandleLoadCompleted,The length of the statement  "		throw new Exception (readStreamEventsBackwardCompleted.Result + " is an unexpected result writing subscription configuration."); " is 128.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,SaveConfiguration,The length of the statement  "	_ioDispatcher.WriteEvent (SystemStreams.PersistentSubscriptionConfig' ExpectedVersion.Any' ev' SystemAccount.Principal' x => HandleSaveConfigurationCompleted (continueWith' x)); " is 177.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,LoadSubscriptionsFromConfig,The length of the statement  "		CreateSubscriptionGroup (sub.Stream' sub.Group' sub.ResolveLinkTos' sub.StartFrom' sub.ExtraStatistics' sub.MaxRetryCount' sub.LiveBufferSize' sub.HistoryBufferSize' sub.ReadBatchSize' TimeSpan.FromMilliseconds (sub.CheckPointAfter)' sub.MinCheckPointCount' sub.MaxCheckPointCount' sub.MaxSubscriberCount' sub.NamedConsumerStrategy' TimeSpan.FromMilliseconds (sub.MessageTimeout)); " is 381.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new MonitoringMessage.GetPersistentSubscriptionStatsCompleted (MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus.NotReady' null)); " is 182.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new MonitoringMessage.GetPersistentSubscriptionStatsCompleted (MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus.NotFound' null)); " is 182.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new MonitoringMessage.GetPersistentSubscriptionStatsCompleted (MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus.NotFound' null)); " is 182.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "	message.Envelope.ReplyWith (new MonitoringMessage.GetPersistentSubscriptionStatsCompleted (MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus.Success' stats)); " is 182.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new MonitoringMessage.GetPersistentSubscriptionStatsCompleted (MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus.NotReady' null)); " is 182.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new MonitoringMessage.GetPersistentSubscriptionStatsCompleted (MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus.NotFound' null)); " is 182.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "	message.Envelope.ReplyWith (new MonitoringMessage.GetPersistentSubscriptionStatsCompleted (MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus.Success' stats)); " is 182.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new MonitoringMessage.GetPersistentSubscriptionStatsCompleted (MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus.NotReady' null)); " is 182.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "	message.Envelope.ReplyWith (new MonitoringMessage.GetPersistentSubscriptionStatsCompleted (MonitoringMessage.GetPersistentSubscriptionStatsCompleted.OperationStatus.Success' stats)); " is 182.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionStats,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionStats.cs,GetStatistics,The length of the statement  "		var connAvgItemsPerSecond = lastRunMs.Ticks != 0 ? (int)(TimeSpan.TicksPerSecond * connLastItems / lastRunMs.Ticks) : 0; " is 120.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionStreamReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionStreamReader.cs,BeginReadEvents,The length of the statement  "	_ioDispatcher.ReadForward (stream' startEventNumber' Math.Min (countToLoad' actualBatchSize)' resolveLinkTos' SystemAccount.Principal' new ResponseHandler (onEventsFound).FetchCompleted); " is 187.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,Handle,The length of the statement  "	_publisher.Publish (new SystemMessage.VNodeConnectionEstablished (message.ReplicaEndPoint' message.Connection.ConnectionId)); " is 125.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,Handle,The length of the statement  "	var subscription = new ReplicaSubscription (_tcpSendPublisher' message.Connection' message.SubscriptionId' message.ReplicaEndPoint' message.IsPromotable); " is 154.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,Handle,The length of the statement  "			Log.Error ("There is already a subscription with SubscriptionID {0:B}: {1}."' subscription.SubscriptionId' existingSubscr); " is 123.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,Handle,The length of the statement  "			subscription.SendBadRequestAndClose (message.CorrelationId' string.Format ("There is already a subscription with SubscriptionID {0:B}: {1}.\nSubscription we tried to add: {2}"' subscription.SubscriptionId' existingSubscr' subscription)); " is 237.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,Handle,The length of the statement  "				var stats = new ReplicationMessage.ReplicationStats (subscription.Key' tcpConn.ConnectionId' subscription.Value.ReplicaEndPoint.ToString ()' tcpConn.SendQueueSize' conn.TotalBytesSent' conn.TotalBytesReceived' conn.PendingSendBytes' conn.PendingReceivedBytes); " is 260.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,SubscribeReplica,The length of the statement  "		Log.Info ("SUBSCRIBE REQUEST from [{0}'C:{1:B}'S:{2:B}'{3}(0x{3:X})'{4}]..."' replica.ReplicaEndPoint' replica.ConnectionId' replica.SubscriptionId' logPosition' string.Join ("' "' epochs.Select (x => EpochRecordExtensions.AsString ((Epoch)x)))); " is 246.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,SubscribeReplica,The length of the statement  "		var subscriptionPos = SetSubscriptionPosition (replica' epochCorrectedLogPos' chunkId' replicationStart: true' verbose: true' trial: 0); " is 136.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,SubscribeReplica,The length of the statement  "		replica.SendBadRequestAndClose (correlationId' string.Format ("Exception while subscribing replica. Connection will be dropped. Error: {0}"' exc.Message)); " is 155.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,GetValidLogPosition,The length of the statement  "			var msg = string.Format ("Replica [{0}'S:{1}'{2}] has positive LogPosition {3} (0x{3:X})' but does not have epochs."' replicaEndPoint' subscriptionId' string.Join ("' "' epochs.Select (x => x.AsString ()))' logPosition); " is 220.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,GetValidLogPosition,The length of the statement  "		Log.Error ("No common epoch found for replica [{0}'S{1}'{2}(0x{2:X})'{3}]. Subscribing at 0. Master LogPosition: {4} (0x{4:X})' known epochs: {5}."' replicaEndPoint' subscriptionId' logPosition' string.Join ("' "' epochs.Select (x => x.AsString ()))' masterCheckpoint' string.Join ("' "' _epochManager.GetLastEpochs (int.MaxValue).Select (x => x.AsString ()))); " is 361.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,GetValidLogPosition,The length of the statement  "		var msg = string.Format ("Replica [{0}'S:{1}'{2}(0x{2:X})'epochs:\n{3}]\n provided epochs which are not in " + "EpochManager (possibly too old' known epochs:\n{4}).\nMaster LogPosition: {5} (0x{5:X}). " + "We do not support this case as of now.\n" + "CommonEpoch: {6}' AfterCommonEpoch: {7}"' replicaEndPoint' subscriptionId' logPosition' string.Join ("\n"' epochs.Select (x => x.AsString ()))' string.Join ("\n"' _epochManager.GetLastEpochs (int.MaxValue).Select (x => x.AsString ()))' masterCheckpoint' commonEpoch.AsString ()' afterCommonEpoch == null ? "<none>" : afterCommonEpoch.AsString ()); " is 598.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,SetSubscriptionPosition,The length of the statement  "		Debug.Assert (chunk != null' string.Format ("Chunk for LogPosition {0} (0x{0:X}) is null in MasterReplicationService! Replica: [{1}'C:{2}'S:{3}]"' logPosition' sub.ReplicaEndPoint' sub.ConnectionId' sub.SubscriptionId)); " is 220.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,SetSubscriptionPosition,The length of the statement  "				Log.Info ("Subscribed replica [{0}' S:{1}] for raw send at {2} (0x{2:X}) (requested {3} (0x{3:X}))."' sub.ReplicaEndPoint' sub.SubscriptionId' chunkStartPos' logPosition); " is 171.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,SetSubscriptionPosition,The length of the statement  "					Log.Info ("Forcing replica [{0}' S:{1}] to recreate chunk from position {2} (0x{2:X})..."' sub.ReplicaEndPoint' sub.SubscriptionId' chunkStartPos); " is 147.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,SetSubscriptionPosition,The length of the statement  "			sub.SendMessage (new ReplicationMessage.CreateChunk (_instanceId' sub.SubscriptionId' chunk.ChunkHeader' chunk.FileSize' isCompletedChunk: true)); " is 146.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,SetSubscriptionPosition,The length of the statement  "				Log.Info ("Subscribed replica [{0}'S:{1}] for data send at {2} (0x{2:X})."' sub.ReplicaEndPoint' sub.SubscriptionId' logPosition); " is 130.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,MainLoop,The length of the statement  "			// Reset the flush signal as we're about to read anyway. This could be closer to the actual read but no harm from too many checks. " is 130.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,ManageSubscriptions,The length of the statement  "		if (subscription.SendQueueSize >= MaxQueueSize || subscription.LogPosition - Interlocked.Read (ref subscription.AckedLogPosition) >= ReplicaSendWindow) " is 151.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,TrySendLogBulk,The length of the statement  "			var msg = new ReplicationMessage.RawChunkBulk (_instanceId' subscription.SubscriptionId' chunkHeader.ChunkStartNumber' chunkHeader.ChunkEndNumber' bulkResult.OldPosition' data' bulkResult.IsEOF); " is 195.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,TrySendLogBulk,The length of the statement  "				throw new Exception (string.Format ("Replication invariant failure. SubscriptionPosition {0}' bulkResult.OldPosition {1}"' subscription.LogPosition' bulkResult.OldPosition)); " is 174.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,TrySendLogBulk,The length of the statement  "			var msg = new ReplicationMessage.DataChunkBulk (_instanceId' subscription.SubscriptionId' chunkHeader.ChunkStartNumber' chunkHeader.ChunkEndNumber' subscription.LogPosition' data' bulkResult.IsEOF); " is 198.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,ManageRoleAssignments,The length of the statement  "	var candidates = subscribers.Where (x => x.IsPromotable && x.State != ReplicaState.CatchingUp).OrderByDescending (x => x.LogPosition).ToArray (); " is 145.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,ManageRoleAssignments,The length of the statement  "			if (candidate.LagOccurences >= LagOccurencesThreshold && masterCheckpoint - candidate.LogPosition >= SlaveLagThreshold) { " is 121.
Long Statement,EventStore.Core.Services.Replication,ReplicaService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\ReplicaService.cs,ConnectToMaster,The length of the statement  "		_connection.Stop (string.Format ("Reconnecting from old master [{0}] to new master: [{1}]."' _connection.RemoteEndPoint' masterEndPoint)); " is 138.
Long Statement,EventStore.Core.Services.Replication,ReplicaService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\ReplicaService.cs,ConnectToMaster,The length of the statement  "	_connection = new TcpConnectionManager (_useSsl ? "master-secure" : "master-normal"' Guid.NewGuid ()' _tcpDispatcher' _publisher' masterEndPoint' _connector' _useSsl' _sslTargetHost' _sslValidateServer' _networkSendQueue' _authProvider' _heartbeatInterval' _heartbeatTimeout' OnConnectionEstablished' OnConnectionClosed); " is 321.
Long Statement,EventStore.Core.Services.Replication,ReplicaService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\ReplicaService.cs,GetMasterEndPoint,The length of the statement  "		Log.Error ("Internal secure connections are required' but no internal secure TCP end point is specified for master [{0}]!"' master); " is 132.
Long Statement,EventStore.Core.Services.Replication,ReplicaService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\ReplicaService.cs,Handle,The length of the statement  "	Log.Info ("Subscribing at LogPosition: {0} (0x{0:X}) to MASTER [{1}' {2:B}] as replica with SubscriptionId: {3:B}' " + "ConnectionId: {4:B}' LocalEndPoint: [{5}]' Epochs:\n{6}...\n."' logPosition' _connection.RemoteEndPoint' message.MasterId' message.SubscriptionId' _connection.ConnectionId' _connection.LocalEndPoint' string.Join ("\n"' epochs.Select (x => x.AsString ()))); " is 376.
Long Statement,EventStore.Core.Services.Replication,ReplicaService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\ReplicaService.cs,Handle,The length of the statement  "	SendTcpMessage (_connection' new ReplicationMessage.SubscribeReplica (logPosition' chunk.ChunkHeader.ChunkId' epochs' _nodeInfo.InternalTcp' message.MasterId' message.SubscriptionId' isPromotable: true)); " is 204.
Long Statement,EventStore.Core.Services.Storage.EpochManager,EpochManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\EpochManager\EpochManager.cs,GetEpoch,The length of the statement  "			throw new ArgumentOutOfRangeException ("epochNumber"' string.Format ("EpochNumber requested should not be cached. Requested: {0}' min cached: {1}."' epochNumber' _minCachedEpochNumber)); " is 186.
Long Statement,EventStore.Core.Services.Storage.EpochManager,EpochManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\EpochManager\EpochManager.cs,WriteEpochRecordWithRetry,The length of the statement  "	var rec = new SystemLogRecord (epoch.EpochPosition' epoch.TimeStamp' SystemRecordType.Epoch' SystemRecordSerialization.Json' epoch.AsSerialized ()); " is 148.
Long Statement,EventStore.Core.Services.Storage.EpochManager,EpochManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\EpochManager\EpochManager.cs,WriteEpochRecordWithRetry,The length of the statement  "		rec = new SystemLogRecord (epoch.EpochPosition' epoch.TimeStamp' SystemRecordType.Epoch' SystemRecordSerialization.Json' epoch.AsSerialized ()); " is 144.
Long Statement,EventStore.Core.Services.Storage.EpochManager,EpochManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\EpochManager\EpochManager.cs,WriteEpochRecordWithRetry,The length of the statement  "	Log.Debug ("=== Writing E{0}@{1}:{2:B} (previous epoch at {3})."' epochNumber' epoch.EpochPosition' epochId' lastEpochPosition); " is 128.
Long Statement,EventStore.Core.Services.Storage.EpochManager,EpochManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\EpochManager\EpochManager.cs,SetLastEpoch,The length of the statement  "		throw new Exception (string.Format ("Not found epoch at {0} with epoch number: {1} and epoch ID: {2}. " + "SetLastEpoch FAILED! Data corruption risk!"' epoch.EpochPosition' epoch.EpochNumber' epoch.EpochId)); " is 208.
Long Statement,EventStore.Core.Services.Storage.EpochManager,EpochManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\EpochManager\EpochManager.cs,UpdateLastEpoch,The length of the statement  "		Log.Debug ("=== Update Last Epoch E{0}@{1}:{2:B} (previous epoch at {3})."' epoch.EpochNumber' epoch.EpochPosition' epoch.EpochId' epoch.PrevEpochPosition); " is 156.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,AllReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\AllReader.cs,ReadAllEventsForward,The length of the statement  "				if (prepare.Flags.HasAnyOf (PrepareFlags.Data | PrepareFlags.StreamDelete) && new TFPos (prepare.LogPosition' prepare.LogPosition) >= pos) { " is 140.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,AllReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\AllReader.cs,ReadAllEventsForward,The length of the statement  "					if (prepare.Flags.HasAnyOf (PrepareFlags.Data | PrepareFlags.StreamDelete) && new TFPos (commit.LogPosition' prepare.LogPosition) >= pos) { " is 139.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,AllReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\AllReader.cs,ReadAllEventsBackward,The length of the statement  "				if (prepare.Flags.HasAnyOf (PrepareFlags.Data | PrepareFlags.StreamDelete) && new TFPos (result.RecordPostPosition' result.RecordPostPosition) <= pos) { " is 152.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,AllReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\AllReader.cs,ReadAllEventsBackward,The length of the statement  "					if (prepare.Flags.HasAnyOf (PrepareFlags.Data | PrepareFlags.StreamDelete) && new TFPos (commitPostPos' result.RecordPostPosition) <= pos) { " is 140.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,AllReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\AllReader.cs,IsCommitAlike,The length of the statement  "	return rec.RecordType == LogRecordType.Commit || (rec.RecordType == LogRecordType.Prepare && ((PrepareLogRecord)rec).Flags.HasAnyOf (PrepareFlags.IsCommitted)); " is 160.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexBackend,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexBackend.cs,UpdateStreamLastEventNumber,The length of the statement  "	var res = _streamLastEventNumberCache.Put (streamId' new KeyValuePair<int' long?> (cacheVersion' lastEventNumber)' (key' d) => d.Key == 0 ? new EventNumberCached (1' d.Value) : new EventNumberCached (1' null)' (key' old' d) => old.Version == d.Key ? new EventNumberCached (d.Key + 1' d.Value ?? old.LastEventNumber) : old); " is 323.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexBackend,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexBackend.cs,UpdateStreamMetadata,The length of the statement  "	var res = _streamMetadataCache.Put (streamId' new KeyValuePair<int' StreamMetadata> (cacheVersion' metadata)' (key' d) => d.Key == 0 ? new MetadataCached (1' d.Value) : new MetadataCached (1' null)' (key' old' d) => old.Version == d.Key ? new MetadataCached (d.Key + 1' d.Value ?? old.Metadata) : old); " is 302.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexBackend,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexBackend.cs,SetStreamLastEventNumber,The length of the statement  "	var res = _streamLastEventNumberCache.Put (streamId' lastEventNumber' (key' lastEvNum) => new EventNumberCached (1' lastEvNum)' (key' old' lastEvNum) => new EventNumberCached (old.Version + 1' lastEvNum)); " is 205.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexBackend,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexBackend.cs,SetStreamMetadata,The length of the statement  "	var res = _streamMetadataCache.Put (streamId' metadata' (key' meta) => new MetadataCached (1' meta)' (key' old' meta) => new MetadataCached (old.Version + 1' meta)); " is 165.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Init,The length of the statement  "		throw new Exception (string.Format ("_lastCommitPosition {0} >= buildToPosition {1}"' _lastCommitPosition' buildToPosition)); " is 125.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Init,The length of the statement  "				Log.Debug ("ReadIndex Rebuilding: processed {0} records ({1:0.0}%)."' processed' (result.RecordPostPosition - startPosition) * 100.0 / (buildToPosition - startPosition)); " is 170.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Init,The length of the statement  "		Log.Debug ("ReadIndex rebuilding done: total processed {0} records' time elapsed: {1}."' processed' DateTime.UtcNow - startTime); " is 129.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Commit,The length of the statement  "				throw new Exception (string.Format ("Expected stream: {0}' actual: {1}. LogPosition: {2}"' streamId' prepare.EventStreamId' commit.LogPosition)); " is 145.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Commit,The length of the statement  "		eventNumber = prepare.Flags.HasAllOf (PrepareFlags.StreamDelete) ? EventNumber.DeletedStream : commit.FirstEventNumber + prepare.TransactionOffset; " is 147.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Commit,The length of the statement  "	if (Interlocked.CompareExchange (ref _lastCommitPosition' newLastCommitPosition' lastCommitPosition) != lastCommitPosition) " is 123.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Commit,The length of the statement  "		throw new Exception ("Concurrency error in ReadIndex.Commit: _lastCommitPosition was modified during Commit execution!"); " is 121.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Commit,The length of the statement  "		_bus.Publish (new StorageMessage.EventCommitted (commit.LogPosition' new EventRecord (indexEntries [i].Version' prepares [i])' isTfEof && i == n - 1)); " is 151.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Commit,The length of the statement  "		/* for committed prepare expected version is always explicit */if (new TFPos (prepare.LogPosition' prepare.LogPosition) > new TFPos (_persistedCommitPos' _persistedPreparePos)) { " is 178.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Commit,The length of the statement  "	if (Interlocked.CompareExchange (ref _lastCommitPosition' newLastCommitPosition' lastCommitPosition) != lastCommitPosition) " is 123.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Commit,The length of the statement  "		throw new Exception ("Concurrency error in ReadIndex.Commit: _lastCommitPosition was modified during Commit execution!"); " is 121.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Commit,The length of the statement  "		_bus.Publish (new StorageMessage.EventCommitted (prepares [i].LogPosition' new EventRecord (indexEntries [i].Version' prepares [i])' isTfEof && i == n - 1)); " is 157.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,CheckStreamVersion,The length of the statement  "			throw new Exception (string.Format ("Commit invariant violation: new event number {0} does not correspond to current stream version {1}.\n" + "Stream ID: {2}.\nCommit: {3}."' newEventNumber' lastEventNumber' streamId' commit)); " is 227.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,CheckDuplicateEvents,The length of the statement  "					throw new Exception (string.Format ("Trying to add duplicate event #{0} to stream {1} \nCommit: {2}\n" + "Prepare: {3}\nIndexed prepare: {4}."' indexEntry.Version' prepare.EventStreamId' commit' prepare' indexedPrepare)); " is 221.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,GetPrepare,The length of the statement  "		throw new Exception (string.Format ("Incorrect type of log record {0}' expected Prepare record."' result.LogRecord.RecordType)); " is 128.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,ReadEventInternal,The length of the statement  "		return new IndexReadEventResult (ReadEventResult.Success' new EventRecord (eventNumber' prepare)' metadata' lastEventNumber' originalStreamExists); " is 147.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,ReadEventInternal,The length of the statement  "	return new IndexReadEventResult (ReadEventResult.NotFound' metadata' lastEventNumber' originalStreamExists: originalStreamExists); " is 130.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,ReadPrepareInternal,The length of the statement  "	}).Where (x => x.Prepare != null && x.Prepare.EventStreamId == streamId).GroupBy (x => x.Version).Select (x => x.Last ()).ToList (); " is 132.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,ReadPrepareInternal,The length of the statement  "		throw new Exception (string.Format ("Incorrect type of log record {0}' expected Prepare record."' result.LogRecord.RecordType)); " is 128.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,ReadStreamEventsForward,The length of the statement  "			return new IndexReadStreamResult (fromEventNumber' maxCount' ReadStreamResult.StreamDeleted' StreamMetadata.Empty' lastEventNumber); " is 132.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,ReadStreamEventsForward,The length of the statement  "			return new IndexReadStreamResult (fromEventNumber' maxCount' IndexReadStreamResult.EmptyRecords' metadata' minEventNumber' lastEventNumber' isEndOfStream: false); " is 162.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,ReadStreamEventsForward,The length of the statement  "		}).Where (x => x.Prepare != null && x.Prepare.EventStreamId == streamId).OrderByDescending (x => x.Version).GroupBy (x => x.Version).Select (x => x.Last ()); " is 157.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,ReadStreamEventsForward,The length of the statement  "		return new IndexReadStreamResult (endEventNumber' maxCount' records' metadata' nextEventNumber' lastEventNumber' isEndOfStream); " is 128.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,ReadStreamEventsBackward,The length of the statement  "			return new IndexReadStreamResult (fromEventNumber' maxCount' ReadStreamResult.StreamDeleted' StreamMetadata.Empty' lastEventNumber); " is 132.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,ReadStreamEventsBackward,The length of the statement  "			return new IndexReadStreamResult (fromEventNumber' maxCount' IndexReadStreamResult.EmptyRecords' metadata' -1' lastEventNumber' isEndOfStream: true); " is 149.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,ReadStreamEventsBackward,The length of the statement  "		}).Where (x => x.Prepare != null && x.Prepare.EventStreamId == streamId).OrderByDescending (x => x.Version).GroupBy (x => x.Version).Select (x => x.Last ()); " is 157.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,ReadStreamEventsBackward,The length of the statement  "		isEndOfStream = isEndOfStream || startEventNumber == 0 || (startEventNumber <= lastEventNumber && (records.Length == 0 || records [records.Length - 1].EventNumber != startEventNumber)); " is 185.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,ReadStreamEventsBackward,The length of the statement  "		return new IndexReadStreamResult (endEventNumber' maxCount' records' metadata' nextEventNumber' lastEventNumber' isEndOfStream); " is 128.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,CheckStreamAccessInternal,The length of the statement  "	if ((streamAccessType == StreamAccessType.Write || streamAccessType == StreamAccessType.Delete) && streamId == SystemStreams.AllStream) " is 135.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,GetStreamLastEventNumberCached,The length of the statement  "	if (SystemStreams.IsMetastream (streamId) && GetStreamLastEventNumberCached (reader' SystemStreams.OriginalStreamOf (streamId)) == EventNumber.DeletedStream) " is 157.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,GetStreamLastEventNumberUncached,The length of the statement  "	foreach (var indexEntry in _tableIndex.GetRange (streamId' startVersion' long.MaxValue' limit: _hashCollisionReadLimit + 1)) { " is 126.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,GetStreamMetadataUncached,The length of the statement  "		throw new Exception (string.Format ("ReadPrepareInternal could not find metaevent #{0} on metastream '{1}'. " + "That should never happen."' metaEventNumber' metastreamId)); " is 173.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,GetStreamMetadataUncached,The length of the statement  "			metadata = new StreamMetadata (metadata.MaxCount' metadata.MaxAge' EventNumber.DeletedStream' metadata.TempStream' metadata.CacheControl' metadata.Acl); " is 152.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexWriter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexWriter.cs,CheckCommitStartingAt,The length of the statement  "				var message = string.Format ("Could not read first prepare of to-be-committed transaction. " + "Transaction pos: {0}' commit pos: {1}."' transactionPosition' commitPosition); " is 174.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexWriter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexWriter.cs,GetPrepare,The length of the statement  "		throw new Exception (string.Format ("Incorrect type of log record {0}' expected Prepare record."' result.LogRecord.RecordType)); " is 128.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexWriter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexWriter.cs,CheckCommit,The length of the statement  "				return new CommitCheckResult (first ? CommitDecision.Ok : CommitDecision.CorruptedIdempotency' streamId' curVersion' -1' -1' first && IsSoftDeleted (streamId)); " is 160.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexWriter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexWriter.cs,CheckCommit,The length of the statement  "		return first /* no data in transaction */? new CommitCheckResult (CommitDecision.Ok' streamId' curVersion' -1' -1' IsSoftDeleted (streamId)) : new CommitCheckResult (CommitDecision.Idempotent' streamId' curVersion' startEventNumber' endEventNumber' false); " is 256.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexWriter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexWriter.cs,CheckCommit,The length of the statement  "			if (_committedEvents.TryGetRecord (eventId' out prepInfo) && prepInfo.StreamId == streamId && prepInfo.EventNumber == eventNumber) " is 130.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexWriter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexWriter.cs,CheckCommit,The length of the statement  "		return eventNumber == expectedVersion /* no data in transaction */? new CommitCheckResult (CommitDecision.WrongExpectedVersion' streamId' curVersion' -1' -1' false) : new CommitCheckResult (CommitDecision.Idempotent' streamId' curVersion' expectedVersion + 1' eventNumber' false); " is 280.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexWriter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexWriter.cs,PreCommit,The length of the statement  "		eventNumber = prepare.Flags.HasAnyOf (PrepareFlags.StreamDelete) ? EventNumber.DeletedStream : commit.FirstEventNumber + prepare.TransactionOffset; " is 147.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexWriter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexWriter.cs,PreCommit,The length of the statement  "		/* for committed prepare expected version is always explicit */_committedEvents.PutRecord (prepare.EventId' new EventInfo (streamId' eventNumber)' throwOnDuplicate: false); " is 172.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexWriter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexWriter.cs,PurgeNotProcessedCommitsTill,The length of the statement  "				throw new Exception (string.Format ("Original stream CommitInfo for meta-stream '{0}' is not present!"' SystemStreams.MetastreamOf (x))); " is 137.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReadAllResult,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReadAllResult.cs,ToString,The length of the statement  "	return string.Format ("CurrentPos: {0}' NextPos: {1}' PrevPos: {2}' Records: {3}"' CurrentPos' NextPos' PrevPos' string.Join ("\n"' Records.Select (x => x.ToString ()))); " is 170.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,ReadIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\ReadIndex.cs,GetStatistics,The length of the statement  "	return new ReadIndexStats (Interlocked.Read (ref TFChunkReader.CachedReads)' Interlocked.Read (ref TFChunkReader.NotCachedReads)' _indexReader.CachedStreamInfo' _indexReader.NotCachedStreamInfo' _indexReader.HashCollisions' _indexWriter.CachedTransInfo' _indexWriter.NotCachedTransInfo); " is 287.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReadStreamResult,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReadStreamResult.cs,ToString,The length of the statement  "	return String.Format ("FromEventNumber: {0}' Maxcount: {1}' Result: {2}' Record count: {3}' Metadata: {4}' " + "NextEventNumber: {5}' LastEventNumber: {6}' IsEndOfStream: {7}"' FromEventNumber' MaxCount' Result' Records.Length' Metadata' NextEventNumber' LastEventNumber' IsEndOfStream); " is 287.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,BoundedCache,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\BoundedCache.cs,GetStatistics,The length of the statement  "	return new ReadCacheStats (Interlocked.Read (ref _currentSize)' _cache.Count' Interlocked.Read (ref _hitCount)' Interlocked.Read (ref _missCount)); " is 147.
Long Statement,EventStore.Core.Services.RequestManager.Managers,DeleteStreamTwoPhaseRequestManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\DeleteStreamTwoPhaseRequestManager.cs,Handle,The length of the statement  "	InitNoPreparePhase (request.Envelope' request.InternalCorrId' request.CorrelationId' request.EventStreamId' request.User' StreamAccessType.Delete); " is 147.
Long Statement,EventStore.Core.Services.RequestManager.Managers,DeleteStreamTwoPhaseRequestManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\DeleteStreamTwoPhaseRequestManager.cs,OnSecurityAccessGranted,The length of the statement  "	Publisher.Publish (new StorageMessage.WriteDelete (internalCorrId' PublishEnvelope' _eventStreamId' _expectedVersion' _hardDelete' liveUntil: NextTimeoutTime - TimeoutOffset)); " is 176.
Long Statement,EventStore.Core.Services.RequestManager.Managers,DeleteStreamTwoPhaseRequestManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\DeleteStreamTwoPhaseRequestManager.cs,CompleteSuccessRequest,The length of the statement  "	var responseMsg = new ClientMessage.DeleteStreamCompleted (ClientCorrId' OperationResult.Success' null' preparePosition' commitPosition); " is 137.
Long Statement,EventStore.Core.Services.RequestManager.Managers,SingleAckRequestManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\SingleAckRequestManager.cs,Handle,The length of the statement  "	_bus.Publish (new StorageMessage.CheckStreamAccess (_publishEnvelope' _internalCorrId' request.EventStreamId' null' StreamAccessType.Write' request.User' _betterOrdering)); " is 172.
Long Statement,EventStore.Core.Services.RequestManager.Managers,SingleAckRequestManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\SingleAckRequestManager.cs,Handle,The length of the statement  "		throw new Exception (string.Format ("TransactionStart request manager invariant violation: reqType: {0}' req: {1}."' _requestType' _request)); " is 142.
Long Statement,EventStore.Core.Services.RequestManager.Managers,SingleAckRequestManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\SingleAckRequestManager.cs,Handle,The length of the statement  "		_bus.Publish (new StorageMessage.WriteTransactionStart (_internalCorrId' _publishEnvelope' _request.EventStreamId' _request.ExpectedVersion' liveUntil: _nextTimeoutTime - TwoPhaseRequestManagerBase.TimeoutOffset)); " is 214.
Long Statement,EventStore.Core.Services.RequestManager.Managers,SingleAckRequestManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\SingleAckRequestManager.cs,Handle,The length of the statement  "	_bus.Publish (new StorageMessage.WriteTransactionData (_internalCorrId' _publishEnvelope' _transactionId' request.Events)); " is 123.
Long Statement,EventStore.Core.Services.RequestManager.Managers,SingleAckRequestManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\SingleAckRequestManager.cs,Handle,The length of the statement  "		throw new Exception (string.Format ("Unexpected PrepareAck with flags [{0}] arrived (LogPosition: {1}' InternalCorrId: {2:B}' ClientCorrId: {3:B})."' message.Flags' message.LogPosition' message.CorrelationId' _clientCorrId)); " is 225.
Long Statement,EventStore.Core.Services.RequestManager.Managers,SingleAckRequestManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\SingleAckRequestManager.cs,CompleteSuccessRequest,The length of the statement  "		responseMsg = new ClientMessage.TransactionStartCompleted (_clientCorrId' _transactionId' OperationResult.Success' null); " is 121.
Long Statement,EventStore.Core.Services.RequestManager.Managers,SingleAckRequestManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\SingleAckRequestManager.cs,CompleteSuccessRequest,The length of the statement  "		responseMsg = new ClientMessage.TransactionWriteCompleted (_clientCorrId' _transactionId' OperationResult.Success' null); " is 121.
Long Statement,EventStore.Core.Services.RequestManager.Managers,TransactionCommitTwoPhaseRequestManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\TransactionCommitTwoPhaseRequestManager.cs,Handle,The length of the statement  "	InitTwoPhase (request.Envelope' request.InternalCorrId' request.CorrelationId' request.TransactionId' request.User' StreamAccessType.Write); " is 140.
Long Statement,EventStore.Core.Services.RequestManager.Managers,TransactionCommitTwoPhaseRequestManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\TransactionCommitTwoPhaseRequestManager.cs,OnSecurityAccessGranted,The length of the statement  "	Publisher.Publish (new StorageMessage.WriteTransactionPrepare (internalCorrId' PublishEnvelope' _transactionId' liveUntil: NextTimeoutTime - TimeoutOffset)); " is 157.
Long Statement,EventStore.Core.Services.RequestManager.Managers,TransactionCommitTwoPhaseRequestManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\TransactionCommitTwoPhaseRequestManager.cs,CompleteSuccessRequest,The length of the statement  "	var responseMsg = new ClientMessage.TransactionCommitCompleted (ClientCorrId' _transactionId' firstEventNumber' lastEventNumber' preparePosition' commitPosition); " is 162.
Long Statement,EventStore.Core.Services.RequestManager.Managers,TwoPhaseRequestManagerBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\TwoPhaseRequestManagerBase.cs,InitNoPreparePhase,The length of the statement  "	Publisher.Publish (new StorageMessage.CheckStreamAccess (PublishEnvelope' internalCorrId' eventStreamId' null' accessType' user' _betterOrdering)); " is 147.
Long Statement,EventStore.Core.Services.RequestManager.Managers,TwoPhaseRequestManagerBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\TwoPhaseRequestManagerBase.cs,InitTwoPhase,The length of the statement  "	Publisher.Publish (new StorageMessage.CheckStreamAccess (PublishEnvelope' internalCorrId' null' transactionId' accessType' user)); " is 130.
Long Statement,EventStore.Core.Services.RequestManager.Managers,WriteStreamTwoPhaseRequestManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\WriteStreamTwoPhaseRequestManager.cs,Handle,The length of the statement  "	InitNoPreparePhase (request.Envelope' request.InternalCorrId' request.CorrelationId' request.EventStreamId' request.User' StreamAccessType.Write); " is 146.
Long Statement,EventStore.Core.Services.RequestManager.Managers,WriteStreamTwoPhaseRequestManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\WriteStreamTwoPhaseRequestManager.cs,OnSecurityAccessGranted,The length of the statement  "	Publisher.Publish (new StorageMessage.WritePrepares (internalCorrId' PublishEnvelope' _request.EventStreamId' _request.ExpectedVersion' _request.Events' liveUntil: NextTimeoutTime - TimeoutOffset)); " is 198.
Long Statement,EventStore.Core.Services.RequestManager.Managers,WriteStreamTwoPhaseRequestManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\WriteStreamTwoPhaseRequestManager.cs,CompleteSuccessRequest,The length of the statement  "	ResponseEnvelope.ReplyWith (new ClientMessage.WriteEventsCompleted (ClientCorrId' firstEventNumber' lastEventNumber' preparePosition' commitPosition)); " is 151.
Long Statement,EventStore.Core.Services.Monitoring,SystemStatsHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetSystemStats,The length of the statement  "		Func<string' string' string> driveStat = (diskName' stat) => string.Format ("sys-drive-{0}-{1}"' diskName.Replace ("\\"' "").Replace (":"' "")' stat); " is 150.
Long Statement,EventStore.Core.Services.Monitoring,SystemStatsHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetSystemStats,The length of the statement  "		stats [queueStat (queue.Name' "currentIdleTime")] = queue.CurrentIdleTime.HasValue ? queue.CurrentIdleTime.Value.ToString ("G"' CultureInfo.InvariantCulture) : null; " is 165.
Long Statement,EventStore.Core.Services.Monitoring,SystemStatsHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetSystemStats,The length of the statement  "		stats [queueStat (queue.Name' "currentItemProcessingTime")] = queue.CurrentItemProcessingTime.HasValue ? queue.CurrentItemProcessingTime.Value.ToString ("G"' CultureInfo.InvariantCulture) : null; " is 195.
Long Statement,EventStore.Core.Services.Monitoring,SystemStatsHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetSystemStats,The length of the statement  "		stats [queueStat (queue.Name' "inProgressMessage")] = queue.InProgressMessageType != null ? queue.InProgressMessageType.Name : "<none>"; " is 136.
Long Statement,EventStore.Core.Services.Monitoring,SystemStatsHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetSystemStats,The length of the statement  "		stats [queueStat (queue.Name' "lastProcessedMessage")] = queue.LastProcessedMessageType != null ? queue.LastProcessedMessageType.Name : "<none>"; " is 145.
Long Statement,EventStore.Core.Services.Monitoring,SystemStatsHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetPerfCounterInformation,The length of the statement  "		stats ["proc-cpuScaled"] = new StatMetadata (procCpuUsage / Environment.ProcessorCount' "Process"' "Process Cpu Usage Scaled by Logical Processor Count"); " is 154.
Long Statement,EventStore.Core.Services.Monitoring,SystemStatsHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetFreeMemOnBSD,The length of the statement  "		var sysctl = ShellExecutor.GetOutput ("sysctl"' "-n hw.physmem hw.pagesize vm.stats.vm.v_free_count vm.stats.vm.v_cache_count vm.stats.vm.v_inactive_count"); " is 157.
Long Statement,EventStore.Core.Services.Monitoring,MonitoringService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\MonitoringService.cs,SaveStatsToStream,The length of the statement  "	var msg = new ClientMessage.WriteEvents (corrId' corrId' NoopEnvelope' false' _nodeStatsStream' ExpectedVersion.Any' new[] { " is 124.
Long Statement,EventStore.Core.Services.Monitoring,MonitoringService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\MonitoringService.cs,SetStatsStreamMetadata,The length of the statement  "	_mainBus.Publish (new ClientMessage.WriteEvents (_streamMetadataWriteCorrId' _streamMetadataWriteCorrId' new PublishEnvelope (_monitoringQueue)' false' SystemStreams.MetastreamOf (_nodeStatsStream)' ExpectedVersion.NoStream' new[] { " is 232.
Long Statement,EventStore.Core.Services.Monitoring,MonitoringService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\MonitoringService.cs,Handle,The length of the statement  "		Log.Debug ("Failed to create stats stream '{0}'. Reason : {1}({2}). Retrying..."' _nodeStatsStream' message.Result' message.Message); " is 133.
Long Statement,EventStore.Core.Services.Monitoring,MonitoringService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\MonitoringService.cs,Handle,The length of the statement  "		Log.Error ("Monitoring service got unexpected response code when trying to create stats stream ({0})."' message.Result); " is 120.
Long Statement,EventStore.Core.Services.Monitoring,MonitoringService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\MonitoringService.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new MonitoringMessage.GetFreshStatsCompleted (success: selectedStats != null' stats: selectedStats)); " is 129.
Long Statement,EventStore.Core.Services.Monitoring.Stats,QueueStats,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\Stats\QueueStats.cs,ToString,The length of the statement  "	var str = string.Format ("{0'-22} L: {1'-5}      Avg: {5'-5}i/s    AvgProcTime: {6:0.0}ms\n" + "      Idle %:{7'-5:00.0}  Peak: {2'-5}  MaxPeak: {3'-7}  TotalProcessed: {4'-7}\n" + "      Processing: {8}' Last: {9}"' Name' Length' LengthCurrentTryPeak' LengthLifetimePeak' TotalItemsProcessed' AvgItemsPerSecond' AvgProcessingTime' IdleTimePercent' InProgressMessageType == null ? "<none>" : InProgressMessageType.Name' LastProcessedMessageType == null ? "<none>" : LastProcessedMessageType.Name); " is 497.
Long Statement,EventStore.Core.Services.Monitoring.Stats,DiskIo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\Stats\DiskIo.cs,ParseOnUnix,The length of the statement  "		}' StringSplitOptions.RemoveEmptyEntries).Select (x => x.Split (':')).ToDictionary (s => s [0].Trim ()' s => s [1].Trim ()); " is 124.
Long Statement,EventStore.Core.Services.Monitoring.Stats,DiskIo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\Stats\DiskIo.cs,GetOnWindows,The length of the statement  "	return new DiskIo (counters.ReadTransferCount' counters.WriteTransferCount' counters.ReadOperationCount' counters.WriteOperationCount); " is 135.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,Handle,The length of the statement  "		Log.Debug ("Read Event operation has expired for Stream: {0}' Event Number: {1}. Operation Expired at {2}"' msg.EventStreamId' msg.EventNumber' msg.Expires); " is 157.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,Handle,The length of the statement  "		Log.Debug ("Read Stream Events Forward operation has expired for Stream: {0}' From Event Number: {1}' Max Count: {2}. Operation Expired at {3}"' msg.EventStreamId' msg.FromEventNumber' msg.MaxCount' msg.Expires); " is 212.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,Handle,The length of the statement  "				_publisher.Publish (new SubscriptionMessage.PollStream (msg.EventStreamId' res.TfLastCommitPosition' res.LastEventNumber' DateTime.UtcNow + msg.LongPollTimeout.Value' msg)); " is 173.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,Handle,The length of the statement  "		Log.Debug ("Read Stream Events Backward operation has expired for Stream: {0}' From Event Number: {1}' Max Count: {2}. Operation Expired at {3}"' msg.EventStreamId' msg.FromEventNumber' msg.MaxCount' msg.Expires); " is 213.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,Handle,The length of the statement  "		Log.Debug ("Read All Stream Events Forward operation has expired for C:{0}/P:{1}. Operation Expired at {2}"' msg.CommitPosition' msg.PreparePosition' msg.Expires); " is 163.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,Handle,The length of the statement  "				_publisher.Publish (new SubscriptionMessage.PollStream (SubscriptionsService.AllStreamsSubscriptionId' res.TfLastCommitPosition' null' DateTime.UtcNow + msg.LongPollTimeout.Value' msg)); " is 186.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,Handle,The length of the statement  "				_publisher.Publish (new SubscriptionMessage.PollStream (SubscriptionsService.AllStreamsSubscriptionId' res.TfLastCommitPosition' null' DateTime.UtcNow + msg.LongPollTimeout.Value' msg)); " is 186.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,Handle,The length of the statement  "		Log.Debug ("Read All Stream Events Backward operation has expired for C:{0}/P:{1}. Operation Expired at {2}"' msg.CommitPosition' msg.PreparePosition' msg.Expires); " is 164.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,Handle,The length of the statement  "		Log.Debug ("Check Stream Access operation has expired for Stream: {0}. Operation Expired at {1}"' msg.EventStreamId' msg.Expires); " is 130.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,ReadEvent,The length of the statement  "			var record = result.Result == ReadEventResult.Success && msg.ResolveLinkTos ? ResolveLinkToEvent (result.Record' msg.User' null) : ResolvedEvent.ForUnresolvedEvent (result.Record); " is 180.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,ReadEvent,The length of the statement  "			if ((result.Result == ReadEventResult.NoStream || result.Result == ReadEventResult.NotFound) && result.OriginalStreamExists && SystemStreams.IsSystemStream (msg.EventStreamId)) { " is 178.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,ReadEvent,The length of the statement  "			return new ClientMessage.ReadEventCompleted (msg.CorrelationId' msg.EventStreamId' result.Result' record.Value' result.Metadata' access.Public' null); " is 150.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,ReadStreamEventsForward,The length of the statement  "			if (msg.ValidationStreamVersion.HasValue && _readIndex.GetStreamLastEventNumber (msg.EventStreamId) == msg.ValidationStreamVersion) " is 131.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,ReadStreamEventsForward,The length of the statement  "			return new ClientMessage.ReadStreamEventsForwardCompleted (msg.CorrelationId' msg.EventStreamId' msg.FromEventNumber' msg.MaxCount' (ReadStreamResult)result.Result' resolvedPairs' result.Metadata' access.Public' string.Empty' result.NextEventNumber' result.LastEventNumber' result.IsEndOfStream' lastCommitPosition); " is 316.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,ReadStreamEventsBackward,The length of the statement  "			if (msg.ValidationStreamVersion.HasValue && _readIndex.GetStreamLastEventNumber (msg.EventStreamId) == msg.ValidationStreamVersion) " is 131.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,ReadStreamEventsBackward,The length of the statement  "			return new ClientMessage.ReadStreamEventsBackwardCompleted (msg.CorrelationId' msg.EventStreamId' result.FromEventNumber' result.MaxCount' (ReadStreamResult)result.Result' resolvedPairs' result.Metadata' access.Public' string.Empty' result.NextEventNumber' result.LastEventNumber' result.IsEndOfStream' lastCommitPosition); " is 323.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,ReadAllEventsForward,The length of the statement  "			return new ClientMessage.ReadAllEventsForwardCompleted (msg.CorrelationId' ReadAllResult.Success' null' resolved' metadata' access.Public' msg.MaxCount' res.CurrentPos' res.NextPos' res.PrevPos' lastCommitPosition); " is 215.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,ReadAllEventsBackward,The length of the statement  "			return new ClientMessage.ReadAllEventsBackwardCompleted (msg.CorrelationId' ReadAllResult.Success' null' resolved' metadata' access.Public' msg.MaxCount' res.CurrentPos' res.NextPos' res.PrevPos' lastCommitPosition); " is 216.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,CheckStreamAccess,The length of the statement  "		return new StorageMessage.CheckStreamAccessCompleted (msg.CorrelationId' streamId' msg.TransactionId' msg.AccessType' result); " is 126.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,CheckStreamAccess,The length of the statement  "		Log.ErrorException (exc' "Error during processing CheckStreamAccess({0}' {1}) request."' msg.EventStreamId' msg.TransactionId); " is 127.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,CheckStreamAccess,The length of the statement  "		return new StorageMessage.CheckStreamAccessCompleted (msg.CorrelationId' streamId' msg.TransactionId' msg.AccessType' new StreamAccess (false)); " is 144.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,NoData,The length of the statement  "	return new ClientMessage.ReadEventCompleted (msg.CorrelationId' msg.EventStreamId' result' ResolvedEvent.EmptyEvent' null' false' error); " is 137.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,NoData,The length of the statement  "	return new ClientMessage.ReadStreamEventsForwardCompleted (msg.CorrelationId' msg.EventStreamId' msg.FromEventNumber' msg.MaxCount' result' EmptyRecords' null' false' error ?? string.Empty' -1' lastEventNumber' true' lastCommitPosition); " is 237.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,NoData,The length of the statement  "	return new ClientMessage.ReadStreamEventsBackwardCompleted (msg.CorrelationId' msg.EventStreamId' msg.FromEventNumber' msg.MaxCount' result' EmptyRecords' null' false' error ?? string.Empty' -1' lastEventNumber' true' lastCommitPosition); " is 238.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,NoData,The length of the statement  "	return new ClientMessage.ReadAllEventsForwardCompleted (msg.CorrelationId' result' error' ResolvedEvent.EmptyArray' null' false' msg.MaxCount' pos' TFPos.Invalid' TFPos.Invalid' lastCommitPosition); " is 198.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,NoData,The length of the statement  "	return new ClientMessage.ReadAllEventsBackwardCompleted (msg.CorrelationId' result' error' ResolvedEvent.EmptyArray' null' false' msg.MaxCount' pos' TFPos.Invalid' TFPos.Invalid' lastCommitPosition); " is 199.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,CheckEventsOrder,The length of the statement  "			throw new Exception (string.Format ("Invalid order of events has been detected in read index for the event stream '{0}'. " + "The event {1} at position {2} goes after the event {3} at position {4}"' msg.EventStreamId' result.Records [index].EventNumber' result.Records [index].LogPosition' result.Records [index - 1].EventNumber' result.Records [index - 1].LogPosition)); " is 371.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,CheckEventsOrder,The length of the statement  "			throw new Exception (string.Format ("Invalid order of events has been detected in read index for the event stream '{0}'. " + "The event {1} at position {2} goes after the event {3} at position {4}"' msg.EventStreamId' result.Records [index].EventNumber' result.Records [index].LogPosition' result.Records [index - 1].EventNumber' result.Records [index - 1].LogPosition)); " is 371.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,Handle,The length of the statement  "		message.Envelope.ReplyWith (new ClientMessage.ScavengeDatabaseCompleted (message.CorrelationId' ClientMessage.ScavengeDatabase.ScavengeResult.InProgress' "Scavenge already in progress."' TimeSpan.FromMilliseconds (0)' 0)); " is 222.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,Scavenge,The length of the statement  "		if (message.User == null || (!message.User.IsInRole (SystemRoles.Admins) && !message.User.IsInRole (SystemRoles.Operations))) { " is 127.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,Scavenge,The length of the statement  "			var scavenger = new TFChunkScavenger (_db' _ioDispatcher' _tableIndex' _readIndex' scavengeId' _nodeEndpoint' unsafeIgnoreHardDeletes: _unsafeIgnoreHardDeletes); " is 161.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,Scavenge,The length of the statement  "	message.Envelope.ReplyWith (new ClientMessage.ScavengeDatabaseCompleted (message.CorrelationId' result' error' sw.Elapsed' spaceSaved)); " is 136.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeIndexInitializedEvent,The length of the statement  "	var metaStreamEvent = new Event (metadataEventId' SystemEventTypes.StreamMetadata' isJson: true' data: metadata.ToJsonBytes ()' metadata: null); " is 144.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeIndexInitializedEvent,The length of the statement  "			Log.Error ("Failed to write the $maxAge of {0} days metadata for the {1} stream. Reason: {2}"' _scavengeHistoryMaxAge' SystemStreams.ScavengesStream' m.Result); " is 160.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeIndexInitializedEvent,The length of the statement  "	var indexInitializedEvent = new Event (Guid.NewGuid ()' SystemEventTypes.ScavengeIndexInitialized' true' new Dictionary<string' object> { " is 137.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeIndexInitializedEvent,The length of the statement  "	_ioDispatcher.WriteEvent (SystemStreams.ScavengesStream' ExpectedVersion.NoStream' indexInitializedEvent' SystemAccount.Principal' m => { " is 137.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeIndexInitializedEvent,The length of the statement  "			Log.Error ("Failed to write the {0} event to the {1} stream. Reason: {2}"' SystemEventTypes.ScavengeIndexInitialized' SystemStreams.ScavengesStream' m.Result); " is 159.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeStartedEvent,The length of the statement  "	var metaStreamEvent = new Event (metadataEventId' SystemEventTypes.StreamMetadata' isJson: true' data: metadata.ToJsonBytes ()' metadata: null); " is 144.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeStartedEvent,The length of the statement  "			Log.Error ("Failed to write the $maxAge of {0} days metadata for the {1} stream. Reason: {2}"' _scavengeHistoryMaxAge' streamName' m.Result); " is 141.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeStartedEvent,The length of the statement  "	var scavengeStartedEvent = new Event (Guid.NewGuid ()' SystemEventTypes.ScavengeStarted' true' new Dictionary<string' object> { " is 127.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeCompletedEvent,The length of the statement  "	var scavengeCompletedEvent = new Event (Guid.NewGuid ()' SystemEventTypes.ScavengeCompleted' true' new Dictionary<string' object> { " is 131.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeDetailEvent,The length of the statement  "	_ioDispatcher.WriteEvent (streamId' ExpectedVersion.Any' eventToWrite' SystemAccount.Principal' x => WriteScavengeDetailEventCompleted (x' eventToWrite' streamId' retryCount)); " is 176.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeIndexEvent,The length of the statement  "	_ioDispatcher.WriteEvent (SystemStreams.ScavengesStream' ExpectedVersion.Any' linkToEvent' SystemAccount.Principal' m => WriteScavengeIndexEventCompleted (m' linkToEvent' retryCount)); " is 184.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeIndexEventCompleted,The length of the statement  "			Log.Error ("Failed to write an event to the {0} stream. Retrying {1}/{2}. Reason: {3}"' SystemStreams.ScavengesStream' (MaxRetryCount - retryCount) + 1' MaxRetryCount' msg.Result); " is 180.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeIndexEventCompleted,The length of the statement  "			Log.Error ("Failed to write an event to the {0} stream. Retry limit of {1} reached. Reason: {2}"' SystemStreams.ScavengesStream' MaxRetryCount' msg.Result); " is 156.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeDetailEventCompleted,The length of the statement  "			Log.Error ("Failed to write an event to the {0} stream. Retrying {1}/{2}. Reason: {3}"' streamId' (MaxRetryCount - retryCount) + 1' MaxRetryCount' msg.Result); " is 159.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeDetailEventCompleted,The length of the statement  "			Log.Error ("Failed to write an event to the {0} stream. Retry limit of {1} reached. Reason: {2}"' streamId' MaxRetryCount' msg.Result); " is 135.
Long Statement,EventStore.Core.Services.Storage,StorageChaser,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageChaser.cs,ChaserIteration,The length of the statement  "		HistogramService.SetValue (_chaserFlushHistogram' (long)((((double)_watch.ElapsedTicks - startflush) / Stopwatch.Frequency) * 1000000000)); " is 139.
Long Statement,EventStore.Core.Services.Storage,StorageChaser,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageChaser.cs,ChaserIteration,The length of the statement  "		HistogramService.SetValue (_chaserWaitHistogram' (long)((((double)_watch.ElapsedTicks - startwait) / Stopwatch.Frequency) * 1000000000)); " is 137.
Long Statement,EventStore.Core.Services.Storage,StorageChaser,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageChaser.cs,ProcessPrepareRecord,The length of the statement  "			_masterBus.Publish (new StorageMessage.CommitAck (record.CorrelationId' record.LogPosition' record.TransactionPosition' firstEventNumber' lastEventNumber' true)); " is 162.
Long Statement,EventStore.Core.Services.Storage,StorageChaser,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageChaser.cs,ProcessCommitRecord,The length of the statement  "	_masterBus.Publish (new StorageMessage.CommitAck (record.CorrelationId' record.LogPosition' record.TransactionPosition' firstEventNumber' lastEventNumber' true)); " is 162.
Long Statement,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,EnqueueMessage,The length of the statement  "	if (message is SystemMessage.BecomeShuttingDown)// we need to handle this message on main thread to stop StorageWriterQueue " is 123.
Long Statement,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Handle,The length of the statement  "	while (Db.Config.ChaserCheckpoint.Read () < Db.Config.WriterCheckpoint.Read () && sw.Elapsed < WaitForChaserSingleIterationTimeout) { " is 133.
Long Statement,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Handle,The length of the statement  "				var res = WritePrepareWithRetry (LogRecord.Prepare (logPosition' msg.CorrelationId' evnt.EventId' transactionPosition' i' streamId' expectedVersion' flags' evnt.EventType' evnt.Data' evnt.Metadata)); " is 199.
Long Statement,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Handle,The length of the statement  "			WritePrepareWithRetry (LogRecord.Prepare (logPosition' msg.CorrelationId' Guid.NewGuid ()' logPosition' -1' streamId' commitCheck.CurrentVersion' PrepareFlags.TransactionBegin | PrepareFlags.TransactionEnd | PrepareFlags.IsCommitted' null' Empty.ByteArray' Empty.ByteArray)); " is 275.
Long Statement,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Handle,The length of the statement  "		bool softUndeleteMetastream = SystemStreams.IsMetastream (streamId) && _indexWriter.IsSoftDeleted (SystemStreams.OriginalStreamOf (streamId)); " is 142.
Long Statement,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,SoftUndeleteMetastream,The length of the statement  "	SoftUndeleteStream (origStreamId' rawMetaInfo.MetaLastEventNumber' rawMetaInfo.RawMeta' recreateFrom: _indexWriter.GetStreamLastEventNumber (origStreamId) + 1); " is 160.
Long Statement,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,SoftUndeleteStream,The length of the statement  "	var res = WritePrepareWithRetry (LogRecord.Prepare (logPosition' Guid.NewGuid ()' Guid.NewGuid ()' logPosition' 0' SystemStreams.MetastreamOf (streamId)' metaLastEventNumber' PrepareFlags.SingleWrite | PrepareFlags.IsCommitted | PrepareFlags.IsJson' SystemEventTypes.StreamMetadata' modifiedMeta' Empty.ByteArray)); " is 315.
Long Statement,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Handle,The length of the statement  "			var record = LogRecord.DeleteTombstone (Writer.Checkpoint.ReadNonFlushed ()' message.CorrelationId' eventId' message.EventStreamId' expectedVersion' PrepareFlags.IsCommitted); " is 175.
Long Statement,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Handle,The length of the statement  "			var res = WritePrepareWithRetry (LogRecord.Prepare (logPosition' message.CorrelationId' eventId' logPosition' 0' metastreamId' expectedVersion' flags' SystemEventTypes.StreamMetadata' data' null)); " is 197.
Long Statement,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Handle,The length of the statement  "		var record = LogRecord.TransactionBegin (Writer.Checkpoint.ReadNonFlushed ()' message.CorrelationId' message.EventStreamId' message.ExpectedVersion); " is 149.
Long Statement,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Handle,The length of the statement  "				var record = LogRecord.TransactionWrite (logPosition' message.CorrelationId' evnt.EventId' message.TransactionId' transactionInfo.TransactionOffset + i + 1' transactionInfo.EventStreamId' evnt.EventType' evnt.Data' evnt.Metadata' evnt.IsJson); " is 243.
Long Statement,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Handle,The length of the statement  "			var info = new TransactionInfo (transactionInfo.TransactionOffset + message.Events.Length' transactionInfo.EventStreamId); " is 122.
Long Statement,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Handle,The length of the statement  "		var record = LogRecord.TransactionEnd (Writer.Checkpoint.ReadNonFlushed ()' message.CorrelationId' Guid.NewGuid ()' message.TransactionId' transactionInfo.EventStreamId); " is 170.
Long Statement,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,CheckTransactionInfo,The length of the statement  "		Log.Error (string.Format ("Invalid transaction info found for transaction ID {0}. " + "Possibly wrong transactionId provided. TransactionOffset: {1}' EventStreamId: {2}"' transactionId' transactionInfo.TransactionOffset' transactionInfo.EventStreamId.IsEmptyString () ? "<null>" : transactionInfo.EventStreamId)); " is 313.
Long Statement,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Handle,The length of the statement  "		var commit = WriteCommitWithRetry (LogRecord.Commit (commitPos' message.CorrelationId' message.TransactionPosition' commitCheck.CurrentVersion + 1)); " is 149.
Long Statement,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Handle,The length of the statement  "		bool softUndeleteMetastream = SystemStreams.IsMetastream (commitCheck.EventStreamId) && _indexWriter.IsSoftDeleted (SystemStreams.OriginalStreamOf (commitCheck.EventStreamId)); " is 176.
Long Statement,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,ActOnCommitCheckFailure,The length of the statement  "		envelope.ReplyWith (new StorageMessage.AlreadyCommitted (correlationId' result.EventStreamId' result.StartEventNumber' result.EndEventNumber)); " is 143.
Long Statement,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,WritePrepareWithRetry,The length of the statement  "		record = new PrepareLogRecord (newPos' prepare.CorrelationId' prepare.EventId' transactionPos' prepare.TransactionOffset' prepare.EventStreamId' prepare.ExpectedVersion' prepare.TimeStamp' prepare.Flags' prepare.EventType' prepare.Data' prepare.Metadata); " is 255.
Long Statement,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,WritePrepareWithRetry,The length of the statement  "			throw new Exception (string.Format ("Second write try failed when first writing prepare at {0}' then at {1}."' prepare.LogPosition' writtenPos)); " is 145.
Long Statement,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,WriteCommitWithRetry,The length of the statement  "		var record = new CommitLogRecord (newPos' commit.CorrelationId' transactionPos' commit.TimeStamp' commit.FirstEventNumber); " is 123.
Long Statement,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,WriteCommitWithRetry,The length of the statement  "			throw new Exception (string.Format ("Second write try failed when first writing commit at {0}' then at {1}."' commit.LogPosition' writtenPos)); " is 143.
Long Statement,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Flush,The length of the statement  "		HistogramService.SetValue (_writerFlushHistogram' (long)((((double)_watch.ElapsedTicks - start) / Stopwatch.Frequency) * 1000000000)); " is 134.
Long Statement,EventStore.Core.Services.Transport.Http.Authentication,PasswordChangeNotificationReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Authentication\PasswordChangeNotificationReader.cs,Start,The length of the statement  "	_ioDispatcher.ReadBackward (UserManagementService.UserPasswordNotificationsStreamId' -1' 1' false' SystemAccount.Principal' completed => { " is 138.
Long Statement,EventStore.Core.Services.Transport.Http.Authentication,PasswordChangeNotificationReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Authentication\PasswordChangeNotificationReader.cs,Start,The length of the statement  "			throw new Exception ("Failed to initialize password change notification reader. Cannot read " + UserManagementService.UserPasswordNotificationsStreamId + " Error: " + completed.Result); " is 185.
Long Statement,EventStore.Core.Services.Transport.Http.Authentication,PasswordChangeNotificationReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Authentication\PasswordChangeNotificationReader.cs,ReadNotificationsFrom,The length of the statement  "	_ioDispatcher.ReadForward (UserManagementService.UserPasswordNotificationsStreamId' fromEventNumber' 100' false' SystemAccount.Principal' completed => { " is 152.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,ClusterWebUiController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ClusterWebUIController.cs,OnListNodeSubsystems,The length of the statement  "	http.ReplyTextContent (Codec.Json.To (_enabledNodeSubsystems)' 200' "OK"' "application/json"' null' ex => Log.InfoException (ex' "Failed to prepare main menu")); " is 161.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,ElectController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ElectController.cs,SubscribeCore,The length of the statement  "	service.RegisterAction (new ControllerAction ("/elections/viewchange"' HttpMethod.Post' SupportedCodecs' SupportedCodecs)' OnPostViewChange); " is 141.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,ElectController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ElectController.cs,SubscribeCore,The length of the statement  "	service.RegisterAction (new ControllerAction ("/elections/viewchangeproof"' HttpMethod.Post' SupportedCodecs' SupportedCodecs)' OnPostViewChangeProof); " is 151.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,ElectController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ElectController.cs,SubscribeCore,The length of the statement  "	service.RegisterAction (new ControllerAction ("/elections/prepare"' HttpMethod.Post' SupportedCodecs' SupportedCodecs)' OnPostPrepare); " is 135.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,ElectController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ElectController.cs,SubscribeCore,The length of the statement  "	service.RegisterAction (new ControllerAction ("/elections/prepareok"' HttpMethod.Post' SupportedCodecs' SupportedCodecs)' OnPostPrepareOk); " is 139.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,ElectController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ElectController.cs,SubscribeCore,The length of the statement  "	service.RegisterAction (new ControllerAction ("/elections/proposal"' HttpMethod.Post' SupportedCodecs' SupportedCodecs)' OnPostProposal); " is 137.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,ElectController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ElectController.cs,SubscribeCore,The length of the statement  "	service.RegisterAction (new ControllerAction ("/elections/accept"' HttpMethod.Post' SupportedCodecs' SupportedCodecs)' OnPostAccept); " is 133.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,ElectController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ElectController.cs,Send,The length of the statement  "	_client.Post (endPoint.ToHttpUrl ("/elections/viewchange")' Codec.Json.To (new ElectionMessageDto.ViewChangeDto (message))' Codec.Json.ContentType' r => { " is 154.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,ElectController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ElectController.cs,Send,The length of the statement  "	_client.Post (endPoint.ToHttpUrl ("/elections/viewchangeproof")' Codec.Json.To (new ElectionMessageDto.ViewChangeProofDto (message))' Codec.Json.ContentType' r => { " is 164.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,ElectController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ElectController.cs,Send,The length of the statement  "	_client.Post (endPoint.ToHttpUrl ("/elections/prepare")' Codec.Json.To (new ElectionMessageDto.PrepareDto (message))' Codec.Json.ContentType' r => { " is 148.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,ElectController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ElectController.cs,Send,The length of the statement  "	_client.Post (endPoint.ToHttpUrl ("/elections/prepareok")' Codec.Json.To (new ElectionMessageDto.PrepareOkDto (message))' Codec.Json.ContentType' r => { " is 152.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,ElectController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ElectController.cs,Send,The length of the statement  "	_client.Post (endPoint.ToHttpUrl ("/elections/proposal")' Codec.Json.To (new ElectionMessageDto.ProposalDto (message))' Codec.Json.ContentType' r => { " is 150.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,ElectController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ElectController.cs,Send,The length of the statement  "	_client.Post (endPoint.ToHttpUrl ("/elections/accept")' Codec.Json.To (new ElectionMessageDto.AcceptDto (message))' Codec.Json.ContentType' r => { " is 146.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,GossipController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\GossipController.cs,SubscribeCore,The length of the statement  "	service.RegisterAction (new ControllerAction ("/gossip"' HttpMethod.Get' Codec.NoCodecs' SupportedCodecs)' OnGetGossip); " is 120.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,GossipController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\GossipController.cs,SubscribeCore,The length of the statement  "		service.RegisterAction (new ControllerAction ("/gossip"' HttpMethod.Post' SupportedCodecs' SupportedCodecs)' OnPostGossip); " is 123.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,GossipController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\GossipController.cs,Send,The length of the statement  "	_client.Post (url' Codec.Json.To (new ClusterInfoDto (message.ClusterInfo' message.ServerEndPoint))' Codec.Json.ContentType' response => { " is 138.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,GossipController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\GossipController.cs,Send,The length of the statement  "			Publish (new GossipMessage.GossipSendFailed (string.Format ("Received HTTP status code {0}."' response.HttpStatusCode)' endPoint)); " is 131.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,GossipController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\GossipController.cs,Send,The length of the statement  "			var msg = string.Format ("Received as RESPONSE invalid ClusterInfo from [{0}]. Content-Type: {1}' Body:\n{2}."' url' response.ContentType' response.Body); " is 154.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,GossipController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\GossipController.cs,Send,The length of the statement  "			Log.Error (string.Format ("Received as RESPONSE invalid ClusterInfo from [{0}]. Content-Type: {1}."' url' response.ContentType)); " is 129.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,GossipController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\GossipController.cs,OnPostGossip,The length of the statement  "	entity.ReadTextRequestAsync (OnPostGossipRequestRead' e => Log.Debug ("Error while reading request (gossip): {0}"' e.Message)); " is 127.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,GossipController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\GossipController.cs,OnPostGossipRequestRead,The length of the statement  "		var msg = string.Format ("Received as POST invalid ClusterInfo from [{0}]. Content-Type: {1}' Body:\n{2}."' manager.RequestedUrl' manager.RequestCodec.ContentType' body); " is 170.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,GossipController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\GossipController.cs,OnPostGossipRequestRead,The length of the statement  "		Log.Error (string.Format ("Received as POST invalid ClusterInfo from [{0}]. Content-Type: {1}."' manager.RequestedUrl' manager.RequestCodec.ContentType)); " is 154.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,GossipController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\GossipController.cs,OnPostGossipRequestRead,The length of the statement  "	var sendToHttpEnvelope = new SendToHttpEnvelope (_networkSendQueue' manager' Format.SendGossip' (e' m) => Configure.Ok (e.ResponseCodec.ContentType)); " is 150.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,GossipController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\GossipController.cs,TryGetServerEndPoint,The length of the statement  "	if (IPAddress.TryParse (clusterInfoDto.ServerIp' out serverAddress) && clusterInfoDto.ServerPort > 0 && clusterInfoDto.ServerPort <= 65535) { " is 141.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,GossipController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\GossipController.cs,OnGetGossip,The length of the statement  "	var sendToHttpEnvelope = new SendToHttpEnvelope (_networkSendQueue' entity' Format.SendGossip' (e' m) => Configure.Ok (e.ResponseCodec.ContentType' Helper.UTF8NoBom' null' null' false)); " is 186.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,HistogramController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\HistogramController.cs,Subscribe,The length of the statement  "	service.RegisterAction (new ControllerAction ("/histogram/{name}"' HttpMethod.Get' Codec.NoCodecs' SupportedCodecs)' OnGetHistogram); " is 133.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,HttpHelpers,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\HttpHelpers.cs,Reply,The length of the statement  "	http.Reply (Helper.UTF8NoBom.GetBytes (response)' code' description' contentType' Helper.UTF8NoBom' headers' exception => { " is 123.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,InfoController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\InfoController.cs,Subscribe,The length of the statement  "	service.RegisterAction (new ControllerAction ("/info/options"' HttpMethod.Get' Codec.NoCodecs' SupportedCodecs)' OnGetOptions); " is 127.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,InfoController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\InfoController.cs,OnGetInfo,The length of the statement  "	})' HttpStatusCode.OK' "OK"' entity.ResponseCodec.ContentType' null' e => Log.ErrorException (e' "Error while writing HTTP response (info)")); " is 142.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,InfoController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\InfoController.cs,OnGetOptions,The length of the statement  "		}))' HttpStatusCode.OK' "OK"' entity.ResponseCodec.ContentType' null' e => Log.ErrorException (e' "error while writing HTTP response (options)")); " is 146.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,InfoController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\InfoController.cs,GetOptionsInfo,The length of the statement  "		var argumentDescriptionAttribute = property.HasAttr<ArgDescriptionAttribute> () ? property.Attr<ArgDescriptionAttribute> () : null; " is 131.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,InfoController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\InfoController.cs,Filter,The length of the statement  "		Value = namesOfValuesToExclude.Contains (y => y.Equals (x.Name' StringComparison.OrdinalIgnoreCase)) ? String.Empty : x.Value " is 125.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscribeCore,The length of the statement  "	Register (service' "/subscriptions/{stream}"' HttpMethod.Get' GetSubscriptionInfoForStream' Codec.NoCodecs' DefaultCodecs); " is 123.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscribeCore,The length of the statement  "	Register (service' "/subscriptions/{stream}/{subscription}"' HttpMethod.Put' PutSubscription' DefaultCodecs' DefaultCodecs); " is 124.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscribeCore,The length of the statement  "	Register (service' "/subscriptions/{stream}/{subscription}"' HttpMethod.Post' PostSubscription' DefaultCodecs' DefaultCodecs); " is 126.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscribeCore,The length of the statement  "	Register (service' "/subscriptions/{stream}/{subscription}"' HttpMethod.Get' GetNextNMessages' Codec.NoCodecs' AtomCodecs); " is 123.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscribeCore,The length of the statement  "	Register (service' "/subscriptions/{stream}/{subscription}?embed={embed}"' HttpMethod.Get' GetNextNMessages' Codec.NoCodecs' AtomCodecs); " is 137.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscribeCore,The length of the statement  "	Register (service' "/subscriptions/{stream}/{subscription}/{count}?embed={embed}"' HttpMethod.Get' GetNextNMessages' Codec.NoCodecs' AtomCodecs); " is 145.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscribeCore,The length of the statement  "	Register (service' "/subscriptions/{stream}/{subscription}/info"' HttpMethod.Get' GetSubscriptionInfo' Codec.NoCodecs' DefaultCodecs); " is 134.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscribeCore,The length of the statement  "	RegisterUrlBased (service' "/subscriptions/{stream}/{subscription}/nack/{messageid}?action={action}"' HttpMethod.Post' NackMessage); " is 132.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscribeCore,The length of the statement  "	RegisterUrlBased (service' "/subscriptions/{stream}/{subscription}/ack?ids={messageids}"' HttpMethod.Post' AckMessages); " is 120.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscribeCore,The length of the statement  "	RegisterUrlBased (service' "/subscriptions/{stream}/{subscription}/nack?ids={messageids}&action={action}"' HttpMethod.Post' NackMessages); " is 138.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscribeCore,The length of the statement  "	RegisterUrlBased (service' "/subscriptions/{stream}/{subscription}/replayParked"' HttpMethod.Post' ReplayParkedMessages); " is 121.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,AckMessages,The length of the statement  "	var cmd = new ClientMessage.PersistentSubscriptionAckEvents (Guid.NewGuid ()' Guid.NewGuid ()' envelope' BuildSubscriptionGroupKey (stream' groupname)' ids.ToArray ()' http.User); " is 179.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,NackMessages,The length of the statement  "	var cmd = new ClientMessage.PersistentSubscriptionNackEvents (Guid.NewGuid ()' Guid.NewGuid ()' envelope' BuildSubscriptionGroupKey (stream' groupname)' "Nacked from HTTP"' nakAction' ids.ToArray ()' http.User); " is 211.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,AckMessage,The length of the statement  "	var cmd = new ClientMessage.PersistentSubscriptionAckEvents (Guid.NewGuid ()' Guid.NewGuid ()' envelope' BuildSubscriptionGroupKey (stream' groupname)' new[] { " is 159.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,NackMessage,The length of the statement  "	var cmd = new ClientMessage.PersistentSubscriptionNackEvents (Guid.NewGuid ()' Guid.NewGuid ()' envelope' BuildSubscriptionGroupKey (stream' groupname)' "Nacked from HTTP"' nakAction' new[] { " is 191.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,ReplayParkedMessages,The length of the statement  "	var envelope = new SendToHttpEnvelope (_networkSendQueue' http' (args' message) => http.ResponseCodec.To (message)' (args' message) => { " is 136.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,ReplayParkedMessages,The length of the statement  "	var cmd = new ClientMessage.ReplayAllParkedMessages (Guid.NewGuid ()' Guid.NewGuid ()' envelope' stream' groupname' http.User); " is 127.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,PutSubscription,The length of the statement  "	var envelope = new SendToHttpEnvelope (_networkSendQueue' http' (args' message) => http.ResponseCodec.To (message)' (args' message) => { " is 136.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,PutSubscription,The length of the statement  "		return new ResponseConfiguration (code' http.ResponseCodec.ContentType' http.ResponseCodec.Encoding' new KeyValuePair<string' string> ("location"' MakeUrl (http' "/subscriptions/" + stream + "/" + groupname))); " is 210.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,PutSubscription,The length of the statement  "		var message = new ClientMessage.CreatePersistentSubscription (Guid.NewGuid ()' Guid.NewGuid ()' envelope' stream' groupname' config.ResolveLinktos' config.StartFrom' config.MessageTimeoutMilliseconds' config.ExtraStatistics' config.MaxRetryCount' config.BufferSize' config.LiveBufferSize' config.ReadBatchSize' config.CheckPointAfterMilliseconds' config.MinCheckPointCount' config.MaxCheckPointCount' config.MaxSubscriberCount' CalculateNamedConsumerStrategyForOldClients (data)' http.User' ""' ""); " is 499.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,PostSubscription,The length of the statement  "	var envelope = new SendToHttpEnvelope (_networkSendQueue' http' (args' message) => http.ResponseCodec.To (message)' (args' message) => { " is 136.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,PostSubscription,The length of the statement  "		return new ResponseConfiguration (code' http.ResponseCodec.ContentType' http.ResponseCodec.Encoding' new KeyValuePair<string' string> ("location"' MakeUrl (http' "/subscriptions/" + stream + "/" + groupname))); " is 210.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,PostSubscription,The length of the statement  "		var message = new ClientMessage.UpdatePersistentSubscription (Guid.NewGuid ()' Guid.NewGuid ()' envelope' stream' groupname' config.ResolveLinktos' config.StartFrom' config.MessageTimeoutMilliseconds' config.ExtraStatistics' config.MaxRetryCount' config.BufferSize' config.LiveBufferSize' config.ReadBatchSize' config.CheckPointAfterMilliseconds' config.MinCheckPointCount' config.MaxCheckPointCount' config.MaxSubscriberCount' CalculateNamedConsumerStrategyForOldClients (data)' http.User' ""' ""); " is 499.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,ValidateConfig,The length of the statement  "		SendBadRequest (http' string.Format ("BufferSize ({0}) must be larger than ReadBatchSize ({1})"' config.BufferSize' config.ReadBatchSize)); " is 139.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,CalculateNamedConsumerStrategyForOldClients,The length of the statement  "		namedConsumerStrategy = preferRoundRobin ? SystemConsumerStrategies.RoundRobin : SystemConsumerStrategies.DispatchToSingle; " is 123.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,DeleteSubscription,The length of the statement  "	var envelope = new SendToHttpEnvelope (_networkSendQueue' http' (args' message) => http.ResponseCodec.To (message)' (args' message) => { " is 136.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,DeleteSubscription,The length of the statement  "	var cmd = new ClientMessage.DeletePersistentSubscription (Guid.NewGuid ()' Guid.NewGuid ()' envelope' stream' groupname' http.User); " is 132.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,GetAllSubscriptionInfo,The length of the statement  "	var envelope = new SendToHttpEnvelope (_networkSendQueue' http' (args' message) => http.ResponseCodec.To (ToSummaryDto (http' message as MonitoringMessage.GetPersistentSubscriptionStatsCompleted).ToArray ())' (args' message) => StatsConfiguration (http' message)); " is 264.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,GetSubscriptionInfoForStream,The length of the statement  "	var envelope = new SendToHttpEnvelope (_networkSendQueue' http' (args' message) => http.ResponseCodec.To (ToSummaryDto (http' message as MonitoringMessage.GetPersistentSubscriptionStatsCompleted).ToArray ())' (args' message) => StatsConfiguration (http' message)); " is 264.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,GetSubscriptionInfo,The length of the statement  "	var envelope = new SendToHttpEnvelope (_networkSendQueue' http' (args' message) => http.ResponseCodec.To (ToDto (http' message as MonitoringMessage.GetPersistentSubscriptionStatsCompleted).FirstOrDefault ())' (args' message) => StatsConfiguration (http' message)); " is 264.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,GetNextNMessages,The length of the statement  "	var envelope = new SendToHttpEnvelope (_networkSendQueue' http' (args' message) => Format.ReadNextNPersistentMessagesCompleted (http' message as ClientMessage.ReadNextNPersistentMessagesCompleted' stream' groupname' count' embed)' (args' message) => { " is 251.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,GetNextNMessages,The length of the statement  "	var cmd = new ClientMessage.ReadNextNPersistentMessages (Guid.NewGuid ()' Guid.NewGuid ()' envelope' stream' groupname' count' http.User); " is 138.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,ToDto,The length of the statement  "				new RelLink (MakeUrl (manager' string.Format ("/subscriptions/{0}/{1}/info"' escapedStreamId' escapedGroupName))' "detail")' " is 124.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,ToDto,The length of the statement  "				new RelLink (MakeUrl (manager' string.Format ("/subscriptions/{0}/{1}/replayParked"' escapedStreamId' escapedGroupName))' "replayParked") " is 137.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,ToDto,The length of the statement  "			GetMessagesUri = MakeUrl (manager' string.Format ("/subscriptions/{0}/{1}/{2}"' escapedStreamId' escapedGroupName' DefaultNumberOfMessagesToGet))' " is 146.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,ToSummaryDto,The length of the statement  "				new RelLink (MakeUrl (manager' string.Format ("/subscriptions/{0}/{1}/info"' escapedStreamId' escapedGroupName))' "detail")' " is 124.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,ToSummaryDto,The length of the statement  "			GetMessagesUri = MakeUrl (manager' string.Format ("/subscriptions/{0}/{1}/{2}"' escapedStreamId' escapedGroupName' DefaultNumberOfMessagesToGet))' " is 146.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,UsersController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\UsersController.cs,SubscribeCore,The length of the statement  "	Register (service' "/users/{login}/command/reset-password"' HttpMethod.Post' PostCommandResetPassword' DefaultCodecs' DefaultCodecs); " is 133.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,UsersController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\UsersController.cs,SubscribeCore,The length of the statement  "	Register (service' "/users/{login}/command/change-password"' HttpMethod.Post' PostCommandChangePassword' DefaultCodecs' DefaultCodecs); " is 135.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,UsersController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\UsersController.cs,GetUsers,The length of the statement  "	var envelope = CreateSendToHttpWithConversionEnvelope (http' (UserManagementMessage.AllUserDetailsResult msg) => new UserManagementMessage.AllUserDetailsResultHttpFormatted (msg' s => MakeUrl (http' s))); " is 204.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,UsersController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\UsersController.cs,GetUser,The length of the statement  "	var envelope = CreateSendToHttpWithConversionEnvelope (http' (UserManagementMessage.UserDetailsResult msg) => new UserManagementMessage.UserDetailsResultHttpFormatted (msg' s => MakeUrl (http' s))); " is 198.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,UsersController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\UsersController.cs,PostUser,The length of the statement  "		return configuration.Code == HttpStatusCode.OK ? configuration.SetCreated (MakeUrl (http' "/users/" + Uri.EscapeDataString (result.LoginName))) : configuration; " is 160.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,UsersController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\UsersController.cs,PostUser,The length of the statement  "		var message = new UserManagementMessage.Create (envelope' http.User' data.LoginName' data.FullName' data.Groups' data.Password); " is 128.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,UsersController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\UsersController.cs,PostCommandChangePassword,The length of the statement  "		var message = new UserManagementMessage.ChangePassword (envelope' http.User' login' data.CurrentPassword' data.NewPassword); " is 124.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,UsersController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\UsersController.cs,CreateReplyEnvelope,The length of the statement  "	return new SendToHttpEnvelope<T> (_networkSendQueue' http' formatter ?? AutoFormatter' configurator ?? AutoConfigurator' null); " is 127.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,UsersController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\UsersController.cs,CreateSendToHttpWithConversionEnvelope,The length of the statement  "	return new SendToHttpWithConversionEnvelope<T' R> (_networkSendQueue' http' (codec' msg) => codec.To (msg)' (codec' transformed) => transformed.Success ? new ResponseConfiguration (HttpStatusCode.OK' codec.ContentType' codec.Encoding) : new ResponseConfiguration (ErrorToHttpStatusCode (transformed.Error)' codec.ContentType' codec.Encoding)' formatter); " is 354.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,UsersController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\UsersController.cs,AutoConfigurator,The length of the statement  "	return result.Success ? new ResponseConfiguration (HttpStatusCode.OK' codec.ContentType' codec.Encoding) : new ResponseConfiguration (ErrorToHttpStatusCode (result.Error)' codec.ContentType' codec.Encoding); " is 207.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AdminController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AdminController.cs,SubscribeCore,The length of the statement  "	service.RegisterAction (new ControllerAction ("/admin/shutdown"' HttpMethod.Post' Codec.NoCodecs' SupportedCodecs)' OnPostShutdown); " is 132.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AdminController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AdminController.cs,SubscribeCore,The length of the statement  "	service.RegisterAction (new ControllerAction ("/admin/scavenge"' HttpMethod.Post' Codec.NoCodecs' SupportedCodecs)' OnPostScavenge); " is 132.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AdminController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AdminController.cs,OnPostShutdown,The length of the statement  "	if (entity.User != null && (entity.User.IsInRole (SystemRoles.Admins) || entity.User.IsInRole (SystemRoles.Operations))) { " is 122.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AdminController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AdminController.cs,OnPostScavenge,The length of the statement  "	if (entity.User != null && (entity.User.IsInRole (SystemRoles.Admins) || entity.User.IsInRole (SystemRoles.Operations))) { " is 122.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,CommunicationController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\CommunicationController.cs,SendBadRequest,The length of the statement  "	httpEntityManager.ReplyStatus (HttpStatusCode.BadRequest' reason' e => Log.Debug ("Error while closing HTTP connection (bad request): {0}."' e.Message)); " is 153.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,CommunicationController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\CommunicationController.cs,SendTooBig,The length of the statement  "	httpEntityManager.ReplyStatus (HttpStatusCode.RequestEntityTooLarge' "Too large events received. Limit is 4mb"' e => Log.Debug ("Too large events received over HTTP")); " is 168.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,CommunicationController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\CommunicationController.cs,SendOk,The length of the statement  "	httpEntityManager.ReplyStatus (HttpStatusCode.OK' "OK"' e => Log.Debug ("Error while closing HTTP connection (ok): {0}."' e.Message)); " is 134.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PingController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PingController.cs,OnGetPing,The length of the statement  "	entity.ReplyTextContent (Format.TextMessage (entity' response)' HttpStatusCode.OK' "OK"' entity.ResponseCodec.ContentType' null' e => Log.ErrorException (e' "Error while writing HTTP response (ping)")); " is 202.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,StatController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\StatController.cs,SubscribeCore,The length of the statement  "	service.RegisterAction (new ControllerAction ("/stats"' HttpMethod.Get' Codec.NoCodecs' SupportedCodecs)' OnGetFreshStats); " is 123.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,StatController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\StatController.cs,SubscribeCore,The length of the statement  "	service.RegisterAction (new ControllerAction ("/stats/replication"' HttpMethod.Get' Codec.NoCodecs' SupportedCodecs)' OnGetReplicationStats); " is 141.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,StatController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\StatController.cs,SubscribeCore,The length of the statement  "	service.RegisterAction (new ControllerAction ("/stats/tcp"' HttpMethod.Get' Codec.NoCodecs' SupportedCodecs)' OnGetTcpConnectionStats); " is 135.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,StatController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\StatController.cs,SubscribeCore,The length of the statement  "	service.RegisterAction (new ControllerAction ("/stats/{*statPath}"' HttpMethod.Get' Codec.NoCodecs' SupportedCodecs)' OnGetFreshStats); " is 135.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,StatController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\StatController.cs,OnGetTcpConnectionStats,The length of the statement  "	var envelope = new SendToHttpEnvelope (_networkSendQueue' entity' Format.GetFreshTcpConnectionStatsCompleted' Configure.GetFreshTcpConnectionStatsCompleted); " is 157.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,StatController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\StatController.cs,OnGetFreshStats,The length of the statement  "	var envelope = new SendToHttpEnvelope (_networkSendQueue' entity' Format.GetFreshStatsCompleted' Configure.GetFreshStatsCompleted); " is 131.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,StatController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\StatController.cs,OnGetReplicationStats,The length of the statement  "	var envelope = new SendToHttpEnvelope (_networkSendQueue' entity' Format.GetReplicationStatsCompleted' Configure.GetReplicationStatsCompleted); " is 143.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "	Register (http' "/streams/{stream}/incoming/{guid}"' HttpMethod.Post' PostEventsIdempotent' AtomCodecsWithoutBatches' AtomCodecsWithoutBatches); " is 144.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "	Register (http' "/streams/{stream}?embed={embed}"' HttpMethod.Get' GetStreamEventsBackward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 128.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "	Register (http' "/streams/{stream}/{event}?embed={embed}"' HttpMethod.Get' GetStreamEvent' Codec.NoCodecs' DefaultCodecs); " is 122.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "	Register (http' "/streams/{stream}/{event}/{count}?embed={embed}"' HttpMethod.Get' GetStreamEventsBackward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 144.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "	Register (http' "/streams/{stream}/{event}/backward/{count}?embed={embed}"' HttpMethod.Get' GetStreamEventsBackward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 153.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "	RegisterCustom (http' "/streams/{stream}/{event}/forward/{count}?embed={embed}"' HttpMethod.Get' GetStreamEventsForward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 157.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "	Register (http' "/streams/{stream}/metadata?embed={embed}"' HttpMethod.Get' GetMetastreamEvent' Codec.NoCodecs' DefaultCodecs); " is 127.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "	Register (http' "/streams/{stream}/metadata/?embed={embed}"' HttpMethod.Get' RedirectKeepVerb' Codec.NoCodecs' DefaultCodecs); " is 126.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "	Register (http' "/streams/{stream}/metadata/{event}?embed={embed}"' HttpMethod.Get' GetMetastreamEvent' Codec.NoCodecs' DefaultCodecs); " is 135.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "	Register (http' "/streams/{stream}/metadata/{event}/{count}?embed={embed}"' HttpMethod.Get' GetMetastreamEventsBackward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 157.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "	Register (http' "/streams/{stream}/metadata/{event}/backward/{count}?embed={embed}"' HttpMethod.Get' GetMetastreamEventsBackward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 166.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "	RegisterCustom (http' "/streams/{stream}/metadata/{event}/forward/{count}?embed={embed}"' HttpMethod.Get' GetMetastreamEventsForward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 170.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "	Register (http' "/streams/$all?embed={embed}"' HttpMethod.Get' GetAllEventsBackward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 121.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "	Register (http' "/streams/$all/{position}/{count}?embed={embed}"' HttpMethod.Get' GetAllEventsBackward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 140.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "	Register (http' "/streams/$all/{position}/backward/{count}?embed={embed}"' HttpMethod.Get' GetAllEventsBackward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 149.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "	RegisterCustom (http' "/streams/$all/{position}/forward/{count}?embed={embed}"' HttpMethod.Get' GetAllEventsForward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 153.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "	Register (http' "/streams/%24all?embed={embed}"' HttpMethod.Get' GetAllEventsBackward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 123.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "	Register (http' "/streams/%24all/{position}/{count}?embed={embed}"' HttpMethod.Get' GetAllEventsBackward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 142.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "	Register (http' "/streams/%24all/{position}/backward/{count}?embed={embed}"' HttpMethod.Get' GetAllEventsBackward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 151.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "	RegisterCustom (http' "/streams/%24all/{position}/forward/{count}?embed={embed}"' HttpMethod.Get' GetAllEventsForward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 155.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetDescriptionDocument,The length of the statement  "		var accepts = manager.HttpEntity.Request.AcceptTypes == null || manager.HttpEntity.Request.AcceptTypes.Contains (ContentType.Any); " is 130.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetDescriptionDocument,The length of the statement  "		var responseMessage = manager.HttpEntity.Request.AcceptTypes == null ? "We are unable to represent the stream in the format requested." : "Description Document"; " is 161.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetDescriptionDocument,The length of the statement  "			manager.ReplyTextContent (Format.GetDescriptionDocument (manager' stream' persistentSubscriptionGroups)' responseStatusCode' responseMessage' manager.ResponseCodec.ContentType' null' e => Log.ErrorException (e' "Error while writing HTTP response")); " is 249.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetDescriptionDocument,The length of the statement  "		}' (args' message) => new ResponseConfiguration (HttpStatusCode.OK' manager.ResponseCodec.ContentType' manager.ResponseCodec.Encoding)); " is 136.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,PostEvents,The length of the statement  "		manager.ReplyTextContent ("Forwarding to idempotent URI"' HttpStatusCode.RedirectKeepVerb' "Temporary Redirect"' "text/plain"' header' e => { " is 141.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,DeleteStream,The length of the statement  "	var envelope = new SendToHttpEnvelope (_networkSendQueue' manager' Format.DeleteStreamCompleted' Configure.DeleteStreamCompleted); " is 130.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,DeleteStream,The length of the statement  "	Publish (new ClientMessage.DeleteStream (corrId' corrId' envelope' requireMaster' stream' expectedVersion' hardDelete' manager.User)); " is 134.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetStreamEventsForward,The length of the statement  "	GetStreamEventsForward (manager' stream' eventNumber' count' resolveLinkTos' requireMaster' etag' longPollTimeout' embed); " is 122.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,PostMetastreamEvent,The length of the statement  "		SendBadRequest (manager' string.Format ("Invalid request. Stream must be non-empty string and should not be metastream")); " is 122.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetMetastreamEventsBackward,The length of the statement  "	GetStreamEventsBackward (manager' SystemStreams.MetastreamOf (stream)' eventNumber' count' resolveLinkTos' requireMaster' headOfStream' embed); " is 143.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetMetastreamEventsForward,The length of the statement  "	GetStreamEventsForward (manager' SystemStreams.MetastreamOf (stream)' eventNumber' count' resolveLinkTos' requireMaster' etag' longPollTimeout' embed); " is 151.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetAllEventsBackward,The length of the statement  "	if (pos != null && pos != "head" && (!TFPos.TryParse (pos' out position) || position.PreparePosition < 0 || position.CommitPosition < 0)) { " is 139.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetAllEventsBackward,The length of the statement  "	var envelope = new SendToHttpEnvelope (_networkSendQueue' manager' (args' msg) => Format.ReadAllEventsBackwardCompleted (args' msg' embed)' (args' msg) => Configure.ReadAllEventsBackwardCompleted (args' msg' position == TFPos.HeadOfTf)); " is 237.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetAllEventsBackward,The length of the statement  "	Publish (new ClientMessage.ReadAllEventsBackward (corrId' corrId' envelope' position.CommitPosition' position.PreparePosition' count' requireMaster' true' GetETagTFPosition (manager)' manager.User)); " is 199.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetAllEventsForward,The length of the statement  "	var envelope = new SendToHttpEnvelope (_networkSendQueue' manager' (args' msg) => Format.ReadAllEventsForwardCompleted (args' msg' embed)' (args' msg) => Configure.ReadAllEventsForwardCompleted (args' msg' headOfTf: false)); " is 224.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetAllEventsForward,The length of the statement  "	Publish (new ClientMessage.ReadAllEventsForward (corrId' corrId' envelope' position.CommitPosition' position.PreparePosition' count' requireMaster' true' GetETagTFPosition (manager)' manager.User' longPollTimeout)); " is 215.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,PostEntry,The length of the statement  "		var envelope = new SendToHttpEnvelope (_networkSendQueue' manager' Format.WriteEventsCompleted' (a' m) => Configure.WriteEventsCompleted (a' m' stream)); " is 153.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,PostEntry,The length of the statement  "		var msg = new ClientMessage.WriteEvents (corrId' corrId' envelope' requireMaster' stream' expectedVersion' events' manager.User); " is 129.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetStreamEvent,The length of the statement  "	var envelope = new SendToHttpEnvelope (_networkSendQueue' manager' (args' message) => Format.EventEntry (args' message' embed)' (args' message) => Configure.EventEntry (args' message' headEvent: eventNumber == -1)); " is 215.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetStreamEvent,The length of the statement  "	Publish (new ClientMessage.ReadEvent (corrId' corrId' envelope' stream' eventNumber' resolveLinkTos' requireMaster' manager.User)); " is 131.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetStreamEventsBackward,The length of the statement  "	var envelope = new SendToHttpEnvelope (_networkSendQueue' manager' (ent' msg) => Format.GetStreamEventsBackward (ent' msg' embed' headOfStream)' (args' msg) => Configure.GetStreamEventsBackward (args' msg' headOfStream)); " is 221.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetStreamEventsBackward,The length of the statement  "	Publish (new ClientMessage.ReadStreamEventsBackward (corrId' corrId' envelope' stream' eventNumber' count' resolveLinkTos' requireMaster' GetETagStreamVersion (manager)' manager.User)); " is 185.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetStreamEventsForward,The length of the statement  "	var envelope = new SendToHttpEnvelope (_networkSendQueue' manager' (ent' msg) => Format.GetStreamEventsForward (ent' msg' embed)' Configure.GetStreamEventsForward); " is 164.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetStreamEventsForward,The length of the statement  "	Publish (new ClientMessage.ReadStreamEventsForward (corrId' corrId' envelope' stream' eventNumber' count' resolveLinkTos' requireMaster' etag' manager.User' longPollTimeout)); " is 175.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,HtmlFeedCodec,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SuitableForResponse,The length of the statement  "	return component.Type == "*" || (string.Equals (component.Type' "text"' StringComparison.OrdinalIgnoreCase) && (component.Subtype == "*" || string.Equals (component.Subtype' "html"' StringComparison.OrdinalIgnoreCase))); " is 220.
Long Statement,EventStore.Core.Services.Transport.Http,AuthenticatedHttpRequestProcessor,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\AuthenticatedHttpRequestProcessor.cs,PurgeTimedOutRequests,The length of the statement  "				req.Item2.ReplyStatus (HttpStatusCode.RequestTimeout' "Server was unable to handle request in time"' e => Log.Debug ("Error occurred while closing timed out connection (HTTP service core): {0}."' e.Message)); " is 208.
Long Statement,EventStore.Core.Services.Transport.Http,AuthenticatedHttpRequestProcessor,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\AuthenticatedHttpRequestProcessor.cs,ProcessRequest,The length of the statement  "		var match = allMatches.LastOrDefault (m => m.ControllerAction.HttpMethod.Equals (request.HttpMethod' StringComparison.OrdinalIgnoreCase)); " is 138.
Long Statement,EventStore.Core.Services.Transport.Http,AuthenticatedHttpRequestProcessor,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\AuthenticatedHttpRequestProcessor.cs,ProcessRequest,The length of the statement  "		ICodec responseCodec = SelectResponseCodec (request.QueryString' request.AcceptTypes' match.ControllerAction.SupportedResponseCodecs' match.ControllerAction.DefaultResponseCodec); " is 179.
Long Statement,EventStore.Core.Services.Transport.Http,AuthenticatedHttpRequestProcessor,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\AuthenticatedHttpRequestProcessor.cs,ProcessRequest,The length of the statement  "		Log.ErrorException (exc' "Unhandled exception while processing HTTP request at [{0}]."' string.Join ("' "' httpService.ListenPrefixes)); " is 136.
Long Statement,EventStore.Core.Services.Transport.Http,AuthenticatedHttpRequestProcessor,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\AuthenticatedHttpRequestProcessor.cs,RespondWithOptions,The length of the statement  "	entity.ReplyStatus (HttpStatusCode.OK' "OK"' e => Log.Debug ("Error while closing HTTP connection (http service core): {0}."' e.Message)); " is 138.
Long Statement,EventStore.Core.Services.Transport.Http,AuthenticatedHttpRequestProcessor,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\AuthenticatedHttpRequestProcessor.cs,MethodNotAllowed,The length of the statement  "	entity.ReplyStatus (HttpStatusCode.MethodNotAllowed' "Method Not Allowed"' e => Log.Debug ("Error while closing HTTP connection (HTTP service core): {0}."' e.Message)); " is 168.
Long Statement,EventStore.Core.Services.Transport.Http,AuthenticatedHttpRequestProcessor,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\AuthenticatedHttpRequestProcessor.cs,NotFound,The length of the statement  "	entity.ReplyStatus (HttpStatusCode.NotFound' "Not Found"' e => Log.Debug ("Error while closing HTTP connection (HTTP service core): {0}."' e.Message)); " is 151.
Long Statement,EventStore.Core.Services.Transport.Http,AuthenticatedHttpRequestProcessor,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\AuthenticatedHttpRequestProcessor.cs,InternalServerError,The length of the statement  "	entity.ReplyStatus (HttpStatusCode.InternalServerError' "Internal Server Error"' e => Log.Debug ("Error while closing HTTP connection (HTTP service core): {0}."' e.Message)); " is 174.
Long Statement,EventStore.Core.Services.Transport.Http,AuthenticatedHttpRequestProcessor,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\AuthenticatedHttpRequestProcessor.cs,BadCodec,The length of the statement  "	entity.ReplyStatus (HttpStatusCode.NotAcceptable' reason' e => Log.Debug ("Error while closing HTTP connection (HTTP service core): {0}."' e.Message)); " is 151.
Long Statement,EventStore.Core.Services.Transport.Http,AuthenticatedHttpRequestProcessor,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\AuthenticatedHttpRequestProcessor.cs,BadContentType,The length of the statement  "	entity.ReplyStatus (HttpStatusCode.UnsupportedMediaType' reason' e => Log.Debug ("Error while closing HTTP connection (HTTP service core): {0}."' e.Message)); " is 158.
Long Statement,EventStore.Core.Services.Transport.Http,AuthenticatedHttpRequestProcessor,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\AuthenticatedHttpRequestProcessor.cs,SelectResponseCodec,The length of the statement  "	return acceptTypes.Select (MediaType.TryParse).Where (x => x != null).OrderByDescending (v => v.Priority).Select (type => supported.FirstOrDefault (codec => codec.SuitableForResponse (type))).FirstOrDefault (corresponding => corresponding != null); " is 248.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,Ok,The length of the statement  "		headrs.Add (new KeyValuePair<string' string> ("Cache-Control"' cacheSeconds.HasValue ? string.Format ("max-age={0}' {1}"' cacheSeconds' isCachePublic ? "public" : "private") : "max-age=0' no-cache' must-revalidate")); " is 217.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,TemporaryRedirect,The length of the statement  "	var srcBase = new Uri (string.Format ("{0}://{1}:{2}/"' originalUrl.Scheme' originalUrl.Host' originalUrl.Port)' UriKind.Absolute); " is 131.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,TemporaryRedirect,The length of the statement  "	var targetBase = new Uri (string.Format ("{0}://{1}:{2}/"' originalUrl.Scheme' targetHost' targetPort)' UriKind.Absolute); " is 122.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,TemporaryRedirect,The length of the statement  "	return new ResponseConfiguration (HttpStatusCode.TemporaryRedirect' "Temporary Redirect"' "text/plain"' Helper.UTF8NoBom' new KeyValuePair<string' string> ("Location"' forwardUri.ToString ())); " is 193.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,NotFound,The length of the statement  "	headrs.Add (new KeyValuePair<string' string> ("Cache-Control"' cacheSeconds.HasValue ? string.Format ("max-age={0}' {1}"' cacheSeconds' isCachePublic ? "public" : "private") : "max-age=0' no-cache' must-revalidate")); " is 217.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,BadRequest,The length of the statement  "	return new ResponseConfiguration (HttpStatusCode.BadRequest' description ?? "Bad Request"' "text/plain"' Helper.UTF8NoBom); " is 123.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,InternalServerError,The length of the statement  "	return new ResponseConfiguration (HttpStatusCode.InternalServerError' description ?? "Internal Server Error"' "text/plain"' Helper.UTF8NoBom); " is 142.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,ServiceUnavailable,The length of the statement  "	return new ResponseConfiguration (HttpStatusCode.ServiceUnavailable' description ?? "Service Unavailable"' "text/plain"' Helper.UTF8NoBom); " is 139.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,NotImplemented,The length of the statement  "	return new ResponseConfiguration (HttpStatusCode.NotImplemented' description ?? "Not Implemented"' "text/plain"' Helper.UTF8NoBom); " is 131.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,Unauthorized,The length of the statement  "	return new ResponseConfiguration (HttpStatusCode.Unauthorized' description ?? "Unauthorized"' "text/plain"' Helper.UTF8NoBom); " is 126.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,EventEntry,The length of the statement  "				var etag = msg.Record.OriginalEvent != null ? GetPositionETag (msg.Record.OriginalEventNumber' codec.ContentType) : String.Empty; " is 129.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,WriteEventsCompleted,The length of the statement  "			var location = HostName.Combine (entity.RequestedUrl' "/streams/{0}/{1}"' Uri.EscapeDataString (eventStreamId)' msg.FirstEventNumber); " is 134.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,WriteEventsCompleted,The length of the statement  "			return new ResponseConfiguration (HttpStatusCode.Created' "Created"' "text/plain"' Helper.UTF8NoBom' new KeyValuePair<string' string> ("Location"' location)); " is 158.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,WriteEventsCompleted,The length of the statement  "			return new ResponseConfiguration (HttpStatusCode.BadRequest' "Wrong expected EventNumber"' "text/plain"' Helper.UTF8NoBom' new KeyValuePair<string' string> (SystemHeaders.CurrentVersion' msg.CurrentVersion.ToString ())); " is 220.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,GetFreshStatsCompleted,The length of the statement  "	return completed.Success ? Ok (entity.ResponseCodec.ContentType' Helper.UTF8NoBom' null' cacheSeconds' isCachePublic: true) : NotFound (); " is 138.
Long Statement,EventStore.Core.Services.Transport.Http,Format,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Format.cs,GetReplicationStatsCompleted,The length of the statement  "		throw new Exception (string.Format ("Unexpected type of Response message: {0}' expected: {1}"' message.GetType ().Name' typeof(ReplicationMessage.GetReplicationStatsCompleted).Name)); " is 183.
Long Statement,EventStore.Core.Services.Transport.Http,Format,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Format.cs,SendGossip,The length of the statement  "		throw new Exception (string.Format ("Unexpected type of response message: {0}' expected: {1}"' message.GetType ().Name' typeof(GossipMessage.SendGossip).Name)); " is 160.
Long Statement,EventStore.Core.Services.Transport.Http,Format,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Format.cs,SendGossip,The length of the statement  "	return sendGossip != null ? entity.ResponseCodec.To (new ClusterInfoDto (sendGossip.ClusterInfo' sendGossip.ServerEndPoint)) : string.Empty; " is 140.
Long Statement,EventStore.Core.Services.Transport.Http,Format,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Format.cs,ReadNextNPersistentMessagesCompleted,The length of the statement  "	if (msg == null || msg.Result != ClientMessage.ReadNextNPersistentMessagesCompleted.ReadNextNPersistentMessagesResult.Success) " is 126.
Long Statement,EventStore.Core.Services.Transport.Http,Format,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Format.cs,ReadNextNPersistentMessagesCompleted,The length of the statement  "	return entity.ResponseCodec.To (Convert.ToNextNPersistentMessagesFeed (msg' entity.RequestedUrl' streamId' groupName' count' embed)); " is 133.
Long Statement,EventStore.Core.Services.Transport.Http,Format,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Format.cs,GetDescriptionDocument,The length of the statement  "	return entity.ResponseCodec.To (Convert.ToDescriptionDocument (entity.RequestedUrl' streamId' persistentSubscriptionStats)); " is 124.
Long Statement,EventStore.Core.Services.Transport.Http,ControllerAction,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\ControllerAction.cs,ToString,The length of the statement  "	return string.Format ("UriTemplate: {0}' HttpMethod: {1}' SupportedCodecs: {2}' DefaultCodec: {3}"' UriTemplate' HttpMethod' SupportedResponseCodecs' DefaultResponseCodec); " is 172.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToStreamEventForwardFeed,The length of the statement  "	feed.SetUpdated (msg.Events.Length > 0 && msg.Events [0].Event != null ? msg.Events [0].Event.TimeStamp : DateTime.MinValue.ToUniversalTime ()); " is 144.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToStreamEventForwardFeed,The length of the statement  "	feed.AddLink ("first"' HostName.Combine (requestedUrl' "/streams/{0}/head/backward/{1}"' escapedStreamId' msg.MaxCount)); " is 121.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToStreamEventForwardFeed,The length of the statement  "		feed.AddLink ("last"' HostName.Combine (requestedUrl' "/streams/{0}/{1}/forward/{2}"' escapedStreamId' 0' msg.MaxCount)); " is 121.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToStreamEventForwardFeed,The length of the statement  "		feed.AddLink ("next"' HostName.Combine (requestedUrl' "/streams/{0}/{1}/backward/{2}"' escapedStreamId' nextEventNumber' msg.MaxCount)); " is 136.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToStreamEventForwardFeed,The length of the statement  "		feed.AddLink ("previous"' HostName.Combine (requestedUrl' "/streams/{0}/{1}/forward/{2}"' escapedStreamId' prevEventNumber' msg.MaxCount)); " is 139.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToStreamEventBackwardFeed,The length of the statement  "	feed.SetUpdated (msg.Events.Length > 0 && msg.Events [0].Event != null ? msg.Events [0].Event.TimeStamp : DateTime.MinValue.ToUniversalTime ()); " is 144.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToStreamEventBackwardFeed,The length of the statement  "	feed.AddLink ("first"' HostName.Combine (requestedUrl' "/streams/{0}/head/backward/{1}"' escapedStreamId' msg.MaxCount)); " is 121.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToStreamEventBackwardFeed,The length of the statement  "		feed.AddLink ("last"' HostName.Combine (requestedUrl' "/streams/{0}/{1}/forward/{2}"' escapedStreamId' 0' msg.MaxCount)); " is 121.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToStreamEventBackwardFeed,The length of the statement  "		feed.AddLink ("next"' HostName.Combine (requestedUrl' "/streams/{0}/{1}/backward/{2}"' escapedStreamId' nextEventNumber' msg.MaxCount)); " is 136.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToStreamEventBackwardFeed,The length of the statement  "	feed.AddLink ("previous"' HostName.Combine (requestedUrl' "/streams/{0}/{1}/forward/{2}"' escapedStreamId' prevEventNumber' msg.MaxCount)); " is 139.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToAllEventsForwardFeed,The length of the statement  "	feed.SetUpdated (msg.Events.Length > 0 && msg.Events [0].Event != null ? msg.Events [msg.Events.Length - 1].Event.TimeStamp : DateTime.MinValue.ToUniversalTime ()); " is 164.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToAllEventsForwardFeed,The length of the statement  "		feed.AddLink ("last"' HostName.Combine (requestedUrl' "/streams/{0}/{1}/forward/{2}"' AllEscaped' new TFPos (0' 0).AsString ()' msg.MaxCount)); " is 143.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToAllEventsForwardFeed,The length of the statement  "		feed.AddLink ("next"' HostName.Combine (requestedUrl' "/streams/{0}/{1}/backward/{2}"' AllEscaped' msg.PrevPos.AsString ()' msg.MaxCount)); " is 139.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToAllEventsForwardFeed,The length of the statement  "		feed.AddLink ("previous"' HostName.Combine (requestedUrl' "/streams/{0}/{1}/forward/{2}"' AllEscaped' msg.NextPos.AsString ()' msg.MaxCount)); " is 142.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToAllEventsBackwardFeed,The length of the statement  "	feed.SetUpdated (msg.Events.Length > 0 && msg.Events [0].Event != null ? msg.Events [0].Event.TimeStamp : DateTime.MinValue.ToUniversalTime ()); " is 144.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToAllEventsBackwardFeed,The length of the statement  "		feed.AddLink ("last"' HostName.Combine (requestedUrl' "/streams/{0}/{1}/forward/{2}"' AllEscaped' new TFPos (0' 0).AsString ()' msg.MaxCount)); " is 143.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToAllEventsBackwardFeed,The length of the statement  "		feed.AddLink ("next"' HostName.Combine (requestedUrl' "/streams/{0}/{1}/backward/{2}"' AllEscaped' msg.NextPos.AsString ()' msg.MaxCount)); " is 139.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToAllEventsBackwardFeed,The length of the statement  "	feed.AddLink ("previous"' HostName.Combine (requestedUrl' "/streams/{0}/{1}/forward/{2}"' AllEscaped' msg.PrevPos.AsString ()' msg.MaxCount)); " is 142.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToNextNPersistentMessagesFeed,The length of the statement  "	feed.SetUpdated (msg.Events.Length > 0 && msg.Events [0].Event != null ? msg.Events [msg.Events.Length - 1].Event.TimeStamp : DateTime.MinValue.ToUniversalTime ()); " is 164.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToNextNPersistentMessagesFeed,The length of the statement  "		var ackAllQueryString = String.Format ("?ids={0}"' String.Join ("'"' msg.Events.Select (x => x.OriginalEvent.EventId))); " is 120.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToNextNPersistentMessagesFeed,The length of the statement  "		var ackAll = HostName.Combine (requestedUrl' "/subscriptions/{0}/{1}/ack"' escapedStreamId' escapedGroupName) + ackAllQueryString; " is 130.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToNextNPersistentMessagesFeed,The length of the statement  "		var nackAllQueryString = String.Format ("?ids={0}"' String.Join ("'"' msg.Events.Select (x => x.OriginalEvent.EventId))); " is 121.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToNextNPersistentMessagesFeed,The length of the statement  "		var nackAll = HostName.Combine (requestedUrl' "/subscriptions/{0}/{1}/nack"' escapedStreamId' escapedGroupName) + nackAllQueryString; " is 133.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToNextNPersistentMessagesFeed,The length of the statement  "		var ack = HostName.Combine (requestedUrl' "/subscriptions/{0}/{1}/ack/{2}"' escapedStreamId' escapedGroupName' msg.Events [i].OriginalEvent.EventId); " is 149.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToNextNPersistentMessagesFeed,The length of the statement  "		var nack = HostName.Combine (requestedUrl' "/subscriptions/{0}/{1}/nack/{2}"' escapedStreamId' escapedGroupName' msg.Events [i].OriginalEvent.EventId); " is 151.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToDescriptionDocument,The length of the statement  "	descriptionDocument.SetDescription (@"The description document will be presented when no accept header is present or it was requested"); " is 136.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToDescriptionDocument,The length of the statement  "	descriptionDocument.SetStream ("/streams/" + escapedStreamId' Codec.EventStoreXmlCodec.ContentType' Codec.EventStoreJsonCodec.ContentType); " is 139.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToDescriptionDocument,The length of the statement  "			descriptionDocument.AddStreamSubscription (String.Format ("/subscriptions/{0}/{1}"' escapedStreamId' group)' Codec.CompetingXml.ContentType' Codec.CompetingJson.ContentType); " is 174.
Long Statement,EventStore.Core.Services.Transport.Http,ResponseConfiguration,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\ResponseConfiguration.cs,SetCreated,The length of the statement  "	return new ResponseConfiguration (EventStore.Transport.Http.HttpStatusCode.Created' ContentType' Encoding' headers.ToArray ()); " is 127.
Long Statement,EventStore.Core.Services.Transport.Http,HttpService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\HttpService.cs,Handle,The length of the statement  "		_inputBus.Publish (TimerMessage.Schedule.Create (UpdateInterval' _publishEnvelope' new HttpMessage.PurgeTimedOutRequests (_accessibility))); " is 140.
Long Statement,EventStore.Core.Services.Transport.Http,HttpService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\HttpService.cs,Handle,The length of the statement  "		Application.Exit (ExitCode.Error' string.Format ("HTTP async server failed to start listening at [{0}]."' string.Join ("' "' _server._listenPrefixes))); " is 152.
Long Statement,EventStore.Core.Services.Transport.Http,HttpService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\HttpService.cs,Handle,The length of the statement  "	_inputBus.Publish (new SystemMessage.ServiceShutdown (string.Format ("HttpServer [{0}]"' string.Join ("' "' _server._listenPrefixes)))); " is 136.
Long Statement,EventStore.Core.Services.Transport.Http,HttpService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\HttpService.cs,RequestReceived,The length of the statement  "	var entity = new HttpEntity (context.Request' context.Response' context.User' _logHttpRequests' _advertiseAsAddress' _advertiseAsPort); " is 135.
Long Statement,EventStore.Core.Services.Transport.Http,HttpService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\HttpService.cs,Handle,The length of the statement  "	_inputBus.Publish (TimerMessage.Schedule.Create (UpdateInterval' _publishEnvelope' new HttpMessage.PurgeTimedOutRequests (_accessibility))); " is 140.
Long Statement,EventStore.Core.Services.Transport.Tcp,InternalTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\InternalTcpDispatcher.cs,WrapCommitAck,The length of the statement  "	var dto = new ReplicationMessageDto.CommitAck (msg.LogPosition' msg.TransactionPosition' msg.FirstEventNumber' msg.LastEventNumber); " is 132.
Long Statement,EventStore.Core.Services.Transport.Tcp,InternalTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\InternalTcpDispatcher.cs,UnwrapCommitAck,The length of the statement  "	return new StorageMessage.CommitAck (package.CorrelationId' dto.LogPosition' dto.TransactionPosition' dto.FirstEventNumber' dto.LastEventNumber); " is 145.
Long Statement,EventStore.Core.Services.Transport.Tcp,InternalTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\InternalTcpDispatcher.cs,UnwrapReplicaSubscriptionRequest,The length of the statement  "	var lastEpochs = dto.LastEpochs.Safe ().Select (x => new Epoch (x.EpochPosition' x.EpochNumber' new Guid (x.EpochId))).ToArray (); " is 130.
Long Statement,EventStore.Core.Services.Transport.Tcp,InternalTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\InternalTcpDispatcher.cs,UnwrapReplicaSubscriptionRequest,The length of the statement  "	return new ReplicationMessage.ReplicaSubscriptionRequest (package.CorrelationId' envelope' connection' dto.LogPosition' new Guid (dto.ChunkId)' lastEpochs' vnodeTcpEndPoint' new Guid (dto.MasterId)' new Guid (dto.SubscriptionId)' dto.IsPromotable); " is 248.
Long Statement,EventStore.Core.Services.Transport.Tcp,InternalTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\InternalTcpDispatcher.cs,WrapSubscribeReplica,The length of the statement  "	var epochs = msg.LastEpochs.Select (x => new ReplicationMessageDto.Epoch (x.EpochPosition' x.EpochNumber' x.EpochId.ToByteArray ())).ToArray (); " is 144.
Long Statement,EventStore.Core.Services.Transport.Tcp,InternalTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\InternalTcpDispatcher.cs,WrapSubscribeReplica,The length of the statement  "	var dto = new ReplicationMessageDto.SubscribeReplica (msg.LogPosition' msg.ChunkId.ToByteArray ()' epochs' msg.ReplicaEndPoint.Address.GetAddressBytes ()' msg.ReplicaEndPoint.Port' msg.MasterId.ToByteArray ()' msg.SubscriptionId.ToByteArray ()' msg.IsPromotable); " is 263.
Long Statement,EventStore.Core.Services.Transport.Tcp,InternalTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\InternalTcpDispatcher.cs,WrapAckLogPosition,The length of the statement  "	var dto = new ReplicationMessageDto.ReplicaLogPositionAck (msg.SubscriptionId.ToByteArray ()' msg.ReplicationLogPosition); " is 122.
Long Statement,EventStore.Core.Services.Transport.Tcp,InternalTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\InternalTcpDispatcher.cs,UnwrapCreateChunk,The length of the statement  "	return new ReplicationMessage.CreateChunk (new Guid (dto.MasterId)' new Guid (dto.SubscriptionId)' chunkHeader' dto.FileSize' dto.IsCompletedChunk); " is 148.
Long Statement,EventStore.Core.Services.Transport.Tcp,InternalTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\InternalTcpDispatcher.cs,WrapCreateChunk,The length of the statement  "	var dto = new ReplicationMessageDto.CreateChunk (msg.MasterId.ToByteArray ()' msg.SubscriptionId.ToByteArray ()' msg.ChunkHeader.AsByteArray ()' msg.FileSize' msg.IsCompletedChunk); " is 181.
Long Statement,EventStore.Core.Services.Transport.Tcp,InternalTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\InternalTcpDispatcher.cs,UnwrapRawChunkBulk,The length of the statement  "	return new ReplicationMessage.RawChunkBulk (new Guid (dto.MasterId)' new Guid (dto.SubscriptionId)' dto.ChunkStartNumber' dto.ChunkEndNumber' dto.RawPosition' dto.RawBytes' dto.CompleteChunk); " is 192.
Long Statement,EventStore.Core.Services.Transport.Tcp,InternalTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\InternalTcpDispatcher.cs,WrapRawChunkBulk,The length of the statement  "	var dto = new ReplicationMessageDto.RawChunkBulk (msg.MasterId.ToByteArray ()' msg.SubscriptionId.ToByteArray ()' msg.ChunkStartNumber' msg.ChunkEndNumber' msg.RawPosition' msg.RawBytes' msg.CompleteChunk); " is 206.
Long Statement,EventStore.Core.Services.Transport.Tcp,InternalTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\InternalTcpDispatcher.cs,UnwrapDataChunkBulk,The length of the statement  "	return new ReplicationMessage.DataChunkBulk (new Guid (dto.MasterId)' new Guid (dto.SubscriptionId)' dto.ChunkStartNumber' dto.ChunkEndNumber' dto.SubscriptionPosition' dto.DataBytes' dto.CompleteChunk); " is 203.
Long Statement,EventStore.Core.Services.Transport.Tcp,InternalTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\InternalTcpDispatcher.cs,WrapDataChunkBulk,The length of the statement  "	var dto = new ReplicationMessageDto.DataChunkBulk (msg.MasterId.ToByteArray ()' msg.SubscriptionId.ToByteArray ()' msg.ChunkStartNumber' msg.ChunkEndNumber' msg.SubscriptionPosition' msg.DataBytes' msg.CompleteChunk); " is 217.
Long Statement,EventStore.Core.Services.Transport.Tcp,InternalTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\InternalTcpDispatcher.cs,WrapReplicaSubscriptionRetry,The length of the statement  "	var dto = new ReplicationMessageDto.ReplicaSubscriptionRetry (msg.MasterId.ToByteArray ()' msg.SubscriptionId.ToByteArray ()); " is 126.
Long Statement,EventStore.Core.Services.Transport.Tcp,InternalTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\InternalTcpDispatcher.cs,UnwrapReplicaSubscribed,The length of the statement  "	return new ReplicationMessage.ReplicaSubscribed (new Guid (dto.MasterId)' new Guid (dto.SubscriptionId)' dto.SubscriptionPosition' connection.RemoteEndPoint); " is 158.
Long Statement,EventStore.Core.Services.Transport.Tcp,InternalTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\InternalTcpDispatcher.cs,WrapReplicaSubscribed,The length of the statement  "	var dto = new ReplicationMessageDto.ReplicaSubscribed (msg.MasterId.ToByteArray ()' msg.SubscriptionId.ToByteArray ()' msg.SubscriptionPosition); " is 145.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpDispatcher.cs,AddUnwrapper,The length of the statement  "	_unwrappers [(byte)version] [(byte)command] = (pkg' env' user' login' pass' conn) => unwrapper (pkg' env' user' login' pass); " is 125.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpDispatcher.cs,AddUnwrapper,The length of the statement  "	_unwrappers [(byte)version] [(byte)command] = (Func<TcpPackage' IEnvelope' IPrincipal' string' string' TcpConnectionManager' Message>)unwrapper; " is 144.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpService.cs,OnConnectionAccepted,The length of the statement  "	var conn = _securityType == TcpSecurityType.Secure ? TcpConnectionSsl.CreateServerFromSocket (Guid.NewGuid ()' endPoint' socket' _certificate' verbose: true) : TcpConnection.CreateAcceptedTcpConnection (Guid.NewGuid ()' endPoint' socket' verbose: true); " is 253.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpService.cs,OnConnectionAccepted,The length of the statement  "	Log.Info ("{0} TCP connection accepted: [{1}' {2}' L{3}' {4:B}]."' _serviceType' _securityType' conn.RemoteEndPoint' conn.LocalEndPoint' conn.ConnectionId); " is 156.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpService.cs,OnConnectionAccepted,The length of the statement  "	var manager = new TcpConnectionManager (string.Format ("{0}-{1}"' _serviceType.ToString ().ToLower ()' _securityType.ToString ().ToLower ())' _serviceType' dispatcher' _publisher' conn' _networkSendQueue' _authProvider' _heartbeatInterval' _heartbeatTimeout' (m' e) => _publisher.Publish (new TcpMessage.ConnectionClosed (m' e))); " is 330.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapWriteEvents,The length of the statement  "	return new ClientMessage.WriteEvents (Guid.NewGuid ()' package.CorrelationId' envelope' dto.RequireMaster' dto.EventStreamId' dto.ExpectedVersion' events' user' login' password); " is 178.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapWriteEvents,The length of the statement  "		events [i] = new TcpClientMessageDto.NewEvent (e.EventId.ToByteArray ()' e.EventType' e.IsJson ? 1 : 0' 0' e.Data' e.Metadata); " is 127.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,CreateWriteRequestPackage,The length of the statement  "	return msg.Login != null && msg.Password != null ? new TcpPackage (command' TcpFlags.Authenticated' msg.InternalCorrId' msg.Login' msg.Password' dto.Serialize ()) : new TcpPackage (command' TcpFlags.None' msg.InternalCorrId' null' null' dto.Serialize ()); " is 255.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapWriteEventsCompleted,The length of the statement  "		return new ClientMessage.WriteEventsCompleted (package.CorrelationId' dto.FirstEventNumber' dto.LastEventNumber' dto.PreparePosition ?? -1' dto.CommitPosition ?? -1); " is 166.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapWriteEventsCompleted,The length of the statement  "	return new ClientMessage.WriteEventsCompleted (package.CorrelationId' (OperationResult)dto.Result' dto.Message' dto.CurrentVersion ?? -1); " is 138.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapWriteEventsCompleted,The length of the statement  "	var dto = new TcpClientMessageDto.WriteEventsCompleted ((TcpClientMessageDto.OperationResult)msg.Result' msg.Message' msg.FirstEventNumber' msg.LastEventNumber' msg.PreparePosition' msg.CommitPosition' msg.CurrentVersion); " is 222.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapTransactionStart,The length of the statement  "	return new ClientMessage.TransactionStart (Guid.NewGuid ()' package.CorrelationId' envelope' dto.RequireMaster' dto.EventStreamId' dto.ExpectedVersion' user' login' password); " is 175.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapTransactionStartCompleted,The length of the statement  "	return new ClientMessage.TransactionStartCompleted (package.CorrelationId' dto.TransactionId' (OperationResult)dto.Result' dto.Message); " is 136.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapTransactionStartCompleted,The length of the statement  "	var dto = new TcpClientMessageDto.TransactionStartCompleted (msg.TransactionId' (TcpClientMessageDto.OperationResult)msg.Result' msg.Message); " is 142.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapTransactionWrite,The length of the statement  "	return new ClientMessage.TransactionWrite (Guid.NewGuid ()' package.CorrelationId' envelope' dto.RequireMaster' dto.TransactionId' events' user' login' password); " is 162.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapTransactionWrite,The length of the statement  "		events [i] = new TcpClientMessageDto.NewEvent (e.EventId.ToByteArray ()' e.EventType' e.IsJson ? 1 : 0' 0' e.Data' e.Metadata); " is 127.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapTransactionWriteCompleted,The length of the statement  "	return new ClientMessage.TransactionWriteCompleted (package.CorrelationId' dto.TransactionId' (OperationResult)dto.Result' dto.Message); " is 136.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapTransactionWriteCompleted,The length of the statement  "	var dto = new TcpClientMessageDto.TransactionWriteCompleted (msg.TransactionId' (TcpClientMessageDto.OperationResult)msg.Result' msg.Message); " is 142.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapTransactionCommit,The length of the statement  "	return new ClientMessage.TransactionCommit (Guid.NewGuid ()' package.CorrelationId' envelope' dto.RequireMaster' dto.TransactionId' user' login' password); " is 155.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapTransactionCommitCompleted,The length of the statement  "		return new ClientMessage.TransactionCommitCompleted (package.CorrelationId' dto.TransactionId' dto.FirstEventNumber' dto.LastEventNumber' dto.PreparePosition ?? -1' dto.CommitPosition ?? -1); " is 191.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapTransactionCommitCompleted,The length of the statement  "	return new ClientMessage.TransactionCommitCompleted (package.CorrelationId' dto.TransactionId' (OperationResult)dto.Result' dto.Message); " is 137.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapTransactionCommitCompleted,The length of the statement  "	var dto = new TcpClientMessageDto.TransactionCommitCompleted (msg.TransactionId' (TcpClientMessageDto.OperationResult)msg.Result' msg.Message' msg.FirstEventNumber' msg.LastEventNumber' msg.PreparePosition' msg.CommitPosition); " is 227.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapDeleteStream,The length of the statement  "	return new ClientMessage.DeleteStream (Guid.NewGuid ()' package.CorrelationId' envelope' dto.RequireMaster' dto.EventStreamId' dto.ExpectedVersion' dto.HardDelete ?? false' user' login' password); " is 196.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapDeleteStream,The length of the statement  "	var dto = new TcpClientMessageDto.DeleteStream (msg.EventStreamId' msg.ExpectedVersion' msg.RequireMaster' msg.HardDelete); " is 123.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapDeleteStreamCompleted,The length of the statement  "	return new ClientMessage.DeleteStreamCompleted (package.CorrelationId' (OperationResult)dto.Result' dto.Message' dto.PreparePosition ?? -1' dto.CommitPosition ?? -1); " is 166.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapDeleteStreamCompleted,The length of the statement  "	var dto = new TcpClientMessageDto.DeleteStreamCompleted ((TcpClientMessageDto.OperationResult)msg.Result' msg.Message' msg.PreparePosition' msg.CommitPosition); " is 160.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapReadEvent,The length of the statement  "	return new ClientMessage.ReadEvent (Guid.NewGuid ()' package.CorrelationId' envelope' dto.EventStreamId' dto.EventNumber' dto.ResolveLinkTos' dto.RequireMaster' user); " is 167.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapReadEventCompleted,The length of the statement  "	var dto = new TcpClientMessageDto.ReadEventCompleted ((TcpClientMessageDto.ReadEventCompleted.ReadEventResult)msg.Result' new TcpClientMessageDto.ResolvedIndexedEvent (msg.Record.Event' msg.Record.Link)' msg.Error); " is 215.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapReadStreamEventsForward,The length of the statement  "	return new ClientMessage.ReadStreamEventsForward (Guid.NewGuid ()' package.CorrelationId' envelope' dto.EventStreamId' dto.FromEventNumber' dto.MaxCount' dto.ResolveLinkTos' dto.RequireMaster' null' user); " is 205.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapReadStreamEventsForwardCompleted,The length of the statement  "	var dto = new TcpClientMessageDto.ReadStreamEventsCompleted (ConvertToResolvedIndexedEvents (msg.Events)' (TcpClientMessageDto.ReadStreamEventsCompleted.ReadStreamResult)msg.Result' msg.NextEventNumber' msg.LastEventNumber' msg.IsEndOfStream' msg.TfLastCommitPosition' msg.Error); " is 280.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapReadStreamEventsBackward,The length of the statement  "	return new ClientMessage.ReadStreamEventsBackward (Guid.NewGuid ()' package.CorrelationId' envelope' dto.EventStreamId' dto.FromEventNumber' dto.MaxCount' dto.ResolveLinkTos' dto.RequireMaster' null' user); " is 206.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapReadStreamEventsBackwardCompleted,The length of the statement  "	var dto = new TcpClientMessageDto.ReadStreamEventsCompleted (ConvertToResolvedIndexedEvents (msg.Events)' (TcpClientMessageDto.ReadStreamEventsCompleted.ReadStreamResult)msg.Result' msg.NextEventNumber' msg.LastEventNumber' msg.IsEndOfStream' msg.TfLastCommitPosition' msg.Error); " is 280.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapReadAllEventsForward,The length of the statement  "	return new ClientMessage.ReadAllEventsForward (Guid.NewGuid ()' package.CorrelationId' envelope' dto.CommitPosition' dto.PreparePosition' dto.MaxCount' dto.ResolveLinkTos' dto.RequireMaster' null' user); " is 203.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapReadAllEventsForwardCompleted,The length of the statement  "	var dto = new TcpClientMessageDto.ReadAllEventsCompleted (msg.CurrentPos.CommitPosition' msg.CurrentPos.PreparePosition' ConvertToResolvedEvents (msg.Events)' msg.NextPos.CommitPosition' msg.NextPos.PreparePosition' (TcpClientMessageDto.ReadAllEventsCompleted.ReadAllResult)msg.Result' msg.Error); " is 297.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapReadAllEventsBackward,The length of the statement  "	return new ClientMessage.ReadAllEventsBackward (Guid.NewGuid ()' package.CorrelationId' envelope' dto.CommitPosition' dto.PreparePosition' dto.MaxCount' dto.ResolveLinkTos' dto.RequireMaster' null' user); " is 204.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapReadAllEventsBackwardCompleted,The length of the statement  "	var dto = new TcpClientMessageDto.ReadAllEventsCompleted (msg.CurrentPos.CommitPosition' msg.CurrentPos.PreparePosition' ConvertToResolvedEvents (msg.Events)' msg.NextPos.CommitPosition' msg.NextPos.PreparePosition' (TcpClientMessageDto.ReadAllEventsCompleted.ReadAllResult)msg.Result' msg.Error); " is 297.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapSubscribeToStream,The length of the statement  "	return new ClientMessage.SubscribeToStream (Guid.NewGuid ()' package.CorrelationId' envelope' connection.ConnectionId' dto.EventStreamId' dto.ResolveLinkTos' user); " is 164.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapCreatePersistentSubscription,The length of the statement  "		namedConsumerStrategy = dto.PreferRoundRobin ? SystemConsumerStrategies.RoundRobin : SystemConsumerStrategies.DispatchToSingle; " is 127.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapCreatePersistentSubscription,The length of the statement  "	return new ClientMessage.CreatePersistentSubscription (Guid.NewGuid ()' package.CorrelationId' envelope' dto.EventStreamId' dto.SubscriptionGroupName' dto.ResolveLinkTos' dto.StartFrom' dto.MessageTimeoutMilliseconds' dto.RecordStatistics' dto.MaxRetryCount' dto.BufferSize' dto.LiveBufferSize' dto.ReadBatchSize' dto.CheckpointAfterTime' dto.CheckpointMinCount' dto.CheckpointMaxCount' dto.SubscriberMaxCount' namedConsumerStrategy' user' username' password); " is 460.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapUpdatePersistentSubscription,The length of the statement  "		namedConsumerStrategy = dto.PreferRoundRobin ? SystemConsumerStrategies.RoundRobin : SystemConsumerStrategies.DispatchToSingle; " is 127.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapUpdatePersistentSubscription,The length of the statement  "	return new ClientMessage.UpdatePersistentSubscription (Guid.NewGuid ()' package.CorrelationId' envelope' dto.EventStreamId' dto.SubscriptionGroupName' dto.ResolveLinkTos' dto.StartFrom' dto.MessageTimeoutMilliseconds' dto.RecordStatistics' dto.MaxRetryCount' dto.BufferSize' dto.LiveBufferSize' dto.ReadBatchSize' dto.CheckpointAfterTime' dto.CheckpointMinCount' dto.CheckpointMaxCount' dto.SubscriberMaxCount' namedConsumerStrategy' user' username' password); " is 460.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapDeletePersistentSubscription,The length of the statement  "	return new ClientMessage.DeletePersistentSubscription (Guid.NewGuid ()' package.CorrelationId' envelope' dto.EventStreamId' dto.SubscriptionGroupName' user); " is 157.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapDeletePersistentSubscriptionCompleted,The length of the statement  "	var dto = new TcpClientMessageDto.DeletePersistentSubscriptionCompleted ((TcpClientMessageDto.DeletePersistentSubscriptionCompleted.DeletePersistentSubscriptionResult)msg.Result' msg.Reason); " is 191.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapCreatePersistentSubscriptionCompleted,The length of the statement  "	var dto = new TcpClientMessageDto.CreatePersistentSubscriptionCompleted ((TcpClientMessageDto.CreatePersistentSubscriptionCompleted.CreatePersistentSubscriptionResult)msg.Result' msg.Reason); " is 191.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapUpdatePersistentSubscriptionCompleted,The length of the statement  "	var dto = new TcpClientMessageDto.UpdatePersistentSubscriptionCompleted ((TcpClientMessageDto.UpdatePersistentSubscriptionCompleted.UpdatePersistentSubscriptionResult)msg.Result' msg.Reason); " is 191.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapConnectToPersistentSubscription,The length of the statement  "	return new ClientMessage.ConnectToPersistentSubscription (Guid.NewGuid ()' package.CorrelationId' envelope' connection.ConnectionId' dto.SubscriptionId' dto.EventStreamId' dto.AllowedInFlightMessages' connection.RemoteEndPoint.ToString ()' user); " is 246.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapPersistentSubscriptionAckEvents,The length of the statement  "	return new ClientMessage.PersistentSubscriptionAckEvents (Guid.NewGuid ()' package.CorrelationId' envelope' dto.SubscriptionId' dto.ProcessedEventIds.Select (x => new Guid (x)).ToArray ()' user); " is 195.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapPersistentSubscriptionNackEvents,The length of the statement  "	return new ClientMessage.PersistentSubscriptionNackEvents (Guid.NewGuid ()' package.CorrelationId' envelope' dto.SubscriptionId' dto.Message' (ClientMessage.PersistentSubscriptionNackEvents.NakAction)dto.Action' dto.ProcessedEventIds.Select (x => new Guid (x)).ToArray ()' user); " is 279.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapPersistentSubscriptionConfirmation,The length of the statement  "	var dto = new TcpClientMessageDto.PersistentSubscriptionConfirmation (msg.LastCommitPosition' msg.SubscriptionId' msg.LastEventNumber); " is 135.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapPersistentSubscriptionStreamEventAppeared,The length of the statement  "	var dto = new TcpClientMessageDto.PersistentSubscriptionStreamEventAppeared (new TcpClientMessageDto.ResolvedIndexedEvent (msg.Event.Event' msg.Event.Link)); " is 157.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapSubscriptionDropped,The length of the statement  "	var dto = new TcpClientMessageDto.SubscriptionDropped ((TcpClientMessageDto.SubscriptionDropped.SubscriptionDropReason)msg.Reason); " is 131.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapScavengeDatabaseResponse,The length of the statement  "	var dto = new TcpClientMessageDto.ScavengeDatabaseCompleted ((TcpClientMessageDto.ScavengeDatabaseCompleted.ScavengeResult)msg.Result' msg.Error' (int)msg.TotalTime.TotalMilliseconds' msg.TotalSpaceSaved); " is 205.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapNotHandled,The length of the statement  "	var dto = new TcpClientMessageDto.NotHandled (msg.Reason' msg.AdditionalInfo == null ? null : msg.AdditionalInfo.SerializeToArray ()); " is 134.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapNotAuthenticated,The length of the statement  "	return new TcpPackage (TcpCommand.NotAuthenticated' msg.CorrelationId' Helper.UTF8NoBom.GetBytes (msg.Reason ?? string.Empty)); " is 127.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapReadStreamEventsForwardCompletedV1,The length of the statement  "	var dto = new TcpClientMessageDto.ReadStreamEventsCompleted (ConvertToResolvedIndexedEvents (msg.Events)' (TcpClientMessageDto.ReadStreamEventsCompleted.ReadStreamResult)msg.Result' msg.NextEventNumber' StreamVersionConverter.Downgrade (msg.LastEventNumber)' msg.IsEndOfStream' msg.TfLastCommitPosition' msg.Error); " is 315.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapReadStreamEventsBackwardCompletedV1,The length of the statement  "	var dto = new TcpClientMessageDto.ReadStreamEventsCompleted (ConvertToResolvedIndexedEvents (msg.Events)' (TcpClientMessageDto.ReadStreamEventsCompleted.ReadStreamResult)msg.Result' msg.NextEventNumber' StreamVersionConverter.Downgrade (msg.LastEventNumber)' msg.IsEndOfStream' msg.TfLastCommitPosition' msg.Error); " is 315.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapReadAllEventsForwardCompletedV1,The length of the statement  "	var dto = new TcpClientMessageDto.ReadAllEventsCompleted (msg.CurrentPos.CommitPosition' msg.CurrentPos.PreparePosition' ConvertToResolvedEventsV1 (msg.Events)' msg.NextPos.CommitPosition' msg.NextPos.PreparePosition' (TcpClientMessageDto.ReadAllEventsCompleted.ReadAllResult)msg.Result' msg.Error); " is 299.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapReadAllEventsBackwardCompletedV1,The length of the statement  "	var dto = new TcpClientMessageDto.ReadAllEventsCompleted (msg.CurrentPos.CommitPosition' msg.CurrentPos.PreparePosition' ConvertToResolvedEventsV1 (msg.Events)' msg.NextPos.CommitPosition' msg.NextPos.PreparePosition' (TcpClientMessageDto.ReadAllEventsCompleted.ReadAllResult)msg.Result' msg.Error); " is 299.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapPersistentSubscriptionConfirmationV1,The length of the statement  "	var dto = new TcpClientMessageDto.PersistentSubscriptionConfirmation (msg.LastCommitPosition' msg.SubscriptionId' msg.LastEventNumber == null ? msg.LastEventNumber : StreamVersionConverter.Downgrade (msg.LastEventNumber.Value)); " is 228.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapPersistentSubscriptionStreamEventAppearedV1,The length of the statement  "	var dto = new TcpClientMessageDto.PersistentSubscriptionStreamEventAppeared (ConvertToResolvedIndexedEventV1 (msg.Event)); " is 122.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapSubscribedToStreamV1,The length of the statement  "	var dto = new TcpClientMessageDto.SubscriptionConfirmation (msg.LastCommitPosition' msg.LastEventNumber == null ? msg.LastEventNumber : StreamVersionConverter.Downgrade (msg.LastEventNumber.Value)); " is 198.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,ConvertToResolvedEventV1,The length of the statement  "		eventRecord = new TcpClientMessageDto.EventRecord (evnt.Event' StreamVersionConverter.Downgrade (evnt.Event.EventNumber)); " is 122.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,ConvertToResolvedEventV1,The length of the statement  "	return new TcpClientMessageDto.ResolvedEvent (eventRecord' linkRecord' evnt.OriginalPosition.Value.CommitPosition' evnt.OriginalPosition.Value.PreparePosition); " is 160.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,ConvertToResolvedIndexedEventV1,The length of the statement  "		eventRecord = new TcpClientMessageDto.EventRecord (evnt.Event' StreamVersionConverter.Downgrade (evnt.Event.EventNumber)); " is 122.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,OnConnectionFailed,The length of the statement  "	Log.Info ("Connection '{0}' ({1:B}) to [{2}] failed: {3}."' ConnectionName' ConnectionId' connection.RemoteEndPoint' socketError); " is 130.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,OnConnectionClosed,The length of the statement  "	Log.Info ("Connection '{0}{1}' [{2}' {3:B}] closed: {4}."' ConnectionName' ClientConnectionName.IsEmptyString () ? string.Empty : ":" + ClientConnectionName' connection.RemoteEndPoint' ConnectionId' socketError); " is 212.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,ProcessPackage,The length of the statement  "			var message = (ClientMessage.IdentifyClient)_dispatcher.UnwrapPackage (package' _tcpEnvelope' null' null' null' this' _version); " is 128.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,ProcessPackage,The length of the statement  "			Log.Info ("Connection '{0}' ({1:B}) identified by client. Client connection name: '{2}'' Client version: {3}."' ConnectionName' ConnectionId' message.ConnectionName' (ClientVersion)message.Version); " is 198.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,ProcessPackage,The length of the statement  "		Helper.EatException (() => reason = Helper.UTF8NoBom.GetString (package.Data.Array' package.Data.Offset' package.Data.Count)); " is 126.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,ProcessPackage,The length of the statement  "		var exitMessage = string.Format ("Bad request received from '{0}{1}' [{2}' L{3}' {4:B}]' will stop server. CorrelationId: {5:B}' Error: {6}."' ConnectionName' ClientConnectionName.IsEmptyString () ? string.Empty : ":" + ClientConnectionName' RemoteEndPoint' LocalEndPoint' ConnectionId' package.CorrelationId' reason.IsEmptyString () ? "<reason missing>" : reason); " is 365.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,UnwrapAndPublishPackage,The length of the statement  "		SendBadRequest (package.CorrelationId' string.Format ("Could not unwrap network package for command {0}.\n{1}"' package.Command' error)); " is 137.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,ReplyNotReady,The length of the statement  "	_tcpEnvelope.ReplyWith (new ClientMessage.NotHandled (correlationId' TcpClientMessageDto.NotHandled.NotHandledReason.NotReady' description)); " is 141.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,SendBadRequestAndClose,The length of the statement  "	SendPackage (new TcpPackage (TcpCommand.BadRequest' correlationId' Helper.UTF8NoBom.GetBytes (message))' checkQueueSize: false); " is 128.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,SendBadRequestAndClose,The length of the statement  "	Log.Error ("Closing connection '{0}{1}' [{2}' L{3}' {4:B}] due to error. Reason: {5}"' ConnectionName' ClientConnectionName.IsEmptyString () ? string.Empty : ":" + ClientConnectionName' RemoteEndPoint' LocalEndPoint' ConnectionId' message); " is 240.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,SendBadRequest,The length of the statement  "	SendPackage (new TcpPackage (TcpCommand.BadRequest' correlationId' Helper.UTF8NoBom.GetBytes (message))' checkQueueSize: false); " is 128.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,Stop,The length of the statement  "	Log.Trace ("Closing connection '{0}{1}' [{2}' L{3}' {4:B}] cleanly.{5}"' ConnectionName' ClientConnectionName.IsEmptyString () ? string.Empty : ":" + ClientConnectionName' RemoteEndPoint' LocalEndPoint' ConnectionId' reason.IsEmpty () ? string.Empty : " Reason: " + reason); " is 274.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,Handle,The length of the statement  "		_publisher.Publish (TimerMessage.Schedule.Create (_heartbeatTimeout' _weakThisEnvelope' new TcpMessage.HeartbeatTimeout (msgNum))); " is 131.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,ScheduleHeartbeat,The length of the statement  "	_publisher.Publish (TimerMessage.Schedule.Create (_heartbeatInterval' _weakThisEnvelope' new TcpMessage.Heartbeat (msgNum))); " is 125.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpPackage,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,FromArraySegment,The length of the statement  "	return new TcpPackage (command' flags' correlationId' login' pass' new ArraySegment<byte> (data.Array' data.Offset + headerSize' data.Count - headerSize)); " is 155.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpPackage,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,AsByteArray,The length of the statement  "			throw new ArgumentException (string.Format ("Login serialized length should be less than 256 bytes (but is {0})."' loginLen)); " is 126.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpPackage,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,AsByteArray,The length of the statement  "			throw new ArgumentException (string.Format ("Password serialized length should be less than 256 bytes (but is {0})."' passLen)); " is 128.
Long Statement,EventStore.Core.Services.UserManagement,AllUsersReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\AllUsersReader.cs,BeginReadUserDetails,The length of the statement  "	_ioDispatcher.ReadBackward (UserStreamPrefix + loginName' -1' 1' false' SystemAccount.Principal' result => ReadUserDetailsBackwardCompleted (loginName' result)); " is 161.
Long Statement,EventStore.Core.Services.UserManagement,AllUsersReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\AllUsersReader.cs,ReadUserDetailsBackwardCompleted,The length of the statement  "				AddLoadedUserDetails (userData.LoginName' userData.FullName' userData.Groups' userData.Disabled' new DateTimeOffset (eventRecord.TimeStamp' TimeSpan.FromHours (0))); " is 165.
Long Statement,EventStore.Core.Services.UserManagement,UserManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\UserManagementService.cs,Handle,The length of the statement  "		WriteStreamAcl (message' message.LoginName' () => WriteUserEvent (message' userData' "$UserCreated"' read.LastEventNumber' () => WriteUsersStreamEvent (userData.LoginName' completed => WriteUsersStreamCompleted (completed' message)))); " is 235.
Long Statement,EventStore.Core.Services.UserManagement,UserManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\UserManagementService.cs,Handle,The length of the statement  "	ReadUpdateWriteReply (message' data => data.SetFullName (message.FullName).SetGroups (message.Groups)' resetPasswordCache: false); " is 130.
Long Statement,EventStore.Core.Services.UserManagement,UserManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\UserManagementService.cs,Handle,The length of the statement  "	ReadUpdateCheckAnd (message' (completed' data) => _ioDispatcher.DeleteStream ("$user-" + message.LoginName' completed.FromEventNumber' false' SystemAccount.Principal' streamCompleted => WritePasswordChangedEventConditionalAnd (message' true' () => ReplyByWriteResult (message' streamCompleted.Result)))); " is 304.
Long Statement,EventStore.Core.Services.UserManagement,UserManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\UserManagementService.cs,Handle,The length of the statement  "			message.Envelope.ReplyWith (new UserManagementMessage.UserDetailsResult (new UserManagementMessage.UserData (message.LoginName' data.FullName' data.Groups' data.Disabled' new DateTimeOffset (completed.Events [0].Event.TimeStamp' TimeSpan.FromHours (0))))); " is 256.
Long Statement,EventStore.Core.Services.UserManagement,UserManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\UserManagementService.cs,Handle,The length of the statement  "	allUsersReader.Run ((error' data) => message.Envelope.ReplyWith (error == UserManagementMessage.Error.Success ? new UserManagementMessage.AllUserDetailsResult (data.OrderBy (v => v.LoginName).ToArray ()) : new UserManagementMessage.AllUserDetailsResult (error))); " is 263.
Long Statement,EventStore.Core.Services.UserManagement,UserManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\UserManagementService.cs,ReadUpdateWriteReply,The length of the statement  "			WritePasswordChangedEventConditionalAnd (message' resetPasswordCache' () => WriteUserEvent (message' updated' UserUpdated' completed.FromEventNumber' null)); " is 157.
Long Statement,EventStore.Core.Services.UserManagement,UserManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\UserManagementService.cs,WritePasswordChangedEventConditionalAnd,The length of the statement  "		BeginWritePasswordChangedEvent (message.LoginName' eventsCompleted => WritePasswordChangedEventCompleted (message' eventsCompleted' onCompleted)); " is 146.
Long Statement,EventStore.Core.Services.UserManagement,UserManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\UserManagementService.cs,BeginWritePasswordChangedEvent,The length of the statement  "	_ioDispatcher.ConfigureStreamAndWriteEvents (UserPasswordNotificationsStreamId' ExpectedVersion.Any' streamMetadata' new[] { " is 124.
Long Statement,EventStore.Core.Services.UserManagement,UserManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\UserManagementService.cs,WriteStreamAcl,The length of the statement  "	_ioDispatcher.UpdateStreamAcl ("$user-" + loginName' ExpectedVersion.Any' SystemAccount.Principal' new StreamMetadata (null' null' null' null' null' new StreamAcl (null' SystemRoles.Admins' SystemRoles.Admins' null' SystemRoles.Admins))' onCompleted); " is 251.
Long Statement,EventStore.Core.Services.UserManagement,UserManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\UserManagementService.cs,WriteUserEvent,The length of the statement  "	WriteUserEvent (userData' eventType' expectedVersion' completed => WriteUserCreatedCompleted (completed' message' after)); " is 122.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,CreateFSM,The length of the statement  "	var stm = new VNodeFSMBuilder (() => _state).InAnyState ().When<SystemMessage.StateChangeMessage> ().Do (m => Application.Exit (ExitCode.Error' string.Format ("{0} message was unhandled in {1}."' m.GetType ().Name' GetType ().Name))).When<UserManagementMessage.UserManagementServiceInitialized> ().Do (Handle).When<SystemMessage.SubSystemInitialized> ().Do (Handle).When<SystemMessage.SystemCoreReady> ().Do (Handle).InState (VNodeState.Initializing).When<SystemMessage.SystemInit> ().Do (Handle).When<SystemMessage.SystemStart> ().Do (Handle).When<SystemMessage.ServiceInitialized> ().Do (Handle).When<ClientMessage.ScavengeDatabase> ().Ignore ().WhenOther ().ForwardTo (_outputBus).InState (VNodeState.Unknown).WhenOther ().ForwardTo (_outputBus).InStates (VNodeState.Initializing' VNodeState.Master' VNodeState.PreMaster' VNodeState.PreReplica' VNodeState.CatchingUp' VNodeState.Clone' VNodeState.Slave).When<SystemMessage.BecomeUnknown> ().Do (Handle).InAllStatesExcept (VNodeState.Unknown' VNodeState.PreReplica' VNodeState.CatchingUp' VNodeState.Clone' VNodeState.Slave' VNodeState.Master).When<ClientMessage.ReadRequestMessage> ().Do (msg => DenyRequestBecauseNotReady (msg.Envelope' msg.CorrelationId)).InAllStatesExcept (VNodeState.Master' VNodeState.PreReplica' VNodeState.CatchingUp' VNodeState.Clone' VNodeState.Slave).When<ClientMessage.WriteRequestMessage> ().Do (msg => DenyRequestBecauseNotReady (msg.Envelope' msg.CorrelationId)).InState (VNodeState.Master).When<ClientMessage.ReadEvent> ().ForwardTo (_outputBus).When<ClientMessage.ReadStreamEventsForward> ().ForwardTo (_outputBus).When<ClientMessage.ReadStreamEventsBackward> ().ForwardTo (_outputBus).When<ClientMessage.ReadAllEventsForward> ().ForwardTo (_outputBus).When<ClientMessage.ReadAllEventsBackward> ().ForwardTo (_outputBus).When<ClientMessage.WriteEvents> ().ForwardTo (_outputBus).When<ClientMessage.TransactionStart> ().ForwardTo (_outputBus).When<ClientMessage.TransactionWrite> ().ForwardTo (_outputBus).When<ClientMessage.TransactionCommit> ().ForwardTo (_outputBus).When<ClientMessage.DeleteStream> ().ForwardTo (_outputBus).When<ClientMessage.CreatePersistentSubscription> ().ForwardTo (_outputBus).When<ClientMessage.ConnectToPersistentSubscription> ().ForwardTo (_outputBus).When<ClientMessage.UpdatePersistentSubscription> ().ForwardTo (_outputBus).When<ClientMessage.DeletePersistentSubscription> ().ForwardTo (_outputBus).InStates (VNodeState.PreReplica' VNodeState.CatchingUp' VNodeState.Clone' VNodeState.Slave' VNodeState.Unknown).When<ClientMessage.ReadEvent> ().Do (HandleAsNonMaster).When<ClientMessage.ReadStreamEventsForward> ().Do (HandleAsNonMaster).When<ClientMessage.ReadStreamEventsBackward> ().Do (HandleAsNonMaster).When<ClientMessage.ReadAllEventsForward> ().Do (HandleAsNonMaster).When<ClientMessage.ReadAllEventsBackward> ().Do (HandleAsNonMaster).When<ClientMessage.CreatePersistentSubscription> ().Do (HandleAsNonMaster).When<ClientMessage.ConnectToPersistentSubscription> ().Do (HandleAsNonMaster).When<ClientMessage.UpdatePersistentSubscription> ().Do (HandleAsNonMaster).When<ClientMessage.DeletePersistentSubscription> ().Do (HandleAsNonMaster).InStates (VNodeState.PreReplica' VNodeState.CatchingUp' VNodeState.Clone' VNodeState.Slave).When<ClientMessage.WriteEvents> ().Do (HandleAsNonMaster).When<ClientMessage.TransactionStart> ().Do (HandleAsNonMaster).When<ClientMessage.TransactionWrite> ().Do (HandleAsNonMaster).When<ClientMessage.TransactionCommit> ().Do (HandleAsNonMaster).When<ClientMessage.DeleteStream> ().Do (HandleAsNonMaster).InAnyState ().When<ClientMessage.NotHandled> ().ForwardTo (_outputBus).When<ClientMessage.ReadEventCompleted> ().ForwardTo (_outputBus).When<ClientMessage.ReadStreamEventsForwardCompleted> ().ForwardTo (_outputBus).When<ClientMessage.ReadStreamEventsBackwardCompleted> ().ForwardTo (_outputBus).When<ClientMessage.ReadAllEventsForwardCompleted> ().ForwardTo (_outputBus).When<ClientMessage.ReadAllEventsBackwardCompleted> ().ForwardTo (_outputBus).When<ClientMessage.WriteEventsCompleted> ().ForwardTo (_outputBus).When<ClientMessage.TransactionStartCompleted> ().ForwardTo (_outputBus).When<ClientMessage.TransactionWriteCompleted> ().ForwardTo (_outputBus).When<ClientMessage.TransactionCommitCompleted> ().ForwardTo (_outputBus).When<ClientMessage.DeleteStreamCompleted> ().ForwardTo (_outputBus).InAllStatesExcept (VNodeState.Initializing' VNodeState.ShuttingDown' VNodeState.Shutdown).When<ElectionMessage.ElectionsDone> ().Do (Handle).InStates (VNodeState.Unknown' VNodeState.PreReplica' VNodeState.CatchingUp' VNodeState.Clone' VNodeState.Slave' VNodeState.PreMaster' VNodeState.Master).When<SystemMessage.BecomePreReplica> ().Do (Handle).When<SystemMessage.BecomePreMaster> ().Do (Handle).InStates (VNodeState.PreReplica' VNodeState.CatchingUp' VNodeState.Clone' VNodeState.Slave).When<GossipMessage.GossipUpdated> ().Do (HandleAsNonMaster).When<SystemMessage.VNodeConnectionLost> ().Do (Handle).InAllStatesExcept (VNodeState.PreReplica' VNodeState.PreMaster).When<SystemMessage.WaitForChaserToCatchUp> ().Ignore ().When<SystemMessage.ChaserCaughtUp> ().Ignore ().InState (VNodeState.PreReplica).When<SystemMessage.BecomeCatchingUp> ().Do (Handle).When<SystemMessage.WaitForChaserToCatchUp> ().Do (Handle).When<SystemMessage.ChaserCaughtUp> ().Do (HandleAsPreReplica).When<ReplicationMessage.ReconnectToMaster> ().Do (Handle).When<ReplicationMessage.SubscribeToMaster> ().Do (Handle).When<ReplicationMessage.ReplicaSubscriptionRetry> ().Do (Handle).When<ReplicationMessage.ReplicaSubscribed> ().Do (Handle).WhenOther ().ForwardTo (_outputBus).InAllStatesExcept (VNodeState.PreReplica).When<ReplicationMessage.ReconnectToMaster> ().Ignore ().When<ReplicationMessage.SubscribeToMaster> ().Ignore ().When<ReplicationMessage.ReplicaSubscriptionRetry> ().Ignore ().When<ReplicationMessage.ReplicaSubscribed> ().Ignore ().InStates (VNodeState.CatchingUp' VNodeState.Clone' VNodeState.Slave).When<ReplicationMessage.CreateChunk> ().Do (ForwardReplicationMessage).When<ReplicationMessage.RawChunkBulk> ().Do (ForwardReplicationMessage).When<ReplicationMessage.DataChunkBulk> ().Do (ForwardReplicationMessage).When<ReplicationMessage.AckLogPosition> ().ForwardTo (_outputBus).WhenOther ().ForwardTo (_outputBus).InAllStatesExcept (VNodeState.CatchingUp' VNodeState.Clone' VNodeState.Slave).When<ReplicationMessage.CreateChunk> ().Ignore ().When<ReplicationMessage.RawChunkBulk> ().Ignore ().When<ReplicationMessage.DataChunkBulk> ().Ignore ().When<ReplicationMessage.AckLogPosition> ().Ignore ().InState (VNodeState.CatchingUp).When<ReplicationMessage.CloneAssignment> ().Do (Handle).When<ReplicationMessage.SlaveAssignment> ().Do (Handle).When<SystemMessage.BecomeClone> ().Do (Handle).When<SystemMessage.BecomeSlave> ().Do (Handle).InState (VNodeState.Clone).When<ReplicationMessage.SlaveAssignment> ().Do (Handle).When<SystemMessage.BecomeSlave> ().Do (Handle).InState (VNodeState.Slave).When<ReplicationMessage.CloneAssignment> ().Do (Handle).When<SystemMessage.BecomeClone> ().Do (Handle).InStates (VNodeState.PreMaster' VNodeState.Master).When<GossipMessage.GossipUpdated> ().Do (HandleAsMaster).When<ReplicationMessage.ReplicaSubscriptionRequest> ().ForwardTo (_outputBus).When<ReplicationMessage.ReplicaLogPositionAck> ().ForwardTo (_outputBus).InAllStatesExcept (VNodeState.PreMaster' VNodeState.Master).When<ReplicationMessage.ReplicaSubscriptionRequest> ().Ignore ().InState (VNodeState.PreMaster).When<SystemMessage.BecomeMaster> ().Do (Handle).When<SystemMessage.WaitForChaserToCatchUp> ().Do (Handle).When<SystemMessage.ChaserCaughtUp> ().Do (HandleAsPreMaster).WhenOther ().ForwardTo (_outputBus).InState (VNodeState.Master).When<SystemMessage.NoQuorumMessage> ().Do (Handle).When<StorageMessage.WritePrepares> ().ForwardTo (_outputBus).When<StorageMessage.WriteDelete> ().ForwardTo (_outputBus).When<StorageMessage.WriteTransactionStart> ().ForwardTo (_outputBus).When<StorageMessage.WriteTransactionData> ().ForwardTo (_outputBus).When<StorageMessage.WriteTransactionPrepare> ().ForwardTo (_outputBus).When<StorageMessage.WriteCommit> ().ForwardTo (_outputBus).WhenOther ().ForwardTo (_outputBus).InAllStatesExcept (VNodeState.Master).When<SystemMessage.NoQuorumMessage> ().Ignore ().When<StorageMessage.WritePrepares> ().Ignore ().When<StorageMessage.WriteDelete> ().Ignore ().When<StorageMessage.WriteTransactionStart> ().Ignore ().When<StorageMessage.WriteTransactionData> ().Ignore ().When<StorageMessage.WriteTransactionPrepare> ().Ignore ().When<StorageMessage.WriteCommit> ().Ignore ().InAllStatesExcept (VNodeState.ShuttingDown' VNodeState.Shutdown).When<ClientMessage.RequestShutdown> ().Do (Handle).When<SystemMessage.BecomeShuttingDown> ().Do (Handle).InState (VNodeState.ShuttingDown).When<SystemMessage.BecomeShutdown> ().Do (Handle).When<SystemMessage.ShutdownTimeout> ().Do (Handle).InStates (VNodeState.ShuttingDown' VNodeState.Shutdown).When<SystemMessage.ServiceShutdown> ().Do (Handle).WhenOther ().ForwardTo (_outputBus).Build (); " is 9029.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,Handle,The length of the statement  "	Log.Info ("========== [{0}] PRE-REPLICA STATE' WAITING FOR CHASER TO CATCH UP... MASTER IS [{1}'{2:B}]"' _nodeInfo.InternalHttp' _master.InternalHttp' _master.InstanceId); " is 171.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,Handle,The length of the statement  "	Log.Info ("========== [{0}] IS CATCHING UP... MASTER IS [{1}'{2:B}]"' _nodeInfo.InternalHttp' _master.InternalHttp' _master.InstanceId); " is 136.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,Handle,The length of the statement  "	Log.Info ("========== [{0}] IS CLONE... MASTER IS [{1}'{2:B}]"' _nodeInfo.InternalHttp' _master.InternalHttp' _master.InstanceId); " is 130.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,Handle,The length of the statement  "	Log.Info ("========== [{0}] IS SLAVE... MASTER IS [{1}'{2:B}]"' _nodeInfo.InternalHttp' _master.InternalHttp' _master.InstanceId); " is 130.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,Handle,The length of the statement  "	_mainQueue.Publish (TimerMessage.Schedule.Create (ShutdownTimeout' _publishEnvelope' new SystemMessage.ShutdownTimeout ())); " is 124.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,HandleAsNonMaster,The length of the statement  "	var timeoutMessage = new ClientMessage.WriteEventsCompleted (message.CorrelationId' OperationResult.ForwardTimeout' "Forwarding timeout"); " is 138.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,HandleAsNonMaster,The length of the statement  "	var timeoutMessage = new ClientMessage.TransactionStartCompleted (message.CorrelationId' -1' OperationResult.ForwardTimeout' "Forwarding timeout"); " is 147.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,HandleAsNonMaster,The length of the statement  "	var timeoutMessage = new ClientMessage.TransactionWriteCompleted (message.CorrelationId' message.TransactionId' OperationResult.ForwardTimeout' "Forwarding timeout"); " is 166.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,HandleAsNonMaster,The length of the statement  "	var timeoutMessage = new ClientMessage.TransactionCommitCompleted (message.CorrelationId' message.TransactionId' OperationResult.ForwardTimeout' "Forwarding timeout"); " is 167.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,HandleAsNonMaster,The length of the statement  "	var timeoutMessage = new ClientMessage.DeleteStreamCompleted (message.CorrelationId' OperationResult.ForwardTimeout' "Forwarding timeout"' -1' -1); " is 147.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,DenyRequestBecauseNotMaster,The length of the statement  "	envelope.ReplyWith (new ClientMessage.NotHandled (correlationId' TcpClientMessageDto.NotHandled.NotHandledReason.NotMaster' new TcpClientMessageDto.NotHandled.MasterInfo (master.ExternalTcp' master.ExternalSecureTcp' master.ExternalHttp))); " is 240.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,DenyRequestBecauseNotReady,The length of the statement  "	envelope.ReplyWith (new ClientMessage.NotHandled (correlationId' TcpClientMessageDto.NotHandled.NotHandledReason.NotReady' null)); " is 130.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,Handle,The length of the statement  "		var msg = _state == VNodeState.PreReplica ? (Message)new ReplicationMessage.ReconnectToMaster (_stateCorrelationId' _master) : new SystemMessage.BecomePreReplica (_stateCorrelationId' _master); " is 193.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,HandleAsNonMaster,The length of the statement  "		Log.Debug ("There is NO MASTER or MASTER is DEAD according to GOSSIP. Starting new elections. MASTER: [{0}]."' _master); " is 120.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,Handle,The length of the statement  "		Log.Info ("========== [{0}] SLAVE ASSIGNMENT RECEIVED FROM [{1}'{2}'{3:B}]."' _nodeInfo.InternalHttp' _master.InternalTcp' _master.InternalSecureTcp == null ? "n/a" : _master.InternalSecureTcp.ToString ()' message.MasterId); " is 224.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,Handle,The length of the statement  "		Log.Info ("========== [{0}] CLONE ASSIGNMENT RECEIVED FROM [{1}'{2}'{3:B}]."' _nodeInfo.InternalHttp' _master.InternalTcp' _master.InternalSecureTcp == null ? "n/a" : _master.InternalSecureTcp.ToString ()' message.MasterId); " is 224.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,IsLegitimateReplicationMessage,The length of the statement  "		Log.Trace ("Ignoring {0} because SubscriptionId {1:B} is wrong. Current SubscriptionId is {2:B}."' message.GetType ().Name' message.SubscriptionId' _subscriptionId); " is 165.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,IsLegitimateReplicationMessage,The length of the statement  "		var msg = string.Format ("{0} message passed SubscriptionId check' but master is either null or wrong. " + "Message.Master: [{1:B}]' VNode Master: {2}."' message.GetType ().Name' message.MasterId' _master); " is 206.
Long Statement,EventStore.Core.Services.VNode,MessageForwardingProxy,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\MessageForwardingProxy.cs,Register,The length of the statement  "	_forwardings.AddOrUpdate (internalCorrId' new Forwarding (clientCorrId' envelope' _stopwatch.Elapsed + timeout' timeoutMessage)' (x' y) => { " is 140.
Long Statement,EventStore.Core.Services.VNode,MessageForwardingProxy,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\MessageForwardingProxy.cs,Register,The length of the statement  "		throw new Exception (string.Format ("Forwarding for InternalCorrId {0:B} (ClientCorrId {1:B}) already exists."' internalCorrId' clientCorrId)); " is 143.
Long Statement,EventStore.Core.Services.VNode,VNodeFSMBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\VNodeFSMBuilder.cs,AddHandler,The length of the statement  "		throw new InvalidOperationException (string.Format ("Handler already defined for state {0} and message {1}"' state' typeof(TActualMessage).FullName)); " is 150.
Long Statement,EventStore.Core.Settings,SingleVNodeSettings,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Settings\VNodeSettings.cs,ToString,The length of the statement  "	return string.Format ("ExternalTcpEndPoint: {0}'\n" + "ExternalSecureTcpEndPoint: {1}'\n" + "ExternalHttpEndPoint: {2}'\n" + "HttpPrefixes: {3}'\n" + "EnableTrustedAuth: {4}'\n" + "Certificate: {5}'\n" + "WorkerThreads: {6}\n" + "MinFlushDelay: {7}\n" + "PrepareTimeout: {8}\n" + "CommitTimeout: {9}\n" + "StatsPeriod: {10}\n" + "StatsStorage: {11}"' ExternalTcpEndPoint' ExternalSecureTcpEndPoint == null ? "n/a" : ExternalSecureTcpEndPoint.ToString ()' ExternalHttpEndPoint' string.Join ("' "' HttpPrefixes)' EnableTrustedAuth' Certificate == null ? "n/a" : Certificate.ToString (verbose: true)' WorkerThreads' MinFlushDelay' PrepareTimeout' CommitTimeout' StatsPeriod' StatsStorage); " is 686.
Long Statement,EventStore.Core.TransactionLog.Checkpoint,MemoryMappedFileCheckpoint,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Checkpoint\MemoryMappedFileCheckpoint.cs,Flush,The length of the statement  "	//                throw new Exception(string.Format("FlushFileBuffers failed with err: {0}"' Marshal.GetLastWin32Error())); " is 123.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkDbTruncator,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDbTruncator.cs,TruncateDb,The length of the statement  "		throw new Exception (string.Format ("During truncation of DB excessive TFChunks were found:\n{0}."' string.Join ("\n"' excessiveChunks))); " is 138.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkDbTruncator,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDbTruncator.cs,TruncateDb,The length of the statement  "			Log.Info ("Setting TruncateCheckpoint to {0} and deleting ALL chunks from #{1} inclusively " + "as truncation position is in the middle of scavenged chunk."' truncateChk' newLastChunkHeader.ChunkStartNumber); " is 208.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkDbTruncator,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDbTruncator.cs,TruncateChunkAndFillWithZeros,The length of the statement  "	if (chunkHeader.IsScavenged || chunkHeader.ChunkStartNumber != chunkHeader.ChunkEndNumber || truncateChk < chunkHeader.ChunkStartPosition || truncateChk >= chunkHeader.ChunkEndPosition) { " is 187.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkDbTruncator,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDbTruncator.cs,TruncateChunkAndFillWithZeros,The length of the statement  "		throw new Exception (string.Format ("Chunk #{0}-{1} ({2}) is not correct unscavenged chunk. TruncatePosition: {3}' ChunkHeader: {4}."' chunkHeader.ChunkStartNumber' chunkHeader.ChunkEndNumber' chunkFilename' truncateChk' chunkHeader)); " is 235.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkBulkReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkBulkReader.cs,SetRawPosition,The length of the statement  "		throw new ArgumentOutOfRangeException ("rawPosition"' string.Format ("Raw position {0} is out of bounds."' rawPosition)); " is 121.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkBulkReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkBulkReader.cs,SetDataPosition,The length of the statement  "		throw new ArgumentOutOfRangeException ("dataPosition"' string.Format ("Data position {0} is out of bounds."' dataPosition)); " is 124.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkBulkReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkBulkReader.cs,ReadNextDataBytes,The length of the statement  "	return new BulkReadResult (oldPos' bytesRead' isEof: _chunk.IsReadOnly && oldPos + bytesRead == _chunk.PhysicalDataSize); " is 121.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,Scavenge,The length of the statement  "	Log.Trace ("SCAVENGING: started scavenging of DB. Chunks count at start: {0}. Options: alwaysKeepScavenged = {1}' mergeChunks = {2}"' _db.Manager.ChunksCount' alwaysKeepScavenged' mergeChunks); " is 193.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,Scavenge,The length of the statement  "			Log.Trace ("SCAVENGING: merge pass #{0} completed in {1}. {2} merged."' passNum' sw.Elapsed' mergedSomething ? "Some chunks" : "Nothing"); " is 138.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ScavengeChunks,The length of the statement  "		newChunk = TFChunk.TFChunk.CreateNew (tmpChunkPath' _db.Config.ChunkSize' chunkStartNumber' chunkEndNumber' isScavenged: true' inMem: _db.Config.InMemDb' unbuffered: _db.Config.Unbuffered' writethrough: _db.Config.WriteThrough); " is 228.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ScavengeChunks,The length of the statement  "		Log.ErrorException (exc' "IOException during creating new chunk for scavenging purposes. Stopping scavenging process..."); " is 122.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ScavengeChunks,The length of the statement  "		var oldSize = oldChunks.Sum (x => (long)x.PhysicalDataSize + x.ChunkFooter.MapSize + ChunkHeader.Size + ChunkFooter.Size); " is 122.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ScavengeChunks,The length of the statement  "		var newSize = (long)newChunk.PhysicalDataSize + PosMap.FullSize * positionMapping.Count + ChunkHeader.Size + ChunkFooter.Size; " is 126.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ScavengeChunks,The length of the statement  "			Log.Trace ("New chunk: {0} --> #{1}-{2} ({3})."' Path.GetFileName (tmpChunkPath)' chunkStartNumber' chunkEndNumber' Path.GetFileName (chunk.FileName)); " is 151.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ScavengeChunks,The length of the statement  "			Log.Trace ("But switching was prevented for new chunk: #{0}-{1} ({2})."' chunkStartNumber' chunkEndNumber' Path.GetFileName (tmpChunkPath)); " is 140.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ScavengeChunks,The length of the statement  "		Log.Info ("Got FileBeingDeletedException exception during scavenging' that probably means some chunks were re-replicated."); " is 124.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ScavengeChunks,The length of the statement  "		Log.Info ("Got exception while scavenging chunk: #{0}-{1}. This chunk will be skipped\n" + "Exception: {2}."' chunkStartNumber' chunkEndNumber' ex.ToString ()); " is 160.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,DeleteTempChunk,The length of the statement  "			Log.Error ("Failed to delete the temp chunk. Retrying {0}/{1}. Reason: {2}"' MaxRetryCount - retries' MaxRetryCount' ex); " is 121.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,WriteScavengeChunkCompletedEvent,The length of the statement  "	_ioDispatcher.WriteEvent (streamId' ExpectedVersion.Any' eventToWrite' SystemAccount.Principal' m => WriteScavengeChunkCompletedEventCompleted (m' streamId' eventToWrite' retryCount)); " is 184.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,WriteScavengeChunkCompletedEventCompleted,The length of the statement  "			Log.Error ("Failed to write an event to the {0} stream. Retrying {1}/{2}. Reason: {3}"' streamId' (MaxRetryCount - retryCount) + 1' MaxRetryCount' msg.Result); " is 159.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,WriteScavengeChunkCompletedEventCompleted,The length of the statement  "			Log.Error ("Failed to write an event to the {0} stream. Retry limit of {1} reached. Reason: {2}"' streamId' MaxRetryCount' msg.Result); " is 135.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ShouldKeepPrepare,The length of the statement  "	bool isCommitted = commits.TryGetValue (prepare.TransactionPosition' out commitInfo) || prepare.Flags.HasAnyOf (PrepareFlags.IsCommitted); " is 138.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ShouldKeepPrepare,The length of the statement  "			Log.Info ("Removing hard deleted stream tombstone for stream {0} at position {1}"' prepare.EventStreamId' prepare.TransactionPosition); " is 135.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ShouldKeepPrepare,The length of the statement  "	var eventNumber = prepare.Flags.HasAnyOf (PrepareFlags.IsCommitted) ? prepare.ExpectedVersion + 1 // IsCommitted prepares always have explicit expected version " is 159.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ShouldKeepPrepare,The length of the statement  "	bool canRemove = (meta.MaxCount.HasValue && eventNumber < lastEventNumber - meta.MaxCount.Value + 1) || (meta.TruncateBefore.HasValue && eventNumber < meta.TruncateBefore.Value) || (meta.MaxAge.HasValue && prepare.TimeStamp < DateTime.UtcNow - meta.MaxAge.Value); " is 263.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,IsSoftDeletedTempStreamWithinSameChunk,The length of the statement  "	var allInChunk = _tableIndex.TryGetOldestEntry (sh' out e) && e.Position >= chunkStart && e.Position < chunkEnd && _tableIndex.TryGetLatestEntry (sh' out e) && e.Position >= chunkStart && e.Position < chunkEnd && _tableIndex.TryGetOldestEntry (msh' out e) && e.Position >= chunkStart && e.Position < chunkEnd && _tableIndex.TryGetLatestEntry (msh' out e) && e.Position >= chunkStart && e.Position < chunkEnd; " is 408.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,WriteRecord,The length of the statement  "		throw new Exception (string.Format ("Unable to append record during scavenging. Scavenge position: {0}' Record: {1}."' writeResult.OldPosition' record)); " is 153.
Long Statement,EventStore.Core.TransactionLog.Chunks,ChunkHeader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\ChunkHeader.cs,GetLocalLogPosition,The length of the statement  "		throw new Exception (string.Format ("globalLogicalPosition {0} is out of chunk logical positions [{1}' {2}]."' globalLogicalPosition' ChunkStartPosition' ChunkEndPosition)); " is 173.
Long Statement,EventStore.Core.TransactionLog.Chunks,ChunkHeader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\ChunkHeader.cs,ToString,The length of the statement  "	return string.Format ("Version: {0}' ChunkSize: {1}' ChunkStartNumber: {2}' ChunkEndNumber: {3}' IsScavenged: {4}' ChunkId: {5}\n" + "ChunkStartPosition: {6}' ChunkEndPosition: {7}' ChunkFullSize: {8}"' Version' ChunkSize' ChunkStartNumber' ChunkEndNumber' IsScavenged' ChunkId' ChunkStartPosition' ChunkEndPosition' ChunkEndPosition - ChunkStartPosition); " is 356.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkDb,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDb.cs,Open,The length of the statement  "			throw new CorruptDatabaseException (new ChunkNotFoundException (Config.FileNamingStrategy.GetFilenameFor (chunkNum' 0))); " is 121.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkDb,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDb.cs,Open,The length of the statement  "				chunk = TFChunk.TFChunk.FromOngoingFile (versions [0]' Config.ChunkSize' checkSize: false' unbuffered: Config.Unbuffered' writethrough: Config.WriteThrough); " is 157.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkDb,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDb.cs,Open,The length of the statement  "			throw new CorruptDatabaseException (new ChunkNotFoundException (Config.FileNamingStrategy.GetFilenameFor (lastChunkNum' 0))); " is 125.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkDb,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDb.cs,Open,The length of the statement  "			var lastChunk = TFChunk.TFChunk.FromCompletedFile (chunkFileName' verifyHash: false' unbufferedRead: Config.Unbuffered); " is 120.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkDb,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDb.cs,Open,The length of the statement  "				throw new CorruptDatabaseException (new BadChunkInDatabaseException (string.Format ("Chunk {0} is corrupted. Expected local chunk position: {1}' " + "but Chunk.LogicalDataSize is {2} (Chunk.PhysicalDataSize is {3}). Writer checkpoint: {4}."' chunkFileName' chunkLocalPos' lastChunk.LogicalDataSize' lastChunk.PhysicalDataSize' checkpoint))); " is 341.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkDb,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDb.cs,Open,The length of the statement  "				Log.Info ("Moving WriterCheckpoint from {0} to {1}' as it points to the scavenged chunk. " + "If that was not caused by replication of scavenged chunks' that could be a bug."' checkpoint' lastChunk.ChunkHeader.ChunkEndPosition); " is 228.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkDb,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDb.cs,Open,The length of the statement  "			var lastChunk = TFChunk.TFChunk.FromOngoingFile (chunkFileName' (int)chunkLocalPos' checkSize: false' unbuffered: Config.Unbuffered' writethrough: Config.WriteThrough); " is 168.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkDb,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDb.cs,ReadChunkHeader,The length of the statement  "			throw new CorruptDatabaseException (new BadChunkInDatabaseException (string.Format ("Chunk file '{0}' is bad. It does not have enough size for header and footer. File size is {1} bytes."' chunkFileName' fs.Length))); " is 216.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkDb,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDb.cs,ReadChunkFooter,The length of the statement  "			throw new CorruptDatabaseException (new BadChunkInDatabaseException (string.Format ("Chunk file '{0}' is bad. It does not have enough size for header and footer. File size is {1} bytes."' chunkFileName' fs.Length))); " is 216.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkDb,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDb.cs,EnsureNoExcessiveChunks,The length of the statement  "		throw new CorruptDatabaseException (new ExtraneousFileFoundException (string.Format ("Unexpected files: {0}."' string.Join ("' "' allFiles.Except (allowedFiles))))); " is 165.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkReader.cs,TryReadNextInternal,The length of the statement  "				throw new Exception (string.Format ("Got a file that was being deleted {0} times from TFChunkDb' likely a bug there."' MaxRetries)); " is 132.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkReader.cs,TryReadPrevInternal,The length of the statement  "			throw new Exception (string.Format ("Requested position {0} is greater than writer checkpoint {1} when requesting to read previous record from TF."' pos' writerChk)); " is 166.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkReader.cs,TryReadPrevInternal,The length of the statement  "				throw new Exception (string.Format ("Got a file that was being deleted {0} times from TFChunkDb' likely a bug there."' MaxRetries)); " is 132.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkManager.cs,BackgroundCachingProcess,The length of the statement  "	} while (Interlocked.CompareExchange (ref _backgroundPassesRemaining' 0' 0) > 0 && Interlocked.CompareExchange (ref _backgroundRunning' 1' 0) == 0); " is 148.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkManager.cs,CacheUncacheReadOnlyChunks,The length of the statement  "			var chunkSize = chunk.IsReadOnly ? chunk.ChunkFooter.PhysicalDataSize + chunk.ChunkFooter.MapSize + ChunkHeader.Size + ChunkFooter.Size : chunk.ChunkHeader.ChunkSize + ChunkHeader.Size + ChunkFooter.Size; " is 204.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkManager.cs,CreateTempChunk,The length of the statement  "	return TFChunk.TFChunk.CreateWithHeader (chunkFileName' chunkHeader' fileSize' _config.InMemDb' _config.Unbuffered' _config.WriteThrough); " is 138.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkManager.cs,AddNewChunk,The length of the statement  "		var chunk = TFChunk.TFChunk.CreateNew (chunkName' _config.ChunkSize' chunkNumber' chunkNumber' isScavenged: false' inMem: _config.InMemDb' unbuffered: _config.Unbuffered' writethrough: _config.WriteThrough); " is 207.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkManager.cs,AddNewChunk,The length of the statement  "			throw new Exception (string.Format ("Received request to create a new ongoing chunk #{0}-{1}' but current chunks count is {2}."' chunkHeader.ChunkStartNumber' chunkHeader.ChunkEndNumber' _chunksCount)); " is 202.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkManager.cs,AddNewChunk,The length of the statement  "		var chunk = TFChunk.TFChunk.CreateWithHeader (chunkName' chunkHeader' fileSize' _config.InMemDb' unbuffered: _config.Unbuffered' writethrough: _config.WriteThrough); " is 165.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkManager.cs,SwitchChunk,The length of the statement  "	Log.Info ("Switching chunk #{0}-{1} ({2})..."' chunkHeader.ChunkStartNumber' chunkHeader.ChunkEndNumber' Path.GetFileName (oldFileName)); " is 137.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkManager.cs,TryCacheChunk,The length of the statement  "	if (!chunk.IsReadOnly && chunk.ChunkHeader.ChunkSize + ChunkHeader.Size + ChunkFooter.Size <= _config.MaxChunksCacheSize) " is 121.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkManager.cs,GetChunkFor,The length of the statement  "		throw new ArgumentOutOfRangeException ("logPosition"' string.Format ("LogPosition {0} does not have corresponding chunk in DB."' logPosition)); " is 143.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkManager,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkManager.cs,GetChunkFor,The length of the statement  "		throw new Exception (string.Format ("Requested chunk for LogPosition {0}' which is not present in TFChunkManager."' logPosition)); " is 130.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,FromCompletedFile,The length of the statement  "	var chunk = new TFChunk (filename' ESConsts.TFChunkInitialReaderCount' ESConsts.TFChunkMaxReaderCount' TFConsts.MidpointsDepth' false' unbufferedRead' false); " is 158.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,FromOngoingFile,The length of the statement  "	var chunk = new TFChunk (filename' ESConsts.TFChunkInitialReaderCount' ESConsts.TFChunkMaxReaderCount' TFConsts.MidpointsDepth' false' unbuffered' writethrough); " is 161.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateNew,The length of the statement  "	var chunkHeader = new ChunkHeader (CurrentChunkVersion' chunkSize' chunkStartNumber' chunkEndNumber' isScavenged' Guid.NewGuid ()); " is 131.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateWithHeader,The length of the statement  "	var chunk = new TFChunk (filename' ESConsts.TFChunkInitialReaderCount' ESConsts.TFChunkMaxReaderCount' TFConsts.MidpointsDepth' inMem' unbuffered' writethrough); " is 161.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,InitCompleted,The length of the statement  "			throw new CorruptDatabaseException (new WrongFileVersionException (_filename' _chunkHeader.Version' CurrentChunkVersion)); " is 122.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,InitCompleted,The length of the statement  "			throw new Exception ("You can only run unbuffered mode on v3 or higher chunk files. Please run scavenge on your database to upgrade your transaction file to v3."); " is 163.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,InitCompleted,The length of the statement  "			throw new CorruptDatabaseException (new BadChunkInDatabaseException (string.Format ("Chunk file '{0}' should be completed' but is not."' _filename))); " is 150.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,InitCompleted,The length of the statement  "			throw new CorruptDatabaseException (new BadChunkInDatabaseException (string.Format ("Chunk file '{0}' should have a file size of {1} bytes' but it has a size of {2} bytes."' _filename' expectedFileSize' reader.Stream.Length))); " is 227.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,InitCompleted,The length of the statement  "	_readSide = _chunkHeader.IsScavenged ? (IChunkReadSide)new TFChunkReadSideScavenged (this) : new TFChunkReadSideUnscavenged (this); " is 131.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,InitNew,The length of the statement  "	_readSide = chunkHeader.IsScavenged ? (IChunkReadSide)new TFChunkReadSideScavenged (this) : new TFChunkReadSideUnscavenged (this); " is 130.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,InitOngoing,The length of the statement  "		throw new CorruptDatabaseException (new WrongFileVersionException (_filename' _chunkHeader.Version' CurrentChunkVersion)); " is 122.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,InitOngoing,The length of the statement  "			throw new CorruptDatabaseException (new BadChunkInDatabaseException (string.Format ("Chunk file '{0}' should have file size {1} bytes' but instead has {2} bytes length."' _filename' expectedFileSize' _writerWorkItem.StreamLength))); " is 232.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateInternalReaderWorkItem,The length of the statement  "		stream = UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' false' 1024 * 1024' 4096' false' 4096); " is 141.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateInternalReaderWorkItem,The length of the statement  "		stream = new FileStream (_filename' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' ReadBufferSize' FileOptions.RandomAccess); " is 131.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateWriterWorkItemForNewChunk,The length of the statement  "	var tempFile = new FileStream (tempFilename' FileMode.CreateNew' FileAccess.ReadWrite' FileShare.Read' WriteBufferSize' FileOptions.SequentialScan); " is 148.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetWriteStream,The length of the statement  "		return new FileStream (_filename' FileMode.Open' FileAccess.ReadWrite' FileShare.Read' WriteBufferSize' FileOptions.SequentialScan); " is 132.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetWriteStream,The length of the statement  "		return UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.ReadWrite' FileShare.Read' false' 4096 * 1024' 4096' _writeThrough' 4096); " is 147.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateWriterWorkItemForExistingChunk,The length of the statement  "			var newHeader = new ChunkHeader ((byte)ChunkVersions.Aligned' chunkHeader.ChunkSize' chunkHeader.ChunkStartNumber' chunkHeader.ChunkEndNumber' false' chunkHeader.ChunkId); " is 171.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,VerifyFileHash,The length of the statement  "			MD5Hash.ContinuousHashFor (md5' stream' ChunkHeader.Size + footer.PhysicalDataSize' stream.Length - ChunkHeader.Size - footer.PhysicalDataSize - ChunkFooter.ChecksumSize); " is 171.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,ReadHeader,The length of the statement  "		throw new CorruptDatabaseException (new BadChunkInDatabaseException (string.Format ("Chunk file '{0}' is too short to even read ChunkHeader' its size is {1} bytes."' _filename' stream.Length))); " is 194.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,ReadFooter,The length of the statement  "		throw new CorruptDatabaseException (new BadChunkInDatabaseException (string.Format ("Chunk file '{0}' is too short to even read ChunkFooter' its size is {1} bytes."' _filename' stream.Length))); " is 194.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,BuildCacheArray,The length of the statement  "			using (var unmanagedStream = new UnmanagedMemoryStream ((byte*)cachedData' _cachedLength' _cachedLength' FileAccess.ReadWrite)) { " is 129.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TryAppend,The length of the statement  "	if ((!ChunkHeader.IsScavenged && _logicalDataSize != _physicalDataSize) || (ChunkHeader.IsScavenged && _logicalDataSize < _physicalDataSize)) { " is 143.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TryAppend,The length of the statement  "		throw new Exception (string.Format ("Data sizes violation. Chunk: {0}' IsScavenged: {1}' LogicalDataSize: {2}' PhysicalDataSize: {3}."' FileName' ChunkHeader.IsScavenged' _logicalDataSize' _physicalDataSize)); " is 209.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,WriteFooter,The length of the statement  "			throw new InvalidOperationException ("Trying to write mapping while chunk is cached. " + "You probably are writing scavenged chunk as cached. " + "Do not do this."); " is 165.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,WriteFooter,The length of the statement  "	var footerNoHash = new ChunkFooter (true' true' _physicalDataSize' LogicalDataSize' mapSize' new byte[ChunkFooter.ChecksumSize]); " is 129.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,ResizeMemStream,The length of the statement  "		var memStream = new UnmanagedMemoryStream ((byte*)newCachedData' workItem.StreamLength' newFileSize' FileAccess.ReadWrite); " is 123.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CleanUpFileStreamDestruction,The length of the statement  "			Log.Info ("File {0} has been marked for delete and will be deleted in TryDestructFileStreams."' Path.GetFileName (_filename)); " is 126.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetSequentialReaderFileStream,The length of the statement  "	return _inMem ? (Stream)new UnmanagedMemoryStream ((byte*)_cachedData' _fileSize) : new FileStream (_filename' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' 65536' FileOptions.SequentialScan); " is 199.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,ToString,The length of the statement  "	return string.Format ("#{0}-{1} ({2})"' _chunkHeader.ChunkStartNumber' _chunkHeader.ChunkEndNumber' Path.GetFileName (_filename)); " is 130.
Long Statement,EventStore.Core.TransactionLog,RecordReadResult,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\ReadResults.cs,ToString,The length of the statement  "	return string.Format ("Success: {0}' NextPosition: {1}' RecordLength: {2}' LogRecord: {3}"' Success' NextPosition' RecordLength' LogRecord); " is 140.
Long Statement,EventStore.Core.TransactionLog,SeqReadResult,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\ReadResults.cs,ToString,The length of the statement  "	return string.Format ("Success: {0}' RecordLength: {1}' RecordPrePosition: {2}' RecordPostPosition: {3}' LogRecord: {4}"' Success' RecordLength' RecordPrePosition' RecordPostPosition' LogRecord); " is 195.
Long Statement,EventStore.Core.TransactionLog.LogRecords,EpochRecordExtensions,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\EpochRecord.cs,AsString,The length of the statement  "	return string.Format ("E{0}@{1}:{2:B}"' epoch == null ? -1 : epoch.EpochNumber' epoch == null ? -1 : epoch.EpochPosition' epoch == null ? Guid.Empty : epoch.EpochId); " is 166.
Long Statement,EventStore.Core.TransactionLog.LogRecords,EpochRecordExtensions,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\EpochRecord.cs,AsString,The length of the statement  "	return string.Format ("E{0}@{1}:{2:B}"' epoch == null ? -1 : epoch.EpochNumber' epoch == null ? -1 : epoch.EpochPosition' epoch == null ? Guid.Empty : epoch.EpochId); " is 166.
Long Statement,EventStore.Core.TransactionLog.LogRecords,EpochRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\EpochRecord.cs,ToString,The length of the statement  "	return string.Format ("EpochPosition: {0}' EpochNumber: {1}' EpochId: {2}' PrevEpochPosition: {3}' TimeStamp: {4}' "' EpochPosition' EpochNumber' EpochId' PrevEpochPosition' TimeStamp); " is 185.
Long Statement,EventStore.Core.TransactionLog.LogRecords,SystemLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\SystemLogRecord.cs,GetEpochRecord,The length of the statement  "		throw new ArgumentException (string.Format ("Unexpected type of system record. Requested: {0}' actual: {1}."' SystemRecordType.Epoch' SystemRecordType)); " is 153.
Long Statement,EventStore.Core.TransactionLog.LogRecords,SystemLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\SystemLogRecord.cs,GetEpochRecord,The length of the statement  "		throw new ArgumentOutOfRangeException (string.Format ("Unexpected SystemRecordSerialization type: {0}"' SystemRecordSerialization)' "SystemRecordSerialization"); " is 161.
Long Statement,EventStore.Core.TransactionLog.LogRecords,SystemLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\SystemLogRecord.cs,Equals,The length of the statement  "	return other.LogPosition == LogPosition && other.TimeStamp.Equals (TimeStamp) && other.SystemRecordType == SystemRecordType && other.SystemRecordSerialization == SystemRecordSerialization && other.Reserved == Reserved; " is 218.
Long Statement,EventStore.Core.TransactionLog.LogRecords,SystemLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\SystemLogRecord.cs,ToString,The length of the statement  "	return string.Format ("LogPosition: {0}' " + "TimeStamp: {1}' " + "SystemRecordType: {2}' " + "SystemRecordSerialization: {3}' " + "Reserved: {4}"' LogPosition' TimeStamp' SystemRecordType' SystemRecordSerialization' Reserved); " is 227.
Long Statement,EventStore.Core.TransactionLog.LogRecords,CommitLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\CommitLogRecord.cs,Equals,The length of the statement  "	return other.LogPosition == LogPosition && other.TransactionPosition == TransactionPosition && other.FirstEventNumber == FirstEventNumber && other.SortKey == SortKey && other.CorrelationId == CorrelationId && other.TimeStamp.Equals (TimeStamp); " is 244.
Long Statement,EventStore.Core.TransactionLog.LogRecords,CommitLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\CommitLogRecord.cs,ToString,The length of the statement  "	return string.Format ("LogPosition: {0}' " + "TransactionPosition: {1}' " + "FirstEventNumber: {2}' " + "SortKey: {3}' " + "CorrelationId: {4}' " + "TimeStamp: {5}"' LogPosition' TransactionPosition' FirstEventNumber' SortKey' CorrelationId' TimeStamp); " is 253.
Long Statement,EventStore.Core.TransactionLog.LogRecords,LogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,Prepare,The length of the statement  "	return new PrepareLogRecord (logPosition' correlationId' eventId' transactionPos' transactionOffset' eventStreamId' expectedVersion' timeStamp ?? DateTime.UtcNow' flags' eventType' data' metadata); " is 197.
Long Statement,EventStore.Core.TransactionLog.LogRecords,LogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,SingleWrite,The length of the statement  "	return new PrepareLogRecord (logPosition' correlationId' eventId' logPosition' 0' eventStreamId' expectedVersion' timestamp ?? DateTime.UtcNow' PrepareFlags.Data | PrepareFlags.TransactionBegin | PrepareFlags.TransactionEnd | (additionalFlags ?? PrepareFlags.None)' eventType' data' metadata); " is 293.
Long Statement,EventStore.Core.TransactionLog.LogRecords,LogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,TransactionBegin,The length of the statement  "	return new PrepareLogRecord (logPos' correlationId' Guid.NewGuid ()' logPos' -1' eventStreamId' expectedVersion' DateTime.UtcNow' PrepareFlags.TransactionBegin' null' NoData' NoData); " is 183.
Long Statement,EventStore.Core.TransactionLog.LogRecords,LogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,TransactionWrite,The length of the statement  "	return new PrepareLogRecord (logPosition' correlationId' eventId' transactionPos' transactionOffset' eventStreamId' ExpectedVersion.Any' DateTime.UtcNow' PrepareFlags.Data | (isJson ? PrepareFlags.IsJson : PrepareFlags.None)' eventType' data' metadata); " is 253.
Long Statement,EventStore.Core.TransactionLog.LogRecords,LogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,TransactionEnd,The length of the statement  "	return new PrepareLogRecord (logPos' correlationId' eventId' transactionPos' -1' eventStreamId' ExpectedVersion.Any' DateTime.UtcNow' PrepareFlags.TransactionEnd' null' NoData' NoData); " is 185.
Long Statement,EventStore.Core.TransactionLog.LogRecords,LogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,DeleteTombstone,The length of the statement  "	return new PrepareLogRecord (logPosition' correlationId' eventId' logPosition' 0' eventStreamId' expectedVersion' DateTime.UtcNow' PrepareFlags.StreamDelete | PrepareFlags.TransactionBegin | PrepareFlags.TransactionEnd | additionalFlags' SystemEventTypes.StreamDeleted' NoData' NoData); " is 286.
Long Statement,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,Equals,The length of the statement  "	return other.LogPosition == LogPosition && other.Flags == Flags && other.TransactionPosition == TransactionPosition && other.TransactionOffset == TransactionOffset && other.ExpectedVersion == ExpectedVersion && other.EventStreamId.Equals (EventStreamId) && other.EventId == EventId && other.CorrelationId == CorrelationId && other.TimeStamp.Equals (TimeStamp) && other.EventType.Equals (EventType) && other.Data.SequenceEqual (Data) && other.Metadata.SequenceEqual (Metadata); " is 476.
Long Statement,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,ToString,The length of the statement  "	return string.Format ("LogPosition: {0}' " + "Flags: {1}' " + "TransactionPosition: {2}' " + "TransactionOffset: {3}' " + "ExpectedVersion: {4}' " + "EventStreamId: {5}' " + "EventId: {6}' " + "CorrelationId: {7}' " + "TimeStamp: {8}' " + "EventType: {9}' " + "InMemorySize: {10}"' LogPosition' Flags' TransactionPosition' TransactionOffset' ExpectedVersion' EventStreamId' EventId' CorrelationId' TimeStamp' EventType' InMemorySize); " is 434.
Long Statement,EventStore.Core.TransactionLog.FileNamingStrategy,VersionedPatternFileNamingStrategy,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\FileNamingStrategy\VersionedPatternFileNamingStrategy.cs,GetAllVersionsFor,The length of the statement  "	var versions = Directory.EnumerateFiles (_path' string.Format ("{0}{1:000000}.*"' _prefix' index)).Where (x => _chunkNamePattern.IsMatch (Path.GetFileName (x))).OrderByDescending (x => x' StringComparer.CurrentCultureIgnoreCase).ToArray (); " is 240.
Long Statement,EventStore.Core.TransactionLog.FileNamingStrategy,VersionedPatternFileNamingStrategy,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\FileNamingStrategy\VersionedPatternFileNamingStrategy.cs,GetAllPresentFiles,The length of the statement  "	var versions = Directory.EnumerateFiles (_path' string.Format ("{0}*.*"' _prefix)).Where (x => _chunkNamePattern.IsMatch (Path.GetFileName (x))).ToArray (); " is 156.
Long Statement,EventStore.Core.Util,MiniWeb,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Util\MiniWeb.cs,ReplyWithContent,The length of the statement  "		if (string.IsNullOrEmpty (extension) || !extensionToContentType.TryGetValue (extension.ToLower ()' out contentType) || !File.Exists (fullPath)) { " is 145.
Long Statement,EventStore.Core.Util,MiniWeb,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Util\MiniWeb.cs,ReplyWithContent,The length of the statement  "			http.ReplyTextContent ("Not Found"' 404' "Not Found"' "text/plain"' null' ex => Logger.InfoException (ex' "Error while replying from MiniWeb")); " is 144.
Long Statement,EventStore.Core.Util,MiniWeb,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Util\MiniWeb.cs,ReplyWithContent,The length of the statement  "			http.Reply (content' config.Code' config.Description' config.ContentType' config.Encoding' config.Headers' ex => Logger.InfoException (ex' "Error while replying from MiniWeb")); " is 177.
Long Statement,EventStore.Core.Util,MiniWeb,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Util\MiniWeb.cs,GetWebRootFileSystemDirectory,The length of the statement  "			var sourceWebRootDirectory = string.IsNullOrEmpty (fileName) ? "" : Path.GetFullPath (Path.Combine (fileName' @"..\..\.."' debugPath)); " is 135.
Long Statement,EventStore.Core.Services.Monitoring.Utils,PerfCounterHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\Utils\PerfCounterHelper.cs,CreatePerfCounterForProcess,The length of the statement  "		_log.Trace ("Could not create performance counter: category='{0}'' counter='{1}'' instance='{2}'. Error: {3}"' category' counter' processName ?? "<!error getting process name!>"' ex.Message); " is 191.
Long Statement,EventStore.Core.Services.Monitoring.Utils,PerfCounterHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\Utils\PerfCounterHelper.cs,CreatePerfCounter,The length of the statement  "		return string.IsNullOrEmpty (instance) ? new PerformanceCounter (category' counter) : new PerformanceCounter (category' counter' instance); " is 139.
Long Statement,EventStore.Core.Services.Monitoring.Utils,PerfCounterHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\Utils\PerfCounterHelper.cs,CreatePerfCounter,The length of the statement  "		_log.Trace ("Could not create performance counter: category='{0}'' counter='{1}'' instance='{2}'. Error: {3}"' category' counter' instance ?? string.Empty' ex.Message); " is 168.
Long Statement,EventStore.Core.Services.Monitoring.Utils,PerfCounterHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\Utils\PerfCounterHelper.cs,GetGcStats,The length of the statement  "	return new GcStats (gcGen0Items: _gcGen0ItemsCounter != null ? _gcGen0ItemsCounter.NextSample ().RawValue : InvalidCounterResult' gcGen1Items: _gcGen1ItemsCounter != null ? _gcGen1ItemsCounter.NextSample ().RawValue : InvalidCounterResult' gcGen2Items: _gcGen2ItemsCounter != null ? _gcGen2ItemsCounter.NextSample ().RawValue : InvalidCounterResult' gcGen0Size: _gcGen0SizeCounter != null ? _gcGen0SizeCounter.NextSample ().RawValue : InvalidCounterResult' gcGen1Size: _gcGen1SizeCounter != null ? _gcGen1SizeCounter.NextSample ().RawValue : InvalidCounterResult' gcGen2Size: _gcGen2SizeCounter != null ? _gcGen2SizeCounter.NextSample ().RawValue : InvalidCounterResult' gcLargeHeapSize: _gcLargeHeapSizeCounter != null ? _gcLargeHeapSizeCounter.NextSample ().RawValue : InvalidCounterResult' gcAllocationSpeed: _gcAllocationSpeedCounter != null ? _gcAllocationSpeedCounter.NextValue () : InvalidCounterResult' gcTimeInGc: _gcTimeInGcCounter != null ? _gcTimeInGcCounter.NextValue () : InvalidCounterResult' gcTotalBytesInHeaps: _gcTotalBytesInHeapsCounter != null ? _gcTotalBytesInHeapsCounter.NextSample ().RawValue : InvalidCounterResult); " is 1142.
Long Statement,EventStore.Core.Services.RequestManager,RequestManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\RequestManagementService.cs,Handle,The length of the statement  "	var manager = new WriteStreamTwoPhaseRequestManager (_bus' _prepareCount' _commitCount' _prepareTimeout' _commitTimeout' _betterOrdering); " is 138.
Long Statement,EventStore.Core.Services.RequestManager,RequestManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\RequestManagementService.cs,Handle,The length of the statement  "	var manager = new DeleteStreamTwoPhaseRequestManager (_bus' _prepareCount' _commitCount' _prepareTimeout' _commitTimeout' _betterOrdering); " is 139.
Long Statement,EventStore.Core.Services.RequestManager,RequestManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\RequestManagementService.cs,Handle,The length of the statement  "	var manager = new TransactionCommitTwoPhaseRequestManager (_bus' _prepareCount' _commitCount' _prepareTimeout' _commitTimeout' _betterOrdering); " is 144.
Long Statement,EventStore.Core.Services.RequestManager,RequestManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\RequestManagementService.cs,Handle,The length of the statement  "		HistogramService.SetValue (_requestManagerHistogram' (long)((((double)watch.ElapsedTicks) / Stopwatch.Frequency) * 1000000000)); " is 128.
Complex Conditional,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,ReadAndCheckHash,The conditional expression  "text.Length != 32 || !text.All (x => char.IsDigit (x) || (x >= 'A' && x <= 'F'))"  is complex.
Complex Conditional,EventStore.Core.Index,TableIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,GetRangeInternal,The conditional expression  "first || ((last.Stream != best.Stream) && (last.Version != best.Version)) || last.Position != best.Position"  is complex.
Complex Conditional,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,IsLegitimateMaster,The conditional expression  "candidate.InstanceId == master.InstanceId || candidate.EpochNumber > master.EpochNumber || (candidate.EpochNumber == master.EpochNumber && candidate.EpochId != master.EpochId)"  is complex.
Complex Conditional,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,TrySendLogBulk,The conditional expression  "bulkResult.BytesRead > 0 || (bulkResult.IsEOF && !subscription.RawSend && !subscription.EOFSent)"  is complex.
Complex Conditional,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,ReadEvent,The conditional expression  "(result.Result == ReadEventResult.NoStream || result.Result == ReadEventResult.NotFound) && result.OriginalStreamExists && SystemStreams.IsSystemStream (msg.EventStreamId)"  is complex.
Complex Conditional,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,GetNextNMessages,The conditional expression  "!cnt.IsEmptyString () && (!int.TryParse (cnt' out count) || count > 100 || count < 1)"  is complex.
Complex Conditional,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetStreamEventsBackward,The conditional expression  "evNum != null && evNum != "head" && (!long.TryParse (evNum' out eventNumber) || eventNumber < 0)"  is complex.
Complex Conditional,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetMetastreamEvent,The conditional expression  "evNum != null && evNum != "head" && (!long.TryParse (evNum' out eventNumber) || eventNumber < 0)"  is complex.
Complex Conditional,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetMetastreamEventsBackward,The conditional expression  "evNum != null && evNum != "head" && (!long.TryParse (evNum' out eventNumber) || eventNumber < 0)"  is complex.
Complex Conditional,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetAllEventsBackward,The conditional expression  "pos != null && pos != "head" && (!TFPos.TryParse (pos' out position) || position.PreparePosition < 0 || position.CommitPosition < 0)"  is complex.
Complex Conditional,EventStore.Core.TransactionLog.Chunks,TFChunkDbTruncator,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDbTruncator.cs,TruncateChunkAndFillWithZeros,The conditional expression  "chunkHeader.IsScavenged || chunkHeader.ChunkStartNumber != chunkHeader.ChunkEndNumber || truncateChk < chunkHeader.ChunkStartPosition || truncateChk >= chunkHeader.ChunkEndPosition"  is complex.
Complex Conditional,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ScavengeChunks,The conditional expression  "oldSize <= newSize && !alwaysKeepScavenged && !_unsafeIgnoreHardDeletes && !oldVersion"  is complex.
Complex Conditional,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TryAppend,The conditional expression  "(!ChunkHeader.IsScavenged && _logicalDataSize != _physicalDataSize) || (ChunkHeader.IsScavenged && _logicalDataSize < _physicalDataSize)"  is complex.
Empty Catch Block,EventStore.Core.Services.Monitoring,MonitoringService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\MonitoringService.cs,Handle,The method has an empty catch block.
Empty Catch Block,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToEntry,The method has an empty catch block.
Empty Catch Block,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToEntry,The method has an empty catch block.
Empty Catch Block,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToEntry,The method has an empty catch block.
Empty Catch Block,EventStore.Core.Services.Transport.Http,Convert,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToEntry,The method has an empty catch block.
Magic Number,EventStore.Core.Bus,MPSCMessageQueue,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\MPSCMessageQueue.cs,MPSCMessageQueue,The following statement contains a magic number: if (IntPtr.Size != 8) {  	throw new NotSupportedException ("This queue is supported only on architectures having IntPtr.Size equal to 8");  }  
Magic Number,EventStore.Core.Bus,QueuedHandlerAutoReset,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerAutoReset.cs,ReadFromQueue,The following statement contains a magic number: while (!_stop) {  	Message msg = null;  	try {  		if (!_queue.TryDequeue (out msg)) {  			_queueStats.EnterIdle ();  			_starving = true;  			_msgAddEvent.WaitOne (100);  			_starving = false;  		} else {  			_queueStats.EnterBusy ();  			#if DEBUG  			_queueStats.Dequeued (msg);  			#endif  			var cnt = _queue.Count;  			_queueStats.ProcessingStarted (msg.GetType ()' cnt);  			if (_watchSlowMsg) {  				var start = DateTime.UtcNow;  				_consumer.Handle (msg);  				var elapsed = DateTime.UtcNow - start;  				if (elapsed > _slowMsgThreshold) {  					Log.Trace ("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count);  					if (elapsed > QueuedHandler.VerySlowMsgThreshold && !(msg is SystemMessage.SystemInit))  						Log.Error ("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count);  				}  			} else {  				_consumer.Handle (msg);  			}  			_queueStats.ProcessingEnded (1);  		}  	} catch (Exception ex) {  		Log.ErrorException (ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);  	}  }  
Magic Number,EventStore.Core.Bus,QueuedHandlerAutoReset,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerAutoReset.cs,ReadFromQueue,The following statement contains a magic number: try {  	if (!_queue.TryDequeue (out msg)) {  		_queueStats.EnterIdle ();  		_starving = true;  		_msgAddEvent.WaitOne (100);  		_starving = false;  	} else {  		_queueStats.EnterBusy ();  		#if DEBUG  		_queueStats.Dequeued (msg);  		#endif  		var cnt = _queue.Count;  		_queueStats.ProcessingStarted (msg.GetType ()' cnt);  		if (_watchSlowMsg) {  			var start = DateTime.UtcNow;  			_consumer.Handle (msg);  			var elapsed = DateTime.UtcNow - start;  			if (elapsed > _slowMsgThreshold) {  				Log.Trace ("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count);  				if (elapsed > QueuedHandler.VerySlowMsgThreshold && !(msg is SystemMessage.SystemInit))  					Log.Error ("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count);  			}  		} else {  			_consumer.Handle (msg);  		}  		_queueStats.ProcessingEnded (1);  	}  } catch (Exception ex) {  	Log.ErrorException (ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);  }  
Magic Number,EventStore.Core.Bus,QueuedHandlerAutoReset,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerAutoReset.cs,ReadFromQueue,The following statement contains a magic number: if (!_queue.TryDequeue (out msg)) {  	_queueStats.EnterIdle ();  	_starving = true;  	_msgAddEvent.WaitOne (100);  	_starving = false;  } else {  	_queueStats.EnterBusy ();  	#if DEBUG  	_queueStats.Dequeued (msg);  	#endif  	var cnt = _queue.Count;  	_queueStats.ProcessingStarted (msg.GetType ()' cnt);  	if (_watchSlowMsg) {  		var start = DateTime.UtcNow;  		_consumer.Handle (msg);  		var elapsed = DateTime.UtcNow - start;  		if (elapsed > _slowMsgThreshold) {  			Log.Trace ("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count);  			if (elapsed > QueuedHandler.VerySlowMsgThreshold && !(msg is SystemMessage.SystemInit))  				Log.Error ("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count);  		}  	} else {  		_consumer.Handle (msg);  	}  	_queueStats.ProcessingEnded (1);  }  
Magic Number,EventStore.Core.Bus,QueuedHandlerAutoReset,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerAutoReset.cs,ReadFromQueue,The following statement contains a magic number: _msgAddEvent.WaitOne (100);  
Magic Number,EventStore.Core.Bus,QueuedHandlerMRES,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerMRES.cs,ReadFromQueue,The following statement contains a magic number: while (!_stop) {  	Message msg = null;  	try {  		if (!_queue.TryDequeue (out msg)) {  			_starving = true;  			_queueStats.EnterIdle ();  			_msgAddEvent.Wait (100);  			_msgAddEvent.Reset ();  			_starving = false;  		} else {  			_queueStats.EnterBusy ();  			#if DEBUG  			_queueStats.Dequeued (msg);  			#endif  			var cnt = _queue.Count;  			_queueStats.ProcessingStarted (msg.GetType ()' cnt);  			if (_watchSlowMsg) {  				var start = DateTime.UtcNow;  				_consumer.Handle (msg);  				var elapsed = DateTime.UtcNow - start;  				if (elapsed > _slowMsgThreshold) {  					Log.Trace ("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count);  					if (elapsed > QueuedHandler.VerySlowMsgThreshold && !(msg is SystemMessage.SystemInit))  						Log.Error ("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count);  				}  			} else {  				_consumer.Handle (msg);  			}  			_queueStats.ProcessingEnded (1);  		}  	} catch (Exception ex) {  		Log.ErrorException (ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);  	}  }  
Magic Number,EventStore.Core.Bus,QueuedHandlerMRES,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerMRES.cs,ReadFromQueue,The following statement contains a magic number: try {  	if (!_queue.TryDequeue (out msg)) {  		_starving = true;  		_queueStats.EnterIdle ();  		_msgAddEvent.Wait (100);  		_msgAddEvent.Reset ();  		_starving = false;  	} else {  		_queueStats.EnterBusy ();  		#if DEBUG  		_queueStats.Dequeued (msg);  		#endif  		var cnt = _queue.Count;  		_queueStats.ProcessingStarted (msg.GetType ()' cnt);  		if (_watchSlowMsg) {  			var start = DateTime.UtcNow;  			_consumer.Handle (msg);  			var elapsed = DateTime.UtcNow - start;  			if (elapsed > _slowMsgThreshold) {  				Log.Trace ("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count);  				if (elapsed > QueuedHandler.VerySlowMsgThreshold && !(msg is SystemMessage.SystemInit))  					Log.Error ("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count);  			}  		} else {  			_consumer.Handle (msg);  		}  		_queueStats.ProcessingEnded (1);  	}  } catch (Exception ex) {  	Log.ErrorException (ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);  }  
Magic Number,EventStore.Core.Bus,QueuedHandlerMRES,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerMRES.cs,ReadFromQueue,The following statement contains a magic number: if (!_queue.TryDequeue (out msg)) {  	_starving = true;  	_queueStats.EnterIdle ();  	_msgAddEvent.Wait (100);  	_msgAddEvent.Reset ();  	_starving = false;  } else {  	_queueStats.EnterBusy ();  	#if DEBUG  	_queueStats.Dequeued (msg);  	#endif  	var cnt = _queue.Count;  	_queueStats.ProcessingStarted (msg.GetType ()' cnt);  	if (_watchSlowMsg) {  		var start = DateTime.UtcNow;  		_consumer.Handle (msg);  		var elapsed = DateTime.UtcNow - start;  		if (elapsed > _slowMsgThreshold) {  			Log.Trace ("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count);  			if (elapsed > QueuedHandler.VerySlowMsgThreshold && !(msg is SystemMessage.SystemInit))  				Log.Error ("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count);  		}  	} else {  		_consumer.Handle (msg);  	}  	_queueStats.ProcessingEnded (1);  }  
Magic Number,EventStore.Core.Bus,QueuedHandlerMRES,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerMRES.cs,ReadFromQueue,The following statement contains a magic number: _msgAddEvent.Wait (100);  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,GetStatistics,The following statement contains a magic number: lock (_statisticsLock) {  	var totalTime = _totalTimeWatch.Elapsed;  	var totalIdleTime = _totalIdleWatch.Elapsed;  	var totalBusyTime = _totalBusyWatch.Elapsed;  	var totalItems = Interlocked.Read (ref _totalItems);  	var lastRunMs = totalTime - _lastTotalTime;  	var lastItems = totalItems - _lastTotalItems;  	var avgItemsPerSecond = lastRunMs.Ticks != 0 ? (int)(TimeSpan.TicksPerSecond * lastItems / lastRunMs.Ticks) : 0;  	var avgProcessingTime = lastItems != 0 ? (totalBusyTime - _lastTotalBusyTime).TotalMilliseconds / lastItems : 0;  	var idleTimePercent = Math.Min (100.0' lastRunMs.Ticks != 0 ? 100.0 * (totalIdleTime - _lastTotalIdleTime).Ticks / lastRunMs.Ticks : 100);  	var stats = new QueueStats (Name' GroupName' currentQueueLength' avgItemsPerSecond' avgProcessingTime' idleTimePercent' _busyWatch.IsRunning ? _busyWatch.Elapsed : (TimeSpan?)null' _idleWatch.IsRunning ? _idleWatch.Elapsed : (TimeSpan?)null' totalItems' _currentQueueLengthPeak' _lifetimeQueueLengthPeak' _lastProcessedMsgType' _inProgressMsgType);  	if (totalTime - _lastTotalTime >= MinRefreshPeriod) {  		_lastTotalTime = totalTime;  		_lastTotalIdleTime = totalIdleTime;  		_lastTotalBusyTime = totalBusyTime;  		_lastTotalItems = totalItems;  		_currentQueueLengthPeak = 0;  	}  	return stats;  }  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,GetStatistics,The following statement contains a magic number: lock (_statisticsLock) {  	var totalTime = _totalTimeWatch.Elapsed;  	var totalIdleTime = _totalIdleWatch.Elapsed;  	var totalBusyTime = _totalBusyWatch.Elapsed;  	var totalItems = Interlocked.Read (ref _totalItems);  	var lastRunMs = totalTime - _lastTotalTime;  	var lastItems = totalItems - _lastTotalItems;  	var avgItemsPerSecond = lastRunMs.Ticks != 0 ? (int)(TimeSpan.TicksPerSecond * lastItems / lastRunMs.Ticks) : 0;  	var avgProcessingTime = lastItems != 0 ? (totalBusyTime - _lastTotalBusyTime).TotalMilliseconds / lastItems : 0;  	var idleTimePercent = Math.Min (100.0' lastRunMs.Ticks != 0 ? 100.0 * (totalIdleTime - _lastTotalIdleTime).Ticks / lastRunMs.Ticks : 100);  	var stats = new QueueStats (Name' GroupName' currentQueueLength' avgItemsPerSecond' avgProcessingTime' idleTimePercent' _busyWatch.IsRunning ? _busyWatch.Elapsed : (TimeSpan?)null' _idleWatch.IsRunning ? _idleWatch.Elapsed : (TimeSpan?)null' totalItems' _currentQueueLengthPeak' _lifetimeQueueLengthPeak' _lastProcessedMsgType' _inProgressMsgType);  	if (totalTime - _lastTotalTime >= MinRefreshPeriod) {  		_lastTotalTime = totalTime;  		_lastTotalIdleTime = totalIdleTime;  		_lastTotalBusyTime = totalBusyTime;  		_lastTotalItems = totalItems;  		_currentQueueLengthPeak = 0;  	}  	return stats;  }  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,GetStatistics,The following statement contains a magic number: lock (_statisticsLock) {  	var totalTime = _totalTimeWatch.Elapsed;  	var totalIdleTime = _totalIdleWatch.Elapsed;  	var totalBusyTime = _totalBusyWatch.Elapsed;  	var totalItems = Interlocked.Read (ref _totalItems);  	var lastRunMs = totalTime - _lastTotalTime;  	var lastItems = totalItems - _lastTotalItems;  	var avgItemsPerSecond = lastRunMs.Ticks != 0 ? (int)(TimeSpan.TicksPerSecond * lastItems / lastRunMs.Ticks) : 0;  	var avgProcessingTime = lastItems != 0 ? (totalBusyTime - _lastTotalBusyTime).TotalMilliseconds / lastItems : 0;  	var idleTimePercent = Math.Min (100.0' lastRunMs.Ticks != 0 ? 100.0 * (totalIdleTime - _lastTotalIdleTime).Ticks / lastRunMs.Ticks : 100);  	var stats = new QueueStats (Name' GroupName' currentQueueLength' avgItemsPerSecond' avgProcessingTime' idleTimePercent' _busyWatch.IsRunning ? _busyWatch.Elapsed : (TimeSpan?)null' _idleWatch.IsRunning ? _idleWatch.Elapsed : (TimeSpan?)null' totalItems' _currentQueueLengthPeak' _lifetimeQueueLengthPeak' _lastProcessedMsgType' _inProgressMsgType);  	if (totalTime - _lastTotalTime >= MinRefreshPeriod) {  		_lastTotalTime = totalTime;  		_lastTotalIdleTime = totalIdleTime;  		_lastTotalBusyTime = totalBusyTime;  		_lastTotalItems = totalItems;  		_currentQueueLengthPeak = 0;  	}  	return stats;  }  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,InitializeIdleDetection,The following statement contains a magic number: if (enable) {  	_nonIdle = 0;  	_length = 0;  	_notifyLock = new object ();  	_writerCheckpoint = new ICheckpoint[3];  	_chaserCheckpoint = new ICheckpoint[3];  } else {  	_notifyLock = null;  }  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,InitializeIdleDetection,The following statement contains a magic number: if (enable) {  	_nonIdle = 0;  	_length = 0;  	_notifyLock = new object ();  	_writerCheckpoint = new ICheckpoint[3];  	_chaserCheckpoint = new ICheckpoint[3];  } else {  	_notifyLock = null;  }  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,InitializeIdleDetection,The following statement contains a magic number: _writerCheckpoint = new ICheckpoint[3];  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,InitializeIdleDetection,The following statement contains a magic number: _chaserCheckpoint = new ICheckpoint[3];  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The following statement contains a magic number: lock (_notifyLock) {  	var successes = 0;  	while (successes < 2) {  		while (_nonIdle > 0 || _length > 0 || AreCheckpointsDifferent (0) || AreCheckpointsDifferent (1) || AreCheckpointsDifferent (2) || AnyCheckpointsDifferent () || (waitForNonEmptyTf && _writerCheckpoint [0].Read () == 0)) {  			if (!Monitor.Wait (_notifyLock' 100)) {  				Console.WriteLine ("Waiting for IDLE state...");  				counter++;  				if (counter > 150 * multiplier)  					throw new ApplicationException ("Infinite loop?");  			}  		}  		Thread.Sleep (10);  		successes++;  	}  }  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The following statement contains a magic number: lock (_notifyLock) {  	var successes = 0;  	while (successes < 2) {  		while (_nonIdle > 0 || _length > 0 || AreCheckpointsDifferent (0) || AreCheckpointsDifferent (1) || AreCheckpointsDifferent (2) || AnyCheckpointsDifferent () || (waitForNonEmptyTf && _writerCheckpoint [0].Read () == 0)) {  			if (!Monitor.Wait (_notifyLock' 100)) {  				Console.WriteLine ("Waiting for IDLE state...");  				counter++;  				if (counter > 150 * multiplier)  					throw new ApplicationException ("Infinite loop?");  			}  		}  		Thread.Sleep (10);  		successes++;  	}  }  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The following statement contains a magic number: lock (_notifyLock) {  	var successes = 0;  	while (successes < 2) {  		while (_nonIdle > 0 || _length > 0 || AreCheckpointsDifferent (0) || AreCheckpointsDifferent (1) || AreCheckpointsDifferent (2) || AnyCheckpointsDifferent () || (waitForNonEmptyTf && _writerCheckpoint [0].Read () == 0)) {  			if (!Monitor.Wait (_notifyLock' 100)) {  				Console.WriteLine ("Waiting for IDLE state...");  				counter++;  				if (counter > 150 * multiplier)  					throw new ApplicationException ("Infinite loop?");  			}  		}  		Thread.Sleep (10);  		successes++;  	}  }  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The following statement contains a magic number: lock (_notifyLock) {  	var successes = 0;  	while (successes < 2) {  		while (_nonIdle > 0 || _length > 0 || AreCheckpointsDifferent (0) || AreCheckpointsDifferent (1) || AreCheckpointsDifferent (2) || AnyCheckpointsDifferent () || (waitForNonEmptyTf && _writerCheckpoint [0].Read () == 0)) {  			if (!Monitor.Wait (_notifyLock' 100)) {  				Console.WriteLine ("Waiting for IDLE state...");  				counter++;  				if (counter > 150 * multiplier)  					throw new ApplicationException ("Infinite loop?");  			}  		}  		Thread.Sleep (10);  		successes++;  	}  }  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The following statement contains a magic number: lock (_notifyLock) {  	var successes = 0;  	while (successes < 2) {  		while (_nonIdle > 0 || _length > 0 || AreCheckpointsDifferent (0) || AreCheckpointsDifferent (1) || AreCheckpointsDifferent (2) || AnyCheckpointsDifferent () || (waitForNonEmptyTf && _writerCheckpoint [0].Read () == 0)) {  			if (!Monitor.Wait (_notifyLock' 100)) {  				Console.WriteLine ("Waiting for IDLE state...");  				counter++;  				if (counter > 150 * multiplier)  					throw new ApplicationException ("Infinite loop?");  			}  		}  		Thread.Sleep (10);  		successes++;  	}  }  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The following statement contains a magic number: while (successes < 2) {  	while (_nonIdle > 0 || _length > 0 || AreCheckpointsDifferent (0) || AreCheckpointsDifferent (1) || AreCheckpointsDifferent (2) || AnyCheckpointsDifferent () || (waitForNonEmptyTf && _writerCheckpoint [0].Read () == 0)) {  		if (!Monitor.Wait (_notifyLock' 100)) {  			Console.WriteLine ("Waiting for IDLE state...");  			counter++;  			if (counter > 150 * multiplier)  				throw new ApplicationException ("Infinite loop?");  		}  	}  	Thread.Sleep (10);  	successes++;  }  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The following statement contains a magic number: while (successes < 2) {  	while (_nonIdle > 0 || _length > 0 || AreCheckpointsDifferent (0) || AreCheckpointsDifferent (1) || AreCheckpointsDifferent (2) || AnyCheckpointsDifferent () || (waitForNonEmptyTf && _writerCheckpoint [0].Read () == 0)) {  		if (!Monitor.Wait (_notifyLock' 100)) {  			Console.WriteLine ("Waiting for IDLE state...");  			counter++;  			if (counter > 150 * multiplier)  				throw new ApplicationException ("Infinite loop?");  		}  	}  	Thread.Sleep (10);  	successes++;  }  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The following statement contains a magic number: while (successes < 2) {  	while (_nonIdle > 0 || _length > 0 || AreCheckpointsDifferent (0) || AreCheckpointsDifferent (1) || AreCheckpointsDifferent (2) || AnyCheckpointsDifferent () || (waitForNonEmptyTf && _writerCheckpoint [0].Read () == 0)) {  		if (!Monitor.Wait (_notifyLock' 100)) {  			Console.WriteLine ("Waiting for IDLE state...");  			counter++;  			if (counter > 150 * multiplier)  				throw new ApplicationException ("Infinite loop?");  		}  	}  	Thread.Sleep (10);  	successes++;  }  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The following statement contains a magic number: while (successes < 2) {  	while (_nonIdle > 0 || _length > 0 || AreCheckpointsDifferent (0) || AreCheckpointsDifferent (1) || AreCheckpointsDifferent (2) || AnyCheckpointsDifferent () || (waitForNonEmptyTf && _writerCheckpoint [0].Read () == 0)) {  		if (!Monitor.Wait (_notifyLock' 100)) {  			Console.WriteLine ("Waiting for IDLE state...");  			counter++;  			if (counter > 150 * multiplier)  				throw new ApplicationException ("Infinite loop?");  		}  	}  	Thread.Sleep (10);  	successes++;  }  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The following statement contains a magic number: while (successes < 2) {  	while (_nonIdle > 0 || _length > 0 || AreCheckpointsDifferent (0) || AreCheckpointsDifferent (1) || AreCheckpointsDifferent (2) || AnyCheckpointsDifferent () || (waitForNonEmptyTf && _writerCheckpoint [0].Read () == 0)) {  		if (!Monitor.Wait (_notifyLock' 100)) {  			Console.WriteLine ("Waiting for IDLE state...");  			counter++;  			if (counter > 150 * multiplier)  				throw new ApplicationException ("Infinite loop?");  		}  	}  	Thread.Sleep (10);  	successes++;  }  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The following statement contains a magic number: while (_nonIdle > 0 || _length > 0 || AreCheckpointsDifferent (0) || AreCheckpointsDifferent (1) || AreCheckpointsDifferent (2) || AnyCheckpointsDifferent () || (waitForNonEmptyTf && _writerCheckpoint [0].Read () == 0)) {  	if (!Monitor.Wait (_notifyLock' 100)) {  		Console.WriteLine ("Waiting for IDLE state...");  		counter++;  		if (counter > 150 * multiplier)  			throw new ApplicationException ("Infinite loop?");  	}  }  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The following statement contains a magic number: while (_nonIdle > 0 || _length > 0 || AreCheckpointsDifferent (0) || AreCheckpointsDifferent (1) || AreCheckpointsDifferent (2) || AnyCheckpointsDifferent () || (waitForNonEmptyTf && _writerCheckpoint [0].Read () == 0)) {  	if (!Monitor.Wait (_notifyLock' 100)) {  		Console.WriteLine ("Waiting for IDLE state...");  		counter++;  		if (counter > 150 * multiplier)  			throw new ApplicationException ("Infinite loop?");  	}  }  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The following statement contains a magic number: while (_nonIdle > 0 || _length > 0 || AreCheckpointsDifferent (0) || AreCheckpointsDifferent (1) || AreCheckpointsDifferent (2) || AnyCheckpointsDifferent () || (waitForNonEmptyTf && _writerCheckpoint [0].Read () == 0)) {  	if (!Monitor.Wait (_notifyLock' 100)) {  		Console.WriteLine ("Waiting for IDLE state...");  		counter++;  		if (counter > 150 * multiplier)  			throw new ApplicationException ("Infinite loop?");  	}  }  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The following statement contains a magic number: if (!Monitor.Wait (_notifyLock' 100)) {  	Console.WriteLine ("Waiting for IDLE state...");  	counter++;  	if (counter > 150 * multiplier)  		throw new ApplicationException ("Infinite loop?");  }  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The following statement contains a magic number: if (!Monitor.Wait (_notifyLock' 100)) {  	Console.WriteLine ("Waiting for IDLE state...");  	counter++;  	if (counter > 150 * multiplier)  		throw new ApplicationException ("Infinite loop?");  }  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The following statement contains a magic number: if (counter > 150 * multiplier)  	throw new ApplicationException ("Infinite loop?");  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,InitializeCheckpoints,The following statement contains a magic number: if (index == -1) {  	index = 0;  	_chaserCheckpoint [1] = _chaserCheckpoint [2] = null;  	_writerCheckpoint [1] = _writerCheckpoint [2] = null;  }  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,InitializeCheckpoints,The following statement contains a magic number: if (index == -1) {  	index = 0;  	_chaserCheckpoint [1] = _chaserCheckpoint [2] = null;  	_writerCheckpoint [1] = _writerCheckpoint [2] = null;  }  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,InitializeCheckpoints,The following statement contains a magic number: _chaserCheckpoint [1] = _chaserCheckpoint [2] = null;  
Magic Number,EventStore.Core.Bus,QueueStatsCollector,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,InitializeCheckpoints,The following statement contains a magic number: _writerCheckpoint [1] = _writerCheckpoint [2] = null;  
Magic Number,EventStore.Core.Bus,QueuedHandlerMresWithMpsc,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerMRESWithMPSC.cs,ReadFromQueue,The following statement contains a magic number: while (!_stop) {  	Message msg = null;  	try {  		QueueBatchDequeueResult dequeueResult;  		if (_queue.TryDequeue (batch' out dequeueResult) == false) {  			_starving = true;  			_queueStats.EnterIdle ();  			_msgAddEvent.Wait (100);  			_msgAddEvent.Reset ();  			_starving = false;  		} else {  			var estimatedQueueCount = dequeueResult.EstimateCurrentQueueCount;  			for (var i = 0; i < dequeueResult.DequeueCount; i++) {  				try {  					msg = batch [i];  					_queueStats.EnterBusy ();  					#if DEBUG  					_queueStats.Dequeued (msg);  					#endif  					_queueStats.ProcessingStarted (msg.GetType ()' estimatedQueueCount);  					if (_watchSlowMsg) {  						var start = DateTime.UtcNow;  						_consumer.Handle (msg);  						var elapsed = DateTime.UtcNow - start;  						if (elapsed > _slowMsgThreshold) {  							Log.Trace ("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' estimatedQueueCount' _queue.EstimageCurrentQueueCount ());  							if (elapsed > QueuedHandler.VerySlowMsgThreshold && !(msg is SystemMessage.SystemInit))  								Log.Error ("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' estimatedQueueCount' _queue.EstimageCurrentQueueCount ());  						}  					} else {  						_consumer.Handle (msg);  					}  				} catch (Exception ex) {  					Log.ErrorException (ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);  				}  				estimatedQueueCount -= 1;  				_queueStats.ProcessingEnded (1);  			}  		}  	} catch (Exception ex) {  		Log.ErrorException (ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);  	}  }  
Magic Number,EventStore.Core.Bus,QueuedHandlerMresWithMpsc,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerMRESWithMPSC.cs,ReadFromQueue,The following statement contains a magic number: try {  	QueueBatchDequeueResult dequeueResult;  	if (_queue.TryDequeue (batch' out dequeueResult) == false) {  		_starving = true;  		_queueStats.EnterIdle ();  		_msgAddEvent.Wait (100);  		_msgAddEvent.Reset ();  		_starving = false;  	} else {  		var estimatedQueueCount = dequeueResult.EstimateCurrentQueueCount;  		for (var i = 0; i < dequeueResult.DequeueCount; i++) {  			try {  				msg = batch [i];  				_queueStats.EnterBusy ();  				#if DEBUG  				_queueStats.Dequeued (msg);  				#endif  				_queueStats.ProcessingStarted (msg.GetType ()' estimatedQueueCount);  				if (_watchSlowMsg) {  					var start = DateTime.UtcNow;  					_consumer.Handle (msg);  					var elapsed = DateTime.UtcNow - start;  					if (elapsed > _slowMsgThreshold) {  						Log.Trace ("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' estimatedQueueCount' _queue.EstimageCurrentQueueCount ());  						if (elapsed > QueuedHandler.VerySlowMsgThreshold && !(msg is SystemMessage.SystemInit))  							Log.Error ("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' estimatedQueueCount' _queue.EstimageCurrentQueueCount ());  					}  				} else {  					_consumer.Handle (msg);  				}  			} catch (Exception ex) {  				Log.ErrorException (ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);  			}  			estimatedQueueCount -= 1;  			_queueStats.ProcessingEnded (1);  		}  	}  } catch (Exception ex) {  	Log.ErrorException (ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);  }  
Magic Number,EventStore.Core.Bus,QueuedHandlerMresWithMpsc,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerMRESWithMPSC.cs,ReadFromQueue,The following statement contains a magic number: if (_queue.TryDequeue (batch' out dequeueResult) == false) {  	_starving = true;  	_queueStats.EnterIdle ();  	_msgAddEvent.Wait (100);  	_msgAddEvent.Reset ();  	_starving = false;  } else {  	var estimatedQueueCount = dequeueResult.EstimateCurrentQueueCount;  	for (var i = 0; i < dequeueResult.DequeueCount; i++) {  		try {  			msg = batch [i];  			_queueStats.EnterBusy ();  			#if DEBUG  			_queueStats.Dequeued (msg);  			#endif  			_queueStats.ProcessingStarted (msg.GetType ()' estimatedQueueCount);  			if (_watchSlowMsg) {  				var start = DateTime.UtcNow;  				_consumer.Handle (msg);  				var elapsed = DateTime.UtcNow - start;  				if (elapsed > _slowMsgThreshold) {  					Log.Trace ("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' estimatedQueueCount' _queue.EstimageCurrentQueueCount ());  					if (elapsed > QueuedHandler.VerySlowMsgThreshold && !(msg is SystemMessage.SystemInit))  						Log.Error ("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' estimatedQueueCount' _queue.EstimageCurrentQueueCount ());  				}  			} else {  				_consumer.Handle (msg);  			}  		} catch (Exception ex) {  			Log.ErrorException (ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);  		}  		estimatedQueueCount -= 1;  		_queueStats.ProcessingEnded (1);  	}  }  
Magic Number,EventStore.Core.Bus,QueuedHandlerMresWithMpsc,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerMRESWithMPSC.cs,ReadFromQueue,The following statement contains a magic number: _msgAddEvent.Wait (100);  
Magic Number,EventStore.Core.Bus,QueuedHandlerPulse,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerPulse.cs,ReadFromQueue,The following statement contains a magic number: while (!_stop) {  	Message msg = null;  	try {  		lock (_locker) {  			while (!_queue.TryDequeue (out msg) && !_stop) {  				_starving = true;  				_queueStats.EnterIdle ();  				Monitor.Wait (_locker' 100);  			}  			_starving = false;  			if (_stop)  				break;  		}  		_queueStats.EnterBusy ();  		#if DEBUG  		_queueStats.Dequeued (msg);  		#endif  		var cnt = _queue.Count;  		_queueStats.ProcessingStarted (msg.GetType ()' cnt);  		if (_watchSlowMsg) {  			var start = DateTime.UtcNow;  			_consumer.Handle (msg);  			var elapsed = DateTime.UtcNow - start;  			if (elapsed > _slowMsgThreshold) {  				Log.Trace ("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count);  				if (elapsed > QueuedHandler.VerySlowMsgThreshold && !(msg is SystemMessage.SystemInit))  					Log.Error ("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count);  			}  		} else {  			_consumer.Handle (msg);  		}  		_queueStats.ProcessingEnded (1);  	} catch (Exception ex) {  		Log.ErrorException (ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);  	}  }  
Magic Number,EventStore.Core.Bus,QueuedHandlerPulse,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerPulse.cs,ReadFromQueue,The following statement contains a magic number: try {  	lock (_locker) {  		while (!_queue.TryDequeue (out msg) && !_stop) {  			_starving = true;  			_queueStats.EnterIdle ();  			Monitor.Wait (_locker' 100);  		}  		_starving = false;  		if (_stop)  			break;  	}  	_queueStats.EnterBusy ();  	#if DEBUG  	_queueStats.Dequeued (msg);  	#endif  	var cnt = _queue.Count;  	_queueStats.ProcessingStarted (msg.GetType ()' cnt);  	if (_watchSlowMsg) {  		var start = DateTime.UtcNow;  		_consumer.Handle (msg);  		var elapsed = DateTime.UtcNow - start;  		if (elapsed > _slowMsgThreshold) {  			Log.Trace ("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count);  			if (elapsed > QueuedHandler.VerySlowMsgThreshold && !(msg is SystemMessage.SystemInit))  				Log.Error ("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count);  		}  	} else {  		_consumer.Handle (msg);  	}  	_queueStats.ProcessingEnded (1);  } catch (Exception ex) {  	Log.ErrorException (ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);  }  
Magic Number,EventStore.Core.Bus,QueuedHandlerPulse,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerPulse.cs,ReadFromQueue,The following statement contains a magic number: lock (_locker) {  	while (!_queue.TryDequeue (out msg) && !_stop) {  		_starving = true;  		_queueStats.EnterIdle ();  		Monitor.Wait (_locker' 100);  	}  	_starving = false;  	if (_stop)  		break;  }  
Magic Number,EventStore.Core.Bus,QueuedHandlerPulse,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerPulse.cs,ReadFromQueue,The following statement contains a magic number: while (!_queue.TryDequeue (out msg) && !_stop) {  	_starving = true;  	_queueStats.EnterIdle ();  	Monitor.Wait (_locker' 100);  }  
Magic Number,EventStore.Core.Bus,QueuedHandlerPulse,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerPulse.cs,ReadFromQueue,The following statement contains a magic number: Monitor.Wait (_locker' 100);  
Magic Number,EventStore.Core.Bus,SPSCMessageQueue,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\SPSCMessageQueue.cs,SPSCMessageQueue,The following statement contains a magic number: if (IntPtr.Size != 8) {  	throw new NotSupportedException ("This queue is supported only on architectures having IntPtr.Size equal to 8");  }  
Magic Number,EventStore.Core.Bus,QueuedHandlerAutoResetWithMpsc,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerAutoResetWithMPSC.cs,ReadFromQueue,The following statement contains a magic number: while (!_stop) {  	Message msg = null;  	try {  		QueueBatchDequeueResult dequeueResult;  		if (_queue.TryDequeue (batch' out dequeueResult) == false) {  			_starving = true;  			_queueStats.EnterIdle ();  			_msgAddEvent.WaitOne (100);  			_msgAddEvent.Reset ();  			_starving = false;  		} else {  			var estimatedQueueCount = dequeueResult.EstimateCurrentQueueCount;  			for (var i = 0; i < dequeueResult.DequeueCount; i++) {  				try {  					msg = batch [i];  					_queueStats.EnterBusy ();  					#if DEBUG  					_queueStats.Dequeued (msg);  					#endif  					_queueStats.ProcessingStarted (msg.GetType ()' estimatedQueueCount);  					if (_watchSlowMsg) {  						var start = DateTime.UtcNow;  						_consumer.Handle (msg);  						var elapsed = DateTime.UtcNow - start;  						if (elapsed > _slowMsgThreshold) {  							Log.Trace ("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' estimatedQueueCount' _queue.EstimageCurrentQueueCount ());  							if (elapsed > QueuedHandler.VerySlowMsgThreshold && !(msg is SystemMessage.SystemInit))  								Log.Error ("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' estimatedQueueCount' _queue.EstimageCurrentQueueCount ());  						}  					} else {  						_consumer.Handle (msg);  					}  				} catch (Exception ex) {  					Log.ErrorException (ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);  				}  				estimatedQueueCount -= 1;  				_queueStats.ProcessingEnded (1);  			}  		}  	} catch (Exception ex) {  		Log.ErrorException (ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);  	}  }  
Magic Number,EventStore.Core.Bus,QueuedHandlerAutoResetWithMpsc,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerAutoResetWithMPSC.cs,ReadFromQueue,The following statement contains a magic number: try {  	QueueBatchDequeueResult dequeueResult;  	if (_queue.TryDequeue (batch' out dequeueResult) == false) {  		_starving = true;  		_queueStats.EnterIdle ();  		_msgAddEvent.WaitOne (100);  		_msgAddEvent.Reset ();  		_starving = false;  	} else {  		var estimatedQueueCount = dequeueResult.EstimateCurrentQueueCount;  		for (var i = 0; i < dequeueResult.DequeueCount; i++) {  			try {  				msg = batch [i];  				_queueStats.EnterBusy ();  				#if DEBUG  				_queueStats.Dequeued (msg);  				#endif  				_queueStats.ProcessingStarted (msg.GetType ()' estimatedQueueCount);  				if (_watchSlowMsg) {  					var start = DateTime.UtcNow;  					_consumer.Handle (msg);  					var elapsed = DateTime.UtcNow - start;  					if (elapsed > _slowMsgThreshold) {  						Log.Trace ("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' estimatedQueueCount' _queue.EstimageCurrentQueueCount ());  						if (elapsed > QueuedHandler.VerySlowMsgThreshold && !(msg is SystemMessage.SystemInit))  							Log.Error ("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' estimatedQueueCount' _queue.EstimageCurrentQueueCount ());  					}  				} else {  					_consumer.Handle (msg);  				}  			} catch (Exception ex) {  				Log.ErrorException (ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);  			}  			estimatedQueueCount -= 1;  			_queueStats.ProcessingEnded (1);  		}  	}  } catch (Exception ex) {  	Log.ErrorException (ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);  }  
Magic Number,EventStore.Core.Bus,QueuedHandlerAutoResetWithMpsc,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerAutoResetWithMPSC.cs,ReadFromQueue,The following statement contains a magic number: if (_queue.TryDequeue (batch' out dequeueResult) == false) {  	_starving = true;  	_queueStats.EnterIdle ();  	_msgAddEvent.WaitOne (100);  	_msgAddEvent.Reset ();  	_starving = false;  } else {  	var estimatedQueueCount = dequeueResult.EstimateCurrentQueueCount;  	for (var i = 0; i < dequeueResult.DequeueCount; i++) {  		try {  			msg = batch [i];  			_queueStats.EnterBusy ();  			#if DEBUG  			_queueStats.Dequeued (msg);  			#endif  			_queueStats.ProcessingStarted (msg.GetType ()' estimatedQueueCount);  			if (_watchSlowMsg) {  				var start = DateTime.UtcNow;  				_consumer.Handle (msg);  				var elapsed = DateTime.UtcNow - start;  				if (elapsed > _slowMsgThreshold) {  					Log.Trace ("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' estimatedQueueCount' _queue.EstimageCurrentQueueCount ());  					if (elapsed > QueuedHandler.VerySlowMsgThreshold && !(msg is SystemMessage.SystemInit))  						Log.Error ("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."' Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' estimatedQueueCount' _queue.EstimageCurrentQueueCount ());  				}  			} else {  				_consumer.Handle (msg);  			}  		} catch (Exception ex) {  			Log.ErrorException (ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);  		}  		estimatedQueueCount -= 1;  		_queueStats.ProcessingEnded (1);  	}  }  
Magic Number,EventStore.Core.Bus,QueuedHandlerAutoResetWithMpsc,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerAutoResetWithMPSC.cs,ReadFromQueue,The following statement contains a magic number: _msgAddEvent.WaitOne (100);  
Magic Number,EventStore.Core,ClusterVNode,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ClusterVNode.cs,ClusterVNode,The following statement contains a magic number: _workerBuses = Enumerable.Range (0' vNodeSettings.WorkerThreads).Select (queueNum => new InMemoryBus (string.Format ("Worker #{0} Bus"' queueNum + 1)' watchSlowMsg: true' slowMsgThreshold: TimeSpan.FromMilliseconds (200))).ToArray ();  
Magic Number,EventStore.Core,ClusterVNode,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ClusterVNode.cs,ClusterVNode,The following statement contains a magic number: _workersHandler = new MultiQueuedHandler (vNodeSettings.WorkerThreads' queueNum => new QueuedHandlerThreadPool (_workerBuses [queueNum]' string.Format ("Worker #{0}"' queueNum + 1)' groupName: "Workers"' watchSlowMsg: true' slowMsgThreshold: TimeSpan.FromMilliseconds (200)));  
Magic Number,EventStore.Core,ClusterVNode,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ClusterVNode.cs,Stop,The following statement contains a magic number: return Stop (TimeSpan.FromSeconds (15)' false' true);  
Magic Number,EventStore.Core,ExclusiveDbLock,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ExclusiveDbLock.cs,ExclusiveDbLock,The following statement contains a magic number: MutexName = dbPath.Length <= 250 ? "ESDB:" + dbPath.Replace ('\\'' '/') : "ESDB-HASHED:" + GetDbPathHash (dbPath);  
Magic Number,EventStore.Core,ExclusiveDbLock,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ExclusiveDbLock.cs,ExclusiveDbLock,The following statement contains a magic number: MutexName += new string ('-'' 260 - MutexName.Length);  
Magic Number,EventStore.Core,ProgramBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ProgramBase.cs,CommitSuicideIfInBoehmOrOnBadVersionsOfMono,The following statement contains a magic number: if (!options.Force) {  	if (GC.MaxGeneration == 0) {  		Application.Exit (3' "Appears that we are running in mono with boehm GC this is generally not a good idea' please run with sgen instead." + "to run with sgen use mono --gc=sgen. If you really want to run with boehm GC you can use --force to override this error.");  	}  	if (OS.IsUnix && !(OS.GetRuntimeVersion ().StartsWith ("4.6.2"))) {  		Log.Warn ("You appear to be running a version of Mono which is untested and not supported. Only Mono 4.6.2 is supported at this time.");  	}  }  
Magic Number,EventStore.Core,ProgramBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ProgramBase.cs,CommitSuicideIfInBoehmOrOnBadVersionsOfMono,The following statement contains a magic number: if (GC.MaxGeneration == 0) {  	Application.Exit (3' "Appears that we are running in mono with boehm GC this is generally not a good idea' please run with sgen instead." + "to run with sgen use mono --gc=sgen. If you really want to run with boehm GC you can use --force to override this error.");  }  
Magic Number,EventStore.Core,ProgramBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ProgramBase.cs,CommitSuicideIfInBoehmOrOnBadVersionsOfMono,The following statement contains a magic number: Application.Exit (3' "Appears that we are running in mono with boehm GC this is generally not a good idea' please run with sgen instead." + "to run with sgen use mono --gc=sgen. If you really want to run with boehm GC you can use --force to override this error.");  
Magic Number,EventStore.Core,ProgramBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ProgramBase.cs,Init,The following statement contains a magic number: Log.Info ("{0'-25} {1} ({2}-bit)"' "RUNTIME:"' OS.GetRuntimeVersion ()' Marshal.SizeOf (typeof(IntPtr)) * 8);  
Magic Number,EventStore.Core,ProgramBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ProgramBase.cs,FormatExceptionMessage,The following statement contains a magic number: while (exc != null) {  	cnt += 1;  	msg += "\n" + new string (' '' 2 * cnt) + exc.Message;  	exc = exc.InnerException;  }  
Magic Number,EventStore.Core,ProgramBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\ProgramBase.cs,FormatExceptionMessage,The following statement contains a magic number: msg += "\n" + new string (' '' 2 * cnt) + exc.Message;  
Magic Number,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,OnDefaultEndpoints,The following statement contains a magic number: _internalHttp = new IPEndPoint (Opts.InternalIpDefault' 2112);  
Magic Number,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,OnDefaultEndpoints,The following statement contains a magic number: _internalTcp = new IPEndPoint (Opts.InternalIpDefault' 1112);  
Magic Number,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,OnDefaultEndpoints,The following statement contains a magic number: _externalHttp = new IPEndPoint (Opts.ExternalIpDefault' 2113);  
Magic Number,EventStore.Core,VNodeBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,OnDefaultEndpoints,The following statement contains a magic number: _externalTcp = new IPEndPoint (Opts.InternalIpDefault' 1113);  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = InstanceId.GetHashCode ();  	result = (result * 397) ^ State.GetHashCode ();  	result = (result * 397) ^ IsAlive.GetHashCode ();  	result = (result * 397) ^ InternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ ExternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ InternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ ExternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ EpochPosition.GetHashCode ();  	result = (result * 397) ^ EpochNumber.GetHashCode ();  	result = (result * 397) ^ EpochId.GetHashCode ();  	result = (result * 397) ^ NodePriority;  	return result;  }  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = InstanceId.GetHashCode ();  	result = (result * 397) ^ State.GetHashCode ();  	result = (result * 397) ^ IsAlive.GetHashCode ();  	result = (result * 397) ^ InternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ ExternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ InternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ ExternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ EpochPosition.GetHashCode ();  	result = (result * 397) ^ EpochNumber.GetHashCode ();  	result = (result * 397) ^ EpochId.GetHashCode ();  	result = (result * 397) ^ NodePriority;  	return result;  }  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = InstanceId.GetHashCode ();  	result = (result * 397) ^ State.GetHashCode ();  	result = (result * 397) ^ IsAlive.GetHashCode ();  	result = (result * 397) ^ InternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ ExternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ InternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ ExternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ EpochPosition.GetHashCode ();  	result = (result * 397) ^ EpochNumber.GetHashCode ();  	result = (result * 397) ^ EpochId.GetHashCode ();  	result = (result * 397) ^ NodePriority;  	return result;  }  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = InstanceId.GetHashCode ();  	result = (result * 397) ^ State.GetHashCode ();  	result = (result * 397) ^ IsAlive.GetHashCode ();  	result = (result * 397) ^ InternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ ExternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ InternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ ExternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ EpochPosition.GetHashCode ();  	result = (result * 397) ^ EpochNumber.GetHashCode ();  	result = (result * 397) ^ EpochId.GetHashCode ();  	result = (result * 397) ^ NodePriority;  	return result;  }  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = InstanceId.GetHashCode ();  	result = (result * 397) ^ State.GetHashCode ();  	result = (result * 397) ^ IsAlive.GetHashCode ();  	result = (result * 397) ^ InternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ ExternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ InternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ ExternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ EpochPosition.GetHashCode ();  	result = (result * 397) ^ EpochNumber.GetHashCode ();  	result = (result * 397) ^ EpochId.GetHashCode ();  	result = (result * 397) ^ NodePriority;  	return result;  }  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = InstanceId.GetHashCode ();  	result = (result * 397) ^ State.GetHashCode ();  	result = (result * 397) ^ IsAlive.GetHashCode ();  	result = (result * 397) ^ InternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ ExternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ InternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ ExternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ EpochPosition.GetHashCode ();  	result = (result * 397) ^ EpochNumber.GetHashCode ();  	result = (result * 397) ^ EpochId.GetHashCode ();  	result = (result * 397) ^ NodePriority;  	return result;  }  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = InstanceId.GetHashCode ();  	result = (result * 397) ^ State.GetHashCode ();  	result = (result * 397) ^ IsAlive.GetHashCode ();  	result = (result * 397) ^ InternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ ExternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ InternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ ExternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ EpochPosition.GetHashCode ();  	result = (result * 397) ^ EpochNumber.GetHashCode ();  	result = (result * 397) ^ EpochId.GetHashCode ();  	result = (result * 397) ^ NodePriority;  	return result;  }  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = InstanceId.GetHashCode ();  	result = (result * 397) ^ State.GetHashCode ();  	result = (result * 397) ^ IsAlive.GetHashCode ();  	result = (result * 397) ^ InternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ ExternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ InternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ ExternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ EpochPosition.GetHashCode ();  	result = (result * 397) ^ EpochNumber.GetHashCode ();  	result = (result * 397) ^ EpochId.GetHashCode ();  	result = (result * 397) ^ NodePriority;  	return result;  }  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = InstanceId.GetHashCode ();  	result = (result * 397) ^ State.GetHashCode ();  	result = (result * 397) ^ IsAlive.GetHashCode ();  	result = (result * 397) ^ InternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ ExternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ InternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ ExternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ EpochPosition.GetHashCode ();  	result = (result * 397) ^ EpochNumber.GetHashCode ();  	result = (result * 397) ^ EpochId.GetHashCode ();  	result = (result * 397) ^ NodePriority;  	return result;  }  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = InstanceId.GetHashCode ();  	result = (result * 397) ^ State.GetHashCode ();  	result = (result * 397) ^ IsAlive.GetHashCode ();  	result = (result * 397) ^ InternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ ExternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ InternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ ExternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ EpochPosition.GetHashCode ();  	result = (result * 397) ^ EpochNumber.GetHashCode ();  	result = (result * 397) ^ EpochId.GetHashCode ();  	result = (result * 397) ^ NodePriority;  	return result;  }  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = InstanceId.GetHashCode ();  	result = (result * 397) ^ State.GetHashCode ();  	result = (result * 397) ^ IsAlive.GetHashCode ();  	result = (result * 397) ^ InternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ ExternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ InternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ ExternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ EpochPosition.GetHashCode ();  	result = (result * 397) ^ EpochNumber.GetHashCode ();  	result = (result * 397) ^ EpochId.GetHashCode ();  	result = (result * 397) ^ NodePriority;  	return result;  }  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = InstanceId.GetHashCode ();  	result = (result * 397) ^ State.GetHashCode ();  	result = (result * 397) ^ IsAlive.GetHashCode ();  	result = (result * 397) ^ InternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ ExternalTcpEndPoint.GetHashCode ();  	result = (result * 397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode () : 0);  	result = (result * 397) ^ InternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ ExternalHttpEndPoint.GetHashCode ();  	result = (result * 397) ^ EpochPosition.GetHashCode ();  	result = (result * 397) ^ EpochNumber.GetHashCode ();  	result = (result * 397) ^ EpochId.GetHashCode ();  	result = (result * 397) ^ NodePriority;  	return result;  }  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ State.GetHashCode ();  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ IsAlive.GetHashCode ();  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ InternalTcpEndPoint.GetHashCode ();  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode () : 0);  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ ExternalTcpEndPoint.GetHashCode ();  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode () : 0);  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ InternalHttpEndPoint.GetHashCode ();  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ ExternalHttpEndPoint.GetHashCode ();  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ EpochPosition.GetHashCode ();  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ EpochNumber.GetHashCode ();  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ EpochId.GetHashCode ();  
Magic Number,EventStore.Core.Cluster,MemberInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ NodePriority;  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = EventNumber.GetHashCode ();  	hashCode = (hashCode * 397) ^ LogPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ CorrelationId.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventId.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionOffset;  	hashCode = (hashCode * 397) ^ EventStreamId.GetHashCode ();  	hashCode = (hashCode * 397) ^ ExpectedVersion.GetHashCode ();  	hashCode = (hashCode * 397) ^ TimeStamp.GetHashCode ();  	hashCode = (hashCode * 397) ^ Flags.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventType.GetHashCode ();  	hashCode = (hashCode * 397) ^ Data.GetHashCode ();  	hashCode = (hashCode * 397) ^ Metadata.GetHashCode ();  	return hashCode;  }  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = EventNumber.GetHashCode ();  	hashCode = (hashCode * 397) ^ LogPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ CorrelationId.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventId.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionOffset;  	hashCode = (hashCode * 397) ^ EventStreamId.GetHashCode ();  	hashCode = (hashCode * 397) ^ ExpectedVersion.GetHashCode ();  	hashCode = (hashCode * 397) ^ TimeStamp.GetHashCode ();  	hashCode = (hashCode * 397) ^ Flags.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventType.GetHashCode ();  	hashCode = (hashCode * 397) ^ Data.GetHashCode ();  	hashCode = (hashCode * 397) ^ Metadata.GetHashCode ();  	return hashCode;  }  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = EventNumber.GetHashCode ();  	hashCode = (hashCode * 397) ^ LogPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ CorrelationId.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventId.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionOffset;  	hashCode = (hashCode * 397) ^ EventStreamId.GetHashCode ();  	hashCode = (hashCode * 397) ^ ExpectedVersion.GetHashCode ();  	hashCode = (hashCode * 397) ^ TimeStamp.GetHashCode ();  	hashCode = (hashCode * 397) ^ Flags.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventType.GetHashCode ();  	hashCode = (hashCode * 397) ^ Data.GetHashCode ();  	hashCode = (hashCode * 397) ^ Metadata.GetHashCode ();  	return hashCode;  }  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = EventNumber.GetHashCode ();  	hashCode = (hashCode * 397) ^ LogPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ CorrelationId.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventId.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionOffset;  	hashCode = (hashCode * 397) ^ EventStreamId.GetHashCode ();  	hashCode = (hashCode * 397) ^ ExpectedVersion.GetHashCode ();  	hashCode = (hashCode * 397) ^ TimeStamp.GetHashCode ();  	hashCode = (hashCode * 397) ^ Flags.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventType.GetHashCode ();  	hashCode = (hashCode * 397) ^ Data.GetHashCode ();  	hashCode = (hashCode * 397) ^ Metadata.GetHashCode ();  	return hashCode;  }  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = EventNumber.GetHashCode ();  	hashCode = (hashCode * 397) ^ LogPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ CorrelationId.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventId.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionOffset;  	hashCode = (hashCode * 397) ^ EventStreamId.GetHashCode ();  	hashCode = (hashCode * 397) ^ ExpectedVersion.GetHashCode ();  	hashCode = (hashCode * 397) ^ TimeStamp.GetHashCode ();  	hashCode = (hashCode * 397) ^ Flags.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventType.GetHashCode ();  	hashCode = (hashCode * 397) ^ Data.GetHashCode ();  	hashCode = (hashCode * 397) ^ Metadata.GetHashCode ();  	return hashCode;  }  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = EventNumber.GetHashCode ();  	hashCode = (hashCode * 397) ^ LogPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ CorrelationId.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventId.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionOffset;  	hashCode = (hashCode * 397) ^ EventStreamId.GetHashCode ();  	hashCode = (hashCode * 397) ^ ExpectedVersion.GetHashCode ();  	hashCode = (hashCode * 397) ^ TimeStamp.GetHashCode ();  	hashCode = (hashCode * 397) ^ Flags.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventType.GetHashCode ();  	hashCode = (hashCode * 397) ^ Data.GetHashCode ();  	hashCode = (hashCode * 397) ^ Metadata.GetHashCode ();  	return hashCode;  }  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = EventNumber.GetHashCode ();  	hashCode = (hashCode * 397) ^ LogPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ CorrelationId.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventId.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionOffset;  	hashCode = (hashCode * 397) ^ EventStreamId.GetHashCode ();  	hashCode = (hashCode * 397) ^ ExpectedVersion.GetHashCode ();  	hashCode = (hashCode * 397) ^ TimeStamp.GetHashCode ();  	hashCode = (hashCode * 397) ^ Flags.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventType.GetHashCode ();  	hashCode = (hashCode * 397) ^ Data.GetHashCode ();  	hashCode = (hashCode * 397) ^ Metadata.GetHashCode ();  	return hashCode;  }  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = EventNumber.GetHashCode ();  	hashCode = (hashCode * 397) ^ LogPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ CorrelationId.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventId.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionOffset;  	hashCode = (hashCode * 397) ^ EventStreamId.GetHashCode ();  	hashCode = (hashCode * 397) ^ ExpectedVersion.GetHashCode ();  	hashCode = (hashCode * 397) ^ TimeStamp.GetHashCode ();  	hashCode = (hashCode * 397) ^ Flags.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventType.GetHashCode ();  	hashCode = (hashCode * 397) ^ Data.GetHashCode ();  	hashCode = (hashCode * 397) ^ Metadata.GetHashCode ();  	return hashCode;  }  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = EventNumber.GetHashCode ();  	hashCode = (hashCode * 397) ^ LogPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ CorrelationId.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventId.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionOffset;  	hashCode = (hashCode * 397) ^ EventStreamId.GetHashCode ();  	hashCode = (hashCode * 397) ^ ExpectedVersion.GetHashCode ();  	hashCode = (hashCode * 397) ^ TimeStamp.GetHashCode ();  	hashCode = (hashCode * 397) ^ Flags.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventType.GetHashCode ();  	hashCode = (hashCode * 397) ^ Data.GetHashCode ();  	hashCode = (hashCode * 397) ^ Metadata.GetHashCode ();  	return hashCode;  }  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = EventNumber.GetHashCode ();  	hashCode = (hashCode * 397) ^ LogPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ CorrelationId.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventId.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionOffset;  	hashCode = (hashCode * 397) ^ EventStreamId.GetHashCode ();  	hashCode = (hashCode * 397) ^ ExpectedVersion.GetHashCode ();  	hashCode = (hashCode * 397) ^ TimeStamp.GetHashCode ();  	hashCode = (hashCode * 397) ^ Flags.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventType.GetHashCode ();  	hashCode = (hashCode * 397) ^ Data.GetHashCode ();  	hashCode = (hashCode * 397) ^ Metadata.GetHashCode ();  	return hashCode;  }  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = EventNumber.GetHashCode ();  	hashCode = (hashCode * 397) ^ LogPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ CorrelationId.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventId.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionOffset;  	hashCode = (hashCode * 397) ^ EventStreamId.GetHashCode ();  	hashCode = (hashCode * 397) ^ ExpectedVersion.GetHashCode ();  	hashCode = (hashCode * 397) ^ TimeStamp.GetHashCode ();  	hashCode = (hashCode * 397) ^ Flags.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventType.GetHashCode ();  	hashCode = (hashCode * 397) ^ Data.GetHashCode ();  	hashCode = (hashCode * 397) ^ Metadata.GetHashCode ();  	return hashCode;  }  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = EventNumber.GetHashCode ();  	hashCode = (hashCode * 397) ^ LogPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ CorrelationId.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventId.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionPosition.GetHashCode ();  	hashCode = (hashCode * 397) ^ TransactionOffset;  	hashCode = (hashCode * 397) ^ EventStreamId.GetHashCode ();  	hashCode = (hashCode * 397) ^ ExpectedVersion.GetHashCode ();  	hashCode = (hashCode * 397) ^ TimeStamp.GetHashCode ();  	hashCode = (hashCode * 397) ^ Flags.GetHashCode ();  	hashCode = (hashCode * 397) ^ EventType.GetHashCode ();  	hashCode = (hashCode * 397) ^ Data.GetHashCode ();  	hashCode = (hashCode * 397) ^ Metadata.GetHashCode ();  	return hashCode;  }  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ LogPosition.GetHashCode ();  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ CorrelationId.GetHashCode ();  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ EventId.GetHashCode ();  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ TransactionPosition.GetHashCode ();  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ TransactionOffset;  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ EventStreamId.GetHashCode ();  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ ExpectedVersion.GetHashCode ();  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ TimeStamp.GetHashCode ();  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Flags.GetHashCode ();  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ EventType.GetHashCode ();  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Data.GetHashCode ();  
Magic Number,EventStore.Core.Data,EventRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Metadata.GetHashCode ();  
Magic Number,EventStore.Core.Data,TFPos,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\TFPos.cs,TryParse,The following statement contains a magic number: if (s == null || s.Length != 32)  	return false;  
Magic Number,EventStore.Core.Data,TFPos,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\TFPos.cs,TryParse,The following statement contains a magic number: if (!long.TryParse (s.Substring (0' 16)' System.Globalization.NumberStyles.HexNumber' null' out commitPos))  	return false;  
Magic Number,EventStore.Core.Data,TFPos,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\TFPos.cs,TryParse,The following statement contains a magic number: if (!long.TryParse (s.Substring (16' 16)' System.Globalization.NumberStyles.HexNumber' null' out preparePos))  	return false;  
Magic Number,EventStore.Core.Data,TFPos,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\TFPos.cs,TryParse,The following statement contains a magic number: if (!long.TryParse (s.Substring (16' 16)' System.Globalization.NumberStyles.HexNumber' null' out preparePos))  	return false;  
Magic Number,EventStore.Core.Data,TFPos,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\TFPos.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (CommitPosition.GetHashCode () * 397) ^ PreparePosition.GetHashCode ();  }  
Magic Number,EventStore.Core.Data,TFPos,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\TFPos.cs,GetHashCode,The following statement contains a magic number: return (CommitPosition.GetHashCode () * 397) ^ PreparePosition.GetHashCode ();  
Magic Number,EventStore.Core.Data,Event,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\Event.cs,Event,The following statement contains a magic number: size += eventType.Length * 2;  
Magic Number,EventStore.Core.Data,Event,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\Event.cs,Event,The following statement contains a magic number: if (size > TFConsts.MaxLogRecordSize - 10000)  	throw new ArgumentException ("Record is too big"' "data");  
Magic Number,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,WriteEventsWithRetry,The following statement contains a magic number: PerformWithRetry (ioDispatcher' handler' steps' expectedVersion == ExpectedVersion.Any' TimeSpan.FromMilliseconds (100)' action => cancellationScope.Register (ioDispatcher.WriteEvents (streamId' expectedVersion' events' principal' response => {  	if (cancellationScope.Cancelled (response.CorrelationId))  		return;  	action (response' response.Result);  })));  
Magic Number,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,DeleteStreamWithRetry,The following statement contains a magic number: PerformWithRetry (ioDispatcher' handler' steps' expectedVersion == ExpectedVersion.Any' TimeSpan.FromMilliseconds (100)' action => cancellationScope.Register (ioDispatcher.DeleteStream (streamId' expectedVersion' hardDelete' principal' response => {  	if (cancellationScope.Cancelled (response.CorrelationId))  		return;  	action (response' response.Result);  })));  
Magic Number,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,UpdateStreamAclWithRetry,The following statement contains a magic number: PerformWithRetry (ioDispatcher' handler' steps' expectedVersion == ExpectedVersion.Any' TimeSpan.FromMilliseconds (100)' action => cancellationScope.Register (ioDispatcher.WriteEvents (SystemStreams.MetastreamOf (streamId)' expectedVersion' new[] {  	new Event (Guid.NewGuid ()' SystemEventTypes.StreamMetadata' true' metadata.ToJsonBytes ()' null)  }' principal' response => {  	if (cancellationScope.Cancelled (response.CorrelationId))  		return;  	action (response' response.Result);  })));  
Magic Number,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,PerformWithRetry,The following statement contains a magic number: action ((response' result) => {  	if (ShouldRetry (result' retryExpectedVersion)) {  		ioDispatcher.Delay (timeout' () => {  			if (timeout < TimeSpan.FromSeconds (10))  				timeout += timeout;  			PerformWithRetry (ioDispatcher' handler' steps' retryExpectedVersion' timeout' action);  		});  	} else {  		handler (response);  		Run (steps);  	}  });  
Magic Number,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,PerformWithRetry,The following statement contains a magic number: if (ShouldRetry (result' retryExpectedVersion)) {  	ioDispatcher.Delay (timeout' () => {  		if (timeout < TimeSpan.FromSeconds (10))  			timeout += timeout;  		PerformWithRetry (ioDispatcher' handler' steps' retryExpectedVersion' timeout' action);  	});  } else {  	handler (response);  	Run (steps);  }  
Magic Number,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,PerformWithRetry,The following statement contains a magic number: ioDispatcher.Delay (timeout' () => {  	if (timeout < TimeSpan.FromSeconds (10))  		timeout += timeout;  	PerformWithRetry (ioDispatcher' handler' steps' retryExpectedVersion' timeout' action);  });  
Magic Number,EventStore.Core.Helpers,IODispatcherAsync,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,PerformWithRetry,The following statement contains a magic number: if (timeout < TimeSpan.FromSeconds (10))  	timeout += timeout;  
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: for (int i = bytes.Offset; i < bytes.Offset + bytes.Count;) {  	if (_prefixBytes < PrefixLength) {  		_packageLength |= (data [i] << (_prefixBytes * 8));  		// little-endian order  		_prefixBytes += 1;  		i += 1;  		if (_prefixBytes == PrefixLength) {  			if (_packageLength <= 0 || _packageLength > _maxPackageSize) {  				Log.Error ("FRAMING ERROR! Data:");  				Log.Error (Helper.FormatBinaryDump (bytes));  				throw new PackageFramingException (string.Format ("Package size is out of bounds: {0} (max: {1})."' _packageLength' _maxPackageSize));  			}  			_packageLength += PrefixLength;  			// we need to read suffix as well  		}  	} else {  		int copyCnt = Math.Min (bytes.Count + bytes.Offset - i' _packageLength - (int)_memStream.Length);  		_memStream.Write (bytes.Array' i' copyCnt);  		i += copyCnt;  		if (_memStream.Length == _packageLength) {  			#if DEBUG  			var buf = _memStream.GetBuffer ();  			int suffixLength = (buf [_packageLength - 4] << 0) | (buf [_packageLength - 3] << 8) | (buf [_packageLength - 2] << 16) | (buf [_packageLength - 1] << 24);  			if (_packageLength - PrefixLength != suffixLength) {  				throw new Exception (string.Format ("Prefix length: {0} is not equal to suffix length: {1}."' _packageLength - PrefixLength' suffixLength));  			}  			#endif  			_memStream.SetLength (_packageLength - PrefixLength);  			// remove suffix length  			_memStream.Position = 0;  			_packageHandler (_binaryReader);  			_memStream.SetLength (0);  			_prefixBytes = 0;  			_packageLength = 0;  		}  	}  }  
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: for (int i = bytes.Offset; i < bytes.Offset + bytes.Count;) {  	if (_prefixBytes < PrefixLength) {  		_packageLength |= (data [i] << (_prefixBytes * 8));  		// little-endian order  		_prefixBytes += 1;  		i += 1;  		if (_prefixBytes == PrefixLength) {  			if (_packageLength <= 0 || _packageLength > _maxPackageSize) {  				Log.Error ("FRAMING ERROR! Data:");  				Log.Error (Helper.FormatBinaryDump (bytes));  				throw new PackageFramingException (string.Format ("Package size is out of bounds: {0} (max: {1})."' _packageLength' _maxPackageSize));  			}  			_packageLength += PrefixLength;  			// we need to read suffix as well  		}  	} else {  		int copyCnt = Math.Min (bytes.Count + bytes.Offset - i' _packageLength - (int)_memStream.Length);  		_memStream.Write (bytes.Array' i' copyCnt);  		i += copyCnt;  		if (_memStream.Length == _packageLength) {  			#if DEBUG  			var buf = _memStream.GetBuffer ();  			int suffixLength = (buf [_packageLength - 4] << 0) | (buf [_packageLength - 3] << 8) | (buf [_packageLength - 2] << 16) | (buf [_packageLength - 1] << 24);  			if (_packageLength - PrefixLength != suffixLength) {  				throw new Exception (string.Format ("Prefix length: {0} is not equal to suffix length: {1}."' _packageLength - PrefixLength' suffixLength));  			}  			#endif  			_memStream.SetLength (_packageLength - PrefixLength);  			// remove suffix length  			_memStream.Position = 0;  			_packageHandler (_binaryReader);  			_memStream.SetLength (0);  			_prefixBytes = 0;  			_packageLength = 0;  		}  	}  }  
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: for (int i = bytes.Offset; i < bytes.Offset + bytes.Count;) {  	if (_prefixBytes < PrefixLength) {  		_packageLength |= (data [i] << (_prefixBytes * 8));  		// little-endian order  		_prefixBytes += 1;  		i += 1;  		if (_prefixBytes == PrefixLength) {  			if (_packageLength <= 0 || _packageLength > _maxPackageSize) {  				Log.Error ("FRAMING ERROR! Data:");  				Log.Error (Helper.FormatBinaryDump (bytes));  				throw new PackageFramingException (string.Format ("Package size is out of bounds: {0} (max: {1})."' _packageLength' _maxPackageSize));  			}  			_packageLength += PrefixLength;  			// we need to read suffix as well  		}  	} else {  		int copyCnt = Math.Min (bytes.Count + bytes.Offset - i' _packageLength - (int)_memStream.Length);  		_memStream.Write (bytes.Array' i' copyCnt);  		i += copyCnt;  		if (_memStream.Length == _packageLength) {  			#if DEBUG  			var buf = _memStream.GetBuffer ();  			int suffixLength = (buf [_packageLength - 4] << 0) | (buf [_packageLength - 3] << 8) | (buf [_packageLength - 2] << 16) | (buf [_packageLength - 1] << 24);  			if (_packageLength - PrefixLength != suffixLength) {  				throw new Exception (string.Format ("Prefix length: {0} is not equal to suffix length: {1}."' _packageLength - PrefixLength' suffixLength));  			}  			#endif  			_memStream.SetLength (_packageLength - PrefixLength);  			// remove suffix length  			_memStream.Position = 0;  			_packageHandler (_binaryReader);  			_memStream.SetLength (0);  			_prefixBytes = 0;  			_packageLength = 0;  		}  	}  }  
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: for (int i = bytes.Offset; i < bytes.Offset + bytes.Count;) {  	if (_prefixBytes < PrefixLength) {  		_packageLength |= (data [i] << (_prefixBytes * 8));  		// little-endian order  		_prefixBytes += 1;  		i += 1;  		if (_prefixBytes == PrefixLength) {  			if (_packageLength <= 0 || _packageLength > _maxPackageSize) {  				Log.Error ("FRAMING ERROR! Data:");  				Log.Error (Helper.FormatBinaryDump (bytes));  				throw new PackageFramingException (string.Format ("Package size is out of bounds: {0} (max: {1})."' _packageLength' _maxPackageSize));  			}  			_packageLength += PrefixLength;  			// we need to read suffix as well  		}  	} else {  		int copyCnt = Math.Min (bytes.Count + bytes.Offset - i' _packageLength - (int)_memStream.Length);  		_memStream.Write (bytes.Array' i' copyCnt);  		i += copyCnt;  		if (_memStream.Length == _packageLength) {  			#if DEBUG  			var buf = _memStream.GetBuffer ();  			int suffixLength = (buf [_packageLength - 4] << 0) | (buf [_packageLength - 3] << 8) | (buf [_packageLength - 2] << 16) | (buf [_packageLength - 1] << 24);  			if (_packageLength - PrefixLength != suffixLength) {  				throw new Exception (string.Format ("Prefix length: {0} is not equal to suffix length: {1}."' _packageLength - PrefixLength' suffixLength));  			}  			#endif  			_memStream.SetLength (_packageLength - PrefixLength);  			// remove suffix length  			_memStream.Position = 0;  			_packageHandler (_binaryReader);  			_memStream.SetLength (0);  			_prefixBytes = 0;  			_packageLength = 0;  		}  	}  }  
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: for (int i = bytes.Offset; i < bytes.Offset + bytes.Count;) {  	if (_prefixBytes < PrefixLength) {  		_packageLength |= (data [i] << (_prefixBytes * 8));  		// little-endian order  		_prefixBytes += 1;  		i += 1;  		if (_prefixBytes == PrefixLength) {  			if (_packageLength <= 0 || _packageLength > _maxPackageSize) {  				Log.Error ("FRAMING ERROR! Data:");  				Log.Error (Helper.FormatBinaryDump (bytes));  				throw new PackageFramingException (string.Format ("Package size is out of bounds: {0} (max: {1})."' _packageLength' _maxPackageSize));  			}  			_packageLength += PrefixLength;  			// we need to read suffix as well  		}  	} else {  		int copyCnt = Math.Min (bytes.Count + bytes.Offset - i' _packageLength - (int)_memStream.Length);  		_memStream.Write (bytes.Array' i' copyCnt);  		i += copyCnt;  		if (_memStream.Length == _packageLength) {  			#if DEBUG  			var buf = _memStream.GetBuffer ();  			int suffixLength = (buf [_packageLength - 4] << 0) | (buf [_packageLength - 3] << 8) | (buf [_packageLength - 2] << 16) | (buf [_packageLength - 1] << 24);  			if (_packageLength - PrefixLength != suffixLength) {  				throw new Exception (string.Format ("Prefix length: {0} is not equal to suffix length: {1}."' _packageLength - PrefixLength' suffixLength));  			}  			#endif  			_memStream.SetLength (_packageLength - PrefixLength);  			// remove suffix length  			_memStream.Position = 0;  			_packageHandler (_binaryReader);  			_memStream.SetLength (0);  			_prefixBytes = 0;  			_packageLength = 0;  		}  	}  }  
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: for (int i = bytes.Offset; i < bytes.Offset + bytes.Count;) {  	if (_prefixBytes < PrefixLength) {  		_packageLength |= (data [i] << (_prefixBytes * 8));  		// little-endian order  		_prefixBytes += 1;  		i += 1;  		if (_prefixBytes == PrefixLength) {  			if (_packageLength <= 0 || _packageLength > _maxPackageSize) {  				Log.Error ("FRAMING ERROR! Data:");  				Log.Error (Helper.FormatBinaryDump (bytes));  				throw new PackageFramingException (string.Format ("Package size is out of bounds: {0} (max: {1})."' _packageLength' _maxPackageSize));  			}  			_packageLength += PrefixLength;  			// we need to read suffix as well  		}  	} else {  		int copyCnt = Math.Min (bytes.Count + bytes.Offset - i' _packageLength - (int)_memStream.Length);  		_memStream.Write (bytes.Array' i' copyCnt);  		i += copyCnt;  		if (_memStream.Length == _packageLength) {  			#if DEBUG  			var buf = _memStream.GetBuffer ();  			int suffixLength = (buf [_packageLength - 4] << 0) | (buf [_packageLength - 3] << 8) | (buf [_packageLength - 2] << 16) | (buf [_packageLength - 1] << 24);  			if (_packageLength - PrefixLength != suffixLength) {  				throw new Exception (string.Format ("Prefix length: {0} is not equal to suffix length: {1}."' _packageLength - PrefixLength' suffixLength));  			}  			#endif  			_memStream.SetLength (_packageLength - PrefixLength);  			// remove suffix length  			_memStream.Position = 0;  			_packageHandler (_binaryReader);  			_memStream.SetLength (0);  			_prefixBytes = 0;  			_packageLength = 0;  		}  	}  }  
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: for (int i = bytes.Offset; i < bytes.Offset + bytes.Count;) {  	if (_prefixBytes < PrefixLength) {  		_packageLength |= (data [i] << (_prefixBytes * 8));  		// little-endian order  		_prefixBytes += 1;  		i += 1;  		if (_prefixBytes == PrefixLength) {  			if (_packageLength <= 0 || _packageLength > _maxPackageSize) {  				Log.Error ("FRAMING ERROR! Data:");  				Log.Error (Helper.FormatBinaryDump (bytes));  				throw new PackageFramingException (string.Format ("Package size is out of bounds: {0} (max: {1})."' _packageLength' _maxPackageSize));  			}  			_packageLength += PrefixLength;  			// we need to read suffix as well  		}  	} else {  		int copyCnt = Math.Min (bytes.Count + bytes.Offset - i' _packageLength - (int)_memStream.Length);  		_memStream.Write (bytes.Array' i' copyCnt);  		i += copyCnt;  		if (_memStream.Length == _packageLength) {  			#if DEBUG  			var buf = _memStream.GetBuffer ();  			int suffixLength = (buf [_packageLength - 4] << 0) | (buf [_packageLength - 3] << 8) | (buf [_packageLength - 2] << 16) | (buf [_packageLength - 1] << 24);  			if (_packageLength - PrefixLength != suffixLength) {  				throw new Exception (string.Format ("Prefix length: {0} is not equal to suffix length: {1}."' _packageLength - PrefixLength' suffixLength));  			}  			#endif  			_memStream.SetLength (_packageLength - PrefixLength);  			// remove suffix length  			_memStream.Position = 0;  			_packageHandler (_binaryReader);  			_memStream.SetLength (0);  			_prefixBytes = 0;  			_packageLength = 0;  		}  	}  }  
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: if (_prefixBytes < PrefixLength) {  	_packageLength |= (data [i] << (_prefixBytes * 8));  	// little-endian order  	_prefixBytes += 1;  	i += 1;  	if (_prefixBytes == PrefixLength) {  		if (_packageLength <= 0 || _packageLength > _maxPackageSize) {  			Log.Error ("FRAMING ERROR! Data:");  			Log.Error (Helper.FormatBinaryDump (bytes));  			throw new PackageFramingException (string.Format ("Package size is out of bounds: {0} (max: {1})."' _packageLength' _maxPackageSize));  		}  		_packageLength += PrefixLength;  		// we need to read suffix as well  	}  } else {  	int copyCnt = Math.Min (bytes.Count + bytes.Offset - i' _packageLength - (int)_memStream.Length);  	_memStream.Write (bytes.Array' i' copyCnt);  	i += copyCnt;  	if (_memStream.Length == _packageLength) {  		#if DEBUG  		var buf = _memStream.GetBuffer ();  		int suffixLength = (buf [_packageLength - 4] << 0) | (buf [_packageLength - 3] << 8) | (buf [_packageLength - 2] << 16) | (buf [_packageLength - 1] << 24);  		if (_packageLength - PrefixLength != suffixLength) {  			throw new Exception (string.Format ("Prefix length: {0} is not equal to suffix length: {1}."' _packageLength - PrefixLength' suffixLength));  		}  		#endif  		_memStream.SetLength (_packageLength - PrefixLength);  		// remove suffix length  		_memStream.Position = 0;  		_packageHandler (_binaryReader);  		_memStream.SetLength (0);  		_prefixBytes = 0;  		_packageLength = 0;  	}  }  
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: if (_prefixBytes < PrefixLength) {  	_packageLength |= (data [i] << (_prefixBytes * 8));  	// little-endian order  	_prefixBytes += 1;  	i += 1;  	if (_prefixBytes == PrefixLength) {  		if (_packageLength <= 0 || _packageLength > _maxPackageSize) {  			Log.Error ("FRAMING ERROR! Data:");  			Log.Error (Helper.FormatBinaryDump (bytes));  			throw new PackageFramingException (string.Format ("Package size is out of bounds: {0} (max: {1})."' _packageLength' _maxPackageSize));  		}  		_packageLength += PrefixLength;  		// we need to read suffix as well  	}  } else {  	int copyCnt = Math.Min (bytes.Count + bytes.Offset - i' _packageLength - (int)_memStream.Length);  	_memStream.Write (bytes.Array' i' copyCnt);  	i += copyCnt;  	if (_memStream.Length == _packageLength) {  		#if DEBUG  		var buf = _memStream.GetBuffer ();  		int suffixLength = (buf [_packageLength - 4] << 0) | (buf [_packageLength - 3] << 8) | (buf [_packageLength - 2] << 16) | (buf [_packageLength - 1] << 24);  		if (_packageLength - PrefixLength != suffixLength) {  			throw new Exception (string.Format ("Prefix length: {0} is not equal to suffix length: {1}."' _packageLength - PrefixLength' suffixLength));  		}  		#endif  		_memStream.SetLength (_packageLength - PrefixLength);  		// remove suffix length  		_memStream.Position = 0;  		_packageHandler (_binaryReader);  		_memStream.SetLength (0);  		_prefixBytes = 0;  		_packageLength = 0;  	}  }  
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: if (_prefixBytes < PrefixLength) {  	_packageLength |= (data [i] << (_prefixBytes * 8));  	// little-endian order  	_prefixBytes += 1;  	i += 1;  	if (_prefixBytes == PrefixLength) {  		if (_packageLength <= 0 || _packageLength > _maxPackageSize) {  			Log.Error ("FRAMING ERROR! Data:");  			Log.Error (Helper.FormatBinaryDump (bytes));  			throw new PackageFramingException (string.Format ("Package size is out of bounds: {0} (max: {1})."' _packageLength' _maxPackageSize));  		}  		_packageLength += PrefixLength;  		// we need to read suffix as well  	}  } else {  	int copyCnt = Math.Min (bytes.Count + bytes.Offset - i' _packageLength - (int)_memStream.Length);  	_memStream.Write (bytes.Array' i' copyCnt);  	i += copyCnt;  	if (_memStream.Length == _packageLength) {  		#if DEBUG  		var buf = _memStream.GetBuffer ();  		int suffixLength = (buf [_packageLength - 4] << 0) | (buf [_packageLength - 3] << 8) | (buf [_packageLength - 2] << 16) | (buf [_packageLength - 1] << 24);  		if (_packageLength - PrefixLength != suffixLength) {  			throw new Exception (string.Format ("Prefix length: {0} is not equal to suffix length: {1}."' _packageLength - PrefixLength' suffixLength));  		}  		#endif  		_memStream.SetLength (_packageLength - PrefixLength);  		// remove suffix length  		_memStream.Position = 0;  		_packageHandler (_binaryReader);  		_memStream.SetLength (0);  		_prefixBytes = 0;  		_packageLength = 0;  	}  }  
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: if (_prefixBytes < PrefixLength) {  	_packageLength |= (data [i] << (_prefixBytes * 8));  	// little-endian order  	_prefixBytes += 1;  	i += 1;  	if (_prefixBytes == PrefixLength) {  		if (_packageLength <= 0 || _packageLength > _maxPackageSize) {  			Log.Error ("FRAMING ERROR! Data:");  			Log.Error (Helper.FormatBinaryDump (bytes));  			throw new PackageFramingException (string.Format ("Package size is out of bounds: {0} (max: {1})."' _packageLength' _maxPackageSize));  		}  		_packageLength += PrefixLength;  		// we need to read suffix as well  	}  } else {  	int copyCnt = Math.Min (bytes.Count + bytes.Offset - i' _packageLength - (int)_memStream.Length);  	_memStream.Write (bytes.Array' i' copyCnt);  	i += copyCnt;  	if (_memStream.Length == _packageLength) {  		#if DEBUG  		var buf = _memStream.GetBuffer ();  		int suffixLength = (buf [_packageLength - 4] << 0) | (buf [_packageLength - 3] << 8) | (buf [_packageLength - 2] << 16) | (buf [_packageLength - 1] << 24);  		if (_packageLength - PrefixLength != suffixLength) {  			throw new Exception (string.Format ("Prefix length: {0} is not equal to suffix length: {1}."' _packageLength - PrefixLength' suffixLength));  		}  		#endif  		_memStream.SetLength (_packageLength - PrefixLength);  		// remove suffix length  		_memStream.Position = 0;  		_packageHandler (_binaryReader);  		_memStream.SetLength (0);  		_prefixBytes = 0;  		_packageLength = 0;  	}  }  
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: if (_prefixBytes < PrefixLength) {  	_packageLength |= (data [i] << (_prefixBytes * 8));  	// little-endian order  	_prefixBytes += 1;  	i += 1;  	if (_prefixBytes == PrefixLength) {  		if (_packageLength <= 0 || _packageLength > _maxPackageSize) {  			Log.Error ("FRAMING ERROR! Data:");  			Log.Error (Helper.FormatBinaryDump (bytes));  			throw new PackageFramingException (string.Format ("Package size is out of bounds: {0} (max: {1})."' _packageLength' _maxPackageSize));  		}  		_packageLength += PrefixLength;  		// we need to read suffix as well  	}  } else {  	int copyCnt = Math.Min (bytes.Count + bytes.Offset - i' _packageLength - (int)_memStream.Length);  	_memStream.Write (bytes.Array' i' copyCnt);  	i += copyCnt;  	if (_memStream.Length == _packageLength) {  		#if DEBUG  		var buf = _memStream.GetBuffer ();  		int suffixLength = (buf [_packageLength - 4] << 0) | (buf [_packageLength - 3] << 8) | (buf [_packageLength - 2] << 16) | (buf [_packageLength - 1] << 24);  		if (_packageLength - PrefixLength != suffixLength) {  			throw new Exception (string.Format ("Prefix length: {0} is not equal to suffix length: {1}."' _packageLength - PrefixLength' suffixLength));  		}  		#endif  		_memStream.SetLength (_packageLength - PrefixLength);  		// remove suffix length  		_memStream.Position = 0;  		_packageHandler (_binaryReader);  		_memStream.SetLength (0);  		_prefixBytes = 0;  		_packageLength = 0;  	}  }  
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: if (_prefixBytes < PrefixLength) {  	_packageLength |= (data [i] << (_prefixBytes * 8));  	// little-endian order  	_prefixBytes += 1;  	i += 1;  	if (_prefixBytes == PrefixLength) {  		if (_packageLength <= 0 || _packageLength > _maxPackageSize) {  			Log.Error ("FRAMING ERROR! Data:");  			Log.Error (Helper.FormatBinaryDump (bytes));  			throw new PackageFramingException (string.Format ("Package size is out of bounds: {0} (max: {1})."' _packageLength' _maxPackageSize));  		}  		_packageLength += PrefixLength;  		// we need to read suffix as well  	}  } else {  	int copyCnt = Math.Min (bytes.Count + bytes.Offset - i' _packageLength - (int)_memStream.Length);  	_memStream.Write (bytes.Array' i' copyCnt);  	i += copyCnt;  	if (_memStream.Length == _packageLength) {  		#if DEBUG  		var buf = _memStream.GetBuffer ();  		int suffixLength = (buf [_packageLength - 4] << 0) | (buf [_packageLength - 3] << 8) | (buf [_packageLength - 2] << 16) | (buf [_packageLength - 1] << 24);  		if (_packageLength - PrefixLength != suffixLength) {  			throw new Exception (string.Format ("Prefix length: {0} is not equal to suffix length: {1}."' _packageLength - PrefixLength' suffixLength));  		}  		#endif  		_memStream.SetLength (_packageLength - PrefixLength);  		// remove suffix length  		_memStream.Position = 0;  		_packageHandler (_binaryReader);  		_memStream.SetLength (0);  		_prefixBytes = 0;  		_packageLength = 0;  	}  }  
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: if (_prefixBytes < PrefixLength) {  	_packageLength |= (data [i] << (_prefixBytes * 8));  	// little-endian order  	_prefixBytes += 1;  	i += 1;  	if (_prefixBytes == PrefixLength) {  		if (_packageLength <= 0 || _packageLength > _maxPackageSize) {  			Log.Error ("FRAMING ERROR! Data:");  			Log.Error (Helper.FormatBinaryDump (bytes));  			throw new PackageFramingException (string.Format ("Package size is out of bounds: {0} (max: {1})."' _packageLength' _maxPackageSize));  		}  		_packageLength += PrefixLength;  		// we need to read suffix as well  	}  } else {  	int copyCnt = Math.Min (bytes.Count + bytes.Offset - i' _packageLength - (int)_memStream.Length);  	_memStream.Write (bytes.Array' i' copyCnt);  	i += copyCnt;  	if (_memStream.Length == _packageLength) {  		#if DEBUG  		var buf = _memStream.GetBuffer ();  		int suffixLength = (buf [_packageLength - 4] << 0) | (buf [_packageLength - 3] << 8) | (buf [_packageLength - 2] << 16) | (buf [_packageLength - 1] << 24);  		if (_packageLength - PrefixLength != suffixLength) {  			throw new Exception (string.Format ("Prefix length: {0} is not equal to suffix length: {1}."' _packageLength - PrefixLength' suffixLength));  		}  		#endif  		_memStream.SetLength (_packageLength - PrefixLength);  		// remove suffix length  		_memStream.Position = 0;  		_packageHandler (_binaryReader);  		_memStream.SetLength (0);  		_prefixBytes = 0;  		_packageLength = 0;  	}  }  
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: _packageLength |= (data [i] << (_prefixBytes * 8));  
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: if (_memStream.Length == _packageLength) {  	#if DEBUG  	var buf = _memStream.GetBuffer ();  	int suffixLength = (buf [_packageLength - 4] << 0) | (buf [_packageLength - 3] << 8) | (buf [_packageLength - 2] << 16) | (buf [_packageLength - 1] << 24);  	if (_packageLength - PrefixLength != suffixLength) {  		throw new Exception (string.Format ("Prefix length: {0} is not equal to suffix length: {1}."' _packageLength - PrefixLength' suffixLength));  	}  	#endif  	_memStream.SetLength (_packageLength - PrefixLength);  	// remove suffix length  	_memStream.Position = 0;  	_packageHandler (_binaryReader);  	_memStream.SetLength (0);  	_prefixBytes = 0;  	_packageLength = 0;  }  
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: if (_memStream.Length == _packageLength) {  	#if DEBUG  	var buf = _memStream.GetBuffer ();  	int suffixLength = (buf [_packageLength - 4] << 0) | (buf [_packageLength - 3] << 8) | (buf [_packageLength - 2] << 16) | (buf [_packageLength - 1] << 24);  	if (_packageLength - PrefixLength != suffixLength) {  		throw new Exception (string.Format ("Prefix length: {0} is not equal to suffix length: {1}."' _packageLength - PrefixLength' suffixLength));  	}  	#endif  	_memStream.SetLength (_packageLength - PrefixLength);  	// remove suffix length  	_memStream.Position = 0;  	_packageHandler (_binaryReader);  	_memStream.SetLength (0);  	_prefixBytes = 0;  	_packageLength = 0;  }  
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: if (_memStream.Length == _packageLength) {  	#if DEBUG  	var buf = _memStream.GetBuffer ();  	int suffixLength = (buf [_packageLength - 4] << 0) | (buf [_packageLength - 3] << 8) | (buf [_packageLength - 2] << 16) | (buf [_packageLength - 1] << 24);  	if (_packageLength - PrefixLength != suffixLength) {  		throw new Exception (string.Format ("Prefix length: {0} is not equal to suffix length: {1}."' _packageLength - PrefixLength' suffixLength));  	}  	#endif  	_memStream.SetLength (_packageLength - PrefixLength);  	// remove suffix length  	_memStream.Position = 0;  	_packageHandler (_binaryReader);  	_memStream.SetLength (0);  	_prefixBytes = 0;  	_packageLength = 0;  }  
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: if (_memStream.Length == _packageLength) {  	#if DEBUG  	var buf = _memStream.GetBuffer ();  	int suffixLength = (buf [_packageLength - 4] << 0) | (buf [_packageLength - 3] << 8) | (buf [_packageLength - 2] << 16) | (buf [_packageLength - 1] << 24);  	if (_packageLength - PrefixLength != suffixLength) {  		throw new Exception (string.Format ("Prefix length: {0} is not equal to suffix length: {1}."' _packageLength - PrefixLength' suffixLength));  	}  	#endif  	_memStream.SetLength (_packageLength - PrefixLength);  	// remove suffix length  	_memStream.Position = 0;  	_packageHandler (_binaryReader);  	_memStream.SetLength (0);  	_prefixBytes = 0;  	_packageLength = 0;  }  
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: if (_memStream.Length == _packageLength) {  	#if DEBUG  	var buf = _memStream.GetBuffer ();  	int suffixLength = (buf [_packageLength - 4] << 0) | (buf [_packageLength - 3] << 8) | (buf [_packageLength - 2] << 16) | (buf [_packageLength - 1] << 24);  	if (_packageLength - PrefixLength != suffixLength) {  		throw new Exception (string.Format ("Prefix length: {0} is not equal to suffix length: {1}."' _packageLength - PrefixLength' suffixLength));  	}  	#endif  	_memStream.SetLength (_packageLength - PrefixLength);  	// remove suffix length  	_memStream.Position = 0;  	_packageHandler (_binaryReader);  	_memStream.SetLength (0);  	_prefixBytes = 0;  	_packageLength = 0;  }  
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: if (_memStream.Length == _packageLength) {  	#if DEBUG  	var buf = _memStream.GetBuffer ();  	int suffixLength = (buf [_packageLength - 4] << 0) | (buf [_packageLength - 3] << 8) | (buf [_packageLength - 2] << 16) | (buf [_packageLength - 1] << 24);  	if (_packageLength - PrefixLength != suffixLength) {  		throw new Exception (string.Format ("Prefix length: {0} is not equal to suffix length: {1}."' _packageLength - PrefixLength' suffixLength));  	}  	#endif  	_memStream.SetLength (_packageLength - PrefixLength);  	// remove suffix length  	_memStream.Position = 0;  	_packageHandler (_binaryReader);  	_memStream.SetLength (0);  	_prefixBytes = 0;  	_packageLength = 0;  }  
Magic Number,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,FromFile,The following statement contains a magic number: using (var f = File.OpenRead (filename)) {  	// calculate real MD5 hash except first 32 bytes which are string representation of stored hash  	f.Position = 32;  	var realHash = MD5Hash.GetHashFor (f);  	f.Position = 0;  	using (var reader = new StreamReader (f)) {  		ReadAndCheckHash (reader' realHash);  		// at this point we can assume the format is ok' so actually no need to check errors.  		var version = ReadVersion (reader);  		var checkpoints = ReadCheckpoints (reader);  		var prepareCheckpoint = checkpoints.PreparePosition;  		var commitCheckpoint = checkpoints.CommitPosition;  		var tables = loadPTables ? LoadPTables (reader' filename' checkpoints' cacheDepth) : new List<List<PTable>> ();  		if (!loadPTables && reader.ReadLine () != null)  			throw new CorruptIndexException (string.Format ("Negative prepare/commit checkpoint in non-empty IndexMap: {0}."' checkpoints));  		return new IndexMap (version' tables' prepareCheckpoint' commitCheckpoint' maxTablesPerLevel);  	}  }  
Magic Number,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,FromFile,The following statement contains a magic number: f.Position = 32;  
Magic Number,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,ReadAndCheckHash,The following statement contains a magic number: if (text.Length != 32 || !text.All (x => char.IsDigit (x) || (x >= 'A' && x <= 'F')))  	throw new CorruptIndexException (string.Format ("Corrupted IndexMap MD5 hash. Hash ({0}): {1}."' text.Length' text));  
Magic Number,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,ReadAndCheckHash,The following statement contains a magic number: for (int i = 0; i < 16; ++i) {  	expectedHash [i] = Convert.ToByte (text.Substring (i * 2' 2)' 16);  }  
Magic Number,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,ReadAndCheckHash,The following statement contains a magic number: for (int i = 0; i < 16; ++i) {  	expectedHash [i] = Convert.ToByte (text.Substring (i * 2' 2)' 16);  }  
Magic Number,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,ReadAndCheckHash,The following statement contains a magic number: for (int i = 0; i < 16; ++i) {  	expectedHash [i] = Convert.ToByte (text.Substring (i * 2' 2)' 16);  }  
Magic Number,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,ReadAndCheckHash,The following statement contains a magic number: for (int i = 0; i < 16; ++i) {  	expectedHash [i] = Convert.ToByte (text.Substring (i * 2' 2)' 16);  }  
Magic Number,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,ReadAndCheckHash,The following statement contains a magic number: expectedHash [i] = Convert.ToByte (text.Substring (i * 2' 2)' 16);  
Magic Number,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,ReadAndCheckHash,The following statement contains a magic number: expectedHash [i] = Convert.ToByte (text.Substring (i * 2' 2)' 16);  
Magic Number,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,ReadAndCheckHash,The following statement contains a magic number: expectedHash [i] = Convert.ToByte (text.Substring (i * 2' 2)' 16);  
Magic Number,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,LoadPTables,The following statement contains a magic number: while ((text = reader.ReadLine ()) != null) {  	if (checkpoints.PreparePosition < 0 || checkpoints.CommitPosition < 0)  		throw new CorruptIndexException (string.Format ("Negative prepare/commit checkpoint in non-empty IndexMap: {0}."' checkpoints));  	PTable ptable = null;  	var pieces = text.Split (''');  	try {  		var level = int.Parse (pieces [0]);  		var position = int.Parse (pieces [1]);  		var file = pieces [2];  		var path = Path.GetDirectoryName (indexmapFilename);  		var ptablePath = Path.Combine (path' file);  		ptable = PTable.FromFile (ptablePath' cacheDepth);  		CreateIfNeeded (level' tables);  		tables [level].Insert (position' ptable);  	} catch (Exception exc) {  		// if PTable file path was correct' but data is corrupted' we still need to dispose opened streams  		if (ptable != null)  			ptable.Dispose ();  		// also dispose all previously loaded correct PTables  		for (int i = 0; i < tables.Count; ++i) {  			for (int j = 0; j < tables [i].Count; ++j) {  				tables [i] [j].Dispose ();  			}  		}  		throw new CorruptIndexException ("Error while loading IndexMap."' exc);  	}  }  
Magic Number,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,LoadPTables,The following statement contains a magic number: try {  	var level = int.Parse (pieces [0]);  	var position = int.Parse (pieces [1]);  	var file = pieces [2];  	var path = Path.GetDirectoryName (indexmapFilename);  	var ptablePath = Path.Combine (path' file);  	ptable = PTable.FromFile (ptablePath' cacheDepth);  	CreateIfNeeded (level' tables);  	tables [level].Insert (position' ptable);  } catch (Exception exc) {  	// if PTable file path was correct' but data is corrupted' we still need to dispose opened streams  	if (ptable != null)  		ptable.Dispose ();  	// also dispose all previously loaded correct PTables  	for (int i = 0; i < tables.Count; ++i) {  		for (int j = 0; j < tables [i].Count; ++j) {  			tables [i] [j].Dispose ();  		}  	}  	throw new CorruptIndexException ("Error while loading IndexMap."' exc);  }  
Magic Number,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,SaveToFile,The following statement contains a magic number: using (var memStream = new MemoryStream ())  	using (var memWriter = new StreamWriter (memStream)) {  		memWriter.WriteLine (new string ('0'' 32));  		// pre-allocate space for MD5 hash  		memWriter.WriteLine (Version);  		memWriter.WriteLine ("{0}/{1}"' PrepareCheckpoint' CommitCheckpoint);  		for (int i = 0; i < _map.Count; i++) {  			for (int j = 0; j < _map [i].Count; j++) {  				memWriter.WriteLine ("{0}'{1}'{2}"' i' j' new FileInfo (_map [i] [j].Filename).Name);  			}  		}  		memWriter.Flush ();  		memStream.Position = 32;  		var hash = MD5Hash.GetHashFor (memStream);  		memStream.Position = 0;  		foreach (var t in hash) {  			memWriter.Write (t.ToString ("X2"));  		}  		memWriter.Flush ();  		memStream.Position = 0;  		using (var f = File.OpenWrite (tmpIndexMap)) {  			f.Write (memStream.GetBuffer ()' 0' (int)memStream.Length);  			f.FlushToDisk ();  		}  	}  
Magic Number,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,SaveToFile,The following statement contains a magic number: using (var memStream = new MemoryStream ())  	using (var memWriter = new StreamWriter (memStream)) {  		memWriter.WriteLine (new string ('0'' 32));  		// pre-allocate space for MD5 hash  		memWriter.WriteLine (Version);  		memWriter.WriteLine ("{0}/{1}"' PrepareCheckpoint' CommitCheckpoint);  		for (int i = 0; i < _map.Count; i++) {  			for (int j = 0; j < _map [i].Count; j++) {  				memWriter.WriteLine ("{0}'{1}'{2}"' i' j' new FileInfo (_map [i] [j].Filename).Name);  			}  		}  		memWriter.Flush ();  		memStream.Position = 32;  		var hash = MD5Hash.GetHashFor (memStream);  		memStream.Position = 0;  		foreach (var t in hash) {  			memWriter.Write (t.ToString ("X2"));  		}  		memWriter.Flush ();  		memStream.Position = 0;  		using (var f = File.OpenWrite (tmpIndexMap)) {  			f.Write (memStream.GetBuffer ()' 0' (int)memStream.Length);  			f.FlushToDisk ();  		}  	}  
Magic Number,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,SaveToFile,The following statement contains a magic number: using (var memWriter = new StreamWriter (memStream)) {  	memWriter.WriteLine (new string ('0'' 32));  	// pre-allocate space for MD5 hash  	memWriter.WriteLine (Version);  	memWriter.WriteLine ("{0}/{1}"' PrepareCheckpoint' CommitCheckpoint);  	for (int i = 0; i < _map.Count; i++) {  		for (int j = 0; j < _map [i].Count; j++) {  			memWriter.WriteLine ("{0}'{1}'{2}"' i' j' new FileInfo (_map [i] [j].Filename).Name);  		}  	}  	memWriter.Flush ();  	memStream.Position = 32;  	var hash = MD5Hash.GetHashFor (memStream);  	memStream.Position = 0;  	foreach (var t in hash) {  		memWriter.Write (t.ToString ("X2"));  	}  	memWriter.Flush ();  	memStream.Position = 0;  	using (var f = File.OpenWrite (tmpIndexMap)) {  		f.Write (memStream.GetBuffer ()' 0' (int)memStream.Length);  		f.FlushToDisk ();  	}  }  
Magic Number,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,SaveToFile,The following statement contains a magic number: using (var memWriter = new StreamWriter (memStream)) {  	memWriter.WriteLine (new string ('0'' 32));  	// pre-allocate space for MD5 hash  	memWriter.WriteLine (Version);  	memWriter.WriteLine ("{0}/{1}"' PrepareCheckpoint' CommitCheckpoint);  	for (int i = 0; i < _map.Count; i++) {  		for (int j = 0; j < _map [i].Count; j++) {  			memWriter.WriteLine ("{0}'{1}'{2}"' i' j' new FileInfo (_map [i] [j].Filename).Name);  		}  	}  	memWriter.Flush ();  	memStream.Position = 32;  	var hash = MD5Hash.GetHashFor (memStream);  	memStream.Position = 0;  	foreach (var t in hash) {  		memWriter.Write (t.ToString ("X2"));  	}  	memWriter.Flush ();  	memStream.Position = 0;  	using (var f = File.OpenWrite (tmpIndexMap)) {  		f.Write (memStream.GetBuffer ()' 0' (int)memStream.Length);  		f.FlushToDisk ();  	}  }  
Magic Number,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,SaveToFile,The following statement contains a magic number: memWriter.WriteLine (new string ('0'' 32));  
Magic Number,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,SaveToFile,The following statement contains a magic number: memStream.Position = 32;  
Magic Number,EventStore.Core.Index,IndexMap,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,SaveToFile,The following statement contains a magic number: while (trial < 5) {  	try {  		if (File.Exists (filename))  			File.Delete (filename);  		File.Move (tmpIndexMap' filename);  		break;  	} catch (IOException exc) {  		Log.DebugException (exc' "Failed trial to replace indexmap.");  		trial += 1;  	}  }  
Magic Number,EventStore.Core.Index,HashListMemTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\HashListMemTable.cs,AddEntries,The following statement contains a magic number: if (!Monitor.TryEnter (list' 10000))  	throw new UnableToAcquireLockInReasonableTimeException ();  
Magic Number,EventStore.Core.Index,HashListMemTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\HashListMemTable.cs,TryGetOneValue,The following statement contains a magic number: if (_hash.TryGetValue (hash' out list)) {  	if (!Monitor.TryEnter (list' 10000))  		throw new UnableToAcquireLockInReasonableTimeException ();  	try {  		int endIdx = list.UpperBound (new Entry (number' long.MaxValue));  		if (endIdx == -1)  			return false;  		var key = list.Keys [endIdx];  		if (key.EvNum == number) {  			position = key.LogPos;  			return true;  		}  	} finally {  		Monitor.Exit (list);  	}  }  
Magic Number,EventStore.Core.Index,HashListMemTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\HashListMemTable.cs,TryGetOneValue,The following statement contains a magic number: if (!Monitor.TryEnter (list' 10000))  	throw new UnableToAcquireLockInReasonableTimeException ();  
Magic Number,EventStore.Core.Index,HashListMemTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\HashListMemTable.cs,TryGetLatestEntry,The following statement contains a magic number: if (_hash.TryGetValue (hash' out list)) {  	if (!Monitor.TryEnter (list' 10000))  		throw new UnableToAcquireLockInReasonableTimeException ();  	try {  		var latest = list.Keys [list.Count - 1];  		entry = new IndexEntry (hash' latest.EvNum' latest.LogPos);  		return true;  	} finally {  		Monitor.Exit (list);  	}  }  
Magic Number,EventStore.Core.Index,HashListMemTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\HashListMemTable.cs,TryGetLatestEntry,The following statement contains a magic number: if (!Monitor.TryEnter (list' 10000))  	throw new UnableToAcquireLockInReasonableTimeException ();  
Magic Number,EventStore.Core.Index,HashListMemTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\HashListMemTable.cs,TryGetOldestEntry,The following statement contains a magic number: if (_hash.TryGetValue (hash' out list)) {  	if (!Monitor.TryEnter (list' 10000))  		throw new UnableToAcquireLockInReasonableTimeException ();  	try {  		var oldest = list.Keys [0];  		entry = new IndexEntry (hash' oldest.EvNum' oldest.LogPos);  		return true;  	} finally {  		Monitor.Exit (list);  	}  }  
Magic Number,EventStore.Core.Index,HashListMemTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\HashListMemTable.cs,TryGetOldestEntry,The following statement contains a magic number: if (!Monitor.TryEnter (list' 10000))  	throw new UnableToAcquireLockInReasonableTimeException ();  
Magic Number,EventStore.Core.Index,HashListMemTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\HashListMemTable.cs,GetRange,The following statement contains a magic number: if (_hash.TryGetValue (hash' out list)) {  	if (!Monitor.TryEnter (list' 10000))  		throw new UnableToAcquireLockInReasonableTimeException ();  	try {  		var endIdx = list.UpperBound (new Entry (endNumber' long.MaxValue));  		for (int i = endIdx; i >= 0; i--) {  			var key = list.Keys [i];  			if (key.EvNum < startNumber || ret.Count == limit)  				break;  			ret.Add (new IndexEntry (hash' version: key.EvNum' position: key.LogPos));  		}  	} finally {  		Monitor.Exit (list);  	}  }  
Magic Number,EventStore.Core.Index,HashListMemTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\HashListMemTable.cs,GetRange,The following statement contains a magic number: if (!Monitor.TryEnter (list' 10000))  	throw new UnableToAcquireLockInReasonableTimeException ();  
Magic Number,EventStore.Core.Index,HashListMemTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\HashListMemTable.cs,GetHash,The following statement contains a magic number: return _version == PTableVersions.IndexV1 ? hash >> 32 : hash;  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,GetDepth,The following statement contains a magic number: if ((2L << 28) * 4096L < fileSize)  	return 28;  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,GetDepth,The following statement contains a magic number: if ((2L << 28) * 4096L < fileSize)  	return 28;  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,GetDepth,The following statement contains a magic number: return 28;  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,GetDepth,The following statement contains a magic number: for (int i = 27; i > minDepth; i--) {  	if ((2L << i) * 4096L < fileSize) {  		return i + 1;  	}  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: if (depth < 0 || depth > 30)  	throw new ArgumentOutOfRangeException ("depth");  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: using (var stream = UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.Read' FileShare.Read' false' 4096' 4096' false' 4096)) {  	#endif  	try {  		int midpointsCount;  		Midpoint[] midpoints;  		using (MD5 md5 = MD5.Create ()) {  			try {  				midpointsCount = (int)Math.Max (2L' Math.Min ((long)1 << depth' count));  				midpoints = new Midpoint[midpointsCount];  			} catch (OutOfMemoryException exc) {  				throw new PossibleToHandleOutOfMemoryException ("Failed to allocate memory for Midpoint cache."' exc);  			}  			stream.Seek (0' SeekOrigin.Begin);  			stream.Read (buffer' 0' PTableHeader.Size);  			md5.TransformBlock (buffer' 0' PTableHeader.Size' null' 0);  			long previousNextIndex = long.MinValue;  			var previousKey = new IndexEntryKey (long.MaxValue' long.MaxValue);  			for (long k = 0; k < midpointsCount; ++k) {  				var nextIndex = (long)k * (count - 1) / (midpointsCount - 1);  				if (previousNextIndex != nextIndex) {  					ReadUntilWithMd5 (PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);  					stream.Read (buffer' 0' _indexKeySize);  					md5.TransformBlock (buffer' 0' _indexKeySize' null' 0);  					IndexEntryKey key;  					if (_version == PTableVersions.IndexV1) {  						key = new IndexEntryKey (BitConverter.ToUInt32 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  					} else if (_version == PTableVersions.IndexV2) {  						key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  					} else {  						key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  					}  					midpoints [k] = new Midpoint (key' nextIndex);  					previousNextIndex = nextIndex;  					previousKey = key;  				} else {  					midpoints [k] = new Midpoint (previousKey' previousNextIndex);  				}  			}  			ReadUntilWithMd5 (stream.Length - MD5Size' stream' md5);  			//verify hash (should be at stream.length - MD5Size)  			md5.TransformFinalBlock (Empty.ByteArray' 0' 0);  			var fileHash = new byte[MD5Size];  			stream.Read (fileHash' 0' MD5Size);  			ValidateHash (md5.Hash' fileHash);  			return midpoints;  		}  	} catch {  		Dispose ();  		throw;  	}  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: using (var stream = UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.Read' FileShare.Read' false' 4096' 4096' false' 4096)) {  	#endif  	try {  		int midpointsCount;  		Midpoint[] midpoints;  		using (MD5 md5 = MD5.Create ()) {  			try {  				midpointsCount = (int)Math.Max (2L' Math.Min ((long)1 << depth' count));  				midpoints = new Midpoint[midpointsCount];  			} catch (OutOfMemoryException exc) {  				throw new PossibleToHandleOutOfMemoryException ("Failed to allocate memory for Midpoint cache."' exc);  			}  			stream.Seek (0' SeekOrigin.Begin);  			stream.Read (buffer' 0' PTableHeader.Size);  			md5.TransformBlock (buffer' 0' PTableHeader.Size' null' 0);  			long previousNextIndex = long.MinValue;  			var previousKey = new IndexEntryKey (long.MaxValue' long.MaxValue);  			for (long k = 0; k < midpointsCount; ++k) {  				var nextIndex = (long)k * (count - 1) / (midpointsCount - 1);  				if (previousNextIndex != nextIndex) {  					ReadUntilWithMd5 (PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);  					stream.Read (buffer' 0' _indexKeySize);  					md5.TransformBlock (buffer' 0' _indexKeySize' null' 0);  					IndexEntryKey key;  					if (_version == PTableVersions.IndexV1) {  						key = new IndexEntryKey (BitConverter.ToUInt32 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  					} else if (_version == PTableVersions.IndexV2) {  						key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  					} else {  						key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  					}  					midpoints [k] = new Midpoint (key' nextIndex);  					previousNextIndex = nextIndex;  					previousKey = key;  				} else {  					midpoints [k] = new Midpoint (previousKey' previousNextIndex);  				}  			}  			ReadUntilWithMd5 (stream.Length - MD5Size' stream' md5);  			//verify hash (should be at stream.length - MD5Size)  			md5.TransformFinalBlock (Empty.ByteArray' 0' 0);  			var fileHash = new byte[MD5Size];  			stream.Read (fileHash' 0' MD5Size);  			ValidateHash (md5.Hash' fileHash);  			return midpoints;  		}  	} catch {  		Dispose ();  		throw;  	}  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: using (var stream = UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.Read' FileShare.Read' false' 4096' 4096' false' 4096)) {  	#endif  	try {  		int midpointsCount;  		Midpoint[] midpoints;  		using (MD5 md5 = MD5.Create ()) {  			try {  				midpointsCount = (int)Math.Max (2L' Math.Min ((long)1 << depth' count));  				midpoints = new Midpoint[midpointsCount];  			} catch (OutOfMemoryException exc) {  				throw new PossibleToHandleOutOfMemoryException ("Failed to allocate memory for Midpoint cache."' exc);  			}  			stream.Seek (0' SeekOrigin.Begin);  			stream.Read (buffer' 0' PTableHeader.Size);  			md5.TransformBlock (buffer' 0' PTableHeader.Size' null' 0);  			long previousNextIndex = long.MinValue;  			var previousKey = new IndexEntryKey (long.MaxValue' long.MaxValue);  			for (long k = 0; k < midpointsCount; ++k) {  				var nextIndex = (long)k * (count - 1) / (midpointsCount - 1);  				if (previousNextIndex != nextIndex) {  					ReadUntilWithMd5 (PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);  					stream.Read (buffer' 0' _indexKeySize);  					md5.TransformBlock (buffer' 0' _indexKeySize' null' 0);  					IndexEntryKey key;  					if (_version == PTableVersions.IndexV1) {  						key = new IndexEntryKey (BitConverter.ToUInt32 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  					} else if (_version == PTableVersions.IndexV2) {  						key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  					} else {  						key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  					}  					midpoints [k] = new Midpoint (key' nextIndex);  					previousNextIndex = nextIndex;  					previousKey = key;  				} else {  					midpoints [k] = new Midpoint (previousKey' previousNextIndex);  				}  			}  			ReadUntilWithMd5 (stream.Length - MD5Size' stream' md5);  			//verify hash (should be at stream.length - MD5Size)  			md5.TransformFinalBlock (Empty.ByteArray' 0' 0);  			var fileHash = new byte[MD5Size];  			stream.Read (fileHash' 0' MD5Size);  			ValidateHash (md5.Hash' fileHash);  			return midpoints;  		}  	} catch {  		Dispose ();  		throw;  	}  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: using (var stream = UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.Read' FileShare.Read' false' 4096' 4096' false' 4096)) {  	#endif  	try {  		int midpointsCount;  		Midpoint[] midpoints;  		using (MD5 md5 = MD5.Create ()) {  			try {  				midpointsCount = (int)Math.Max (2L' Math.Min ((long)1 << depth' count));  				midpoints = new Midpoint[midpointsCount];  			} catch (OutOfMemoryException exc) {  				throw new PossibleToHandleOutOfMemoryException ("Failed to allocate memory for Midpoint cache."' exc);  			}  			stream.Seek (0' SeekOrigin.Begin);  			stream.Read (buffer' 0' PTableHeader.Size);  			md5.TransformBlock (buffer' 0' PTableHeader.Size' null' 0);  			long previousNextIndex = long.MinValue;  			var previousKey = new IndexEntryKey (long.MaxValue' long.MaxValue);  			for (long k = 0; k < midpointsCount; ++k) {  				var nextIndex = (long)k * (count - 1) / (midpointsCount - 1);  				if (previousNextIndex != nextIndex) {  					ReadUntilWithMd5 (PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);  					stream.Read (buffer' 0' _indexKeySize);  					md5.TransformBlock (buffer' 0' _indexKeySize' null' 0);  					IndexEntryKey key;  					if (_version == PTableVersions.IndexV1) {  						key = new IndexEntryKey (BitConverter.ToUInt32 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  					} else if (_version == PTableVersions.IndexV2) {  						key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  					} else {  						key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  					}  					midpoints [k] = new Midpoint (key' nextIndex);  					previousNextIndex = nextIndex;  					previousKey = key;  				} else {  					midpoints [k] = new Midpoint (previousKey' previousNextIndex);  				}  			}  			ReadUntilWithMd5 (stream.Length - MD5Size' stream' md5);  			//verify hash (should be at stream.length - MD5Size)  			md5.TransformFinalBlock (Empty.ByteArray' 0' 0);  			var fileHash = new byte[MD5Size];  			stream.Read (fileHash' 0' MD5Size);  			ValidateHash (md5.Hash' fileHash);  			return midpoints;  		}  	} catch {  		Dispose ();  		throw;  	}  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: using (var stream = UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.Read' FileShare.Read' false' 4096' 4096' false' 4096)) {  	#endif  	try {  		int midpointsCount;  		Midpoint[] midpoints;  		using (MD5 md5 = MD5.Create ()) {  			try {  				midpointsCount = (int)Math.Max (2L' Math.Min ((long)1 << depth' count));  				midpoints = new Midpoint[midpointsCount];  			} catch (OutOfMemoryException exc) {  				throw new PossibleToHandleOutOfMemoryException ("Failed to allocate memory for Midpoint cache."' exc);  			}  			stream.Seek (0' SeekOrigin.Begin);  			stream.Read (buffer' 0' PTableHeader.Size);  			md5.TransformBlock (buffer' 0' PTableHeader.Size' null' 0);  			long previousNextIndex = long.MinValue;  			var previousKey = new IndexEntryKey (long.MaxValue' long.MaxValue);  			for (long k = 0; k < midpointsCount; ++k) {  				var nextIndex = (long)k * (count - 1) / (midpointsCount - 1);  				if (previousNextIndex != nextIndex) {  					ReadUntilWithMd5 (PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);  					stream.Read (buffer' 0' _indexKeySize);  					md5.TransformBlock (buffer' 0' _indexKeySize' null' 0);  					IndexEntryKey key;  					if (_version == PTableVersions.IndexV1) {  						key = new IndexEntryKey (BitConverter.ToUInt32 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  					} else if (_version == PTableVersions.IndexV2) {  						key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  					} else {  						key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  					}  					midpoints [k] = new Midpoint (key' nextIndex);  					previousNextIndex = nextIndex;  					previousKey = key;  				} else {  					midpoints [k] = new Midpoint (previousKey' previousNextIndex);  				}  			}  			ReadUntilWithMd5 (stream.Length - MD5Size' stream' md5);  			//verify hash (should be at stream.length - MD5Size)  			md5.TransformFinalBlock (Empty.ByteArray' 0' 0);  			var fileHash = new byte[MD5Size];  			stream.Read (fileHash' 0' MD5Size);  			ValidateHash (md5.Hash' fileHash);  			return midpoints;  		}  	} catch {  		Dispose ();  		throw;  	}  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: using (var stream = UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.Read' FileShare.Read' false' 4096' 4096' false' 4096)) {  	#endif  	try {  		int midpointsCount;  		Midpoint[] midpoints;  		using (MD5 md5 = MD5.Create ()) {  			try {  				midpointsCount = (int)Math.Max (2L' Math.Min ((long)1 << depth' count));  				midpoints = new Midpoint[midpointsCount];  			} catch (OutOfMemoryException exc) {  				throw new PossibleToHandleOutOfMemoryException ("Failed to allocate memory for Midpoint cache."' exc);  			}  			stream.Seek (0' SeekOrigin.Begin);  			stream.Read (buffer' 0' PTableHeader.Size);  			md5.TransformBlock (buffer' 0' PTableHeader.Size' null' 0);  			long previousNextIndex = long.MinValue;  			var previousKey = new IndexEntryKey (long.MaxValue' long.MaxValue);  			for (long k = 0; k < midpointsCount; ++k) {  				var nextIndex = (long)k * (count - 1) / (midpointsCount - 1);  				if (previousNextIndex != nextIndex) {  					ReadUntilWithMd5 (PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);  					stream.Read (buffer' 0' _indexKeySize);  					md5.TransformBlock (buffer' 0' _indexKeySize' null' 0);  					IndexEntryKey key;  					if (_version == PTableVersions.IndexV1) {  						key = new IndexEntryKey (BitConverter.ToUInt32 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  					} else if (_version == PTableVersions.IndexV2) {  						key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  					} else {  						key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  					}  					midpoints [k] = new Midpoint (key' nextIndex);  					previousNextIndex = nextIndex;  					previousKey = key;  				} else {  					midpoints [k] = new Midpoint (previousKey' previousNextIndex);  				}  			}  			ReadUntilWithMd5 (stream.Length - MD5Size' stream' md5);  			//verify hash (should be at stream.length - MD5Size)  			md5.TransformFinalBlock (Empty.ByteArray' 0' 0);  			var fileHash = new byte[MD5Size];  			stream.Read (fileHash' 0' MD5Size);  			ValidateHash (md5.Hash' fileHash);  			return midpoints;  		}  	} catch {  		Dispose ();  		throw;  	}  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: try {  	int midpointsCount;  	Midpoint[] midpoints;  	using (MD5 md5 = MD5.Create ()) {  		try {  			midpointsCount = (int)Math.Max (2L' Math.Min ((long)1 << depth' count));  			midpoints = new Midpoint[midpointsCount];  		} catch (OutOfMemoryException exc) {  			throw new PossibleToHandleOutOfMemoryException ("Failed to allocate memory for Midpoint cache."' exc);  		}  		stream.Seek (0' SeekOrigin.Begin);  		stream.Read (buffer' 0' PTableHeader.Size);  		md5.TransformBlock (buffer' 0' PTableHeader.Size' null' 0);  		long previousNextIndex = long.MinValue;  		var previousKey = new IndexEntryKey (long.MaxValue' long.MaxValue);  		for (long k = 0; k < midpointsCount; ++k) {  			var nextIndex = (long)k * (count - 1) / (midpointsCount - 1);  			if (previousNextIndex != nextIndex) {  				ReadUntilWithMd5 (PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);  				stream.Read (buffer' 0' _indexKeySize);  				md5.TransformBlock (buffer' 0' _indexKeySize' null' 0);  				IndexEntryKey key;  				if (_version == PTableVersions.IndexV1) {  					key = new IndexEntryKey (BitConverter.ToUInt32 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  				} else if (_version == PTableVersions.IndexV2) {  					key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  				} else {  					key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  				}  				midpoints [k] = new Midpoint (key' nextIndex);  				previousNextIndex = nextIndex;  				previousKey = key;  			} else {  				midpoints [k] = new Midpoint (previousKey' previousNextIndex);  			}  		}  		ReadUntilWithMd5 (stream.Length - MD5Size' stream' md5);  		//verify hash (should be at stream.length - MD5Size)  		md5.TransformFinalBlock (Empty.ByteArray' 0' 0);  		var fileHash = new byte[MD5Size];  		stream.Read (fileHash' 0' MD5Size);  		ValidateHash (md5.Hash' fileHash);  		return midpoints;  	}  } catch {  	Dispose ();  	throw;  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: try {  	int midpointsCount;  	Midpoint[] midpoints;  	using (MD5 md5 = MD5.Create ()) {  		try {  			midpointsCount = (int)Math.Max (2L' Math.Min ((long)1 << depth' count));  			midpoints = new Midpoint[midpointsCount];  		} catch (OutOfMemoryException exc) {  			throw new PossibleToHandleOutOfMemoryException ("Failed to allocate memory for Midpoint cache."' exc);  		}  		stream.Seek (0' SeekOrigin.Begin);  		stream.Read (buffer' 0' PTableHeader.Size);  		md5.TransformBlock (buffer' 0' PTableHeader.Size' null' 0);  		long previousNextIndex = long.MinValue;  		var previousKey = new IndexEntryKey (long.MaxValue' long.MaxValue);  		for (long k = 0; k < midpointsCount; ++k) {  			var nextIndex = (long)k * (count - 1) / (midpointsCount - 1);  			if (previousNextIndex != nextIndex) {  				ReadUntilWithMd5 (PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);  				stream.Read (buffer' 0' _indexKeySize);  				md5.TransformBlock (buffer' 0' _indexKeySize' null' 0);  				IndexEntryKey key;  				if (_version == PTableVersions.IndexV1) {  					key = new IndexEntryKey (BitConverter.ToUInt32 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  				} else if (_version == PTableVersions.IndexV2) {  					key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  				} else {  					key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  				}  				midpoints [k] = new Midpoint (key' nextIndex);  				previousNextIndex = nextIndex;  				previousKey = key;  			} else {  				midpoints [k] = new Midpoint (previousKey' previousNextIndex);  			}  		}  		ReadUntilWithMd5 (stream.Length - MD5Size' stream' md5);  		//verify hash (should be at stream.length - MD5Size)  		md5.TransformFinalBlock (Empty.ByteArray' 0' 0);  		var fileHash = new byte[MD5Size];  		stream.Read (fileHash' 0' MD5Size);  		ValidateHash (md5.Hash' fileHash);  		return midpoints;  	}  } catch {  	Dispose ();  	throw;  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: try {  	int midpointsCount;  	Midpoint[] midpoints;  	using (MD5 md5 = MD5.Create ()) {  		try {  			midpointsCount = (int)Math.Max (2L' Math.Min ((long)1 << depth' count));  			midpoints = new Midpoint[midpointsCount];  		} catch (OutOfMemoryException exc) {  			throw new PossibleToHandleOutOfMemoryException ("Failed to allocate memory for Midpoint cache."' exc);  		}  		stream.Seek (0' SeekOrigin.Begin);  		stream.Read (buffer' 0' PTableHeader.Size);  		md5.TransformBlock (buffer' 0' PTableHeader.Size' null' 0);  		long previousNextIndex = long.MinValue;  		var previousKey = new IndexEntryKey (long.MaxValue' long.MaxValue);  		for (long k = 0; k < midpointsCount; ++k) {  			var nextIndex = (long)k * (count - 1) / (midpointsCount - 1);  			if (previousNextIndex != nextIndex) {  				ReadUntilWithMd5 (PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);  				stream.Read (buffer' 0' _indexKeySize);  				md5.TransformBlock (buffer' 0' _indexKeySize' null' 0);  				IndexEntryKey key;  				if (_version == PTableVersions.IndexV1) {  					key = new IndexEntryKey (BitConverter.ToUInt32 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  				} else if (_version == PTableVersions.IndexV2) {  					key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  				} else {  					key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  				}  				midpoints [k] = new Midpoint (key' nextIndex);  				previousNextIndex = nextIndex;  				previousKey = key;  			} else {  				midpoints [k] = new Midpoint (previousKey' previousNextIndex);  			}  		}  		ReadUntilWithMd5 (stream.Length - MD5Size' stream' md5);  		//verify hash (should be at stream.length - MD5Size)  		md5.TransformFinalBlock (Empty.ByteArray' 0' 0);  		var fileHash = new byte[MD5Size];  		stream.Read (fileHash' 0' MD5Size);  		ValidateHash (md5.Hash' fileHash);  		return midpoints;  	}  } catch {  	Dispose ();  	throw;  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: using (MD5 md5 = MD5.Create ()) {  	try {  		midpointsCount = (int)Math.Max (2L' Math.Min ((long)1 << depth' count));  		midpoints = new Midpoint[midpointsCount];  	} catch (OutOfMemoryException exc) {  		throw new PossibleToHandleOutOfMemoryException ("Failed to allocate memory for Midpoint cache."' exc);  	}  	stream.Seek (0' SeekOrigin.Begin);  	stream.Read (buffer' 0' PTableHeader.Size);  	md5.TransformBlock (buffer' 0' PTableHeader.Size' null' 0);  	long previousNextIndex = long.MinValue;  	var previousKey = new IndexEntryKey (long.MaxValue' long.MaxValue);  	for (long k = 0; k < midpointsCount; ++k) {  		var nextIndex = (long)k * (count - 1) / (midpointsCount - 1);  		if (previousNextIndex != nextIndex) {  			ReadUntilWithMd5 (PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);  			stream.Read (buffer' 0' _indexKeySize);  			md5.TransformBlock (buffer' 0' _indexKeySize' null' 0);  			IndexEntryKey key;  			if (_version == PTableVersions.IndexV1) {  				key = new IndexEntryKey (BitConverter.ToUInt32 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  			} else if (_version == PTableVersions.IndexV2) {  				key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  			} else {  				key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  			}  			midpoints [k] = new Midpoint (key' nextIndex);  			previousNextIndex = nextIndex;  			previousKey = key;  		} else {  			midpoints [k] = new Midpoint (previousKey' previousNextIndex);  		}  	}  	ReadUntilWithMd5 (stream.Length - MD5Size' stream' md5);  	//verify hash (should be at stream.length - MD5Size)  	md5.TransformFinalBlock (Empty.ByteArray' 0' 0);  	var fileHash = new byte[MD5Size];  	stream.Read (fileHash' 0' MD5Size);  	ValidateHash (md5.Hash' fileHash);  	return midpoints;  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: using (MD5 md5 = MD5.Create ()) {  	try {  		midpointsCount = (int)Math.Max (2L' Math.Min ((long)1 << depth' count));  		midpoints = new Midpoint[midpointsCount];  	} catch (OutOfMemoryException exc) {  		throw new PossibleToHandleOutOfMemoryException ("Failed to allocate memory for Midpoint cache."' exc);  	}  	stream.Seek (0' SeekOrigin.Begin);  	stream.Read (buffer' 0' PTableHeader.Size);  	md5.TransformBlock (buffer' 0' PTableHeader.Size' null' 0);  	long previousNextIndex = long.MinValue;  	var previousKey = new IndexEntryKey (long.MaxValue' long.MaxValue);  	for (long k = 0; k < midpointsCount; ++k) {  		var nextIndex = (long)k * (count - 1) / (midpointsCount - 1);  		if (previousNextIndex != nextIndex) {  			ReadUntilWithMd5 (PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);  			stream.Read (buffer' 0' _indexKeySize);  			md5.TransformBlock (buffer' 0' _indexKeySize' null' 0);  			IndexEntryKey key;  			if (_version == PTableVersions.IndexV1) {  				key = new IndexEntryKey (BitConverter.ToUInt32 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  			} else if (_version == PTableVersions.IndexV2) {  				key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  			} else {  				key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  			}  			midpoints [k] = new Midpoint (key' nextIndex);  			previousNextIndex = nextIndex;  			previousKey = key;  		} else {  			midpoints [k] = new Midpoint (previousKey' previousNextIndex);  		}  	}  	ReadUntilWithMd5 (stream.Length - MD5Size' stream' md5);  	//verify hash (should be at stream.length - MD5Size)  	md5.TransformFinalBlock (Empty.ByteArray' 0' 0);  	var fileHash = new byte[MD5Size];  	stream.Read (fileHash' 0' MD5Size);  	ValidateHash (md5.Hash' fileHash);  	return midpoints;  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: using (MD5 md5 = MD5.Create ()) {  	try {  		midpointsCount = (int)Math.Max (2L' Math.Min ((long)1 << depth' count));  		midpoints = new Midpoint[midpointsCount];  	} catch (OutOfMemoryException exc) {  		throw new PossibleToHandleOutOfMemoryException ("Failed to allocate memory for Midpoint cache."' exc);  	}  	stream.Seek (0' SeekOrigin.Begin);  	stream.Read (buffer' 0' PTableHeader.Size);  	md5.TransformBlock (buffer' 0' PTableHeader.Size' null' 0);  	long previousNextIndex = long.MinValue;  	var previousKey = new IndexEntryKey (long.MaxValue' long.MaxValue);  	for (long k = 0; k < midpointsCount; ++k) {  		var nextIndex = (long)k * (count - 1) / (midpointsCount - 1);  		if (previousNextIndex != nextIndex) {  			ReadUntilWithMd5 (PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);  			stream.Read (buffer' 0' _indexKeySize);  			md5.TransformBlock (buffer' 0' _indexKeySize' null' 0);  			IndexEntryKey key;  			if (_version == PTableVersions.IndexV1) {  				key = new IndexEntryKey (BitConverter.ToUInt32 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  			} else if (_version == PTableVersions.IndexV2) {  				key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  			} else {  				key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  			}  			midpoints [k] = new Midpoint (key' nextIndex);  			previousNextIndex = nextIndex;  			previousKey = key;  		} else {  			midpoints [k] = new Midpoint (previousKey' previousNextIndex);  		}  	}  	ReadUntilWithMd5 (stream.Length - MD5Size' stream' md5);  	//verify hash (should be at stream.length - MD5Size)  	md5.TransformFinalBlock (Empty.ByteArray' 0' 0);  	var fileHash = new byte[MD5Size];  	stream.Read (fileHash' 0' MD5Size);  	ValidateHash (md5.Hash' fileHash);  	return midpoints;  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: for (long k = 0; k < midpointsCount; ++k) {  	var nextIndex = (long)k * (count - 1) / (midpointsCount - 1);  	if (previousNextIndex != nextIndex) {  		ReadUntilWithMd5 (PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);  		stream.Read (buffer' 0' _indexKeySize);  		md5.TransformBlock (buffer' 0' _indexKeySize' null' 0);  		IndexEntryKey key;  		if (_version == PTableVersions.IndexV1) {  			key = new IndexEntryKey (BitConverter.ToUInt32 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  		} else if (_version == PTableVersions.IndexV2) {  			key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  		} else {  			key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  		}  		midpoints [k] = new Midpoint (key' nextIndex);  		previousNextIndex = nextIndex;  		previousKey = key;  	} else {  		midpoints [k] = new Midpoint (previousKey' previousNextIndex);  	}  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: for (long k = 0; k < midpointsCount; ++k) {  	var nextIndex = (long)k * (count - 1) / (midpointsCount - 1);  	if (previousNextIndex != nextIndex) {  		ReadUntilWithMd5 (PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);  		stream.Read (buffer' 0' _indexKeySize);  		md5.TransformBlock (buffer' 0' _indexKeySize' null' 0);  		IndexEntryKey key;  		if (_version == PTableVersions.IndexV1) {  			key = new IndexEntryKey (BitConverter.ToUInt32 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  		} else if (_version == PTableVersions.IndexV2) {  			key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  		} else {  			key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  		}  		midpoints [k] = new Midpoint (key' nextIndex);  		previousNextIndex = nextIndex;  		previousKey = key;  	} else {  		midpoints [k] = new Midpoint (previousKey' previousNextIndex);  	}  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: for (long k = 0; k < midpointsCount; ++k) {  	var nextIndex = (long)k * (count - 1) / (midpointsCount - 1);  	if (previousNextIndex != nextIndex) {  		ReadUntilWithMd5 (PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);  		stream.Read (buffer' 0' _indexKeySize);  		md5.TransformBlock (buffer' 0' _indexKeySize' null' 0);  		IndexEntryKey key;  		if (_version == PTableVersions.IndexV1) {  			key = new IndexEntryKey (BitConverter.ToUInt32 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  		} else if (_version == PTableVersions.IndexV2) {  			key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  		} else {  			key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  		}  		midpoints [k] = new Midpoint (key' nextIndex);  		previousNextIndex = nextIndex;  		previousKey = key;  	} else {  		midpoints [k] = new Midpoint (previousKey' previousNextIndex);  	}  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: if (previousNextIndex != nextIndex) {  	ReadUntilWithMd5 (PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);  	stream.Read (buffer' 0' _indexKeySize);  	md5.TransformBlock (buffer' 0' _indexKeySize' null' 0);  	IndexEntryKey key;  	if (_version == PTableVersions.IndexV1) {  		key = new IndexEntryKey (BitConverter.ToUInt32 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  	} else if (_version == PTableVersions.IndexV2) {  		key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  	} else {  		key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  	}  	midpoints [k] = new Midpoint (key' nextIndex);  	previousNextIndex = nextIndex;  	previousKey = key;  } else {  	midpoints [k] = new Midpoint (previousKey' previousNextIndex);  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: if (previousNextIndex != nextIndex) {  	ReadUntilWithMd5 (PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);  	stream.Read (buffer' 0' _indexKeySize);  	md5.TransformBlock (buffer' 0' _indexKeySize' null' 0);  	IndexEntryKey key;  	if (_version == PTableVersions.IndexV1) {  		key = new IndexEntryKey (BitConverter.ToUInt32 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  	} else if (_version == PTableVersions.IndexV2) {  		key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  	} else {  		key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  	}  	midpoints [k] = new Midpoint (key' nextIndex);  	previousNextIndex = nextIndex;  	previousKey = key;  } else {  	midpoints [k] = new Midpoint (previousKey' previousNextIndex);  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: if (previousNextIndex != nextIndex) {  	ReadUntilWithMd5 (PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);  	stream.Read (buffer' 0' _indexKeySize);  	md5.TransformBlock (buffer' 0' _indexKeySize' null' 0);  	IndexEntryKey key;  	if (_version == PTableVersions.IndexV1) {  		key = new IndexEntryKey (BitConverter.ToUInt32 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  	} else if (_version == PTableVersions.IndexV2) {  		key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  	} else {  		key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  	}  	midpoints [k] = new Midpoint (key' nextIndex);  	previousNextIndex = nextIndex;  	previousKey = key;  } else {  	midpoints [k] = new Midpoint (previousKey' previousNextIndex);  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: if (_version == PTableVersions.IndexV1) {  	key = new IndexEntryKey (BitConverter.ToUInt32 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  } else if (_version == PTableVersions.IndexV2) {  	key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  } else {  	key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: if (_version == PTableVersions.IndexV1) {  	key = new IndexEntryKey (BitConverter.ToUInt32 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  } else if (_version == PTableVersions.IndexV2) {  	key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  } else {  	key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: if (_version == PTableVersions.IndexV1) {  	key = new IndexEntryKey (BitConverter.ToUInt32 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  } else if (_version == PTableVersions.IndexV2) {  	key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  } else {  	key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: key = new IndexEntryKey (BitConverter.ToUInt32 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: if (_version == PTableVersions.IndexV2) {  	key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  } else {  	key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: if (_version == PTableVersions.IndexV2) {  	key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  } else {  	key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 4)' BitConverter.ToInt32 (buffer' 0));  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: key = new IndexEntryKey (BitConverter.ToUInt64 (buffer' 8)' BitConverter.ToInt64 (buffer' 0));  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,TryGetLargestEntry,The following statement contains a magic number: try {  	var recordRange = LocateRecordRange (endKey);  	long low = recordRange.Lower;  	long high = recordRange.Upper;  	while (low < high) {  		var mid = low + (high - low) / 2;  		IndexEntry midpoint = ReadEntry (_indexEntrySize' mid' workItem' _version);  		var midpointKey = new IndexEntryKey (midpoint.Stream' midpoint.Version);  		if (midpointKey.GreaterThan (endKey))  			low = mid + 1;  		else  			high = mid;  	}  	var candEntry = ReadEntry (_indexEntrySize' high' workItem' _version);  	var candKey = new IndexEntryKey (candEntry.Stream' candEntry.Version);  	if (candKey.GreaterThan (endKey))  		throw new Exception (string.Format ("candEntry ({0}@{1}) > startKey {2}' stream {3}' startNum {4}' endNum {5}' PTable: {6}."' candEntry.Stream' candEntry.Version' startKey' stream' startNumber' endNumber' Filename));  	if (candKey.SmallerThan (startKey))  		return false;  	entry = candEntry;  	return true;  } finally {  	ReturnWorkItem (workItem);  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,TryGetLargestEntry,The following statement contains a magic number: while (low < high) {  	var mid = low + (high - low) / 2;  	IndexEntry midpoint = ReadEntry (_indexEntrySize' mid' workItem' _version);  	var midpointKey = new IndexEntryKey (midpoint.Stream' midpoint.Version);  	if (midpointKey.GreaterThan (endKey))  		low = mid + 1;  	else  		high = mid;  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,TryGetSmallestEntry,The following statement contains a magic number: try {  	var recordRange = LocateRecordRange (startKey);  	long low = recordRange.Lower;  	long high = recordRange.Upper;  	while (low < high) {  		var mid = low + (high - low + 1) / 2;  		var midpoint = ReadEntry (_indexEntrySize' mid' workItem' _version);  		var midpointKey = new IndexEntryKey (midpoint.Stream' midpoint.Version);  		if (midpointKey.SmallerThan (startKey))  			high = mid - 1;  		else  			low = mid;  	}  	var candEntry = ReadEntry (_indexEntrySize' high' workItem' _version);  	var candidateKey = new IndexEntryKey (candEntry.Stream' candEntry.Version);  	if (candidateKey.SmallerThan (startKey))  		throw new Exception (string.Format ("candEntry ({0}@{1}) < startKey {2}' stream {3}' startNum {4}' endNum {5}' PTable: {6}."' candEntry.Stream' candEntry.Version' startKey' stream' startNumber' endNumber' Filename));  	if (candidateKey.GreaterThan (endKey))  		return false;  	entry = candEntry;  	return true;  } finally {  	ReturnWorkItem (workItem);  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,TryGetSmallestEntry,The following statement contains a magic number: while (low < high) {  	var mid = low + (high - low + 1) / 2;  	var midpoint = ReadEntry (_indexEntrySize' mid' workItem' _version);  	var midpointKey = new IndexEntryKey (midpoint.Stream' midpoint.Version);  	if (midpointKey.SmallerThan (startKey))  		high = mid - 1;  	else  		low = mid;  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,GetRange,The following statement contains a magic number: try {  	var recordRange = LocateRecordRange (endKey);  	long low = recordRange.Lower;  	long high = recordRange.Upper;  	while (low < high) {  		var mid = low + (high - low) / 2;  		IndexEntry midpoint = ReadEntry (_indexEntrySize' mid' workItem' _version);  		var midpointKey = new IndexEntryKey (midpoint.Stream' midpoint.Version);  		if (midpointKey.SmallerEqualsThan (endKey))  			high = mid;  		else  			low = mid + 1;  	}  	PositionAtEntry (_indexEntrySize' high' workItem);  	for (long i = high' n = Count; i < n; ++i) {  		IndexEntry entry = ReadNextNoSeek (workItem' _version);  		var candidateKey = new IndexEntryKey (entry.Stream' entry.Version);  		if (candidateKey.GreaterThan (endKey))  			throw new Exception (string.Format ("entry ({0}@{1}) > endKey {2}' stream {3}' startNum {4}' endNum {5}' PTable: {6}."' entry.Stream' entry.Version' startKey' stream' startNumber' endNumber' Filename));  		if (candidateKey.SmallerThan (startKey))  			return result;  		result.Add (entry);  		if (result.Count == limit)  			break;  	}  	return result;  } finally {  	ReturnWorkItem (workItem);  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,GetRange,The following statement contains a magic number: while (low < high) {  	var mid = low + (high - low) / 2;  	IndexEntry midpoint = ReadEntry (_indexEntrySize' mid' workItem' _version);  	var midpointKey = new IndexEntryKey (midpoint.Stream' midpoint.Version);  	if (midpointKey.SmallerEqualsThan (endKey))  		high = mid;  	else  		low = mid + 1;  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,GetHash,The following statement contains a magic number: return _version == PTableVersions.IndexV1 ? hash >> 32 : hash;  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,LowerMidpointBound,The following statement contains a magic number: while (l < r) {  	long m = l + (r - l + 1) / 2;  	if (midpoints [m].Key.GreaterThan (key))  		l = m;  	else  		r = m - 1;  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,UpperMidpointBound,The following statement contains a magic number: while (l < r) {  	long m = l + (r - l) / 2;  	if (midpoints [m].Key.SmallerThan (key))  		r = m;  	else  		l = m + 1;  }  
Magic Number,EventStore.Core.Index,PTable,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,MergeTo,The following statement contains a magic number: if (tables.Count == 2)  	return MergeTo2 (tables' fileSize' indexEntrySize' outputFile' upgradeHash' existsAt' readRecord' version' cacheDepth);  
Magic Number,EventStore.Core.Index,SortedListExtensions,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\SortedListExtensions.cs,LowerBound,The following statement contains a magic number: while (l < r) {  	int m = l + (r - l) / 2;  	if (comparer.Compare (list.Keys [m]' key) >= 0)  		r = m;  	else  		l = m + 1;  }  
Magic Number,EventStore.Core.Index,SortedListExtensions,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\SortedListExtensions.cs,UpperBound,The following statement contains a magic number: while (l < r) {  	int m = l + (r - l + 1) / 2;  	if (comparer.Compare (list.Keys [m]' key) <= 0)  		l = m;  	else  		r = m - 1;  }  
Magic Number,EventStore.Core.Index,TableIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,TableIndex,The following statement contains a magic number: if (indexCacheDepth > 28 || indexCacheDepth < 8)  	throw new ArgumentOutOfRangeException ("indexCacheDepth");  
Magic Number,EventStore.Core.Index,TableIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,TableIndex,The following statement contains a magic number: if (indexCacheDepth > 28 || indexCacheDepth < 8)  	throw new ArgumentOutOfRangeException ("indexCacheDepth");  
Magic Number,EventStore.Core.Index,TableIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,Initialize,The following statement contains a magic number: try {  	_indexMap = IndexMap.FromFile (indexmapFile' maxTablesPerLevel: _maxTablesPerLevel' cacheDepth: _indexCacheDepth);  	if (_indexMap.CommitCheckpoint >= chaserCheckpoint) {  		_indexMap.Dispose (TimeSpan.FromMilliseconds (5000));  		throw new CorruptIndexException ("IndexMap's CommitCheckpoint is greater than WriterCheckpoint.");  	}  } catch (CorruptIndexException exc) {  	Log.ErrorException (exc' "ReadIndex is corrupted...");  	LogIndexMapContent (indexmapFile);  	DumpAndCopyIndex ();  	File.Delete (indexmapFile);  	_indexMap = IndexMap.FromFile (indexmapFile' maxTablesPerLevel: _maxTablesPerLevel' cacheDepth: _indexCacheDepth);  }  
Magic Number,EventStore.Core.Index,TableIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,Initialize,The following statement contains a magic number: if (_indexMap.CommitCheckpoint >= chaserCheckpoint) {  	_indexMap.Dispose (TimeSpan.FromMilliseconds (5000));  	throw new CorruptIndexException ("IndexMap's CommitCheckpoint is greater than WriterCheckpoint.");  }  
Magic Number,EventStore.Core.Index,TableIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,Initialize,The following statement contains a magic number: _indexMap.Dispose (TimeSpan.FromMilliseconds (5000));  
Magic Number,EventStore.Core.Index,TableIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,TryGetOneValue,The following statement contains a magic number: while (counter < 5) {  	counter++;  	try {  		return TryGetOneValueInternal (stream' version' out position);  	} catch (FileBeingDeletedException) {  		Log.Trace ("File being deleted.");  	}  }  
Magic Number,EventStore.Core.Index,TableIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,TryGetLatestEntry,The following statement contains a magic number: while (counter < 5) {  	counter++;  	try {  		return TryGetLatestEntryInternal (stream' out entry);  	} catch (FileBeingDeletedException) {  		Log.Trace ("File being deleted.");  	}  }  
Magic Number,EventStore.Core.Index,TableIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,TryGetOldestEntry,The following statement contains a magic number: while (counter < 5) {  	counter++;  	try {  		return TryGetOldestEntryInternal (stream' out entry);  	} catch (FileBeingDeletedException) {  		Log.Trace ("File being deleted.");  	}  }  
Magic Number,EventStore.Core.Index,TableIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,GetRange,The following statement contains a magic number: while (counter < 5) {  	counter++;  	try {  		return GetRangeInternal (hash' startVersion' endVersion' limit);  	} catch (FileBeingDeletedException) {  		Log.Trace ("File being deleted.");  	}  }  
Magic Number,EventStore.Core.Index,TableIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,Close,The following statement contains a magic number: if (!_backgroundRunningEvent.Wait (7000))  	throw new TimeoutException ("Could not finish background thread in reasonable time.");  
Magic Number,EventStore.Core.Index,TableIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,Close,The following statement contains a magic number: _indexMap.InOrder ().ToList ().ForEach (x => x.WaitForDisposal (TimeSpan.FromMilliseconds (5000)));  
Magic Number,EventStore.Core.Index,TableIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,UpgradeHash,The following statement contains a magic number: return lowHash << 32 | _highHasher.Hash (streamId);  
Magic Number,EventStore.Core.Index,TableIndex,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,CreateHash,The following statement contains a magic number: return (ulong)_lowHasher.Hash (streamId) << 32 | _highHasher.Hash (streamId);  
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: switch (len & 3) // mod 4  {  case 3:  	h ^= (uint)(tail [2] << 16);  	h ^= (uint)(tail [1] << 8);  	h ^= tail [0];  	h *= m;  	break;  case 2:  	h ^= (uint)(tail [1] << 8);  	h ^= tail [0];  	h *= m;  	break;  case 1:  	h ^= tail [0];  	h *= m;  	break;  }  
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: switch (len & 3) // mod 4  {  case 3:  	h ^= (uint)(tail [2] << 16);  	h ^= (uint)(tail [1] << 8);  	h ^= tail [0];  	h *= m;  	break;  case 2:  	h ^= (uint)(tail [1] << 8);  	h ^= tail [0];  	h *= m;  	break;  case 1:  	h ^= tail [0];  	h *= m;  	break;  }  
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: switch (len & 3) // mod 4  {  case 3:  	h ^= (uint)(tail [2] << 16);  	h ^= (uint)(tail [1] << 8);  	h ^= tail [0];  	h *= m;  	break;  case 2:  	h ^= (uint)(tail [1] << 8);  	h ^= tail [0];  	h *= m;  	break;  case 1:  	h ^= tail [0];  	h *= m;  	break;  }  
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: switch (len & 3) // mod 4  {  case 3:  	h ^= (uint)(tail [2] << 16);  	h ^= (uint)(tail [1] << 8);  	h ^= tail [0];  	h *= m;  	break;  case 2:  	h ^= (uint)(tail [1] << 8);  	h ^= tail [0];  	h *= m;  	break;  case 1:  	h ^= tail [0];  	h *= m;  	break;  }  
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: switch (len & 3) // mod 4  {  case 3:  	h ^= (uint)(tail [2] << 16);  	h ^= (uint)(tail [1] << 8);  	h ^= tail [0];  	h *= m;  	break;  case 2:  	h ^= (uint)(tail [1] << 8);  	h ^= tail [0];  	h *= m;  	break;  case 1:  	h ^= tail [0];  	h *= m;  	break;  }  
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: switch (len & 3) // mod 4  {  case 3:  	h ^= (uint)(tail [2] << 16);  	h ^= (uint)(tail [1] << 8);  	h ^= tail [0];  	h *= m;  	break;  case 2:  	h ^= (uint)(tail [1] << 8);  	h ^= tail [0];  	h *= m;  	break;  case 1:  	h ^= tail [0];  	h *= m;  	break;  }  
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: switch (len & 3) // mod 4  {  case 3:  	h ^= (uint)(tail [2] << 16);  	h ^= (uint)(tail [1] << 8);  	h ^= tail [0];  	h *= m;  	break;  case 2:  	h ^= (uint)(tail [1] << 8);  	h ^= tail [0];  	h *= m;  	break;  case 1:  	h ^= tail [0];  	h *= m;  	break;  }  
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: h ^= (uint)(tail [2] << 16);  
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: h ^= (uint)(tail [2] << 16);  
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: h ^= (uint)(tail [1] << 8);  
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: h ^= (uint)(tail [1] << 8);  
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: h ^= h >> 13;  
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: h ^= h >> 15;  
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: for (UInt32 i = nblocks; i > 0; --i' ++block) {  	k1 = *block;  	k1 *= c1;  	k1 = Rotl32 (k1' 15);  	k1 *= c2;  	h1 ^= k1;  	h1 = Rotl32 (h1' 13);  	h1 = h1 * 5 + 0xe6546b64;  }  
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: for (UInt32 i = nblocks; i > 0; --i' ++block) {  	k1 = *block;  	k1 *= c1;  	k1 = Rotl32 (k1' 15);  	k1 *= c2;  	h1 ^= k1;  	h1 = Rotl32 (h1' 13);  	h1 = h1 * 5 + 0xe6546b64;  }  
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: for (UInt32 i = nblocks; i > 0; --i' ++block) {  	k1 = *block;  	k1 *= c1;  	k1 = Rotl32 (k1' 15);  	k1 *= c2;  	h1 ^= k1;  	h1 = Rotl32 (h1' 13);  	h1 = h1 * 5 + 0xe6546b64;  }  
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: k1 = Rotl32 (k1' 15);  
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: h1 = Rotl32 (h1' 13);  
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: h1 = h1 * 5 + 0xe6546b64;  
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: if (rem >= 3)  	k1 ^= (uint)(tail [2] << 16);  
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: if (rem >= 3)  	k1 ^= (uint)(tail [2] << 16);  
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: if (rem >= 3)  	k1 ^= (uint)(tail [2] << 16);  
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: k1 ^= (uint)(tail [2] << 16);  
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: k1 ^= (uint)(tail [2] << 16);  
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: if (rem >= 2)  	k1 ^= (uint)(tail [1] << 8);  
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: if (rem >= 2)  	k1 ^= (uint)(tail [1] << 8);  
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: k1 ^= (uint)(tail [1] << 8);  
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: if (rem > 0) {  	k1 ^= tail [0];  	k1 *= c1;  	k1 = Rotl32 (k1' 15);  	k1 *= c2;  	h1 ^= k1;  }  
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: k1 = Rotl32 (k1' 15);  
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: h1 ^= h1 >> 16;  
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: h1 ^= h1 >> 13;  
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: h1 ^= h1 >> 16;  
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Rotl32,The following statement contains a magic number: return (x << r) | (x >> (32 - r));  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: if (len < 16)  	return HashSmall (data' len' seed);  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: while (p < limit) {  	v1 += Rotl32 (v1' 13);  	v1 *= PRIME1;  	v1 += *p;  	p++;  	v2 += Rotl32 (v2' 11);  	v2 *= PRIME1;  	v2 += *p;  	p++;  	v3 += Rotl32 (v3' 17);  	v3 *= PRIME1;  	v3 += *p;  	p++;  	v4 += Rotl32 (v4' 19);  	v4 *= PRIME1;  	v4 += *p;  	p++;  }  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: while (p < limit) {  	v1 += Rotl32 (v1' 13);  	v1 *= PRIME1;  	v1 += *p;  	p++;  	v2 += Rotl32 (v2' 11);  	v2 *= PRIME1;  	v2 += *p;  	p++;  	v3 += Rotl32 (v3' 17);  	v3 *= PRIME1;  	v3 += *p;  	p++;  	v4 += Rotl32 (v4' 19);  	v4 *= PRIME1;  	v4 += *p;  	p++;  }  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: while (p < limit) {  	v1 += Rotl32 (v1' 13);  	v1 *= PRIME1;  	v1 += *p;  	p++;  	v2 += Rotl32 (v2' 11);  	v2 *= PRIME1;  	v2 += *p;  	p++;  	v3 += Rotl32 (v3' 17);  	v3 *= PRIME1;  	v3 += *p;  	p++;  	v4 += Rotl32 (v4' 19);  	v4 *= PRIME1;  	v4 += *p;  	p++;  }  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: while (p < limit) {  	v1 += Rotl32 (v1' 13);  	v1 *= PRIME1;  	v1 += *p;  	p++;  	v2 += Rotl32 (v2' 11);  	v2 *= PRIME1;  	v2 += *p;  	p++;  	v3 += Rotl32 (v3' 17);  	v3 *= PRIME1;  	v3 += *p;  	p++;  	v4 += Rotl32 (v4' 19);  	v4 *= PRIME1;  	v4 += *p;  	p++;  }  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: v1 += Rotl32 (v1' 13);  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: v2 += Rotl32 (v2' 11);  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: v3 += Rotl32 (v3' 17);  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: v4 += Rotl32 (v4' 19);  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: v1 += Rotl32 (v1' 17);  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: v2 += Rotl32 (v2' 19);  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: v3 += Rotl32 (v3' 13);  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: v4 += Rotl32 (v4' 11);  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: v1 += Rotl32 (v1' 11);  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: v2 += Rotl32 (v2' 17);  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: v3 += Rotl32 (v3' 19);  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: v4 += Rotl32 (v4' 13);  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: crc ^= crc >> 11;  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: crc ^= crc >> 15;  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: crc ^= crc >> 13;  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,HashSmall,The following statement contains a magic number: while (p < limit) {  	crc += (*(uint*)p) + idx;  	idx++;  	crc += Rotl32 (crc' 17) * PRIME4;  	crc *= PRIME1;  	p += 4;  }  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,HashSmall,The following statement contains a magic number: while (p < limit) {  	crc += (*(uint*)p) + idx;  	idx++;  	crc += Rotl32 (crc' 17) * PRIME4;  	crc *= PRIME1;  	p += 4;  }  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,HashSmall,The following statement contains a magic number: crc += Rotl32 (crc' 17) * PRIME4;  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,HashSmall,The following statement contains a magic number: p += 4;  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,HashSmall,The following statement contains a magic number: crc ^= crc >> 15;  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,HashSmall,The following statement contains a magic number: crc ^= crc >> 13;  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,HashSmall,The following statement contains a magic number: crc ^= crc >> 16;  
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Rotl32,The following statement contains a magic number: return (x << r) | (x >> (32 - r));  
Magic Number,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The following statement contains a magic number: if (_vcReceived.Add (message.ServerId) && _vcReceived.Count == _clusterSize / 2 + 1) {  	Log.Debug ("ELECTIONS: (V={0}) MAJORITY OF VIEWCHANGE."' message.AttemptedView);  	if (AmILeaderOf (_lastAttemptedView))  		ShiftToPreparePhase ();  }  
Magic Number,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The following statement contains a magic number: if (!_prepareOkReceived.ContainsKey (msg.ServerId)) {  	_prepareOkReceived.Add (msg.ServerId' msg);  	if (_prepareOkReceived.Count == _clusterSize / 2 + 1)  		ShiftToRegLeader ();  }  
Magic Number,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The following statement contains a magic number: if (_prepareOkReceived.Count == _clusterSize / 2 + 1)  	ShiftToRegLeader ();  
Magic Number,EventStore.Core.Services,ElectionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The following statement contains a magic number: if (_acceptsReceived.Add (message.ServerId) && _acceptsReceived.Count == _clusterSize / 2 + 1) {  	var master = _servers.FirstOrDefault (x => x.InstanceId == _masterProposal.InstanceId);  	if (master != null) {  		_master = _masterProposal.InstanceId;  		Log.Info ("ELECTIONS: (V={0}) DONE. ELECTED MASTER = {1}. ME={2}."' message.View' FormatNodeInfo (_masterProposal)' FormatNodeInfo (GetOwnInfo ()));  		_lastElectedMaster = _master;  		_publisher.Publish (new ElectionMessage.ElectionsDone (message.View' master));  	}  }  
Magic Number,EventStore.Core.Services,SubscriptionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,ResolveLinkToEvent,The following statement contains a magic number: if (eventRecord.EventType == SystemEventTypes.LinkTo) {  	try {  		string[] parts = Helper.UTF8NoBom.GetString (eventRecord.Data).Split (_linkToSeparator' 2);  		long eventNumber = long.Parse (parts [0]);  		string streamId = parts [1];  		var res = _readIndex.ReadEvent (streamId' eventNumber);  		if (res.Result == ReadEventResult.Success)  			return ResolvedEvent.ForResolvedLink (res.Record' eventRecord' commitPosition);  		return ResolvedEvent.ForFailedResolvedLink (eventRecord' res.Result' commitPosition);  	} catch (Exception exc) {  		Log.ErrorException (exc' "Error while resolving link for event record: {0}"' eventRecord.ToString ());  	}  	// return unresolved link  	return ResolvedEvent.ForFailedResolvedLink (eventRecord' ReadEventResult.Error' commitPosition);  }  
Magic Number,EventStore.Core.Services,SubscriptionsService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,ResolveLinkToEvent,The following statement contains a magic number: try {  	string[] parts = Helper.UTF8NoBom.GetString (eventRecord.Data).Split (_linkToSeparator' 2);  	long eventNumber = long.Parse (parts [0]);  	string streamId = parts [1];  	var res = _readIndex.ReadEvent (streamId' eventNumber);  	if (res.Result == ReadEventResult.Success)  		return ResolvedEvent.ForResolvedLink (res.Record' eventRecord' commitPosition);  	return ResolvedEvent.ForFailedResolvedLink (eventRecord' res.Result' commitPosition);  } catch (Exception exc) {  	Log.ErrorException (exc' "Error while resolving link for event record: {0}"' eventRecord.ToString ());  }  
Magic Number,EventStore.Core.Services,HttpSendService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,Handle,The following statement contains a magic number: if (deniedToHandle != null) {  	int code;  	switch (deniedToHandle.Reason) {  	case DenialReason.ServerTooBusy:  		code = HttpStatusCode.ServiceUnavailable;  		break;  	default:  		throw new ArgumentOutOfRangeException ();  	}  	var start = _watch.ElapsedTicks;  	message.HttpEntityManager.ReplyStatus (code' deniedToHandle.Details' exc => Log.Debug ("Error occurred while replying to HTTP with message {0}: {1}."' message.Message' exc.Message));  	HistogramService.SetValue (_httpSendHistogram' (long)((((double)_watch.ElapsedTicks - start) / Stopwatch.Frequency) * 1000000000));  } else {  	var response = message.Data;  	var config = message.Configuration;  	var start = _watch.ElapsedTicks;  	if (response is byte[]) {  		message.HttpEntityManager.ReplyContent (response as byte[]' config.Code' config.Description' config.ContentType' config.Headers' exc => Log.Debug ("Error occurred while replying to HTTP with message {0}: {1}."' message.Message' exc.Message));  	} else {  		message.HttpEntityManager.ReplyTextContent (response as string' config.Code' config.Description' config.ContentType' config.Headers' exc => Log.Debug ("Error occurred while replying to HTTP with message {0}: {1}."' message.Message' exc.Message));  	}  	HistogramService.SetValue (_httpSendHistogram' (long)((((double)_watch.ElapsedTicks - start) / Stopwatch.Frequency) * 1000000000));  }  
Magic Number,EventStore.Core.Services,HttpSendService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,Handle,The following statement contains a magic number: if (deniedToHandle != null) {  	int code;  	switch (deniedToHandle.Reason) {  	case DenialReason.ServerTooBusy:  		code = HttpStatusCode.ServiceUnavailable;  		break;  	default:  		throw new ArgumentOutOfRangeException ();  	}  	var start = _watch.ElapsedTicks;  	message.HttpEntityManager.ReplyStatus (code' deniedToHandle.Details' exc => Log.Debug ("Error occurred while replying to HTTP with message {0}: {1}."' message.Message' exc.Message));  	HistogramService.SetValue (_httpSendHistogram' (long)((((double)_watch.ElapsedTicks - start) / Stopwatch.Frequency) * 1000000000));  } else {  	var response = message.Data;  	var config = message.Configuration;  	var start = _watch.ElapsedTicks;  	if (response is byte[]) {  		message.HttpEntityManager.ReplyContent (response as byte[]' config.Code' config.Description' config.ContentType' config.Headers' exc => Log.Debug ("Error occurred while replying to HTTP with message {0}: {1}."' message.Message' exc.Message));  	} else {  		message.HttpEntityManager.ReplyTextContent (response as string' config.Code' config.Description' config.ContentType' config.Headers' exc => Log.Debug ("Error occurred while replying to HTTP with message {0}: {1}."' message.Message' exc.Message));  	}  	HistogramService.SetValue (_httpSendHistogram' (long)((((double)_watch.ElapsedTicks - start) / Stopwatch.Frequency) * 1000000000));  }  
Magic Number,EventStore.Core.Services,HttpSendService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,Handle,The following statement contains a magic number: HistogramService.SetValue (_httpSendHistogram' (long)((((double)_watch.ElapsedTicks - start) / Stopwatch.Frequency) * 1000000000));  
Magic Number,EventStore.Core.Services,HttpSendService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,Handle,The following statement contains a magic number: HistogramService.SetValue (_httpSendHistogram' (long)((((double)_watch.ElapsedTicks - start) / Stopwatch.Frequency) * 1000000000));  
Magic Number,EventStore.Core.Services,SystemStreams,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\SystemNames.cs,IsMetastream,The following statement contains a magic number: return streamId.Length >= 2 && streamId [0] == '$' && streamId [1] == '$';  
Magic Number,EventStore.Core.Services,SystemStreams,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\SystemNames.cs,OriginalStreamOf,The following statement contains a magic number: return metastreamId.Substring (2);  
Magic Number,EventStore.Core.Services,SystemEventTypes,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\SystemNames.cs,StreamReferenceEventToStreamId,The following statement contains a magic number: switch (eventType) {  case LinkTo: {  	string[] parts = Helper.UTF8NoBom.GetString (data).Split (_linkToSeparator' 2);  	streamId = parts [1];  	break;  }  case StreamReference:  case V1__StreamCreated__:  case V2__StreamCreated_InIndex: {  	streamId = Helper.UTF8NoBom.GetString (data);  	break;  }  default:  	throw new NotSupportedException ("Unknown event type: " + eventType);  }  
Magic Number,EventStore.Core.Services,SystemEventTypes,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\SystemNames.cs,StreamReferenceEventToStreamId,The following statement contains a magic number: switch (eventType) {  case LinkTo: {  	string[] parts = data.Split (_linkToSeparator' 2);  	streamId = parts [1];  	break;  }  case StreamReference:  case V1__StreamCreated__:  case V2__StreamCreated_InIndex: {  	streamId = data;  	break;  }  default:  	throw new NotSupportedException ("Unknown event type: " + eventType);  }  
Magic Number,EventStore.Core.Services,TcpSendService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\TcpSendService.cs,Handle,The following statement contains a magic number: HistogramService.SetValue (_tcpSendHistogram' (long)((((double)_watch.ElapsedTicks - start) / Stopwatch.Frequency) * 1000000000));  
Magic Number,EventStore.Core.Services.Gossip,GossipServiceBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Gossip\GossipServiceBase.cs,GetNodeToGossipTo,The following statement contains a magic number: for (int i = 0; i < 5; ++i) {  	var node = members [_rnd.Next (members.Length)];  	if (node.InstanceId != NodeInfo.InstanceId)  		return node;  }  
Magic Number,EventStore.Core.Services.Gossip,GossipServiceBase,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Gossip\GossipServiceBase.cs,LogClusterChange,The following statement contains a magic number: Log.Trace (new string ('-'' 80));  
Magic Number,EventStore.Core.Services.Histograms,HistogramService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Histograms\HistogramService.cs,CreateHistogram,The following statement contains a magic number: Histograms.TryAdd (name' new Histogram (NUMBEROFNS' 3));  
Magic Number,EventStore.Core.Services.Histograms,Measurement,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Histograms\HistogramService.cs,Dispose,The following statement contains a magic number: lock (Histogram) {  	var valueToRecord = (((double)watch.ElapsedTicks - Start) / Stopwatch.Frequency) * 1000000000;  	if (valueToRecord < HighestPowerOf2 (Histogram.getHighestTrackableValue ())) {  		Histogram.recordValue ((long)valueToRecord);  	}  }  
Magic Number,EventStore.Core.Services.Histograms,Measurement,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Histograms\HistogramService.cs,HighestPowerOf2,The following statement contains a magic number: x |= (x >> 2);  
Magic Number,EventStore.Core.Services.Histograms,Measurement,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Histograms\HistogramService.cs,HighestPowerOf2,The following statement contains a magic number: x |= (x >> 4);  
Magic Number,EventStore.Core.Services.Histograms,Measurement,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Histograms\HistogramService.cs,HighestPowerOf2,The following statement contains a magic number: x |= (x >> 8);  
Magic Number,EventStore.Core.Services.Histograms,Measurement,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Histograms\HistogramService.cs,HighestPowerOf2,The following statement contains a magic number: x |= (x >> 16);  
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,TryReadingNewBatch,The following statement contains a magic number: lock (_lock) {  	if ((_state & PersistentSubscriptionState.OutstandingPageRequest) > 0)  		return;  	if (_streamBuffer.Live) {  		SetLive ();  		return;  	}  	if (!_streamBuffer.CanAccept (_settings.ReadBatchSize))  		return;  	_state |= PersistentSubscriptionState.OutstandingPageRequest;  	_settings.StreamReader.BeginReadEvents (_settings.EventStreamId' _nextEventToPullFrom' Math.Max (_settings.ReadBatchSize' 10)' _settings.ReadBatchSize' _settings.ResolveLinkTos' HandleReadCompleted);  }  
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,TryReadingNewBatch,The following statement contains a magic number: _settings.StreamReader.BeginReadEvents (_settings.EventStreamId' _nextEventToPullFrom' Math.Max (_settings.ReadBatchSize' 10)' _settings.ReadBatchSize' _settings.ResolveLinkTos' HandleReadCompleted);  
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,ParkMessage,The following statement contains a magic number: _settings.MessageParker.BeginParkMessage (resolvedEvent' reason' (e' result) => {  	if (result != OperationResult.Success) {  		if (count < 5) {  			Log.Info ("Unable to park message {0}/{1} operation failed {2} retrying."' e.OriginalStreamId' e.OriginalEventNumber' result);  			ParkMessage (e' reason' count + 1);  			return;  		}  		Log.Error ("Unable to park message {0}/{1} operation failed {2} after retries. Possible message loss."' e.OriginalStreamId' e.OriginalEventNumber' result);  	}  	lock (_lock) {  		_outstandingMessages.Remove (e.OriginalEvent.EventId);  		_pushClients.RemoveProcessingMessage (e.OriginalEvent.EventId);  		TryPushingMessagesToClients ();  	}  });  
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,ParkMessage,The following statement contains a magic number: if (result != OperationResult.Success) {  	if (count < 5) {  		Log.Info ("Unable to park message {0}/{1} operation failed {2} retrying."' e.OriginalStreamId' e.OriginalEventNumber' result);  		ParkMessage (e' reason' count + 1);  		return;  	}  	Log.Error ("Unable to park message {0}/{1} operation failed {2} after retries. Possible message loss."' e.OriginalStreamId' e.OriginalEventNumber' result);  }  
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,ParkMessage,The following statement contains a magic number: if (count < 5) {  	Log.Info ("Unable to park message {0}/{1} operation failed {2} retrying."' e.OriginalStreamId' e.OriginalEventNumber' result);  	ParkMessage (e' reason' count + 1);  	return;  }  
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionClient,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionClient.cs,PersistentSubscriptionClient,The following statement contains a magic number: if (extraStatistics) {  	_extraStatistics = new RequestStatistics (watch' 1000);  }  
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionClient,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionClient.cs,PersistentSubscriptionClient,The following statement contains a magic number: _extraStatistics = new RequestStatistics (watch' 1000);  
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionParamsBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionParamsBuilder.cs,CreateFor,The following statement contains a magic number: return new PersistentSubscriptionParamsBuilder (streamName + ":" + groupName' streamName' groupName' false' 0' false' TimeSpan.FromSeconds (30)' 500' 500' 10' 20' TimeSpan.FromSeconds (1)' 5' 1000' 0' new RoundRobinPersistentSubscriptionConsumerStrategy ());  
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionParamsBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionParamsBuilder.cs,CreateFor,The following statement contains a magic number: return new PersistentSubscriptionParamsBuilder (streamName + ":" + groupName' streamName' groupName' false' 0' false' TimeSpan.FromSeconds (30)' 500' 500' 10' 20' TimeSpan.FromSeconds (1)' 5' 1000' 0' new RoundRobinPersistentSubscriptionConsumerStrategy ());  
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionParamsBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionParamsBuilder.cs,CreateFor,The following statement contains a magic number: return new PersistentSubscriptionParamsBuilder (streamName + ":" + groupName' streamName' groupName' false' 0' false' TimeSpan.FromSeconds (30)' 500' 500' 10' 20' TimeSpan.FromSeconds (1)' 5' 1000' 0' new RoundRobinPersistentSubscriptionConsumerStrategy ());  
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionParamsBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionParamsBuilder.cs,CreateFor,The following statement contains a magic number: return new PersistentSubscriptionParamsBuilder (streamName + ":" + groupName' streamName' groupName' false' 0' false' TimeSpan.FromSeconds (30)' 500' 500' 10' 20' TimeSpan.FromSeconds (1)' 5' 1000' 0' new RoundRobinPersistentSubscriptionConsumerStrategy ());  
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionParamsBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionParamsBuilder.cs,CreateFor,The following statement contains a magic number: return new PersistentSubscriptionParamsBuilder (streamName + ":" + groupName' streamName' groupName' false' 0' false' TimeSpan.FromSeconds (30)' 500' 500' 10' 20' TimeSpan.FromSeconds (1)' 5' 1000' 0' new RoundRobinPersistentSubscriptionConsumerStrategy ());  
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionParamsBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionParamsBuilder.cs,CreateFor,The following statement contains a magic number: return new PersistentSubscriptionParamsBuilder (streamName + ":" + groupName' streamName' groupName' false' 0' false' TimeSpan.FromSeconds (30)' 500' 500' 10' 20' TimeSpan.FromSeconds (1)' 5' 1000' 0' new RoundRobinPersistentSubscriptionConsumerStrategy ());  
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionParamsBuilder,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionParamsBuilder.cs,CreateFor,The following statement contains a magic number: return new PersistentSubscriptionParamsBuilder (streamName + ":" + groupName' streamName' groupName' false' 0' false' TimeSpan.FromSeconds (30)' 500' 500' 10' 20' TimeSpan.FromSeconds (1)' 5' 1000' 0' new RoundRobinPersistentSubscriptionConsumerStrategy ());  
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,PersistentSubscriptionService,The following statement contains a magic number: _streamReader = new PersistentSubscriptionStreamReader (_ioDispatcher' 100);  
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,PersistentSubscriptionService,The following statement contains a magic number: _tickRequestMessage = TimerMessage.Schedule.Create (TimeSpan.FromMilliseconds (1000)' new PublishEnvelope (_bus)' new SubscriptionMessage.PersistentSubscriptionTimerTick ());  
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionStreamReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionStreamReader.cs,GetBatchSize,The following statement contains a magic number: return Math.Min (Math.Min (batchSize == 0 ? 20 : batchSize' MaxPullBatchSize)' _maxPullBatchSize);  
Magic Number,EventStore.Core.Services.PersistentSubscription,RequestStatistics,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\RequestStatistics.cs,GetMeasurementDetails,The following statement contains a magic number: ret.Measurements.Add (Measurement.From ("Median"' items [items.Length / 2]));  
Magic Number,EventStore.Core.Services.PersistentSubscription,RequestStatistics,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\RequestStatistics.cs,GetMeasurementDetails,The following statement contains a magic number: for (var i = 0; i < 5; i++) {  	ret.Measurements.Add (Measurement.From ("Quintile " + (i + 1)' items [GetPercentile (i * 20' items.Length)]));  }  
Magic Number,EventStore.Core.Services.PersistentSubscription,RequestStatistics,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\RequestStatistics.cs,GetMeasurementDetails,The following statement contains a magic number: for (var i = 0; i < 5; i++) {  	ret.Measurements.Add (Measurement.From ("Quintile " + (i + 1)' items [GetPercentile (i * 20' items.Length)]));  }  
Magic Number,EventStore.Core.Services.PersistentSubscription,RequestStatistics,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\RequestStatistics.cs,GetMeasurementDetails,The following statement contains a magic number: ret.Measurements.Add (Measurement.From ("Quintile " + (i + 1)' items [GetPercentile (i * 20' items.Length)]));  
Magic Number,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,SetSubscriptionPosition,The following statement contains a magic number: if (trial >= 10)  	throw new Exception ("Too many retrials to acquire reader for subscriber.");  
Magic Number,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,MainLoop,The following statement contains a magic number: while (!_stop) {  	try {  		_queueStats.EnterBusy ();  		_queueStats.ProcessingStarted (typeof(SendReplicationData)' _subscriptions.Count);  		_flushSignal.Reset ();  		// Reset the flush signal as we're about to read anyway. This could be closer to the actual read but no harm from too many checks.  		var dataFound = ManageSubscriptions ();  		ManageNoQuorumDetection ();  		var newSubscriptions = _newSubscriptions;  		_newSubscriptions = false;  		ManageRoleAssignments (force: newSubscriptions);  		_queueStats.ProcessingEnded (_subscriptions.Count);  		if (!dataFound) {  			_queueStats.EnterIdle ();  			_flushSignal.Wait (TimeSpan.FromMilliseconds (500));  		}  	} catch (Exception exc) {  		Log.InfoException (exc' "Error during master replication iteration.");  	}  }  
Magic Number,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,MainLoop,The following statement contains a magic number: try {  	_queueStats.EnterBusy ();  	_queueStats.ProcessingStarted (typeof(SendReplicationData)' _subscriptions.Count);  	_flushSignal.Reset ();  	// Reset the flush signal as we're about to read anyway. This could be closer to the actual read but no harm from too many checks.  	var dataFound = ManageSubscriptions ();  	ManageNoQuorumDetection ();  	var newSubscriptions = _newSubscriptions;  	_newSubscriptions = false;  	ManageRoleAssignments (force: newSubscriptions);  	_queueStats.ProcessingEnded (_subscriptions.Count);  	if (!dataFound) {  		_queueStats.EnterIdle ();  		_flushSignal.Wait (TimeSpan.FromMilliseconds (500));  	}  } catch (Exception exc) {  	Log.InfoException (exc' "Error during master replication iteration.");  }  
Magic Number,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,MainLoop,The following statement contains a magic number: if (!dataFound) {  	_queueStats.EnterIdle ();  	_flushSignal.Wait (TimeSpan.FromMilliseconds (500));  }  
Magic Number,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,MainLoop,The following statement contains a magic number: _flushSignal.Wait (TimeSpan.FromMilliseconds (500));  
Magic Number,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,ManageNoQuorumDetection,The following statement contains a magic number: if (_state == VNodeState.Master) {  	var now = _stopwatch.Elapsed;  	if (_subscriptions.Count >= _clusterSize / 2)  		// everything is ok  		_noQuorumTimestamp = TimeSpan.Zero;  	else {  		if (_noQuorumTimestamp == TimeSpan.Zero) {  			_noQuorumTimestamp = now;  			_noQuorumNotified = false;  		}  		if (!_noQuorumNotified && now - _noQuorumTimestamp > NoQuorumTimeout) {  			_publisher.Publish (new SystemMessage.NoQuorumMessage ());  			_noQuorumNotified = true;  		}  	}  }  
Magic Number,EventStore.Core.Services.Replication,MasterReplicationService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,ManageNoQuorumDetection,The following statement contains a magic number: if (_subscriptions.Count >= _clusterSize / 2)  	// everything is ok  	_noQuorumTimestamp = TimeSpan.Zero;  else {  	if (_noQuorumTimestamp == TimeSpan.Zero) {  		_noQuorumTimestamp = now;  		_noQuorumNotified = false;  	}  	if (!_noQuorumNotified && now - _noQuorumTimestamp > NoQuorumTimeout) {  		_publisher.Publish (new SystemMessage.NoQuorumMessage ());  		_noQuorumNotified = true;  	}  }  
Magic Number,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Init,The following statement contains a magic number: using (var reader = _backend.BorrowReader ()) {  	var startPosition = Math.Max (0' _persistedCommitPos);  	reader.Reposition (startPosition);  	var commitedPrepares = new List<PrepareLogRecord> ();  	long processed = 0;  	SeqReadResult result;  	while ((result = reader.TryReadNext ()).Success && result.LogRecord.LogPosition < buildToPosition) {  		switch (result.LogRecord.RecordType) {  		case LogRecordType.Prepare: {  			var prepare = (PrepareLogRecord)result.LogRecord;  			if (prepare.Flags.HasAnyOf (PrepareFlags.IsCommitted)) {  				if (prepare.Flags.HasAnyOf (PrepareFlags.SingleWrite)) {  					Commit (commitedPrepares' false' false);  					commitedPrepares.Clear ();  					Commit (new[] {  						prepare  					}' result.Eof' false);  				} else {  					if (prepare.Flags.HasAnyOf (PrepareFlags.Data | PrepareFlags.StreamDelete))  						commitedPrepares.Add (prepare);  					if (prepare.Flags.HasAnyOf (PrepareFlags.TransactionEnd)) {  						Commit (commitedPrepares' result.Eof' false);  						commitedPrepares.Clear ();  					}  				}  			}  			break;  		}  		case LogRecordType.Commit:  			Commit ((CommitLogRecord)result.LogRecord' result.Eof' false);  			break;  		case LogRecordType.System:  			break;  		default:  			throw new Exception (string.Format ("Unknown RecordType: {0}"' result.LogRecord.RecordType));  		}  		processed += 1;  		if (DateTime.UtcNow - lastTime > reportPeriod || processed % 100000 == 0) {  			Log.Debug ("ReadIndex Rebuilding: processed {0} records ({1:0.0}%)."' processed' (result.RecordPostPosition - startPosition) * 100.0 / (buildToPosition - startPosition));  			lastTime = DateTime.UtcNow;  		}  	}  	Log.Debug ("ReadIndex rebuilding done: total processed {0} records' time elapsed: {1}."' processed' DateTime.UtcNow - startTime);  	_bus.Publish (new StorageMessage.TfEofAtNonCommitRecord ());  	_backend.SetSystemSettings (GetSystemSettings ());  }  
Magic Number,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Init,The following statement contains a magic number: using (var reader = _backend.BorrowReader ()) {  	var startPosition = Math.Max (0' _persistedCommitPos);  	reader.Reposition (startPosition);  	var commitedPrepares = new List<PrepareLogRecord> ();  	long processed = 0;  	SeqReadResult result;  	while ((result = reader.TryReadNext ()).Success && result.LogRecord.LogPosition < buildToPosition) {  		switch (result.LogRecord.RecordType) {  		case LogRecordType.Prepare: {  			var prepare = (PrepareLogRecord)result.LogRecord;  			if (prepare.Flags.HasAnyOf (PrepareFlags.IsCommitted)) {  				if (prepare.Flags.HasAnyOf (PrepareFlags.SingleWrite)) {  					Commit (commitedPrepares' false' false);  					commitedPrepares.Clear ();  					Commit (new[] {  						prepare  					}' result.Eof' false);  				} else {  					if (prepare.Flags.HasAnyOf (PrepareFlags.Data | PrepareFlags.StreamDelete))  						commitedPrepares.Add (prepare);  					if (prepare.Flags.HasAnyOf (PrepareFlags.TransactionEnd)) {  						Commit (commitedPrepares' result.Eof' false);  						commitedPrepares.Clear ();  					}  				}  			}  			break;  		}  		case LogRecordType.Commit:  			Commit ((CommitLogRecord)result.LogRecord' result.Eof' false);  			break;  		case LogRecordType.System:  			break;  		default:  			throw new Exception (string.Format ("Unknown RecordType: {0}"' result.LogRecord.RecordType));  		}  		processed += 1;  		if (DateTime.UtcNow - lastTime > reportPeriod || processed % 100000 == 0) {  			Log.Debug ("ReadIndex Rebuilding: processed {0} records ({1:0.0}%)."' processed' (result.RecordPostPosition - startPosition) * 100.0 / (buildToPosition - startPosition));  			lastTime = DateTime.UtcNow;  		}  	}  	Log.Debug ("ReadIndex rebuilding done: total processed {0} records' time elapsed: {1}."' processed' DateTime.UtcNow - startTime);  	_bus.Publish (new StorageMessage.TfEofAtNonCommitRecord ());  	_backend.SetSystemSettings (GetSystemSettings ());  }  
Magic Number,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Init,The following statement contains a magic number: while ((result = reader.TryReadNext ()).Success && result.LogRecord.LogPosition < buildToPosition) {  	switch (result.LogRecord.RecordType) {  	case LogRecordType.Prepare: {  		var prepare = (PrepareLogRecord)result.LogRecord;  		if (prepare.Flags.HasAnyOf (PrepareFlags.IsCommitted)) {  			if (prepare.Flags.HasAnyOf (PrepareFlags.SingleWrite)) {  				Commit (commitedPrepares' false' false);  				commitedPrepares.Clear ();  				Commit (new[] {  					prepare  				}' result.Eof' false);  			} else {  				if (prepare.Flags.HasAnyOf (PrepareFlags.Data | PrepareFlags.StreamDelete))  					commitedPrepares.Add (prepare);  				if (prepare.Flags.HasAnyOf (PrepareFlags.TransactionEnd)) {  					Commit (commitedPrepares' result.Eof' false);  					commitedPrepares.Clear ();  				}  			}  		}  		break;  	}  	case LogRecordType.Commit:  		Commit ((CommitLogRecord)result.LogRecord' result.Eof' false);  		break;  	case LogRecordType.System:  		break;  	default:  		throw new Exception (string.Format ("Unknown RecordType: {0}"' result.LogRecord.RecordType));  	}  	processed += 1;  	if (DateTime.UtcNow - lastTime > reportPeriod || processed % 100000 == 0) {  		Log.Debug ("ReadIndex Rebuilding: processed {0} records ({1:0.0}%)."' processed' (result.RecordPostPosition - startPosition) * 100.0 / (buildToPosition - startPosition));  		lastTime = DateTime.UtcNow;  	}  }  
Magic Number,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Init,The following statement contains a magic number: while ((result = reader.TryReadNext ()).Success && result.LogRecord.LogPosition < buildToPosition) {  	switch (result.LogRecord.RecordType) {  	case LogRecordType.Prepare: {  		var prepare = (PrepareLogRecord)result.LogRecord;  		if (prepare.Flags.HasAnyOf (PrepareFlags.IsCommitted)) {  			if (prepare.Flags.HasAnyOf (PrepareFlags.SingleWrite)) {  				Commit (commitedPrepares' false' false);  				commitedPrepares.Clear ();  				Commit (new[] {  					prepare  				}' result.Eof' false);  			} else {  				if (prepare.Flags.HasAnyOf (PrepareFlags.Data | PrepareFlags.StreamDelete))  					commitedPrepares.Add (prepare);  				if (prepare.Flags.HasAnyOf (PrepareFlags.TransactionEnd)) {  					Commit (commitedPrepares' result.Eof' false);  					commitedPrepares.Clear ();  				}  			}  		}  		break;  	}  	case LogRecordType.Commit:  		Commit ((CommitLogRecord)result.LogRecord' result.Eof' false);  		break;  	case LogRecordType.System:  		break;  	default:  		throw new Exception (string.Format ("Unknown RecordType: {0}"' result.LogRecord.RecordType));  	}  	processed += 1;  	if (DateTime.UtcNow - lastTime > reportPeriod || processed % 100000 == 0) {  		Log.Debug ("ReadIndex Rebuilding: processed {0} records ({1:0.0}%)."' processed' (result.RecordPostPosition - startPosition) * 100.0 / (buildToPosition - startPosition));  		lastTime = DateTime.UtcNow;  	}  }  
Magic Number,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Init,The following statement contains a magic number: if (DateTime.UtcNow - lastTime > reportPeriod || processed % 100000 == 0) {  	Log.Debug ("ReadIndex Rebuilding: processed {0} records ({1:0.0}%)."' processed' (result.RecordPostPosition - startPosition) * 100.0 / (buildToPosition - startPosition));  	lastTime = DateTime.UtcNow;  }  
Magic Number,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Init,The following statement contains a magic number: if (DateTime.UtcNow - lastTime > reportPeriod || processed % 100000 == 0) {  	Log.Debug ("ReadIndex Rebuilding: processed {0} records ({1:0.0}%)."' processed' (result.RecordPostPosition - startPosition) * 100.0 / (buildToPosition - startPosition));  	lastTime = DateTime.UtcNow;  }  
Magic Number,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Init,The following statement contains a magic number: Log.Debug ("ReadIndex Rebuilding: processed {0} records ({1:0.0}%)."' processed' (result.RecordPostPosition - startPosition) * 100.0 / (buildToPosition - startPosition));  
Magic Number,EventStore.Core.Services.Monitoring,SystemStatsHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetPerfCounterInformation,The following statement contains a magic number: try {  	var procCpuUsage = _perfCounter.GetProcCpuUsage ();  	stats ["proc-startTime"] = process.StartTime.ToUniversalTime ().ToString ("O");  	stats ["proc-id"] = process.Id;  	stats ["proc-mem"] = new StatMetadata (process.WorkingSet64' "Process"' "Process Virtual Memory");  	stats ["proc-cpu"] = new StatMetadata (procCpuUsage' "Process"' "Process Cpu Usage");  	stats ["proc-cpuScaled"] = new StatMetadata (procCpuUsage / Environment.ProcessorCount' "Process"' "Process Cpu Usage Scaled by Logical Processor Count");  	stats ["proc-threadsCount"] = _perfCounter.GetProcThreadsCount ();  	stats ["proc-contentionsRate"] = _perfCounter.GetContentionsRateCount ();  	stats ["proc-thrownExceptionsRate"] = _perfCounter.GetThrownExceptionsRate ();  	stats ["sys-cpu"] = _perfCounter.GetTotalCpuUsage ();  	stats ["sys-freeMem"] = GetFreeMem ();  } catch (InvalidOperationException) {  	_log.Info ("Received error reading counters. Attempting to rebuild.");  	_perfCounter = new PerfCounterHelper (_log);  	_giveup = count > 10;  	if (_giveup)  		_log.Error ("Maximum rebuild attempts reached. Giving up on rebuilds.");  	else  		GetPerfCounterInformation (stats' count + 1);  }  
Magic Number,EventStore.Core.Services.Monitoring,SystemStatsHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetPerfCounterInformation,The following statement contains a magic number: _giveup = count > 10;  
Magic Number,EventStore.Core.Services.Monitoring,SystemStatsHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetFreeMemOnLinux,The following statement contains a magic number: try {  	meminfo = ShellExecutor.GetOutput ("free"' "-b");  	var meminfolines = meminfo.Split (new[] {  		Environment.NewLine  	}' StringSplitOptions.RemoveEmptyEntries);  	var ourline = meminfolines [1];  	var trimmedLine = SpacesRegex.Replace (ourline' " ");  	var freeRamStr = trimmedLine.Split (' ') [3];  	return long.Parse (freeRamStr);  } catch (Exception ex) {  	_log.DebugException (ex' "Could not get free mem on linux' received memory info raw string: [{0}]"' meminfo);  	return -1;  }  
Magic Number,EventStore.Core.Services.Monitoring,SystemStatsHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetFreeMemOnBSD,The following statement contains a magic number: try {  	var sysctl = ShellExecutor.GetOutput ("sysctl"' "-n hw.physmem hw.pagesize vm.stats.vm.v_free_count vm.stats.vm.v_cache_count vm.stats.vm.v_inactive_count");  	var sysctlStats = sysctl.Split (new[] {  		Environment.NewLine  	}' StringSplitOptions.RemoveEmptyEntries);  	long pageSize = long.Parse (sysctlStats [1]);  	long freePages = long.Parse (sysctlStats [2]);  	long cachePages = long.Parse (sysctlStats [3]);  	long inactivePages = long.Parse (sysctlStats [4]);  	return pageSize * (freePages + cachePages + inactivePages);  } catch (Exception ex) {  	_log.DebugException (ex' "Could not get free memory on BSD.");  	return -1;  }  
Magic Number,EventStore.Core.Services.Monitoring,SystemStatsHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetFreeMemOnBSD,The following statement contains a magic number: try {  	var sysctl = ShellExecutor.GetOutput ("sysctl"' "-n hw.physmem hw.pagesize vm.stats.vm.v_free_count vm.stats.vm.v_cache_count vm.stats.vm.v_inactive_count");  	var sysctlStats = sysctl.Split (new[] {  		Environment.NewLine  	}' StringSplitOptions.RemoveEmptyEntries);  	long pageSize = long.Parse (sysctlStats [1]);  	long freePages = long.Parse (sysctlStats [2]);  	long cachePages = long.Parse (sysctlStats [3]);  	long inactivePages = long.Parse (sysctlStats [4]);  	return pageSize * (freePages + cachePages + inactivePages);  } catch (Exception ex) {  	_log.DebugException (ex' "Could not get free memory on BSD.");  	return -1;  }  
Magic Number,EventStore.Core.Services.Monitoring,SystemStatsHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetFreeMemOnBSD,The following statement contains a magic number: try {  	var sysctl = ShellExecutor.GetOutput ("sysctl"' "-n hw.physmem hw.pagesize vm.stats.vm.v_free_count vm.stats.vm.v_cache_count vm.stats.vm.v_inactive_count");  	var sysctlStats = sysctl.Split (new[] {  		Environment.NewLine  	}' StringSplitOptions.RemoveEmptyEntries);  	long pageSize = long.Parse (sysctlStats [1]);  	long freePages = long.Parse (sysctlStats [2]);  	long cachePages = long.Parse (sysctlStats [3]);  	long inactivePages = long.Parse (sysctlStats [4]);  	return pageSize * (freePages + cachePages + inactivePages);  } catch (Exception ex) {  	_log.DebugException (ex' "Could not get free memory on BSD.");  	return -1;  }  
Magic Number,EventStore.Core.Services.Monitoring,SystemStatsHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetFreeMemOnOSX,The following statement contains a magic number: try {  	var vmstat = ShellExecutor.GetOutput ("vm_stat");  	var sysctlStats = vmstat.Split (new[] {  		Environment.NewLine  	}' StringSplitOptions.RemoveEmptyEntries);  	foreach (var line in sysctlStats) {  		var l = line.Substring (0' line.Length - 1);  		var pieces = l.Split (':');  		if (pieces.Length == 2) {  			if (pieces [0].Trim ().ToLower () == "pages free") {  				freePages = int.Parse (pieces [1]);  				break;  			}  		}  	}  	return 4096 * freePages;  } catch (Exception ex) {  	_log.DebugException (ex' "Could not get free memory on OSX.");  	return -1;  }  
Magic Number,EventStore.Core.Services.Monitoring,SystemStatsHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetFreeMemOnOSX,The following statement contains a magic number: try {  	var vmstat = ShellExecutor.GetOutput ("vm_stat");  	var sysctlStats = vmstat.Split (new[] {  		Environment.NewLine  	}' StringSplitOptions.RemoveEmptyEntries);  	foreach (var line in sysctlStats) {  		var l = line.Substring (0' line.Length - 1);  		var pieces = l.Split (':');  		if (pieces.Length == 2) {  			if (pieces [0].Trim ().ToLower () == "pages free") {  				freePages = int.Parse (pieces [1]);  				break;  			}  		}  	}  	return 4096 * freePages;  } catch (Exception ex) {  	_log.DebugException (ex' "Could not get free memory on OSX.");  	return -1;  }  
Magic Number,EventStore.Core.Services.Monitoring,SystemStatsHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetFreeMemOnOSX,The following statement contains a magic number: foreach (var line in sysctlStats) {  	var l = line.Substring (0' line.Length - 1);  	var pieces = l.Split (':');  	if (pieces.Length == 2) {  		if (pieces [0].Trim ().ToLower () == "pages free") {  			freePages = int.Parse (pieces [1]);  			break;  		}  	}  }  
Magic Number,EventStore.Core.Services.Monitoring,SystemStatsHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetFreeMemOnOSX,The following statement contains a magic number: if (pieces.Length == 2) {  	if (pieces [0].Trim ().ToLower () == "pages free") {  		freePages = int.Parse (pieces [1]);  		break;  	}  }  
Magic Number,EventStore.Core.Services.Monitoring,SystemStatsHelper,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetFreeMemOnOSX,The following statement contains a magic number: return 4096 * freePages;  
Magic Number,EventStore.Core.Services.Monitoring.Stats,StatsContainer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\Stats\StatsContainer.cs,Group,The following statement contains a magic number: foreach (var entry in input) {  	var groups = entry.Key.Split (SplitSeparator' StringSplitOptions.RemoveEmptyEntries);  	if (groups.Length < 2) {  		groupContainer.Add (entry.Key' entry.Value);  		continue;  	}  	hasSubGroups = true;  	string prefix = groups [0];  	string remaining = string.Join (Separator' groups.Skip (1).ToArray ());  	if (!groupContainer.ContainsKey (prefix))  		groupContainer.Add (prefix' NewDictionary ());  	((Dictionary<string' object>)groupContainer [prefix]).Add (remaining' entry.Value);  }  
Magic Number,EventStore.Core.Services.Monitoring.Stats,StatsContainer,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\Stats\StatsContainer.cs,Group,The following statement contains a magic number: if (groups.Length < 2) {  	groupContainer.Add (entry.Key' entry.Value);  	continue;  }  
Magic Number,EventStore.Core.Services.Monitoring.Stats,EsDriveInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\Stats\EsDriveInfo.cs,EsDriveInfo,The following statement contains a magic number: Usage = TotalBytes != 0 ? (UsedBytes * 100 / TotalBytes).ToString (CultureInfo.InvariantCulture) + "%" : "0%";  
Magic Number,EventStore.Core.Services.Monitoring.Stats,EsDriveInfo,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\Stats\EsDriveInfo.cs,GetDirectoryRootInUnix,The following statement contains a magic number: try {  	if (!Directory.Exists (directory))  		return null;  	var driveInfo = ShellExecutor.GetOutput ("df"' string.Format ("-P {0}"' directory));  	var driveInfoLines = driveInfo.Split (new[] {  		Environment.NewLine  	}' StringSplitOptions.RemoveEmptyEntries);  	if (driveInfoLines.Length == 0)  		return null;  	var ourline = driveInfoLines [1];  	var trimmedLine = SystemStatsHelper.SpacesRegex.Replace (ourline' " ");  	var driveName = trimmedLine.Split (' ') [5];  	//we choose the 'mounted on' column  	return driveName;  } catch (Exception ex) {  	log.DebugException (ex' "Could not get drive name for directory '{0}' on Unix."' directory);  	return null;  }  
Magic Number,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,ResolveLinkToEvent,The following statement contains a magic number: if (eventRecord.EventType == SystemEventTypes.LinkTo) {  	try {  		var parts = Helper.UTF8NoBom.GetString (eventRecord.Data).Split (LinkToSeparator' 2);  		long eventNumber = long.Parse (parts [0]);  		var streamId = parts [1];  		if (!_readIndex.CheckStreamAccess (streamId' StreamAccessType.Read' user).Granted)  			return null;  		var res = _readIndex.ReadEvent (streamId' eventNumber);  		if (res.Result == ReadEventResult.Success)  			return ResolvedEvent.ForResolvedLink (res.Record' eventRecord' commitPosition);  		return ResolvedEvent.ForFailedResolvedLink (eventRecord' res.Result' commitPosition);  	} catch (Exception exc) {  		Log.ErrorException (exc' "Error while resolving link for event record: {0}"' eventRecord.ToString ());  	}  	// return unresolved link  	return ResolvedEvent.ForFailedResolvedLink (eventRecord' ReadEventResult.Error' commitPosition);  }  
Magic Number,EventStore.Core.Services.Storage,StorageReaderWorker,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,ResolveLinkToEvent,The following statement contains a magic number: try {  	var parts = Helper.UTF8NoBom.GetString (eventRecord.Data).Split (LinkToSeparator' 2);  	long eventNumber = long.Parse (parts [0]);  	var streamId = parts [1];  	if (!_readIndex.CheckStreamAccess (streamId' StreamAccessType.Read' user).Granted)  		return null;  	var res = _readIndex.ReadEvent (streamId' eventNumber);  	if (res.Result == ReadEventResult.Success)  		return ResolvedEvent.ForResolvedLink (res.Record' eventRecord' commitPosition);  	return ResolvedEvent.ForFailedResolvedLink (eventRecord' res.Result' commitPosition);  } catch (Exception exc) {  	Log.ErrorException (exc' "Error while resolving link for event record: {0}"' eventRecord.ToString ());  }  
Magic Number,EventStore.Core.Services.Storage,StorageChaser,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageChaser.cs,ChaseTransactionLog,The following statement contains a magic number: try {  	_writerCheckpoint.Flushed += OnWriterFlushed;  	_chaser.Open ();  	// We rebuild index till the chaser position' because  	// everything else will be done by chaser as during replication  	// with no concurrency issues with writer' as writer before jumping  	// into master-mode and accepting writes will wait till chaser caught up.  	_indexCommitter.Init (_chaser.Checkpoint.Read ());  	_masterBus.Publish (new SystemMessage.ServiceInitialized ("StorageChaser"));  	while (!_stop) {  		if (_systemStarted)  			ChaserIteration ();  		else  			Thread.Sleep (1);  	}  } catch (Exception exc) {  	Log.FatalException (exc' "Error in StorageChaser. Terminating...");  	_queueStats.EnterIdle ();  	_queueStats.ProcessingStarted<FaultedChaserState> (0);  	Application.Exit (ExitCode.Error' "Error in StorageChaser. Terminating...\nError: " + exc.Message);  	while (!_stop) {  		Thread.Sleep (100);  	}  	_queueStats.ProcessingEnded (0);  }  
Magic Number,EventStore.Core.Services.Storage,StorageChaser,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageChaser.cs,ChaseTransactionLog,The following statement contains a magic number: while (!_stop) {  	Thread.Sleep (100);  }  
Magic Number,EventStore.Core.Services.Storage,StorageChaser,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageChaser.cs,ChaseTransactionLog,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,EventStore.Core.Services.Storage,StorageChaser,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageChaser.cs,ChaserIteration,The following statement contains a magic number: if (!result.Success || start - _lastFlush >= _flushDelay + MinFlushDelay) {  	_queueStats.ProcessingStarted<ChaserCheckpointFlush> (0);  	var startflush = _watch.ElapsedTicks;  	_chaser.Flush ();  	HistogramService.SetValue (_chaserFlushHistogram' (long)((((double)_watch.ElapsedTicks - startflush) / Stopwatch.Frequency) * 1000000000));  	_queueStats.ProcessingEnded (1);  	var end = _watch.ElapsedTicks;  	_flushDelay = end - start;  	_lastFlush = end;  }  
Magic Number,EventStore.Core.Services.Storage,StorageChaser,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageChaser.cs,ChaserIteration,The following statement contains a magic number: HistogramService.SetValue (_chaserFlushHistogram' (long)((((double)_watch.ElapsedTicks - startflush) / Stopwatch.Frequency) * 1000000000));  
Magic Number,EventStore.Core.Services.Storage,StorageChaser,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageChaser.cs,ChaserIteration,The following statement contains a magic number: if (!result.Success) {  	_queueStats.EnterIdle ();  	var startwait = _watch.ElapsedTicks;  	#if MONO  	                _flushSignal.WaitOne(FlushWaitTimeout); #else  	_flushSignal.Wait (FlushWaitTimeout);  	#endif  	HistogramService.SetValue (_chaserWaitHistogram' (long)((((double)_watch.ElapsedTicks - startwait) / Stopwatch.Frequency) * 1000000000));  }  
Magic Number,EventStore.Core.Services.Storage,StorageChaser,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageChaser.cs,ChaserIteration,The following statement contains a magic number: HistogramService.SetValue (_chaserWaitHistogram' (long)((((double)_watch.ElapsedTicks - startwait) / Stopwatch.Frequency) * 1000000000));  
Magic Number,EventStore.Core.Services.Storage,StorageReaderService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderService.cs,StorageReaderService,The following statement contains a magic number: _workersMultiHandler = new MultiQueuedHandler (_threadCount' queueNum => new QueuedHandlerThreadPool (storageReaderBus' string.Format ("StorageReaderQueue #{0}"' queueNum + 1)' groupName: "StorageReaderQueue"' watchSlowMsg: true' slowMsgThreshold: TimeSpan.FromMilliseconds (200)));  
Magic Number,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,StorageWriterService,The following statement contains a magic number: StorageWriterQueue = QueuedHandler.CreateQueuedHandler (new AdHocHandler<Message> (CommonHandle)' "StorageWriterQueue"' true' TimeSpan.FromMilliseconds (500));  
Magic Number,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Handle,The following statement contains a magic number: if (totalTime < TimeSpan.FromSeconds (5) || (int)totalTime.TotalSeconds % 30 == 0)  	// too verbose otherwise  	Log.Debug ("Still waiting for chaser to catch up already for {0}..."' totalTime);  
Magic Number,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Handle,The following statement contains a magic number: if (totalTime < TimeSpan.FromSeconds (5) || (int)totalTime.TotalSeconds % 30 == 0)  	// too verbose otherwise  	Log.Debug ("Still waiting for chaser to catch up already for {0}..."' totalTime);  
Magic Number,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Flush,The following statement contains a magic number: if (force || FlushMessagesInQueue == 0 || start - _lastFlushTimestamp >= _lastFlushDelay + _minFlushDelay) {  	var flushSize = Writer.Checkpoint.ReadNonFlushed () - Writer.Checkpoint.Read ();  	Writer.Flush ();  	HistogramService.SetValue (_writerFlushHistogram' (long)((((double)_watch.ElapsedTicks - start) / Stopwatch.Frequency) * 1000000000));  	var end = _watch.ElapsedTicks;  	var flushDelay = end - start;  	Interlocked.Exchange (ref _lastFlushDelay' flushDelay);  	Interlocked.Exchange (ref _lastFlushSize' flushSize);  	_lastFlushTimestamp = end;  	if (_statCount >= LastStatsCount) {  		Interlocked.Add (ref _sumFlushSize' -_lastFlushSizes [_statIndex]);  		Interlocked.Add (ref _sumFlushDelay' -_lastFlushDelays [_statIndex]);  	} else {  		_statCount += 1;  	}  	_lastFlushSizes [_statIndex] = flushSize;  	_lastFlushDelays [_statIndex] = flushDelay;  	Interlocked.Add (ref _sumFlushSize' flushSize);  	Interlocked.Add (ref _sumFlushDelay' flushDelay);  	Interlocked.Exchange (ref _maxFlushSize' Math.Max (Interlocked.Read (ref _maxFlushSize)' flushSize));  	Interlocked.Exchange (ref _maxFlushDelay' Math.Max (Interlocked.Read (ref _maxFlushDelay)' flushDelay));  	_statIndex = (_statIndex + 1) & (LastStatsCount - 1);  	PurgeNotProcessedInfo ();  	return true;  }  
Magic Number,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Flush,The following statement contains a magic number: HistogramService.SetValue (_writerFlushHistogram' (long)((((double)_watch.ElapsedTicks - start) / Stopwatch.Frequency) * 1000000000));  
Magic Number,EventStore.Core.Services.Transport.Http.Authentication,PasswordChangeNotificationReader,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Authentication\PasswordChangeNotificationReader.cs,ReadNotificationsFrom,The following statement contains a magic number: _ioDispatcher.ReadForward (UserManagementService.UserPasswordNotificationsStreamId' fromEventNumber' 100' false' SystemAccount.Principal' completed => {  	if (_stopped)  		return;  	switch (completed.Result) {  	case ReadStreamResult.AccessDenied:  	case ReadStreamResult.Error:  	case ReadStreamResult.NotModified:  		throw new Exception ("Failed to read: " + UserManagementService.UserPasswordNotificationsStreamId);  	case ReadStreamResult.NoStream:  	case ReadStreamResult.StreamDeleted:  		_ioDispatcher.Delay (TimeSpan.FromSeconds (1)' () => ReadNotificationsFrom (0));  		break;  	case ReadStreamResult.Success:  		foreach (var @event in completed.Events)  			PublishPasswordChangeNotificationFrom (@event);  		if (completed.IsEndOfStream)  			_ioDispatcher.Delay (TimeSpan.FromSeconds (1)' () => ReadNotificationsFrom (completed.NextEventNumber));  		else  			ReadNotificationsFrom (completed.NextEventNumber);  		break;  	default:  		throw new NotSupportedException ();  	}  });  
Magic Number,EventStore.Core.Services.Transport.Http.Authentication,TrustedHttpAuthenticationProvider,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Authentication\TrustedHttpAuthenticationProvider.cs,CreatePrincipal,The following statement contains a magic number: if (loginAndGroups.Length == 0 || loginAndGroups.Length > 2)  	return null;  
Magic Number,EventStore.Core.Services.Transport.Http.Authentication,TrustedHttpAuthenticationProvider,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Authentication\TrustedHttpAuthenticationProvider.cs,CreatePrincipal,The following statement contains a magic number: if (loginAndGroups.Length == 2) {  	var groups = loginAndGroups [1];  	var groupsSplit = groups.Split (''');  	var roles = new string[groupsSplit.Length + 1];  	Array.Copy (groupsSplit' roles' groupsSplit.Length);  	roles [roles.Length - 1] = login;  	for (var i = 0; i < roles.Length; i++)  		roles [i] = roles [i].Trim ();  	return new OpenGenericPrincipal (new GenericIdentity (login)' roles);  } else {  	return new OpenGenericPrincipal (new GenericIdentity (login)' new[] {  		login  	});  }  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,ClusterWebUiController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ClusterWebUIController.cs,OnListNodeSubsystems,The following statement contains a magic number: http.ReplyTextContent (Codec.Json.To (_enabledNodeSubsystems)' 200' "OK"' "application/json"' null' ex => Log.InfoException (ex' "Failed to prepare main menu"));  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,ClusterWebUiController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ClusterWebUIController.cs,RegisterRedirectAction,The following statement contains a magic number: service.RegisterAction (new ControllerAction (fromUrl' HttpMethod.Get' Codec.NoCodecs' new ICodec[] {  	Codec.ManualEncoding  })' (http' match) => http.ReplyTextContent ("Moved"' 302' "Found"' "text/plain"' new[] {  	new KeyValuePair<string' string> ("Location"' new Uri (http.HttpEntity.RequestedUrl' toUrl).AbsoluteUri)  }' Console.WriteLine));  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,ElectController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ElectController.cs,ElectController,The following statement contains a magic number: _operationTimeout = TimeSpan.FromMilliseconds (2000);  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,GossipController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\GossipController.cs,TryGetServerEndPoint,The following statement contains a magic number: if (IPAddress.TryParse (clusterInfoDto.ServerIp' out serverAddress) && clusterInfoDto.ServerPort > 0 && clusterInfoDto.ServerPort <= 65535) {  	serverEndPoint = new IPEndPoint (serverAddress' clusterInfoDto.ServerPort);  }  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,HistogramController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\HistogramController.cs,OnGetHistogram,The following statement contains a magic number: lock (histogram) {  	histogram.outputPercentileDistribution (writer' outputValueUnitScalingRatio: 1000.0 * 1000.0);  }  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,HistogramController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\HistogramController.cs,OnGetHistogram,The following statement contains a magic number: lock (histogram) {  	histogram.outputPercentileDistribution (writer' outputValueUnitScalingRatio: 1000.0 * 1000.0);  }  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,HistogramController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\HistogramController.cs,OnGetHistogram,The following statement contains a magic number: histogram.outputPercentileDistribution (writer' outputValueUnitScalingRatio: 1000.0 * 1000.0);  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,HistogramController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\HistogramController.cs,OnGetHistogram,The following statement contains a magic number: histogram.outputPercentileDistribution (writer' outputValueUnitScalingRatio: 1000.0 * 1000.0);  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,HttpHelpers,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\HttpHelpers.cs,RegisterRedirectAction,The following statement contains a magic number: service.RegisterAction (new ControllerAction (fromUrl' HttpMethod.Get' Codec.NoCodecs' new ICodec[] {  	Codec.ManualEncoding  })' (http' match) => http.ReplyTextContent ("Moved"' 302' "Found"' "text/plain"' new[] {  	new KeyValuePair<string' string> ("Location"' new Uri (match.BaseUri' toUrl).AbsoluteUri)  }' Console.WriteLine));  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,GetNextNMessages,The following statement contains a magic number: if (!cnt.IsEmptyString () && (!int.TryParse (cnt' out count) || count > 100 || count < 1)) {  	SendBadRequest (http' string.Format ("Message count must be an integer between 1 and 100 'count' ='{0}'"' count));  	return;  }  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,StatController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\StatController.cs,GetStatSelector,The following statement contains a magic number: if (statPath.StartsWith ("stats/")) {  	statPath = statPath.Substring (6);  	if (string.IsNullOrEmpty (statPath))  		return dict => dict;  }  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,StatController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\StatController.cs,GetStatSelector,The following statement contains a magic number: statPath = statPath.Substring (6);  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,PostEntry,The following statement contains a magic number: manager.ReadRequestAsync ((man' body) => {  	var events = new Event[0];  	try {  		events = AutoEventConverter.SmartParse (body' manager.RequestCodec' idIncluded' typeIncluded);  	} catch (Exception ex) {  		SendBadRequest (manager' ex.Message);  		return;  	}  	if (events.IsEmpty ()) {  		SendBadRequest (manager' "Write request body invalid.");  		return;  	}  	foreach (var e in events) {  		if (e.Data.Length + e.Metadata.Length > 4 * 1024 * 1024) {  			SendTooBig (manager);  		}  	}  	var envelope = new SendToHttpEnvelope (_networkSendQueue' manager' Format.WriteEventsCompleted' (a' m) => Configure.WriteEventsCompleted (a' m' stream));  	var corrId = Guid.NewGuid ();  	var msg = new ClientMessage.WriteEvents (corrId' corrId' envelope' requireMaster' stream' expectedVersion' events' manager.User);  	Publish (msg);  }' e => Log.Debug ("Error while reading request (POST entry): {0}."' e.Message));  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,PostEntry,The following statement contains a magic number: manager.ReadRequestAsync ((man' body) => {  	var events = new Event[0];  	try {  		events = AutoEventConverter.SmartParse (body' manager.RequestCodec' idIncluded' typeIncluded);  	} catch (Exception ex) {  		SendBadRequest (manager' ex.Message);  		return;  	}  	if (events.IsEmpty ()) {  		SendBadRequest (manager' "Write request body invalid.");  		return;  	}  	foreach (var e in events) {  		if (e.Data.Length + e.Metadata.Length > 4 * 1024 * 1024) {  			SendTooBig (manager);  		}  	}  	var envelope = new SendToHttpEnvelope (_networkSendQueue' manager' Format.WriteEventsCompleted' (a' m) => Configure.WriteEventsCompleted (a' m' stream));  	var corrId = Guid.NewGuid ();  	var msg = new ClientMessage.WriteEvents (corrId' corrId' envelope' requireMaster' stream' expectedVersion' events' manager.User);  	Publish (msg);  }' e => Log.Debug ("Error while reading request (POST entry): {0}."' e.Message));  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,PostEntry,The following statement contains a magic number: manager.ReadRequestAsync ((man' body) => {  	var events = new Event[0];  	try {  		events = AutoEventConverter.SmartParse (body' manager.RequestCodec' idIncluded' typeIncluded);  	} catch (Exception ex) {  		SendBadRequest (manager' ex.Message);  		return;  	}  	if (events.IsEmpty ()) {  		SendBadRequest (manager' "Write request body invalid.");  		return;  	}  	foreach (var e in events) {  		if (e.Data.Length + e.Metadata.Length > 4 * 1024 * 1024) {  			SendTooBig (manager);  		}  	}  	var envelope = new SendToHttpEnvelope (_networkSendQueue' manager' Format.WriteEventsCompleted' (a' m) => Configure.WriteEventsCompleted (a' m' stream));  	var corrId = Guid.NewGuid ();  	var msg = new ClientMessage.WriteEvents (corrId' corrId' envelope' requireMaster' stream' expectedVersion' events' manager.User);  	Publish (msg);  }' e => Log.Debug ("Error while reading request (POST entry): {0}."' e.Message));  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,PostEntry,The following statement contains a magic number: foreach (var e in events) {  	if (e.Data.Length + e.Metadata.Length > 4 * 1024 * 1024) {  		SendTooBig (manager);  	}  }  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,PostEntry,The following statement contains a magic number: foreach (var e in events) {  	if (e.Data.Length + e.Metadata.Length > 4 * 1024 * 1024) {  		SendTooBig (manager);  	}  }  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,PostEntry,The following statement contains a magic number: foreach (var e in events) {  	if (e.Data.Length + e.Metadata.Length > 4 * 1024 * 1024) {  		SendTooBig (manager);  	}  }  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,PostEntry,The following statement contains a magic number: if (e.Data.Length + e.Metadata.Length > 4 * 1024 * 1024) {  	SendTooBig (manager);  }  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,PostEntry,The following statement contains a magic number: if (e.Data.Length + e.Metadata.Length > 4 * 1024 * 1024) {  	SendTooBig (manager);  }  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,PostEntry,The following statement contains a magic number: if (e.Data.Length + e.Metadata.Length > 4 * 1024 * 1024) {  	SendTooBig (manager);  }  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetETagStreamVersion,The following statement contains a magic number: if (etag.IsNotEmptyString ()) {  	// etag format is version;contenttypehash  	var splitted = etag.Trim ('\"').Split (ETagSeparatorArray);  	if (splitted.Length == 2) {  		var typeHash = manager.ResponseCodec.ContentType.GetHashCode ().ToString (CultureInfo.InvariantCulture);  		long streamVersion;  		var res = splitted [1] == typeHash && long.TryParse (splitted [0]' out streamVersion) ? (long?)streamVersion : null;  		return res;  	}  }  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetETagStreamVersion,The following statement contains a magic number: if (splitted.Length == 2) {  	var typeHash = manager.ResponseCodec.ContentType.GetHashCode ().ToString (CultureInfo.InvariantCulture);  	long streamVersion;  	var res = splitted [1] == typeHash && long.TryParse (splitted [0]' out streamVersion) ? (long?)streamVersion : null;  	return res;  }  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetETagTFPosition,The following statement contains a magic number: if (etag.IsNotEmptyString ()) {  	// etag format is version;contenttypehash  	var splitted = etag.Trim ('\"').Split (ETagSeparatorArray);  	if (splitted.Length == 2) {  		var typeHash = manager.ResponseCodec.ContentType.GetHashCode ().ToString (CultureInfo.InvariantCulture);  		long tfEofPosition;  		return splitted [1] == typeHash && long.TryParse (splitted [0]' out tfEofPosition) ? (long?)tfEofPosition : null;  	}  }  
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,AtomController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetETagTFPosition,The following statement contains a magic number: if (splitted.Length == 2) {  	var typeHash = manager.ResponseCodec.ContentType.GetHashCode ().ToString (CultureInfo.InvariantCulture);  	long tfEofPosition;  	return splitted [1] == typeHash && long.TryParse (splitted [0]' out tfEofPosition) ? (long?)tfEofPosition : null;  }  
Magic Number,EventStore.Core.Services.Transport.Http,ControllerAction,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\ControllerAction.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (UriTemplate.GetHashCode () * 397) ^ HttpMethod.GetHashCode ();  }  
Magic Number,EventStore.Core.Services.Transport.Http,ControllerAction,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\ControllerAction.cs,GetHashCode,The following statement contains a magic number: return (UriTemplate.GetHashCode () * 397) ^ HttpMethod.GetHashCode ();  
Magic Number,EventStore.Core.Services.Transport.Http,ResponseConfiguration,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\ResponseConfiguration.cs,GetHttpStatusDescription,The following statement contains a magic number: if (code == 200)  	return "OK";  
Magic Number,EventStore.Core.Services.Transport.Http,SendToHttpEnvelope,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\SendToHttpEnvelope.cs,Configurator,The following statement contains a magic number: try {  	return _configurator (http.ResponseCodec' (TExpectedResponseMessage)message);  } catch (InvalidCastException) {  	//NOTE: using exceptions to allow handling errors in debugger  	return new ResponseConfiguration (500' "Internal server error"' "text/plain"' Helper.UTF8NoBom);  }  
Magic Number,EventStore.Core.Services.Transport.Http,SendToHttpEnvelope,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\SendToHttpEnvelope.cs,Configurator,The following statement contains a magic number: return new ResponseConfiguration (500' "Internal server error"' "text/plain"' Helper.UTF8NoBom);  
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpDispatcher.cs,TcpDispatcher,The following statement contains a magic number: _unwrappers = new Func<TcpPackage' IEnvelope' IPrincipal' string' string' TcpConnectionManager' Message>[2][];  
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpDispatcher.cs,TcpDispatcher,The following statement contains a magic number: _unwrappers [0] = new Func<TcpPackage' IEnvelope' IPrincipal' string' string' TcpConnectionManager' Message>[255];  
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpDispatcher.cs,TcpDispatcher,The following statement contains a magic number: _unwrappers [1] = new Func<TcpPackage' IEnvelope' IPrincipal' string' string' TcpConnectionManager' Message>[255];  
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpDispatcher,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpDispatcher.cs,TcpDispatcher,The following statement contains a magic number: _wrappers = new Dictionary<Type' Func<Message' TcpPackage>>[2];  
Magic Number,EventStore.Core.Services.Transport.Tcp,ProtobufExtensions,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ProtobufExtensions.cs,ProtobufExtensions,The following statement contains a magic number: for (var i = 0; i < 300; i++) {  	_streams.Push (new MemoryStream (2048));  }  
Magic Number,EventStore.Core.Services.Transport.Tcp,ProtobufExtensions,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ProtobufExtensions.cs,ProtobufExtensions,The following statement contains a magic number: for (var i = 0; i < 300; i++) {  	_streams.Push (new MemoryStream (2048));  }  
Magic Number,EventStore.Core.Services.Transport.Tcp,ProtobufExtensions,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ProtobufExtensions.cs,ProtobufExtensions,The following statement contains a magic number: _streams.Push (new MemoryStream (2048));  
Magic Number,EventStore.Core.Services.Transport.Tcp,ProtobufExtensions,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ProtobufExtensions.cs,AcquireStream,The following statement contains a magic number: for (var i = 0; i < 1000; i++) {  	MemoryStream ret;  	if (_streams.TryPop (out ret)) {  		ret.SetLength (0);  		return ret;  	}  	if ((i + 1) % 5 == 0)  		Thread.Sleep (1);  	//need to do better than this  }  
Magic Number,EventStore.Core.Services.Transport.Tcp,ProtobufExtensions,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ProtobufExtensions.cs,AcquireStream,The following statement contains a magic number: for (var i = 0; i < 1000; i++) {  	MemoryStream ret;  	if (_streams.TryPop (out ret)) {  		ret.SetLength (0);  		return ret;  	}  	if ((i + 1) % 5 == 0)  		Thread.Sleep (1);  	//need to do better than this  }  
Magic Number,EventStore.Core.Services.Transport.Tcp,ProtobufExtensions,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ProtobufExtensions.cs,AcquireStream,The following statement contains a magic number: if ((i + 1) % 5 == 0)  	Thread.Sleep (1);  
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpPackage,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,FromArraySegment,The following statement contains a magic number: Buffer.BlockCopy (data.Array' data.Offset + CorrelationOffset' guidBytes' 0' 16);  
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpPackage,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,AsByteArray,The following statement contains a magic number: if ((Flags & TcpFlags.Authenticated) != 0) {  	var loginLen = Helper.UTF8NoBom.GetByteCount (Login);  	var passLen = Helper.UTF8NoBom.GetByteCount (Password);  	if (loginLen > 255)  		throw new ArgumentException (string.Format ("Login serialized length should be less than 256 bytes (but is {0})."' loginLen));  	if (passLen > 255)  		throw new ArgumentException (string.Format ("Password serialized length should be less than 256 bytes (but is {0})."' passLen));  	var res = new byte[MandatorySize + 2 + loginLen + passLen + Data.Count];  	res [CommandOffset] = (byte)Command;  	res [FlagsOffset] = (byte)Flags;  	Buffer.BlockCopy (CorrelationId.ToByteArray ()' 0' res' CorrelationOffset' 16);  	res [AuthOffset] = (byte)loginLen;  	Helper.UTF8NoBom.GetBytes (Login' 0' Login.Length' res' AuthOffset + 1);  	res [AuthOffset + 1 + loginLen] = (byte)passLen;  	Helper.UTF8NoBom.GetBytes (Password' 0' Password.Length' res' AuthOffset + 1 + loginLen + 1);  	Buffer.BlockCopy (Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);  	return res;  } else {  	var res = new byte[MandatorySize + Data.Count];  	res [CommandOffset] = (byte)Command;  	res [FlagsOffset] = (byte)Flags;  	Buffer.BlockCopy (CorrelationId.ToByteArray ()' 0' res' CorrelationOffset' 16);  	Buffer.BlockCopy (Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);  	return res;  }  
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpPackage,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,AsByteArray,The following statement contains a magic number: if ((Flags & TcpFlags.Authenticated) != 0) {  	var loginLen = Helper.UTF8NoBom.GetByteCount (Login);  	var passLen = Helper.UTF8NoBom.GetByteCount (Password);  	if (loginLen > 255)  		throw new ArgumentException (string.Format ("Login serialized length should be less than 256 bytes (but is {0})."' loginLen));  	if (passLen > 255)  		throw new ArgumentException (string.Format ("Password serialized length should be less than 256 bytes (but is {0})."' passLen));  	var res = new byte[MandatorySize + 2 + loginLen + passLen + Data.Count];  	res [CommandOffset] = (byte)Command;  	res [FlagsOffset] = (byte)Flags;  	Buffer.BlockCopy (CorrelationId.ToByteArray ()' 0' res' CorrelationOffset' 16);  	res [AuthOffset] = (byte)loginLen;  	Helper.UTF8NoBom.GetBytes (Login' 0' Login.Length' res' AuthOffset + 1);  	res [AuthOffset + 1 + loginLen] = (byte)passLen;  	Helper.UTF8NoBom.GetBytes (Password' 0' Password.Length' res' AuthOffset + 1 + loginLen + 1);  	Buffer.BlockCopy (Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);  	return res;  } else {  	var res = new byte[MandatorySize + Data.Count];  	res [CommandOffset] = (byte)Command;  	res [FlagsOffset] = (byte)Flags;  	Buffer.BlockCopy (CorrelationId.ToByteArray ()' 0' res' CorrelationOffset' 16);  	Buffer.BlockCopy (Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);  	return res;  }  
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpPackage,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,AsByteArray,The following statement contains a magic number: if ((Flags & TcpFlags.Authenticated) != 0) {  	var loginLen = Helper.UTF8NoBom.GetByteCount (Login);  	var passLen = Helper.UTF8NoBom.GetByteCount (Password);  	if (loginLen > 255)  		throw new ArgumentException (string.Format ("Login serialized length should be less than 256 bytes (but is {0})."' loginLen));  	if (passLen > 255)  		throw new ArgumentException (string.Format ("Password serialized length should be less than 256 bytes (but is {0})."' passLen));  	var res = new byte[MandatorySize + 2 + loginLen + passLen + Data.Count];  	res [CommandOffset] = (byte)Command;  	res [FlagsOffset] = (byte)Flags;  	Buffer.BlockCopy (CorrelationId.ToByteArray ()' 0' res' CorrelationOffset' 16);  	res [AuthOffset] = (byte)loginLen;  	Helper.UTF8NoBom.GetBytes (Login' 0' Login.Length' res' AuthOffset + 1);  	res [AuthOffset + 1 + loginLen] = (byte)passLen;  	Helper.UTF8NoBom.GetBytes (Password' 0' Password.Length' res' AuthOffset + 1 + loginLen + 1);  	Buffer.BlockCopy (Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);  	return res;  } else {  	var res = new byte[MandatorySize + Data.Count];  	res [CommandOffset] = (byte)Command;  	res [FlagsOffset] = (byte)Flags;  	Buffer.BlockCopy (CorrelationId.ToByteArray ()' 0' res' CorrelationOffset' 16);  	Buffer.BlockCopy (Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);  	return res;  }  
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpPackage,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,AsByteArray,The following statement contains a magic number: if ((Flags & TcpFlags.Authenticated) != 0) {  	var loginLen = Helper.UTF8NoBom.GetByteCount (Login);  	var passLen = Helper.UTF8NoBom.GetByteCount (Password);  	if (loginLen > 255)  		throw new ArgumentException (string.Format ("Login serialized length should be less than 256 bytes (but is {0})."' loginLen));  	if (passLen > 255)  		throw new ArgumentException (string.Format ("Password serialized length should be less than 256 bytes (but is {0})."' passLen));  	var res = new byte[MandatorySize + 2 + loginLen + passLen + Data.Count];  	res [CommandOffset] = (byte)Command;  	res [FlagsOffset] = (byte)Flags;  	Buffer.BlockCopy (CorrelationId.ToByteArray ()' 0' res' CorrelationOffset' 16);  	res [AuthOffset] = (byte)loginLen;  	Helper.UTF8NoBom.GetBytes (Login' 0' Login.Length' res' AuthOffset + 1);  	res [AuthOffset + 1 + loginLen] = (byte)passLen;  	Helper.UTF8NoBom.GetBytes (Password' 0' Password.Length' res' AuthOffset + 1 + loginLen + 1);  	Buffer.BlockCopy (Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);  	return res;  } else {  	var res = new byte[MandatorySize + Data.Count];  	res [CommandOffset] = (byte)Command;  	res [FlagsOffset] = (byte)Flags;  	Buffer.BlockCopy (CorrelationId.ToByteArray ()' 0' res' CorrelationOffset' 16);  	Buffer.BlockCopy (Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);  	return res;  }  
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpPackage,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,AsByteArray,The following statement contains a magic number: if ((Flags & TcpFlags.Authenticated) != 0) {  	var loginLen = Helper.UTF8NoBom.GetByteCount (Login);  	var passLen = Helper.UTF8NoBom.GetByteCount (Password);  	if (loginLen > 255)  		throw new ArgumentException (string.Format ("Login serialized length should be less than 256 bytes (but is {0})."' loginLen));  	if (passLen > 255)  		throw new ArgumentException (string.Format ("Password serialized length should be less than 256 bytes (but is {0})."' passLen));  	var res = new byte[MandatorySize + 2 + loginLen + passLen + Data.Count];  	res [CommandOffset] = (byte)Command;  	res [FlagsOffset] = (byte)Flags;  	Buffer.BlockCopy (CorrelationId.ToByteArray ()' 0' res' CorrelationOffset' 16);  	res [AuthOffset] = (byte)loginLen;  	Helper.UTF8NoBom.GetBytes (Login' 0' Login.Length' res' AuthOffset + 1);  	res [AuthOffset + 1 + loginLen] = (byte)passLen;  	Helper.UTF8NoBom.GetBytes (Password' 0' Password.Length' res' AuthOffset + 1 + loginLen + 1);  	Buffer.BlockCopy (Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);  	return res;  } else {  	var res = new byte[MandatorySize + Data.Count];  	res [CommandOffset] = (byte)Command;  	res [FlagsOffset] = (byte)Flags;  	Buffer.BlockCopy (CorrelationId.ToByteArray ()' 0' res' CorrelationOffset' 16);  	Buffer.BlockCopy (Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);  	return res;  }  
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpPackage,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,AsByteArray,The following statement contains a magic number: if (loginLen > 255)  	throw new ArgumentException (string.Format ("Login serialized length should be less than 256 bytes (but is {0})."' loginLen));  
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpPackage,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,AsByteArray,The following statement contains a magic number: if (passLen > 255)  	throw new ArgumentException (string.Format ("Password serialized length should be less than 256 bytes (but is {0})."' passLen));  
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpPackage,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,AsByteArray,The following statement contains a magic number: Buffer.BlockCopy (CorrelationId.ToByteArray ()' 0' res' CorrelationOffset' 16);  
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpPackage,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,AsByteArray,The following statement contains a magic number: Buffer.BlockCopy (CorrelationId.ToByteArray ()' 0' res' CorrelationOffset' 16);  
Magic Number,EventStore.Core.Services.UserManagement,UserManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\UserManagementService.cs,Handle,The following statement contains a magic number: _numberOfStandardUsersToBeCreated = 2;  
Magic Number,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,ClusterVNodeController,The following statement contains a magic number: if (vnodeSettings.ClusterNodeCount == 1) {  	_serviceShutdownsToExpect = 4;  }  
Magic Number,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,ClusterVNodeController,The following statement contains a magic number: _serviceShutdownsToExpect = 4;  
Magic Number,EventStore.Core.Services.VNode,ClusterVNodeController,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,ClusterVNodeController,The following statement contains a magic number: _forwardingTimeout = vnodeSettings.PrepareTimeout + vnodeSettings.CommitTimeout + TimeSpan.FromMilliseconds (300);  
Magic Number,EventStore.Core.TransactionLog.Checkpoint,FileCheckpoint,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Checkpoint\FileCheckpoint.cs,FileCheckpoint,The following statement contains a magic number: if (_fileStream.Length != 8)  	_fileStream.SetLength (8);  
Magic Number,EventStore.Core.TransactionLog.Checkpoint,FileCheckpoint,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Checkpoint\FileCheckpoint.cs,FileCheckpoint,The following statement contains a magic number: if (_fileStream.Length != 8)  	_fileStream.SetLength (8);  
Magic Number,EventStore.Core.TransactionLog.Checkpoint,FileCheckpoint,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Checkpoint\FileCheckpoint.cs,FileCheckpoint,The following statement contains a magic number: _fileStream.SetLength (8);  
Magic Number,EventStore.Core.TransactionLog.Checkpoint,WriteThroughFileCheckpoint,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Checkpoint\WriteThroughFileCheckpoint.cs,WriteThroughFileCheckpoint,The following statement contains a magic number: buffer = new byte[4096];  
Magic Number,EventStore.Core.TransactionLog.Checkpoint,WriteThroughFileCheckpoint,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Checkpoint\WriteThroughFileCheckpoint.cs,WriteThroughFileCheckpoint,The following statement contains a magic number: _stream = new FileStream (handle' FileAccess.ReadWrite' 4096);  
Magic Number,EventStore.Core.TransactionLog.Checkpoint,WriteThroughFileCheckpoint,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Checkpoint\WriteThroughFileCheckpoint.cs,WriteThroughFileCheckpoint,The following statement contains a magic number: _stream.SetLength (4096);  
Magic Number,EventStore.Core.TransactionLog.Chunks,TFChunkDbTruncator,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDbTruncator.cs,TruncateChunkAndFillWithZeros,The following statement contains a magic number: using (var fs = new FileStream (chunkFilename' FileMode.Open' FileAccess.ReadWrite' FileShare.Read)) {  	fs.SetLength (ChunkHeader.Size + chunkHeader.ChunkSize + ChunkFooter.Size);  	fs.Position = ChunkHeader.Size + chunkHeader.GetLocalLogPosition (truncateChk);  	var zeros = new byte[65536];  	var leftToWrite = fs.Length - fs.Position;  	while (leftToWrite > 0) {  		var toWrite = (int)Math.Min (leftToWrite' zeros.Length);  		fs.Write (zeros' 0' toWrite);  		leftToWrite -= toWrite;  	}  	fs.FlushToDisk ();  }  
Magic Number,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ScavengeChunks,The following statement contains a magic number: try {  	var commits = new Dictionary<long' CommitInfo> ();  	foreach (var oldChunk in oldChunks) {  		TraverseChunk (oldChunk' prepare => {  			/* NOOP */}' commit => {  			if (commit.TransactionPosition >= chunkStartPos)  				commits.Add (commit.TransactionPosition' new CommitInfo (commit));  		}' system => {  			/* NOOP */});  	}  	var positionMapping = new List<PosMap> ();  	foreach (var oldChunk in oldChunks) {  		TraverseChunk (oldChunk' prepare => {  			if (ShouldKeepPrepare (prepare' commits' chunkStartPos' chunkEndPos))  				positionMapping.Add (WriteRecord (newChunk' prepare));  		}' commit => {  			if (ShouldKeepCommit (commit' commits))  				positionMapping.Add (WriteRecord (newChunk' commit));  		}' // we always keep system log records for now  		system => positionMapping.Add (WriteRecord (newChunk' system)));  	}  	newChunk.CompleteScavenge (positionMapping);  	var oldSize = oldChunks.Sum (x => (long)x.PhysicalDataSize + x.ChunkFooter.MapSize + ChunkHeader.Size + ChunkFooter.Size);  	var newSize = (long)newChunk.PhysicalDataSize + PosMap.FullSize * positionMapping.Count + ChunkHeader.Size + ChunkFooter.Size;  	if (_unsafeIgnoreHardDeletes) {  		Log.Trace ("Forcing scavenge chunk to be kept even if bigger.");  	}  	var oldVersion = oldChunks.Any (x => x.ChunkHeader.Version != 3);  	if (oldVersion) {  		Log.Trace ("Forcing scavenged chunk to be kept as old chunk is a previous version.");  	}  	if (oldSize <= newSize && !alwaysKeepScavenged && !_unsafeIgnoreHardDeletes && !oldVersion) {  		Log.Trace ("Scavenging of chunks:");  		Log.Trace (oldChunksList);  		Log.Trace ("completed in {0}."' sw.Elapsed);  		Log.Trace ("Old chunks' versions are kept as they are smaller.");  		Log.Trace ("Old chunk total size: {0}' scavenged chunk size: {1}."' oldSize' newSize);  		Log.Trace ("Scavenged chunk removed.");  		newChunk.MarkForDeletion ();  		PublishChunksCompletedEvent (chunkStartNumber' chunkEndNumber' sw.Elapsed' false' spaceSaved);  		return false;  	}  	var chunk = _db.Manager.SwitchChunk (newChunk' verifyHash: false' removeChunksWithGreaterNumbers: false);  	if (chunk != null) {  		Log.Trace ("Scavenging of chunks:");  		Log.Trace (oldChunksList);  		Log.Trace ("completed in {0}."' sw.Elapsed);  		Log.Trace ("New chunk: {0} --> #{1}-{2} ({3})."' Path.GetFileName (tmpChunkPath)' chunkStartNumber' chunkEndNumber' Path.GetFileName (chunk.FileName));  		Log.Trace ("Old chunks total size: {0}' scavenged chunk size: {1}."' oldSize' newSize);  		spaceSaved = oldSize - newSize;  		PublishChunksCompletedEvent (chunkStartNumber' chunkEndNumber' sw.Elapsed' true' spaceSaved);  		return true;  	} else {  		Log.Trace ("Scavenging of chunks:");  		Log.Trace ("{0}"' oldChunksList);  		Log.Trace ("completed in {1}."' sw.Elapsed);  		Log.Trace ("But switching was prevented for new chunk: #{0}-{1} ({2})."' chunkStartNumber' chunkEndNumber' Path.GetFileName (tmpChunkPath));  		Log.Trace ("Old chunks total size: {0}' scavenged chunk size: {1}."' oldSize' newSize);  		PublishChunksCompletedEvent (chunkStartNumber' chunkEndNumber' sw.Elapsed' false' spaceSaved);  		return false;  	}  } catch (FileBeingDeletedException exc) {  	Log.Info ("Got FileBeingDeletedException exception during scavenging' that probably means some chunks were re-replicated.");  	Log.Info ("Scavenging of following chunks will be skipped:");  	Log.Info ("{0}"' oldChunksList);  	Log.Info ("Stopping scavenging and removing temp chunk '{0}'..."' tmpChunkPath);  	Log.Info ("Exception message: {0}."' exc.Message);  	DeleteTempChunk (tmpChunkPath' MaxRetryCount);  	PublishChunksCompletedEvent (chunkStartNumber' chunkEndNumber' sw.Elapsed' false' spaceSaved' exc.Message);  	return false;  } catch (Exception ex) {  	Log.Info ("Got exception while scavenging chunk: #{0}-{1}. This chunk will be skipped\n" + "Exception: {2}."' chunkStartNumber' chunkEndNumber' ex.ToString ());  	DeleteTempChunk (tmpChunkPath' MaxRetryCount);  	PublishChunksCompletedEvent (chunkStartNumber' chunkEndNumber' sw.Elapsed' false' 0' ex.Message);  	return false;  }  
Magic Number,EventStore.Core.TransactionLog.Chunks,ChunkFooter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\ChunkFooter.cs,AsByteArray,The following statement contains a magic number: using (var memStream = new MemoryStream (array))  	using (var writer = new BinaryWriter (memStream)) {  		var flags = (byte)((IsCompleted ? 1 : 0) | (IsMap12Bytes ? 2 : 0));  		writer.Write (flags);  		writer.Write (PhysicalDataSize);  		if (IsMap12Bytes)  			writer.Write (LogicalDataSize);  		else  			writer.Write ((int)LogicalDataSize);  		writer.Write (MapSize);  		memStream.Position = Size - ChecksumSize;  		writer.Write (MD5Hash);  	}  
Magic Number,EventStore.Core.TransactionLog.Chunks,ChunkFooter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\ChunkFooter.cs,AsByteArray,The following statement contains a magic number: using (var writer = new BinaryWriter (memStream)) {  	var flags = (byte)((IsCompleted ? 1 : 0) | (IsMap12Bytes ? 2 : 0));  	writer.Write (flags);  	writer.Write (PhysicalDataSize);  	if (IsMap12Bytes)  		writer.Write (LogicalDataSize);  	else  		writer.Write ((int)LogicalDataSize);  	writer.Write (MapSize);  	memStream.Position = Size - ChecksumSize;  	writer.Write (MD5Hash);  }  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,Alignv2File,The following statement contains a magic number: try {  	SetAttributes (filename' false);  	using (var stream = new FileStream (filename' FileMode.Open' FileAccess.ReadWrite' FileShare.ReadWrite)) {  		if (stream.Length % 4096 == 0)  			return;  		var footerStart = stream.Length - ChunkFooter.Size;  		var alignedSize = (stream.Length / 4096 + 1) * 4096;  		var footer = new byte[ChunkFooter.Size];  		stream.SetLength (alignedSize);  		stream.Seek (footerStart' SeekOrigin.Begin);  		stream.Read (footer' 0' ChunkFooter.Size);  		stream.Seek (footerStart' SeekOrigin.Begin);  		var bytes = new byte[alignedSize - footerStart - ChunkFooter.Size];  		stream.Write (bytes' 0' bytes.Length);  		stream.Write (footer' 0' footer.Length);  	}  } finally {  	SetAttributes (filename' true);  }  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,Alignv2File,The following statement contains a magic number: try {  	SetAttributes (filename' false);  	using (var stream = new FileStream (filename' FileMode.Open' FileAccess.ReadWrite' FileShare.ReadWrite)) {  		if (stream.Length % 4096 == 0)  			return;  		var footerStart = stream.Length - ChunkFooter.Size;  		var alignedSize = (stream.Length / 4096 + 1) * 4096;  		var footer = new byte[ChunkFooter.Size];  		stream.SetLength (alignedSize);  		stream.Seek (footerStart' SeekOrigin.Begin);  		stream.Read (footer' 0' ChunkFooter.Size);  		stream.Seek (footerStart' SeekOrigin.Begin);  		var bytes = new byte[alignedSize - footerStart - ChunkFooter.Size];  		stream.Write (bytes' 0' bytes.Length);  		stream.Write (footer' 0' footer.Length);  	}  } finally {  	SetAttributes (filename' true);  }  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,Alignv2File,The following statement contains a magic number: try {  	SetAttributes (filename' false);  	using (var stream = new FileStream (filename' FileMode.Open' FileAccess.ReadWrite' FileShare.ReadWrite)) {  		if (stream.Length % 4096 == 0)  			return;  		var footerStart = stream.Length - ChunkFooter.Size;  		var alignedSize = (stream.Length / 4096 + 1) * 4096;  		var footer = new byte[ChunkFooter.Size];  		stream.SetLength (alignedSize);  		stream.Seek (footerStart' SeekOrigin.Begin);  		stream.Read (footer' 0' ChunkFooter.Size);  		stream.Seek (footerStart' SeekOrigin.Begin);  		var bytes = new byte[alignedSize - footerStart - ChunkFooter.Size];  		stream.Write (bytes' 0' bytes.Length);  		stream.Write (footer' 0' footer.Length);  	}  } finally {  	SetAttributes (filename' true);  }  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,Alignv2File,The following statement contains a magic number: using (var stream = new FileStream (filename' FileMode.Open' FileAccess.ReadWrite' FileShare.ReadWrite)) {  	if (stream.Length % 4096 == 0)  		return;  	var footerStart = stream.Length - ChunkFooter.Size;  	var alignedSize = (stream.Length / 4096 + 1) * 4096;  	var footer = new byte[ChunkFooter.Size];  	stream.SetLength (alignedSize);  	stream.Seek (footerStart' SeekOrigin.Begin);  	stream.Read (footer' 0' ChunkFooter.Size);  	stream.Seek (footerStart' SeekOrigin.Begin);  	var bytes = new byte[alignedSize - footerStart - ChunkFooter.Size];  	stream.Write (bytes' 0' bytes.Length);  	stream.Write (footer' 0' footer.Length);  }  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,Alignv2File,The following statement contains a magic number: using (var stream = new FileStream (filename' FileMode.Open' FileAccess.ReadWrite' FileShare.ReadWrite)) {  	if (stream.Length % 4096 == 0)  		return;  	var footerStart = stream.Length - ChunkFooter.Size;  	var alignedSize = (stream.Length / 4096 + 1) * 4096;  	var footer = new byte[ChunkFooter.Size];  	stream.SetLength (alignedSize);  	stream.Seek (footerStart' SeekOrigin.Begin);  	stream.Read (footer' 0' ChunkFooter.Size);  	stream.Seek (footerStart' SeekOrigin.Begin);  	var bytes = new byte[alignedSize - footerStart - ChunkFooter.Size];  	stream.Write (bytes' 0' bytes.Length);  	stream.Write (footer' 0' footer.Length);  }  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,Alignv2File,The following statement contains a magic number: using (var stream = new FileStream (filename' FileMode.Open' FileAccess.ReadWrite' FileShare.ReadWrite)) {  	if (stream.Length % 4096 == 0)  		return;  	var footerStart = stream.Length - ChunkFooter.Size;  	var alignedSize = (stream.Length / 4096 + 1) * 4096;  	var footer = new byte[ChunkFooter.Size];  	stream.SetLength (alignedSize);  	stream.Seek (footerStart' SeekOrigin.Begin);  	stream.Read (footer' 0' ChunkFooter.Size);  	stream.Seek (footerStart' SeekOrigin.Begin);  	var bytes = new byte[alignedSize - footerStart - ChunkFooter.Size];  	stream.Write (bytes' 0' bytes.Length);  	stream.Write (footer' 0' footer.Length);  }  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,Alignv2File,The following statement contains a magic number: if (stream.Length % 4096 == 0)  	return;  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateInternalReaderWorkItem,The following statement contains a magic number: if (_unbuffered) {  	stream = UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' false' 1024 * 1024' 4096' false' 4096);  } else {  	stream = new FileStream (_filename' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' ReadBufferSize' FileOptions.RandomAccess);  }  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateInternalReaderWorkItem,The following statement contains a magic number: if (_unbuffered) {  	stream = UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' false' 1024 * 1024' 4096' false' 4096);  } else {  	stream = new FileStream (_filename' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' ReadBufferSize' FileOptions.RandomAccess);  }  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateInternalReaderWorkItem,The following statement contains a magic number: if (_unbuffered) {  	stream = UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' false' 1024 * 1024' 4096' false' 4096);  } else {  	stream = new FileStream (_filename' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' ReadBufferSize' FileOptions.RandomAccess);  }  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateInternalReaderWorkItem,The following statement contains a magic number: if (_unbuffered) {  	stream = UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' false' 1024 * 1024' 4096' false' 4096);  } else {  	stream = new FileStream (_filename' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' ReadBufferSize' FileOptions.RandomAccess);  }  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateInternalReaderWorkItem,The following statement contains a magic number: stream = UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' false' 1024 * 1024' 4096' false' 4096);  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateInternalReaderWorkItem,The following statement contains a magic number: stream = UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' false' 1024 * 1024' 4096' false' 4096);  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateInternalReaderWorkItem,The following statement contains a magic number: stream = UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' false' 1024 * 1024' 4096' false' 4096);  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateInternalReaderWorkItem,The following statement contains a magic number: stream = UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' false' 1024 * 1024' 4096' false' 4096);  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetWriteStream,The following statement contains a magic number: if (!_unbuffered) {  	return new FileStream (_filename' FileMode.Open' FileAccess.ReadWrite' FileShare.Read' WriteBufferSize' FileOptions.SequentialScan);  } else {  	Log.Trace ("Using unbuffered access for TFChunk '{0}'..."' _filename);  	return UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.ReadWrite' FileShare.Read' false' 4096 * 1024' 4096' _writeThrough' 4096);  }  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetWriteStream,The following statement contains a magic number: if (!_unbuffered) {  	return new FileStream (_filename' FileMode.Open' FileAccess.ReadWrite' FileShare.Read' WriteBufferSize' FileOptions.SequentialScan);  } else {  	Log.Trace ("Using unbuffered access for TFChunk '{0}'..."' _filename);  	return UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.ReadWrite' FileShare.Read' false' 4096 * 1024' 4096' _writeThrough' 4096);  }  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetWriteStream,The following statement contains a magic number: if (!_unbuffered) {  	return new FileStream (_filename' FileMode.Open' FileAccess.ReadWrite' FileShare.Read' WriteBufferSize' FileOptions.SequentialScan);  } else {  	Log.Trace ("Using unbuffered access for TFChunk '{0}'..."' _filename);  	return UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.ReadWrite' FileShare.Read' false' 4096 * 1024' 4096' _writeThrough' 4096);  }  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetWriteStream,The following statement contains a magic number: if (!_unbuffered) {  	return new FileStream (_filename' FileMode.Open' FileAccess.ReadWrite' FileShare.Read' WriteBufferSize' FileOptions.SequentialScan);  } else {  	Log.Trace ("Using unbuffered access for TFChunk '{0}'..."' _filename);  	return UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.ReadWrite' FileShare.Read' false' 4096 * 1024' 4096' _writeThrough' 4096);  }  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetWriteStream,The following statement contains a magic number: return UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.ReadWrite' FileShare.Read' false' 4096 * 1024' 4096' _writeThrough' 4096);  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetWriteStream,The following statement contains a magic number: return UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.ReadWrite' FileShare.Read' false' 4096 * 1024' 4096' _writeThrough' 4096);  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetWriteStream,The following statement contains a magic number: return UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.ReadWrite' FileShare.Read' false' 4096 * 1024' 4096' _writeThrough' 4096);  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetWriteStream,The following statement contains a magic number: return UnbufferedFileStream.Create (_filename' FileMode.Open' FileAccess.ReadWrite' FileShare.Read' false' 4096 * 1024' 4096' _writeThrough' 4096);  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,BuildCacheArray,The following statement contains a magic number: try {  	if (workItem.IsMemory)  		throw new InvalidOperationException ("When trying to build cache' reader worker is already in-memory reader.");  	var dataSize = _isReadOnly ? _physicalDataSize + ChunkFooter.MapSize : _chunkHeader.ChunkSize;  	_cachedLength = GetAlignedSize (ChunkHeader.Size + dataSize + ChunkFooter.Size);  	var cachedData = Marshal.AllocHGlobal (_cachedLength);  	try {  		using (var unmanagedStream = new UnmanagedMemoryStream ((byte*)cachedData' _cachedLength' _cachedLength' FileAccess.ReadWrite)) {  			workItem.Stream.Seek (0' SeekOrigin.Begin);  			var buffer = new byte[65536];  			// in ongoing chunk there is no need to read everything' it's enough to read just actual data written  			int toRead = _isReadOnly ? _cachedLength : ChunkHeader.Size + _physicalDataSize;  			while (toRead > 0) {  				int read = workItem.Stream.Read (buffer' 0' Math.Min (toRead' buffer.Length));  				if (read == 0)  					break;  				toRead -= read;  				unmanagedStream.Write (buffer' 0' read);  			}  		}  	} catch {  		Marshal.FreeHGlobal (cachedData);  		throw;  	}  	_cachedData = cachedData;  } finally {  	ReturnReaderWorkItem (workItem);  }  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,BuildCacheArray,The following statement contains a magic number: try {  	using (var unmanagedStream = new UnmanagedMemoryStream ((byte*)cachedData' _cachedLength' _cachedLength' FileAccess.ReadWrite)) {  		workItem.Stream.Seek (0' SeekOrigin.Begin);  		var buffer = new byte[65536];  		// in ongoing chunk there is no need to read everything' it's enough to read just actual data written  		int toRead = _isReadOnly ? _cachedLength : ChunkHeader.Size + _physicalDataSize;  		while (toRead > 0) {  			int read = workItem.Stream.Read (buffer' 0' Math.Min (toRead' buffer.Length));  			if (read == 0)  				break;  			toRead -= read;  			unmanagedStream.Write (buffer' 0' read);  		}  	}  } catch {  	Marshal.FreeHGlobal (cachedData);  	throw;  }  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,BuildCacheArray,The following statement contains a magic number: using (var unmanagedStream = new UnmanagedMemoryStream ((byte*)cachedData' _cachedLength' _cachedLength' FileAccess.ReadWrite)) {  	workItem.Stream.Seek (0' SeekOrigin.Begin);  	var buffer = new byte[65536];  	// in ongoing chunk there is no need to read everything' it's enough to read just actual data written  	int toRead = _isReadOnly ? _cachedLength : ChunkHeader.Size + _physicalDataSize;  	while (toRead > 0) {  		int read = workItem.Stream.Read (buffer' 0' Math.Min (toRead' buffer.Length));  		if (read == 0)  			break;  		toRead -= read;  		unmanagedStream.Write (buffer' 0' read);  	}  }  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TryAppend,The following statement contains a magic number: buffer.SetLength (4);  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TryAppend,The following statement contains a magic number: buffer.Position = 4;  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TryAppend,The following statement contains a magic number: if (workItem.StreamPosition + length + 2 * sizeof(int) > ChunkHeader.Size + _chunkHeader.ChunkSize)  	return RecordWriteResult.Failed (GetDataPosition (workItem));  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TryAppend,The following statement contains a magic number: _logicalDataSize = ChunkHeader.GetLocalLogPosition (record.LogPosition + length + 2 * sizeof(int));  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetAlignedSize,The following statement contains a magic number: if (size % 4096 == 0)  	return size;  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetAlignedSize,The following statement contains a magic number: return (size / 4096 + 1) * 4096;  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetAlignedSize,The following statement contains a magic number: return (size / 4096 + 1) * 4096;  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetSequentialReaderFileStream,The following statement contains a magic number: return _inMem ? (Stream)new UnmanagedMemoryStream ((byte*)_cachedData' _fileSize) : new FileStream (_filename' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' 65536' FileOptions.SequentialScan);  
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,WriterWorkItem,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\WriterWorkItem.cs,WriterWorkItem,The following statement contains a magic number: Buffer = new MemoryStream (8192);  
Magic Number,EventStore.Core.TransactionLog.LogRecords,SystemLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\SystemLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = LogPosition.GetHashCode ();  	result = (result * 397) ^ TimeStamp.GetHashCode ();  	result = (result * 397) ^ SystemRecordType.GetHashCode ();  	result = (result * 397) ^ SystemRecordSerialization.GetHashCode ();  	result = (result * 397) ^ Reserved.GetHashCode ();  	return result;  }  
Magic Number,EventStore.Core.TransactionLog.LogRecords,SystemLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\SystemLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = LogPosition.GetHashCode ();  	result = (result * 397) ^ TimeStamp.GetHashCode ();  	result = (result * 397) ^ SystemRecordType.GetHashCode ();  	result = (result * 397) ^ SystemRecordSerialization.GetHashCode ();  	result = (result * 397) ^ Reserved.GetHashCode ();  	return result;  }  
Magic Number,EventStore.Core.TransactionLog.LogRecords,SystemLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\SystemLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = LogPosition.GetHashCode ();  	result = (result * 397) ^ TimeStamp.GetHashCode ();  	result = (result * 397) ^ SystemRecordType.GetHashCode ();  	result = (result * 397) ^ SystemRecordSerialization.GetHashCode ();  	result = (result * 397) ^ Reserved.GetHashCode ();  	return result;  }  
Magic Number,EventStore.Core.TransactionLog.LogRecords,SystemLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\SystemLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = LogPosition.GetHashCode ();  	result = (result * 397) ^ TimeStamp.GetHashCode ();  	result = (result * 397) ^ SystemRecordType.GetHashCode ();  	result = (result * 397) ^ SystemRecordSerialization.GetHashCode ();  	result = (result * 397) ^ Reserved.GetHashCode ();  	return result;  }  
Magic Number,EventStore.Core.TransactionLog.LogRecords,SystemLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\SystemLogRecord.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ TimeStamp.GetHashCode ();  
Magic Number,EventStore.Core.TransactionLog.LogRecords,SystemLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\SystemLogRecord.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ SystemRecordType.GetHashCode ();  
Magic Number,EventStore.Core.TransactionLog.LogRecords,SystemLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\SystemLogRecord.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ SystemRecordSerialization.GetHashCode ();  
Magic Number,EventStore.Core.TransactionLog.LogRecords,SystemLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\SystemLogRecord.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Reserved.GetHashCode ();  
Magic Number,EventStore.Core.TransactionLog.LogRecords,CommitLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\CommitLogRecord.cs,CommitLogRecord,The following statement contains a magic number: CorrelationId = new Guid (reader.ReadBytes (16));  
Magic Number,EventStore.Core.TransactionLog.LogRecords,CommitLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\CommitLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = LogPosition.GetHashCode ();  	result = (result * 397) ^ TransactionPosition.GetHashCode ();  	result = (result * 397) ^ FirstEventNumber.GetHashCode ();  	result = (result * 397) ^ SortKey.GetHashCode ();  	result = (result * 397) ^ CorrelationId.GetHashCode ();  	result = (result * 397) ^ TimeStamp.GetHashCode ();  	return result;  }  
Magic Number,EventStore.Core.TransactionLog.LogRecords,CommitLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\CommitLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = LogPosition.GetHashCode ();  	result = (result * 397) ^ TransactionPosition.GetHashCode ();  	result = (result * 397) ^ FirstEventNumber.GetHashCode ();  	result = (result * 397) ^ SortKey.GetHashCode ();  	result = (result * 397) ^ CorrelationId.GetHashCode ();  	result = (result * 397) ^ TimeStamp.GetHashCode ();  	return result;  }  
Magic Number,EventStore.Core.TransactionLog.LogRecords,CommitLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\CommitLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = LogPosition.GetHashCode ();  	result = (result * 397) ^ TransactionPosition.GetHashCode ();  	result = (result * 397) ^ FirstEventNumber.GetHashCode ();  	result = (result * 397) ^ SortKey.GetHashCode ();  	result = (result * 397) ^ CorrelationId.GetHashCode ();  	result = (result * 397) ^ TimeStamp.GetHashCode ();  	return result;  }  
Magic Number,EventStore.Core.TransactionLog.LogRecords,CommitLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\CommitLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = LogPosition.GetHashCode ();  	result = (result * 397) ^ TransactionPosition.GetHashCode ();  	result = (result * 397) ^ FirstEventNumber.GetHashCode ();  	result = (result * 397) ^ SortKey.GetHashCode ();  	result = (result * 397) ^ CorrelationId.GetHashCode ();  	result = (result * 397) ^ TimeStamp.GetHashCode ();  	return result;  }  
Magic Number,EventStore.Core.TransactionLog.LogRecords,CommitLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\CommitLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = LogPosition.GetHashCode ();  	result = (result * 397) ^ TransactionPosition.GetHashCode ();  	result = (result * 397) ^ FirstEventNumber.GetHashCode ();  	result = (result * 397) ^ SortKey.GetHashCode ();  	result = (result * 397) ^ CorrelationId.GetHashCode ();  	result = (result * 397) ^ TimeStamp.GetHashCode ();  	return result;  }  
Magic Number,EventStore.Core.TransactionLog.LogRecords,CommitLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\CommitLogRecord.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ TransactionPosition.GetHashCode ();  
Magic Number,EventStore.Core.TransactionLog.LogRecords,CommitLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\CommitLogRecord.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ FirstEventNumber.GetHashCode ();  
Magic Number,EventStore.Core.TransactionLog.LogRecords,CommitLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\CommitLogRecord.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ SortKey.GetHashCode ();  
Magic Number,EventStore.Core.TransactionLog.LogRecords,CommitLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\CommitLogRecord.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ CorrelationId.GetHashCode ();  
Magic Number,EventStore.Core.TransactionLog.LogRecords,CommitLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\CommitLogRecord.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ TimeStamp.GetHashCode ();  
Magic Number,EventStore.Core.TransactionLog.LogRecords,LogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,GetNextLogPosition,The following statement contains a magic number: return logicalPosition + length + 2 * sizeof(int);  
Magic Number,EventStore.Core.TransactionLog.LogRecords,LogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,GetPrevLogPosition,The following statement contains a magic number: return logicalPosition - length - 2 * sizeof(int);  
Magic Number,EventStore.Core.TransactionLog.LogRecords,LogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,GetSizeWithLengthPrefixAndSuffix,The following statement contains a magic number: using (var memoryStream = new MemoryStream ()) {  	WriteTo (new BinaryWriter (memoryStream));  	return 8 + (int)memoryStream.Length;  }  
Magic Number,EventStore.Core.TransactionLog.LogRecords,LogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,GetSizeWithLengthPrefixAndSuffix,The following statement contains a magic number: return 8 + (int)memoryStream.Length;  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,PrepareLogRecord,The following statement contains a magic number: EventId = new Guid (reader.ReadBytes (16));  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,PrepareLogRecord,The following statement contains a magic number: CorrelationId = new Guid (reader.ReadBytes (16));  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = LogPosition.GetHashCode ();  	result = (result * 397) ^ Flags.GetHashCode ();  	result = (result * 397) ^ TransactionPosition.GetHashCode ();  	result = (result * 397) ^ TransactionOffset;  	result = (result * 397) ^ ExpectedVersion.GetHashCode ();  	result = (result * 397) ^ EventStreamId.GetHashCode ();  	result = (result * 397) ^ EventId.GetHashCode ();  	result = (result * 397) ^ CorrelationId.GetHashCode ();  	result = (result * 397) ^ TimeStamp.GetHashCode ();  	result = (result * 397) ^ EventType.GetHashCode ();  	result = (result * 397) ^ Data.GetHashCode ();  	result = (result * 397) ^ Metadata.GetHashCode ();  	return result;  }  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = LogPosition.GetHashCode ();  	result = (result * 397) ^ Flags.GetHashCode ();  	result = (result * 397) ^ TransactionPosition.GetHashCode ();  	result = (result * 397) ^ TransactionOffset;  	result = (result * 397) ^ ExpectedVersion.GetHashCode ();  	result = (result * 397) ^ EventStreamId.GetHashCode ();  	result = (result * 397) ^ EventId.GetHashCode ();  	result = (result * 397) ^ CorrelationId.GetHashCode ();  	result = (result * 397) ^ TimeStamp.GetHashCode ();  	result = (result * 397) ^ EventType.GetHashCode ();  	result = (result * 397) ^ Data.GetHashCode ();  	result = (result * 397) ^ Metadata.GetHashCode ();  	return result;  }  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = LogPosition.GetHashCode ();  	result = (result * 397) ^ Flags.GetHashCode ();  	result = (result * 397) ^ TransactionPosition.GetHashCode ();  	result = (result * 397) ^ TransactionOffset;  	result = (result * 397) ^ ExpectedVersion.GetHashCode ();  	result = (result * 397) ^ EventStreamId.GetHashCode ();  	result = (result * 397) ^ EventId.GetHashCode ();  	result = (result * 397) ^ CorrelationId.GetHashCode ();  	result = (result * 397) ^ TimeStamp.GetHashCode ();  	result = (result * 397) ^ EventType.GetHashCode ();  	result = (result * 397) ^ Data.GetHashCode ();  	result = (result * 397) ^ Metadata.GetHashCode ();  	return result;  }  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = LogPosition.GetHashCode ();  	result = (result * 397) ^ Flags.GetHashCode ();  	result = (result * 397) ^ TransactionPosition.GetHashCode ();  	result = (result * 397) ^ TransactionOffset;  	result = (result * 397) ^ ExpectedVersion.GetHashCode ();  	result = (result * 397) ^ EventStreamId.GetHashCode ();  	result = (result * 397) ^ EventId.GetHashCode ();  	result = (result * 397) ^ CorrelationId.GetHashCode ();  	result = (result * 397) ^ TimeStamp.GetHashCode ();  	result = (result * 397) ^ EventType.GetHashCode ();  	result = (result * 397) ^ Data.GetHashCode ();  	result = (result * 397) ^ Metadata.GetHashCode ();  	return result;  }  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = LogPosition.GetHashCode ();  	result = (result * 397) ^ Flags.GetHashCode ();  	result = (result * 397) ^ TransactionPosition.GetHashCode ();  	result = (result * 397) ^ TransactionOffset;  	result = (result * 397) ^ ExpectedVersion.GetHashCode ();  	result = (result * 397) ^ EventStreamId.GetHashCode ();  	result = (result * 397) ^ EventId.GetHashCode ();  	result = (result * 397) ^ CorrelationId.GetHashCode ();  	result = (result * 397) ^ TimeStamp.GetHashCode ();  	result = (result * 397) ^ EventType.GetHashCode ();  	result = (result * 397) ^ Data.GetHashCode ();  	result = (result * 397) ^ Metadata.GetHashCode ();  	return result;  }  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = LogPosition.GetHashCode ();  	result = (result * 397) ^ Flags.GetHashCode ();  	result = (result * 397) ^ TransactionPosition.GetHashCode ();  	result = (result * 397) ^ TransactionOffset;  	result = (result * 397) ^ ExpectedVersion.GetHashCode ();  	result = (result * 397) ^ EventStreamId.GetHashCode ();  	result = (result * 397) ^ EventId.GetHashCode ();  	result = (result * 397) ^ CorrelationId.GetHashCode ();  	result = (result * 397) ^ TimeStamp.GetHashCode ();  	result = (result * 397) ^ EventType.GetHashCode ();  	result = (result * 397) ^ Data.GetHashCode ();  	result = (result * 397) ^ Metadata.GetHashCode ();  	return result;  }  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = LogPosition.GetHashCode ();  	result = (result * 397) ^ Flags.GetHashCode ();  	result = (result * 397) ^ TransactionPosition.GetHashCode ();  	result = (result * 397) ^ TransactionOffset;  	result = (result * 397) ^ ExpectedVersion.GetHashCode ();  	result = (result * 397) ^ EventStreamId.GetHashCode ();  	result = (result * 397) ^ EventId.GetHashCode ();  	result = (result * 397) ^ CorrelationId.GetHashCode ();  	result = (result * 397) ^ TimeStamp.GetHashCode ();  	result = (result * 397) ^ EventType.GetHashCode ();  	result = (result * 397) ^ Data.GetHashCode ();  	result = (result * 397) ^ Metadata.GetHashCode ();  	return result;  }  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = LogPosition.GetHashCode ();  	result = (result * 397) ^ Flags.GetHashCode ();  	result = (result * 397) ^ TransactionPosition.GetHashCode ();  	result = (result * 397) ^ TransactionOffset;  	result = (result * 397) ^ ExpectedVersion.GetHashCode ();  	result = (result * 397) ^ EventStreamId.GetHashCode ();  	result = (result * 397) ^ EventId.GetHashCode ();  	result = (result * 397) ^ CorrelationId.GetHashCode ();  	result = (result * 397) ^ TimeStamp.GetHashCode ();  	result = (result * 397) ^ EventType.GetHashCode ();  	result = (result * 397) ^ Data.GetHashCode ();  	result = (result * 397) ^ Metadata.GetHashCode ();  	return result;  }  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = LogPosition.GetHashCode ();  	result = (result * 397) ^ Flags.GetHashCode ();  	result = (result * 397) ^ TransactionPosition.GetHashCode ();  	result = (result * 397) ^ TransactionOffset;  	result = (result * 397) ^ ExpectedVersion.GetHashCode ();  	result = (result * 397) ^ EventStreamId.GetHashCode ();  	result = (result * 397) ^ EventId.GetHashCode ();  	result = (result * 397) ^ CorrelationId.GetHashCode ();  	result = (result * 397) ^ TimeStamp.GetHashCode ();  	result = (result * 397) ^ EventType.GetHashCode ();  	result = (result * 397) ^ Data.GetHashCode ();  	result = (result * 397) ^ Metadata.GetHashCode ();  	return result;  }  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = LogPosition.GetHashCode ();  	result = (result * 397) ^ Flags.GetHashCode ();  	result = (result * 397) ^ TransactionPosition.GetHashCode ();  	result = (result * 397) ^ TransactionOffset;  	result = (result * 397) ^ ExpectedVersion.GetHashCode ();  	result = (result * 397) ^ EventStreamId.GetHashCode ();  	result = (result * 397) ^ EventId.GetHashCode ();  	result = (result * 397) ^ CorrelationId.GetHashCode ();  	result = (result * 397) ^ TimeStamp.GetHashCode ();  	result = (result * 397) ^ EventType.GetHashCode ();  	result = (result * 397) ^ Data.GetHashCode ();  	result = (result * 397) ^ Metadata.GetHashCode ();  	return result;  }  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = LogPosition.GetHashCode ();  	result = (result * 397) ^ Flags.GetHashCode ();  	result = (result * 397) ^ TransactionPosition.GetHashCode ();  	result = (result * 397) ^ TransactionOffset;  	result = (result * 397) ^ ExpectedVersion.GetHashCode ();  	result = (result * 397) ^ EventStreamId.GetHashCode ();  	result = (result * 397) ^ EventId.GetHashCode ();  	result = (result * 397) ^ CorrelationId.GetHashCode ();  	result = (result * 397) ^ TimeStamp.GetHashCode ();  	result = (result * 397) ^ EventType.GetHashCode ();  	result = (result * 397) ^ Data.GetHashCode ();  	result = (result * 397) ^ Metadata.GetHashCode ();  	return result;  }  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Flags.GetHashCode ();  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ TransactionPosition.GetHashCode ();  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ TransactionOffset;  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ ExpectedVersion.GetHashCode ();  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ EventStreamId.GetHashCode ();  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ EventId.GetHashCode ();  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ CorrelationId.GetHashCode ();  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ TimeStamp.GetHashCode ();  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ EventType.GetHashCode ();  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Data.GetHashCode ();  
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Metadata.GetHashCode ();  
Magic Number,EventStore.Core.Util,MiniWeb,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Util\MiniWeb.cs,ReplyWithContent,The following statement contains a magic number: try {  	var extensionToContentType = new Dictionary<string' string> {  		{  			".png"'  			"image/png"  		}'  		{  			".svg"'  			"image/svg+xml"  		}'  		{  			".woff"'  			"application/x-font-woff"  		}'  		{  			".woff2"'  			"application/x-font-woff"  		}'  		{  			".ttf"'  			"application/font-sfnt"  		}'  		{  			".jpg"'  			"image/jpeg"  		}'  		{  			".jpeg"'  			"image/jpeg"  		}'  		{  			".css"'  			"text/css"  		}'  		{  			".htm"'  			"text/html"  		}'  		{  			".html"'  			"text/html"  		}'  		{  			".js"'  			"application/javascript"  		}'  		{  			".json"'  			"application/json"  		}'  		{  			".ico"'  			"image/vnd.microsoft.icon"  		}  	};  	var extension = Path.GetExtension (contentLocalPath);  	var fullPath = Path.Combine (_fileSystemRoot' contentLocalPath);  	string contentType;  	if (string.IsNullOrEmpty (extension) || !extensionToContentType.TryGetValue (extension.ToLower ()' out contentType) || !File.Exists (fullPath)) {  		Logger.Info ("Replying 404 for {0} ==> {1}"' contentLocalPath' fullPath);  		http.ReplyTextContent ("Not Found"' 404' "Not Found"' "text/plain"' null' ex => Logger.InfoException (ex' "Error while replying from MiniWeb"));  	} else {  		var config = GetWebPageConfig (contentType);  		var content = File.ReadAllBytes (fullPath);  		http.Reply (content' config.Code' config.Description' config.ContentType' config.Encoding' config.Headers' ex => Logger.InfoException (ex' "Error while replying from MiniWeb"));  	}  } catch (Exception ex) {  	http.ReplyTextContent (ex.ToString ()' 500' "Internal Server Error"' "text/plain"' null' Console.WriteLine);  }  
Magic Number,EventStore.Core.Util,MiniWeb,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Util\MiniWeb.cs,ReplyWithContent,The following statement contains a magic number: try {  	var extensionToContentType = new Dictionary<string' string> {  		{  			".png"'  			"image/png"  		}'  		{  			".svg"'  			"image/svg+xml"  		}'  		{  			".woff"'  			"application/x-font-woff"  		}'  		{  			".woff2"'  			"application/x-font-woff"  		}'  		{  			".ttf"'  			"application/font-sfnt"  		}'  		{  			".jpg"'  			"image/jpeg"  		}'  		{  			".jpeg"'  			"image/jpeg"  		}'  		{  			".css"'  			"text/css"  		}'  		{  			".htm"'  			"text/html"  		}'  		{  			".html"'  			"text/html"  		}'  		{  			".js"'  			"application/javascript"  		}'  		{  			".json"'  			"application/json"  		}'  		{  			".ico"'  			"image/vnd.microsoft.icon"  		}  	};  	var extension = Path.GetExtension (contentLocalPath);  	var fullPath = Path.Combine (_fileSystemRoot' contentLocalPath);  	string contentType;  	if (string.IsNullOrEmpty (extension) || !extensionToContentType.TryGetValue (extension.ToLower ()' out contentType) || !File.Exists (fullPath)) {  		Logger.Info ("Replying 404 for {0} ==> {1}"' contentLocalPath' fullPath);  		http.ReplyTextContent ("Not Found"' 404' "Not Found"' "text/plain"' null' ex => Logger.InfoException (ex' "Error while replying from MiniWeb"));  	} else {  		var config = GetWebPageConfig (contentType);  		var content = File.ReadAllBytes (fullPath);  		http.Reply (content' config.Code' config.Description' config.ContentType' config.Encoding' config.Headers' ex => Logger.InfoException (ex' "Error while replying from MiniWeb"));  	}  } catch (Exception ex) {  	http.ReplyTextContent (ex.ToString ()' 500' "Internal Server Error"' "text/plain"' null' Console.WriteLine);  }  
Magic Number,EventStore.Core.Util,MiniWeb,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Util\MiniWeb.cs,ReplyWithContent,The following statement contains a magic number: if (string.IsNullOrEmpty (extension) || !extensionToContentType.TryGetValue (extension.ToLower ()' out contentType) || !File.Exists (fullPath)) {  	Logger.Info ("Replying 404 for {0} ==> {1}"' contentLocalPath' fullPath);  	http.ReplyTextContent ("Not Found"' 404' "Not Found"' "text/plain"' null' ex => Logger.InfoException (ex' "Error while replying from MiniWeb"));  } else {  	var config = GetWebPageConfig (contentType);  	var content = File.ReadAllBytes (fullPath);  	http.Reply (content' config.Code' config.Description' config.ContentType' config.Encoding' config.Headers' ex => Logger.InfoException (ex' "Error while replying from MiniWeb"));  }  
Magic Number,EventStore.Core.Util,MiniWeb,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Util\MiniWeb.cs,ReplyWithContent,The following statement contains a magic number: http.ReplyTextContent ("Not Found"' 404' "Not Found"' "text/plain"' null' ex => Logger.InfoException (ex' "Error while replying from MiniWeb"));  
Magic Number,EventStore.Core.Util,MiniWeb,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Util\MiniWeb.cs,ReplyWithContent,The following statement contains a magic number: http.ReplyTextContent (ex.ToString ()' 500' "Internal Server Error"' "text/plain"' null' Console.WriteLine);  
Magic Number,EventStore.Core.Services.TimerService,ThreadBasedScheduler,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\TimerService\ThreadBasedScheduler.cs,DoTiming,The following statement contains a magic number: while (!_stop) {  	_queueStats.EnterBusy ();  	_queueStats.ProcessingStarted<SchedulePendingTasks> (_pending.Count);  	int pending = 0;  	ScheduledTask task;  	while (_pending.TryDequeue (out task)) {  		_tasks.Add (task);  		pending += 1;  	}  	_queueStats.ProcessingEnded (pending);  	_queueStats.ProcessingStarted<ExecuteScheduledTasks> (_tasks.Count);  	int processed = 0;  	while (_tasks.Count > 0 && _tasks.FindMin ().DueTime <= _timeProvider.Now) {  		processed += 1;  		var scheduledTask = _tasks.DeleteMin ();  		scheduledTask.Action (this' scheduledTask.State);  	}  	_queueStats.ProcessingEnded (processed);  	if (processed == 0) {  		_queueStats.EnterIdle ();  		Thread.Sleep (10);  	}  }  
Magic Number,EventStore.Core.Services.TimerService,ThreadBasedScheduler,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\TimerService\ThreadBasedScheduler.cs,DoTiming,The following statement contains a magic number: if (processed == 0) {  	_queueStats.EnterIdle ();  	Thread.Sleep (10);  }  
Magic Number,EventStore.Core.Services.TimerService,ThreadBasedScheduler,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\TimerService\ThreadBasedScheduler.cs,DoTiming,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,EventStore.Core.Services.RequestManager,RequestManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\RequestManagementService.cs,RequestManagementService,The following statement contains a magic number: _tickRequestMessage = TimerMessage.Schedule.Create (TimeSpan.FromMilliseconds (1000)' new PublishEnvelope (bus)' new StorageMessage.RequestManagerTimerTick ());  
Magic Number,EventStore.Core.Services.RequestManager,RequestManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\RequestManagementService.cs,Handle,The following statement contains a magic number: if (_currentTimedRequests.TryGetValue (message.CorrelationId' out watch)) {  	HistogramService.SetValue (_requestManagerHistogram' (long)((((double)watch.ElapsedTicks) / Stopwatch.Frequency) * 1000000000));  	_currentTimedRequests.Remove (message.CorrelationId);  }  
Magic Number,EventStore.Core.Services.RequestManager,RequestManagementService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\RequestManagementService.cs,Handle,The following statement contains a magic number: HistogramService.SetValue (_requestManagerHistogram' (long)((((double)watch.ElapsedTicks) / Stopwatch.Frequency) * 1000000000));  
Missing Default,EventStore.Core.Data,StreamMetadata,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Data\StreamMetadata.cs,ReadAcl,The following switch statement is missing a default case: switch (name) {  case SystemMetadata.AclRead:  	read = ReadRoles (reader);  	break;  case SystemMetadata.AclWrite:  	write = ReadRoles (reader);  	break;  case SystemMetadata.AclDelete:  	delete = ReadRoles (reader);  	break;  case SystemMetadata.AclMetaRead:  	metaRead = ReadRoles (reader);  	break;  case SystemMetadata.AclMetaWrite:  	metaWrite = ReadRoles (reader);  	break;  }  
Missing Default,EventStore.Core.Index.Hashes,Murmur2Unsafe,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following switch statement is missing a default case: switch (len & 3) // mod 4  {  case 3:  	h ^= (uint)(tail [2] << 16);  	h ^= (uint)(tail [1] << 8);  	h ^= tail [0];  	h *= m;  	break;  case 2:  	h ^= (uint)(tail [1] << 8);  	h ^= tail [0];  	h *= m;  	break;  case 1:  	h ^= tail [0];  	h *= m;  	break;  }  
Missing Default,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionCheckpointWriter,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionCheckpointWriter.cs,PublishMetadata,The following switch statement is missing a default case: switch (msg.Result) {  case OperationResult.Success:  	PublishCheckpoint (state);  	break;  }  
Missing Default,EventStore.Core.Services.Monitoring,MonitoringService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\MonitoringService.cs,Handle,The following switch statement is missing a default case: switch (message.State) {  case VNodeState.CatchingUp:  case VNodeState.Clone:  case VNodeState.Slave:  case VNodeState.Master: {  	SetStatsStreamMetadata ();  	break;  }  }  
Missing Default,EventStore.Core.Services.Storage,StorageWriterService,F:\newReposMay17\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Handle,The following switch statement is missing a default case: switch (message.State) {  case VNodeState.Master: {  	_indexWriter.Reset ();  	EpochManager.WriteNewEpoch ();  	// forces flush  	break;  }  case VNodeState.ShuttingDown: {  	Writer.Close ();  	break;  }  }  
