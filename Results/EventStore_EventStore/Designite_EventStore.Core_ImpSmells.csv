Implementation smell,Namespace,Class,File,Method,Description
Long Method,EventStore.Core,ClusterVNode,C:\repos\EventStore_EventStore\src\EventStore.Core\ClusterVNode.cs,ClusterVNode,The method has 434 lines of code.
Long Method,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,PTable,The method has 115 lines of code.
Long Method,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The method has 136 lines of code.
Long Method,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToEntry,The method has 113 lines of code.
Long Method,EventStore.Core.Services.VNode,ClusterVNodeController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,CreateFSM,The method has 159 lines of code.
Long Method,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ScavengeChunks,The method has 153 lines of code.
Long Method,EventStore.Core.TransactionLog.Chunks,TFChunkDb,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDb.cs,Open,The method has 119 lines of code.
Complex Method,EventStore.Core,ClusterVNode,C:\repos\EventStore_EventStore\src\EventStore.Core\ClusterVNode.cs,ClusterVNode,Cyclomatic complexity of the method is 18
Complex Method,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,PTable,Cyclomatic complexity of the method is 12
Complex Method,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,GetRange,Cyclomatic complexity of the method is 9
Complex Method,EventStore.Core.Index,TableIndex,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,GetRangeInternal,Cyclomatic complexity of the method is 10
Complex Method,EventStore.Core.Messaging,MessageHierarchy,C:\repos\EventStore_EventStore\src\EventStore.Core\Messaging\Message.cs,MessageHierarchy,Cyclomatic complexity of the method is 12
Complex Method,EventStore.Core.Services.AwakeReaderService,AwakeService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\AwakeReaderService\AwakeService.cs,NotifyEventInStream,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Core.Services,ClusterStorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Core.Services,ClusterStorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Core.Services,ElectionsService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,Cyclomatic complexity of the method is 10
Complex Method,EventStore.Core.Services,SubscriptionsService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,Handle,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Core.Services,SubscriptionsService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,Handle,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Core.Services.Replication,MasterReplicationService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,GetValidLogPosition,Cyclomatic complexity of the method is 9
Complex Method,EventStore.Core.Services.Replication,MasterReplicationService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,ManageSubscriptions,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Core.Services.Replication,MasterReplicationService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,ManageRoleAssignments,Cyclomatic complexity of the method is 11
Complex Method,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Commit,Cyclomatic complexity of the method is 15
Complex Method,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Commit,Cyclomatic complexity of the method is 17
Complex Method,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,ReadEventInternal,Cyclomatic complexity of the method is 10
Complex Method,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,CheckStreamAccessInternal,Cyclomatic complexity of the method is 11
Complex Method,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,GetStreamLastEventNumberUncached,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Core.Services.Storage.ReaderIndex,IndexWriter,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexWriter.cs,CheckCommit,Cyclomatic complexity of the method is 18
Complex Method,EventStore.Core.Services.Monitoring.Stats,StatsContainer,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\Stats\StatsContainer.cs,Group,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Core.Services.Storage,StorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Handle,Cyclomatic complexity of the method is 11
Complex Method,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,PostEvents,Cyclomatic complexity of the method is 9
Complex Method,EventStore.Core.Services.Transport.Http,AuthenticatedHttpRequestProcessor,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\AuthenticatedHttpRequestProcessor.cs,ProcessRequest,Cyclomatic complexity of the method is 8
Complex Method,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToEntry,Cyclomatic complexity of the method is 13
Complex Method,EventStore.Core.TransactionLog.Chunks,TFChunkDbTruncator,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDbTruncator.cs,TruncateDb,Cyclomatic complexity of the method is 14
Complex Method,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ScavengeChunks,Cyclomatic complexity of the method is 9
Complex Method,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ShouldKeepPrepare,Cyclomatic complexity of the method is 11
Complex Method,EventStore.Core.TransactionLog.Chunks,TFChunkDb,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDb.cs,Open,Cyclomatic complexity of the method is 11
Complex Method,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetReaderWorkItem,Cyclomatic complexity of the method is 9
Complex Method,EventStore.Core.Services.Monitoring.Utils,PerfCounterHelper,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\Utils\PerfCounterHelper.cs,RefreshInstanceName,Cyclomatic complexity of the method is 19
Long Parameter List,EventStore.Core.Authentication,IAuthenticationProviderFactory,C:\repos\EventStore_EventStore\src\EventStore.Core\Authentication\IAuthenticationProviderFactory.cs,RegisterHttpControllers,The method has 5 parameters. Parameters: externalHttpService' internalHttpService' httpSendService' mainQueue' networkSendQueue
Long Parameter List,EventStore.Core.Authentication,InternalAuthenticationProviderFactory,C:\repos\EventStore_EventStore\src\EventStore.Core\Authentication\InternalAuthenticationProviderFactory.cs,RegisterHttpControllers,The method has 5 parameters. Parameters: externalHttpService' internalHttpService' httpSendService' mainQueue' networkSendQueue
Long Parameter List,EventStore.Core.Bus,QueuedHandlerAutoReset,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerAutoReset.cs,QueuedHandlerAutoReset,The method has 6 parameters. Parameters: consumer' name' watchSlowMsg' slowMsgThreshold' threadStopWaitTimeout' groupName
Long Parameter List,EventStore.Core.Bus,QueuedHandlerMRES,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerMRES.cs,QueuedHandlerMRES,The method has 6 parameters. Parameters: consumer' name' watchSlowMsg' slowMsgThreshold' threadStopWaitTimeout' groupName
Long Parameter List,EventStore.Core.Bus,QueuedHandlerThreadPool,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerThreadPool.cs,QueuedHandlerThreadPool,The method has 6 parameters. Parameters: consumer' name' watchSlowMsg' slowMsgThreshold' threadStopWaitTimeout' groupName
Long Parameter List,EventStore.Core.Bus,QueuedHandlerSleep,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerSleep.cs,QueuedHandlerSleep,The method has 6 parameters. Parameters: consumer' name' watchSlowMsg' slowMsgThreshold' threadStopWaitTimeout' groupName
Long Parameter List,EventStore.Core.Bus,QueuedHandlerMresWithMpsc,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerMRESWithMPSC.cs,QueuedHandlerMresWithMpsc,The method has 6 parameters. Parameters: consumer' name' watchSlowMsg' slowMsgThreshold' threadStopWaitTimeout' groupName
Long Parameter List,EventStore.Core.Bus,QueuedHandler,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandler.cs,CreateQueuedHandler,The method has 6 parameters. Parameters: consumer' name' watchSlowMsg' slowMsgThreshold' threadStopWaitTimeout' groupName
Long Parameter List,EventStore.Core.Bus,QueuedHandler,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandler.cs,QueuedHandler,The method has 6 parameters. Parameters: consumer' name' watchSlowMsg' slowMsgThreshold' threadStopWaitTimeout' groupName
Long Parameter List,EventStore.Core.Bus,QueueHandlerUsingMpsc,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandler.cs,QueueHandlerUsingMpsc,The method has 6 parameters. Parameters: consumer' name' watchSlowMsg' slowMsgThreshold' threadStopWaitTimeout' groupName
Long Parameter List,EventStore.Core.Bus,QueuedHandlerPulse,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerPulse.cs,QueuedHandlerPulse,The method has 6 parameters. Parameters: consumer' name' watchSlowMsg' slowMsgThreshold' threadStopWaitTimeout' groupName
Long Parameter List,EventStore.Core.Bus,QueuedHandlerAutoResetWithMpsc,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerAutoResetWithMPSC.cs,QueuedHandlerAutoResetWithMpsc,The method has 6 parameters. Parameters: consumer' name' watchSlowMsg' slowMsgThreshold' threadStopWaitTimeout' groupName
Long Parameter List,EventStore.Core,ClusterVNode,C:\repos\EventStore_EventStore\src\EventStore.Core\ClusterVNode.cs,ClusterVNode,The method has 5 parameters. Parameters: db' vNodeSettings' gossipSeedSource' infoController' subsystems
Long Parameter List,EventStore.Core,StandardComponents,C:\repos\EventStore_EventStore\src\EventStore.Core\StandardComponents.cs,StandardComponents,The method has 8 parameters. Parameters: db' mainQueue' mainBus' timerService' timeProvider' httpForwarder' httpServices' networkSendService
Long Parameter List,EventStore.Core,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,CreateDbConfig,The method has 8 parameters. Parameters: chunkSize' cachedChunks' dbPath' chunksCacheSize' inMemDb' unbuffered' writethrough' log
Long Parameter List,EventStore.Core.Cluster,MemberInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,ForManager,The method has 5 parameters. Parameters: instanceId' timeStamp' isAlive' internalHttpEndPoint' externalHttpEndPoint
Long Parameter List,EventStore.Core.Cluster,MemberInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,ForVNode,The method has 17 parameters. Parameters: instanceId' timeStamp' state' isAlive' internalTcpEndPoint' internalSecureTcpEndPoint' externalTcpEndPoint' externalSecureTcpEndPoint' internalHttpEndPoint' externalHttpEndPoint' lastCommitPosition' writerCheckpoint' chaserCheckpoint' epochPosition' epochNumber' epochId' nodePriority
Long Parameter List,EventStore.Core.Cluster,MemberInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,MemberInfo,The method has 17 parameters. Parameters: instanceId' timeStamp' state' isAlive' internalTcpEndPoint' internalSecureTcpEndPoint' externalTcpEndPoint' externalSecureTcpEndPoint' internalHttpEndPoint' externalHttpEndPoint' lastCommitPosition' writerCheckpoint' chaserCheckpoint' epochPosition' epochNumber' epochId' nodePriority
Long Parameter List,EventStore.Core.Cluster,MemberInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,Updated,The method has 6 parameters. Parameters: state' isAlive' lastCommitPosition' writerCheckpoint' chaserCheckpoint' epoch
Long Parameter List,EventStore.Core.Cluster.Settings,ClusterVNodeSettings,C:\repos\EventStore_EventStore\src\EventStore.Core\Cluster\Settings\ClusterVNodeSettings.cs,ClusterVNodeSettings,The method has 62 parameters. Parameters: instanceId' debugIndex' internalTcpEndPoint' internalSecureTcpEndPoint' externalTcpEndPoint' externalSecureTcpEndPoint' internalHttpEndPoint' externalHttpEndPoint' gossipAdvertiseInfo' intHttpPrefixes' extHttpPrefixes' enableTrustedAuth' certificate' workerThreads' discoverViaDns' clusterDns' gossipSeeds' minFlushDelay' clusterNodeCount' prepareAckCount' commitAckCount' prepareTimeout' commitTimeout' useSsl' disableInsecureTCP' sslTargetHost' sslValidateServer' statsPeriod' statsStorage' nodePriority' authenticationProviderFactory' disableScavengeMerging' scavengeHistoryMaxAge' adminOnPublic' statsOnPublic' gossipOnPublic' gossipInterval' gossipAllowedTimeDifference' gossipTimeout' intTcpHeartbeatTimeout' intTcpHeartbeatInterval' extTcpHeartbeatTimeout' extTcpHeartbeatInterval' verifyDbHash' maxMemtableEntryCount' hashCollisionReadLimit' startStandardProjections' disableHTTPCaching' logHttpRequests' connectionPendingSendBytesThreshold' index' enableHistograms' skipIndexVerify' indexCacheDepth' indexBitnessVersion' additionalConsumerStrategies' unsafeIgnoreHardDeletes' betterOrdering' readerThreadsCount' alwaysKeepScavenged' gossipOnSingleNode' skipIndexScanOnReads
Long Parameter List,EventStore.Core.DataStructures,ObjectPool<T>,C:\repos\EventStore_EventStore\src\EventStore.Core\DataStructures\ObjectPool.cs,ObjectPool,The method has 6 parameters. Parameters: objectPoolName' initialCount' maxCount' factory' dispose' onPoolDisposed
Long Parameter List,EventStore.Core.Data,GossipAdvertiseInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\GossipAdvertiseInfo.cs,GossipAdvertiseInfo,The method has 10 parameters. Parameters: internalTcp' internalSecureTcp' externalTcp' externalSecureTcp' internalHttp' externalHttp' advertiseInternalIPAs' advertiseExternalIPAs' advertiseInternalHttpPortAs' advertiseExternalHttpPortAs
Long Parameter List,EventStore.Core.Data,StreamAcl,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\StreamAcl.cs,StreamAcl,The method has 5 parameters. Parameters: readRole' writeRole' deleteRole' metaReadRole' metaWriteRole
Long Parameter List,EventStore.Core.Data,StreamAcl,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\StreamAcl.cs,StreamAcl,The method has 5 parameters. Parameters: readRoles' writeRoles' deleteRoles' metaReadRoles' metaWriteRoles
Long Parameter List,EventStore.Core.Data,VNodeInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\VNodeInfo.cs,VNodeInfo,The method has 8 parameters. Parameters: instanceId' debugIndex' internalTcp' internalSecureTcp' externalTcp' externalSecureTcp' internalHttp' externalHttp
Long Parameter List,EventStore.Core.Data,EventRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,EventRecord,The method has 13 parameters. Parameters: eventNumber' logPosition' correlationId' eventId' transactionPosition' transactionOffset' eventStreamId' expectedVersion' timeStamp' flags' eventType' data' metadata
Long Parameter List,EventStore.Core.Data,StreamMetadata,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\StreamMetadata.cs,StreamMetadata,The method has 6 parameters. Parameters: maxCount' maxAge' truncateBefore' tempStream' cacheControl' acl
Long Parameter List,EventStore.Core.Data,UserData,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\UserData.cs,UserData,The method has 6 parameters. Parameters: loginName' fullName' groups' hash' salt' disabled
Long Parameter List,EventStore.Core.Data,Event,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\Event.cs,Event,The method has 5 parameters. Parameters: eventId' eventType' isJson' data' metadata
Long Parameter List,EventStore.Core.Data,Event,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\Event.cs,Event,The method has 5 parameters. Parameters: eventId' eventType' isJson' data' metadata
Long Parameter List,EventStore.Core.Helpers,IODispatcherAsync,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,BeginReadForward,The method has 8 parameters. Parameters: ioDispatcher' cancellationScope' streamId' fromEventNumber' maxCount' resolveLinks' principal' handler
Long Parameter List,EventStore.Core.Helpers,IODispatcherAsync,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,BeginReadBackward,The method has 8 parameters. Parameters: ioDispatcher' cancellationScope' streamId' fromEventNumber' maxCount' resolveLinks' principal' handler
Long Parameter List,EventStore.Core.Helpers,IODispatcherAsync,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,BeginWriteEvents,The method has 7 parameters. Parameters: ioDispatcher' cancellationScope' streamId' expectedVersion' principal' events' handler
Long Parameter List,EventStore.Core.Helpers,IODispatcherAsync,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,BeginDeleteStream,The method has 7 parameters. Parameters: ioDispatcher' cancellationScope' streamId' expectedVersion' hardDelete' principal' handler
Long Parameter List,EventStore.Core.Helpers,IODispatcherAsync,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,BeginSubscribeAwake,The method has 6 parameters. Parameters: ioDispatcher' cancellationScope' streamId' from' handler' correlationId
Long Parameter List,EventStore.Core.Helpers,IODispatcherAsync,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,BeginUpdateStreamAcl,The method has 7 parameters. Parameters: ioDispatcher' cancellationScope' streamId' expectedVersion' principal' metadata' handler
Long Parameter List,EventStore.Core.Helpers,IODispatcherAsync,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,WriteEventsWithRetry,The method has 8 parameters. Parameters: ioDispatcher' cancellationScope' streamId' expectedVersion' principal' events' handler' steps
Long Parameter List,EventStore.Core.Helpers,IODispatcherAsync,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,DeleteStreamWithRetry,The method has 8 parameters. Parameters: ioDispatcher' cancellationScope' streamId' expectedVersion' hardDelete' principal' handler' steps
Long Parameter List,EventStore.Core.Helpers,IODispatcherAsync,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,UpdateStreamAclWithRetry,The method has 8 parameters. Parameters: ioDispatcher' cancellationScope' streamId' expectedVersion' principal' metadata' handler' steps
Long Parameter List,EventStore.Core.Helpers,IODispatcherAsync,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,PerformWithRetry,The method has 6 parameters. Parameters: ioDispatcher' handler' steps' retryExpectedVersion' timeout' action
Long Parameter List,EventStore.Core.Helpers,IODispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,ReadBackward,The method has 7 parameters. Parameters: streamId' fromEventNumber' maxCount' resolveLinks' principal' action' corrId
Long Parameter List,EventStore.Core.Helpers,IODispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,ReadForward,The method has 7 parameters. Parameters: streamId' fromEventNumber' maxCount' resolveLinks' principal' action' corrId
Long Parameter List,EventStore.Core.Helpers,IODispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,ConfigureStreamAndWriteEvents,The method has 6 parameters. Parameters: streamId' expectedVersion' streamMetadata' events' principal' action
Long Parameter List,EventStore.Core.Helpers,IODispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,WriteEvents,The method has 5 parameters. Parameters: streamId' expectedVersion' events' principal' action
Long Parameter List,EventStore.Core.Helpers,IODispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,QueueWriteEvents,The method has 6 parameters. Parameters: key' streamId' expectedVersion' events' principal' action
Long Parameter List,EventStore.Core.Helpers,IODispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,WriteEvent,The method has 5 parameters. Parameters: streamId' expectedVersion' event' principal' action
Long Parameter List,EventStore.Core.Helpers,IODispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,DeleteStream,The method has 5 parameters. Parameters: streamId' expectedVersion' hardDelete' principal' action
Long Parameter List,EventStore.Core.Helpers,IODispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcher.cs,UpdateStreamAcl,The method has 5 parameters. Parameters: streamId' expectedVersion' principal' metadata' completed
Long Parameter List,EventStore.Core.Index,IndexMap,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,IndexMap,The method has 5 parameters. Parameters: version' tables' prepareCheckpoint' commitCheckpoint' maxTablesPerLevel
Long Parameter List,EventStore.Core.Index,IndexMap,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,FromFile,The method has 5 parameters. Parameters: filename' maxTablesPerLevel' loadPTables' cacheDepth' skipIndexVerify
Long Parameter List,EventStore.Core.Index,IndexMap,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,LoadPTables,The method has 5 parameters. Parameters: reader' indexmapFilename' checkpoints' cacheDepth' skipIndexVerify
Long Parameter List,EventStore.Core.Index,IndexMap,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,AddPTable,The method has 10 parameters. Parameters: tableToAdd' prepareCheckpoint' commitCheckpoint' upgradeHash' existsAt' recordExistsAt' filenameProvider' version' indexCacheDepth' skipIndexVerify
Long Parameter List,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,PTable,The method has 6 parameters. Parameters: filename' id' initialReaders' maxReaders' depth' skipIndexVerify
Long Parameter List,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,MergeTo,The method has 8 parameters. Parameters: tables' outputFile' upgradeHash' existsAt' readRecord' version' cacheDepth' skipIndexVerify
Long Parameter List,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,MergeTo2,The method has 10 parameters. Parameters: tables' numIndexEntries' indexEntrySize' outputFile' upgradeHash' existsAt' readRecord' version' cacheDepth' skipIndexVerify
Long Parameter List,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,AppendRecordTo,The method has 5 parameters. Parameters: stream' buffer' version' entry' indexEntrySize
Long Parameter List,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,ComputeMidpoints,The method has 7 parameters. Parameters: bs' fs' version' indexEntrySize' numIndexEntries' requiredMidpointCount' midpoints
Long Parameter List,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,WriteMidpointsTo,The method has 9 parameters. Parameters: bs' fs' version' indexEntrySize' buffer' dumpedEntryCount' numIndexEntries' requiredMidpointCount' midpoints
Long Parameter List,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,AppendMidpointRecordTo,The method has 5 parameters. Parameters: stream' buffer' version' midpointEntry' midpointEntrySize
Long Parameter List,EventStore.Core.Index,EnumerableTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTableConstruction.cs,EnumerableTable,The method has 5 parameters. Parameters: mergedPTableVersion' table' upgradeHash' existsAt' readRecord
Long Parameter List,EventStore.Core.Index,EnumerableTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTableConstruction.cs,ReadUntilDifferentHash,The method has 5 parameters. Parameters: version' ptableEnumerator' upgradeHash' existsAt' readRecord
Long Parameter List,EventStore.Core.Index,TableIndex,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,TableIndex,The method has 12 parameters. Parameters: directory' lowHasher' highHasher' memTableFactory' tfReaderFactory' ptableVersion' maxSizeForMemory' maxTablesPerLevel' additionalReclaim' inMem' skipIndexVerify' indexCacheDepth
Long Parameter List,EventStore.Core.Messages,PrepareOk,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ElectionMessage.cs,PrepareOk,The method has 10 parameters. Parameters: view' serverId' serverInternalHttp' epochNumber' epochPosition' epochId' lastCommitPosition' writerCheckpoint' chaserCheckpoint' nodePriority
Long Parameter List,EventStore.Core.Messages,Proposal,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ElectionMessage.cs,Proposal,The method has 11 parameters. Parameters: serverId' serverInternalHttp' masterId' masterInternalHttp' view' epochNumber' epochPosition' epochId' lastCommitPosition' writerCheckpoint' chaserCheckpoint
Long Parameter List,EventStore.Core.Messages,Accept,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ElectionMessage.cs,Accept,The method has 5 parameters. Parameters: serverId' serverInternalHttp' masterId' masterInternalHttp' view
Long Parameter List,EventStore.Core.Messages,SubscribeReplica,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ReplicationMessage.cs,SubscribeReplica,The method has 7 parameters. Parameters: logPosition' chunkId' lastEpochs' replicaEndPoint' masterId' subscriptionId' isPromotable
Long Parameter List,EventStore.Core.Messages,SubscribeReplica,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ReplicationMessage.cs,SubscribeReplica,The method has 8 parameters. Parameters: logPosition' chunkId' lastEpochs' ip' port' masterId' subscriptionId' isPromotable
Long Parameter List,EventStore.Core.Messages,ReplicaSubscriptionRequest,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ReplicationMessage.cs,ReplicaSubscriptionRequest,The method has 10 parameters. Parameters: correlationId' envelope' connection' logPosition' chunkId' lastEpochs' replicaEndPoint' masterId' subscriptionId' isPromotable
Long Parameter List,EventStore.Core.Messages,CreateChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ReplicationMessage.cs,CreateChunk,The method has 5 parameters. Parameters: masterId' subscriptionId' chunkHeader' fileSize' isCompletedChunk
Long Parameter List,EventStore.Core.Messages,CreateChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ReplicationMessage.cs,CreateChunk,The method has 5 parameters. Parameters: masterId' subscriptionId' chunkHeaderBytes' fileSize' isCompletedChunk
Long Parameter List,EventStore.Core.Messages,RawChunkBulk,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ReplicationMessage.cs,RawChunkBulk,The method has 7 parameters. Parameters: masterId' subscriptionId' chunkStartNumber' chunkEndNumber' rawPosition' rawBytes' completeChunk
Long Parameter List,EventStore.Core.Messages,RawChunkBulk,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ReplicationMessage.cs,RawChunkBulk,The method has 7 parameters. Parameters: masterId' subscriptionId' chunkStartNumber' chunkEndNumber' rawPosition' rawBytes' completeChunk
Long Parameter List,EventStore.Core.Messages,DataChunkBulk,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ReplicationMessage.cs,DataChunkBulk,The method has 7 parameters. Parameters: masterId' subscriptionId' chunkStartNumber' chunkEndNumber' subscriptionPosition' dataBytes' completeChunk
Long Parameter List,EventStore.Core.Messages,DataChunkBulk,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ReplicationMessage.cs,DataChunkBulk,The method has 7 parameters. Parameters: masterId' subscriptionId' chunkStartNumber' chunkEndNumber' subscriptionPosition' dataBytes' completeChunk
Long Parameter List,EventStore.Core.Messages,ReplicationStats,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ReplicationMessage.cs,ReplicationStats,The method has 8 parameters. Parameters: subscriptionId' connectionId' subscriptionEndpoint' sendQueueSize' totalBytesSent' totalBytesReceived' pendingSendBytes' pendingReceivedBytes
Long Parameter List,EventStore.Core.Messages,CommitAck,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ReplicationMessageDto.cs,CommitAck,The method has 6 parameters. Parameters: correlationId' logPosition' transactionPosition' firstEventNumber' lastEventNumber' isSelf
Long Parameter List,EventStore.Core.Messages,PollStream,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\SubscriptionMessage.cs,PollStream,The method has 5 parameters. Parameters: streamId' lastCommitPosition' lastEventNumber' expireAt' originalRequest
Long Parameter List,EventStore.Core.Messages,EventRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDtoExtensions.cs,EventRecord,The method has 10 parameters. Parameters: eventStreamId' eventNumber' eventId' eventType' dataContentType' metadataContentType' data' metadata' created' createdEpoch
Long Parameter List,EventStore.Core.Messages,MasterInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDtoExtensions.cs,MasterInfo,The method has 6 parameters. Parameters: externalTcpAddress' externalTcpPort' externalHttpAddress' externalHttpPort' externalSecureTcpAddress' externalSecureTcpPort
Long Parameter List,EventStore.Core.Messages,Create,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\UserManagementMessage.cs,Create,The method has 6 parameters. Parameters: envelope' principal' loginName' fullName' groups' password
Long Parameter List,EventStore.Core.Messages,Update,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\UserManagementMessage.cs,Update,The method has 5 parameters. Parameters: envelope' principal' loginName' fullName' groups
Long Parameter List,EventStore.Core.Messages,ChangePassword,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\UserManagementMessage.cs,ChangePassword,The method has 5 parameters. Parameters: envelope' principal' loginName' currentPassword' newPassword
Long Parameter List,EventStore.Core.Messages,UserData,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\UserManagementMessage.cs,UserData,The method has 5 parameters. Parameters: loginName' fullName' groups' disabled' dateLastUpdated
Long Parameter List,EventStore.Core.Messages,NewEvent,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,NewEvent,The method has 6 parameters. Parameters: eventId' eventType' dataContentType' metadataContentType' data' metadata
Long Parameter List,EventStore.Core.Messages,WriteEvents,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,WriteEvents,The method has 10 parameters. Parameters: internalCorrId' correlationId' envelope' requireMaster' eventStreamId' expectedVersion' events' user' login' password
Long Parameter List,EventStore.Core.Messages,WriteEvents,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,WriteEvents,The method has 10 parameters. Parameters: internalCorrId' correlationId' envelope' requireMaster' eventStreamId' expectedVersion' event' user' login' password
Long Parameter List,EventStore.Core.Messages,WriteEventsCompleted,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,WriteEventsCompleted,The method has 7 parameters. Parameters: result' message' firstEventNumber' lastEventNumber' preparePosition' commitPosition' currentVersion
Long Parameter List,EventStore.Core.Messages,WriteEventsCompleted,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,WriteEventsCompleted,The method has 5 parameters. Parameters: correlationId' firstEventNumber' lastEventNumber' preparePosition' commitPosition
Long Parameter List,EventStore.Core.Messages,WriteEventsCompleted,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,WriteEventsCompleted,The method has 8 parameters. Parameters: correlationId' result' message' firstEventNumber' lastEventNumber' preparePosition' commitPosition' currentVersion
Long Parameter List,EventStore.Core.Messages,DeleteStream,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,DeleteStream,The method has 10 parameters. Parameters: internalCorrId' correlationId' envelope' requireMaster' eventStreamId' expectedVersion' hardDelete' user' login' password
Long Parameter List,EventStore.Core.Messages,DeleteStreamCompleted,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,DeleteStreamCompleted,The method has 5 parameters. Parameters: correlationId' result' message' preparePosition' commitPosition
Long Parameter List,EventStore.Core.Messages,TransactionStart,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,TransactionStart,The method has 9 parameters. Parameters: internalCorrId' correlationId' envelope' requireMaster' eventStreamId' expectedVersion' user' login' password
Long Parameter List,EventStore.Core.Messages,TransactionWrite,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,TransactionWrite,The method has 9 parameters. Parameters: internalCorrId' correlationId' envelope' requireMaster' transactionId' events' user' login' password
Long Parameter List,EventStore.Core.Messages,TransactionCommit,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,TransactionCommit,The method has 8 parameters. Parameters: internalCorrId' correlationId' envelope' requireMaster' transactionId' user' login' password
Long Parameter List,EventStore.Core.Messages,TransactionCommitCompleted,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,TransactionCommitCompleted,The method has 7 parameters. Parameters: transactionId' result' message' firstEventNumber' lastEventNumber' preparePosition' commitPosition
Long Parameter List,EventStore.Core.Messages,TransactionCommitCompleted,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,TransactionCommitCompleted,The method has 6 parameters. Parameters: correlationId' transactionId' firstEventNumber' lastEventNumber' preparePosition' commitPosition
Long Parameter List,EventStore.Core.Messages,TransactionCommitCompleted,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,TransactionCommitCompleted,The method has 6 parameters. Parameters: correlationId' transactionId' result' message' firstEventNumber' lastEventNumber
Long Parameter List,EventStore.Core.Messages,ReadEvent,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,ReadEvent,The method has 8 parameters. Parameters: internalCorrId' correlationId' envelope' eventStreamId' eventNumber' resolveLinkTos' requireMaster' user
Long Parameter List,EventStore.Core.Messages,ReadEventCompleted,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,ReadEventCompleted,The method has 7 parameters. Parameters: correlationId' eventStreamId' result' record' streamMetadata' isCachePublic' error
Long Parameter List,EventStore.Core.Messages,ReadStreamEvents,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,ReadStreamEvents,The method has 5 parameters. Parameters: eventStreamId' fromEventNumber' maxCount' resolveLinkTos' requireMaster
Long Parameter List,EventStore.Core.Messages,ReadStreamEventsCompleted,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,ReadStreamEventsCompleted,The method has 7 parameters. Parameters: events' result' nextEventNumber' lastEventNumber' isEndOfStream' lastCommitPosition' error
Long Parameter List,EventStore.Core.Messages,ReadAllEvents,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,ReadAllEvents,The method has 5 parameters. Parameters: commitPosition' preparePosition' maxCount' resolveLinkTos' requireMaster
Long Parameter List,EventStore.Core.Messages,ReadAllEventsCompleted,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,ReadAllEventsCompleted,The method has 7 parameters. Parameters: commitPosition' preparePosition' events' nextCommitPosition' nextPreparePosition' result' error
Long Parameter List,EventStore.Core.Messages,CreatePersistentSubscription,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,CreatePersistentSubscription,The method has 16 parameters. Parameters: subscriptionGroupName' eventStreamId' resolveLinkTos' startFrom' messageTimeoutMilliseconds' recordStatistics' liveBufferSize' readBatchSize' bufferSize' maxRetryCount' preferRoundRobin' checkpointAfterTime' checkpointMaxCount' checkpointMinCount' subscriberMaxCount' namedConsumerStrategy
Long Parameter List,EventStore.Core.Messages,CreatePersistentSubscription,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,CreatePersistentSubscription,The method has 21 parameters. Parameters: internalCorrId' correlationId' envelope' eventStreamId' groupName' resolveLinkTos' startFrom' messageTimeoutMilliseconds' recordStatistics' maxRetryCount' bufferSize' liveBufferSize' readbatchSize' checkPointAfterMilliseconds' minCheckPointCount' maxCheckPointCount' maxSubscriberCount' namedConsumerStrategy' user' username' password
Long Parameter List,EventStore.Core.Messages,DeletePersistentSubscription,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,DeletePersistentSubscription,The method has 6 parameters. Parameters: internalCorrId' correlationId' envelope' eventStreamId' groupName' user
Long Parameter List,EventStore.Core.Messages,UpdatePersistentSubscription,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,UpdatePersistentSubscription,The method has 16 parameters. Parameters: subscriptionGroupName' eventStreamId' resolveLinkTos' startFrom' messageTimeoutMilliseconds' recordStatistics' liveBufferSize' readBatchSize' bufferSize' maxRetryCount' preferRoundRobin' checkpointAfterTime' checkpointMaxCount' checkpointMinCount' subscriberMaxCount' namedConsumerStrategy
Long Parameter List,EventStore.Core.Messages,UpdatePersistentSubscription,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,UpdatePersistentSubscription,The method has 21 parameters. Parameters: internalCorrId' correlationId' envelope' eventStreamId' groupName' resolveLinkTos' startFrom' messageTimeoutMilliseconds' recordStatistics' maxRetryCount' bufferSize' liveBufferSize' readbatchSize' checkPointAfterMilliseconds' minCheckPointCount' maxCheckPointCount' maxSubscriberCount' namedConsumerStrategy' user' username' password
Long Parameter List,EventStore.Core.Messages,ConnectToPersistentSubscription,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,ConnectToPersistentSubscription,The method has 9 parameters. Parameters: internalCorrId' correlationId' envelope' connectionId' subscriptionId' eventStreamId' allowedInFlightMessages' from' user
Long Parameter List,EventStore.Core.Messages,PersistentSubscriptionAckEvents,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,PersistentSubscriptionAckEvents,The method has 6 parameters. Parameters: internalCorrId' correlationId' envelope' subscriptionId' processedEventIds' user
Long Parameter List,EventStore.Core.Messages,PersistentSubscriptionNakEvents,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,PersistentSubscriptionNakEvents,The method has 6 parameters. Parameters: internalCorrId' correlationId' envelope' subscriptionId' processedEventIds' user
Long Parameter List,EventStore.Core.Messages,SubscribeToStream,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,SubscribeToStream,The method has 7 parameters. Parameters: internalCorrId' correlationId' envelope' connectionId' eventStreamId' resolveLinkTos' user
Long Parameter List,EventStore.Core.Messages,ScavengeDatabaseCompleted,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,ScavengeDatabaseCompleted,The method has 5 parameters. Parameters: correlationId' result' error' totalTime' totalSpaceSaved
Long Parameter List,EventStore.Core.Messages,WritePrepares,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\StorageMessage.cs,WritePrepares,The method has 6 parameters. Parameters: correlationId' envelope' eventStreamId' expectedVersion' events' liveUntil
Long Parameter List,EventStore.Core.Messages,WriteDelete,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\StorageMessage.cs,WriteDelete,The method has 6 parameters. Parameters: correlationId' envelope' eventStreamId' expectedVersion' hardDelete' liveUntil
Long Parameter List,EventStore.Core.Messages,WriteTransactionStart,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\StorageMessage.cs,WriteTransactionStart,The method has 5 parameters. Parameters: correlationId' envelope' eventStreamId' expectedVersion' liveUntil
Long Parameter List,EventStore.Core.Messages,CheckStreamAccess,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\StorageMessage.cs,CheckStreamAccess,The method has 7 parameters. Parameters: envelope' correlationId' eventStreamId' transactionId' accessType' user' singleAffinity
Long Parameter List,EventStore.Core.Messages,CheckStreamAccessCompleted,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\StorageMessage.cs,CheckStreamAccessCompleted,The method has 5 parameters. Parameters: correlationId' eventStreamId' transactionId' accessType' accessResult
Long Parameter List,EventStore.Core.Messages,WriteRequestMessage,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ClientMessage.cs,WriteRequestMessage,The method has 7 parameters. Parameters: internalCorrId' correlationId' envelope' requireMaster' user' login' password
Long Parameter List,EventStore.Core.Messages,ReadStreamEventsForward,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ClientMessage.cs,ReadStreamEventsForward,The method has 11 parameters. Parameters: internalCorrId' correlationId' envelope' eventStreamId' fromEventNumber' maxCount' resolveLinkTos' requireMaster' validationStreamVersion' user' longPollTimeout
Long Parameter List,EventStore.Core.Messages,ReadStreamEventsForwardCompleted,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ClientMessage.cs,ReadStreamEventsForwardCompleted,The method has 13 parameters. Parameters: correlationId' eventStreamId' fromEventNumber' maxCount' result' events' streamMetadata' isCachePublic' error' nextEventNumber' lastEventNumber' isEndOfStream' tfLastCommitPosition
Long Parameter List,EventStore.Core.Messages,ReadStreamEventsBackward,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ClientMessage.cs,ReadStreamEventsBackward,The method has 10 parameters. Parameters: internalCorrId' correlationId' envelope' eventStreamId' fromEventNumber' maxCount' resolveLinkTos' requireMaster' validationStreamVersion' user
Long Parameter List,EventStore.Core.Messages,ReadStreamEventsBackwardCompleted,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ClientMessage.cs,ReadStreamEventsBackwardCompleted,The method has 13 parameters. Parameters: correlationId' eventStreamId' fromEventNumber' maxCount' result' events' streamMetadata' isCachePublic' error' nextEventNumber' lastEventNumber' isEndOfStream' tfLastCommitPosition
Long Parameter List,EventStore.Core.Messages,ReadAllEventsForward,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ClientMessage.cs,ReadAllEventsForward,The method has 11 parameters. Parameters: internalCorrId' correlationId' envelope' commitPosition' preparePosition' maxCount' resolveLinkTos' requireMaster' validationTfLastCommitPosition' user' longPollTimeout
Long Parameter List,EventStore.Core.Messages,ReadAllEventsForwardCompleted,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ClientMessage.cs,ReadAllEventsForwardCompleted,The method has 11 parameters. Parameters: correlationId' result' error' events' streamMetadata' isCachePublic' maxCount' currentPos' nextPos' prevPos' tfLastCommitPosition
Long Parameter List,EventStore.Core.Messages,ReadAllEventsBackward,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ClientMessage.cs,ReadAllEventsBackward,The method has 10 parameters. Parameters: internalCorrId' correlationId' envelope' commitPosition' preparePosition' maxCount' resolveLinkTos' requireMaster' validationTfLastCommitPosition' user
Long Parameter List,EventStore.Core.Messages,ReadAllEventsBackwardCompleted,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ClientMessage.cs,ReadAllEventsBackwardCompleted,The method has 11 parameters. Parameters: correlationId' result' error' events' streamMetadata' isCachePublic' maxCount' currentPos' nextPos' prevPos' tfLastCommitPosition
Long Parameter List,EventStore.Core.Messages,ReadNextNPersistentMessages,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ClientMessage.cs,ReadNextNPersistentMessages,The method has 7 parameters. Parameters: internalCorrId' correlationId' envelope' eventStreamId' groupName' count' user
Long Parameter List,EventStore.Core.Messages,PersistentSubscriptionNackEvents,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ClientMessage.cs,PersistentSubscriptionNackEvents,The method has 8 parameters. Parameters: internalCorrId' correlationId' envelope' subscriptionId' message' action' processedEventIds' user
Long Parameter List,EventStore.Core.Messages,ReplayAllParkedMessages,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ClientMessage.cs,ReplayAllParkedMessages,The method has 6 parameters. Parameters: internalCorrId' correlationId' envelope' eventStreamId' groupName' user
Long Parameter List,EventStore.Core.Messages,ReplayParkedMessage,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ClientMessage.cs,ReplayParkedMessage,The method has 7 parameters. Parameters: internalCorrId' correlationId' envelope' streamId' groupName' event' user
Long Parameter List,EventStore.Core.Messaging,RequestResponseDispatcher<TRequest;TResponse>,C:\repos\EventStore_EventStore\src\EventStore.Core\Messaging\RequestResponseDispatcher.cs,RequestResponseDispatcher,The method has 5 parameters. Parameters: publisher' getRequestCorrelationId' getResponseCorrelationId' defaultReplyEnvelope' cancelMessageFactory
Long Parameter List,EventStore.Core.Services.AwakeReaderService,SubscribeAwake,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\AwakeReaderService\AwakeServiceMessage.cs,SubscribeAwake,The method has 5 parameters. Parameters: envelope' correlationId' streamId' from' replyWithMessage
Long Parameter List,EventStore.Core.Services,ClusterStorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,ClusterStorageWriterService,The method has 8 parameters. Parameters: bus' subscribeToBus' minFlushDelay' db' writer' indexWriter' epochManager' getLastCommitPosition
Long Parameter List,EventStore.Core.Services,ElectionsService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,ElectionsService,The method has 8 parameters. Parameters: publisher' nodeInfo' clusterSize' writerCheckpoint' chaserCheckpoint' epochManager' getLastCommitPosition' nodePriority
Long Parameter List,EventStore.Core.Services,ElectionsService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,FormatNodeInfo,The method has 8 parameters. Parameters: serverEndPoint' serverId' lastCommitPosition' writerCheckpoint' chaserCheckpoint' epochNumber' epochPosition' epochId
Long Parameter List,EventStore.Core.Services,MasterCandidate,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,MasterCandidate,The method has 9 parameters. Parameters: instanceId' internalHttp' epochNumber' epochPosition' epochId' lastCommitPosition' writerCheckpoint' chaserCheckpoint' nodePriority
Long Parameter List,EventStore.Core.Services,SubscriptionsService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,SubscribeToStream,The method has 7 parameters. Parameters: correlationId' envelope' connectionId' eventStreamId' resolveLinkTos' lastCommitPosition' lastEventNumber
Long Parameter List,EventStore.Core.Services,SubscriptionsService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,SubscribePoller,The method has 5 parameters. Parameters: streamId' expireAt' lastCommitPosition' lastEventNumber' originalRequest
Long Parameter List,EventStore.Core.Services,Subscription,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,Subscription,The method has 7 parameters. Parameters: correlationId' envelope' connectionId' eventStreamId' resolveLinkTos' lastCommitPosition' lastEventNumber
Long Parameter List,EventStore.Core.Services.Gossip,GossipServiceBase,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Gossip\GossipServiceBase.cs,GossipServiceBase,The method has 5 parameters. Parameters: bus' gossipSeedSource' nodeInfo' gossipInterval' allowedTimeDifference
Long Parameter List,EventStore.Core.Services.Gossip,NodeGossipService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Gossip\NodeGossipService.cs,NodeGossipService,The method has 10 parameters. Parameters: bus' gossipSeedSource' nodeInfo' writerCheckpoint' chaserCheckpoint' epochManager' getLastCommitPosition' nodePriority' interval' allowedTimeDifference
Long Parameter List,EventStore.Core.Services.PersistentSubscription.ConsumerStrategy.PinnedState,Node,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\ConsumerStrategy\PinnedState\Node.cs,Node,The method has 8 parameters. Parameters: connectionId' nodeId' host' port' state' client' maximumInFlightMessages' assignmentCount
Long Parameter List,EventStore.Core.Services.PersistentSubscription,IPersistentSubscriptionStreamReader,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\IPersistentSubscriptionStreamReader.cs,BeginReadEvents,The method has 6 parameters. Parameters: stream' startEventNumber' countToLoad' batchSize' resolveLinkTos' onEventsFound
Long Parameter List,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,AddClient,The method has 6 parameters. Parameters: correlationId' connectionId' envelope' maxInFlight' user' from
Long Parameter List,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionClient,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionClient.cs,PersistentSubscriptionClient,The method has 8 parameters. Parameters: correlationId' connectionId' envelope' inFlightMessages' username' from' watch' extraStatistics
Long Parameter List,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionParams,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionParams.cs,PersistentSubscriptionParams,The method has 20 parameters. Parameters: resolveLinkTos' subscriptionId' eventStreamId' groupName' startFrom' extraStatistics' messageTimeout' maxRetryCount' liveBufferSize' bufferSize' readBatchSize' checkPointAfter' minCheckPointCount' maxCheckPointCount' maxSubscriberCount' consumerStrategy' streamReader' checkpointReader' checkpointWriter' messageParker
Long Parameter List,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionParamsBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionParamsBuilder.cs,PersistentSubscriptionParamsBuilder,The method has 16 parameters. Parameters: subscriptionId' streamName' groupName' resolveLinkTos' startFrom' recordStatistics' timeout' historyBufferSize' liveBufferSize' maxRetryCount' readBatchSize' checkPointAfter' minCheckPointCount' maxCheckPointCount' maxSubscriptionCount' consumerStrategy
Long Parameter List,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,PersistentSubscriptionService,The method has 5 parameters. Parameters: queuedHandler' readIndex' ioDispatcher' bus' consumerStrategyRegistry
Long Parameter List,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,CreateSubscriptionGroup,The method has 15 parameters. Parameters: eventStreamId' groupName' resolveLinkTos' startFrom' extraStatistics' maxRetryCount' liveBufferSize' historyBufferSize' readBatchSize' checkPointAfter' minCheckPointCount' maxCheckPointCount' maxSubscriberCount' namedConsumerStrategy' messageTimeout
Long Parameter List,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionStreamReader,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionStreamReader.cs,BeginReadEvents,The method has 6 parameters. Parameters: stream' startEventNumber' countToLoad' batchSize' resolveLinkTos' onEventsFound
Long Parameter List,EventStore.Core.Services.Replication,MasterReplicationService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,MasterReplicationService,The method has 6 parameters. Parameters: publisher' instanceId' db' tcpSendPublisher' epochManager' clusterSize
Long Parameter List,EventStore.Core.Services.Replication,MasterReplicationService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,SubscribeReplica,The method has 5 parameters. Parameters: replica' lastEpochs' correlationId' logPosition' chunkId
Long Parameter List,EventStore.Core.Services.Replication,MasterReplicationService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,SetSubscriptionPosition,The method has 6 parameters. Parameters: sub' logPosition' chunkId' replicationStart' verbose' trial
Long Parameter List,EventStore.Core.Services.Replication,ReplicaSubscription,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,ReplicaSubscription,The method has 5 parameters. Parameters: tcpSendPublisher' connection' subscriptionId' replicaEndPoint' isPromotable
Long Parameter List,EventStore.Core.Services.Replication,ReplicaService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\ReplicaService.cs,ReplicaService,The method has 11 parameters. Parameters: publisher' db' epochManager' networkSendQueue' authProvider' nodeInfo' useSsl' sslTargetHost' sslValidateServer' heartbeatTimeout' heartbeatInterval
Long Parameter List,EventStore.Core.Services.Storage.EpochManager,EpochManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\EpochManager\EpochManager.cs,EpochManager,The method has 7 parameters. Parameters: bus' cachedEpochCount' checkpoint' writer' initialReaderCount' maxReaderCount' readerFactory
Long Parameter List,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,IndexCommitter,The method has 5 parameters. Parameters: bus' backend' indexReader' tableIndex' additionalCommitChecks
Long Parameter List,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,IndexReader,The method has 5 parameters. Parameters: backend' tableIndex' metastreamMetadata' hashCollisionReadLimit' skipIndexScanOnRead
Long Parameter List,EventStore.Core.Services.Storage.ReaderIndex,CommitCheckResult,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\CommitCheckResult.cs,CommitCheckResult,The method has 6 parameters. Parameters: decision' eventStreamId' currentVersion' startEventNumber' endEventNumber' isSoftDeleted
Long Parameter List,EventStore.Core.Services.Storage.ReaderIndex,IndexReadEventResult,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReadEventResult.cs,IndexReadEventResult,The method has 5 parameters. Parameters: result' record' metadata' lastEventNumber' originalStreamExists
Long Parameter List,EventStore.Core.Services.Storage.ReaderIndex,ReadIndex,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\ReadIndex.cs,ReadIndex,The method has 8 parameters. Parameters: bus' readerPool' tableIndex' streamInfoCacheCapacity' additionalCommitChecks' metastreamMaxCount' hashCollisionReadLimit' skipIndexScanOnReads
Long Parameter List,EventStore.Core.Services.Storage.ReaderIndex,IndexReadStreamResult,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReadStreamResult.cs,IndexReadStreamResult,The method has 5 parameters. Parameters: fromEventNumber' maxCount' result' metadata' lastEventNumber
Long Parameter List,EventStore.Core.Services.Storage.ReaderIndex,IndexReadStreamResult,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReadStreamResult.cs,IndexReadStreamResult,The method has 7 parameters. Parameters: fromEventNumber' maxCount' records' metadata' nextEventNumber' lastEventNumber' isEndOfStream
Long Parameter List,EventStore.Core.Services.Storage.ReaderIndex,ReadIndexStats,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\ReadIndexStats.cs,ReadIndexStats,The method has 7 parameters. Parameters: cachedRecordReads' notCachedRecordReads' cachedStreamInfoReads' notCachedStreamInfoReads' hashCollisions' cachedTransInfoReads' notCachedTransInfoReads
Long Parameter List,EventStore.Core.Services.RequestManager.Managers,DeleteStreamTwoPhaseRequestManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\DeleteStreamTwoPhaseRequestManager.cs,DeleteStreamTwoPhaseRequestManager,The method has 6 parameters. Parameters: publisher' prepareCount' commitCount' prepareTimeout' commitTimeout' betterOrdering
Long Parameter List,EventStore.Core.Services.RequestManager.Managers,TransactionCommitTwoPhaseRequestManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\TransactionCommitTwoPhaseRequestManager.cs,TransactionCommitTwoPhaseRequestManager,The method has 6 parameters. Parameters: publisher' prepareCount' commitCount' prepareTimeout' commitTimeout' betterOrdering
Long Parameter List,EventStore.Core.Services.RequestManager.Managers,TwoPhaseRequestManagerBase,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\TwoPhaseRequestManagerBase.cs,TwoPhaseRequestManagerBase,The method has 6 parameters. Parameters: publisher' prepareCount' commitCount' prepareTimeout' commitTimeout' betterOrdering
Long Parameter List,EventStore.Core.Services.RequestManager.Managers,TwoPhaseRequestManagerBase,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\TwoPhaseRequestManagerBase.cs,InitNoPreparePhase,The method has 6 parameters. Parameters: responseEnvelope' internalCorrId' clientCorrId' eventStreamId' user' accessType
Long Parameter List,EventStore.Core.Services.RequestManager.Managers,TwoPhaseRequestManagerBase,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\TwoPhaseRequestManagerBase.cs,InitTwoPhase,The method has 6 parameters. Parameters: responseEnvelope' internalCorrId' clientCorrId' transactionId' user' accessType
Long Parameter List,EventStore.Core.Services.RequestManager.Managers,WriteStreamTwoPhaseRequestManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\WriteStreamTwoPhaseRequestManager.cs,WriteStreamTwoPhaseRequestManager,The method has 6 parameters. Parameters: publisher' prepareCount' commitCount' prepareTimeout' commitTimeout' betterOrdering
Long Parameter List,EventStore.Core.Services.Monitoring,MonitoringService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\MonitoringService.cs,MonitoringService,The method has 10 parameters. Parameters: monitoringQueue' statsCollectionBus' mainBus' writerCheckpoint' dbPath' statsCollectionPeriod' nodeEndpoint' statsStorage' tcpEndpoint' tcpSecureEndpoint
Long Parameter List,EventStore.Core.Services.Monitoring.Stats,QueueStats,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\Stats\QueueStats.cs,QueueStats,The method has 13 parameters. Parameters: name' groupName' length' avgItemsPerSecond' avgProcessingTime' idleTimePercent' currentItemProcessingTime' currentIdleTime' totalItemsProcessed' lengthCurrentTryPeak' lengthLifetimePeak' lastProcessedMessageType' inProgressMessageType
Long Parameter List,EventStore.Core.Services.Monitoring.Stats,GcStats,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\Stats\GcStats.cs,GcStats,The method has 10 parameters. Parameters: gcGen0Items' gcGen1Items' gcGen2Items' gcGen0Size' gcGen1Size' gcGen2Size' gcLargeHeapSize' gcAllocationSpeed' gcTimeInGc' gcTotalBytesInHeaps
Long Parameter List,EventStore.Core.Services.Storage,StorageReaderWorker,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,NoData,The method has 5 parameters. Parameters: msg' result' lastCommitPosition' lastEventNumber' error
Long Parameter List,EventStore.Core.Services.Storage,StorageReaderWorker,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,NoData,The method has 5 parameters. Parameters: msg' result' lastCommitPosition' lastEventNumber' error
Long Parameter List,EventStore.Core.Services.Storage,StorageReaderWorker,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,NoData,The method has 5 parameters. Parameters: msg' result' pos' lastCommitPosition' error
Long Parameter List,EventStore.Core.Services.Storage,StorageReaderWorker,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,NoData,The method has 5 parameters. Parameters: msg' result' pos' lastCommitPosition' error
Long Parameter List,EventStore.Core.Services.Storage,StorageScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,StorageScavenger,The method has 9 parameters. Parameters: db' ioDispatcher' tableIndex' readIndex' alwaysKeepScavenged' nodeEndpoint' mergeChunks' scavengeHistoryMaxAge' unsafeIgnoreHardDeletes
Long Parameter List,EventStore.Core.Services.Storage,StorageScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeCompletedEvent,The method has 6 parameters. Parameters: streamName' scavengeId' result' error' spaceSaved' timeTaken
Long Parameter List,EventStore.Core.Services.Storage,StorageChaser,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageChaser.cs,StorageChaser,The method has 5 parameters. Parameters: masterBus' writerCheckpoint' chaser' indexCommitter' epochManager
Long Parameter List,EventStore.Core.Services.Storage,StorageReaderService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderService.cs,StorageReaderService,The method has 5 parameters. Parameters: bus' subscriber' readIndex' threadCount' writerCheckpoint
Long Parameter List,EventStore.Core.Services.Storage,StorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,StorageWriterService,The method has 7 parameters. Parameters: bus' subscribeToBus' minFlushDelay' db' writer' indexWriter' epochManager
Long Parameter List,EventStore.Core.Services.Transport.Http.Controllers,HttpHelpers,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\HttpHelpers.cs,Reply,The method has 6 parameters. Parameters: http' response' code' description' contentType' headers
Long Parameter List,EventStore.Core.Services.Transport.Http.Controllers,CommunicationController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\CommunicationController.cs,Register,The method has 6 parameters. Parameters: service' uriTemplate' httpMethod' handler' requestCodecs' responseCodecs
Long Parameter List,EventStore.Core.Services.Transport.Http.Controllers,CommunicationController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\CommunicationController.cs,RegisterCustom,The method has 6 parameters. Parameters: service' uriTemplate' httpMethod' handler' requestCodecs' responseCodecs
Long Parameter List,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,PostEntry,The method has 6 parameters. Parameters: manager' expectedVersion' requireMaster' stream' idIncluded' typeIncluded
Long Parameter List,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetStreamEvent,The method has 6 parameters. Parameters: manager' stream' eventNumber' resolveLinkTos' requireMaster' embed
Long Parameter List,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetStreamEventsBackward,The method has 8 parameters. Parameters: manager' stream' eventNumber' count' resolveLinkTos' requireMaster' headOfStream' embed
Long Parameter List,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetStreamEventsForward,The method has 9 parameters. Parameters: manager' stream' eventNumber' count' resolveLinkTos' requireMaster' etag' longPollTimeout' embed
Long Parameter List,EventStore.Core.Services.Transport.Http,TrieUriRouter,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\UriRouters.cs,GetAllUriMatches,The method has 6 parameters. Parameters: node' baseAddress' uri' segments' index' matches
Long Parameter List,EventStore.Core.Services.Transport.Http,Configure,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,Ok,The method has 6 parameters. Parameters: contentType' encoding' etag' cacheSeconds' isCachePublic' headers
Long Parameter List,EventStore.Core.Services.Transport.Http,Format,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Format.cs,ReadNextNPersistentMessagesCompleted,The method has 6 parameters. Parameters: entity' message' streamId' groupName' count' embed
Long Parameter List,EventStore.Core.Services.Transport.Http,SendToHttpWithConversionEnvelope<TExpectedResponseMessage;TExpectedHttpFormattedResponseMessage>,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\SendToHttpWithConversionEnvelope.cs,SendToHttpWithConversionEnvelope,The method has 6 parameters. Parameters: networkSendQueue' entity' formatter' configurator' convertor' nonMatchingEnvelope
Long Parameter List,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToNextNPersistentMessagesFeed,The method has 6 parameters. Parameters: msg' requestedUrl' streamId' groupName' count' embedContent
Long Parameter List,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,SetEntryProperties,The method has 5 parameters. Parameters: stream' eventNumber' timestamp' requestedUrl' entry
Long Parameter List,EventStore.Core.Services.Transport.Http,ResponseConfiguration,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\ResponseConfiguration.cs,ResponseConfiguration,The method has 5 parameters. Parameters: code' description' contentType' encoding' headers
Long Parameter List,EventStore.Core.Services.Transport.Http,ResponseConfiguration,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\ResponseConfiguration.cs,ResponseConfiguration,The method has 5 parameters. Parameters: code' description' contentType' encoding' headers
Long Parameter List,EventStore.Core.Services.Transport.Http,HttpService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\HttpService.cs,HttpService,The method has 8 parameters. Parameters: accessibility' inputBus' uriRouter' multiQueuedHandler' logHttpRequests' advertiseAsAddress' advertiseAsPort' prefixes
Long Parameter List,EventStore.Core.Services.Transport.Http,SendToHttpEnvelope<TExpectedResponseMessage>,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\SendToHttpEnvelope.cs,SendToHttpEnvelope,The method has 5 parameters. Parameters: networkSendQueue' entity' formatter' configurator' notMatchingEnvelope
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ITcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ITcpDispatcher.cs,UnwrapPackage,The method has 7 parameters. Parameters: package' envelope' user' login' pass' connection' version
Long Parameter List,EventStore.Core.Services.Transport.Tcp,TcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpDispatcher.cs,UnwrapPackage,The method has 7 parameters. Parameters: package' envelope' user' login' pass' connection' version
Long Parameter List,EventStore.Core.Services.Transport.Tcp,TcpService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpService.cs,TcpService,The method has 11 parameters. Parameters: publisher' serverEndPoint' networkSendQueue' serviceType' securityType' dispatcher' heartbeatInterval' heartbeatTimeout' authProvider' certificate' connectionPendingSendBytesThreshold
Long Parameter List,EventStore.Core.Services.Transport.Tcp,TcpService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpService.cs,TcpService,The method has 11 parameters. Parameters: publisher' serverEndPoint' networkSendQueue' serviceType' securityType' dispatcherFactory' heartbeatInterval' heartbeatTimeout' authProvider' certificate' connectionPendingSendBytesThreshold
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapWriteEvents,The method has 5 parameters. Parameters: package' envelope' user' login' password
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapTransactionStart,The method has 5 parameters. Parameters: package' envelope' user' login' password
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapTransactionWrite,The method has 5 parameters. Parameters: package' envelope' user' login' password
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapTransactionCommit,The method has 5 parameters. Parameters: package' envelope' user' login' password
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapDeleteStream,The method has 5 parameters. Parameters: package' envelope' user' login' password
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapSubscribeToStream,The method has 6 parameters. Parameters: package' envelope' user' login' pass' connection
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapCreatePersistentSubscription,The method has 6 parameters. Parameters: package' envelope' user' username' password' connection
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapUpdatePersistentSubscription,The method has 6 parameters. Parameters: package' envelope' user' username' password' connection
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapDeletePersistentSubscription,The method has 6 parameters. Parameters: package' envelope' user' username' password' connection
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapConnectToPersistentSubscription,The method has 6 parameters. Parameters: package' envelope' user' login' pass' connection
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapPersistentSubscriptionAckEvents,The method has 6 parameters. Parameters: package' envelope' user' login' pass' connection
Long Parameter List,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapPersistentSubscriptionNackEvents,The method has 6 parameters. Parameters: package' envelope' user' login' pass' connection
Long Parameter List,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,TcpConnectionManager,The method has 11 parameters. Parameters: connectionName' serviceType' dispatcher' publisher' openedConnection' networkSendQueue' authProvider' heartbeatInterval' heartbeatTimeout' onConnectionClosed' connectionPendingSendBytesThreshold
Long Parameter List,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,TcpConnectionManager,The method has 15 parameters. Parameters: connectionName' connectionId' dispatcher' publisher' remoteEndPoint' connector' useSsl' sslTargetHost' sslValidateServer' networkSendQueue' authProvider' heartbeatInterval' heartbeatTimeout' onConnectionEstablished' onConnectionClosed
Long Parameter List,EventStore.Core.Services.Transport.Tcp,TcpPackage,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,TcpPackage,The method has 6 parameters. Parameters: command' flags' correlationId' login' password' data
Long Parameter List,EventStore.Core.Services.Transport.Tcp,TcpPackage,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,TcpPackage,The method has 6 parameters. Parameters: command' flags' correlationId' login' password' data
Long Parameter List,EventStore.Core.Services.UserManagement,AllUsersReader,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\AllUsersReader.cs,AddLoadedUserDetails,The method has 5 parameters. Parameters: loginName' fullName' groups' disabled' dateLastUpdated
Long Parameter List,EventStore.Core.Services.UserManagement,UserManagementService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\UserManagementService.cs,WriteUserEvent,The method has 5 parameters. Parameters: message' userData' eventType' expectedVersion' after
Long Parameter List,EventStore.Core.Services.VNode,ClusterVNodeController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,ClusterVNodeController,The method has 7 parameters. Parameters: outputBus' nodeInfo' db' vnodeSettings' node' forwardingProxy' subSystems
Long Parameter List,EventStore.Core.Services.VNode,MessageForwardingProxy,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\VNode\MessageForwardingProxy.cs,Register,The method has 5 parameters. Parameters: internalCorrId' clientCorrId' envelope' timeout' timeoutMessage
Long Parameter List,EventStore.Core.Settings,SingleVNodeSettings,C:\repos\EventStore_EventStore\src\EventStore.Core\Settings\VNodeSettings.cs,SingleVNodeSettings,The method has 15 parameters. Parameters: externalTcpEndPoint' externalSecureTcpEndPoint' externalHttpEndPoint' httpPrefixes' enableTrustedAuth' certificate' workerThreads' minFlushDelay' prepareTimeout' commitTimeout' statsPeriod' tcpTimeout' statsStorage' skipInitializeStandardUsersCheck' disableScavengeMerging
Long Parameter List,EventStore.Core.TransactionLog.Checkpoint,FileCheckpoint,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Checkpoint\FileCheckpoint.cs,FileCheckpoint,The method has 5 parameters. Parameters: filename' name' cached' mustExist' initValue
Long Parameter List,EventStore.Core.TransactionLog.Checkpoint,MemoryMappedFileCheckpoint,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Checkpoint\MemoryMappedFileCheckpoint.cs,MemoryMappedFileCheckpoint,The method has 5 parameters. Parameters: filename' name' cached' mustExist' initValue
Long Parameter List,EventStore.Core.TransactionLog.Checkpoint,Filenative,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Checkpoint\WriteThroughFileCheckpoint.cs,CreateFile,The method has 7 parameters. Parameters: FileName' DesiredAccess' ShareMode' SecurityAttributes' CreationDisposition' FlagsAndAttributes' hTemplate
Long Parameter List,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,TFChunkScavenger,The method has 8 parameters. Parameters: db' ioDispatcher' tableIndex' readIndex' scavengeId' nodeEndpoint' maxChunkDataSize' unsafeIgnoreHardDeletes
Long Parameter List,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,PublishChunksCompletedEvent,The method has 6 parameters. Parameters: chunkStartNumber' chunkEndNumber' elapsed' wasScavenged' spaceSaved' errorMessage
Long Parameter List,EventStore.Core.TransactionLog.Chunks,ChunkFooter,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\ChunkFooter.cs,ChunkFooter,The method has 6 parameters. Parameters: isCompleted' isMap12Bytes' physicalDataSize' logicalDataSize' mapSize' md5Hash
Long Parameter List,EventStore.Core.TransactionLog.Chunks,ChunkHeader,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\ChunkHeader.cs,ChunkHeader,The method has 6 parameters. Parameters: version' chunkSize' chunkStartNumber' chunkEndNumber' isScavenged' chunkId
Long Parameter List,EventStore.Core.TransactionLog.Chunks,TFChunkDbConfig,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDbConfig.cs,TFChunkDbConfig,The method has 11 parameters. Parameters: path' fileNamingStrategy' chunkSize' maxChunksCacheSize' writerCheckpoint' chaserCheckpoint' epochCheckpoint' truncateCheckpoint' inMemDb' unbuffered' writethrough
Long Parameter List,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TFChunk,The method has 7 parameters. Parameters: filename' initialReaderCount' maxReaderCount' midpointsDepth' inMem' unbuffered' writethrough
Long Parameter List,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,FromOngoingFile,The method has 5 parameters. Parameters: filename' writePosition' checkSize' unbuffered' writethrough
Long Parameter List,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateNew,The method has 8 parameters. Parameters: filename' chunkSize' chunkStartNumber' chunkEndNumber' isScavenged' inMem' unbuffered' writethrough
Long Parameter List,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateWithHeader,The method has 6 parameters. Parameters: filename' header' fileSize' inMem' unbuffered' writethrough
Long Parameter List,EventStore.Core.TransactionLog,SeqReadResult,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\ReadResults.cs,SeqReadResult,The method has 6 parameters. Parameters: success' eof' logRecord' recordLength' recordPrePosition' recordPostPosition
Long Parameter List,EventStore.Core.TransactionLog.LogRecords,EpochRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\EpochRecord.cs,EpochRecord,The method has 5 parameters. Parameters: epochPosition' epochNumber' epochId' prevEpochPosition' timeStamp
Long Parameter List,EventStore.Core.TransactionLog.LogRecords,SystemLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\SystemLogRecord.cs,SystemLogRecord,The method has 5 parameters. Parameters: logPosition' timeStamp' systemRecordType' systemRecordSerialization' data
Long Parameter List,EventStore.Core.TransactionLog.LogRecords,CommitLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\CommitLogRecord.cs,CommitLogRecord,The method has 6 parameters. Parameters: logPosition' correlationId' transactionPosition' timeStamp' firstEventNumber' commitRecordVersion
Long Parameter List,EventStore.Core.TransactionLog.LogRecords,LogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,Prepare,The method has 12 parameters. Parameters: logPosition' correlationId' eventId' transactionPos' transactionOffset' eventStreamId' expectedVersion' flags' eventType' data' metadata' timeStamp
Long Parameter List,EventStore.Core.TransactionLog.LogRecords,LogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,SingleWrite,The method has 10 parameters. Parameters: logPosition' correlationId' eventId' eventStreamId' expectedVersion' eventType' data' metadata' timestamp' additionalFlags
Long Parameter List,EventStore.Core.TransactionLog.LogRecords,LogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,TransactionWrite,The method has 10 parameters. Parameters: logPosition' correlationId' eventId' transactionPos' transactionOffset' eventStreamId' eventType' data' metadata' isJson
Long Parameter List,EventStore.Core.TransactionLog.LogRecords,LogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,TransactionEnd,The method has 5 parameters. Parameters: logPos' correlationId' eventId' transactionPos' eventStreamId
Long Parameter List,EventStore.Core.TransactionLog.LogRecords,LogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,DeleteTombstone,The method has 6 parameters. Parameters: logPosition' correlationId' eventId' eventStreamId' expectedVersion' additionalFlags
Long Parameter List,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,PrepareLogRecord,The method has 13 parameters. Parameters: logPosition' correlationId' eventId' transactionPosition' transactionOffset' eventStreamId' expectedVersion' timeStamp' flags' eventType' data' metadata' prepareRecordVersion
Long Parameter List,EventStore.Core.TransactionLog.Unbuffered,NativeFile,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Unbuffered\NativeFile.cs,Create,The method has 5 parameters. Parameters: path' acc' readWrite' mode' flags
Long Parameter List,EventStore.Core.TransactionLog.Unbuffered,NativeFile,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Unbuffered\NativeFile.cs,CreateUnbufferedRW,The method has 5 parameters. Parameters: path' acc' share' mode' writeThrough
Long Parameter List,EventStore.Core.TransactionLog.Unbuffered,UnbufferedFileStream,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Unbuffered\UnbufferedFileStream.cs,Create,The method has 9 parameters. Parameters: path' mode' acc' share' sequential' internalWriteBufferSize' internalReadBufferSize' writeThrough' minBlockSize
Long Parameter List,EventStore.Core.TransactionLog.Unbuffered,UnbufferedFileStream,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Unbuffered\UnbufferedFileStream.cs,MemCopy,The method has 5 parameters. Parameters: src' srcOffset' dest' destOffset' count
Long Parameter List,EventStore.Core.TransactionLog.Unbuffered,UnbufferedFileStream,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Unbuffered\UnbufferedFileStream.cs,MemCopy,The method has 5 parameters. Parameters: src' srcOffset' dest' destOffset' count
Long Parameter List,EventStore.Core.TransactionLog.Unbuffered,UnbufferedFileStream,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Unbuffered\UnbufferedFileStream.cs,MemCopy,The method has 5 parameters. Parameters: src' srcOffset' dest' destOffset' count
Long Parameter List,EventStore.Core.TransactionLog.Unbuffered,WinNative,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Unbuffered\WinNative.cs,GetDiskFreeSpace,The method has 5 parameters. Parameters: path' sectorsPerCluster' bytesPerSector' numberOfFreeClusters' totalNumberOfClusters
Long Parameter List,EventStore.Core.TransactionLog.Unbuffered,WinNative,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Unbuffered\WinNative.cs,WriteFile,The method has 5 parameters. Parameters: hFile' aBuffer' cbToWrite' cbThatWereWritten' pOverlapped
Long Parameter List,EventStore.Core.TransactionLog.Unbuffered,WinNative,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Unbuffered\WinNative.cs,ReadFile,The method has 5 parameters. Parameters: hFile' pBuffer' NumberOfBytesToRead' pNumberOfBytesRead' Overlapped
Long Parameter List,EventStore.Core.TransactionLog.Unbuffered,WinNative,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Unbuffered\WinNative.cs,CreateFile,The method has 7 parameters. Parameters: fileName' desiredAccess' shareMode' securityAttrs' creationDisposition' flagsAndAttributes' templateFile
Long Parameter List,EventStore.Core.Services.RequestManager,RequestManagementService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\RequestManagementService.cs,RequestManagementService,The method has 6 parameters. Parameters: bus' prepareCount' commitCount' prepareTimeout' commitTimeout' betterOrdering
Long Parameter List,EventStore.ClientAPI.Embedded,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,CreateDbConfig,The method has 8 parameters. Parameters: chunkSize' cachedChunks' dbPath' chunksCacheSize' inMemDb' unbuffered' writethrough' log
Long Identifier,EventStore.Core.Authentication,InternalAuthenticationProviderFactory,C:\repos\EventStore_EventStore\src\EventStore.Core\Authentication\InternalAuthenticationProviderFactory.cs,BuildAuthenticationProvider,The length of the parameter passwordChangeNotificationReader is 32.
Long Identifier,EventStore.Core,ClusterVNode,C:\repos\EventStore_EventStore\src\EventStore.Core\ClusterVNode.cs,,The length of the parameter _internalAuthenticationProvider is 31.
Long Identifier,EventStore.Core,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,WithConnectionPendingSendBytesThreshold,The length of the parameter connectionPendingSendBytesThreshold is 35.
Long Identifier,EventStore.Core,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,,The length of the parameter _authenticationProviderFactory is 30.
Long Identifier,EventStore.Core,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,,The length of the parameter _connectionPendingSendBytesThreshold is 36.
Long Identifier,EventStore.Core,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,,The length of the parameter _advertiseInternalSecureTcpPortAs is 33.
Long Identifier,EventStore.Core,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,,The length of the parameter _advertiseExternalSecureTcpPortAs is 33.
Long Identifier,EventStore.Core.Cluster.Settings,ClusterVNodeSettings,C:\repos\EventStore_EventStore\src\EventStore.Core\Cluster\Settings\ClusterVNodeSettings.cs,ClusterVNodeSettings,The length of the parameter connectionPendingSendBytesThreshold is 35.
Long Identifier,EventStore.Core.Cluster.Settings,ClusterVNodeSettings,C:\repos\EventStore_EventStore\src\EventStore.Core\Cluster\Settings\ClusterVNodeSettings.cs,,The length of the parameter ConnectionPendingSendBytesThreshold is 35.
Long Identifier,EventStore.Core.Messages,ReadAllEventsForward,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ClientMessage.cs,ReadAllEventsForward,The length of the parameter validationTfLastCommitPosition is 30.
Long Identifier,EventStore.Core.Messages,ReadAllEventsForward,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ClientMessage.cs,,The length of the parameter ValidationTfLastCommitPosition is 30.
Long Identifier,EventStore.Core.Messages,ReadAllEventsBackward,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ClientMessage.cs,ReadAllEventsBackward,The length of the parameter validationTfLastCommitPosition is 30.
Long Identifier,EventStore.Core.Messages,ReadAllEventsBackward,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ClientMessage.cs,,The length of the parameter ValidationTfLastCommitPosition is 30.
Long Identifier,EventStore.Core.Services.AwakeReaderService,AwakeService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\AwakeReaderService\AwakeService.cs,,The length of the parameter _processedEventsAwakeThreshold is 30.
Long Identifier,EventStore.Core.Services.PersistentSubscription.ConsumerStrategy.PinnedState,PinnedConsumerState,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\ConsumerStrategy\PinnedState\PinnedConsumerState.cs,AddNode,The length of the parameter maxBalancedClientAssignmentCount is 32.
Long Identifier,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,HandleLoadCompleted,The length of the parameter readStreamEventsBackwardCompleted is 33.
Long Identifier,EventStore.Core.Services.Monitoring,MonitoringService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\MonitoringService.cs,,The length of the parameter _lastTcpConnectionsRequestTime is 30.
Long Identifier,EventStore.Core.Services.Storage,StorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,,The length of the parameter WaitForChaserSingleIterationTimeout is 35.
Long Identifier,EventStore.Core.Services.Transport.Http.Authentication,BasicHttpAuthenticationProvider,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Authentication\BasicHttpAuthenticationProvider.cs,BasicHttpAuthenticationProvider,The length of the parameter internalAuthenticationProvider is 30.
Long Identifier,EventStore.Core.Services.Transport.Http.Authentication,BasicHttpAuthenticationProvider,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Authentication\BasicHttpAuthenticationProvider.cs,,The length of the parameter _internalAuthenticationProvider is 31.
Long Identifier,EventStore.Core.Services.Transport.Http.Authentication,HttpBasicAuthenticationRequest,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Authentication\BasicHttpAuthenticationProvider.cs,HttpBasicAuthenticationRequest,The length of the parameter basicHttpAuthenticationProvider is 31.
Long Identifier,EventStore.Core.Services.Transport.Http.Authentication,HttpBasicAuthenticationRequest,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Authentication\BasicHttpAuthenticationProvider.cs,,The length of the parameter _basicHttpAuthenticationProvider is 32.
Long Identifier,EventStore.Core.Services.Transport.Tcp,TcpService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpService.cs,TcpService,The length of the parameter connectionPendingSendBytesThreshold is 35.
Long Identifier,EventStore.Core.Services.Transport.Tcp,TcpService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpService.cs,TcpService,The length of the parameter connectionPendingSendBytesThreshold is 35.
Long Identifier,EventStore.Core.Services.Transport.Tcp,TcpService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpService.cs,,The length of the parameter _connectionPendingSendBytesThreshold is 36.
Long Identifier,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,TcpConnectionManager,The length of the parameter connectionPendingSendBytesThreshold is 35.
Long Identifier,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,,The length of the parameter _connectionPendingSendBytesThreshold is 36.
Long Identifier,EventStore.Core.Services.UserManagement,UserManagementService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\UserManagementService.cs,UserManagementService,The length of the parameter skipInitializeStandardUsersCheck is 32.
Long Identifier,EventStore.Core.Services.UserManagement,UserManagementService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\UserManagementService.cs,,The length of the parameter UserPasswordNotificationsStreamId is 33.
Long Identifier,EventStore.Core.Services.UserManagement,UserManagementService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\UserManagementService.cs,,The length of the parameter _skipInitializeStandardUsersCheck is 33.
Long Identifier,EventStore.Core.Services.UserManagement,UserManagementService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\UserManagementService.cs,,The length of the parameter _numberOfStandardUsersToBeCreated is 33.
Long Identifier,EventStore.Core.Settings,ESConsts,C:\repos\EventStore_EventStore\src\EventStore.Core\Settings\ESConsts.cs,,The length of the parameter TransactionMetadataCacheCapacity is 32.
Long Identifier,EventStore.Core.Settings,SingleVNodeSettings,C:\repos\EventStore_EventStore\src\EventStore.Core\Settings\VNodeSettings.cs,SingleVNodeSettings,The length of the parameter skipInitializeStandardUsersCheck is 32.
Long Identifier,EventStore.Core.Settings,SingleVNodeSettings,C:\repos\EventStore_EventStore\src\EventStore.Core\Settings\VNodeSettings.cs,,The length of the parameter SkipInitializeStandardUsersCheck is 32.
Long Identifier,EventStore.Core.TransactionLog.Chunks,TFChunkManager,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkManager.cs,SwitchChunk,The length of the parameter removeChunksWithGreaterNumbers is 30.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter StartStandardProjectionsDefault is 31.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter ExtTcpHeartbeatIntervalDefault is 30.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter IntTcpHeartbeatIntervalDefault is 30.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter ConnectionPendingSendBytesThresholdDescr is 40.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter ConnectionPendingSendBytesThresholdDefault is 42.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter UnsafeDisableFlushToDiskDefault is 31.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter CertificateStoreLocationDefault is 31.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter GossipAllowedDifferenceMsDescr is 30.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter GossipAllowedDifferenceMsDefault is 32.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter ExternalSecureTcpPortAdvertiseAsDescr is 37.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter ExternalSecureTcpPortAdvertiseAsDefault is 39.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter ExternalTcpPortAdvertiseAsDescr is 31.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter ExternalTcpPortAdvertiseAsDefault is 33.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter ExternalHttpPortAdvertiseAsDescr is 32.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter ExternalHttpPortAdvertiseAsDefault is 34.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter InternalTcpPortAdvertiseAsDescr is 31.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter InternalTcpPortAdvertiseAsDefault is 33.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter InternalSecureTcpPortAdvertiseAsDescr is 37.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter InternalSecureTcpPortAdvertiseAsDefault is 39.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter InternalHttpPortAdvertiseAsDescr is 32.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter InternalHttpPortAdvertiseAsDefault is 34.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter InternalManagerHttpPortDefault is 30.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter ExternalManagerHttpPortDefault is 30.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter WatchdogFailureTimeWindowDescr is 30.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter WatchdogFailureTimeWindowDefault is 32.
Long Identifier,EventStore.Core.Util,Opts,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\Opts.cs,,The length of the parameter AuthenticationConfigFileDefault is 31.
Long Identifier,EventStore.ClientAPI.Embedded,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,WithConnectionPendingSendBytesThreshold,The length of the parameter connectionPendingSendBytesThreshold is 35.
Long Identifier,EventStore.ClientAPI.Embedded,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,,The length of the parameter _authenticationProviderFactory is 30.
Long Identifier,EventStore.ClientAPI.Embedded,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,,The length of the parameter _connectionPendingSendBytesThreshold is 36.
Long Identifier,EventStore.ClientAPI.Embedded,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,,The length of the parameter _advertiseInternalSecureTcpPortAs is 33.
Long Identifier,EventStore.ClientAPI.Embedded,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,,The length of the parameter _advertiseExternalSecureTcpPortAs is 33.
Long Statement,EventStore.Core.Authentication,InternalAuthenticationProviderFactory,C:\repos\EventStore_EventStore\src\EventStore.Core\Authentication\InternalAuthenticationProviderFactory.cs,BuildAuthenticationProvider,The length of the statement  "			var userManagement = new UserManagementService(mainQueue' ioDispatcher' passwordHashAlgorithm' skipInitializeStandardUsersCheck: false); " is 136.
Long Statement,EventStore.Core.Bus,MPSCMessageQueue,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\MPSCMessageQueue.cs,TryDequeue,The length of the statement  "            // To do not get volatile read' the value is stored in a separate field and then persisted in both the sequenceReadToValue and sequenceRead. " is 140.
Long Statement,EventStore.Core.Bus,QueueStatsCollector,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,GetStatistics,The length of the statement  "                var idleTimePercent = Math.Min(100.0' lastRunMs.Ticks != 0 ? 100.0 * (totalIdleTime - _lastTotalIdleTime).Ticks / lastRunMs.Ticks : 100); " is 137.
Long Statement,EventStore.Core.Bus,SPSCMessageQueue,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\SPSCMessageQueue.cs,TryDequeue,The length of the statement  "            // To do not get volatile read' the value is stored in a separate field and then persisted in both the sequenceReadToValue and sequenceRead. " is 140.
Long Statement,EventStore.Core.Bus,InMemoryBusUnoptimized,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\InMemoryBus.cs,PublishByType,The length of the statement  "                            Log.Trace("SLOW BUS MSG [{0}]: {1} - {2}ms. Handler: {3}."' Name' message.GetType().Name' (int)elapsed.TotalMilliseconds' handler.HandlerName); " is 143.
Long Statement,EventStore.Core,ClusterNodeMutex,C:\repos\EventStore_EventStore\src\EventStore.Core\ClusterNodeMutex.cs,Acquire,The length of the statement  "            if (_acquired) throw new InvalidOperationException(string.Format("Cluster Node mutex '{0}' is already acquired."' MutexName)); " is 126.
Long Statement,EventStore.Core,ClusterNodeMutex,C:\repos\EventStore_EventStore\src\EventStore.Core\ClusterNodeMutex.cs,Release,The length of the statement  "            if (!_acquired) throw new InvalidOperationException(string.Format("Cluster Node mutex '{0}' was not acquired."' MutexName)); " is 124.
Long Statement,EventStore.Core,ProgramBase<TOptions>,C:\repos\EventStore_EventStore\src\EventStore.Core\ProgramBase.cs,Run,The length of the statement  "                var options = EventStoreOptions.Parse<TOptions>(args' Opts.EnvPrefix' Path.Combine(Locations.DefaultConfigurationDirectory' DefaultFiles.DefaultConfigFile)); " is 157.
Long Statement,EventStore.Core,ProgramBase<TOptions>,C:\repos\EventStore_EventStore\src\EventStore.Core\ProgramBase.cs,CommitSuicideIfInBoehmOrOnBadVersionsOfMono,The length of the statement  "                    Application.Exit(3' "Appears that we are running in mono with boehm GC this is generally not a good idea' please run with sgen instead." +  " is 138.
Long Statement,EventStore.Core,ProgramBase<TOptions>,C:\repos\EventStore_EventStore\src\EventStore.Core\ProgramBase.cs,CommitSuicideIfInBoehmOrOnBadVersionsOfMono,The length of the statement  "                        "to run with sgen use mono --gc=sgen. If you really want to run with boehm GC you can use --force to override this error."); " is 124.
Long Statement,EventStore.Core,ProgramBase<TOptions>,C:\repos\EventStore_EventStore\src\EventStore.Core\ProgramBase.cs,CommitSuicideIfInBoehmOrOnBadVersionsOfMono,The length of the statement  "                    Log.Warn("You appear to be running a version of Mono which is untested and not supported. Only Mono 4.6.2 is supported at this time."); " is 135.
Long Statement,EventStore.Core,ProgramBase<TOptions>,C:\repos\EventStore_EventStore\src\EventStore.Core\ProgramBase.cs,Init,The length of the statement  "            Log.Info("\n{0'-25} {1} ({2}/{3}' {4})"' "ES VERSION:"' VersionInfo.Version' VersionInfo.Branch' VersionInfo.Hashtag' VersionInfo.Timestamp); " is 141.
Long Statement,EventStore.Core,ProgramBase<TOptions>,C:\repos\EventStore_EventStore\src\EventStore.Core\ProgramBase.cs,Init,The length of the statement  "            Log.Info("{0'-25} {1}"' "GC:"' GC.MaxGeneration == 0 ? "NON-GENERATION (PROBABLY BOEHM)" : string.Format("{0} GENERATIONS"' GC.MaxGeneration + 1)); " is 147.
Long Statement,EventStore.Core,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,RunInMemory,The length of the statement  "            _dbPath = Path.Combine(Path.GetTempPath()' "EmbeddedEventStore"' string.Format("{0:yyyy-MM-dd_HH.mm.ss.ffffff}-EmbeddedNode"' DateTime.UtcNow)); " is 144.
Long Statement,EventStore.Core,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,GetCertificateFromStore,The length of the statement  "                throw new Exception(string.Format("Could not open certificate store '{0}' in location {1}'."' store.Name' store.Location)' exc); " is 128.
Long Statement,EventStore.Core,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,GetCertificateFromStore,The length of the statement  "                    throw new Exception(string.Format("Could not determine a unique certificate from thumbprint '{0}'."' certificateThumbprint)); " is 125.
Long Statement,EventStore.Core,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,GetCertificateFromStore,The length of the statement  "                    throw new Exception(string.Format("Could not find valid certificate with subject name '{0}'."' certificateSubjectName)); " is 120.
Long Statement,EventStore.Core,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,GetCertificateFromStore,The length of the statement  "                    throw new Exception(string.Format("Could not determine a unique certificate from subject name '{0}'."' certificateSubjectName)); " is 128.
Long Statement,EventStore.Core,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,GetCertificateFromStore,The length of the statement  "            throw new ArgumentException("No thumbprint or subject name was specified for a certificate' but a certificate store was specified."); " is 133.
Long Statement,EventStore.Core,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,EnsureGossipAdvertiseInfo,The length of the statement  "                var intSecureTcpPort = _advertiseInternalSecureTcpPortAs > 0 ? _advertiseInternalSecureTcpPortAs : _internalSecureTcp == null ? 0 : _internalSecureTcp.Port; " is 156.
Long Statement,EventStore.Core,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,EnsureGossipAdvertiseInfo,The length of the statement  "                var extSecureTcpPort = _advertiseExternalSecureTcpPortAs > 0 ? _advertiseExternalSecureTcpPortAs : _externalSecureTcp == null ? 0 : _externalSecureTcp.Port; " is 156.
Long Statement,EventStore.Core,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,CreateDbConfig,The length of the statement  "                        log.Info("Access to path {0} denied. The Event Store database will be created in {1}"' dbPath' Locations.FallbackDefaultDataDirectory); " is 135.
Long Statement,EventStore.Core.Cluster,MemberInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,ToString,The length of the statement  "            return string.Format("VND {0:B} <{1}> [{2}' {3}' {4}' {5}' {6}' {7}' {8}] {9}/{10}/{11}/E{12}@{13}:{14:B} | {15:yyyy-MM-dd HH:mm:ss.fff}"' " is 138.
Long Statement,EventStore.Core.Data,GossipAdvertiseInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\GossipAdvertiseInfo.cs,ToString,The length of the statement  "            return string.Format("IntTcp: {0}' IntSecureTcp: {1}\nExtTcp: {2}' ExtSecureTcp: {3}\nIntHttp: {4}' ExtHttp: {5}' IntAdvertiseAs: {6}:{7}' ExtAdvertiseAs: {8}:{9}"'  " is 164.
Long Statement,EventStore.Core.Data,GossipAdvertiseInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\GossipAdvertiseInfo.cs,ToString,The length of the statement  "                    InternalTcp' InternalSecureTcp' ExternalTcp' ExternalSecureTcp' InternalHttp' ExternalHttp' AdvertiseInternalIPAs' AdvertiseInternalHttpPortAs' AdvertiseExternalIPAs' AdvertiseExternalHttpPortAs); " is 196.
Long Statement,EventStore.Core.Index,IndexMap,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,FromFile,The length of the statement  "                    var tables = loadPTables ? LoadPTables(reader' filename' checkpoints' cacheDepth' skipIndexVerify) : new List<List<PTable>>(); " is 126.
Long Statement,EventStore.Core.Index,IndexMap,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,AddPTable,The length of the statement  "                    PTable table = PTable.MergeTo(tables[level]' filename' upgradeHash' existsAt' recordExistsAt' version' indexCacheDepth' skipIndexVerify); " is 137.
Long Statement,EventStore.Core.Index,HashListMemTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\HashListMemTable.cs,AddEntries,The length of the statement  "                _hash.AddOrUpdate(stream' list' (x' y) => { throw new Exception("This should never happen as MemTable updates are single-threaded."); }); " is 137.
Long Statement,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The length of the statement  "            using (var stream = UnbufferedFileStream.Create(_filename' FileMode.Open' FileAccess.Read' FileShare.Read' false' 4096' 4096' false' 4096)) " is 139.
Long Statement,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The length of the statement  "                                            throw new CorruptIndexException(String.Format("Index entry key for midpoint {0} (stream: {1}' version: {2}) < index entry key for midpoint {3} (stream: {4}' version: {5})"'k-1'midpoints[k-1].Key.Stream'midpoints[k-1].Key.Version'k'midpoints[k].Key.Stream'midpoints[k].Key.Version)); " is 282.
Long Statement,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The length of the statement  "                                            throw new CorruptIndexException(String.Format("Item index for midpoint {0} ({1}) > Item index for midpoint {2} ({3})"'k-1'midpoints[k-1].ItemIndex'k'midpoints[k].ItemIndex)); " is 174.
Long Statement,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The length of the statement  "                                Log.Debug("Skipping loading of cached midpoints from PTable due to count mismatch' cached midpoints: {0} / required midpoints: {1}"'_midpointsCached' midpointsCount); " is 166.
Long Statement,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The length of the statement  "                                    throw new CorruptIndexException(String.Format("Index entry key for midpoint {0} (stream: {1}' version: {2}) < index entry key for midpoint {3} (stream: {4}' version: {5})"'k-1'midpoints[k-1].Key.Stream'midpoints[k-1].Key.Version'k'midpoints[k].Key.Stream'midpoints[k].Key.Version)); " is 282.
Long Statement,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The length of the statement  "                                    throw new CorruptIndexException(String.Format("Item index for midpoint {0} ({1}) > Item index for midpoint {2} ({3})"'k-1'midpoints[k-1].ItemIndex'k'midpoints[k].ItemIndex)); " is 174.
Long Statement,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,TryGetLargestEntry,The length of the statement  "                        throw new MaybeCorruptIndexException(String.Format("Midpoint key (stream: {0}' version: {1}) > low bounds check key (stream: {2}' version: {3})"'midpointKey.Stream' midpointKey.Version' lowBoundsCheck.Stream' lowBoundsCheck.Version)); " is 234.
Long Statement,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,TryGetLargestEntry,The length of the statement  "                        throw new MaybeCorruptIndexException(String.Format("Midpoint key (stream: {0}' version: {1}) < high bounds check key (stream: {2}' version: {3})"'midpointKey.Stream' midpointKey.Version' highBoundsCheck.Stream' highBoundsCheck.Version)); " is 237.
Long Statement,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,TryGetLargestEntry,The length of the statement  "                    throw new MaybeCorruptIndexException(string.Format("candEntry ({0}@{1}) > startKey {2}' stream {3}' startNum {4}' endNum {5}' PTable: {6}."' candEntry.Stream' candEntry.Version' startKey' stream' startNumber' endNumber' Filename)); " is 231.
Long Statement,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,TryGetSmallestEntry,The length of the statement  "                        throw new MaybeCorruptIndexException(String.Format("Midpoint key (stream: {0}' version: {1}) > low bounds check key (stream: {2}' version: {3})"'midpointKey.Stream' midpointKey.Version' lowBoundsCheck.Stream' lowBoundsCheck.Version)); " is 234.
Long Statement,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,TryGetSmallestEntry,The length of the statement  "                        throw new MaybeCorruptIndexException(String.Format("Midpoint key (stream: {0}' version: {1}) < high bounds check key (stream: {2}' version: {3})"'midpointKey.Stream' midpointKey.Version' highBoundsCheck.Stream' highBoundsCheck.Version)); " is 237.
Long Statement,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,TryGetSmallestEntry,The length of the statement  "                    throw new MaybeCorruptIndexException(string.Format("candEntry ({0}@{1}) < startKey {2}' stream {3}' startNum {4}' endNum {5}' PTable: {6}."' candEntry.Stream' candEntry.Version' startKey' stream' startNumber' endNumber' Filename)); " is 231.
Long Statement,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,GetRange,The length of the statement  "                        throw new MaybeCorruptIndexException(String.Format("Midpoint key (stream: {0}' version: {1}) > low bounds check key (stream: {2}' version: {3})"'midpointKey.Stream' midpointKey.Version' lowBoundsCheck.Stream' lowBoundsCheck.Version)); " is 234.
Long Statement,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,GetRange,The length of the statement  "                        throw new MaybeCorruptIndexException(String.Format("Midpoint key (stream: {0}' version: {1}) < high bounds check key (stream: {2}' version: {3})"'midpointKey.Stream' midpointKey.Version' highBoundsCheck.Stream' highBoundsCheck.Version)); " is 237.
Long Statement,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,GetRange,The length of the statement  "                        throw new MaybeCorruptIndexException(string.Format("entry ({0}@{1}) > endKey {2}' stream {3}' startNum {4}' endNum {5}' PTable: {6}."' entry.Stream' entry.Version' startKey' stream' startNumber' endNumber' Filename)); " is 217.
Long Statement,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,FromMemtable,The length of the statement  "                        WriteMidpointsTo(bs'fs'table.Version'indexEntrySize'buffer'dumpedEntryCount'numIndexEntries'requiredMidpointCount'midpoints); " is 125.
Long Statement,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,MergeTo,The length of the statement  "                return MergeTo2(tables' numIndexEntries' indexEntrySize' outputFile' upgradeHash' existsAt' readRecord' version' cacheDepth' skipIndexVerify); // special case " is 158.
Long Statement,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,MergeTo,The length of the statement  "            var enumerators = tables.Select(table => new EnumerableTable(version' table' upgradeHash' existsAt' readRecord)).ToList(); " is 122.
Long Statement,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,MergeTo2,The length of the statement  "            var enumerators = tables.Select(table => new EnumerableTable(version' table' upgradeHash' existsAt' readRecord)).ToList(); " is 122.
Long Statement,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,WriteMidpointsTo,The length of the statement  "            if(dumpedEntryCount == numIndexEntries && requiredMidpointCount == midpoints.Count){ //if these values don't match' something is wrong " is 134.
Long Statement,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,WriteMidpointsTo,The length of the statement  "                Log.Debug("Not caching index midpoints to PTable due to count mismatch. Table entries: {0} / Dumped entries: {1}' Required midpoint count: {2} /  Actual midpoint count: {3}"' numIndexEntries' dumpedEntryCount' requiredMidpointCount' midpoints.Count); " is 250.
Long Statement,EventStore.Core.Index,PTableHeader,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTableHeader.cs,FromStream,The length of the statement  "                throw new CorruptIndexException("Couldn't read version of PTable from header."' new InvalidFileException("Invalid PTable file.")); " is 130.
Long Statement,EventStore.Core.Index,PTableFooter,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTableFooter.cs,FromStream,The length of the statement  "                throw new CorruptIndexException("Couldn't read version of PTable from footer."' new InvalidFileException("Invalid PTable file.")); " is 130.
Long Statement,EventStore.Core.Index,PTableFooter,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTableFooter.cs,FromStream,The length of the statement  "                throw new CorruptIndexException("PTable footer with version < 4 found. PTable footers are supported as from version 4."' new InvalidFileException("Invalid PTable file.")); " is 171.
Long Statement,EventStore.Core.Index,TableIndex,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,Initialize,The length of the statement  "                _indexMap = IndexMap.FromFile(indexmapFile' maxTablesPerLevel: _maxTablesPerLevel' cacheDepth: _indexCacheDepth' skipIndexVerify: _skipIndexVerify); " is 148.
Long Statement,EventStore.Core.Index,TableIndex,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,Initialize,The length of the statement  "                    throw new CorruptIndexException(String.Format("IndexMap's CommitCheckpoint ({0}) is greater than ChaserCheckpoint ({1})."' _indexMap.CommitCheckpoint' chaserCheckpoint)); " is 170.
Long Statement,EventStore.Core.Index,TableIndex,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,Initialize,The length of the statement  "                _indexMap = IndexMap.FromFile(indexmapFile' maxTablesPerLevel: _maxTablesPerLevel' cacheDepth: _indexCacheDepth' skipIndexVerify: _skipIndexVerify); " is 148.
Long Statement,EventStore.Core.Index,TableIndex,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,ReclaimMemoryIfNeeded,The length of the statement  "                var ptable = PTable.FromMemtable(memtable' _fileNameProvider.GetFilenameNewTable()' _indexCacheDepth' _skipIndexVerify); " is 120.
Long Statement,EventStore.Core.Messages,Prepare,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ElectionMessage.cs,ToString,The length of the statement  "                return string.Format("---- Prepare: serverId {0}' serverInternalHttp {1}' view {2}"' ServerId' ServerInternalHttp' View); " is 121.
Long Statement,EventStore.Core.Messages,PrepareOk,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ElectionMessage.cs,ToString,The length of the statement  "                                     "epochPosition {4}' epochId {5}' lastCommitPosition {6}' writerCheckpoint {7}' chaserCheckpoint {8}' nodePriority: {9}"' " is 120.
Long Statement,EventStore.Core.Messages,Accept,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ElectionMessage.cs,ToString,The length of the statement  "                return string.Format("---- Accept: serverId {0}' serverInternalHttp {1}' masterId {2}' masterInternalHttp {3}' view {4}"' " is 121.
Long Statement,EventStore.Core.Messages,CreateChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ReplicationMessage.cs,ToString,The length of the statement  "                return string.Format("CreateChunk message: MasterId: {0}' SubscriptionId: {1}' ChunkHeader: {2}' FileSize: {3}' IsCompletedChunk: {4}"' " is 135.
Long Statement,EventStore.Core.Messages,RawChunkBulk,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ReplicationMessage.cs,ToString,The length of the statement  "                return string.Format("RawChunkBulk message: MasterId: {0}' SubscriptionId: {1}' ChunkStartNumber: {2}' ChunkEndNumber: {3}' RawPosition: {4}' RawBytes length: {5}' CompleteChunk: {6}"' " is 184.
Long Statement,EventStore.Core.Messages,DataChunkBulk,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\ReplicationMessage.cs,ToString,The length of the statement  "                return string.Format("DataChunkBulk message: MasterId: {0}' SubscriptionId: {1}' ChunkStartNumber: {2}' ChunkEndNumber: {3}' SubscriptionPosition: {4}' DataBytes length: {5}' CompleteChunk: {6}"' " is 195.
Long Statement,EventStore.Core.Messages,WriteEvents,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,ToString,The length of the statement  "                return String.Format("WRITE: InternalCorrId: {0}' CorrelationId: {1}' EventStreamId: {2}' ExpectedVersion: {3}' Events: {4}"' " is 125.
Long Statement,EventStore.Core.Messages,WriteEventsCompleted,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,WithCorrelationId,The length of the statement  "                return new WriteEventsCompleted(newCorrId' Result' Message' FirstEventNumber' LastEventNumber' PreparePosition' CommitPosition' CurrentVersion); " is 144.
Long Statement,EventStore.Core.Messages,WriteEventsCompleted,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,ToString,The length of the statement  "                return String.Format("WRITE COMPLETED: CorrelationId: {0}' Result: {1}' Message: {2}' FirstEventNumber: {3}' LastEventNumber: {4}' CurrentVersion: {5}"' " is 152.
Long Statement,EventStore.Core.Messages,ScavengeDatabaseCompleted,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDto.cs,ToString,The length of the statement  "                return String.Format("Result: {0}' Error: {1}' TotalTime: {2}' TotalSpaceSaved: {3}"' Result' Error' TotalTime' TotalSpaceSaved); " is 129.
Long Statement,EventStore.Core.Messages,WritePrepares,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\StorageMessage.cs,ToString,The length of the statement  "                return string.Format("WRITE_PREPARES: CorrelationId: {0}' EventStreamId: {1}' ExpectedVersion: {2}' LiveUntil: {3}"' CorrelationId' EventStreamId' ExpectedVersion' LiveUntil); " is 175.
Long Statement,EventStore.Core.Messaging,MessageHierarchy,C:\repos\EventStore_EventStore\src\EventStore.Core\Messaging\Message.cs,GetMsgTypeId,The length of the statement  "            var msgTypeField = msgType.GetFields(BindingFlags.Static | BindingFlags.NonPublic).FirstOrDefault(x => x.Name == "TypeId"); " is 123.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "                ReplicationFail("Master [{0}'{1:B}] subscribed us at {2} (0x{2:X})' which is greater than our writer checkpoint {3} (0x{3:X}). REPLICATION BUG."' " is 145.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "                Log.Info("Master [{0}'{1:B}] subscribed us at {2} (0x{2:X})' which is less than our writer checkpoint {3} (0x{3:X}). TRUNCATION IS NEEDED."' " is 140.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "                    Log.Info("OFFLINE TRUNCATION IS NEEDED (SubscribedAt {0} (0x{0:X}) <= LastCommitPosition {1} (0x{1:X})). SHUTTING DOWN NODE."' message.SubscriptionPosition' lastCommitPosition); " is 177.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "                    Log.Error("Master [{0}'{1:B}] subscribed us at {2} (0x{2:X})' which is less than our last epoch and LastCommitPosition {3} (0x{3:X}) >= lastEpoch.EpochPosition {4} (0x{4:X}). That might be bad' especially if the LastCommitPosition is way beyond EpochPosition."' " is 261.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "                    Log.Error("ATTEMPT TO TRUNCATE EPOCH WITH COMMITTED RECORDS. THIS MAY BE BAD' BUT IT IS OK IF JUST-ELECTED MASTER FAILS IMMEDIATELY AFTER ITS ELECTION."); " is 154.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,AreAnyCommittedRecordsTruncatedWithLastEpoch,The length of the statement  "            return lastEpoch != null && subscriptionPosition <= lastEpoch.EpochPosition && lastCommitPosition >= lastEpoch.EpochPosition; " is 125.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "            if (_activeChunk.ChunkHeader.ChunkStartNumber != message.ChunkStartNumber || _activeChunk.ChunkHeader.ChunkEndNumber != message.ChunkEndNumber) " is 143.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "                ReplicationFail("Could not append raw bytes to chunk {0}-{1}' raw pos: {2} (0x{2:X})' bytes length: {3} (0x{3:X}). Chunk file size: {4} (0x{4:X})."' " is 148.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "                if (_activeChunk != null) ReplicationFail("Data chunk bulk received' but we have active chunk for receiving raw chunk bulks."); " is 127.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "                if (chunk.ChunkHeader.ChunkStartNumber != message.ChunkStartNumber || chunk.ChunkHeader.ChunkEndNumber != message.ChunkEndNumber) " is 129.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "                              message.ChunkStartNumber' message.ChunkEndNumber' chunk.ChunkHeader.ChunkStartNumber' chunk.ChunkHeader.ChunkEndNumber); " is 120.
Long Statement,EventStore.Core.Services,ClusterStorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ClusterStorageWriterService.cs,Handle,The length of the statement  "                    Log.Error("Received DataChunkBulk at SubscriptionPosition {0} (0x{0:X}) while current SubscriptionPosition is {1} (0x{1:X})."' " is 126.
Long Statement,EventStore.Core.Services,ElectionsService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,SendToAllExceptMe,The length of the statement  "                _publisher.Publish(new HttpMessage.SendOverHttp(server.InternalHttpEndPoint' message' DateTime.Now.Add(LeaderElectionProgressTimeout))); " is 136.
Long Statement,EventStore.Core.Services,ElectionsService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The length of the statement  "            Log.Debug("ELECTIONS: (V={0}) VIEWCHANGE FROM [{1}' {2:B}]."' message.AttemptedView' message.ServerInternalHttp' message.ServerId); " is 131.
Long Statement,EventStore.Core.Services,ElectionsService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The length of the statement  "                SendToAllExceptMe(new ElectionMessage.ViewChangeProof(_nodeInfo.InstanceId' _nodeInfo.InternalHttp' _lastInstalledView)); " is 121.
Long Statement,EventStore.Core.Services,ElectionsService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The length of the statement  "            Log.Debug("ELECTIONS: (V={0}) PREPARE FROM [{1}' {2:B}]."' _lastAttemptedView' message.ServerInternalHttp' message.ServerId); " is 125.
Long Statement,EventStore.Core.Services,ElectionsService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The length of the statement  "            _publisher.Publish(new HttpMessage.SendOverHttp(message.ServerInternalHttp' prepareOk' DateTime.Now.Add(LeaderElectionProgressTimeout))); " is 137.
Long Statement,EventStore.Core.Services,ElectionsService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,GetBestMasterCandidate,The length of the statement  "                var master = _servers.FirstOrDefault(x => x.IsAlive && x.InstanceId == _lastElectedMaster && x.State == VNodeState.Master); " is 123.
Long Statement,EventStore.Core.Services,ElectionsService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,IsLegitimateMaster,The length of the statement  "            var master = _servers.FirstOrDefault(x => x.IsAlive && x.InstanceId == _lastElectedMaster && x.State == VNodeState.Master); " is 123.
Long Statement,EventStore.Core.Services,RequestForwardingService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestForwardingService.cs,Handle,The length of the statement  "            _forwardingProxy.TryForwardReply(message.CorrelationId' message' (clientCorrId' m) => m.WithCorrelationId(clientCorrId)); " is 121.
Long Statement,EventStore.Core.Services,RequestForwardingService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestForwardingService.cs,Handle,The length of the statement  "            _forwardingProxy.TryForwardReply(message.CorrelationId' message' (clientCorrId' m) => m.WithCorrelationId(clientCorrId)); " is 121.
Long Statement,EventStore.Core.Services,RequestForwardingService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestForwardingService.cs,Handle,The length of the statement  "            _forwardingProxy.TryForwardReply(message.CorrelationId' message' (clientCorrId' m) => m.WithCorrelationId(clientCorrId)); " is 121.
Long Statement,EventStore.Core.Services,RequestForwardingService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestForwardingService.cs,Handle,The length of the statement  "            _forwardingProxy.TryForwardReply(message.CorrelationId' message' (clientCorrId' m) => m.WithCorrelationId(clientCorrId)); " is 121.
Long Statement,EventStore.Core.Services,RequestForwardingService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestForwardingService.cs,Handle,The length of the statement  "            _forwardingProxy.TryForwardReply(message.CorrelationId' message' (clientCorrId' m) => m.WithCorrelationId(clientCorrId)); " is 121.
Long Statement,EventStore.Core.Services,SubscriptionsService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,Handle,The length of the statement  "            SubscribePoller(message.StreamId' message.ExpireAt' message.LastCommitPosition' message.LastEventNumber' message.OriginalRequest); " is 130.
Long Statement,EventStore.Core.Services,HttpSendService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,Handle,The length of the statement  "                Log.Debug("Dropping HTTP send message due to TTL being over. {1} To : {0}"' message.EndPoint' message.Message.GetType().Name.ToString()); " is 137.
Long Statement,EventStore.Core.Services,HttpSendService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,Handle,The length of the statement  "            message.HttpEntityManager.BeginReply(config.Code' config.Description' config.ContentType' config.Encoding' config.Headers); " is 123.
Long Statement,EventStore.Core.Services,HttpSendService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,ForwardResponse,The length of the statement  "                    manager.ForwardReply(response' exc => Log.Debug("Error forwarding response for '{0}': {1}."' manager.RequestedUrl' exc.Message)); " is 129.
Long Statement,EventStore.Core.Services.Gossip,GossipServiceBase,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Gossip\GossipServiceBase.cs,Handle,The length of the statement  "                _bus.Publish(TimerMessage.Schedule.Create(DnsRetryTimeout' _publishEnvelope' new GossipMessage.RetrieveGossipSeedSources())); " is 125.
Long Statement,EventStore.Core.Services.Gossip,GossipServiceBase,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Gossip\GossipServiceBase.cs,OnGotGossipSeedSources,The length of the statement  "                _bus.Publish(TimerMessage.Schedule.Create(DnsRetryTimeout' _publishEnvelope' new GossipMessage.RetrieveGossipSeedSources())); " is 125.
Long Statement,EventStore.Core.Services.Gossip,GossipServiceBase,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Gossip\GossipServiceBase.cs,Handle,The length of the statement  "                _bus.Publish(new HttpMessage.SendOverHttp(node.InternalHttpEndPoint' new GossipMessage.SendGossip(_cluster' NodeInfo.InternalHttp)'  DateTime.Now.Add(GossipInterval))); " is 168.
Long Statement,EventStore.Core.Services.PersistentSubscription.ConsumerStrategy,PersistentSubscriptionConsumerStrategyRegistry,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\ConsumerStrategy\PersistentSubscriptionConsumerStrategyRegistry.cs,GetInstance,The length of the statement  "                throw new ArgumentException(string.Format("The named consumer strategy '{0}' is unknown."' namedConsumerStrategy)' "namedConsumerStrategy"); " is 140.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,MarkBeginProcessing,The length of the statement  "            StartMessage(message' _settings.MessageTimeout == TimeSpan.MaxValue ? DateTime.MaxValue : DateTime.UtcNow + _settings.MessageTimeout); " is 134.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,ParkMessage,The length of the statement  "                    Log.Error("Unable to park message {0}/{1} operation failed {2} after retries. Possible message loss."' e.OriginalStreamId' " is 122.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,TryReadingParkedMessagesFrom,The length of the statement  "            _settings.StreamReader.BeginReadEvents(_settings.ParkedMessageStream' position' count'_settings.ReadBatchSize' true' (events' newposition' isstop) => HandleParkedReadCompleted(events' newposition' isstop' stopAt)); " is 214.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionCheckpointReader,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionCheckpointReader.cs,BeginLoadState,The length of the statement  "            _ioDispatcher.ReadBackward(subscriptionStateStream' -1' 1' false' SystemAccount.Principal' new ResponseHandler(onStateLoaded).LoadStateCompleted); " is 146.
Long Statement,EventStore.Core.Services.PersistentSubscription,ResponseHandler,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionCheckpointReader.cs,LoadStateCompleted,The length of the statement  "                    var checkpoint = msg.Events.Where(v => v.Event.EventType == "SubscriptionCheckpoint").Select(x => x.Event).FirstOrDefault(); " is 124.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionCheckpointWriter,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionCheckpointWriter.cs,BeginDelete,The length of the statement  "            _ioDispatcher.DeleteStream(_subscriptionStateStream' ExpectedVersion.Any' false' SystemAccount.Principal' x=>completed(this)); " is 126.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionConfig,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionConfig.cs,FromSerializedForm,The length of the statement  "                if(ret.Version == null) throw new BadConfigDataException("Deserialized but no version present' invalid configuration data."' null); " is 131.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionMessageParker,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionMessageParker.cs,BeginParkMessage,The length of the statement  "            var metadata = new ParkedMessageMetadata {Added = DateTime.Now' Reason = reason' SubscriptionEventNumber = ev.OriginalEventNumber}; " is 131.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionMessageParker,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionMessageParker.cs,BeginParkMessage,The length of the statement  "            _ioDispatcher.WriteEvent(_parkedStreamId' ExpectedVersion.Any' parkedEvent' SystemAccount.Principal' x => WriteStateCompleted(completed' ev' x)); " is 145.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "            SaveConfiguration(() => message.Envelope.ReplyWith(new ClientMessage.CreatePersistentSubscriptionCompleted(message.CorrelationId' " is 129.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "            SaveConfiguration(() => message.Envelope.ReplyWith(new ClientMessage.UpdatePersistentSubscriptionCompleted(message.CorrelationId' " is 129.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "            SaveConfiguration(() => message.Envelope.ReplyWith(new ClientMessage.DeletePersistentSubscriptionCompleted(message.CorrelationId' " is 129.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "                message.Envelope.ReplyWith(new ClientMessage.SubscriptionDropped(message.CorrelationId' SubscriptionDropReason.AccessDenied)); " is 126.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "                message.Envelope.ReplyWith(new ClientMessage.SubscriptionDropped(message.CorrelationId' SubscriptionDropReason.NotFound)); " is 122.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "                message.Envelope.ReplyWith(new ClientMessage.SubscriptionDropped(message.CorrelationId' SubscriptionDropReason.NotFound)); " is 122.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "                message.Envelope.ReplyWith(new ClientMessage.SubscriptionDropped(message.CorrelationId' SubscriptionDropReason.SubscriberMaxCountReached)); " is 139.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "            var subscribedMessage = new ClientMessage.PersistentSubscriptionConfirmation(key' message.CorrelationId' lastCommitPos' lastEventNumber); " is 137.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "            subscription.AddClient(message.CorrelationId' message.ConnectionId' message.Envelope' message.AllowedInFlightMessages'name'message.From); " is 137.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "                subscription.NotAcknowledgeMessagesProcessed(message.CorrelationId' message.ProcessedEventIds' (NakAction) message.Action' message.Message); " is 140.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,HandleLoadCompleted,The length of the statement  "                                Log.Error("A persistent subscription exists with an invalid consumer strategy '{0}'. Ignoring it."' entry.NamedConsumerStrategy); " is 129.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,HandleLoadCompleted,The length of the statement  "                    throw new Exception(readStreamEventsBackwardCompleted.Result + " is an unexpected result writing subscription configuration."); " is 127.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,SaveConfiguration,The length of the statement  "            _ioDispatcher.WriteEvent(SystemStreams.PersistentSubscriptionConfig' ExpectedVersion.Any' ev' SystemAccount.Principal' x => HandleSaveConfigurationCompleted(continueWith' x)); " is 175.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,Handle,The length of the statement  "            var stats = (from subscription in _subscriptionTopics.Values from sub in subscription select sub.GetStatistics()).ToList(); " is 123.
Long Statement,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionStats,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionStats.cs,GetStatistics,The length of the statement  "                var connAvgItemsPerSecond = lastRunMs.Ticks != 0 ? (int)(TimeSpan.TicksPerSecond * connLastItems / lastRunMs.Ticks) : 0; " is 120.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,Handle,The length of the statement  "            _publisher.Publish(new SystemMessage.VNodeConnectionEstablished(message.ReplicaEndPoint' message.Connection.ConnectionId)); " is 123.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,Handle,The length of the statement  "                    Log.Error("There is already a subscription with SubscriptionID {0:B}: {1}."' subscription.SubscriptionId' existingSubscr); " is 122.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,Handle,The length of the statement  "                    subscription.SendBadRequestAndClose(message.CorrelationId' string.Format("There is already a subscription with SubscriptionID {0:B}: {1}.\nSubscription we tried to add: {2}"' " is 174.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,Handle,The length of the statement  "                        var stats = new ReplicationMessage.ReplicationStats(subscription.Key' tcpConn.ConnectionId' subscription.Value.ReplicaEndPoint.ToString()' tcpConn.SendQueueSize' " is 161.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,SubscribeReplica,The length of the statement  "                replica.SendBadRequestAndClose(correlationId' string.Format("Exception while subscribing replica. Connection will be dropped. Error: {0}"' exc.Message)); " is 153.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,GetValidLogPosition,The length of the statement  "                Log.Error("No common epoch found for replica [{0}'S{1}'{2}(0x{2:X})'{3}]. Subscribing at 0. Master LogPosition: {4} (0x{4:X})' known epochs: {5}."' " is 147.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,SetSubscriptionPosition,The length of the statement  "                Debug.Assert(chunk != null' string.Format("Chunk for LogPosition {0} (0x{0:X}) is null in MasterReplicationService! Replica: [{1}'C:{2}'S:{3}]"' " is 144.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,SetSubscriptionPosition,The length of the statement  "                        Log.Info("Subscribed replica [{0}'S:{1}] for data send at {2} (0x{2:X})."' sub.ReplicaEndPoint' sub.SubscriptionId' logPosition); " is 129.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,MainLoop,The length of the statement  "                    _flushSignal.Reset(); // Reset the flush signal as we're about to read anyway. This could be closer to the actual read but no harm from too many checks. " is 152.
Long Statement,EventStore.Core.Services.Replication,MasterReplicationService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,TrySendLogBulk,The length of the statement  "                        throw new Exception(string.Format("Replication invariant failure. SubscriptionPosition {0}' bulkResult.OldPosition {1}"' " is 120.
Long Statement,EventStore.Core.Services.Replication,ReplicaService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\ReplicaService.cs,GetMasterEndPoint,The length of the statement  "                Log.Error("Internal secure connections are required' but no internal secure TCP end point is specified for master [{0}]!"' master); " is 131.
Long Statement,EventStore.Core.Services.Replication,ReplicaService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\ReplicaService.cs,Handle,The length of the statement  "            if (chunk == null) throw new Exception(string.Format("Chunk was null during subscribing at {0} (0x{0:X})."' logPosition)); " is 122.
Long Statement,EventStore.Core.Services.Storage.EpochManager,EpochManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\EpochManager\EpochManager.cs,WriteEpochRecordWithRetry,The length of the statement  "            var rec = new SystemLogRecord(epoch.EpochPosition' epoch.TimeStamp' SystemRecordType.Epoch' SystemRecordSerialization.Json' epoch.AsSerialized()); " is 146.
Long Statement,EventStore.Core.Services.Storage.EpochManager,EpochManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\EpochManager\EpochManager.cs,WriteEpochRecordWithRetry,The length of the statement  "                rec = new SystemLogRecord(epoch.EpochPosition' epoch.TimeStamp' SystemRecordType.Epoch' SystemRecordSerialization.Json' epoch.AsSerialized()); " is 142.
Long Statement,EventStore.Core.Services.Storage.EpochManager,EpochManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\EpochManager\EpochManager.cs,WriteEpochRecordWithRetry,The length of the statement  "            Log.Debug("=== Writing E{0}@{1}:{2:B} (previous epoch at {3})."' epochNumber' epoch.EpochPosition' epochId' lastEpochPosition); " is 127.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Init,The length of the statement  "                throw new Exception(string.Format("_lastCommitPosition {0} >= buildToPosition {1}"' _lastCommitPosition' buildToPosition)); " is 123.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Init,The length of the statement  "                Log.Debug("ReadIndex rebuilding done: total processed {0} records' time elapsed: {1}."' processed' DateTime.UtcNow - startTime); " is 128.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Commit,The length of the statement  "                        throw new Exception(string.Format("Expected stream: {0}' actual: {1}. LogPosition: {2}"' streamId' prepare.EventStreamId' commit.LogPosition)); " is 143.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Commit,The length of the statement  "            if (Interlocked.CompareExchange(ref _lastCommitPosition' newLastCommitPosition' lastCommitPosition) != lastCommitPosition) " is 122.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Commit,The length of the statement  "                throw new Exception("Concurrency error in ReadIndex.Commit: _lastCommitPosition was modified during Commit execution!"); " is 120.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Commit,The length of the statement  "            if (Interlocked.CompareExchange(ref _lastCommitPosition' newLastCommitPosition' lastCommitPosition) != lastCommitPosition) " is 122.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Commit,The length of the statement  "                throw new Exception("Concurrency error in ReadIndex.Commit: _lastCommitPosition was modified during Commit execution!"); " is 120.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,ReadEventInternal,The length of the statement  "                return new IndexReadEventResult(ReadEventResult.Success' new EventRecord(eventNumber' prepare)' metadata' lastEventNumber' originalStreamExists); " is 145.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,ReadEventInternal,The length of the statement  "            return new IndexReadEventResult(ReadEventResult.NotFound' metadata' lastEventNumber' originalStreamExists: originalStreamExists); " is 129.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,ReadStreamEventsForwardInternal,The length of the statement  "                    return new IndexReadStreamResult(fromEventNumber' maxCount' ReadStreamResult.StreamDeleted' StreamMetadata.Empty' lastEventNumber); " is 131.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,ReadStreamEventsBackwardInternal,The length of the statement  "                    return new IndexReadStreamResult(fromEventNumber' maxCount' ReadStreamResult.StreamDeleted' StreamMetadata.Empty' lastEventNumber); " is 131.
Long Statement,EventStore.Core.Services.Storage.ReaderIndex,IndexReader,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexReader.cs,GetStreamLastEventNumberUncached,The length of the statement  "            foreach (var indexEntry in _tableIndex.GetRange(streamId' startVersion' long.MaxValue' limit: _hashCollisionReadLimit + 1)) " is 123.
Long Statement,EventStore.Core.Services.RequestManager.Managers,DeleteStreamTwoPhaseRequestManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\DeleteStreamTwoPhaseRequestManager.cs,CompleteSuccessRequest,The length of the statement  "            var responseMsg = new ClientMessage.DeleteStreamCompleted(ClientCorrId' OperationResult.Success' null' preparePosition' commitPosition); " is 136.
Long Statement,EventStore.Core.Services.RequestManager.Managers,SingleAckRequestManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\SingleAckRequestManager.cs,Handle,The length of the statement  "                _publishEnvelope' _internalCorrId' request.EventStreamId' null' StreamAccessType.Write' request.User' _betterOrdering)); " is 120.
Long Statement,EventStore.Core.Services.RequestManager.Managers,SingleAckRequestManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\SingleAckRequestManager.cs,Handle,The length of the statement  "                throw new Exception(string.Format("TransactionStart request manager invariant violation: reqType: {0}' req: {1}."' _requestType' _request)); " is 140.
Long Statement,EventStore.Core.Services.RequestManager.Managers,SingleAckRequestManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\SingleAckRequestManager.cs,Handle,The length of the statement  "            _bus.Publish(new StorageMessage.WriteTransactionData(_internalCorrId' _publishEnvelope' _transactionId' request.Events)); " is 121.
Long Statement,EventStore.Core.Services.RequestManager.Managers,SingleAckRequestManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\SingleAckRequestManager.cs,Handle,The length of the statement  "                throw new Exception(string.Format("Unexpected PrepareAck with flags [{0}] arrived (LogPosition: {1}' InternalCorrId: {2:B}' ClientCorrId: {3:B})."' " is 147.
Long Statement,EventStore.Core.Services.RequestManager.Managers,SingleAckRequestManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\SingleAckRequestManager.cs,CompleteSuccessRequest,The length of the statement  "                    responseMsg = new ClientMessage.TransactionStartCompleted(_clientCorrId' _transactionId' OperationResult.Success' null); " is 120.
Long Statement,EventStore.Core.Services.RequestManager.Managers,SingleAckRequestManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\SingleAckRequestManager.cs,CompleteSuccessRequest,The length of the statement  "                    responseMsg = new ClientMessage.TransactionWriteCompleted(_clientCorrId' _transactionId' OperationResult.Success' null); " is 120.
Long Statement,EventStore.Core.Services.RequestManager.Managers,TransactionCommitTwoPhaseRequestManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\TransactionCommitTwoPhaseRequestManager.cs,CompleteSuccessRequest,The length of the statement  "            var responseMsg = new ClientMessage.TransactionCommitCompleted(ClientCorrId' _transactionId' firstEventNumber' lastEventNumber' preparePosition' commitPosition); " is 161.
Long Statement,EventStore.Core.Services.RequestManager.Managers,WriteStreamTwoPhaseRequestManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\Managers\WriteStreamTwoPhaseRequestManager.cs,CompleteSuccessRequest,The length of the statement  "            ResponseEnvelope.ReplyWith(new ClientMessage.WriteEventsCompleted(ClientCorrId' firstEventNumber' lastEventNumber' preparePosition' commitPosition)); " is 149.
Long Statement,EventStore.Core.Services.Monitoring,SystemStatsHelper,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetSystemStats,The length of the statement  "                Func<string' string' string> driveStat = (diskName' stat) => string.Format("sys-drive-{0}-{1}"' diskName.Replace("\\"'"").Replace(":"'"")' stat); " is 145.
Long Statement,EventStore.Core.Services.Monitoring,SystemStatsHelper,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetSystemStats,The length of the statement  "                stats[queueStat(queue.Name' "currentIdleTime")] = queue.CurrentIdleTime.HasValue ? queue.CurrentIdleTime.Value.ToString("G"' CultureInfo.InvariantCulture) : null; " is 162.
Long Statement,EventStore.Core.Services.Monitoring,SystemStatsHelper,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetSystemStats,The length of the statement  "                stats[queueStat(queue.Name' "currentItemProcessingTime")] = queue.CurrentItemProcessingTime.HasValue ? queue.CurrentItemProcessingTime.Value.ToString("G"' CultureInfo.InvariantCulture) : null; " is 192.
Long Statement,EventStore.Core.Services.Monitoring,SystemStatsHelper,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetSystemStats,The length of the statement  "                stats[queueStat(queue.Name' "inProgressMessage")] = queue.InProgressMessageType != null ? queue.InProgressMessageType.Name : "<none>"; " is 134.
Long Statement,EventStore.Core.Services.Monitoring,SystemStatsHelper,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetSystemStats,The length of the statement  "                stats[queueStat(queue.Name' "lastProcessedMessage")] = queue.LastProcessedMessageType != null ? queue.LastProcessedMessageType.Name : "<none>"; " is 143.
Long Statement,EventStore.Core.Services.Monitoring,SystemStatsHelper,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetPerfCounterInformation,The length of the statement  "                stats["proc-cpuScaled"] = new StatMetadata(procCpuUsage / Environment.ProcessorCount' "Process"' "Process Cpu Usage Scaled by Logical Processor Count"); " is 152.
Long Statement,EventStore.Core.Services.Monitoring,SystemStatsHelper,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetFreeMemOnBSD,The length of the statement  "                var sysctl = ShellExecutor.GetOutput("sysctl"' "-n hw.physmem hw.pagesize vm.stats.vm.v_free_count vm.stats.vm.v_cache_count vm.stats.vm.v_inactive_count"); " is 156.
Long Statement,EventStore.Core.Services.Monitoring,MonitoringService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\MonitoringService.cs,Handle,The length of the statement  "                    Log.Debug("Failed to create stats stream '{0}'. Reason : {1}({2}). Retrying..."' _nodeStatsStream' message.Result' message.Message); " is 132.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,Handle,The length of the statement  "                Log.Debug("Read Event operation has expired for Stream: {0}' Event Number: {1}. Operation Expired at {2}"' msg.EventStreamId' msg.EventNumber' msg.Expires); " is 156.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,Handle,The length of the statement  "                Log.Debug("Read Stream Events Forward operation has expired for Stream: {0}' From Event Number: {1}' Max Count: {2}. Operation Expired at {3}"' msg.EventStreamId' msg.FromEventNumber' msg.MaxCount' msg.Expires); " is 211.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,Handle,The length of the statement  "                Log.Debug("Read Stream Events Backward operation has expired for Stream: {0}' From Event Number: {1}' Max Count: {2}. Operation Expired at {3}"' msg.EventStreamId' msg.FromEventNumber' msg.MaxCount' msg.Expires); " is 212.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,Handle,The length of the statement  "                Log.Debug("Read All Stream Events Forward operation has expired for C:{0}/P:{1}. Operation Expired at {2}"' msg.CommitPosition' msg.PreparePosition' msg.Expires); " is 162.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,Handle,The length of the statement  "                Log.Debug("Read All Stream Events Backward operation has expired for C:{0}/P:{1}. Operation Expired at {2}"' msg.CommitPosition' msg.PreparePosition' msg.Expires); " is 163.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,Handle,The length of the statement  "                Log.Debug("Check Stream Access operation has expired for Stream: {0}. Operation Expired at {1}"' msg.EventStreamId' msg.Expires); " is 129.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,CheckStreamAccess,The length of the statement  "                return new StorageMessage.CheckStreamAccessCompleted(msg.CorrelationId' streamId' msg.TransactionId' msg.AccessType' result); " is 125.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,CheckStreamAccess,The length of the statement  "                Log.ErrorException(exc' "Error during processing CheckStreamAccess({0}' {1}) request."' msg.EventStreamId' msg.TransactionId); " is 126.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,NoData,The length of the statement  "            return new ClientMessage.ReadEventCompleted(msg.CorrelationId' msg.EventStreamId' result' ResolvedEvent.EmptyEvent' null' false' error); " is 136.
Long Statement,EventStore.Core.Services.Storage,StorageReaderWorker,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,CheckEventsOrder,The length of the statement  "                    throw new Exception(string.Format("Invalid order of events has been detected in read index for the event stream '{0}'. " " is 120.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,Scavenge,The length of the statement  "                if (message.User == null || (!message.User.IsInRole(SystemRoles.Admins) && !message.User.IsInRole(SystemRoles.Operations))) " is 123.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeIndexInitializedEvent,The length of the statement  "                    Log.Error("Failed to write the $maxAge of {0} days metadata for the {1} stream. Reason: {2}"' _scavengeHistoryMaxAge' SystemStreams.ScavengesStream' m.Result); " is 159.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeIndexInitializedEvent,The length of the statement  "            _ioDispatcher.WriteEvent(SystemStreams.ScavengesStream' ExpectedVersion.NoStream' indexInitializedEvent' SystemAccount.Principal' m => { " is 136.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeIndexInitializedEvent,The length of the statement  "                    Log.Error("Failed to write the {0} event to the {1} stream. Reason: {2}"' SystemEventTypes.ScavengeIndexInitialized' SystemStreams.ScavengesStream' m.Result); " is 158.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeStartedEvent,The length of the statement  "                    Log.Error("Failed to write the $maxAge of {0} days metadata for the {1} stream. Reason: {2}"' _scavengeHistoryMaxAge' streamName' m.Result); " is 140.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeStartedEvent,The length of the statement  "            var scavengeStartedEvent = new Event(Guid.NewGuid()' SystemEventTypes.ScavengeStarted' true' new Dictionary<string' object>{ " is 124.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeCompletedEvent,The length of the statement  "            var scavengeCompletedEvent = new Event(Guid.NewGuid()' SystemEventTypes.ScavengeCompleted' true' new Dictionary<string' object>{ " is 128.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeDetailEvent,The length of the statement  "            _ioDispatcher.WriteEvent(streamId' ExpectedVersion.Any' eventToWrite' SystemAccount.Principal' x => WriteScavengeDetailEventCompleted(x' eventToWrite' streamId' retryCount)); " is 174.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeIndexEvent,The length of the statement  "            _ioDispatcher.WriteEvent(SystemStreams.ScavengesStream' ExpectedVersion.Any' linkToEvent' SystemAccount.Principal' m => WriteScavengeIndexEventCompleted(m' linkToEvent' retryCount)); " is 182.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeIndexEventCompleted,The length of the statement  "                    Log.Error("Failed to write an event to the {0} stream. Retrying {1}/{2}. Reason: {3}"' SystemStreams.ScavengesStream' (MaxRetryCount - retryCount) + 1' MaxRetryCount' msg.Result); " is 179.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeIndexEventCompleted,The length of the statement  "                    Log.Error("Failed to write an event to the {0} stream. Retry limit of {1} reached. Reason: {2}"' SystemStreams.ScavengesStream' MaxRetryCount' msg.Result); " is 155.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeDetailEventCompleted,The length of the statement  "                    Log.Error("Failed to write an event to the {0} stream. Retrying {1}/{2}. Reason: {3}"' streamId' (MaxRetryCount - retryCount) + 1' MaxRetryCount' msg.Result); " is 158.
Long Statement,EventStore.Core.Services.Storage,StorageScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageScavenger.cs,WriteScavengeDetailEventCompleted,The length of the statement  "                    Log.Error("Failed to write an event to the {0} stream. Retry limit of {1} reached. Reason: {2}"' streamId' MaxRetryCount' msg.Result); " is 134.
Long Statement,EventStore.Core.Services.Storage,StorageChaser,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageChaser.cs,ChaserIteration,The length of the statement  "            _flushSignal.Reset(); // Reset the flush signal just before a read to reduce pointless reads from [flush flush read] patterns. " is 126.
Long Statement,EventStore.Core.Services.Storage,StorageChaser,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageChaser.cs,ProcessCommitRecord,The length of the statement  "            _masterBus.Publish(new StorageMessage.CommitAck(record.CorrelationId' record.LogPosition' record.TransactionPosition' firstEventNumber' lastEventNumber' true)); " is 160.
Long Statement,EventStore.Core.Services.Transport.Http.Authentication,HttpAuthenticationProvider,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Authentication\HttpAuthenticationProvider.cs,ReplyNotYetAvailable,The length of the statement  "            manager.ReplyStatus(HttpStatusCode.ServiceUnavailable' "Not yet ready."' exception => { }' new [] {new KeyValuePair<string' string>("Retry-After"' "5") }); " is 155.
Long Statement,EventStore.Core.Services.Transport.Http.Authentication,PasswordChangeNotificationReader,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Authentication\PasswordChangeNotificationReader.cs,ReadNotificationsFrom,The length of the statement  "                                _log.Error("Failed to read: " + UserManagementService.UserPasswordNotificationsStreamId + " completed.Result=" + completed.Result.ToString()); " is 142.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,ElectController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ElectController.cs,SubscribeCore,The length of the statement  "            service.RegisterAction(new ControllerAction("/elections/viewchange"' HttpMethod.Post' SupportedCodecs' SupportedCodecs)' OnPostViewChange); " is 139.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,ElectController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ElectController.cs,SubscribeCore,The length of the statement  "            service.RegisterAction(new ControllerAction("/elections/viewchangeproof"' HttpMethod.Post' SupportedCodecs' SupportedCodecs)' OnPostViewChangeProof); " is 149.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,ElectController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ElectController.cs,SubscribeCore,The length of the statement  "            service.RegisterAction(new ControllerAction("/elections/prepare"' HttpMethod.Post' SupportedCodecs' SupportedCodecs)' OnPostPrepare); " is 133.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,ElectController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ElectController.cs,SubscribeCore,The length of the statement  "            service.RegisterAction(new ControllerAction("/elections/prepareok"' HttpMethod.Post' SupportedCodecs' SupportedCodecs)' OnPostPrepareOk); " is 137.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,ElectController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ElectController.cs,SubscribeCore,The length of the statement  "            service.RegisterAction(new ControllerAction("/elections/proposal"' HttpMethod.Post' SupportedCodecs' SupportedCodecs)' OnPostProposal); " is 135.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,ElectController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ElectController.cs,SubscribeCore,The length of the statement  "            service.RegisterAction(new ControllerAction("/elections/accept"' HttpMethod.Post' SupportedCodecs' SupportedCodecs)' OnPostAccept); " is 131.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,GossipController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\GossipController.cs,SubscribeCore,The length of the statement  "                service.RegisterAction(new ControllerAction("/gossip"' HttpMethod.Post' SupportedCodecs' SupportedCodecs)' OnPostGossip); " is 121.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,GossipController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\GossipController.cs,OnPostGossip,The length of the statement  "            entity.ReadTextRequestAsync(OnPostGossipRequestRead' e => Log.Debug("Error while reading request (gossip): {0}"' e.Message)); " is 125.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,HistogramController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\HistogramController.cs,Subscribe,The length of the statement  "            service.RegisterAction(new ControllerAction("/histogram/{name}"' HttpMethod.Get' Codec.NoCodecs' SupportedCodecs)' OnGetHistogram); " is 131.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,HttpHelpers,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\HttpHelpers.cs,Reply,The length of the statement  "            http.Reply(Helper.UTF8NoBom.GetBytes(response)' code' description' contentType' Helper.UTF8NoBom' headers' exception => { }); " is 125.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,InfoController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\InfoController.cs,Subscribe,The length of the statement  "            service.RegisterAction(new ControllerAction("/info/options"' HttpMethod.Get' Codec.NoCodecs' SupportedCodecs)' OnGetOptions); " is 125.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,InfoController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\InfoController.cs,GetOptionsInfo,The length of the statement  "                var argumentDescriptionAttribute = property.HasAttr<ArgDescriptionAttribute>() ? property.Attr<ArgDescriptionAttribute>() : null; " is 129.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,InfoController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\InfoController.cs,Filter,The length of the statement  "                        Value = namesOfValuesToExclude.Contains(y => y.Equals(x.Name' StringComparison.OrdinalIgnoreCase)) ? String.Empty : x.Value " is 123.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscribeCore,The length of the statement  "            Register(service' "/subscriptions/{stream}"' HttpMethod.Get' GetSubscriptionInfoForStream' Codec.NoCodecs' DefaultCodecs); " is 122.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscribeCore,The length of the statement  "            Register(service' "/subscriptions/{stream}/{subscription}"' HttpMethod.Put' PutSubscription' DefaultCodecs' DefaultCodecs); " is 123.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscribeCore,The length of the statement  "            Register(service' "/subscriptions/{stream}/{subscription}"' HttpMethod.Post' PostSubscription' DefaultCodecs' DefaultCodecs); " is 125.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscribeCore,The length of the statement  "            Register(service' "/subscriptions/{stream}/{subscription}"' HttpMethod.Get' GetNextNMessages' Codec.NoCodecs' AtomCodecs); " is 122.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscribeCore,The length of the statement  "            Register(service' "/subscriptions/{stream}/{subscription}?embed={embed}"' HttpMethod.Get' GetNextNMessages' Codec.NoCodecs' AtomCodecs); " is 136.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscribeCore,The length of the statement  "            Register(service' "/subscriptions/{stream}/{subscription}/{count}?embed={embed}"' HttpMethod.Get' GetNextNMessages' Codec.NoCodecs' AtomCodecs); " is 144.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscribeCore,The length of the statement  "            Register(service' "/subscriptions/{stream}/{subscription}/info"' HttpMethod.Get' GetSubscriptionInfo' Codec.NoCodecs' DefaultCodecs); " is 133.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscribeCore,The length of the statement  "            RegisterUrlBased(service' "/subscriptions/{stream}/{subscription}/nack/{messageid}?action={action}"' HttpMethod.Post' NackMessage); " is 131.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscribeCore,The length of the statement  "            RegisterUrlBased(service' "/subscriptions/{stream}/{subscription}/nack?ids={messageids}&action={action}"' HttpMethod.Post' NackMessages); " is 137.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscribeCore,The length of the statement  "            RegisterUrlBased(service' "/subscriptions/{stream}/{subscription}/replayParked"' HttpMethod.Post' ReplayParkedMessages); " is 120.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,ReplayParkedMessages,The length of the statement  "            var cmd = new ClientMessage.ReplayAllParkedMessages(Guid.NewGuid()' Guid.NewGuid()' envelope' stream' groupname' http.User); " is 124.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,PutSubscription,The length of the statement  "                        http.ResponseCodec.Encoding' new KeyValuePair<string' string>("location"' MakeUrl(http' "/subscriptions/" + stream + "/" + groupname))); " is 136.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,PostSubscription,The length of the statement  "                        http.ResponseCodec.Encoding' new KeyValuePair<string' string>("location"' MakeUrl(http' "/subscriptions/" + stream + "/" + groupname))); " is 136.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,DeleteSubscription,The length of the statement  "            var cmd = new ClientMessage.DeletePersistentSubscription(Guid.NewGuid()' Guid.NewGuid()' envelope' stream' groupname' http.User); " is 129.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,GetAllSubscriptionInfo,The length of the statement  "                (args' message) => http.ResponseCodec.To(ToSummaryDto(http' message as MonitoringMessage.GetPersistentSubscriptionStatsCompleted).ToArray())' " is 141.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,GetSubscriptionInfoForStream,The length of the statement  "                (args' message) => http.ResponseCodec.To(ToSummaryDto(http' message as MonitoringMessage.GetPersistentSubscriptionStatsCompleted).ToArray())' " is 141.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,GetSubscriptionInfo,The length of the statement  "                (args' message) => http.ResponseCodec.To(ToDto(http' message as MonitoringMessage.GetPersistentSubscriptionStatsCompleted).FirstOrDefault())' " is 141.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,GetNextNMessages,The length of the statement  "                (args' message) => Format.ReadNextNPersistentMessagesCompleted(http' message as ClientMessage.ReadNextNPersistentMessagesCompleted' stream' groupname' count' embed)' " is 165.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,ToDto,The length of the statement  "                        new RelLink(MakeUrl(manager' string.Format("/subscriptions/{0}/{1}/info"' escapedStreamId' escapedGroupName))' "detail")' " is 121.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,ToDto,The length of the statement  "                        new RelLink(MakeUrl(manager' string.Format("/subscriptions/{0}/{1}/replayParked"' escapedStreamId' escapedGroupName))' "replayParked") " is 134.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,ToDto,The length of the statement  "                    GetMessagesUri = MakeUrl(manager' string.Format("/subscriptions/{0}/{1}/{2}"' escapedStreamId' escapedGroupName' DefaultNumberOfMessagesToGet))' " is 144.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,ToSummaryDto,The length of the statement  "                        new RelLink(MakeUrl(manager' string.Format("/subscriptions/{0}/{1}/info"' escapedStreamId' escapedGroupName))' "detail")' " is 121.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,ToSummaryDto,The length of the statement  "                    GetMessagesUri = MakeUrl(manager' string.Format("/subscriptions/{0}/{1}/{2}"' escapedStreamId' escapedGroupName' DefaultNumberOfMessagesToGet))' " is 144.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,UsersController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\UsersController.cs,SubscribeCore,The length of the statement  "            Register(service' "/users/{login}/command/reset-password"' HttpMethod.Post' PostCommandResetPassword' DefaultCodecs' DefaultCodecs); " is 132.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,UsersController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\UsersController.cs,SubscribeCore,The length of the statement  "            Register(service' "/users/{login}/command/change-password"' HttpMethod.Post' PostCommandChangePassword' DefaultCodecs' DefaultCodecs); " is 134.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,UsersController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\UsersController.cs,GetUsers,The length of the statement  "                (UserManagementMessage.AllUserDetailsResult msg) => new UserManagementMessage.AllUserDetailsResultHttpFormatted(msg' s => MakeUrl(http' s))); " is 141.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,UsersController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\UsersController.cs,GetUser,The length of the statement  "                (UserManagementMessage.UserDetailsResult msg) => new UserManagementMessage.UserDetailsResultHttpFormatted(msg' s => MakeUrl(http' s))); " is 135.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AdminController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AdminController.cs,SubscribeCore,The length of the statement  "            service.RegisterAction(new ControllerAction("/admin/shutdown"' HttpMethod.Post' Codec.NoCodecs' SupportedCodecs)' OnPostShutdown); " is 130.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AdminController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AdminController.cs,SubscribeCore,The length of the statement  "            service.RegisterAction(new ControllerAction("/admin/scavenge"' HttpMethod.Post' Codec.NoCodecs' SupportedCodecs)' OnPostScavenge); " is 130.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,StatController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\StatController.cs,SubscribeCore,The length of the statement  "            service.RegisterAction(new ControllerAction("/stats"' HttpMethod.Get' Codec.NoCodecs' SupportedCodecs)' OnGetFreshStats); " is 121.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,StatController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\StatController.cs,SubscribeCore,The length of the statement  "            service.RegisterAction(new ControllerAction("/stats/replication"' HttpMethod.Get' Codec.NoCodecs' SupportedCodecs)' OnGetReplicationStats); " is 139.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,StatController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\StatController.cs,SubscribeCore,The length of the statement  "            service.RegisterAction(new ControllerAction("/stats/tcp"' HttpMethod.Get' Codec.NoCodecs' SupportedCodecs)' OnGetTcpConnectionStats); " is 133.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,StatController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\StatController.cs,SubscribeCore,The length of the statement  "            service.RegisterAction(new ControllerAction("/stats/{*statPath}"' HttpMethod.Get' Codec.NoCodecs' SupportedCodecs)' OnGetFreshStats); " is 133.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "            Register(http' "/streams/{stream}/incoming/{guid}"' HttpMethod.Post' PostEventsIdempotent' AtomCodecsWithoutBatches' AtomCodecsWithoutBatches); " is 143.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "            Register(http' "/streams/{stream}?embed={embed}"' HttpMethod.Get' GetStreamEventsBackward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 127.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "            Register(http' "/streams/{stream}/{event}?embed={embed}"' HttpMethod.Get' GetStreamEvent' Codec.NoCodecs' DefaultCodecs); " is 121.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "            Register(http' "/streams/{stream}/{event}/{count}?embed={embed}"' HttpMethod.Get' GetStreamEventsBackward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 143.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "            Register(http' "/streams/{stream}/{event}/backward/{count}?embed={embed}"' HttpMethod.Get' GetStreamEventsBackward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 152.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "            RegisterCustom(http' "/streams/{stream}/{event}/forward/{count}?embed={embed}"' HttpMethod.Get' GetStreamEventsForward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 156.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "            Register(http' "/streams/{stream}/metadata?embed={embed}"' HttpMethod.Get' GetMetastreamEvent' Codec.NoCodecs' DefaultCodecs); " is 126.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "            Register(http' "/streams/{stream}/metadata/?embed={embed}"' HttpMethod.Get' RedirectKeepVerb' Codec.NoCodecs' DefaultCodecs); " is 125.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "            Register(http' "/streams/{stream}/metadata/{event}?embed={embed}"' HttpMethod.Get' GetMetastreamEvent' Codec.NoCodecs' DefaultCodecs); " is 134.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "            Register(http' "/streams/{stream}/metadata/{event}/{count}?embed={embed}"' HttpMethod.Get' GetMetastreamEventsBackward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 156.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "            Register(http' "/streams/{stream}/metadata/{event}/backward/{count}?embed={embed}"' HttpMethod.Get' GetMetastreamEventsBackward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 165.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "            RegisterCustom(http' "/streams/{stream}/metadata/{event}/forward/{count}?embed={embed}"' HttpMethod.Get' GetMetastreamEventsForward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 169.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "            Register(http' "/streams/$all?embed={embed}"' HttpMethod.Get' GetAllEventsBackward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 120.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "            Register(http' "/streams/$all/{position}/{count}?embed={embed}"' HttpMethod.Get' GetAllEventsBackward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 139.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "            Register(http' "/streams/$all/{position}/backward/{count}?embed={embed}"' HttpMethod.Get' GetAllEventsBackward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 148.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "            RegisterCustom(http' "/streams/$all/{position}/forward/{count}?embed={embed}"' HttpMethod.Get' GetAllEventsForward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 152.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "            Register(http' "/streams/%24all?embed={embed}"' HttpMethod.Get' GetAllEventsBackward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 122.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "            Register(http' "/streams/%24all/{position}/{count}?embed={embed}"' HttpMethod.Get' GetAllEventsBackward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 141.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "            Register(http' "/streams/%24all/{position}/backward/{count}?embed={embed}"' HttpMethod.Get' GetAllEventsBackward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 150.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,SubscribeCore,The length of the statement  "            RegisterCustom(http' "/streams/%24all/{position}/forward/{count}?embed={embed}"' HttpMethod.Get' GetAllEventsForward' Codec.NoCodecs' AtomWithHtmlCodecs); " is 154.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetDescriptionDocument,The length of the statement  "                var accepts = manager.HttpEntity.Request.AcceptTypes == null || manager.HttpEntity.Request.AcceptTypes.Contains(ContentType.Any); " is 129.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetDescriptionDocument,The length of the statement  "                var responseMessage = manager.HttpEntity.Request.AcceptTypes == null ? "We are unable to represent the stream in the format requested." : "Description Document"; " is 161.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetDescriptionDocument,The length of the statement  "                    (args' message) => new ResponseConfiguration(HttpStatusCode.OK' manager.ResponseCodec.ContentType' manager.ResponseCodec.Encoding)); " is 132.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,PostEvents,The length of the statement  "                manager.ReplyTextContent("Forwarding to idempotent URI"' HttpStatusCode.RedirectKeepVerb' "Temporary Redirect"' "text/plain"' header' e => { }); " is 144.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,DeleteStream,The length of the statement  "            var envelope = new SendToHttpEnvelope(_networkSendQueue' manager' Format.DeleteStreamCompleted' Configure.DeleteStreamCompleted); " is 129.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,DeleteStream,The length of the statement  "            Publish(new ClientMessage.DeleteStream(corrId' corrId' envelope' requireMaster' stream' expectedVersion' hardDelete' manager.User)); " is 132.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetStreamEventsForward,The length of the statement  "            GetStreamEventsForward(manager' stream' eventNumber' count' resolveLinkTos' requireMaster' etag' longPollTimeout' embed); " is 121.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,PostMetastreamEvent,The length of the statement  "                SendBadRequest(manager' string.Format("Invalid request. Stream must be non-empty string and should not be metastream")); " is 120.
Long Statement,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetStreamEvent,The length of the statement  "            Publish(new ClientMessage.ReadEvent(corrId' corrId' envelope' stream' eventNumber' resolveLinkTos' requireMaster' manager.User)); " is 129.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,TemporaryRedirect,The length of the statement  "            var srcBase = new Uri(string.Format("{0}://{1}:{2}/"' originalUrl.Scheme' originalUrl.Host' originalUrl.Port)' UriKind.Absolute); " is 129.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,TemporaryRedirect,The length of the statement  "            var targetBase = new Uri(string.Format("{0}://{1}:{2}/"' originalUrl.Scheme' targetHost' targetPort)' UriKind.Absolute); " is 120.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,TemporaryRedirect,The length of the statement  "            return new ResponseConfiguration(HttpStatusCode.TemporaryRedirect' "Temporary Redirect"' "text/plain"' Helper.UTF8NoBom' " is 120.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,BadRequest,The length of the statement  "            return new ResponseConfiguration(HttpStatusCode.BadRequest' description ?? "Bad Request"' "text/plain"' Helper.UTF8NoBom); " is 122.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,InternalServerError,The length of the statement  "            return new ResponseConfiguration(HttpStatusCode.InternalServerError' description ?? "Internal Server Error"' "text/plain"' Helper.UTF8NoBom); " is 141.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,ServiceUnavailable,The length of the statement  "            return new ResponseConfiguration(HttpStatusCode.ServiceUnavailable' description ?? "Service Unavailable"' "text/plain"' Helper.UTF8NoBom); " is 138.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,NotImplemented,The length of the statement  "            return new ResponseConfiguration(HttpStatusCode.NotImplemented' description ?? "Not Implemented"' "text/plain"' Helper.UTF8NoBom); " is 130.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,Unauthorized,The length of the statement  "            return new ResponseConfiguration(HttpStatusCode.Unauthorized' description ?? "Unauthorized"' "text/plain"' Helper.UTF8NoBom); " is 125.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,EventEntry,The length of the statement  "                            var etag = msg.Record.OriginalEvent != null ? GetPositionETag(msg.Record.OriginalEventNumber' codec.ContentType) : String.Empty; " is 128.
Long Statement,EventStore.Core.Services.Transport.Http,Configure,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Configure.cs,WriteEventsCompleted,The length of the statement  "                        return new ResponseConfiguration(HttpStatusCode.BadRequest' "Wrong expected EventNumber"' "text/plain"' Helper.UTF8NoBom' " is 121.
Long Statement,EventStore.Core.Services.Transport.Http,Format,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Format.cs,ReadNextNPersistentMessagesCompleted,The length of the statement  "            if (msg == null || msg.Result != ClientMessage.ReadNextNPersistentMessagesCompleted.ReadNextNPersistentMessagesResult.Success) " is 126.
Long Statement,EventStore.Core.Services.Transport.Http,Format,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Format.cs,ReadNextNPersistentMessagesCompleted,The length of the statement  "            return entity.ResponseCodec.To(Convert.ToNextNPersistentMessagesFeed(msg' entity.RequestedUrl' streamId' groupName' count' embed)); " is 131.
Long Statement,EventStore.Core.Services.Transport.Http,Format,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Format.cs,GetDescriptionDocument,The length of the statement  "            return entity.ResponseCodec.To(Convert.ToDescriptionDocument(entity.RequestedUrl' streamId' persistentSubscriptionStats)); " is 122.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToStreamEventForwardFeed,The length of the statement  "            feed.SetUpdated(msg.Events.Length > 0 && msg.Events[0].Event != null ? msg.Events[0].Event.TimeStamp : DateTime.MinValue.ToUniversalTime()); " is 140.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToStreamEventForwardFeed,The length of the statement  "                feed.AddLink("next"' HostName.Combine(requestedUrl' "/streams/{0}/{1}/backward/{2}"' escapedStreamId' nextEventNumber' msg.MaxCount)); " is 134.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToStreamEventForwardFeed,The length of the statement  "                feed.AddLink("previous"' HostName.Combine(requestedUrl' "/streams/{0}/{1}/forward/{2}"' escapedStreamId' prevEventNumber' msg.MaxCount)); " is 137.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToStreamEventBackwardFeed,The length of the statement  "            feed.SetUpdated(msg.Events.Length > 0 && msg.Events[0].Event != null ? msg.Events[0].Event.TimeStamp : DateTime.MinValue.ToUniversalTime()); " is 140.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToStreamEventBackwardFeed,The length of the statement  "                if (nextEventNumber < 0) throw new Exception(string.Format("nextEventNumber is negative: {0} while IsEndOfStream"' nextEventNumber)); " is 133.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToStreamEventBackwardFeed,The length of the statement  "                feed.AddLink("next"' HostName.Combine(requestedUrl' "/streams/{0}/{1}/backward/{2}"' escapedStreamId' nextEventNumber' msg.MaxCount)); " is 134.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToStreamEventBackwardFeed,The length of the statement  "            feed.AddLink("previous"' HostName.Combine(requestedUrl' "/streams/{0}/{1}/forward/{2}"' escapedStreamId' prevEventNumber' msg.MaxCount)); " is 137.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToAllEventsForwardFeed,The length of the statement  "            feed.SetUpdated(msg.Events.Length > 0 && msg.Events[0].Event != null ? msg.Events[msg.Events.Length - 1].Event.TimeStamp : DateTime.MinValue.ToUniversalTime()); " is 160.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToAllEventsForwardFeed,The length of the statement  "                feed.AddLink("last"' HostName.Combine(requestedUrl' "/streams/{0}/{1}/forward/{2}"' AllEscaped' new TFPos(0' 0).AsString()' msg.MaxCount)); " is 139.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToAllEventsForwardFeed,The length of the statement  "                feed.AddLink("next"' HostName.Combine(requestedUrl' "/streams/{0}/{1}/backward/{2}"' AllEscaped' msg.PrevPos.AsString()' msg.MaxCount)); " is 136.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToAllEventsForwardFeed,The length of the statement  "                feed.AddLink("previous"' HostName.Combine(requestedUrl' "/streams/{0}/{1}/forward/{2}"' AllEscaped' msg.NextPos.AsString()' msg.MaxCount)); " is 139.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToAllEventsBackwardFeed,The length of the statement  "            feed.SetUpdated(msg.Events.Length > 0 && msg.Events[0].Event != null ? msg.Events[0].Event.TimeStamp : DateTime.MinValue.ToUniversalTime()); " is 140.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToAllEventsBackwardFeed,The length of the statement  "                feed.AddLink("last"' HostName.Combine(requestedUrl' "/streams/{0}/{1}/forward/{2}"' AllEscaped' new TFPos(0' 0).AsString()' msg.MaxCount)); " is 139.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToAllEventsBackwardFeed,The length of the statement  "                feed.AddLink("next"' HostName.Combine(requestedUrl' "/streams/{0}/{1}/backward/{2}"' AllEscaped' msg.NextPos.AsString()' msg.MaxCount)); " is 136.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToAllEventsBackwardFeed,The length of the statement  "            feed.AddLink("previous"' HostName.Combine(requestedUrl' "/streams/{0}/{1}/forward/{2}"' AllEscaped' msg.PrevPos.AsString()' msg.MaxCount)); " is 139.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToNextNPersistentMessagesFeed,The length of the statement  "            feed.SetUpdated(msg.Events.Length > 0 && msg.Events[0].Event != null ? msg.Events[msg.Events.Length - 1].Event.TimeStamp : DateTime.MinValue.ToUniversalTime()); " is 160.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToNextNPersistentMessagesFeed,The length of the statement  "                var ackAll = HostName.Combine(requestedUrl' "/subscriptions/{0}/{1}/ack"' escapedStreamId' escapedGroupName) + ackAllQueryString; " is 129.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToNextNPersistentMessagesFeed,The length of the statement  "                var nackAll = HostName.Combine(requestedUrl' "/subscriptions/{0}/{1}/nack"' escapedStreamId' escapedGroupName) + nackAllQueryString; " is 132.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToNextNPersistentMessagesFeed,The length of the statement  "                var ack = HostName.Combine(requestedUrl' "/subscriptions/{0}/{1}/ack/{2}"' escapedStreamId' escapedGroupName' msg.Events[i].OriginalEvent.EventId); " is 147.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToNextNPersistentMessagesFeed,The length of the statement  "                var nack = HostName.Combine(requestedUrl' "/subscriptions/{0}/{1}/nack/{2}"' escapedStreamId' escapedGroupName' msg.Events[i].OriginalEvent.EventId); " is 149.
Long Statement,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToDescriptionDocument,The length of the statement  "            descriptionDocument.SetDescription(@"The description document will be presented when no accept header is present or it was requested"); " is 135.
Long Statement,EventStore.Core.Services.Transport.Http,ResponseConfiguration,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\ResponseConfiguration.cs,SetCreated,The length of the statement  "            return new ResponseConfiguration(EventStore.Transport.Http.HttpStatusCode.Created' ContentType' Encoding' headers.ToArray()); " is 125.
Long Statement,EventStore.Core.Services.Transport.Http,HttpService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\HttpService.cs,RequestReceived,The length of the statement  "            var entity = new HttpEntity(context.Request' context.Response' context.User' _logHttpRequests' _advertiseAsAddress' _advertiseAsPort); " is 134.
Long Statement,EventStore.Core.Services.Transport.Tcp,InternalTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\InternalTcpDispatcher.cs,WrapCommitAck,The length of the statement  "            var dto = new ReplicationMessageDto.CommitAck(msg.LogPosition' msg.TransactionPosition' msg.FirstEventNumber' msg.LastEventNumber); " is 131.
Long Statement,EventStore.Core.Services.Transport.Tcp,InternalTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\InternalTcpDispatcher.cs,UnwrapReplicaSubscriptionRequest,The length of the statement  "            var lastEpochs = dto.LastEpochs.Safe().Select(x => new Epoch(x.EpochPosition' x.EpochNumber' new Guid(x.EpochId))).ToArray(); " is 125.
Long Statement,EventStore.Core.Services.Transport.Tcp,InternalTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\InternalTcpDispatcher.cs,WrapSubscribeReplica,The length of the statement  "            var epochs = msg.LastEpochs.Select(x => new ReplicationMessageDto.Epoch(x.EpochPosition' x.EpochNumber' x.EpochId.ToByteArray())).ToArray(); " is 140.
Long Statement,EventStore.Core.Services.Transport.Tcp,InternalTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\InternalTcpDispatcher.cs,WrapAckLogPosition,The length of the statement  "            var dto = new ReplicationMessageDto.ReplicaLogPositionAck(msg.SubscriptionId.ToByteArray()' msg.ReplicationLogPosition); " is 120.
Long Statement,EventStore.Core.Services.Transport.Tcp,InternalTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\InternalTcpDispatcher.cs,UnwrapCreateChunk,The length of the statement  "            return new ReplicationMessage.CreateChunk(new Guid(dto.MasterId)' new Guid(dto.SubscriptionId)' chunkHeader' dto.FileSize' dto.IsCompletedChunk); " is 145.
Long Statement,EventStore.Core.Services.Transport.Tcp,InternalTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\InternalTcpDispatcher.cs,WrapReplicaSubscriptionRetry,The length of the statement  "            var dto = new ReplicationMessageDto.ReplicaSubscriptionRetry(msg.MasterId.ToByteArray()' msg.SubscriptionId.ToByteArray()); " is 123.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpDispatcher.cs,AddUnwrapper,The length of the statement  "            _unwrappers[(byte)version][(byte)command] = (pkg' env' user' login' pass' conn) => unwrapper(pkg' env' user' login' pass); " is 122.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpDispatcher.cs,AddUnwrapper,The length of the statement  "            _unwrappers[(byte)version][(byte) command] = (Func<TcpPackage' IEnvelope' IPrincipal' string' string' TcpConnectionManager' Message>) unwrapper; " is 144.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapTransactionStartCompleted,The length of the statement  "            return new ClientMessage.TransactionStartCompleted(package.CorrelationId' dto.TransactionId' (OperationResult)dto.Result' dto.Message); " is 135.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapTransactionStartCompleted,The length of the statement  "            var dto = new TcpClientMessageDto.TransactionStartCompleted(msg.TransactionId' (TcpClientMessageDto.OperationResult)msg.Result' msg.Message); " is 141.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapTransactionWrite,The length of the statement  "                events[i] = new TcpClientMessageDto.NewEvent(e.EventId.ToByteArray()' e.EventType' e.IsJson ? 1 : 0' 0' e.Data' e.Metadata); " is 124.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapTransactionWriteCompleted,The length of the statement  "            return new ClientMessage.TransactionWriteCompleted(package.CorrelationId' dto.TransactionId' (OperationResult)dto.Result' dto.Message); " is 135.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapTransactionWriteCompleted,The length of the statement  "            var dto = new TcpClientMessageDto.TransactionWriteCompleted(msg.TransactionId' (TcpClientMessageDto.OperationResult)msg.Result' msg.Message); " is 141.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapTransactionCommitCompleted,The length of the statement  "                return new ClientMessage.TransactionCommitCompleted(package.CorrelationId' dto.TransactionId' dto.FirstEventNumber' dto.LastEventNumber' dto.PreparePosition ?? -1' dto.CommitPosition ?? -1); " is 190.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapTransactionCommitCompleted,The length of the statement  "            return new ClientMessage.TransactionCommitCompleted(package.CorrelationId' dto.TransactionId' (OperationResult)dto.Result' dto.Message); " is 136.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapTransactionCommitCompleted,The length of the statement  "            var dto = new TcpClientMessageDto.TransactionCommitCompleted(msg.TransactionId' (TcpClientMessageDto.OperationResult)msg.Result' " is 128.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapDeleteStream,The length of the statement  "            var dto = new TcpClientMessageDto.DeleteStream(msg.EventStreamId' msg.ExpectedVersion' msg.RequireMaster' msg.HardDelete); " is 122.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapDeletePersistentSubscriptionCompleted,The length of the statement  "            var dto = new TcpClientMessageDto.DeletePersistentSubscriptionCompleted((TcpClientMessageDto.DeletePersistentSubscriptionCompleted.DeletePersistentSubscriptionResult)msg.Result' msg.Reason); " is 190.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapCreatePersistentSubscriptionCompleted,The length of the statement  "            var dto = new TcpClientMessageDto.CreatePersistentSubscriptionCompleted((TcpClientMessageDto.CreatePersistentSubscriptionCompleted.CreatePersistentSubscriptionResult)msg.Result' msg.Reason); " is 190.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapUpdatePersistentSubscriptionCompleted,The length of the statement  "            var dto = new TcpClientMessageDto.UpdatePersistentSubscriptionCompleted((TcpClientMessageDto.UpdatePersistentSubscriptionCompleted.UpdatePersistentSubscriptionResult)msg.Result' msg.Reason); " is 190.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,UnwrapConnectToPersistentSubscription,The length of the statement  "                connection.ConnectionId' dto.SubscriptionId' dto.EventStreamId' dto.AllowedInFlightMessages' connection.RemoteEndPoint.ToString()' user); " is 137.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapPersistentSubscriptionConfirmation,The length of the statement  "            var dto = new TcpClientMessageDto.PersistentSubscriptionConfirmation(msg.LastCommitPosition' msg.SubscriptionId' msg.LastEventNumber); " is 134.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapPersistentSubscriptionStreamEventAppeared,The length of the statement  "            var dto = new TcpClientMessageDto.PersistentSubscriptionStreamEventAppeared(new TcpClientMessageDto.ResolvedIndexedEvent(msg.Event.Event' msg.Event.Link)' msg.RetryCount); " is 171.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapSubscriptionDropped,The length of the statement  "            var dto = new TcpClientMessageDto.SubscriptionDropped((TcpClientMessageDto.SubscriptionDropped.SubscriptionDropReason)msg.Reason); " is 130.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapNotHandled,The length of the statement  "            var dto = new TcpClientMessageDto.NotHandled(msg.Reason' msg.AdditionalInfo == null ? null : msg.AdditionalInfo.SerializeToArray()); " is 132.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapNotAuthenticated,The length of the statement  "            return new TcpPackage(TcpCommand.NotAuthenticated' msg.CorrelationId' Helper.UTF8NoBom.GetBytes(msg.Reason ?? string.Empty)); " is 125.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapReadStreamEventsForwardCompletedV1,The length of the statement  "                msg.NextEventNumber' StreamVersionConverter.Downgrade(msg.LastEventNumber)' msg.IsEndOfStream' msg.TfLastCommitPosition' msg.Error); " is 132.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapReadStreamEventsBackwardCompletedV1,The length of the statement  "                msg.NextEventNumber' StreamVersionConverter.Downgrade(msg.LastEventNumber)' msg.IsEndOfStream' msg.TfLastCommitPosition' msg.Error); " is 132.
Long Statement,EventStore.Core.Services.Transport.Tcp,ClientTcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ClientTcpDispatcher.cs,WrapPersistentSubscriptionStreamEventAppearedV1,The length of the statement  "            var dto = new TcpClientMessageDto.PersistentSubscriptionStreamEventAppeared(ConvertToResolvedIndexedEventV1(msg.Event)' msg.RetryCount); " is 136.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,OnConnectionFailed,The length of the statement  "            Log.Info("Connection '{0}' ({1:B}) to [{2}] failed: {3}."' ConnectionName' ConnectionId' connection.RemoteEndPoint' socketError); " is 129.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,OnConnectionClosed,The length of the statement  "                     ConnectionName' ClientConnectionName.IsEmptyString() ? string.Empty : ":" + ClientConnectionName' connection.RemoteEndPoint' ConnectionId' socketError); " is 152.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,ProcessPackage,The length of the statement  "                        var message = (ClientMessage.IdentifyClient)_dispatcher.UnwrapPackage(package' _tcpEnvelope' null' null' null' this' _version); " is 127.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,ProcessPackage,The length of the statement  "                    Helper.EatException(() => reason = Helper.UTF8NoBom.GetString(package.Data.Array' package.Data.Offset' package.Data.Count)); " is 124.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,ProcessPackage,The length of the statement  "                        string.Format("Bad request received from '{0}{1}' [{2}' L{3}' {4:B}]' will stop server. CorrelationId: {5:B}' Error: {6}."' " is 123.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,ReplyNotReady,The length of the statement  "            _tcpEnvelope.ReplyWith(new ClientMessage.NotHandled(correlationId' TcpClientMessageDto.NotHandled.NotHandledReason.NotReady' description)); " is 139.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,SendBadRequestAndClose,The length of the statement  "            SendPackage(new TcpPackage(TcpCommand.BadRequest' correlationId' Helper.UTF8NoBom.GetBytes(message))' checkQueueSize: false); " is 125.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,SendBadRequestAndClose,The length of the statement  "                      ConnectionName' ClientConnectionName.IsEmptyString() ? string.Empty : ":" + ClientConnectionName' RemoteEndPoint' LocalEndPoint' ConnectionId' message); " is 152.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,SendBadRequest,The length of the statement  "            SendPackage(new TcpPackage(TcpCommand.BadRequest' correlationId' Helper.UTF8NoBom.GetBytes(message))' checkQueueSize: false); " is 125.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,Stop,The length of the statement  "                      ConnectionName' ClientConnectionName.IsEmptyString() ? string.Empty : ":" + ClientConnectionName' RemoteEndPoint' LocalEndPoint' ConnectionId' " is 142.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,SendPackage,The length of the statement  "                if(_connectionPendingSendBytesThreshold > ESConsts.UnrestrictedPendingSendBytes && (queueSendBytes = _connection.PendingSendBytes) > _connectionPendingSendBytesThreshold) " is 170.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,Handle,The length of the statement  "                _publisher.Publish(TimerMessage.Schedule.Create(_heartbeatTimeout' _weakThisEnvelope' new TcpMessage.HeartbeatTimeout(msgNum))); " is 128.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpConnectionManager,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpConnectionManager.cs,ScheduleHeartbeat,The length of the statement  "            _publisher.Publish(TimerMessage.Schedule.Create(_heartbeatInterval' _weakThisEnvelope' new TcpMessage.Heartbeat(msgNum))); " is 122.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpPackage,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,AsByteArray,The length of the statement  "                if (loginLen > 255) throw new ArgumentException(string.Format("Login serialized length should be less than 256 bytes (but is {0})."' loginLen)); " is 144.
Long Statement,EventStore.Core.Services.Transport.Tcp,TcpPackage,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,AsByteArray,The length of the statement  "                if (passLen > 255) throw new ArgumentException(string.Format("Password serialized length should be less than 256 bytes (but is {0})."' passLen)); " is 145.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,CreateFSM,The length of the statement  "                        .Do(m => Application.Exit(ExitCode.Error' string.Format("{0} message was unhandled in {1}."' m.GetType().Name' GetType().Name))) " is 128.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,Handle,The length of the statement  "            _mainQueue.Publish(TimerMessage.Schedule.Create(ShutdownTimeout' _publishEnvelope' new SystemMessage.ShutdownTimeout())); " is 121.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,DenyRequestBecauseNotReady,The length of the statement  "            envelope.ReplyWith(new ClientMessage.NotHandled(correlationId' TcpClientMessageDto.NotHandled.NotHandledReason.NotReady' null)); " is 128.
Long Statement,EventStore.Core.Services.VNode,ClusterVNodeController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,IsLegitimateReplicationMessage,The length of the statement  "            if (message.SubscriptionId == Guid.Empty) throw new Exception("IReplicationMessage with empty SubscriptionId provided."); " is 121.
Long Statement,EventStore.Core.TransactionLog.Checkpoint,MemoryMappedFileCheckpoint,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Checkpoint\MemoryMappedFileCheckpoint.cs,Flush,The length of the statement  "//                throw new Exception(string.Format("FlushFileBuffers failed with err: {0}"' Marshal.GetLastWin32Error())); " is 123.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkDbTruncator,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDbTruncator.cs,TruncateDb,The length of the statement  "                throw new Exception(string.Format("During truncation of DB excessive TFChunks were found:\n{0}."' string.Join("\n"' excessiveChunks))); " is 135.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkBulkReader,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkBulkReader.cs,SetDataPosition,The length of the statement  "                throw new ArgumentOutOfRangeException("dataPosition"' string.Format("Data position {0} is out of bounds."' dataPosition)); " is 122.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,Scavenge,The length of the statement  "            Log.Trace("SCAVENGING: started scavenging of DB. Chunks count at start: {0}. Options: alwaysKeepScavenged = {1}' mergeChunks = {2}"' " is 132.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ScavengeChunks,The length of the statement  "                Log.ErrorException(exc' "IOException during creating new chunk for scavenging purposes. Stopping scavenging process..."); " is 121.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ScavengeChunks,The length of the statement  "                var oldSize = oldChunks.Sum(x => (long)x.PhysicalDataSize + x.ChunkFooter.MapSize + ChunkHeader.Size + ChunkFooter.Size); " is 121.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ScavengeChunks,The length of the statement  "                    Log.Trace("But switching was prevented for new chunk: #{0}-{1} ({2})."' chunkStartNumber' chunkEndNumber' Path.GetFileName(tmpChunkPath)); " is 138.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ScavengeChunks,The length of the statement  "                Log.Info("Got FileBeingDeletedException exception during scavenging' that probably means some chunks were re-replicated."); " is 123.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,WriteScavengeChunkCompletedEvent,The length of the statement  "            _ioDispatcher.WriteEvent(streamId' ExpectedVersion.Any' eventToWrite' SystemAccount.Principal' m => WriteScavengeChunkCompletedEventCompleted(m' streamId' eventToWrite' retryCount)); " is 182.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,WriteScavengeChunkCompletedEventCompleted,The length of the statement  "                    Log.Error("Failed to write an event to the {0} stream. Retry limit of {1} reached. Reason: {2}"' streamId' MaxRetryCount' msg.Result); " is 134.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ShouldKeepPrepare,The length of the statement  "                    Log.Info("Removing hard deleted stream tombstone for stream {0} at position {1}"' prepare.EventStreamId' prepare.TransactionPosition); " is 134.
Long Statement,EventStore.Core.TransactionLog.Chunks,ChunkHeader,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\ChunkHeader.cs,ToString,The length of the statement  "            return string.Format("Version: {0}' ChunkSize: {1}' ChunkStartNumber: {2}' ChunkEndNumber: {3}' IsScavenged: {4}' ChunkId: {5}\n" + " is 131.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkDb,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDb.cs,Open,The length of the statement  "                        chunk = TFChunk.TFChunk.FromOngoingFile(versions[0]' Config.ChunkSize' checkSize: false' unbuffered:Config.Unbuffered' writethrough:Config.WriteThrough); " is 153.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkDb,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDb.cs,Open,The length of the statement  "                    throw new CorruptDatabaseException(new ChunkNotFoundException(Config.FileNamingStrategy.GetFilenameFor(lastChunkNum' 0))); " is 122.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkDb,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDb.cs,Open,The length of the statement  "                    var lastChunk = TFChunk.TFChunk.FromOngoingFile(chunkFileName' (int)chunkLocalPos' checkSize: false' unbuffered:Config.Unbuffered' writethrough:Config.WriteThrough); " is 165.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkReader,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkReader.cs,TryReadPrevInternal,The length of the statement  "                    throw new Exception(string.Format("Requested position {0} is greater than writer checkpoint {1} when requesting to read previous record from TF."' pos' writerChk)); " is 164.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkReader,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkReader.cs,TryReadPrevInternal,The length of the statement  "                        throw new Exception(string.Format("Got a file that was being deleted {0} times from TFChunkDb' likely a bug there."' MaxRetries)); " is 130.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkManager,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkManager.cs,AddNewChunk,The length of the statement  "                    throw new Exception(string.Format("Received request to create a new ongoing chunk #{0}-{1}' but current chunks count is {2}."' " is 126.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkManager,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkManager.cs,SwitchChunk,The length of the statement  "            Log.Info("Switching chunk #{0}-{1} ({2})..."' chunkHeader.ChunkStartNumber' chunkHeader.ChunkEndNumber' Path.GetFileName(oldFileName)); " is 135.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkManager,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkManager.cs,TryCacheChunk,The length of the statement  "            if (!chunk.IsReadOnly && chunk.ChunkHeader.ChunkSize + ChunkHeader.Size + ChunkFooter.Size <= _config.MaxChunksCacheSize) " is 121.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkManager,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkManager.cs,GetChunkFor,The length of the statement  "                throw new ArgumentOutOfRangeException("logPosition"' string.Format("LogPosition {0} does not have corresponding chunk in DB."' logPosition)); " is 141.
Long Statement,EventStore.Core.TransactionLog.Chunks,TFChunkManager,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkManager.cs,GetChunkFor,The length of the statement  "                throw new Exception(string.Format("Requested chunk for LogPosition {0}' which is not present in TFChunkManager."' logPosition)); " is 128.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateNew,The length of the statement  "            var chunkHeader = new ChunkHeader(CurrentChunkVersion' chunkSize' chunkStartNumber' chunkEndNumber' isScavenged' Guid.NewGuid()); " is 129.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,InitCompleted,The length of the statement  "                    throw new CorruptDatabaseException(new WrongFileVersionException(_filename' _chunkHeader.Version' CurrentChunkVersion)); " is 120.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,InitCompleted,The length of the statement  "                    throw new Exception("You can only run unbuffered mode on v3 or higher chunk files. Please run scavenge on your database to upgrade your transaction file to v3."); " is 162.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,InitCompleted,The length of the statement  "            _readSide = _chunkHeader.IsScavenged ? (IChunkReadSide) new TFChunkReadSideScavenged(this) : new TFChunkReadSideUnscavenged(this); " is 130.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,InitNew,The length of the statement  "            _readSide = chunkHeader.IsScavenged ? (IChunkReadSide) new TFChunkReadSideScavenged(this) : new TFChunkReadSideUnscavenged(this); " is 129.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,InitOngoing,The length of the statement  "                throw new CorruptDatabaseException(new WrongFileVersionException(_filename' _chunkHeader.Version' CurrentChunkVersion)); " is 120.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,BuildCacheArray,The length of the statement  "                    using (var unmanagedStream = new UnmanagedMemoryStream((byte*)cachedData' _cachedLength' _cachedLength' FileAccess.ReadWrite)) " is 126.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TryAppend,The length of the statement  "                throw new Exception(string.Format("Data sizes violation. Chunk: {0}' IsScavenged: {1}' LogicalDataSize: {2}' PhysicalDataSize: {3}."' " is 133.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,WriteFooter,The length of the statement  "            var footerNoHash = new ChunkFooter(true' true' _physicalDataSize' LogicalDataSize' mapSize' new byte[ChunkFooter.ChecksumSize]); " is 128.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CleanUpFileStreamDestruction,The length of the statement  "                    Log.Info("File {0} has been marked for delete and will be deleted in TryDestructFileStreams."' Path.GetFileName(_filename)); " is 124.
Long Statement,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,ToString,The length of the statement  "            return string.Format("#{0}-{1} ({2})"' _chunkHeader.ChunkStartNumber' _chunkHeader.ChunkEndNumber' Path.GetFileName(_filename)); " is 128.
Long Statement,EventStore.Core.TransactionLog,SeqReadResult,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\ReadResults.cs,ToString,The length of the statement  "            return string.Format("Success: {0}' RecordLength: {1}' RecordPrePosition: {2}' RecordPostPosition: {3}' LogRecord: {4}"' " is 120.
Long Statement,EventStore.Core.TransactionLog.LogRecords,SystemLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\SystemLogRecord.cs,GetEpochRecord,The length of the statement  "                    string.Format("Unexpected type of system record. Requested: {0}' actual: {1}."' SystemRecordType.Epoch' SystemRecordType)); " is 123.
Long Statement,EventStore.Core.TransactionLog.LogRecords,LogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,SingleWrite,The length of the statement  "                                        PrepareFlags.Data | PrepareFlags.TransactionBegin | PrepareFlags.TransactionEnd | (additionalFlags ?? PrepareFlags.None)'  " is 121.
Long Statement,EventStore.Core.TransactionLog.LogRecords,LogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,TransactionWrite,The length of the statement  "                                        eventStreamId' ExpectedVersion.Any' DateTime.UtcNow' PrepareFlags.Data | (isJson ? PrepareFlags.IsJson : PrepareFlags.None)'  " is 124.
Long Statement,EventStore.Core.Util,MiniWeb,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\MiniWeb.cs,RegisterControllerActions,The length of the statement  "            service.RegisterAction(new ControllerAction(pattern' HttpMethod.Get' Codec.NoCodecs' new ICodec[] { Codec.ManualEncoding })' OnStaticContent); " is 142.
Long Statement,EventStore.Core.Services.RequestManager,RequestManagementService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\RequestManagementService.cs,Handle,The length of the statement  "            var manager = new WriteStreamTwoPhaseRequestManager(_bus' _prepareCount' _commitCount' _prepareTimeout' _commitTimeout' _betterOrdering); " is 137.
Long Statement,EventStore.Core.Services.RequestManager,RequestManagementService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\RequestManagementService.cs,Handle,The length of the statement  "            var manager = new DeleteStreamTwoPhaseRequestManager(_bus' _prepareCount' _commitCount' _prepareTimeout' _commitTimeout' _betterOrdering); " is 138.
Long Statement,EventStore.Core.Services.RequestManager,RequestManagementService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\RequestManagementService.cs,Handle,The length of the statement  "            var manager = new TransactionCommitTwoPhaseRequestManager(_bus' _prepareCount' _commitCount' _prepareTimeout' _commitTimeout' _betterOrdering); " is 143.
Long Statement,EventStore.ClientAPI.Embedded,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,RunInMemory,The length of the statement  "            _dbPath = Path.Combine(Path.GetTempPath()' "EmbeddedEventStore"' string.Format("{0:yyyy-MM-dd_HH.mm.ss.ffffff}-EmbeddedNode"' DateTime.UtcNow)); " is 144.
Long Statement,EventStore.ClientAPI.Embedded,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,GetCertificateFromStore,The length of the statement  "                throw new Exception(string.Format("Could not open certificate store '{0}' in location {1}'."' store.Name' store.Location)' exc); " is 128.
Long Statement,EventStore.ClientAPI.Embedded,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,GetCertificateFromStore,The length of the statement  "                    throw new Exception(string.Format("Could not determine a unique certificate from thumbprint '{0}'."' certificateThumbprint)); " is 125.
Long Statement,EventStore.ClientAPI.Embedded,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,GetCertificateFromStore,The length of the statement  "                    throw new Exception(string.Format("Could not find valid certificate with subject name '{0}'."' certificateSubjectName)); " is 120.
Long Statement,EventStore.ClientAPI.Embedded,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,GetCertificateFromStore,The length of the statement  "                    throw new Exception(string.Format("Could not determine a unique certificate from subject name '{0}'."' certificateSubjectName)); " is 128.
Long Statement,EventStore.ClientAPI.Embedded,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,GetCertificateFromStore,The length of the statement  "            throw new ArgumentException("No thumbprint or subject name was specified for a certificate' but a certificate store was specified."); " is 133.
Long Statement,EventStore.ClientAPI.Embedded,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,EnsureGossipAdvertiseInfo,The length of the statement  "                var intSecureTcpPort = _advertiseInternalSecureTcpPortAs > 0 ? _advertiseInternalSecureTcpPortAs : _internalSecureTcp == null ? 0 : _internalSecureTcp.Port; " is 156.
Long Statement,EventStore.ClientAPI.Embedded,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,EnsureGossipAdvertiseInfo,The length of the statement  "                var extSecureTcpPort = _advertiseExternalSecureTcpPortAs > 0 ? _advertiseExternalSecureTcpPortAs : _externalSecureTcp == null ? 0 : _externalSecureTcp.Port; " is 156.
Long Statement,EventStore.ClientAPI.Embedded,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,CreateDbConfig,The length of the statement  "                        log.Info("Access to path {0} denied. The Event Store database will be created in {1}"' dbPath' Locations.FallbackDefaultDataDirectory); " is 135.
Complex Conditional,EventStore.Core.Bus,QueueStatsCollector,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The conditional expression  "_nonIdle > 0 || _length > 0 || AreCheckpointsDifferent(0) || AreCheckpointsDifferent(1)                             || AreCheckpointsDifferent(2) || AnyCheckpointsDifferent()                             || (waitForNonEmptyTf && _writerCheckpoint[0].Read() == 0)"  is complex.
Complex Conditional,EventStore.Core.Index,IndexMap,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,ReadAndCheckHash,The conditional expression  "text.Length != 32 || !text.All(x => char.IsDigit(x) || (x >= 'A' && x <= 'F'))"  is complex.
Complex Conditional,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,PTable,The conditional expression  "(header.Version != PTableVersions.IndexV1) &&                      (header.Version != PTableVersions.IndexV2) &&                      (header.Version != PTableVersions.IndexV3) &&                      (header.Version != PTableVersions.IndexV4)"  is complex.
Complex Conditional,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,GetMidpointIndex,The conditional expression  "numIndexEntries==1 && numMidpoints==2 && (k==0 || k==1)"  is complex.
Complex Conditional,EventStore.Core.Index,TableIndex,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,GetRangeInternal,The conditional expression  "first || ((last.Stream != best.Stream) && (last.Version != best.Version)) || last.Position != best.Position"  is complex.
Complex Conditional,EventStore.Core.Services,ElectionsService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,IsLegitimateMaster,The conditional expression  "candidate.InstanceId == master.InstanceId                      || candidate.EpochNumber > master.EpochNumber                      || (candidate.EpochNumber == master.EpochNumber && candidate.EpochId != master.EpochId)"  is complex.
Complex Conditional,EventStore.Core.Services.Replication,MasterReplicationService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,TrySendLogBulk,The conditional expression  "bulkResult.BytesRead > 0 || (bulkResult.IsEOF && !subscription.RawSend && !subscription.EOFSent)"  is complex.
Complex Conditional,EventStore.Core.Services.Storage,StorageReaderWorker,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,ReadEvent,The conditional expression  "(result.Result == ReadEventResult.NoStream ||                           result.Result == ReadEventResult.NotFound) &&                           result.OriginalStreamExists &&                          SystemStreams.IsSystemStream(msg.EventStreamId)"  is complex.
Complex Conditional,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,GetNextNMessages,The conditional expression  "!cnt.IsEmptyString() && (!int.TryParse(cnt' out count) || count > 100 || count < 1)"  is complex.
Complex Conditional,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetStreamEventsBackward,The conditional expression  "evNum != null && evNum != "head" && (!long.TryParse(evNum' out eventNumber) || eventNumber < 0)"  is complex.
Complex Conditional,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetMetastreamEvent,The conditional expression  "evNum != null && evNum != "head" && (!long.TryParse(evNum' out eventNumber) || eventNumber < 0)"  is complex.
Complex Conditional,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetMetastreamEventsBackward,The conditional expression  "evNum != null && evNum != "head" && (!long.TryParse(evNum' out eventNumber) || eventNumber < 0)"  is complex.
Complex Conditional,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetAllEventsBackward,The conditional expression  "pos != null && pos != "head"                  && (!TFPos.TryParse(pos' out position) || position.PreparePosition < 0 || position.CommitPosition < 0)"  is complex.
Complex Conditional,EventStore.Core.TransactionLog.Chunks,TFChunkDbTruncator,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDbTruncator.cs,TruncateChunkAndFillWithZeros,The conditional expression  "chunkHeader.IsScavenged                  || chunkHeader.ChunkStartNumber != chunkHeader.ChunkEndNumber                  || truncateChk < chunkHeader.ChunkStartPosition                  || truncateChk >= chunkHeader.ChunkEndPosition"  is complex.
Complex Conditional,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ScavengeChunks,The conditional expression  "oldSize <= newSize && !alwaysKeepScavenged && !_unsafeIgnoreHardDeletes && !oldVersion"  is complex.
Complex Conditional,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TryAppend,The conditional expression  "(!ChunkHeader.IsScavenged && _logicalDataSize != _physicalDataSize)                  || (ChunkHeader.IsScavenged && _logicalDataSize < _physicalDataSize)"  is complex.
Empty Catch Block,EventStore.Core.Services.Monitoring,MonitoringService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\MonitoringService.cs,Handle,The method has an empty catch block.
Empty Catch Block,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToEntry,The method has an empty catch block.
Empty Catch Block,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToEntry,The method has an empty catch block.
Empty Catch Block,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToEntry,The method has an empty catch block.
Empty Catch Block,EventStore.Core.Services.Transport.Http,Convert,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Convert.cs,ToEntry,The method has an empty catch block.
Magic Number,EventStore.Core.Bus,MPSCMessageQueue,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\MPSCMessageQueue.cs,MPSCMessageQueue,The following statement contains a magic number: if (IntPtr.Size != 8)              {                  throw new NotSupportedException(                      "This queue is supported only on architectures having IntPtr.Size equal to 8");              }
Magic Number,EventStore.Core.Bus,QueuedHandlerAutoReset,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerAutoReset.cs,ReadFromQueue,The following statement contains a magic number: while (!_stop)              {                  Message msg = null;                  try                  {                      if (!_queue.TryDequeue(out msg))                      {                          _queueStats.EnterIdle();                            _starving = true;                          _msgAddEvent.WaitOne(100);                          _starving = false;                      }                      else                      {                          _queueStats.EnterBusy();  #if DEBUG                          _queueStats.Dequeued(msg);  #endif                            var cnt = _queue.Count;                          _queueStats.ProcessingStarted(msg.GetType()' cnt);                            if (_watchSlowMsg)                          {                              var start = DateTime.UtcNow;                                _consumer.Handle(msg);                                var elapsed = DateTime.UtcNow - start;                              if (elapsed > _slowMsgThreshold)                              {                                  Log.Trace("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."'                                            Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count);                                  if (elapsed > QueuedHandler.VerySlowMsgThreshold && !(msg is SystemMessage.SystemInit))                                      Log.Error("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."'                                                Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count);                              }                          }                          else                          {                              _consumer.Handle(msg);                          }                            _queueStats.ProcessingEnded(1);                      }                  }                  catch (Exception ex)                  {                      Log.ErrorException(ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);                  }              }
Magic Number,EventStore.Core.Bus,QueuedHandlerMRES,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerMRES.cs,ReadFromQueue,The following statement contains a magic number: while (!_stop)              {                  Message msg = null;                  try                  {                      if (!_queue.TryDequeue(out msg))                      {                          _starving = true;                            _queueStats.EnterIdle();                          _msgAddEvent.Wait(100);                          _msgAddEvent.Reset();                            _starving = false;                      }                      else                      {                          _queueStats.EnterBusy();  #if DEBUG                          _queueStats.Dequeued(msg);  #endif                            var cnt = _queue.Count;                          _queueStats.ProcessingStarted(msg.GetType()' cnt);                            if (_watchSlowMsg)                          {                              var start = DateTime.UtcNow;                                _consumer.Handle(msg);                                var elapsed = DateTime.UtcNow - start;                              if (elapsed > _slowMsgThreshold)                              {                                  Log.Trace("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."'                                            Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count);                                  if (elapsed > QueuedHandler.VerySlowMsgThreshold && !(msg is SystemMessage.SystemInit))                                      Log.Error("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."'                                                Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count);                              }                          }                          else                          {                              _consumer.Handle(msg);                          }                            _queueStats.ProcessingEnded(1);                      }                  }                  catch (Exception ex)                  {                      Log.ErrorException(ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);                  }              }
Magic Number,EventStore.Core.Bus,QueueStatsCollector,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,GetStatistics,The following statement contains a magic number: lock (_statisticsLock)              {                  var totalTime = _totalTimeWatch.Elapsed;                  var totalIdleTime = _totalIdleWatch.Elapsed;                  var totalBusyTime = _totalBusyWatch.Elapsed;                  var totalItems = Interlocked.Read(ref _totalItems);                    var lastRunMs = totalTime - _lastTotalTime;                  var lastItems = totalItems - _lastTotalItems;                  var avgItemsPerSecond = lastRunMs.Ticks != 0 ? (int)(TimeSpan.TicksPerSecond * lastItems / lastRunMs.Ticks) : 0;                  var avgProcessingTime = lastItems != 0 ? (totalBusyTime - _lastTotalBusyTime).TotalMilliseconds / lastItems : 0;                  var idleTimePercent = Math.Min(100.0' lastRunMs.Ticks != 0 ? 100.0 * (totalIdleTime - _lastTotalIdleTime).Ticks / lastRunMs.Ticks : 100);                    var stats = new QueueStats(                      Name'                      GroupName'                      currentQueueLength'                      avgItemsPerSecond'                      avgProcessingTime'                      idleTimePercent'                      _busyWatch.IsRunning ? _busyWatch.Elapsed : (TimeSpan?)null'                      _idleWatch.IsRunning ? _idleWatch.Elapsed : (TimeSpan?)null'                      totalItems'                      _currentQueueLengthPeak'                      _lifetimeQueueLengthPeak'                      _lastProcessedMsgType'                      _inProgressMsgType);                    if (totalTime - _lastTotalTime >= MinRefreshPeriod)                  {                      _lastTotalTime = totalTime;                      _lastTotalIdleTime = totalIdleTime;                      _lastTotalBusyTime = totalBusyTime;                      _lastTotalItems = totalItems;                        _currentQueueLengthPeak = 0;                  }                  return stats;              }
Magic Number,EventStore.Core.Bus,QueueStatsCollector,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,GetStatistics,The following statement contains a magic number: lock (_statisticsLock)              {                  var totalTime = _totalTimeWatch.Elapsed;                  var totalIdleTime = _totalIdleWatch.Elapsed;                  var totalBusyTime = _totalBusyWatch.Elapsed;                  var totalItems = Interlocked.Read(ref _totalItems);                    var lastRunMs = totalTime - _lastTotalTime;                  var lastItems = totalItems - _lastTotalItems;                  var avgItemsPerSecond = lastRunMs.Ticks != 0 ? (int)(TimeSpan.TicksPerSecond * lastItems / lastRunMs.Ticks) : 0;                  var avgProcessingTime = lastItems != 0 ? (totalBusyTime - _lastTotalBusyTime).TotalMilliseconds / lastItems : 0;                  var idleTimePercent = Math.Min(100.0' lastRunMs.Ticks != 0 ? 100.0 * (totalIdleTime - _lastTotalIdleTime).Ticks / lastRunMs.Ticks : 100);                    var stats = new QueueStats(                      Name'                      GroupName'                      currentQueueLength'                      avgItemsPerSecond'                      avgProcessingTime'                      idleTimePercent'                      _busyWatch.IsRunning ? _busyWatch.Elapsed : (TimeSpan?)null'                      _idleWatch.IsRunning ? _idleWatch.Elapsed : (TimeSpan?)null'                      totalItems'                      _currentQueueLengthPeak'                      _lifetimeQueueLengthPeak'                      _lastProcessedMsgType'                      _inProgressMsgType);                    if (totalTime - _lastTotalTime >= MinRefreshPeriod)                  {                      _lastTotalTime = totalTime;                      _lastTotalIdleTime = totalIdleTime;                      _lastTotalBusyTime = totalBusyTime;                      _lastTotalItems = totalItems;                        _currentQueueLengthPeak = 0;                  }                  return stats;              }
Magic Number,EventStore.Core.Bus,QueueStatsCollector,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,GetStatistics,The following statement contains a magic number: lock (_statisticsLock)              {                  var totalTime = _totalTimeWatch.Elapsed;                  var totalIdleTime = _totalIdleWatch.Elapsed;                  var totalBusyTime = _totalBusyWatch.Elapsed;                  var totalItems = Interlocked.Read(ref _totalItems);                    var lastRunMs = totalTime - _lastTotalTime;                  var lastItems = totalItems - _lastTotalItems;                  var avgItemsPerSecond = lastRunMs.Ticks != 0 ? (int)(TimeSpan.TicksPerSecond * lastItems / lastRunMs.Ticks) : 0;                  var avgProcessingTime = lastItems != 0 ? (totalBusyTime - _lastTotalBusyTime).TotalMilliseconds / lastItems : 0;                  var idleTimePercent = Math.Min(100.0' lastRunMs.Ticks != 0 ? 100.0 * (totalIdleTime - _lastTotalIdleTime).Ticks / lastRunMs.Ticks : 100);                    var stats = new QueueStats(                      Name'                      GroupName'                      currentQueueLength'                      avgItemsPerSecond'                      avgProcessingTime'                      idleTimePercent'                      _busyWatch.IsRunning ? _busyWatch.Elapsed : (TimeSpan?)null'                      _idleWatch.IsRunning ? _idleWatch.Elapsed : (TimeSpan?)null'                      totalItems'                      _currentQueueLengthPeak'                      _lifetimeQueueLengthPeak'                      _lastProcessedMsgType'                      _inProgressMsgType);                    if (totalTime - _lastTotalTime >= MinRefreshPeriod)                  {                      _lastTotalTime = totalTime;                      _lastTotalIdleTime = totalIdleTime;                      _lastTotalBusyTime = totalBusyTime;                      _lastTotalItems = totalItems;                        _currentQueueLengthPeak = 0;                  }                  return stats;              }
Magic Number,EventStore.Core.Bus,QueueStatsCollector,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,InitializeIdleDetection,The following statement contains a magic number: if (enable)              {                  _nonIdle = 0;                  _length = 0;                  _notifyLock = new object();                  _writerCheckpoint = new ICheckpoint[3];                  _chaserCheckpoint = new ICheckpoint[3];              }              else              {                  _notifyLock = null;              }
Magic Number,EventStore.Core.Bus,QueueStatsCollector,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,InitializeIdleDetection,The following statement contains a magic number: if (enable)              {                  _nonIdle = 0;                  _length = 0;                  _notifyLock = new object();                  _writerCheckpoint = new ICheckpoint[3];                  _chaserCheckpoint = new ICheckpoint[3];              }              else              {                  _notifyLock = null;              }
Magic Number,EventStore.Core.Bus,QueueStatsCollector,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The following statement contains a magic number: lock (_notifyLock)              {                  var successes = 0;                  while (successes < 2)                  {                      while (_nonIdle > 0 || _length > 0 || AreCheckpointsDifferent(0) || AreCheckpointsDifferent(1)                             || AreCheckpointsDifferent(2) || AnyCheckpointsDifferent()                             || (waitForNonEmptyTf && _writerCheckpoint[0].Read() == 0))                      {                          if (!Monitor.Wait(_notifyLock' 100))                          {                              Console.WriteLine("Waiting for IDLE state...");                              counter++;                              if (counter > 150 * multiplier)                                  throw new ApplicationException("Infinite loop?");                          }                      }                      Thread.Sleep(10);                      successes++;                  }              }
Magic Number,EventStore.Core.Bus,QueueStatsCollector,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The following statement contains a magic number: lock (_notifyLock)              {                  var successes = 0;                  while (successes < 2)                  {                      while (_nonIdle > 0 || _length > 0 || AreCheckpointsDifferent(0) || AreCheckpointsDifferent(1)                             || AreCheckpointsDifferent(2) || AnyCheckpointsDifferent()                             || (waitForNonEmptyTf && _writerCheckpoint[0].Read() == 0))                      {                          if (!Monitor.Wait(_notifyLock' 100))                          {                              Console.WriteLine("Waiting for IDLE state...");                              counter++;                              if (counter > 150 * multiplier)                                  throw new ApplicationException("Infinite loop?");                          }                      }                      Thread.Sleep(10);                      successes++;                  }              }
Magic Number,EventStore.Core.Bus,QueueStatsCollector,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The following statement contains a magic number: lock (_notifyLock)              {                  var successes = 0;                  while (successes < 2)                  {                      while (_nonIdle > 0 || _length > 0 || AreCheckpointsDifferent(0) || AreCheckpointsDifferent(1)                             || AreCheckpointsDifferent(2) || AnyCheckpointsDifferent()                             || (waitForNonEmptyTf && _writerCheckpoint[0].Read() == 0))                      {                          if (!Monitor.Wait(_notifyLock' 100))                          {                              Console.WriteLine("Waiting for IDLE state...");                              counter++;                              if (counter > 150 * multiplier)                                  throw new ApplicationException("Infinite loop?");                          }                      }                      Thread.Sleep(10);                      successes++;                  }              }
Magic Number,EventStore.Core.Bus,QueueStatsCollector,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The following statement contains a magic number: lock (_notifyLock)              {                  var successes = 0;                  while (successes < 2)                  {                      while (_nonIdle > 0 || _length > 0 || AreCheckpointsDifferent(0) || AreCheckpointsDifferent(1)                             || AreCheckpointsDifferent(2) || AnyCheckpointsDifferent()                             || (waitForNonEmptyTf && _writerCheckpoint[0].Read() == 0))                      {                          if (!Monitor.Wait(_notifyLock' 100))                          {                              Console.WriteLine("Waiting for IDLE state...");                              counter++;                              if (counter > 150 * multiplier)                                  throw new ApplicationException("Infinite loop?");                          }                      }                      Thread.Sleep(10);                      successes++;                  }              }
Magic Number,EventStore.Core.Bus,QueueStatsCollector,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,WaitIdle,The following statement contains a magic number: lock (_notifyLock)              {                  var successes = 0;                  while (successes < 2)                  {                      while (_nonIdle > 0 || _length > 0 || AreCheckpointsDifferent(0) || AreCheckpointsDifferent(1)                             || AreCheckpointsDifferent(2) || AnyCheckpointsDifferent()                             || (waitForNonEmptyTf && _writerCheckpoint[0].Read() == 0))                      {                          if (!Monitor.Wait(_notifyLock' 100))                          {                              Console.WriteLine("Waiting for IDLE state...");                              counter++;                              if (counter > 150 * multiplier)                                  throw new ApplicationException("Infinite loop?");                          }                      }                      Thread.Sleep(10);                      successes++;                  }              }
Magic Number,EventStore.Core.Bus,QueueStatsCollector,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,AnyCheckpointsDifferent,The following statement contains a magic number: long c3 = _writerCheckpoint[2] != null ? _writerCheckpoint[2].ReadNonFlushed() : -1;
Magic Number,EventStore.Core.Bus,QueueStatsCollector,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,AnyCheckpointsDifferent,The following statement contains a magic number: long c3 = _writerCheckpoint[2] != null ? _writerCheckpoint[2].ReadNonFlushed() : -1;
Magic Number,EventStore.Core.Bus,QueueStatsCollector,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,InitializeCheckpoints,The following statement contains a magic number: if (index == -1)              {                  index = 0;                  _chaserCheckpoint[1] = _chaserCheckpoint[2] = null;                  _writerCheckpoint[1] = _writerCheckpoint[2] = null;              }
Magic Number,EventStore.Core.Bus,QueueStatsCollector,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueueStatsCollector.cs,InitializeCheckpoints,The following statement contains a magic number: if (index == -1)              {                  index = 0;                  _chaserCheckpoint[1] = _chaserCheckpoint[2] = null;                  _writerCheckpoint[1] = _writerCheckpoint[2] = null;              }
Magic Number,EventStore.Core.Bus,QueuedHandlerSleep,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerSleep.cs,ReadFromQueue,The following statement contains a magic number: const int spinmax = 5000;
Magic Number,EventStore.Core.Bus,QueuedHandlerMresWithMpsc,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerMRESWithMPSC.cs,ReadFromQueue,The following statement contains a magic number: var batch = new Message[128];
Magic Number,EventStore.Core.Bus,QueuedHandlerMresWithMpsc,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerMRESWithMPSC.cs,ReadFromQueue,The following statement contains a magic number: while (!_stop)              {                  Message msg = null;                  try                  {                      QueueBatchDequeueResult dequeueResult;                      if (_queue.TryDequeue(batch' out dequeueResult) == false)                      {                          _starving = true;                            _queueStats.EnterIdle();                          _msgAddEvent.Wait(100);                          _msgAddEvent.Reset();                            _starving = false;                      }                      else                      {                          var estimatedQueueCount = dequeueResult.EstimateCurrentQueueCount;                            for (var i = 0; i < dequeueResult.DequeueCount; i++)                          {                              try                              {                                  msg = batch[i];                                      _queueStats.EnterBusy();  #if DEBUG                                  _queueStats.Dequeued(msg);  #endif                                    _queueStats.ProcessingStarted(msg.GetType()' estimatedQueueCount);                                    if (_watchSlowMsg)                                  {                                      var start = DateTime.UtcNow;                                        _consumer.Handle(msg);                                        var elapsed = DateTime.UtcNow - start;                                      if (elapsed > _slowMsgThreshold)                                      {                                          Log.Trace("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."'                                              Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds'                                              estimatedQueueCount'                                              _queue.EstimageCurrentQueueCount());                                          if (elapsed > QueuedHandler.VerySlowMsgThreshold &&                                              !(msg is SystemMessage.SystemInit))                                              Log.Error("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."'                                                  Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds'                                                  estimatedQueueCount' _queue.EstimageCurrentQueueCount());                                      }                                  }                                  else                                  {                                      _consumer.Handle(msg);                                  }                              }                              catch (Exception ex)                              {                                  Log.ErrorException(ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);                              }                                estimatedQueueCount -= 1;                              _queueStats.ProcessingEnded(1);                          }                      }                  }                  catch (Exception ex)                  {                      Log.ErrorException(ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);                  }              }
Magic Number,EventStore.Core.Bus,QueuedHandlerPulse,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerPulse.cs,ReadFromQueue,The following statement contains a magic number: while (!_stop)              {                  Message msg = null;                  try                  {                      lock (_locker)                      {                          while (!_queue.TryDequeue(out msg) && !_stop)                          {                              _starving = true;                              _queueStats.EnterIdle();                              Monitor.Wait(_locker' 100);                          }                          _starving = false;                          if (_stop)                              break;                      }                        _queueStats.EnterBusy();  #if DEBUG                      _queueStats.Dequeued(msg);  #endif                        var cnt = _queue.Count;                      _queueStats.ProcessingStarted(msg.GetType()' cnt);                        if (_watchSlowMsg)                      {                          var start = DateTime.UtcNow;                            _consumer.Handle(msg);                            var elapsed = DateTime.UtcNow - start;                          if (elapsed > _slowMsgThreshold)                          {                              Log.Trace("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."'                                        Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count);                              if (elapsed > QueuedHandler.VerySlowMsgThreshold && !(msg is SystemMessage.SystemInit))                                  Log.Error("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."'                                            Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds' cnt' _queue.Count);                          }                      }                      else                      {                          _consumer.Handle(msg);                      }                        _queueStats.ProcessingEnded(1);                  }                  catch (Exception ex)                  {                      Log.ErrorException(ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);                  }              }
Magic Number,EventStore.Core.Bus,SPSCMessageQueue,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\SPSCMessageQueue.cs,SPSCMessageQueue,The following statement contains a magic number: if (IntPtr.Size != 8)              {                  throw new NotSupportedException(                      "This queue is supported only on architectures having IntPtr.Size equal to 8");              }
Magic Number,EventStore.Core.Bus,QueuedHandlerAutoResetWithMpsc,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerAutoResetWithMPSC.cs,ReadFromQueue,The following statement contains a magic number: var batch = new Message[128];
Magic Number,EventStore.Core.Bus,QueuedHandlerAutoResetWithMpsc,C:\repos\EventStore_EventStore\src\EventStore.Core\Bus\QueuedHandlerAutoResetWithMPSC.cs,ReadFromQueue,The following statement contains a magic number: while (!_stop)              {                  Message msg = null;                  try                  {                      QueueBatchDequeueResult dequeueResult;                      if (_queue.TryDequeue(batch' out dequeueResult) == false)                      {                          _starving = true;                            _queueStats.EnterIdle();                          _msgAddEvent.WaitOne(100);                          _msgAddEvent.Reset();                            _starving = false;                      }                      else                      {                          var estimatedQueueCount = dequeueResult.EstimateCurrentQueueCount;                            for (var i = 0; i < dequeueResult.DequeueCount; i++)                          {                              try                              {                                  msg = batch[i];                                      _queueStats.EnterBusy();  #if DEBUG                                  _queueStats.Dequeued(msg);  #endif                                    _queueStats.ProcessingStarted(msg.GetType()' estimatedQueueCount);                                    if (_watchSlowMsg)                                  {                                      var start = DateTime.UtcNow;                                        _consumer.Handle(msg);                                        var elapsed = DateTime.UtcNow - start;                                      if (elapsed > _slowMsgThreshold)                                      {                                          Log.Trace("SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."'                                              Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds'                                              estimatedQueueCount'                                              _queue.EstimageCurrentQueueCount());                                          if (elapsed > QueuedHandler.VerySlowMsgThreshold &&                                              !(msg is SystemMessage.SystemInit))                                              Log.Error("---!!! VERY SLOW QUEUE MSG [{0}]: {1} - {2}ms. Q: {3}/{4}."'                                                  Name' _queueStats.InProgressMessage.Name' (int)elapsed.TotalMilliseconds'                                                  estimatedQueueCount' _queue.EstimageCurrentQueueCount());                                      }                                  }                                  else                                  {                                      _consumer.Handle(msg);                                  }                              }                              catch (Exception ex)                              {                                  Log.ErrorException(ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);                              }                                estimatedQueueCount -= 1;                              _queueStats.ProcessingEnded(1);                          }                      }                  }                  catch (Exception ex)                  {                      Log.ErrorException(ex' "Error while processing message {0} in queued handler '{1}'."' msg' Name);                  }              }
Magic Number,EventStore.Core,ClusterVNode,C:\repos\EventStore_EventStore\src\EventStore.Core\ClusterVNode.cs,ClusterVNode,The following statement contains a magic number: _workerBuses = Enumerable.Range(0' vNodeSettings.WorkerThreads).Select(queueNum =>                  new InMemoryBus(string.Format("Worker #{0} Bus"' queueNum + 1)'                                  watchSlowMsg: true'                                  slowMsgThreshold: TimeSpan.FromMilliseconds(200))).ToArray();
Magic Number,EventStore.Core,ClusterVNode,C:\repos\EventStore_EventStore\src\EventStore.Core\ClusterVNode.cs,ClusterVNode,The following statement contains a magic number: _workersHandler = new MultiQueuedHandler(                      vNodeSettings.WorkerThreads'                      queueNum => new QueuedHandlerThreadPool(_workerBuses[queueNum]'                                                              string.Format("Worker #{0}"' queueNum + 1)'                                                              groupName: "Workers"'                                                              watchSlowMsg: true'                                                              slowMsgThreshold: TimeSpan.FromMilliseconds(200)));
Magic Number,EventStore.Core,ClusterVNode,C:\repos\EventStore_EventStore\src\EventStore.Core\ClusterVNode.cs,ClusterVNode,The following statement contains a magic number: var monitoringQueue = new QueuedHandlerThreadPool(monitoringInnerBus' "MonitoringQueue"' true' TimeSpan.FromMilliseconds(100));
Magic Number,EventStore.Core,ClusterVNode,C:\repos\EventStore_EventStore\src\EventStore.Core\ClusterVNode.cs,ClusterVNode,The following statement contains a magic number: var tableIndex = new TableIndex(indexPath'                                              new XXHashUnsafe()'                                              new Murmur3AUnsafe()'                                              () => new HashListMemTable(vNodeSettings.IndexBitnessVersion' maxSize: vNodeSettings.MaxMemtableEntryCount * 2)'                                              () => new TFReaderLease(readerPool)'                                              vNodeSettings.IndexBitnessVersion'                                              maxSizeForMemory: vNodeSettings.MaxMemtableEntryCount'                                              maxTablesPerLevel: 2'                                              inMem: db.Config.InMemDb'                                              skipIndexVerify: vNodeSettings.SkipIndexVerify'                                              indexCacheDepth: vNodeSettings.IndexCacheDepth);
Magic Number,EventStore.Core,ClusterVNode,C:\repos\EventStore_EventStore\src\EventStore.Core\ClusterVNode.cs,ClusterVNode,The following statement contains a magic number: var tableIndex = new TableIndex(indexPath'                                              new XXHashUnsafe()'                                              new Murmur3AUnsafe()'                                              () => new HashListMemTable(vNodeSettings.IndexBitnessVersion' maxSize: vNodeSettings.MaxMemtableEntryCount * 2)'                                              () => new TFReaderLease(readerPool)'                                              vNodeSettings.IndexBitnessVersion'                                              maxSizeForMemory: vNodeSettings.MaxMemtableEntryCount'                                              maxTablesPerLevel: 2'                                              inMem: db.Config.InMemDb'                                              skipIndexVerify: vNodeSettings.SkipIndexVerify'                                              indexCacheDepth: vNodeSettings.IndexCacheDepth);
Magic Number,EventStore.Core,ClusterVNode,C:\repos\EventStore_EventStore\src\EventStore.Core\ClusterVNode.cs,ClusterVNode,The following statement contains a magic number: var epochManager = new EpochManager(_mainQueue'                                                  ESConsts.CachedEpochCount'                                                  db.Config.EpochCheckpoint'                                                  writer'                                                  initialReaderCount: 1'                                                  maxReaderCount: 5'                                                  readerFactory: () => new TFChunkReader(db' db.Config.WriterCheckpoint));
Magic Number,EventStore.Core,ClusterVNode,C:\repos\EventStore_EventStore\src\EventStore.Core\ClusterVNode.cs,ClusterVNode,The following statement contains a magic number: var subscrBus = new InMemoryBus("SubscriptionsBus"' true' TimeSpan.FromMilliseconds(50));
Magic Number,EventStore.Core,ClusterVNode,C:\repos\EventStore_EventStore\src\EventStore.Core\ClusterVNode.cs,ClusterVNode,The following statement contains a magic number: var perSubscrBus = new InMemoryBus("PersistentSubscriptionsBus"' true' TimeSpan.FromMilliseconds(50));
Magic Number,EventStore.Core,ClusterVNode,C:\repos\EventStore_EventStore\src\EventStore.Core\ClusterVNode.cs,Stop,The following statement contains a magic number: return Stop(TimeSpan.FromSeconds(15)' false' true);
Magic Number,EventStore.Core,ExclusiveDbLock,C:\repos\EventStore_EventStore\src\EventStore.Core\ExclusiveDbLock.cs,ExclusiveDbLock,The following statement contains a magic number: MutexName = dbPath.Length <= 250 ? "ESDB:" + dbPath.Replace('\\'' '/') : "ESDB-HASHED:" + GetDbPathHash(dbPath);
Magic Number,EventStore.Core,ExclusiveDbLock,C:\repos\EventStore_EventStore\src\EventStore.Core\ExclusiveDbLock.cs,ExclusiveDbLock,The following statement contains a magic number: MutexName += new string('-'' 260 - MutexName.Length);
Magic Number,EventStore.Core,ProgramBase<TOptions>,C:\repos\EventStore_EventStore\src\EventStore.Core\ProgramBase.cs,CommitSuicideIfInBoehmOrOnBadVersionsOfMono,The following statement contains a magic number: if(!options.Force)              {                  if(GC.MaxGeneration == 0)                  {                      Application.Exit(3' "Appears that we are running in mono with boehm GC this is generally not a good idea' please run with sgen instead." +                           "to run with sgen use mono --gc=sgen. If you really want to run with boehm GC you can use --force to override this error.");                  }                  if(OS.IsUnix && !(OS.GetRuntimeVersion().StartsWith("4.6.2")))                  {                      Log.Warn("You appear to be running a version of Mono which is untested and not supported. Only Mono 4.6.2 is supported at this time.");                  }              }
Magic Number,EventStore.Core,ProgramBase<TOptions>,C:\repos\EventStore_EventStore\src\EventStore.Core\ProgramBase.cs,Init,The following statement contains a magic number: Log.Info("{0'-25} {1} ({2}-bit)"' "RUNTIME:"' OS.GetRuntimeVersion()' Marshal.SizeOf(typeof(IntPtr)) * 8);
Magic Number,EventStore.Core,ProgramBase<TOptions>,C:\repos\EventStore_EventStore\src\EventStore.Core\ProgramBase.cs,FormatExceptionMessage,The following statement contains a magic number: while (exc != null)              {                  cnt += 1;                  msg += "\n" + new string(' '' 2 * cnt) + exc.Message;                  exc = exc.InnerException;              }
Magic Number,EventStore.Core,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,WithClusterNodeSettings,The following statement contains a magic number: int quorumSize = clusterNodeCount / 2 + 1;
Magic Number,EventStore.Core,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,OnDefaultEndpoints,The following statement contains a magic number: _internalHttp = new IPEndPoint(Opts.InternalIpDefault' 2112);
Magic Number,EventStore.Core,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,OnDefaultEndpoints,The following statement contains a magic number: _internalTcp = new IPEndPoint(Opts.InternalIpDefault' 1112);
Magic Number,EventStore.Core,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,OnDefaultEndpoints,The following statement contains a magic number: _externalHttp = new IPEndPoint(Opts.ExternalIpDefault' 2113);
Magic Number,EventStore.Core,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,OnDefaultEndpoints,The following statement contains a magic number: _externalTcp = new IPEndPoint(Opts.InternalIpDefault' 1113);
Magic Number,EventStore.Core.Cluster,MemberInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = InstanceId.GetHashCode();                  result = (result*397) ^ State.GetHashCode();                  result = (result*397) ^ IsAlive.GetHashCode();                  result = (result*397) ^ InternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ ExternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ InternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ ExternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ EpochPosition.GetHashCode();                  result = (result*397) ^ EpochNumber.GetHashCode();                  result = (result*397) ^ EpochId.GetHashCode();                  result = (result*397) ^ NodePriority;                  return result;              }
Magic Number,EventStore.Core.Cluster,MemberInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = InstanceId.GetHashCode();                  result = (result*397) ^ State.GetHashCode();                  result = (result*397) ^ IsAlive.GetHashCode();                  result = (result*397) ^ InternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ ExternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ InternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ ExternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ EpochPosition.GetHashCode();                  result = (result*397) ^ EpochNumber.GetHashCode();                  result = (result*397) ^ EpochId.GetHashCode();                  result = (result*397) ^ NodePriority;                  return result;              }
Magic Number,EventStore.Core.Cluster,MemberInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = InstanceId.GetHashCode();                  result = (result*397) ^ State.GetHashCode();                  result = (result*397) ^ IsAlive.GetHashCode();                  result = (result*397) ^ InternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ ExternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ InternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ ExternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ EpochPosition.GetHashCode();                  result = (result*397) ^ EpochNumber.GetHashCode();                  result = (result*397) ^ EpochId.GetHashCode();                  result = (result*397) ^ NodePriority;                  return result;              }
Magic Number,EventStore.Core.Cluster,MemberInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = InstanceId.GetHashCode();                  result = (result*397) ^ State.GetHashCode();                  result = (result*397) ^ IsAlive.GetHashCode();                  result = (result*397) ^ InternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ ExternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ InternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ ExternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ EpochPosition.GetHashCode();                  result = (result*397) ^ EpochNumber.GetHashCode();                  result = (result*397) ^ EpochId.GetHashCode();                  result = (result*397) ^ NodePriority;                  return result;              }
Magic Number,EventStore.Core.Cluster,MemberInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = InstanceId.GetHashCode();                  result = (result*397) ^ State.GetHashCode();                  result = (result*397) ^ IsAlive.GetHashCode();                  result = (result*397) ^ InternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ ExternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ InternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ ExternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ EpochPosition.GetHashCode();                  result = (result*397) ^ EpochNumber.GetHashCode();                  result = (result*397) ^ EpochId.GetHashCode();                  result = (result*397) ^ NodePriority;                  return result;              }
Magic Number,EventStore.Core.Cluster,MemberInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = InstanceId.GetHashCode();                  result = (result*397) ^ State.GetHashCode();                  result = (result*397) ^ IsAlive.GetHashCode();                  result = (result*397) ^ InternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ ExternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ InternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ ExternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ EpochPosition.GetHashCode();                  result = (result*397) ^ EpochNumber.GetHashCode();                  result = (result*397) ^ EpochId.GetHashCode();                  result = (result*397) ^ NodePriority;                  return result;              }
Magic Number,EventStore.Core.Cluster,MemberInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = InstanceId.GetHashCode();                  result = (result*397) ^ State.GetHashCode();                  result = (result*397) ^ IsAlive.GetHashCode();                  result = (result*397) ^ InternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ ExternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ InternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ ExternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ EpochPosition.GetHashCode();                  result = (result*397) ^ EpochNumber.GetHashCode();                  result = (result*397) ^ EpochId.GetHashCode();                  result = (result*397) ^ NodePriority;                  return result;              }
Magic Number,EventStore.Core.Cluster,MemberInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = InstanceId.GetHashCode();                  result = (result*397) ^ State.GetHashCode();                  result = (result*397) ^ IsAlive.GetHashCode();                  result = (result*397) ^ InternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ ExternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ InternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ ExternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ EpochPosition.GetHashCode();                  result = (result*397) ^ EpochNumber.GetHashCode();                  result = (result*397) ^ EpochId.GetHashCode();                  result = (result*397) ^ NodePriority;                  return result;              }
Magic Number,EventStore.Core.Cluster,MemberInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = InstanceId.GetHashCode();                  result = (result*397) ^ State.GetHashCode();                  result = (result*397) ^ IsAlive.GetHashCode();                  result = (result*397) ^ InternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ ExternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ InternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ ExternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ EpochPosition.GetHashCode();                  result = (result*397) ^ EpochNumber.GetHashCode();                  result = (result*397) ^ EpochId.GetHashCode();                  result = (result*397) ^ NodePriority;                  return result;              }
Magic Number,EventStore.Core.Cluster,MemberInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = InstanceId.GetHashCode();                  result = (result*397) ^ State.GetHashCode();                  result = (result*397) ^ IsAlive.GetHashCode();                  result = (result*397) ^ InternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ ExternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ InternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ ExternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ EpochPosition.GetHashCode();                  result = (result*397) ^ EpochNumber.GetHashCode();                  result = (result*397) ^ EpochId.GetHashCode();                  result = (result*397) ^ NodePriority;                  return result;              }
Magic Number,EventStore.Core.Cluster,MemberInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = InstanceId.GetHashCode();                  result = (result*397) ^ State.GetHashCode();                  result = (result*397) ^ IsAlive.GetHashCode();                  result = (result*397) ^ InternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ ExternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ InternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ ExternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ EpochPosition.GetHashCode();                  result = (result*397) ^ EpochNumber.GetHashCode();                  result = (result*397) ^ EpochId.GetHashCode();                  result = (result*397) ^ NodePriority;                  return result;              }
Magic Number,EventStore.Core.Cluster,MemberInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Cluster\MemberInfo.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = InstanceId.GetHashCode();                  result = (result*397) ^ State.GetHashCode();                  result = (result*397) ^ IsAlive.GetHashCode();                  result = (result*397) ^ InternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (InternalSecureTcpEndPoint != null ? InternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ ExternalTcpEndPoint.GetHashCode();                  result = (result*397) ^ (ExternalSecureTcpEndPoint != null ? ExternalSecureTcpEndPoint.GetHashCode() : 0);                  result = (result*397) ^ InternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ ExternalHttpEndPoint.GetHashCode();                  result = (result*397) ^ EpochPosition.GetHashCode();                  result = (result*397) ^ EpochNumber.GetHashCode();                  result = (result*397) ^ EpochId.GetHashCode();                  result = (result*397) ^ NodePriority;                  return result;              }
Magic Number,EventStore.Core.Data,EventRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = EventNumber.GetHashCode();                  hashCode = (hashCode*397) ^ LogPosition.GetHashCode();                  hashCode = (hashCode*397) ^ CorrelationId.GetHashCode();                  hashCode = (hashCode*397) ^ EventId.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionPosition.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionOffset;                  hashCode = (hashCode*397) ^ EventStreamId.GetHashCode();                  hashCode = (hashCode*397) ^ ExpectedVersion.GetHashCode();                  hashCode = (hashCode*397) ^ TimeStamp.GetHashCode();                  hashCode = (hashCode*397) ^ Flags.GetHashCode();                  hashCode = (hashCode*397) ^ EventType.GetHashCode();                  hashCode = (hashCode*397) ^ Data.GetHashCode();                  hashCode = (hashCode*397) ^ Metadata.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Core.Data,EventRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = EventNumber.GetHashCode();                  hashCode = (hashCode*397) ^ LogPosition.GetHashCode();                  hashCode = (hashCode*397) ^ CorrelationId.GetHashCode();                  hashCode = (hashCode*397) ^ EventId.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionPosition.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionOffset;                  hashCode = (hashCode*397) ^ EventStreamId.GetHashCode();                  hashCode = (hashCode*397) ^ ExpectedVersion.GetHashCode();                  hashCode = (hashCode*397) ^ TimeStamp.GetHashCode();                  hashCode = (hashCode*397) ^ Flags.GetHashCode();                  hashCode = (hashCode*397) ^ EventType.GetHashCode();                  hashCode = (hashCode*397) ^ Data.GetHashCode();                  hashCode = (hashCode*397) ^ Metadata.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Core.Data,EventRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = EventNumber.GetHashCode();                  hashCode = (hashCode*397) ^ LogPosition.GetHashCode();                  hashCode = (hashCode*397) ^ CorrelationId.GetHashCode();                  hashCode = (hashCode*397) ^ EventId.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionPosition.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionOffset;                  hashCode = (hashCode*397) ^ EventStreamId.GetHashCode();                  hashCode = (hashCode*397) ^ ExpectedVersion.GetHashCode();                  hashCode = (hashCode*397) ^ TimeStamp.GetHashCode();                  hashCode = (hashCode*397) ^ Flags.GetHashCode();                  hashCode = (hashCode*397) ^ EventType.GetHashCode();                  hashCode = (hashCode*397) ^ Data.GetHashCode();                  hashCode = (hashCode*397) ^ Metadata.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Core.Data,EventRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = EventNumber.GetHashCode();                  hashCode = (hashCode*397) ^ LogPosition.GetHashCode();                  hashCode = (hashCode*397) ^ CorrelationId.GetHashCode();                  hashCode = (hashCode*397) ^ EventId.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionPosition.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionOffset;                  hashCode = (hashCode*397) ^ EventStreamId.GetHashCode();                  hashCode = (hashCode*397) ^ ExpectedVersion.GetHashCode();                  hashCode = (hashCode*397) ^ TimeStamp.GetHashCode();                  hashCode = (hashCode*397) ^ Flags.GetHashCode();                  hashCode = (hashCode*397) ^ EventType.GetHashCode();                  hashCode = (hashCode*397) ^ Data.GetHashCode();                  hashCode = (hashCode*397) ^ Metadata.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Core.Data,EventRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = EventNumber.GetHashCode();                  hashCode = (hashCode*397) ^ LogPosition.GetHashCode();                  hashCode = (hashCode*397) ^ CorrelationId.GetHashCode();                  hashCode = (hashCode*397) ^ EventId.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionPosition.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionOffset;                  hashCode = (hashCode*397) ^ EventStreamId.GetHashCode();                  hashCode = (hashCode*397) ^ ExpectedVersion.GetHashCode();                  hashCode = (hashCode*397) ^ TimeStamp.GetHashCode();                  hashCode = (hashCode*397) ^ Flags.GetHashCode();                  hashCode = (hashCode*397) ^ EventType.GetHashCode();                  hashCode = (hashCode*397) ^ Data.GetHashCode();                  hashCode = (hashCode*397) ^ Metadata.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Core.Data,EventRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = EventNumber.GetHashCode();                  hashCode = (hashCode*397) ^ LogPosition.GetHashCode();                  hashCode = (hashCode*397) ^ CorrelationId.GetHashCode();                  hashCode = (hashCode*397) ^ EventId.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionPosition.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionOffset;                  hashCode = (hashCode*397) ^ EventStreamId.GetHashCode();                  hashCode = (hashCode*397) ^ ExpectedVersion.GetHashCode();                  hashCode = (hashCode*397) ^ TimeStamp.GetHashCode();                  hashCode = (hashCode*397) ^ Flags.GetHashCode();                  hashCode = (hashCode*397) ^ EventType.GetHashCode();                  hashCode = (hashCode*397) ^ Data.GetHashCode();                  hashCode = (hashCode*397) ^ Metadata.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Core.Data,EventRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = EventNumber.GetHashCode();                  hashCode = (hashCode*397) ^ LogPosition.GetHashCode();                  hashCode = (hashCode*397) ^ CorrelationId.GetHashCode();                  hashCode = (hashCode*397) ^ EventId.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionPosition.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionOffset;                  hashCode = (hashCode*397) ^ EventStreamId.GetHashCode();                  hashCode = (hashCode*397) ^ ExpectedVersion.GetHashCode();                  hashCode = (hashCode*397) ^ TimeStamp.GetHashCode();                  hashCode = (hashCode*397) ^ Flags.GetHashCode();                  hashCode = (hashCode*397) ^ EventType.GetHashCode();                  hashCode = (hashCode*397) ^ Data.GetHashCode();                  hashCode = (hashCode*397) ^ Metadata.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Core.Data,EventRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = EventNumber.GetHashCode();                  hashCode = (hashCode*397) ^ LogPosition.GetHashCode();                  hashCode = (hashCode*397) ^ CorrelationId.GetHashCode();                  hashCode = (hashCode*397) ^ EventId.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionPosition.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionOffset;                  hashCode = (hashCode*397) ^ EventStreamId.GetHashCode();                  hashCode = (hashCode*397) ^ ExpectedVersion.GetHashCode();                  hashCode = (hashCode*397) ^ TimeStamp.GetHashCode();                  hashCode = (hashCode*397) ^ Flags.GetHashCode();                  hashCode = (hashCode*397) ^ EventType.GetHashCode();                  hashCode = (hashCode*397) ^ Data.GetHashCode();                  hashCode = (hashCode*397) ^ Metadata.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Core.Data,EventRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = EventNumber.GetHashCode();                  hashCode = (hashCode*397) ^ LogPosition.GetHashCode();                  hashCode = (hashCode*397) ^ CorrelationId.GetHashCode();                  hashCode = (hashCode*397) ^ EventId.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionPosition.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionOffset;                  hashCode = (hashCode*397) ^ EventStreamId.GetHashCode();                  hashCode = (hashCode*397) ^ ExpectedVersion.GetHashCode();                  hashCode = (hashCode*397) ^ TimeStamp.GetHashCode();                  hashCode = (hashCode*397) ^ Flags.GetHashCode();                  hashCode = (hashCode*397) ^ EventType.GetHashCode();                  hashCode = (hashCode*397) ^ Data.GetHashCode();                  hashCode = (hashCode*397) ^ Metadata.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Core.Data,EventRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = EventNumber.GetHashCode();                  hashCode = (hashCode*397) ^ LogPosition.GetHashCode();                  hashCode = (hashCode*397) ^ CorrelationId.GetHashCode();                  hashCode = (hashCode*397) ^ EventId.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionPosition.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionOffset;                  hashCode = (hashCode*397) ^ EventStreamId.GetHashCode();                  hashCode = (hashCode*397) ^ ExpectedVersion.GetHashCode();                  hashCode = (hashCode*397) ^ TimeStamp.GetHashCode();                  hashCode = (hashCode*397) ^ Flags.GetHashCode();                  hashCode = (hashCode*397) ^ EventType.GetHashCode();                  hashCode = (hashCode*397) ^ Data.GetHashCode();                  hashCode = (hashCode*397) ^ Metadata.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Core.Data,EventRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = EventNumber.GetHashCode();                  hashCode = (hashCode*397) ^ LogPosition.GetHashCode();                  hashCode = (hashCode*397) ^ CorrelationId.GetHashCode();                  hashCode = (hashCode*397) ^ EventId.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionPosition.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionOffset;                  hashCode = (hashCode*397) ^ EventStreamId.GetHashCode();                  hashCode = (hashCode*397) ^ ExpectedVersion.GetHashCode();                  hashCode = (hashCode*397) ^ TimeStamp.GetHashCode();                  hashCode = (hashCode*397) ^ Flags.GetHashCode();                  hashCode = (hashCode*397) ^ EventType.GetHashCode();                  hashCode = (hashCode*397) ^ Data.GetHashCode();                  hashCode = (hashCode*397) ^ Metadata.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Core.Data,EventRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\EventRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = EventNumber.GetHashCode();                  hashCode = (hashCode*397) ^ LogPosition.GetHashCode();                  hashCode = (hashCode*397) ^ CorrelationId.GetHashCode();                  hashCode = (hashCode*397) ^ EventId.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionPosition.GetHashCode();                  hashCode = (hashCode*397) ^ TransactionOffset;                  hashCode = (hashCode*397) ^ EventStreamId.GetHashCode();                  hashCode = (hashCode*397) ^ ExpectedVersion.GetHashCode();                  hashCode = (hashCode*397) ^ TimeStamp.GetHashCode();                  hashCode = (hashCode*397) ^ Flags.GetHashCode();                  hashCode = (hashCode*397) ^ EventType.GetHashCode();                  hashCode = (hashCode*397) ^ Data.GetHashCode();                  hashCode = (hashCode*397) ^ Metadata.GetHashCode();                  return hashCode;              }
Magic Number,EventStore.Core.Data,TFPos,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\TFPos.cs,TryParse,The following statement contains a magic number: if (s == null || s.Length != 32)                  return false;
Magic Number,EventStore.Core.Data,TFPos,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\TFPos.cs,TryParse,The following statement contains a magic number: if (!long.TryParse(s.Substring(0' 16)' System.Globalization.NumberStyles.HexNumber' null' out commitPos))                  return false;
Magic Number,EventStore.Core.Data,TFPos,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\TFPos.cs,TryParse,The following statement contains a magic number: if (!long.TryParse(s.Substring(16' 16)' System.Globalization.NumberStyles.HexNumber' null' out preparePos))                  return false;
Magic Number,EventStore.Core.Data,TFPos,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\TFPos.cs,TryParse,The following statement contains a magic number: if (!long.TryParse(s.Substring(16' 16)' System.Globalization.NumberStyles.HexNumber' null' out preparePos))                  return false;
Magic Number,EventStore.Core.Data,TFPos,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\TFPos.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (CommitPosition.GetHashCode()*397) ^ PreparePosition.GetHashCode();              }
Magic Number,EventStore.Core.Data,Event,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\Event.cs,Event,The following statement contains a magic number: size += eventType.Length * 2;
Magic Number,EventStore.Core.Data,Event,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\Event.cs,Event,The following statement contains a magic number: if( size > TFConsts.MaxLogRecordSize - 10000)                  throw new ArgumentException("Record is too big"' "data");
Magic Number,EventStore.Core.Helpers,IODispatcherAsync,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,WriteEventsWithRetry,The following statement contains a magic number: PerformWithRetry(                  ioDispatcher'                  handler'                  steps'                  expectedVersion == ExpectedVersion.Any'                  TimeSpan.FromMilliseconds(100)'                  action =>                      cancellationScope.Register(                          ioDispatcher.WriteEvents(                              streamId'                              expectedVersion'                              events'                              principal'                              response =>                                  {                                      if (cancellationScope.Cancelled(response.CorrelationId)) return;                                      action(response' response.Result);                                  })));
Magic Number,EventStore.Core.Helpers,IODispatcherAsync,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,DeleteStreamWithRetry,The following statement contains a magic number: PerformWithRetry(                  ioDispatcher'                  handler'                  steps'                  expectedVersion == ExpectedVersion.Any'                  TimeSpan.FromMilliseconds(100)'                  action =>                      cancellationScope.Register(                          ioDispatcher.DeleteStream(                              streamId'                              expectedVersion'                              hardDelete'                              principal'                              response =>                                  {                                      if (cancellationScope.Cancelled(response.CorrelationId)) return;                                      action(response' response.Result);                                  })));
Magic Number,EventStore.Core.Helpers,IODispatcherAsync,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,UpdateStreamAclWithRetry,The following statement contains a magic number: PerformWithRetry(                  ioDispatcher'                  handler'                  steps'                  expectedVersion == ExpectedVersion.Any'                  TimeSpan.FromMilliseconds(100)'                  action =>                  cancellationScope.Register(                      ioDispatcher.WriteEvents(                          SystemStreams.MetastreamOf(streamId)'                          expectedVersion'                          new[]                              {                                  new Event(Guid.NewGuid()' SystemEventTypes.StreamMetadata' true' metadata.ToJsonBytes()'                                            null)                              }'                          principal'                          response =>                              {                                  if (cancellationScope.Cancelled(response.CorrelationId)) return;                                  action(response' response.Result);                              })));
Magic Number,EventStore.Core.Helpers,IODispatcherAsync,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\IODispatcherAsync.cs,PerformWithRetry,The following statement contains a magic number: action(                  (response' result) =>                  {                      if (ShouldRetry(result' retryExpectedVersion))                      {                          ioDispatcher.Delay(                              timeout'                              () =>                              {                                  if (timeout < TimeSpan.FromSeconds(10))                                      timeout += timeout;                                  PerformWithRetry(ioDispatcher' handler' steps' retryExpectedVersion' timeout' action);                              });                      }                      else                      {                          handler(response);                          Run(steps);                      }                  });
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: for (int i = bytes.Offset; i < bytes.Offset + bytes.Count; )              {                  if (_prefixBytes < PrefixLength)                  {                      _packageLength |= (data[i] << (_prefixBytes * 8)); // little-endian order                      _prefixBytes += 1;                      i += 1;                      if (_prefixBytes == PrefixLength)                      {                          if (_packageLength <= 0 || _packageLength > _maxPackageSize)                          {                              Log.Error("FRAMING ERROR! Data:");                              Log.Error(Helper.FormatBinaryDump(bytes));                              throw new PackageFramingException(string.Format("Package size is out of bounds: {0} (max: {1})."'                                                                              _packageLength' _maxPackageSize));                          }                          _packageLength += PrefixLength; // we need to read suffix as well                      }                  }                  else                  {                      int copyCnt = Math.Min(bytes.Count + bytes.Offset - i' _packageLength - (int)_memStream.Length);                      _memStream.Write(bytes.Array' i' copyCnt);                      i += copyCnt;                        if (_memStream.Length == _packageLength)                      {  #if DEBUG                          var buf = _memStream.GetBuffer();                          int suffixLength = (buf[_packageLength - 4] << 0)                                           | (buf[_packageLength - 3] << 8)                                           | (buf[_packageLength - 2] << 16)                                           | (buf[_packageLength - 1] << 24);                          if (_packageLength - PrefixLength != suffixLength)                          {                              throw new Exception(string.Format("Prefix length: {0} is not equal to suffix length: {1}."'                                                                _packageLength - PrefixLength' suffixLength));                          }  #endif                          _memStream.SetLength(_packageLength - PrefixLength); // remove suffix length                          _memStream.Position = 0;                                                    _packageHandler(_binaryReader);                                                    _memStream.SetLength(0);                          _prefixBytes = 0;                          _packageLength = 0;                      }                  }              }
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: for (int i = bytes.Offset; i < bytes.Offset + bytes.Count; )              {                  if (_prefixBytes < PrefixLength)                  {                      _packageLength |= (data[i] << (_prefixBytes * 8)); // little-endian order                      _prefixBytes += 1;                      i += 1;                      if (_prefixBytes == PrefixLength)                      {                          if (_packageLength <= 0 || _packageLength > _maxPackageSize)                          {                              Log.Error("FRAMING ERROR! Data:");                              Log.Error(Helper.FormatBinaryDump(bytes));                              throw new PackageFramingException(string.Format("Package size is out of bounds: {0} (max: {1})."'                                                                              _packageLength' _maxPackageSize));                          }                          _packageLength += PrefixLength; // we need to read suffix as well                      }                  }                  else                  {                      int copyCnt = Math.Min(bytes.Count + bytes.Offset - i' _packageLength - (int)_memStream.Length);                      _memStream.Write(bytes.Array' i' copyCnt);                      i += copyCnt;                        if (_memStream.Length == _packageLength)                      {  #if DEBUG                          var buf = _memStream.GetBuffer();                          int suffixLength = (buf[_packageLength - 4] << 0)                                           | (buf[_packageLength - 3] << 8)                                           | (buf[_packageLength - 2] << 16)                                           | (buf[_packageLength - 1] << 24);                          if (_packageLength - PrefixLength != suffixLength)                          {                              throw new Exception(string.Format("Prefix length: {0} is not equal to suffix length: {1}."'                                                                _packageLength - PrefixLength' suffixLength));                          }  #endif                          _memStream.SetLength(_packageLength - PrefixLength); // remove suffix length                          _memStream.Position = 0;                                                    _packageHandler(_binaryReader);                                                    _memStream.SetLength(0);                          _prefixBytes = 0;                          _packageLength = 0;                      }                  }              }
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: for (int i = bytes.Offset; i < bytes.Offset + bytes.Count; )              {                  if (_prefixBytes < PrefixLength)                  {                      _packageLength |= (data[i] << (_prefixBytes * 8)); // little-endian order                      _prefixBytes += 1;                      i += 1;                      if (_prefixBytes == PrefixLength)                      {                          if (_packageLength <= 0 || _packageLength > _maxPackageSize)                          {                              Log.Error("FRAMING ERROR! Data:");                              Log.Error(Helper.FormatBinaryDump(bytes));                              throw new PackageFramingException(string.Format("Package size is out of bounds: {0} (max: {1})."'                                                                              _packageLength' _maxPackageSize));                          }                          _packageLength += PrefixLength; // we need to read suffix as well                      }                  }                  else                  {                      int copyCnt = Math.Min(bytes.Count + bytes.Offset - i' _packageLength - (int)_memStream.Length);                      _memStream.Write(bytes.Array' i' copyCnt);                      i += copyCnt;                        if (_memStream.Length == _packageLength)                      {  #if DEBUG                          var buf = _memStream.GetBuffer();                          int suffixLength = (buf[_packageLength - 4] << 0)                                           | (buf[_packageLength - 3] << 8)                                           | (buf[_packageLength - 2] << 16)                                           | (buf[_packageLength - 1] << 24);                          if (_packageLength - PrefixLength != suffixLength)                          {                              throw new Exception(string.Format("Prefix length: {0} is not equal to suffix length: {1}."'                                                                _packageLength - PrefixLength' suffixLength));                          }  #endif                          _memStream.SetLength(_packageLength - PrefixLength); // remove suffix length                          _memStream.Position = 0;                                                    _packageHandler(_binaryReader);                                                    _memStream.SetLength(0);                          _prefixBytes = 0;                          _packageLength = 0;                      }                  }              }
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: for (int i = bytes.Offset; i < bytes.Offset + bytes.Count; )              {                  if (_prefixBytes < PrefixLength)                  {                      _packageLength |= (data[i] << (_prefixBytes * 8)); // little-endian order                      _prefixBytes += 1;                      i += 1;                      if (_prefixBytes == PrefixLength)                      {                          if (_packageLength <= 0 || _packageLength > _maxPackageSize)                          {                              Log.Error("FRAMING ERROR! Data:");                              Log.Error(Helper.FormatBinaryDump(bytes));                              throw new PackageFramingException(string.Format("Package size is out of bounds: {0} (max: {1})."'                                                                              _packageLength' _maxPackageSize));                          }                          _packageLength += PrefixLength; // we need to read suffix as well                      }                  }                  else                  {                      int copyCnt = Math.Min(bytes.Count + bytes.Offset - i' _packageLength - (int)_memStream.Length);                      _memStream.Write(bytes.Array' i' copyCnt);                      i += copyCnt;                        if (_memStream.Length == _packageLength)                      {  #if DEBUG                          var buf = _memStream.GetBuffer();                          int suffixLength = (buf[_packageLength - 4] << 0)                                           | (buf[_packageLength - 3] << 8)                                           | (buf[_packageLength - 2] << 16)                                           | (buf[_packageLength - 1] << 24);                          if (_packageLength - PrefixLength != suffixLength)                          {                              throw new Exception(string.Format("Prefix length: {0} is not equal to suffix length: {1}."'                                                                _packageLength - PrefixLength' suffixLength));                          }  #endif                          _memStream.SetLength(_packageLength - PrefixLength); // remove suffix length                          _memStream.Position = 0;                                                    _packageHandler(_binaryReader);                                                    _memStream.SetLength(0);                          _prefixBytes = 0;                          _packageLength = 0;                      }                  }              }
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: for (int i = bytes.Offset; i < bytes.Offset + bytes.Count; )              {                  if (_prefixBytes < PrefixLength)                  {                      _packageLength |= (data[i] << (_prefixBytes * 8)); // little-endian order                      _prefixBytes += 1;                      i += 1;                      if (_prefixBytes == PrefixLength)                      {                          if (_packageLength <= 0 || _packageLength > _maxPackageSize)                          {                              Log.Error("FRAMING ERROR! Data:");                              Log.Error(Helper.FormatBinaryDump(bytes));                              throw new PackageFramingException(string.Format("Package size is out of bounds: {0} (max: {1})."'                                                                              _packageLength' _maxPackageSize));                          }                          _packageLength += PrefixLength; // we need to read suffix as well                      }                  }                  else                  {                      int copyCnt = Math.Min(bytes.Count + bytes.Offset - i' _packageLength - (int)_memStream.Length);                      _memStream.Write(bytes.Array' i' copyCnt);                      i += copyCnt;                        if (_memStream.Length == _packageLength)                      {  #if DEBUG                          var buf = _memStream.GetBuffer();                          int suffixLength = (buf[_packageLength - 4] << 0)                                           | (buf[_packageLength - 3] << 8)                                           | (buf[_packageLength - 2] << 16)                                           | (buf[_packageLength - 1] << 24);                          if (_packageLength - PrefixLength != suffixLength)                          {                              throw new Exception(string.Format("Prefix length: {0} is not equal to suffix length: {1}."'                                                                _packageLength - PrefixLength' suffixLength));                          }  #endif                          _memStream.SetLength(_packageLength - PrefixLength); // remove suffix length                          _memStream.Position = 0;                                                    _packageHandler(_binaryReader);                                                    _memStream.SetLength(0);                          _prefixBytes = 0;                          _packageLength = 0;                      }                  }              }
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: for (int i = bytes.Offset; i < bytes.Offset + bytes.Count; )              {                  if (_prefixBytes < PrefixLength)                  {                      _packageLength |= (data[i] << (_prefixBytes * 8)); // little-endian order                      _prefixBytes += 1;                      i += 1;                      if (_prefixBytes == PrefixLength)                      {                          if (_packageLength <= 0 || _packageLength > _maxPackageSize)                          {                              Log.Error("FRAMING ERROR! Data:");                              Log.Error(Helper.FormatBinaryDump(bytes));                              throw new PackageFramingException(string.Format("Package size is out of bounds: {0} (max: {1})."'                                                                              _packageLength' _maxPackageSize));                          }                          _packageLength += PrefixLength; // we need to read suffix as well                      }                  }                  else                  {                      int copyCnt = Math.Min(bytes.Count + bytes.Offset - i' _packageLength - (int)_memStream.Length);                      _memStream.Write(bytes.Array' i' copyCnt);                      i += copyCnt;                        if (_memStream.Length == _packageLength)                      {  #if DEBUG                          var buf = _memStream.GetBuffer();                          int suffixLength = (buf[_packageLength - 4] << 0)                                           | (buf[_packageLength - 3] << 8)                                           | (buf[_packageLength - 2] << 16)                                           | (buf[_packageLength - 1] << 24);                          if (_packageLength - PrefixLength != suffixLength)                          {                              throw new Exception(string.Format("Prefix length: {0} is not equal to suffix length: {1}."'                                                                _packageLength - PrefixLength' suffixLength));                          }  #endif                          _memStream.SetLength(_packageLength - PrefixLength); // remove suffix length                          _memStream.Position = 0;                                                    _packageHandler(_binaryReader);                                                    _memStream.SetLength(0);                          _prefixBytes = 0;                          _packageLength = 0;                      }                  }              }
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,Parse,The following statement contains a magic number: for (int i = bytes.Offset; i < bytes.Offset + bytes.Count; )              {                  if (_prefixBytes < PrefixLength)                  {                      _packageLength |= (data[i] << (_prefixBytes * 8)); // little-endian order                      _prefixBytes += 1;                      i += 1;                      if (_prefixBytes == PrefixLength)                      {                          if (_packageLength <= 0 || _packageLength > _maxPackageSize)                          {                              Log.Error("FRAMING ERROR! Data:");                              Log.Error(Helper.FormatBinaryDump(bytes));                              throw new PackageFramingException(string.Format("Package size is out of bounds: {0} (max: {1})."'                                                                              _packageLength' _maxPackageSize));                          }                          _packageLength += PrefixLength; // we need to read suffix as well                      }                  }                  else                  {                      int copyCnt = Math.Min(bytes.Count + bytes.Offset - i' _packageLength - (int)_memStream.Length);                      _memStream.Write(bytes.Array' i' copyCnt);                      i += copyCnt;                        if (_memStream.Length == _packageLength)                      {  #if DEBUG                          var buf = _memStream.GetBuffer();                          int suffixLength = (buf[_packageLength - 4] << 0)                                           | (buf[_packageLength - 3] << 8)                                           | (buf[_packageLength - 2] << 16)                                           | (buf[_packageLength - 1] << 24);                          if (_packageLength - PrefixLength != suffixLength)                          {                              throw new Exception(string.Format("Prefix length: {0} is not equal to suffix length: {1}."'                                                                _packageLength - PrefixLength' suffixLength));                          }  #endif                          _memStream.SetLength(_packageLength - PrefixLength); // remove suffix length                          _memStream.Position = 0;                                                    _packageHandler(_binaryReader);                                                    _memStream.SetLength(0);                          _prefixBytes = 0;                          _packageLength = 0;                      }                  }              }
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,FrameData,The following statement contains a magic number: var lengthArray = new ArraySegment<byte>(                      new[] { (byte)length' (byte)(length >> 8)' (byte)(length >> 16)' (byte)(length >> 24) });
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,FrameData,The following statement contains a magic number: var lengthArray = new ArraySegment<byte>(                      new[] { (byte)length' (byte)(length >> 8)' (byte)(length >> 16)' (byte)(length >> 24) });
Magic Number,EventStore.Core.Helpers,LengthPrefixSuffixFramer,C:\repos\EventStore_EventStore\src\EventStore.Core\Helpers\LengthPrefixSuffixFramer.cs,FrameData,The following statement contains a magic number: var lengthArray = new ArraySegment<byte>(                      new[] { (byte)length' (byte)(length >> 8)' (byte)(length >> 16)' (byte)(length >> 24) });
Magic Number,EventStore.Core.Index,IndexMap,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,FromFile,The following statement contains a magic number: using (var f = File.OpenRead(filename))              {                  // calculate real MD5 hash except first 32 bytes which are string representation of stored hash                  f.Position = 32;                  var realHash = MD5Hash.GetHashFor(f);                  f.Position = 0;                    using (var reader = new StreamReader(f))                  {                      ReadAndCheckHash(reader' realHash);                        // at this point we can assume the format is ok' so actually no need to check errors.                      var version = ReadVersion(reader);                      var checkpoints = ReadCheckpoints(reader);                      var prepareCheckpoint = checkpoints.PreparePosition;                      var commitCheckpoint = checkpoints.CommitPosition;                        var tables = loadPTables ? LoadPTables(reader' filename' checkpoints' cacheDepth' skipIndexVerify) : new List<List<PTable>>();                        if (!loadPTables && reader.ReadLine() != null)                          throw new CorruptIndexException(                              string.Format("Negative prepare/commit checkpoint in non-empty IndexMap: {0}."' checkpoints));                        return new IndexMap(version' tables' prepareCheckpoint' commitCheckpoint' maxTablesPerLevel);                  }              }
Magic Number,EventStore.Core.Index,IndexMap,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,ReadAndCheckHash,The following statement contains a magic number: if (text.Length != 32 || !text.All(x => char.IsDigit(x) || (x >= 'A' && x <= 'F')))                  throw new CorruptIndexException(string.Format("Corrupted IndexMap MD5 hash. Hash ({0}): {1}."' text.Length' text));
Magic Number,EventStore.Core.Index,IndexMap,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,ReadAndCheckHash,The following statement contains a magic number: var expectedHash = new byte[16];
Magic Number,EventStore.Core.Index,IndexMap,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,ReadAndCheckHash,The following statement contains a magic number: for (int i = 0; i < 16; ++i)              {                  expectedHash[i] = Convert.ToByte(text.Substring(i*2' 2)' 16);              }
Magic Number,EventStore.Core.Index,IndexMap,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,ReadAndCheckHash,The following statement contains a magic number: for (int i = 0; i < 16; ++i)              {                  expectedHash[i] = Convert.ToByte(text.Substring(i*2' 2)' 16);              }
Magic Number,EventStore.Core.Index,IndexMap,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,ReadAndCheckHash,The following statement contains a magic number: for (int i = 0; i < 16; ++i)              {                  expectedHash[i] = Convert.ToByte(text.Substring(i*2' 2)' 16);              }
Magic Number,EventStore.Core.Index,IndexMap,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,ReadAndCheckHash,The following statement contains a magic number: for (int i = 0; i < 16; ++i)              {                  expectedHash[i] = Convert.ToByte(text.Substring(i*2' 2)' 16);              }
Magic Number,EventStore.Core.Index,IndexMap,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,LoadPTables,The following statement contains a magic number: while ((text = reader.ReadLine()) != null)              {                  if (checkpoints.PreparePosition < 0 || checkpoints.CommitPosition < 0)                      throw new CorruptIndexException(                          string.Format("Negative prepare/commit checkpoint in non-empty IndexMap: {0}."' checkpoints));                    PTable ptable = null;                  var pieces = text.Split(''');                  try                  {                      var level = int.Parse(pieces[0]);                      var position = int.Parse(pieces[1]);                      var file = pieces[2];                      var path = Path.GetDirectoryName(indexmapFilename);                      var ptablePath = Path.Combine(path' file);                        ptable = PTable.FromFile(ptablePath' cacheDepth' skipIndexVerify);                        CreateIfNeeded(level' tables);                      tables[level].Insert(position' ptable);                  }                  catch (Exception exc)                  {                      // if PTable file path was correct' but data is corrupted' we still need to dispose opened streams                      if (ptable != null)                          ptable.Dispose();                        // also dispose all previously loaded correct PTables                      for (int i=0; i<tables.Count; ++i)                      {                          for (int j=0; j<tables[i].Count; ++j)                          {                              tables[i][j].Dispose();                          }                      }                        throw new CorruptIndexException("Error while loading IndexMap."' exc);                  }              }
Magic Number,EventStore.Core.Index,IndexMap,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,SaveToFile,The following statement contains a magic number: using (var memStream = new MemoryStream())              using (var memWriter = new StreamWriter(memStream))              {                  memWriter.WriteLine(new string('0'' 32)); // pre-allocate space for MD5 hash                  memWriter.WriteLine(Version);                  memWriter.WriteLine("{0}/{1}"' PrepareCheckpoint' CommitCheckpoint);                  for (int i = 0; i < _map.Count; i++)                  {                      for (int j = 0; j < _map[i].Count; j++)                      {                          memWriter.WriteLine("{0}'{1}'{2}"' i' j' new FileInfo(_map[i][j].Filename).Name);                      }                  }                  memWriter.Flush();                    memStream.Position = 32;                  var hash = MD5Hash.GetHashFor(memStream);                    memStream.Position = 0;                  foreach (var t in hash)                  {                      memWriter.Write(t.ToString("X2"));                  }                  memWriter.Flush();                    memStream.Position = 0;                  using (var f = File.OpenWrite(tmpIndexMap))                  {                      f.Write(memStream.GetBuffer()' 0' (int)memStream.Length);                      f.FlushToDisk();                  }              }
Magic Number,EventStore.Core.Index,IndexMap,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,SaveToFile,The following statement contains a magic number: using (var memStream = new MemoryStream())              using (var memWriter = new StreamWriter(memStream))              {                  memWriter.WriteLine(new string('0'' 32)); // pre-allocate space for MD5 hash                  memWriter.WriteLine(Version);                  memWriter.WriteLine("{0}/{1}"' PrepareCheckpoint' CommitCheckpoint);                  for (int i = 0; i < _map.Count; i++)                  {                      for (int j = 0; j < _map[i].Count; j++)                      {                          memWriter.WriteLine("{0}'{1}'{2}"' i' j' new FileInfo(_map[i][j].Filename).Name);                      }                  }                  memWriter.Flush();                    memStream.Position = 32;                  var hash = MD5Hash.GetHashFor(memStream);                    memStream.Position = 0;                  foreach (var t in hash)                  {                      memWriter.Write(t.ToString("X2"));                  }                  memWriter.Flush();                    memStream.Position = 0;                  using (var f = File.OpenWrite(tmpIndexMap))                  {                      f.Write(memStream.GetBuffer()' 0' (int)memStream.Length);                      f.FlushToDisk();                  }              }
Magic Number,EventStore.Core.Index,IndexMap,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\IndexMap.cs,SaveToFile,The following statement contains a magic number: while (trial < 5)              {                  try                  {                      if (File.Exists(filename))                          File.Delete(filename);                      File.Move(tmpIndexMap' filename);                      break;                  }                  catch (IOException exc)                  {                      Log.DebugException(exc' "Failed trial to replace indexmap.");                      trial += 1;                  }              }
Magic Number,EventStore.Core.Index,HashListMemTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\HashListMemTable.cs,AddEntries,The following statement contains a magic number: if (!Monitor.TryEnter(list' 10000))                  throw new UnableToAcquireLockInReasonableTimeException();
Magic Number,EventStore.Core.Index,HashListMemTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\HashListMemTable.cs,TryGetOneValue,The following statement contains a magic number: if (_hash.TryGetValue(hash' out list))              {                  if (!Monitor.TryEnter(list' 10000)) throw new UnableToAcquireLockInReasonableTimeException();                  try                  {                      int endIdx = list.UpperBound(new Entry(number' long.MaxValue));                      if (endIdx == -1)                          return false;                        var key = list.Keys[endIdx];                      if (key.EvNum == number)                      {                          position = key.LogPos;                          return true;                      }                  }                  finally                  {                      Monitor.Exit(list);                  }              }
Magic Number,EventStore.Core.Index,HashListMemTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\HashListMemTable.cs,TryGetLatestEntry,The following statement contains a magic number: if (_hash.TryGetValue(hash' out list))              {                  if (!Monitor.TryEnter(list' 10000))                      throw new UnableToAcquireLockInReasonableTimeException();                  try                  {                      var latest = list.Keys[list.Count - 1];                      entry = new IndexEntry(hash' latest.EvNum' latest.LogPos);                      return true;                  }                  finally                  {                      Monitor.Exit(list);                  }              }
Magic Number,EventStore.Core.Index,HashListMemTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\HashListMemTable.cs,TryGetOldestEntry,The following statement contains a magic number: if (_hash.TryGetValue(hash' out list))              {                  if (!Monitor.TryEnter(list' 10000))                      throw new UnableToAcquireLockInReasonableTimeException();                  try                  {                      var oldest = list.Keys[0];                      entry = new IndexEntry(hash' oldest.EvNum' oldest.LogPos);                      return true;                  }                  finally                  {                      Monitor.Exit(list);                  }              }
Magic Number,EventStore.Core.Index,HashListMemTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\HashListMemTable.cs,GetRange,The following statement contains a magic number: if (_hash.TryGetValue(hash' out list))              {                  if (!Monitor.TryEnter(list' 10000)) throw new UnableToAcquireLockInReasonableTimeException();                  try                  {                      var endIdx = list.UpperBound(new Entry(endNumber' long.MaxValue));                      for (int i = endIdx; i >= 0; i--)                      {                          var key = list.Keys[i];                          if (key.EvNum < startNumber || ret.Count == limit)                              break;                          ret.Add(new IndexEntry(hash' version: key.EvNum' position: key.LogPos));                      }                  }                  finally                  {                      Monitor.Exit(list);                  }              }
Magic Number,EventStore.Core.Index,HashListMemTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\HashListMemTable.cs,GetHash,The following statement contains a magic number: return _version == PTableVersions.IndexV1 ? hash >> 32 : hash;
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,PTable,The following statement contains a magic number: try              {                  readerWorkItem.Stream.Seek(0' SeekOrigin.Begin);                  var header = PTableHeader.FromStream(readerWorkItem.Stream);                  if ((header.Version != PTableVersions.IndexV1) &&                      (header.Version != PTableVersions.IndexV2) &&                      (header.Version != PTableVersions.IndexV3) &&                      (header.Version != PTableVersions.IndexV4))                      throw new CorruptIndexException(new WrongFileVersionException(_filename' header.Version' Version));                  _version = header.Version;                    if (_version == PTableVersions.IndexV1)                  {                      _indexEntrySize = IndexEntryV1Size;                      _indexKeySize = IndexKeyV1Size;                  }                  if (_version == PTableVersions.IndexV2)                  {                      _indexEntrySize = IndexEntryV2Size;                      _indexKeySize = IndexKeyV2Size;                  }                  if (_version == PTableVersions.IndexV3)                  {                      _indexEntrySize = IndexEntryV3Size;                      _indexKeySize = IndexKeyV3Size;                  }                    if (_version >= PTableVersions.IndexV4)                  {                      //read the PTable footer                      var previousPosition = readerWorkItem.Stream.Position;                      readerWorkItem.Stream.Seek(readerWorkItem.Stream.Length - MD5Size - PTableFooter.GetSize(_version)' SeekOrigin.Begin);                      var footer = PTableFooter.FromStream(readerWorkItem.Stream);                      if (footer.Version != header.Version)                          throw new CorruptIndexException(String.Format("PTable header/footer version mismatch: {0}/{1}"'header.Version'footer.Version)' new InvalidFileException("Invalid PTable file."));                        if(_version == PTableVersions.IndexV4){                          _indexEntrySize = IndexEntryV4Size;                          _indexKeySize = IndexKeyV4Size;                      }                      else                          throw new InvalidOperationException("Unknown PTable version: "+_version);                        _midpointsCached = footer.NumMidpointsCached;                      _midpointsCacheSize = _midpointsCached*_indexEntrySize;                      readerWorkItem.Stream.Seek(previousPosition' SeekOrigin.Begin);                  }                    long indexEntriesTotalSize = (_size - PTableHeader.Size - _midpointsCacheSize - PTableFooter.GetSize(_version) - MD5Size);                    if(indexEntriesTotalSize < 0){                      throw new CorruptIndexException(String.Format("Total size of index entries < 0: {0}. _size: {1}' header size: {2}' _midpointsCacheSize: {3}' footer size: {4}' md5 size: {5}"'indexEntriesTotalSize'_size'PTableHeader.Size'_midpointsCacheSize'PTableFooter.GetSize(_version)'MD5Size));                  }                  else if(indexEntriesTotalSize % _indexEntrySize != 0){                      throw new CorruptIndexException(String.Format("Total size of index entries: {0} is not divisible by index entry size: {1}"'indexEntriesTotalSize' _indexEntrySize));                  }                    _count = indexEntriesTotalSize / _indexEntrySize;                    if(_version>=PTableVersions.IndexV4 && _count>0 && _midpointsCached < 2){                      //if there is at least 1 index entry with version>=4' there should always be at least 2 midpoints cached                      throw new CorruptIndexException(String.Format("Less than 2 midpoints cached in PTable. Index entries: {0}' Midpoints cached: {1}"'_count'_midpointsCached));                  }                  else if(_count>=2 && _midpointsCached > _count){                      //if there are at least 2 index entries' midpoints count should be at most the number of index entries                      throw new CorruptIndexException(String.Format("More midpoints cached in PTable than index entries. Midpoints: {0} ' Index entries: {1}"'_midpointsCached' _count));                  }                    if (Count == 0)                  {                      _minEntry = new IndexEntryKey(ulong.MaxValue' long.MaxValue);                      _maxEntry = new IndexEntryKey(ulong.MinValue' long.MinValue);                  }                  else                  {                      var minEntry = ReadEntry(_indexEntrySize' Count - 1' readerWorkItem' _version);                      _minEntry = new IndexEntryKey(minEntry.Stream' minEntry.Version);                      var maxEntry = ReadEntry(_indexEntrySize' 0' readerWorkItem' _version);                      _maxEntry = new IndexEntryKey(maxEntry.Stream' maxEntry.Version);                  }              }              catch (Exception)              {                  Dispose();                  throw;              }              finally              {                  ReturnWorkItem(readerWorkItem);              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,PTable,The following statement contains a magic number: try              {                  readerWorkItem.Stream.Seek(0' SeekOrigin.Begin);                  var header = PTableHeader.FromStream(readerWorkItem.Stream);                  if ((header.Version != PTableVersions.IndexV1) &&                      (header.Version != PTableVersions.IndexV2) &&                      (header.Version != PTableVersions.IndexV3) &&                      (header.Version != PTableVersions.IndexV4))                      throw new CorruptIndexException(new WrongFileVersionException(_filename' header.Version' Version));                  _version = header.Version;                    if (_version == PTableVersions.IndexV1)                  {                      _indexEntrySize = IndexEntryV1Size;                      _indexKeySize = IndexKeyV1Size;                  }                  if (_version == PTableVersions.IndexV2)                  {                      _indexEntrySize = IndexEntryV2Size;                      _indexKeySize = IndexKeyV2Size;                  }                  if (_version == PTableVersions.IndexV3)                  {                      _indexEntrySize = IndexEntryV3Size;                      _indexKeySize = IndexKeyV3Size;                  }                    if (_version >= PTableVersions.IndexV4)                  {                      //read the PTable footer                      var previousPosition = readerWorkItem.Stream.Position;                      readerWorkItem.Stream.Seek(readerWorkItem.Stream.Length - MD5Size - PTableFooter.GetSize(_version)' SeekOrigin.Begin);                      var footer = PTableFooter.FromStream(readerWorkItem.Stream);                      if (footer.Version != header.Version)                          throw new CorruptIndexException(String.Format("PTable header/footer version mismatch: {0}/{1}"'header.Version'footer.Version)' new InvalidFileException("Invalid PTable file."));                        if(_version == PTableVersions.IndexV4){                          _indexEntrySize = IndexEntryV4Size;                          _indexKeySize = IndexKeyV4Size;                      }                      else                          throw new InvalidOperationException("Unknown PTable version: "+_version);                        _midpointsCached = footer.NumMidpointsCached;                      _midpointsCacheSize = _midpointsCached*_indexEntrySize;                      readerWorkItem.Stream.Seek(previousPosition' SeekOrigin.Begin);                  }                    long indexEntriesTotalSize = (_size - PTableHeader.Size - _midpointsCacheSize - PTableFooter.GetSize(_version) - MD5Size);                    if(indexEntriesTotalSize < 0){                      throw new CorruptIndexException(String.Format("Total size of index entries < 0: {0}. _size: {1}' header size: {2}' _midpointsCacheSize: {3}' footer size: {4}' md5 size: {5}"'indexEntriesTotalSize'_size'PTableHeader.Size'_midpointsCacheSize'PTableFooter.GetSize(_version)'MD5Size));                  }                  else if(indexEntriesTotalSize % _indexEntrySize != 0){                      throw new CorruptIndexException(String.Format("Total size of index entries: {0} is not divisible by index entry size: {1}"'indexEntriesTotalSize' _indexEntrySize));                  }                    _count = indexEntriesTotalSize / _indexEntrySize;                    if(_version>=PTableVersions.IndexV4 && _count>0 && _midpointsCached < 2){                      //if there is at least 1 index entry with version>=4' there should always be at least 2 midpoints cached                      throw new CorruptIndexException(String.Format("Less than 2 midpoints cached in PTable. Index entries: {0}' Midpoints cached: {1}"'_count'_midpointsCached));                  }                  else if(_count>=2 && _midpointsCached > _count){                      //if there are at least 2 index entries' midpoints count should be at most the number of index entries                      throw new CorruptIndexException(String.Format("More midpoints cached in PTable than index entries. Midpoints: {0} ' Index entries: {1}"'_midpointsCached' _count));                  }                    if (Count == 0)                  {                      _minEntry = new IndexEntryKey(ulong.MaxValue' long.MaxValue);                      _maxEntry = new IndexEntryKey(ulong.MinValue' long.MinValue);                  }                  else                  {                      var minEntry = ReadEntry(_indexEntrySize' Count - 1' readerWorkItem' _version);                      _minEntry = new IndexEntryKey(minEntry.Stream' minEntry.Version);                      var maxEntry = ReadEntry(_indexEntrySize' 0' readerWorkItem' _version);                      _maxEntry = new IndexEntryKey(maxEntry.Stream' maxEntry.Version);                  }              }              catch (Exception)              {                  Dispose();                  throw;              }              finally              {                  ReturnWorkItem(readerWorkItem);              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: if (depth < 0 || depth > 30)                  throw new ArgumentOutOfRangeException("depth");
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: using (var stream = UnbufferedFileStream.Create(_filename' FileMode.Open' FileAccess.Read' FileShare.Read' false' 4096' 4096' false' 4096))              {  #endif                  try {                      int midpointsCount;                      Midpoint[] midpoints;                      using (MD5 md5 = MD5.Create())                      {                          try                          {                              midpointsCount = (int)Math.Max(2L' Math.Min((long)1 << depth' count));                              midpoints = new Midpoint[midpointsCount];                          }                          catch (OutOfMemoryException exc)                          {                              throw new PossibleToHandleOutOfMemoryException("Failed to allocate memory for Midpoint cache."' exc);                          }                            if(skipIndexVerify && (_version >= PTableVersions.IndexV4)){                              if(_midpointsCached == midpointsCount){                                  //index verification is disabled and cached midpoints with the same depth requested are available                                  //so' we can load them directly from the PTable file                                  Log.Debug("Loading {0} cached midpoints from PTable"'_midpointsCached);                                  long startOffset = stream.Length - MD5Size - PTableFooter.GetSize(_version) - _midpointsCacheSize;                                  stream.Seek(startOffset'SeekOrigin.Begin);                                  for(uint k=0;k<_midpointsCached;k++){                                      stream.Read(buffer' 0' _indexEntrySize);                                      IndexEntryKey key;                                      long index;                                      if(_version == PTableVersions.IndexV4){                                          key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 8)' BitConverter.ToInt64(buffer' 0));                                          index = BitConverter.ToInt64(buffer'8+8);                                      }                                      else                                          throw new InvalidOperationException("Unknown PTable version: "+_version);                                      midpoints[k] = new Midpoint(key' index);                                        if(k>0){                                          if(midpoints[k].Key.GreaterThan(midpoints[k-1].Key)){                                              throw new CorruptIndexException(String.Format("Index entry key for midpoint {0} (stream: {1}' version: {2}) < index entry key for midpoint {3} (stream: {4}' version: {5})"'k-1'midpoints[k-1].Key.Stream'midpoints[k-1].Key.Version'k'midpoints[k].Key.Stream'midpoints[k].Key.Version));                                          }                                          else if(midpoints[k-1].ItemIndex > midpoints[k].ItemIndex){                                              throw new CorruptIndexException(String.Format("Item index for midpoint {0} ({1}) > Item index for midpoint {2} ({3})"'k-1'midpoints[k-1].ItemIndex'k'midpoints[k].ItemIndex));                                          }                                      }                                  }                                    return midpoints;                              }                              else                                  Log.Debug("Skipping loading of cached midpoints from PTable due to count mismatch' cached midpoints: {0} / required midpoints: {1}"'_midpointsCached' midpointsCount);                          }                            if(!skipIndexVerify){                              stream.Seek(0' SeekOrigin.Begin);                              stream.Read(buffer' 0' PTableHeader.Size);                              md5.TransformBlock(buffer' 0' PTableHeader.Size' null' 0);                          }                            long previousNextIndex = long.MinValue;                          var previousKey = new IndexEntryKey(long.MaxValue' long.MaxValue);                          for (long k = 0; k < midpointsCount; ++k)                          {                              var nextIndex = GetMidpointIndex(k'count'midpointsCount);                              if (previousNextIndex != nextIndex) {                                  if(!skipIndexVerify){                                      ReadUntilWithMd5(PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);                                      stream.Read(buffer' 0' _indexKeySize);                                      md5.TransformBlock(buffer' 0' _indexKeySize' null' 0);                                  }                                  else{                                      stream.Seek(PTableHeader.Size + _indexEntrySize * nextIndex' SeekOrigin.Begin);                                      stream.Read(buffer' 0' _indexKeySize);                                  }                                    IndexEntryKey key;                                  if (_version == PTableVersions.IndexV1)                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt32(buffer' 4)' BitConverter.ToInt32(buffer' 0));                                  }                                  else if (_version == PTableVersions.IndexV2)                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 4)' BitConverter.ToInt32(buffer' 0));                                  }                                  else                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 8)' BitConverter.ToInt64(buffer' 0));                                  }                                  midpoints[k] = new Midpoint(key' nextIndex);                                  previousNextIndex = nextIndex;                                  previousKey = key;                              } else {                                  midpoints[k] = new Midpoint(previousKey' previousNextIndex);                              }                                if(k>0){                                  if(midpoints[k].Key.GreaterThan(midpoints[k-1].Key)){                                      throw new CorruptIndexException(String.Format("Index entry key for midpoint {0} (stream: {1}' version: {2}) < index entry key for midpoint {3} (stream: {4}' version: {5})"'k-1'midpoints[k-1].Key.Stream'midpoints[k-1].Key.Version'k'midpoints[k].Key.Stream'midpoints[k].Key.Version));                                  }                                  else if(midpoints[k-1].ItemIndex > midpoints[k].ItemIndex){                                      throw new CorruptIndexException(String.Format("Item index for midpoint {0} ({1}) > Item index for midpoint {2} ({3})"'k-1'midpoints[k-1].ItemIndex'k'midpoints[k].ItemIndex));                                  }                              }                          }                            if(!skipIndexVerify){                              ReadUntilWithMd5(stream.Length - MD5Size' stream' md5);                              //verify hash (should be at stream.length - MD5Size)                              md5.TransformFinalBlock(Empty.ByteArray' 0' 0);                              var fileHash = new byte[MD5Size];                              stream.Read(fileHash' 0' MD5Size);                              ValidateHash(md5.Hash' fileHash);                          }                            return midpoints;                      }                  }                  catch                  {                      Dispose();                      throw;                  }              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: using (var stream = UnbufferedFileStream.Create(_filename' FileMode.Open' FileAccess.Read' FileShare.Read' false' 4096' 4096' false' 4096))              {  #endif                  try {                      int midpointsCount;                      Midpoint[] midpoints;                      using (MD5 md5 = MD5.Create())                      {                          try                          {                              midpointsCount = (int)Math.Max(2L' Math.Min((long)1 << depth' count));                              midpoints = new Midpoint[midpointsCount];                          }                          catch (OutOfMemoryException exc)                          {                              throw new PossibleToHandleOutOfMemoryException("Failed to allocate memory for Midpoint cache."' exc);                          }                            if(skipIndexVerify && (_version >= PTableVersions.IndexV4)){                              if(_midpointsCached == midpointsCount){                                  //index verification is disabled and cached midpoints with the same depth requested are available                                  //so' we can load them directly from the PTable file                                  Log.Debug("Loading {0} cached midpoints from PTable"'_midpointsCached);                                  long startOffset = stream.Length - MD5Size - PTableFooter.GetSize(_version) - _midpointsCacheSize;                                  stream.Seek(startOffset'SeekOrigin.Begin);                                  for(uint k=0;k<_midpointsCached;k++){                                      stream.Read(buffer' 0' _indexEntrySize);                                      IndexEntryKey key;                                      long index;                                      if(_version == PTableVersions.IndexV4){                                          key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 8)' BitConverter.ToInt64(buffer' 0));                                          index = BitConverter.ToInt64(buffer'8+8);                                      }                                      else                                          throw new InvalidOperationException("Unknown PTable version: "+_version);                                      midpoints[k] = new Midpoint(key' index);                                        if(k>0){                                          if(midpoints[k].Key.GreaterThan(midpoints[k-1].Key)){                                              throw new CorruptIndexException(String.Format("Index entry key for midpoint {0} (stream: {1}' version: {2}) < index entry key for midpoint {3} (stream: {4}' version: {5})"'k-1'midpoints[k-1].Key.Stream'midpoints[k-1].Key.Version'k'midpoints[k].Key.Stream'midpoints[k].Key.Version));                                          }                                          else if(midpoints[k-1].ItemIndex > midpoints[k].ItemIndex){                                              throw new CorruptIndexException(String.Format("Item index for midpoint {0} ({1}) > Item index for midpoint {2} ({3})"'k-1'midpoints[k-1].ItemIndex'k'midpoints[k].ItemIndex));                                          }                                      }                                  }                                    return midpoints;                              }                              else                                  Log.Debug("Skipping loading of cached midpoints from PTable due to count mismatch' cached midpoints: {0} / required midpoints: {1}"'_midpointsCached' midpointsCount);                          }                            if(!skipIndexVerify){                              stream.Seek(0' SeekOrigin.Begin);                              stream.Read(buffer' 0' PTableHeader.Size);                              md5.TransformBlock(buffer' 0' PTableHeader.Size' null' 0);                          }                            long previousNextIndex = long.MinValue;                          var previousKey = new IndexEntryKey(long.MaxValue' long.MaxValue);                          for (long k = 0; k < midpointsCount; ++k)                          {                              var nextIndex = GetMidpointIndex(k'count'midpointsCount);                              if (previousNextIndex != nextIndex) {                                  if(!skipIndexVerify){                                      ReadUntilWithMd5(PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);                                      stream.Read(buffer' 0' _indexKeySize);                                      md5.TransformBlock(buffer' 0' _indexKeySize' null' 0);                                  }                                  else{                                      stream.Seek(PTableHeader.Size + _indexEntrySize * nextIndex' SeekOrigin.Begin);                                      stream.Read(buffer' 0' _indexKeySize);                                  }                                    IndexEntryKey key;                                  if (_version == PTableVersions.IndexV1)                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt32(buffer' 4)' BitConverter.ToInt32(buffer' 0));                                  }                                  else if (_version == PTableVersions.IndexV2)                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 4)' BitConverter.ToInt32(buffer' 0));                                  }                                  else                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 8)' BitConverter.ToInt64(buffer' 0));                                  }                                  midpoints[k] = new Midpoint(key' nextIndex);                                  previousNextIndex = nextIndex;                                  previousKey = key;                              } else {                                  midpoints[k] = new Midpoint(previousKey' previousNextIndex);                              }                                if(k>0){                                  if(midpoints[k].Key.GreaterThan(midpoints[k-1].Key)){                                      throw new CorruptIndexException(String.Format("Index entry key for midpoint {0} (stream: {1}' version: {2}) < index entry key for midpoint {3} (stream: {4}' version: {5})"'k-1'midpoints[k-1].Key.Stream'midpoints[k-1].Key.Version'k'midpoints[k].Key.Stream'midpoints[k].Key.Version));                                  }                                  else if(midpoints[k-1].ItemIndex > midpoints[k].ItemIndex){                                      throw new CorruptIndexException(String.Format("Item index for midpoint {0} ({1}) > Item index for midpoint {2} ({3})"'k-1'midpoints[k-1].ItemIndex'k'midpoints[k].ItemIndex));                                  }                              }                          }                            if(!skipIndexVerify){                              ReadUntilWithMd5(stream.Length - MD5Size' stream' md5);                              //verify hash (should be at stream.length - MD5Size)                              md5.TransformFinalBlock(Empty.ByteArray' 0' 0);                              var fileHash = new byte[MD5Size];                              stream.Read(fileHash' 0' MD5Size);                              ValidateHash(md5.Hash' fileHash);                          }                            return midpoints;                      }                  }                  catch                  {                      Dispose();                      throw;                  }              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: using (var stream = UnbufferedFileStream.Create(_filename' FileMode.Open' FileAccess.Read' FileShare.Read' false' 4096' 4096' false' 4096))              {  #endif                  try {                      int midpointsCount;                      Midpoint[] midpoints;                      using (MD5 md5 = MD5.Create())                      {                          try                          {                              midpointsCount = (int)Math.Max(2L' Math.Min((long)1 << depth' count));                              midpoints = new Midpoint[midpointsCount];                          }                          catch (OutOfMemoryException exc)                          {                              throw new PossibleToHandleOutOfMemoryException("Failed to allocate memory for Midpoint cache."' exc);                          }                            if(skipIndexVerify && (_version >= PTableVersions.IndexV4)){                              if(_midpointsCached == midpointsCount){                                  //index verification is disabled and cached midpoints with the same depth requested are available                                  //so' we can load them directly from the PTable file                                  Log.Debug("Loading {0} cached midpoints from PTable"'_midpointsCached);                                  long startOffset = stream.Length - MD5Size - PTableFooter.GetSize(_version) - _midpointsCacheSize;                                  stream.Seek(startOffset'SeekOrigin.Begin);                                  for(uint k=0;k<_midpointsCached;k++){                                      stream.Read(buffer' 0' _indexEntrySize);                                      IndexEntryKey key;                                      long index;                                      if(_version == PTableVersions.IndexV4){                                          key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 8)' BitConverter.ToInt64(buffer' 0));                                          index = BitConverter.ToInt64(buffer'8+8);                                      }                                      else                                          throw new InvalidOperationException("Unknown PTable version: "+_version);                                      midpoints[k] = new Midpoint(key' index);                                        if(k>0){                                          if(midpoints[k].Key.GreaterThan(midpoints[k-1].Key)){                                              throw new CorruptIndexException(String.Format("Index entry key for midpoint {0} (stream: {1}' version: {2}) < index entry key for midpoint {3} (stream: {4}' version: {5})"'k-1'midpoints[k-1].Key.Stream'midpoints[k-1].Key.Version'k'midpoints[k].Key.Stream'midpoints[k].Key.Version));                                          }                                          else if(midpoints[k-1].ItemIndex > midpoints[k].ItemIndex){                                              throw new CorruptIndexException(String.Format("Item index for midpoint {0} ({1}) > Item index for midpoint {2} ({3})"'k-1'midpoints[k-1].ItemIndex'k'midpoints[k].ItemIndex));                                          }                                      }                                  }                                    return midpoints;                              }                              else                                  Log.Debug("Skipping loading of cached midpoints from PTable due to count mismatch' cached midpoints: {0} / required midpoints: {1}"'_midpointsCached' midpointsCount);                          }                            if(!skipIndexVerify){                              stream.Seek(0' SeekOrigin.Begin);                              stream.Read(buffer' 0' PTableHeader.Size);                              md5.TransformBlock(buffer' 0' PTableHeader.Size' null' 0);                          }                            long previousNextIndex = long.MinValue;                          var previousKey = new IndexEntryKey(long.MaxValue' long.MaxValue);                          for (long k = 0; k < midpointsCount; ++k)                          {                              var nextIndex = GetMidpointIndex(k'count'midpointsCount);                              if (previousNextIndex != nextIndex) {                                  if(!skipIndexVerify){                                      ReadUntilWithMd5(PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);                                      stream.Read(buffer' 0' _indexKeySize);                                      md5.TransformBlock(buffer' 0' _indexKeySize' null' 0);                                  }                                  else{                                      stream.Seek(PTableHeader.Size + _indexEntrySize * nextIndex' SeekOrigin.Begin);                                      stream.Read(buffer' 0' _indexKeySize);                                  }                                    IndexEntryKey key;                                  if (_version == PTableVersions.IndexV1)                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt32(buffer' 4)' BitConverter.ToInt32(buffer' 0));                                  }                                  else if (_version == PTableVersions.IndexV2)                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 4)' BitConverter.ToInt32(buffer' 0));                                  }                                  else                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 8)' BitConverter.ToInt64(buffer' 0));                                  }                                  midpoints[k] = new Midpoint(key' nextIndex);                                  previousNextIndex = nextIndex;                                  previousKey = key;                              } else {                                  midpoints[k] = new Midpoint(previousKey' previousNextIndex);                              }                                if(k>0){                                  if(midpoints[k].Key.GreaterThan(midpoints[k-1].Key)){                                      throw new CorruptIndexException(String.Format("Index entry key for midpoint {0} (stream: {1}' version: {2}) < index entry key for midpoint {3} (stream: {4}' version: {5})"'k-1'midpoints[k-1].Key.Stream'midpoints[k-1].Key.Version'k'midpoints[k].Key.Stream'midpoints[k].Key.Version));                                  }                                  else if(midpoints[k-1].ItemIndex > midpoints[k].ItemIndex){                                      throw new CorruptIndexException(String.Format("Item index for midpoint {0} ({1}) > Item index for midpoint {2} ({3})"'k-1'midpoints[k-1].ItemIndex'k'midpoints[k].ItemIndex));                                  }                              }                          }                            if(!skipIndexVerify){                              ReadUntilWithMd5(stream.Length - MD5Size' stream' md5);                              //verify hash (should be at stream.length - MD5Size)                              md5.TransformFinalBlock(Empty.ByteArray' 0' 0);                              var fileHash = new byte[MD5Size];                              stream.Read(fileHash' 0' MD5Size);                              ValidateHash(md5.Hash' fileHash);                          }                            return midpoints;                      }                  }                  catch                  {                      Dispose();                      throw;                  }              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: using (var stream = UnbufferedFileStream.Create(_filename' FileMode.Open' FileAccess.Read' FileShare.Read' false' 4096' 4096' false' 4096))              {  #endif                  try {                      int midpointsCount;                      Midpoint[] midpoints;                      using (MD5 md5 = MD5.Create())                      {                          try                          {                              midpointsCount = (int)Math.Max(2L' Math.Min((long)1 << depth' count));                              midpoints = new Midpoint[midpointsCount];                          }                          catch (OutOfMemoryException exc)                          {                              throw new PossibleToHandleOutOfMemoryException("Failed to allocate memory for Midpoint cache."' exc);                          }                            if(skipIndexVerify && (_version >= PTableVersions.IndexV4)){                              if(_midpointsCached == midpointsCount){                                  //index verification is disabled and cached midpoints with the same depth requested are available                                  //so' we can load them directly from the PTable file                                  Log.Debug("Loading {0} cached midpoints from PTable"'_midpointsCached);                                  long startOffset = stream.Length - MD5Size - PTableFooter.GetSize(_version) - _midpointsCacheSize;                                  stream.Seek(startOffset'SeekOrigin.Begin);                                  for(uint k=0;k<_midpointsCached;k++){                                      stream.Read(buffer' 0' _indexEntrySize);                                      IndexEntryKey key;                                      long index;                                      if(_version == PTableVersions.IndexV4){                                          key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 8)' BitConverter.ToInt64(buffer' 0));                                          index = BitConverter.ToInt64(buffer'8+8);                                      }                                      else                                          throw new InvalidOperationException("Unknown PTable version: "+_version);                                      midpoints[k] = new Midpoint(key' index);                                        if(k>0){                                          if(midpoints[k].Key.GreaterThan(midpoints[k-1].Key)){                                              throw new CorruptIndexException(String.Format("Index entry key for midpoint {0} (stream: {1}' version: {2}) < index entry key for midpoint {3} (stream: {4}' version: {5})"'k-1'midpoints[k-1].Key.Stream'midpoints[k-1].Key.Version'k'midpoints[k].Key.Stream'midpoints[k].Key.Version));                                          }                                          else if(midpoints[k-1].ItemIndex > midpoints[k].ItemIndex){                                              throw new CorruptIndexException(String.Format("Item index for midpoint {0} ({1}) > Item index for midpoint {2} ({3})"'k-1'midpoints[k-1].ItemIndex'k'midpoints[k].ItemIndex));                                          }                                      }                                  }                                    return midpoints;                              }                              else                                  Log.Debug("Skipping loading of cached midpoints from PTable due to count mismatch' cached midpoints: {0} / required midpoints: {1}"'_midpointsCached' midpointsCount);                          }                            if(!skipIndexVerify){                              stream.Seek(0' SeekOrigin.Begin);                              stream.Read(buffer' 0' PTableHeader.Size);                              md5.TransformBlock(buffer' 0' PTableHeader.Size' null' 0);                          }                            long previousNextIndex = long.MinValue;                          var previousKey = new IndexEntryKey(long.MaxValue' long.MaxValue);                          for (long k = 0; k < midpointsCount; ++k)                          {                              var nextIndex = GetMidpointIndex(k'count'midpointsCount);                              if (previousNextIndex != nextIndex) {                                  if(!skipIndexVerify){                                      ReadUntilWithMd5(PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);                                      stream.Read(buffer' 0' _indexKeySize);                                      md5.TransformBlock(buffer' 0' _indexKeySize' null' 0);                                  }                                  else{                                      stream.Seek(PTableHeader.Size + _indexEntrySize * nextIndex' SeekOrigin.Begin);                                      stream.Read(buffer' 0' _indexKeySize);                                  }                                    IndexEntryKey key;                                  if (_version == PTableVersions.IndexV1)                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt32(buffer' 4)' BitConverter.ToInt32(buffer' 0));                                  }                                  else if (_version == PTableVersions.IndexV2)                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 4)' BitConverter.ToInt32(buffer' 0));                                  }                                  else                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 8)' BitConverter.ToInt64(buffer' 0));                                  }                                  midpoints[k] = new Midpoint(key' nextIndex);                                  previousNextIndex = nextIndex;                                  previousKey = key;                              } else {                                  midpoints[k] = new Midpoint(previousKey' previousNextIndex);                              }                                if(k>0){                                  if(midpoints[k].Key.GreaterThan(midpoints[k-1].Key)){                                      throw new CorruptIndexException(String.Format("Index entry key for midpoint {0} (stream: {1}' version: {2}) < index entry key for midpoint {3} (stream: {4}' version: {5})"'k-1'midpoints[k-1].Key.Stream'midpoints[k-1].Key.Version'k'midpoints[k].Key.Stream'midpoints[k].Key.Version));                                  }                                  else if(midpoints[k-1].ItemIndex > midpoints[k].ItemIndex){                                      throw new CorruptIndexException(String.Format("Item index for midpoint {0} ({1}) > Item index for midpoint {2} ({3})"'k-1'midpoints[k-1].ItemIndex'k'midpoints[k].ItemIndex));                                  }                              }                          }                            if(!skipIndexVerify){                              ReadUntilWithMd5(stream.Length - MD5Size' stream' md5);                              //verify hash (should be at stream.length - MD5Size)                              md5.TransformFinalBlock(Empty.ByteArray' 0' 0);                              var fileHash = new byte[MD5Size];                              stream.Read(fileHash' 0' MD5Size);                              ValidateHash(md5.Hash' fileHash);                          }                            return midpoints;                      }                  }                  catch                  {                      Dispose();                      throw;                  }              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: using (var stream = UnbufferedFileStream.Create(_filename' FileMode.Open' FileAccess.Read' FileShare.Read' false' 4096' 4096' false' 4096))              {  #endif                  try {                      int midpointsCount;                      Midpoint[] midpoints;                      using (MD5 md5 = MD5.Create())                      {                          try                          {                              midpointsCount = (int)Math.Max(2L' Math.Min((long)1 << depth' count));                              midpoints = new Midpoint[midpointsCount];                          }                          catch (OutOfMemoryException exc)                          {                              throw new PossibleToHandleOutOfMemoryException("Failed to allocate memory for Midpoint cache."' exc);                          }                            if(skipIndexVerify && (_version >= PTableVersions.IndexV4)){                              if(_midpointsCached == midpointsCount){                                  //index verification is disabled and cached midpoints with the same depth requested are available                                  //so' we can load them directly from the PTable file                                  Log.Debug("Loading {0} cached midpoints from PTable"'_midpointsCached);                                  long startOffset = stream.Length - MD5Size - PTableFooter.GetSize(_version) - _midpointsCacheSize;                                  stream.Seek(startOffset'SeekOrigin.Begin);                                  for(uint k=0;k<_midpointsCached;k++){                                      stream.Read(buffer' 0' _indexEntrySize);                                      IndexEntryKey key;                                      long index;                                      if(_version == PTableVersions.IndexV4){                                          key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 8)' BitConverter.ToInt64(buffer' 0));                                          index = BitConverter.ToInt64(buffer'8+8);                                      }                                      else                                          throw new InvalidOperationException("Unknown PTable version: "+_version);                                      midpoints[k] = new Midpoint(key' index);                                        if(k>0){                                          if(midpoints[k].Key.GreaterThan(midpoints[k-1].Key)){                                              throw new CorruptIndexException(String.Format("Index entry key for midpoint {0} (stream: {1}' version: {2}) < index entry key for midpoint {3} (stream: {4}' version: {5})"'k-1'midpoints[k-1].Key.Stream'midpoints[k-1].Key.Version'k'midpoints[k].Key.Stream'midpoints[k].Key.Version));                                          }                                          else if(midpoints[k-1].ItemIndex > midpoints[k].ItemIndex){                                              throw new CorruptIndexException(String.Format("Item index for midpoint {0} ({1}) > Item index for midpoint {2} ({3})"'k-1'midpoints[k-1].ItemIndex'k'midpoints[k].ItemIndex));                                          }                                      }                                  }                                    return midpoints;                              }                              else                                  Log.Debug("Skipping loading of cached midpoints from PTable due to count mismatch' cached midpoints: {0} / required midpoints: {1}"'_midpointsCached' midpointsCount);                          }                            if(!skipIndexVerify){                              stream.Seek(0' SeekOrigin.Begin);                              stream.Read(buffer' 0' PTableHeader.Size);                              md5.TransformBlock(buffer' 0' PTableHeader.Size' null' 0);                          }                            long previousNextIndex = long.MinValue;                          var previousKey = new IndexEntryKey(long.MaxValue' long.MaxValue);                          for (long k = 0; k < midpointsCount; ++k)                          {                              var nextIndex = GetMidpointIndex(k'count'midpointsCount);                              if (previousNextIndex != nextIndex) {                                  if(!skipIndexVerify){                                      ReadUntilWithMd5(PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);                                      stream.Read(buffer' 0' _indexKeySize);                                      md5.TransformBlock(buffer' 0' _indexKeySize' null' 0);                                  }                                  else{                                      stream.Seek(PTableHeader.Size + _indexEntrySize * nextIndex' SeekOrigin.Begin);                                      stream.Read(buffer' 0' _indexKeySize);                                  }                                    IndexEntryKey key;                                  if (_version == PTableVersions.IndexV1)                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt32(buffer' 4)' BitConverter.ToInt32(buffer' 0));                                  }                                  else if (_version == PTableVersions.IndexV2)                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 4)' BitConverter.ToInt32(buffer' 0));                                  }                                  else                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 8)' BitConverter.ToInt64(buffer' 0));                                  }                                  midpoints[k] = new Midpoint(key' nextIndex);                                  previousNextIndex = nextIndex;                                  previousKey = key;                              } else {                                  midpoints[k] = new Midpoint(previousKey' previousNextIndex);                              }                                if(k>0){                                  if(midpoints[k].Key.GreaterThan(midpoints[k-1].Key)){                                      throw new CorruptIndexException(String.Format("Index entry key for midpoint {0} (stream: {1}' version: {2}) < index entry key for midpoint {3} (stream: {4}' version: {5})"'k-1'midpoints[k-1].Key.Stream'midpoints[k-1].Key.Version'k'midpoints[k].Key.Stream'midpoints[k].Key.Version));                                  }                                  else if(midpoints[k-1].ItemIndex > midpoints[k].ItemIndex){                                      throw new CorruptIndexException(String.Format("Item index for midpoint {0} ({1}) > Item index for midpoint {2} ({3})"'k-1'midpoints[k-1].ItemIndex'k'midpoints[k].ItemIndex));                                  }                              }                          }                            if(!skipIndexVerify){                              ReadUntilWithMd5(stream.Length - MD5Size' stream' md5);                              //verify hash (should be at stream.length - MD5Size)                              md5.TransformFinalBlock(Empty.ByteArray' 0' 0);                              var fileHash = new byte[MD5Size];                              stream.Read(fileHash' 0' MD5Size);                              ValidateHash(md5.Hash' fileHash);                          }                            return midpoints;                      }                  }                  catch                  {                      Dispose();                      throw;                  }              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: using (var stream = UnbufferedFileStream.Create(_filename' FileMode.Open' FileAccess.Read' FileShare.Read' false' 4096' 4096' false' 4096))              {  #endif                  try {                      int midpointsCount;                      Midpoint[] midpoints;                      using (MD5 md5 = MD5.Create())                      {                          try                          {                              midpointsCount = (int)Math.Max(2L' Math.Min((long)1 << depth' count));                              midpoints = new Midpoint[midpointsCount];                          }                          catch (OutOfMemoryException exc)                          {                              throw new PossibleToHandleOutOfMemoryException("Failed to allocate memory for Midpoint cache."' exc);                          }                            if(skipIndexVerify && (_version >= PTableVersions.IndexV4)){                              if(_midpointsCached == midpointsCount){                                  //index verification is disabled and cached midpoints with the same depth requested are available                                  //so' we can load them directly from the PTable file                                  Log.Debug("Loading {0} cached midpoints from PTable"'_midpointsCached);                                  long startOffset = stream.Length - MD5Size - PTableFooter.GetSize(_version) - _midpointsCacheSize;                                  stream.Seek(startOffset'SeekOrigin.Begin);                                  for(uint k=0;k<_midpointsCached;k++){                                      stream.Read(buffer' 0' _indexEntrySize);                                      IndexEntryKey key;                                      long index;                                      if(_version == PTableVersions.IndexV4){                                          key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 8)' BitConverter.ToInt64(buffer' 0));                                          index = BitConverter.ToInt64(buffer'8+8);                                      }                                      else                                          throw new InvalidOperationException("Unknown PTable version: "+_version);                                      midpoints[k] = new Midpoint(key' index);                                        if(k>0){                                          if(midpoints[k].Key.GreaterThan(midpoints[k-1].Key)){                                              throw new CorruptIndexException(String.Format("Index entry key for midpoint {0} (stream: {1}' version: {2}) < index entry key for midpoint {3} (stream: {4}' version: {5})"'k-1'midpoints[k-1].Key.Stream'midpoints[k-1].Key.Version'k'midpoints[k].Key.Stream'midpoints[k].Key.Version));                                          }                                          else if(midpoints[k-1].ItemIndex > midpoints[k].ItemIndex){                                              throw new CorruptIndexException(String.Format("Item index for midpoint {0} ({1}) > Item index for midpoint {2} ({3})"'k-1'midpoints[k-1].ItemIndex'k'midpoints[k].ItemIndex));                                          }                                      }                                  }                                    return midpoints;                              }                              else                                  Log.Debug("Skipping loading of cached midpoints from PTable due to count mismatch' cached midpoints: {0} / required midpoints: {1}"'_midpointsCached' midpointsCount);                          }                            if(!skipIndexVerify){                              stream.Seek(0' SeekOrigin.Begin);                              stream.Read(buffer' 0' PTableHeader.Size);                              md5.TransformBlock(buffer' 0' PTableHeader.Size' null' 0);                          }                            long previousNextIndex = long.MinValue;                          var previousKey = new IndexEntryKey(long.MaxValue' long.MaxValue);                          for (long k = 0; k < midpointsCount; ++k)                          {                              var nextIndex = GetMidpointIndex(k'count'midpointsCount);                              if (previousNextIndex != nextIndex) {                                  if(!skipIndexVerify){                                      ReadUntilWithMd5(PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);                                      stream.Read(buffer' 0' _indexKeySize);                                      md5.TransformBlock(buffer' 0' _indexKeySize' null' 0);                                  }                                  else{                                      stream.Seek(PTableHeader.Size + _indexEntrySize * nextIndex' SeekOrigin.Begin);                                      stream.Read(buffer' 0' _indexKeySize);                                  }                                    IndexEntryKey key;                                  if (_version == PTableVersions.IndexV1)                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt32(buffer' 4)' BitConverter.ToInt32(buffer' 0));                                  }                                  else if (_version == PTableVersions.IndexV2)                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 4)' BitConverter.ToInt32(buffer' 0));                                  }                                  else                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 8)' BitConverter.ToInt64(buffer' 0));                                  }                                  midpoints[k] = new Midpoint(key' nextIndex);                                  previousNextIndex = nextIndex;                                  previousKey = key;                              } else {                                  midpoints[k] = new Midpoint(previousKey' previousNextIndex);                              }                                if(k>0){                                  if(midpoints[k].Key.GreaterThan(midpoints[k-1].Key)){                                      throw new CorruptIndexException(String.Format("Index entry key for midpoint {0} (stream: {1}' version: {2}) < index entry key for midpoint {3} (stream: {4}' version: {5})"'k-1'midpoints[k-1].Key.Stream'midpoints[k-1].Key.Version'k'midpoints[k].Key.Stream'midpoints[k].Key.Version));                                  }                                  else if(midpoints[k-1].ItemIndex > midpoints[k].ItemIndex){                                      throw new CorruptIndexException(String.Format("Item index for midpoint {0} ({1}) > Item index for midpoint {2} ({3})"'k-1'midpoints[k-1].ItemIndex'k'midpoints[k].ItemIndex));                                  }                              }                          }                            if(!skipIndexVerify){                              ReadUntilWithMd5(stream.Length - MD5Size' stream' md5);                              //verify hash (should be at stream.length - MD5Size)                              md5.TransformFinalBlock(Empty.ByteArray' 0' 0);                              var fileHash = new byte[MD5Size];                              stream.Read(fileHash' 0' MD5Size);                              ValidateHash(md5.Hash' fileHash);                          }                            return midpoints;                      }                  }                  catch                  {                      Dispose();                      throw;                  }              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: using (var stream = UnbufferedFileStream.Create(_filename' FileMode.Open' FileAccess.Read' FileShare.Read' false' 4096' 4096' false' 4096))              {  #endif                  try {                      int midpointsCount;                      Midpoint[] midpoints;                      using (MD5 md5 = MD5.Create())                      {                          try                          {                              midpointsCount = (int)Math.Max(2L' Math.Min((long)1 << depth' count));                              midpoints = new Midpoint[midpointsCount];                          }                          catch (OutOfMemoryException exc)                          {                              throw new PossibleToHandleOutOfMemoryException("Failed to allocate memory for Midpoint cache."' exc);                          }                            if(skipIndexVerify && (_version >= PTableVersions.IndexV4)){                              if(_midpointsCached == midpointsCount){                                  //index verification is disabled and cached midpoints with the same depth requested are available                                  //so' we can load them directly from the PTable file                                  Log.Debug("Loading {0} cached midpoints from PTable"'_midpointsCached);                                  long startOffset = stream.Length - MD5Size - PTableFooter.GetSize(_version) - _midpointsCacheSize;                                  stream.Seek(startOffset'SeekOrigin.Begin);                                  for(uint k=0;k<_midpointsCached;k++){                                      stream.Read(buffer' 0' _indexEntrySize);                                      IndexEntryKey key;                                      long index;                                      if(_version == PTableVersions.IndexV4){                                          key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 8)' BitConverter.ToInt64(buffer' 0));                                          index = BitConverter.ToInt64(buffer'8+8);                                      }                                      else                                          throw new InvalidOperationException("Unknown PTable version: "+_version);                                      midpoints[k] = new Midpoint(key' index);                                        if(k>0){                                          if(midpoints[k].Key.GreaterThan(midpoints[k-1].Key)){                                              throw new CorruptIndexException(String.Format("Index entry key for midpoint {0} (stream: {1}' version: {2}) < index entry key for midpoint {3} (stream: {4}' version: {5})"'k-1'midpoints[k-1].Key.Stream'midpoints[k-1].Key.Version'k'midpoints[k].Key.Stream'midpoints[k].Key.Version));                                          }                                          else if(midpoints[k-1].ItemIndex > midpoints[k].ItemIndex){                                              throw new CorruptIndexException(String.Format("Item index for midpoint {0} ({1}) > Item index for midpoint {2} ({3})"'k-1'midpoints[k-1].ItemIndex'k'midpoints[k].ItemIndex));                                          }                                      }                                  }                                    return midpoints;                              }                              else                                  Log.Debug("Skipping loading of cached midpoints from PTable due to count mismatch' cached midpoints: {0} / required midpoints: {1}"'_midpointsCached' midpointsCount);                          }                            if(!skipIndexVerify){                              stream.Seek(0' SeekOrigin.Begin);                              stream.Read(buffer' 0' PTableHeader.Size);                              md5.TransformBlock(buffer' 0' PTableHeader.Size' null' 0);                          }                            long previousNextIndex = long.MinValue;                          var previousKey = new IndexEntryKey(long.MaxValue' long.MaxValue);                          for (long k = 0; k < midpointsCount; ++k)                          {                              var nextIndex = GetMidpointIndex(k'count'midpointsCount);                              if (previousNextIndex != nextIndex) {                                  if(!skipIndexVerify){                                      ReadUntilWithMd5(PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);                                      stream.Read(buffer' 0' _indexKeySize);                                      md5.TransformBlock(buffer' 0' _indexKeySize' null' 0);                                  }                                  else{                                      stream.Seek(PTableHeader.Size + _indexEntrySize * nextIndex' SeekOrigin.Begin);                                      stream.Read(buffer' 0' _indexKeySize);                                  }                                    IndexEntryKey key;                                  if (_version == PTableVersions.IndexV1)                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt32(buffer' 4)' BitConverter.ToInt32(buffer' 0));                                  }                                  else if (_version == PTableVersions.IndexV2)                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 4)' BitConverter.ToInt32(buffer' 0));                                  }                                  else                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 8)' BitConverter.ToInt64(buffer' 0));                                  }                                  midpoints[k] = new Midpoint(key' nextIndex);                                  previousNextIndex = nextIndex;                                  previousKey = key;                              } else {                                  midpoints[k] = new Midpoint(previousKey' previousNextIndex);                              }                                if(k>0){                                  if(midpoints[k].Key.GreaterThan(midpoints[k-1].Key)){                                      throw new CorruptIndexException(String.Format("Index entry key for midpoint {0} (stream: {1}' version: {2}) < index entry key for midpoint {3} (stream: {4}' version: {5})"'k-1'midpoints[k-1].Key.Stream'midpoints[k-1].Key.Version'k'midpoints[k].Key.Stream'midpoints[k].Key.Version));                                  }                                  else if(midpoints[k-1].ItemIndex > midpoints[k].ItemIndex){                                      throw new CorruptIndexException(String.Format("Item index for midpoint {0} ({1}) > Item index for midpoint {2} ({3})"'k-1'midpoints[k-1].ItemIndex'k'midpoints[k].ItemIndex));                                  }                              }                          }                            if(!skipIndexVerify){                              ReadUntilWithMd5(stream.Length - MD5Size' stream' md5);                              //verify hash (should be at stream.length - MD5Size)                              md5.TransformFinalBlock(Empty.ByteArray' 0' 0);                              var fileHash = new byte[MD5Size];                              stream.Read(fileHash' 0' MD5Size);                              ValidateHash(md5.Hash' fileHash);                          }                            return midpoints;                      }                  }                  catch                  {                      Dispose();                      throw;                  }              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: using (var stream = UnbufferedFileStream.Create(_filename' FileMode.Open' FileAccess.Read' FileShare.Read' false' 4096' 4096' false' 4096))              {  #endif                  try {                      int midpointsCount;                      Midpoint[] midpoints;                      using (MD5 md5 = MD5.Create())                      {                          try                          {                              midpointsCount = (int)Math.Max(2L' Math.Min((long)1 << depth' count));                              midpoints = new Midpoint[midpointsCount];                          }                          catch (OutOfMemoryException exc)                          {                              throw new PossibleToHandleOutOfMemoryException("Failed to allocate memory for Midpoint cache."' exc);                          }                            if(skipIndexVerify && (_version >= PTableVersions.IndexV4)){                              if(_midpointsCached == midpointsCount){                                  //index verification is disabled and cached midpoints with the same depth requested are available                                  //so' we can load them directly from the PTable file                                  Log.Debug("Loading {0} cached midpoints from PTable"'_midpointsCached);                                  long startOffset = stream.Length - MD5Size - PTableFooter.GetSize(_version) - _midpointsCacheSize;                                  stream.Seek(startOffset'SeekOrigin.Begin);                                  for(uint k=0;k<_midpointsCached;k++){                                      stream.Read(buffer' 0' _indexEntrySize);                                      IndexEntryKey key;                                      long index;                                      if(_version == PTableVersions.IndexV4){                                          key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 8)' BitConverter.ToInt64(buffer' 0));                                          index = BitConverter.ToInt64(buffer'8+8);                                      }                                      else                                          throw new InvalidOperationException("Unknown PTable version: "+_version);                                      midpoints[k] = new Midpoint(key' index);                                        if(k>0){                                          if(midpoints[k].Key.GreaterThan(midpoints[k-1].Key)){                                              throw new CorruptIndexException(String.Format("Index entry key for midpoint {0} (stream: {1}' version: {2}) < index entry key for midpoint {3} (stream: {4}' version: {5})"'k-1'midpoints[k-1].Key.Stream'midpoints[k-1].Key.Version'k'midpoints[k].Key.Stream'midpoints[k].Key.Version));                                          }                                          else if(midpoints[k-1].ItemIndex > midpoints[k].ItemIndex){                                              throw new CorruptIndexException(String.Format("Item index for midpoint {0} ({1}) > Item index for midpoint {2} ({3})"'k-1'midpoints[k-1].ItemIndex'k'midpoints[k].ItemIndex));                                          }                                      }                                  }                                    return midpoints;                              }                              else                                  Log.Debug("Skipping loading of cached midpoints from PTable due to count mismatch' cached midpoints: {0} / required midpoints: {1}"'_midpointsCached' midpointsCount);                          }                            if(!skipIndexVerify){                              stream.Seek(0' SeekOrigin.Begin);                              stream.Read(buffer' 0' PTableHeader.Size);                              md5.TransformBlock(buffer' 0' PTableHeader.Size' null' 0);                          }                            long previousNextIndex = long.MinValue;                          var previousKey = new IndexEntryKey(long.MaxValue' long.MaxValue);                          for (long k = 0; k < midpointsCount; ++k)                          {                              var nextIndex = GetMidpointIndex(k'count'midpointsCount);                              if (previousNextIndex != nextIndex) {                                  if(!skipIndexVerify){                                      ReadUntilWithMd5(PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);                                      stream.Read(buffer' 0' _indexKeySize);                                      md5.TransformBlock(buffer' 0' _indexKeySize' null' 0);                                  }                                  else{                                      stream.Seek(PTableHeader.Size + _indexEntrySize * nextIndex' SeekOrigin.Begin);                                      stream.Read(buffer' 0' _indexKeySize);                                  }                                    IndexEntryKey key;                                  if (_version == PTableVersions.IndexV1)                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt32(buffer' 4)' BitConverter.ToInt32(buffer' 0));                                  }                                  else if (_version == PTableVersions.IndexV2)                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 4)' BitConverter.ToInt32(buffer' 0));                                  }                                  else                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 8)' BitConverter.ToInt64(buffer' 0));                                  }                                  midpoints[k] = new Midpoint(key' nextIndex);                                  previousNextIndex = nextIndex;                                  previousKey = key;                              } else {                                  midpoints[k] = new Midpoint(previousKey' previousNextIndex);                              }                                if(k>0){                                  if(midpoints[k].Key.GreaterThan(midpoints[k-1].Key)){                                      throw new CorruptIndexException(String.Format("Index entry key for midpoint {0} (stream: {1}' version: {2}) < index entry key for midpoint {3} (stream: {4}' version: {5})"'k-1'midpoints[k-1].Key.Stream'midpoints[k-1].Key.Version'k'midpoints[k].Key.Stream'midpoints[k].Key.Version));                                  }                                  else if(midpoints[k-1].ItemIndex > midpoints[k].ItemIndex){                                      throw new CorruptIndexException(String.Format("Item index for midpoint {0} ({1}) > Item index for midpoint {2} ({3})"'k-1'midpoints[k-1].ItemIndex'k'midpoints[k].ItemIndex));                                  }                              }                          }                            if(!skipIndexVerify){                              ReadUntilWithMd5(stream.Length - MD5Size' stream' md5);                              //verify hash (should be at stream.length - MD5Size)                              md5.TransformFinalBlock(Empty.ByteArray' 0' 0);                              var fileHash = new byte[MD5Size];                              stream.Read(fileHash' 0' MD5Size);                              ValidateHash(md5.Hash' fileHash);                          }                            return midpoints;                      }                  }                  catch                  {                      Dispose();                      throw;                  }              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,CacheMidpointsAndVerifyHash,The following statement contains a magic number: using (var stream = UnbufferedFileStream.Create(_filename' FileMode.Open' FileAccess.Read' FileShare.Read' false' 4096' 4096' false' 4096))              {  #endif                  try {                      int midpointsCount;                      Midpoint[] midpoints;                      using (MD5 md5 = MD5.Create())                      {                          try                          {                              midpointsCount = (int)Math.Max(2L' Math.Min((long)1 << depth' count));                              midpoints = new Midpoint[midpointsCount];                          }                          catch (OutOfMemoryException exc)                          {                              throw new PossibleToHandleOutOfMemoryException("Failed to allocate memory for Midpoint cache."' exc);                          }                            if(skipIndexVerify && (_version >= PTableVersions.IndexV4)){                              if(_midpointsCached == midpointsCount){                                  //index verification is disabled and cached midpoints with the same depth requested are available                                  //so' we can load them directly from the PTable file                                  Log.Debug("Loading {0} cached midpoints from PTable"'_midpointsCached);                                  long startOffset = stream.Length - MD5Size - PTableFooter.GetSize(_version) - _midpointsCacheSize;                                  stream.Seek(startOffset'SeekOrigin.Begin);                                  for(uint k=0;k<_midpointsCached;k++){                                      stream.Read(buffer' 0' _indexEntrySize);                                      IndexEntryKey key;                                      long index;                                      if(_version == PTableVersions.IndexV4){                                          key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 8)' BitConverter.ToInt64(buffer' 0));                                          index = BitConverter.ToInt64(buffer'8+8);                                      }                                      else                                          throw new InvalidOperationException("Unknown PTable version: "+_version);                                      midpoints[k] = new Midpoint(key' index);                                        if(k>0){                                          if(midpoints[k].Key.GreaterThan(midpoints[k-1].Key)){                                              throw new CorruptIndexException(String.Format("Index entry key for midpoint {0} (stream: {1}' version: {2}) < index entry key for midpoint {3} (stream: {4}' version: {5})"'k-1'midpoints[k-1].Key.Stream'midpoints[k-1].Key.Version'k'midpoints[k].Key.Stream'midpoints[k].Key.Version));                                          }                                          else if(midpoints[k-1].ItemIndex > midpoints[k].ItemIndex){                                              throw new CorruptIndexException(String.Format("Item index for midpoint {0} ({1}) > Item index for midpoint {2} ({3})"'k-1'midpoints[k-1].ItemIndex'k'midpoints[k].ItemIndex));                                          }                                      }                                  }                                    return midpoints;                              }                              else                                  Log.Debug("Skipping loading of cached midpoints from PTable due to count mismatch' cached midpoints: {0} / required midpoints: {1}"'_midpointsCached' midpointsCount);                          }                            if(!skipIndexVerify){                              stream.Seek(0' SeekOrigin.Begin);                              stream.Read(buffer' 0' PTableHeader.Size);                              md5.TransformBlock(buffer' 0' PTableHeader.Size' null' 0);                          }                            long previousNextIndex = long.MinValue;                          var previousKey = new IndexEntryKey(long.MaxValue' long.MaxValue);                          for (long k = 0; k < midpointsCount; ++k)                          {                              var nextIndex = GetMidpointIndex(k'count'midpointsCount);                              if (previousNextIndex != nextIndex) {                                  if(!skipIndexVerify){                                      ReadUntilWithMd5(PTableHeader.Size + _indexEntrySize * nextIndex' stream' md5);                                      stream.Read(buffer' 0' _indexKeySize);                                      md5.TransformBlock(buffer' 0' _indexKeySize' null' 0);                                  }                                  else{                                      stream.Seek(PTableHeader.Size + _indexEntrySize * nextIndex' SeekOrigin.Begin);                                      stream.Read(buffer' 0' _indexKeySize);                                  }                                    IndexEntryKey key;                                  if (_version == PTableVersions.IndexV1)                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt32(buffer' 4)' BitConverter.ToInt32(buffer' 0));                                  }                                  else if (_version == PTableVersions.IndexV2)                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 4)' BitConverter.ToInt32(buffer' 0));                                  }                                  else                                  {                                      key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 8)' BitConverter.ToInt64(buffer' 0));                                  }                                  midpoints[k] = new Midpoint(key' nextIndex);                                  previousNextIndex = nextIndex;                                  previousKey = key;                              } else {                                  midpoints[k] = new Midpoint(previousKey' previousNextIndex);                              }                                if(k>0){                                  if(midpoints[k].Key.GreaterThan(midpoints[k-1].Key)){                                      throw new CorruptIndexException(String.Format("Index entry key for midpoint {0} (stream: {1}' version: {2}) < index entry key for midpoint {3} (stream: {4}' version: {5})"'k-1'midpoints[k-1].Key.Stream'midpoints[k-1].Key.Version'k'midpoints[k].Key.Stream'midpoints[k].Key.Version));                                  }                                  else if(midpoints[k-1].ItemIndex > midpoints[k].ItemIndex){                                      throw new CorruptIndexException(String.Format("Item index for midpoint {0} ({1}) > Item index for midpoint {2} ({3})"'k-1'midpoints[k-1].ItemIndex'k'midpoints[k].ItemIndex));                                  }                              }                          }                            if(!skipIndexVerify){                              ReadUntilWithMd5(stream.Length - MD5Size' stream' md5);                              //verify hash (should be at stream.length - MD5Size)                              md5.TransformFinalBlock(Empty.ByteArray' 0' 0);                              var fileHash = new byte[MD5Size];                              stream.Read(fileHash' 0' MD5Size);                              ValidateHash(md5.Hash' fileHash);                          }                            return midpoints;                      }                  }                  catch                  {                      Dispose();                      throw;                  }              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,TryGetLargestEntry,The following statement contains a magic number: try              {                  IndexEntryKey lowBoundsCheck' highBoundsCheck;                  var recordRange = LocateRecordRange(endKey'out lowBoundsCheck'out highBoundsCheck);                    long low = recordRange.Lower;                  long high = recordRange.Upper;                  while (low < high)                  {                      var mid = low + (high - low) / 2;                      IndexEntry midpoint = ReadEntry(_indexEntrySize' mid' workItem' _version);                      var midpointKey = new IndexEntryKey(midpoint.Stream' midpoint.Version);                        if(midpointKey.GreaterThan(lowBoundsCheck)){                          throw new MaybeCorruptIndexException(String.Format("Midpoint key (stream: {0}' version: {1}) > low bounds check key (stream: {2}' version: {3})"'midpointKey.Stream' midpointKey.Version' lowBoundsCheck.Stream' lowBoundsCheck.Version));                      }                      else if(!midpointKey.GreaterEqualsThan(highBoundsCheck)){                          throw new MaybeCorruptIndexException(String.Format("Midpoint key (stream: {0}' version: {1}) < high bounds check key (stream: {2}' version: {3})"'midpointKey.Stream' midpointKey.Version' highBoundsCheck.Stream' highBoundsCheck.Version));                      }                        if (midpointKey.GreaterThan(endKey)){                          low = mid + 1;                          lowBoundsCheck = midpointKey;                      } else {                          high = mid;                          highBoundsCheck = midpointKey;                      }                  }                    var candEntry = ReadEntry(_indexEntrySize' high' workItem' _version);                  var candKey = new IndexEntryKey(candEntry.Stream' candEntry.Version);                  if (candKey.GreaterThan(endKey))                      throw new MaybeCorruptIndexException(string.Format("candEntry ({0}@{1}) > startKey {2}' stream {3}' startNum {4}' endNum {5}' PTable: {6}."' candEntry.Stream' candEntry.Version' startKey' stream' startNumber' endNumber' Filename));                  if (candKey.SmallerThan(startKey))                      return false;                  entry = candEntry;                  return true;              }              finally              {                  ReturnWorkItem(workItem);              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,TryGetSmallestEntry,The following statement contains a magic number: try              {                  IndexEntryKey lowBoundsCheck' highBoundsCheck;                  var recordRange = LocateRecordRange(startKey' out lowBoundsCheck' out highBoundsCheck);                    long low = recordRange.Lower;                  long high = recordRange.Upper;                  while (low < high)                  {                      var mid = low + (high - low + 1) / 2;                      var midpoint = ReadEntry(_indexEntrySize' mid' workItem' _version);                      var midpointKey = new IndexEntryKey(midpoint.Stream' midpoint.Version);                        if(midpointKey.GreaterThan(lowBoundsCheck)){                          throw new MaybeCorruptIndexException(String.Format("Midpoint key (stream: {0}' version: {1}) > low bounds check key (stream: {2}' version: {3})"'midpointKey.Stream' midpointKey.Version' lowBoundsCheck.Stream' lowBoundsCheck.Version));                      }                      else if(!midpointKey.GreaterEqualsThan(highBoundsCheck)){                          throw new MaybeCorruptIndexException(String.Format("Midpoint key (stream: {0}' version: {1}) < high bounds check key (stream: {2}' version: {3})"'midpointKey.Stream' midpointKey.Version' highBoundsCheck.Stream' highBoundsCheck.Version));                      }                        if (midpointKey.SmallerThan(startKey)){                          high = mid - 1;                          highBoundsCheck = midpointKey;                      }                      else {                          low = mid;                          lowBoundsCheck = midpointKey;                      }                  }                    var candEntry = ReadEntry(_indexEntrySize' high' workItem' _version);                  var candidateKey = new IndexEntryKey(candEntry.Stream' candEntry.Version);                  if (candidateKey.SmallerThan(startKey))                      throw new MaybeCorruptIndexException(string.Format("candEntry ({0}@{1}) < startKey {2}' stream {3}' startNum {4}' endNum {5}' PTable: {6}."' candEntry.Stream' candEntry.Version' startKey' stream' startNumber' endNumber' Filename));                  if (candidateKey.GreaterThan(endKey))                      return false;                  entry = candEntry;                  return true;              }              finally              {                  ReturnWorkItem(workItem);              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,GetRange,The following statement contains a magic number: try              {                  IndexEntryKey lowBoundsCheck' highBoundsCheck;                  var recordRange = LocateRecordRange(endKey' out lowBoundsCheck' out highBoundsCheck);                  long low = recordRange.Lower;                  long high = recordRange.Upper;                  while (low < high)                  {                      var mid = low + (high - low) / 2;                      IndexEntry midpoint = ReadEntry(_indexEntrySize' mid' workItem' _version);                      var midpointKey = new IndexEntryKey(midpoint.Stream' midpoint.Version);                        if(midpointKey.GreaterThan(lowBoundsCheck)){                          throw new MaybeCorruptIndexException(String.Format("Midpoint key (stream: {0}' version: {1}) > low bounds check key (stream: {2}' version: {3})"'midpointKey.Stream' midpointKey.Version' lowBoundsCheck.Stream' lowBoundsCheck.Version));                      }                      else if(!midpointKey.GreaterEqualsThan(highBoundsCheck)){                          throw new MaybeCorruptIndexException(String.Format("Midpoint key (stream: {0}' version: {1}) < high bounds check key (stream: {2}' version: {3})"'midpointKey.Stream' midpointKey.Version' highBoundsCheck.Stream' highBoundsCheck.Version));                      }                        if (midpointKey.SmallerEqualsThan(endKey)){                          high = mid;                          highBoundsCheck = midpointKey;                      }                      else{                          low = mid + 1;                          lowBoundsCheck = midpointKey;                      }                  }                    PositionAtEntry(_indexEntrySize' high' workItem);                  for (long i=high' n=Count; i<n; ++i)                  {                      IndexEntry entry = ReadNextNoSeek(workItem' _version);                      var candidateKey = new IndexEntryKey(entry.Stream' entry.Version);                      if (candidateKey.GreaterThan(endKey))                          throw new MaybeCorruptIndexException(string.Format("entry ({0}@{1}) > endKey {2}' stream {3}' startNum {4}' endNum {5}' PTable: {6}."' entry.Stream' entry.Version' startKey' stream' startNumber' endNumber' Filename));                      if (candidateKey.SmallerThan(startKey))                          return result;                      result.Add(entry);                      if (result.Count == limit) break;                  }                  return result;              }              finally              {                  ReturnWorkItem(workItem);              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,GetHash,The following statement contains a magic number: return _version == PTableVersions.IndexV1 ? hash >> 32 : hash;
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,LowerMidpointBound,The following statement contains a magic number: while (l < r)              {                  long m = l + (r - l + 1) / 2;                  if (midpoints[m].Key.GreaterThan(key))                      l = m;                  else                      r = m - 1;              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,UpperMidpointBound,The following statement contains a magic number: while (l < r)              {                  long m = l + (r - l) / 2;                  if (midpoints[m].Key.SmallerThan(key))                      r = m;                  else                      l = m + 1;              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,MergeTo,The following statement contains a magic number: if (tables.Count == 2)                  return MergeTo2(tables' numIndexEntries' indexEntrySize' outputFile' upgradeHash' existsAt' readRecord' version' cacheDepth' skipIndexVerify);
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,ComputeMidpoints,The following statement contains a magic number: for(int k=0;k<requiredMidpointCount;k++){                  long index = GetMidpointIndex(k'numIndexEntries'requiredMidpointCount);                  if(index == previousIndex){                      midpoints.Add(new Midpoint(previousKey' previousIndex));                  }                  else{                      fs.Seek(PTableHeader.Size + index * indexEntrySize' SeekOrigin.Begin);                      fs.Read(buffer'0'indexKeySize);                      IndexEntryKey key = new IndexEntryKey(BitConverter.ToUInt64(buffer' 8)' BitConverter.ToInt64(buffer' 0));                      midpoints.Add(new Midpoint(key'index));                      previousIndex = index;                      previousKey = key;                  }              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,AppendMidpointRecordTo,The following statement contains a magic number: if(version >= PTableVersions.IndexV4){                  ulong eventStream = midpointEntry.Key.Stream;                  long eventVersion = midpointEntry.Key.Version;                  long itemIndex = midpointEntry.ItemIndex;                    for(int i=0;i<8;i++){                      buffer[i] = (byte)(eventVersion & 0xFF);                      eventVersion >>= 8;                  }                    for(int i=0;i<8;i++){                      buffer[i+8] = (byte)(eventStream & 0xFF);                      eventStream >>= 8;                  }                    for(int i=0;i<8;i++){                      buffer[i+16] = (byte)(itemIndex & 0xFF);                      itemIndex >>= 8;                  }                    stream.Write(buffer' 0' midpointEntrySize);              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,AppendMidpointRecordTo,The following statement contains a magic number: if(version >= PTableVersions.IndexV4){                  ulong eventStream = midpointEntry.Key.Stream;                  long eventVersion = midpointEntry.Key.Version;                  long itemIndex = midpointEntry.ItemIndex;                    for(int i=0;i<8;i++){                      buffer[i] = (byte)(eventVersion & 0xFF);                      eventVersion >>= 8;                  }                    for(int i=0;i<8;i++){                      buffer[i+8] = (byte)(eventStream & 0xFF);                      eventStream >>= 8;                  }                    for(int i=0;i<8;i++){                      buffer[i+16] = (byte)(itemIndex & 0xFF);                      itemIndex >>= 8;                  }                    stream.Write(buffer' 0' midpointEntrySize);              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,AppendMidpointRecordTo,The following statement contains a magic number: if(version >= PTableVersions.IndexV4){                  ulong eventStream = midpointEntry.Key.Stream;                  long eventVersion = midpointEntry.Key.Version;                  long itemIndex = midpointEntry.ItemIndex;                    for(int i=0;i<8;i++){                      buffer[i] = (byte)(eventVersion & 0xFF);                      eventVersion >>= 8;                  }                    for(int i=0;i<8;i++){                      buffer[i+8] = (byte)(eventStream & 0xFF);                      eventStream >>= 8;                  }                    for(int i=0;i<8;i++){                      buffer[i+16] = (byte)(itemIndex & 0xFF);                      itemIndex >>= 8;                  }                    stream.Write(buffer' 0' midpointEntrySize);              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,AppendMidpointRecordTo,The following statement contains a magic number: if(version >= PTableVersions.IndexV4){                  ulong eventStream = midpointEntry.Key.Stream;                  long eventVersion = midpointEntry.Key.Version;                  long itemIndex = midpointEntry.ItemIndex;                    for(int i=0;i<8;i++){                      buffer[i] = (byte)(eventVersion & 0xFF);                      eventVersion >>= 8;                  }                    for(int i=0;i<8;i++){                      buffer[i+8] = (byte)(eventStream & 0xFF);                      eventStream >>= 8;                  }                    for(int i=0;i<8;i++){                      buffer[i+16] = (byte)(itemIndex & 0xFF);                      itemIndex >>= 8;                  }                    stream.Write(buffer' 0' midpointEntrySize);              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,AppendMidpointRecordTo,The following statement contains a magic number: if(version >= PTableVersions.IndexV4){                  ulong eventStream = midpointEntry.Key.Stream;                  long eventVersion = midpointEntry.Key.Version;                  long itemIndex = midpointEntry.ItemIndex;                    for(int i=0;i<8;i++){                      buffer[i] = (byte)(eventVersion & 0xFF);                      eventVersion >>= 8;                  }                    for(int i=0;i<8;i++){                      buffer[i+8] = (byte)(eventStream & 0xFF);                      eventStream >>= 8;                  }                    for(int i=0;i<8;i++){                      buffer[i+16] = (byte)(itemIndex & 0xFF);                      itemIndex >>= 8;                  }                    stream.Write(buffer' 0' midpointEntrySize);              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,AppendMidpointRecordTo,The following statement contains a magic number: if(version >= PTableVersions.IndexV4){                  ulong eventStream = midpointEntry.Key.Stream;                  long eventVersion = midpointEntry.Key.Version;                  long itemIndex = midpointEntry.ItemIndex;                    for(int i=0;i<8;i++){                      buffer[i] = (byte)(eventVersion & 0xFF);                      eventVersion >>= 8;                  }                    for(int i=0;i<8;i++){                      buffer[i+8] = (byte)(eventStream & 0xFF);                      eventStream >>= 8;                  }                    for(int i=0;i<8;i++){                      buffer[i+16] = (byte)(itemIndex & 0xFF);                      itemIndex >>= 8;                  }                    stream.Write(buffer' 0' midpointEntrySize);              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,AppendMidpointRecordTo,The following statement contains a magic number: if(version >= PTableVersions.IndexV4){                  ulong eventStream = midpointEntry.Key.Stream;                  long eventVersion = midpointEntry.Key.Version;                  long itemIndex = midpointEntry.ItemIndex;                    for(int i=0;i<8;i++){                      buffer[i] = (byte)(eventVersion & 0xFF);                      eventVersion >>= 8;                  }                    for(int i=0;i<8;i++){                      buffer[i+8] = (byte)(eventStream & 0xFF);                      eventStream >>= 8;                  }                    for(int i=0;i<8;i++){                      buffer[i+16] = (byte)(itemIndex & 0xFF);                      itemIndex >>= 8;                  }                    stream.Write(buffer' 0' midpointEntrySize);              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,AppendMidpointRecordTo,The following statement contains a magic number: if(version >= PTableVersions.IndexV4){                  ulong eventStream = midpointEntry.Key.Stream;                  long eventVersion = midpointEntry.Key.Version;                  long itemIndex = midpointEntry.ItemIndex;                    for(int i=0;i<8;i++){                      buffer[i] = (byte)(eventVersion & 0xFF);                      eventVersion >>= 8;                  }                    for(int i=0;i<8;i++){                      buffer[i+8] = (byte)(eventStream & 0xFF);                      eventStream >>= 8;                  }                    for(int i=0;i<8;i++){                      buffer[i+16] = (byte)(itemIndex & 0xFF);                      itemIndex >>= 8;                  }                    stream.Write(buffer' 0' midpointEntrySize);              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,GetDepth,The following statement contains a magic number: if((2L << 28) * 4096L < indexEntriesFileSize) return 28;
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,GetDepth,The following statement contains a magic number: if((2L << 28) * 4096L < indexEntriesFileSize) return 28;
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,GetDepth,The following statement contains a magic number: for(int i=27;i>minDepth;i--) {                  if((2L << i) * 4096L < indexEntriesFileSize) {                      return i + 1;                  }              }
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,GetRequiredMidpointCount,The following statement contains a magic number: if(numIndexEntries==1) return 2;
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,GetMidpointIndex,The following statement contains a magic number: if(numIndexEntries==1 && numMidpoints==2 && (k==0 || k==1)) return 0;
Magic Number,EventStore.Core.Index,PTable,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTable.cs,IsMidpointIndex,The following statement contains a magic number: if(numIndexEntries==1){                  if(numMidpoints==2 && index==0) return true;                  return false;              }
Magic Number,EventStore.Core.Index,PTableFooter,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTableFooter.cs,AsByteArray,The following statement contains a magic number: for(int i=0;i<4;i++){                  array[i+2] = (byte) (numMidpoints & 0xFF);                  numMidpoints >>= 8;              }
Magic Number,EventStore.Core.Index,PTableFooter,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTableFooter.cs,AsByteArray,The following statement contains a magic number: for(int i=0;i<4;i++){                  array[i+2] = (byte) (numMidpoints & 0xFF);                  numMidpoints >>= 8;              }
Magic Number,EventStore.Core.Index,PTableFooter,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTableFooter.cs,AsByteArray,The following statement contains a magic number: for(int i=0;i<4;i++){                  array[i+2] = (byte) (numMidpoints & 0xFF);                  numMidpoints >>= 8;              }
Magic Number,EventStore.Core.Index,PTableFooter,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTableFooter.cs,FromStream,The following statement contains a magic number: byte[] buffer = new byte[4];
Magic Number,EventStore.Core.Index,PTableFooter,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\PTableFooter.cs,FromStream,The following statement contains a magic number: stream.Read(buffer'0'4);
Magic Number,EventStore.Core.Index,SortedListExtensions,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\SortedListExtensions.cs,LowerBound,The following statement contains a magic number: while (l < r)              {                  int m = l + (r - l) / 2;                  if (comparer.Compare(list.Keys[m]' key) >= 0)                      r = m;                  else                      l = m + 1;              }
Magic Number,EventStore.Core.Index,SortedListExtensions,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\SortedListExtensions.cs,UpperBound,The following statement contains a magic number: while (l < r)              {                  int m = l + (r - l + 1) / 2;                  if (comparer.Compare(list.Keys[m]' key) <= 0)                      l = m;                  else                      r = m - 1;              }
Magic Number,EventStore.Core.Index,TableIndex,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,TableIndex,The following statement contains a magic number: if(indexCacheDepth > 28 || indexCacheDepth < 8) throw new ArgumentOutOfRangeException("indexCacheDepth");
Magic Number,EventStore.Core.Index,TableIndex,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,TableIndex,The following statement contains a magic number: if(indexCacheDepth > 28 || indexCacheDepth < 8) throw new ArgumentOutOfRangeException("indexCacheDepth");
Magic Number,EventStore.Core.Index,TableIndex,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,Initialize,The following statement contains a magic number: try              {                  _indexMap = IndexMap.FromFile(indexmapFile' maxTablesPerLevel: _maxTablesPerLevel' cacheDepth: _indexCacheDepth' skipIndexVerify: _skipIndexVerify);                  if (_indexMap.CommitCheckpoint >= chaserCheckpoint)                  {                      _indexMap.Dispose(TimeSpan.FromMilliseconds(5000));                      throw new CorruptIndexException(String.Format("IndexMap's CommitCheckpoint ({0}) is greater than ChaserCheckpoint ({1})."' _indexMap.CommitCheckpoint' chaserCheckpoint));                  }                    //verification should be completed by now                  DeleteForceIndexVerifyFile();              }              catch (CorruptIndexException exc)              {                  Log.ErrorException(exc' "ReadIndex is corrupted...");                  LogIndexMapContent(indexmapFile);                  DumpAndCopyIndex();                  File.Delete(indexmapFile);                  DeleteForceIndexVerifyFile();                  _indexMap = IndexMap.FromFile(indexmapFile' maxTablesPerLevel: _maxTablesPerLevel' cacheDepth: _indexCacheDepth' skipIndexVerify: _skipIndexVerify);              }
Magic Number,EventStore.Core.Index,TableIndex,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,TryGetOneValue,The following statement contains a magic number: while (counter < 5)              {                  counter++;                  try                  {                      return TryGetOneValueInternal(stream' version' out position);                  }                  catch (FileBeingDeletedException)                  {                      Log.Trace("File being deleted.");                  }                  catch (MaybeCorruptIndexException e){                      ForceIndexVerifyOnNextStartup();                      throw e;                  }              }
Magic Number,EventStore.Core.Index,TableIndex,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,TryGetLatestEntry,The following statement contains a magic number: while (counter < 5)              {                  counter++;                  try                  {                      return TryGetLatestEntryInternal(stream' out entry);                  }                  catch (FileBeingDeletedException)                  {                      Log.Trace("File being deleted.");                  }                  catch (MaybeCorruptIndexException e){                      ForceIndexVerifyOnNextStartup();                      throw e;                  }              }
Magic Number,EventStore.Core.Index,TableIndex,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,TryGetOldestEntry,The following statement contains a magic number: while (counter < 5)              {                  counter++;                  try                  {                      return TryGetOldestEntryInternal(stream' out entry);                  }                  catch (FileBeingDeletedException)                  {                      Log.Trace("File being deleted.");                  }                  catch (MaybeCorruptIndexException e){                      ForceIndexVerifyOnNextStartup();                      throw e;                  }              }
Magic Number,EventStore.Core.Index,TableIndex,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,GetRange,The following statement contains a magic number: while (counter < 5)              {                  counter++;                  try                  {                      return GetRangeInternal(hash' startVersion' endVersion' limit);                  }                  catch (FileBeingDeletedException)                  {                      Log.Trace("File being deleted.");                  }                  catch (MaybeCorruptIndexException e){                      ForceIndexVerifyOnNextStartup();                      throw e;                  }              }
Magic Number,EventStore.Core.Index,TableIndex,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,Close,The following statement contains a magic number: if (!_backgroundRunningEvent.Wait(7000))                  throw new TimeoutException("Could not finish background thread in reasonable time.");
Magic Number,EventStore.Core.Index,TableIndex,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,Close,The following statement contains a magic number: _indexMap.InOrder().ToList().ForEach(x => x.WaitForDisposal(TimeSpan.FromMilliseconds(5000)));
Magic Number,EventStore.Core.Index,TableIndex,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,UpgradeHash,The following statement contains a magic number: return lowHash << 32 | _highHasher.Hash(streamId);
Magic Number,EventStore.Core.Index,TableIndex,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\TableIndex.cs,CreateHash,The following statement contains a magic number: return (ulong)_lowHasher.Hash(streamId) << 32 | _highHasher.Hash(streamId);
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: UInt32 numberOfLoops = len >> 2;
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: switch (len & 3) // mod 4              {                  case 3:                      h ^= (uint)(tail[2] << 16);                      h ^= (uint)(tail[1] << 8);                      h ^= tail[0];                      h *= m;                      break;                  case 2:                      h ^= (uint)(tail[1] << 8);                      h ^= tail[0];                      h *= m;                      break;                  case 1:                      h ^= tail[0];                      h *= m;                      break;              }
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: switch (len & 3) // mod 4              {                  case 3:                      h ^= (uint)(tail[2] << 16);                      h ^= (uint)(tail[1] << 8);                      h ^= tail[0];                      h *= m;                      break;                  case 2:                      h ^= (uint)(tail[1] << 8);                      h ^= tail[0];                      h *= m;                      break;                  case 1:                      h ^= tail[0];                      h *= m;                      break;              }
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: switch (len & 3) // mod 4              {                  case 3:                      h ^= (uint)(tail[2] << 16);                      h ^= (uint)(tail[1] << 8);                      h ^= tail[0];                      h *= m;                      break;                  case 2:                      h ^= (uint)(tail[1] << 8);                      h ^= tail[0];                      h *= m;                      break;                  case 1:                      h ^= tail[0];                      h *= m;                      break;              }
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: switch (len & 3) // mod 4              {                  case 3:                      h ^= (uint)(tail[2] << 16);                      h ^= (uint)(tail[1] << 8);                      h ^= tail[0];                      h *= m;                      break;                  case 2:                      h ^= (uint)(tail[1] << 8);                      h ^= tail[0];                      h *= m;                      break;                  case 1:                      h ^= tail[0];                      h *= m;                      break;              }
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: switch (len & 3) // mod 4              {                  case 3:                      h ^= (uint)(tail[2] << 16);                      h ^= (uint)(tail[1] << 8);                      h ^= tail[0];                      h *= m;                      break;                  case 2:                      h ^= (uint)(tail[1] << 8);                      h ^= tail[0];                      h *= m;                      break;                  case 1:                      h ^= tail[0];                      h *= m;                      break;              }
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: switch (len & 3) // mod 4              {                  case 3:                      h ^= (uint)(tail[2] << 16);                      h ^= (uint)(tail[1] << 8);                      h ^= tail[0];                      h *= m;                      break;                  case 2:                      h ^= (uint)(tail[1] << 8);                      h ^= tail[0];                      h *= m;                      break;                  case 1:                      h ^= tail[0];                      h *= m;                      break;              }
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: switch (len & 3) // mod 4              {                  case 3:                      h ^= (uint)(tail[2] << 16);                      h ^= (uint)(tail[1] << 8);                      h ^= tail[0];                      h *= m;                      break;                  case 2:                      h ^= (uint)(tail[1] << 8);                      h ^= tail[0];                      h *= m;                      break;                  case 1:                      h ^= tail[0];                      h *= m;                      break;              }
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: h ^= h >> 13;
Magic Number,EventStore.Core.Index.Hashes,Murmur2Unsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following statement contains a magic number: h ^= h >> 15;
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: UInt32 nblocks = len / 4;
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: for (UInt32 i = nblocks; i > 0; --i' ++block)              {                  k1 = *block;                    k1 *= c1;                  k1 = Rotl32(k1' 15);                  k1 *= c2;                    h1 ^= k1;                  h1 = Rotl32(h1' 13);                  h1 = h1 * 5 + 0xe6546b64;              }
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: for (UInt32 i = nblocks; i > 0; --i' ++block)              {                  k1 = *block;                    k1 *= c1;                  k1 = Rotl32(k1' 15);                  k1 *= c2;                    h1 ^= k1;                  h1 = Rotl32(h1' 13);                  h1 = h1 * 5 + 0xe6546b64;              }
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: for (UInt32 i = nblocks; i > 0; --i' ++block)              {                  k1 = *block;                    k1 *= c1;                  k1 = Rotl32(k1' 15);                  k1 *= c2;                    h1 ^= k1;                  h1 = Rotl32(h1' 13);                  h1 = h1 * 5 + 0xe6546b64;              }
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: uint rem = len & 3;
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: if (rem >= 3)                  k1 ^= (uint)(tail[2] << 16);
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: if (rem >= 3)                  k1 ^= (uint)(tail[2] << 16);
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: if (rem >= 3)                  k1 ^= (uint)(tail[2] << 16);
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: if (rem >= 2)                  k1 ^= (uint)(tail[1] << 8);
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: if (rem >= 2)                  k1 ^= (uint)(tail[1] << 8);
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: if (rem > 0)              {                  k1 ^= tail[0];                  k1 *= c1;                  k1 = Rotl32(k1' 15);                  k1 *= c2;                  h1 ^= k1;              }
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: h1 ^= h1 >> 16;
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: h1 ^= h1 >> 13;
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Hash,The following statement contains a magic number: h1 ^= h1 >> 16;
Magic Number,EventStore.Core.Index.Hashes,Murmur3AUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur3AUnsafe.cs,Rotl32,The following statement contains a magic number: return (x << r) | (x >> (32 - r));
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: if (len < 16)                  return HashSmall(data' len' seed);
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: uint* limit = (uint*) (data + len - 16);
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: while (p < limit)              {                  v1 += Rotl32(v1' 13); v1 *= PRIME1; v1 += *p; p++;                  v2 += Rotl32(v2' 11); v2 *= PRIME1; v2 += *p; p++;                  v3 += Rotl32(v3' 17); v3 *= PRIME1; v3 += *p; p++;                  v4 += Rotl32(v4' 19); v4 *= PRIME1; v4 += *p; p++;              }
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: while (p < limit)              {                  v1 += Rotl32(v1' 13); v1 *= PRIME1; v1 += *p; p++;                  v2 += Rotl32(v2' 11); v2 *= PRIME1; v2 += *p; p++;                  v3 += Rotl32(v3' 17); v3 *= PRIME1; v3 += *p; p++;                  v4 += Rotl32(v4' 19); v4 *= PRIME1; v4 += *p; p++;              }
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: while (p < limit)              {                  v1 += Rotl32(v1' 13); v1 *= PRIME1; v1 += *p; p++;                  v2 += Rotl32(v2' 11); v2 *= PRIME1; v2 += *p; p++;                  v3 += Rotl32(v3' 17); v3 *= PRIME1; v3 += *p; p++;                  v4 += Rotl32(v4' 19); v4 *= PRIME1; v4 += *p; p++;              }
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: while (p < limit)              {                  v1 += Rotl32(v1' 13); v1 *= PRIME1; v1 += *p; p++;                  v2 += Rotl32(v2' 11); v2 *= PRIME1; v2 += *p; p++;                  v3 += Rotl32(v3' 17); v3 *= PRIME1; v3 += *p; p++;                  v4 += Rotl32(v4' 19); v4 *= PRIME1; v4 += *p; p++;              }
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: v1 += Rotl32(v1' 17);
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: v2 += Rotl32(v2' 19);
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: v3 += Rotl32(v3' 13);
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: v4 += Rotl32(v4' 11);
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: v1 += Rotl32(v1' 11);
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: v2 += Rotl32(v2' 17);
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: v3 += Rotl32(v3' 19);
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: v4 += Rotl32(v4' 13);
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: uint crc = v1 + Rotl32(v2' 3) + Rotl32(v3' 6) + Rotl32(v4' 9);
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: uint crc = v1 + Rotl32(v2' 3) + Rotl32(v3' 6) + Rotl32(v4' 9);
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: uint crc = v1 + Rotl32(v2' 3) + Rotl32(v3' 6) + Rotl32(v4' 9);
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: crc ^= crc >> 11;
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: crc ^= crc >> 15;
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Hash,The following statement contains a magic number: crc ^= crc >> 13;
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,HashSmall,The following statement contains a magic number: byte* limit = bEnd - 4;
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,HashSmall,The following statement contains a magic number: while (p < limit)              {                  crc += (*(uint*) p) + idx;                  idx++;                  crc += Rotl32(crc' 17)*PRIME4;                  crc *= PRIME1;                  p += 4;              }
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,HashSmall,The following statement contains a magic number: while (p < limit)              {                  crc += (*(uint*) p) + idx;                  idx++;                  crc += Rotl32(crc' 17)*PRIME4;                  crc *= PRIME1;                  p += 4;              }
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,HashSmall,The following statement contains a magic number: crc ^= crc >> 15;
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,HashSmall,The following statement contains a magic number: crc ^= crc >> 13;
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,HashSmall,The following statement contains a magic number: crc ^= crc >> 16;
Magic Number,EventStore.Core.Index.Hashes,XXHashUnsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\XXHashUnsafe.cs,Rotl32,The following statement contains a magic number: return (x << r) | (x >> (32 - r));
Magic Number,EventStore.Core.Messages,EventRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDtoExtensions.cs,EventRecord,The following statement contains a magic number: CreatedEpoch = (long) (eventRecord.TimeStamp - new DateTime (1970' 1' 1)).TotalMilliseconds;
Magic Number,EventStore.Core.Messages,EventRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\Messages\TcpClientMessageDtoExtensions.cs,EventRecord,The following statement contains a magic number: CreatedEpoch = (long) (eventRecord.TimeStamp - new DateTime (1970' 1' 1)).TotalMilliseconds;
Magic Number,EventStore.Core.Services,ElectionsService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The following statement contains a magic number: if (_vcReceived.Add(message.ServerId) && _vcReceived.Count == _clusterSize/2 + 1)              {                  Log.Debug("ELECTIONS: (V={0}) MAJORITY OF VIEWCHANGE."' message.AttemptedView);                  if (AmILeaderOf(_lastAttemptedView))                      ShiftToPreparePhase();              }
Magic Number,EventStore.Core.Services,ElectionsService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The following statement contains a magic number: if (!_prepareOkReceived.ContainsKey(msg.ServerId))              {                  _prepareOkReceived.Add(msg.ServerId' msg);                  if (_prepareOkReceived.Count == _clusterSize/2 + 1)                      ShiftToRegLeader();              }
Magic Number,EventStore.Core.Services,ElectionsService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\ElectionsService.cs,Handle,The following statement contains a magic number: if (_acceptsReceived.Add(message.ServerId) && _acceptsReceived.Count == _clusterSize/2 + 1)              {                  var master = _servers.FirstOrDefault(x => x.InstanceId == _masterProposal.InstanceId);                  if (master != null)                  {                      _master = _masterProposal.InstanceId;                      Log.Info("ELECTIONS: (V={0}) DONE. ELECTED MASTER = {1}. ME={2}."' message.View'                               FormatNodeInfo(_masterProposal)' FormatNodeInfo(GetOwnInfo()));                      _lastElectedMaster = _master;                      _publisher.Publish(new ElectionMessage.ElectionsDone(message.View' master));                  }              }
Magic Number,EventStore.Core.Services,SubscriptionsService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\SubscriptionsService.cs,ResolveLinkToEvent,The following statement contains a magic number: if (eventRecord.EventType == SystemEventTypes.LinkTo)              {                  try                  {                      string[] parts = Helper.UTF8NoBom.GetString(eventRecord.Data).Split(_linkToSeparator' 2);                      long eventNumber = long.Parse(parts[0]);                      string streamId = parts[1];                        var res = _readIndex.ReadEvent(streamId' eventNumber);                        if (res.Result == ReadEventResult.Success)                          return ResolvedEvent.ForResolvedLink(res.Record' eventRecord' commitPosition);                        return ResolvedEvent.ForFailedResolvedLink(eventRecord' res.Result' commitPosition);                  }                  catch (Exception exc)                  {                      Log.ErrorException(exc' "Error while resolving link for event record: {0}"' eventRecord.ToString());                  }                  // return unresolved link                  return ResolvedEvent.ForFailedResolvedLink(eventRecord' ReadEventResult.Error' commitPosition);              }
Magic Number,EventStore.Core.Services,HttpSendService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,Handle,The following statement contains a magic number: if (deniedToHandle != null)              {                  int code;                  switch (deniedToHandle.Reason)                  {                      case DenialReason.ServerTooBusy:                          code = HttpStatusCode.ServiceUnavailable;                          break;                      default:                          throw new ArgumentOutOfRangeException();                  }                  var start = _watch.ElapsedTicks;                  message.HttpEntityManager.ReplyStatus(                      code'                      deniedToHandle.Details'                      exc => Log.Debug("Error occurred while replying to HTTP with message {0}: {1}."' message.Message' exc.Message));                  HistogramService.SetValue(_httpSendHistogram'                     (long)((((double)_watch.ElapsedTicks - start) / Stopwatch.Frequency) * 1000000000));              }              else              {                  var response = message.Data;                  var config = message.Configuration;                  var start = _watch.ElapsedTicks;                  if(response is byte[])                  {                      message.HttpEntityManager.ReplyContent(                          response as byte[]'                          config.Code'                          config.Description'                          config.ContentType'                          config.Headers'                          exc => Log.Debug("Error occurred while replying to HTTP with message {0}: {1}."' message.Message' exc.Message));                  }                  else                  {                      message.HttpEntityManager.ReplyTextContent(                          response as string'                          config.Code'                          config.Description'                          config.ContentType'                          config.Headers'                          exc => Log.Debug("Error occurred while replying to HTTP with message {0}: {1}."' message.Message' exc.Message));                  }                  HistogramService.SetValue(_httpSendHistogram'                     (long)((((double)_watch.ElapsedTicks - start) / Stopwatch.Frequency) * 1000000000));                }
Magic Number,EventStore.Core.Services,HttpSendService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\HttpSendService.cs,Handle,The following statement contains a magic number: if (deniedToHandle != null)              {                  int code;                  switch (deniedToHandle.Reason)                  {                      case DenialReason.ServerTooBusy:                          code = HttpStatusCode.ServiceUnavailable;                          break;                      default:                          throw new ArgumentOutOfRangeException();                  }                  var start = _watch.ElapsedTicks;                  message.HttpEntityManager.ReplyStatus(                      code'                      deniedToHandle.Details'                      exc => Log.Debug("Error occurred while replying to HTTP with message {0}: {1}."' message.Message' exc.Message));                  HistogramService.SetValue(_httpSendHistogram'                     (long)((((double)_watch.ElapsedTicks - start) / Stopwatch.Frequency) * 1000000000));              }              else              {                  var response = message.Data;                  var config = message.Configuration;                  var start = _watch.ElapsedTicks;                  if(response is byte[])                  {                      message.HttpEntityManager.ReplyContent(                          response as byte[]'                          config.Code'                          config.Description'                          config.ContentType'                          config.Headers'                          exc => Log.Debug("Error occurred while replying to HTTP with message {0}: {1}."' message.Message' exc.Message));                  }                  else                  {                      message.HttpEntityManager.ReplyTextContent(                          response as string'                          config.Code'                          config.Description'                          config.ContentType'                          config.Headers'                          exc => Log.Debug("Error occurred while replying to HTTP with message {0}: {1}."' message.Message' exc.Message));                  }                  HistogramService.SetValue(_httpSendHistogram'                     (long)((((double)_watch.ElapsedTicks - start) / Stopwatch.Frequency) * 1000000000));                }
Magic Number,EventStore.Core.Services,SystemStreams,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\SystemNames.cs,IsMetastream,The following statement contains a magic number: return streamId.Length >= 2 && streamId[0] == '$' && streamId[1] == '$';
Magic Number,EventStore.Core.Services,SystemStreams,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\SystemNames.cs,OriginalStreamOf,The following statement contains a magic number: return metastreamId.Substring(2);
Magic Number,EventStore.Core.Services,SystemEventTypes,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\SystemNames.cs,StreamReferenceEventToStreamId,The following statement contains a magic number: switch (eventType)              {                  case LinkTo:                  {                      string[] parts = Helper.UTF8NoBom.GetString(data).Split(_linkToSeparator' 2);                      streamId = parts[1];                      break;                  }                  case StreamReference:                  case V1__StreamCreated__:                  case V2__StreamCreated_InIndex:                  {                      streamId = Helper.UTF8NoBom.GetString(data);                      break;                  }                  default:                      throw new NotSupportedException("Unknown event type: " + eventType);              }
Magic Number,EventStore.Core.Services,SystemEventTypes,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\SystemNames.cs,StreamReferenceEventToStreamId,The following statement contains a magic number: switch (eventType)              {                  case LinkTo:                      {                          string[] parts = data.Split(_linkToSeparator' 2);                          streamId = parts[1];                          break;                      }                  case StreamReference:                  case V1__StreamCreated__:                  case V2__StreamCreated_InIndex:                      {                          streamId = data;                          break;                      }                  default:                      throw new NotSupportedException("Unknown event type: " + eventType);              }
Magic Number,EventStore.Core.Services,SystemEventTypes,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\SystemNames.cs,EventLinkToEventNumber,The following statement contains a magic number: string[] parts = link.Split(_linkToSeparator' 2);
Magic Number,EventStore.Core.Services,TcpSendService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\TcpSendService.cs,Handle,The following statement contains a magic number: HistogramService.SetValue(_tcpSendHistogram'                     (long)((((double)_watch.ElapsedTicks - start) / Stopwatch.Frequency) * 1000000000));
Magic Number,EventStore.Core.Services.Gossip,GossipServiceBase,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Gossip\GossipServiceBase.cs,Handle,The following statement contains a magic number: var interval = message.GossipRound < 20 ? GossipStartupInterval : GossipInterval;
Magic Number,EventStore.Core.Services.Gossip,GossipServiceBase,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Gossip\GossipServiceBase.cs,Handle,The following statement contains a magic number: var gossipRound = Math.Min(2000000000' node == null ? message.GossipRound : message.GossipRound + 1);
Magic Number,EventStore.Core.Services.Gossip,GossipServiceBase,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Gossip\GossipServiceBase.cs,GetNodeToGossipTo,The following statement contains a magic number: for (int i = 0; i < 5; ++i)              {                  var node = members[_rnd.Next(members.Length)];                  if (node.InstanceId != NodeInfo.InstanceId)                      return node;              }
Magic Number,EventStore.Core.Services.Gossip,GossipServiceBase,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Gossip\GossipServiceBase.cs,LogClusterChange,The following statement contains a magic number: Log.Trace(new string('-'' 80));
Magic Number,EventStore.Core.Services.Histograms,HistogramService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Histograms\HistogramService.cs,CreateHistogram,The following statement contains a magic number: Histograms.TryAdd(name' new Histogram(NUMBEROFNS' 3));
Magic Number,EventStore.Core.Services.Histograms,Measurement,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Histograms\HistogramService.cs,Dispose,The following statement contains a magic number: lock (Histogram)                  {                      var valueToRecord = (((double)watch.ElapsedTicks - Start) / Stopwatch.Frequency) * 1000000000;                      if (valueToRecord < HighestPowerOf2(Histogram.getHighestTrackableValue()))                      {                          Histogram.recordValue((long)valueToRecord);                      }                  }
Magic Number,EventStore.Core.Services.Histograms,Measurement,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Histograms\HistogramService.cs,HighestPowerOf2,The following statement contains a magic number: x |= (x >> 2);
Magic Number,EventStore.Core.Services.Histograms,Measurement,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Histograms\HistogramService.cs,HighestPowerOf2,The following statement contains a magic number: x |= (x >> 4);
Magic Number,EventStore.Core.Services.Histograms,Measurement,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Histograms\HistogramService.cs,HighestPowerOf2,The following statement contains a magic number: x |= (x >> 8);
Magic Number,EventStore.Core.Services.Histograms,Measurement,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Histograms\HistogramService.cs,HighestPowerOf2,The following statement contains a magic number: x |= (x >> 16);
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,TryReadingNewBatch,The following statement contains a magic number: lock (_lock)              {                  if ((_state & PersistentSubscriptionState.OutstandingPageRequest) > 0) return;                  if (_streamBuffer.Live)                  {                      SetLive();                      return;                  }                  if (!_streamBuffer.CanAccept(_settings.ReadBatchSize)) return;                  _state |= PersistentSubscriptionState.OutstandingPageRequest;                  _settings.StreamReader.BeginReadEvents(_settings.EventStreamId' _nextEventToPullFrom'                      Math.Max(_settings.ReadBatchSize' 10)' _settings.ReadBatchSize' _settings.ResolveLinkTos'                      HandleReadCompleted);              }
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscription,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscription.cs,ParkMessage,The following statement contains a magic number: _settings.MessageParker.BeginParkMessage(resolvedEvent' reason' (e' result) =>              {                  if (result != OperationResult.Success)                  {                      if (count < 5)                      {                          Log.Info("Unable to park message {0}/{1} operation failed {2} retrying."' e.OriginalStreamId'                          e.OriginalEventNumber' result);                          ParkMessage(e' reason' count + 1);                          return;                      }                      Log.Error("Unable to park message {0}/{1} operation failed {2} after retries. Possible message loss."' e.OriginalStreamId'                          e.OriginalEventNumber' result);                  }                  lock (_lock)                  {                      _outstandingMessages.Remove(e.OriginalEvent.EventId);                      _pushClients.RemoveProcessingMessage(e.OriginalEvent.EventId);                       TryPushingMessagesToClients();                  }              });
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionCheckpointWriter,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionCheckpointWriter.cs,CreateStreamMetadataEvent,The following statement contains a magic number: var metadata = new StreamMetadata(maxCount: 2' maxAge: null' cacheControl: null' acl: acl);
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionClient,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionClient.cs,PersistentSubscriptionClient,The following statement contains a magic number: if (extraStatistics)              {                  _extraStatistics = new RequestStatistics(watch' 1000);              }
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionParamsBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionParamsBuilder.cs,CreateFor,The following statement contains a magic number: return new PersistentSubscriptionParamsBuilder(streamName + ":" + groupName'                   streamName'                   groupName'                   false'                  0'                  false'                  TimeSpan.FromSeconds(30)'                  500'                  500'                  10'                  20'                  TimeSpan.FromSeconds(1)'                  5'                  1000'                  0'                   new RoundRobinPersistentSubscriptionConsumerStrategy());
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionParamsBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionParamsBuilder.cs,CreateFor,The following statement contains a magic number: return new PersistentSubscriptionParamsBuilder(streamName + ":" + groupName'                   streamName'                   groupName'                   false'                  0'                  false'                  TimeSpan.FromSeconds(30)'                  500'                  500'                  10'                  20'                  TimeSpan.FromSeconds(1)'                  5'                  1000'                  0'                   new RoundRobinPersistentSubscriptionConsumerStrategy());
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionParamsBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionParamsBuilder.cs,CreateFor,The following statement contains a magic number: return new PersistentSubscriptionParamsBuilder(streamName + ":" + groupName'                   streamName'                   groupName'                   false'                  0'                  false'                  TimeSpan.FromSeconds(30)'                  500'                  500'                  10'                  20'                  TimeSpan.FromSeconds(1)'                  5'                  1000'                  0'                   new RoundRobinPersistentSubscriptionConsumerStrategy());
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionParamsBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionParamsBuilder.cs,CreateFor,The following statement contains a magic number: return new PersistentSubscriptionParamsBuilder(streamName + ":" + groupName'                   streamName'                   groupName'                   false'                  0'                  false'                  TimeSpan.FromSeconds(30)'                  500'                  500'                  10'                  20'                  TimeSpan.FromSeconds(1)'                  5'                  1000'                  0'                   new RoundRobinPersistentSubscriptionConsumerStrategy());
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionParamsBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionParamsBuilder.cs,CreateFor,The following statement contains a magic number: return new PersistentSubscriptionParamsBuilder(streamName + ":" + groupName'                   streamName'                   groupName'                   false'                  0'                  false'                  TimeSpan.FromSeconds(30)'                  500'                  500'                  10'                  20'                  TimeSpan.FromSeconds(1)'                  5'                  1000'                  0'                   new RoundRobinPersistentSubscriptionConsumerStrategy());
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionParamsBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionParamsBuilder.cs,CreateFor,The following statement contains a magic number: return new PersistentSubscriptionParamsBuilder(streamName + ":" + groupName'                   streamName'                   groupName'                   false'                  0'                  false'                  TimeSpan.FromSeconds(30)'                  500'                  500'                  10'                  20'                  TimeSpan.FromSeconds(1)'                  5'                  1000'                  0'                   new RoundRobinPersistentSubscriptionConsumerStrategy());
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionParamsBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionParamsBuilder.cs,CreateFor,The following statement contains a magic number: return new PersistentSubscriptionParamsBuilder(streamName + ":" + groupName'                   streamName'                   groupName'                   false'                  0'                  false'                  TimeSpan.FromSeconds(30)'                  500'                  500'                  10'                  20'                  TimeSpan.FromSeconds(1)'                  5'                  1000'                  0'                   new RoundRobinPersistentSubscriptionConsumerStrategy());
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,PersistentSubscriptionService,The following statement contains a magic number: _streamReader = new PersistentSubscriptionStreamReader(_ioDispatcher' 100);
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionService.cs,PersistentSubscriptionService,The following statement contains a magic number: _tickRequestMessage = TimerMessage.Schedule.Create(TimeSpan.FromMilliseconds(1000)'                                                     new PublishEnvelope(_bus)'                                                     new SubscriptionMessage.PersistentSubscriptionTimerTick());
Magic Number,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionStreamReader,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionStreamReader.cs,GetBatchSize,The following statement contains a magic number: return Math.Min(Math.Min(batchSize == 0 ? 20 : batchSize' MaxPullBatchSize)' _maxPullBatchSize);
Magic Number,EventStore.Core.Services.PersistentSubscription,RequestStatistics,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\RequestStatistics.cs,GetMeasurementDetails,The following statement contains a magic number: ret.Measurements.Add(Measurement.From("Median"' items[items.Length / 2]));
Magic Number,EventStore.Core.Services.PersistentSubscription,RequestStatistics,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\RequestStatistics.cs,GetMeasurementDetails,The following statement contains a magic number: for (var i = 0; i < 5; i++)              {                  ret.Measurements.Add(Measurement.From("Quintile " + (i + 1)' items[GetPercentile(i * 20' items.Length)]));              }
Magic Number,EventStore.Core.Services.PersistentSubscription,RequestStatistics,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\RequestStatistics.cs,GetMeasurementDetails,The following statement contains a magic number: for (var i = 0; i < 5; i++)              {                  ret.Measurements.Add(Measurement.From("Quintile " + (i + 1)' items[GetPercentile(i * 20' items.Length)]));              }
Magic Number,EventStore.Core.Services.Replication,MasterReplicationService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,SetSubscriptionPosition,The following statement contains a magic number: if (trial >= 10)                  throw new Exception("Too many retrials to acquire reader for subscriber.");
Magic Number,EventStore.Core.Services.Replication,MasterReplicationService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,MainLoop,The following statement contains a magic number: while (!_stop)              {                  try                  {                                            _queueStats.EnterBusy();                        _queueStats.ProcessingStarted(typeof(SendReplicationData)' _subscriptions.Count);                        _flushSignal.Reset(); // Reset the flush signal as we're about to read anyway. This could be closer to the actual read but no harm from too many checks.                        var dataFound = ManageSubscriptions();                      ManageNoQuorumDetection();                      var newSubscriptions = _newSubscriptions;                      _newSubscriptions = false;                      ManageRoleAssignments(force: newSubscriptions);                        _queueStats.ProcessingEnded(_subscriptions.Count);                        if (!dataFound)                      {                          _queueStats.EnterIdle();                            _flushSignal.Wait(TimeSpan.FromMilliseconds(500));                      }                  }                  catch (Exception exc)                  {                      Log.InfoException(exc' "Error during master replication iteration.");                  }              }
Magic Number,EventStore.Core.Services.Replication,MasterReplicationService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Replication\MasterReplicationService.cs,ManageNoQuorumDetection,The following statement contains a magic number: if (_state == VNodeState.Master)              {                  var now = _stopwatch.Elapsed;                  if (_subscriptions.Count >= _clusterSize/2) // everything is ok                      _noQuorumTimestamp = TimeSpan.Zero;                  else                  {                      if (_noQuorumTimestamp == TimeSpan.Zero)                      {                          _noQuorumTimestamp = now;                          _noQuorumNotified = false;                      }                        if (!_noQuorumNotified && now - _noQuorumTimestamp > NoQuorumTimeout)                      {                          _publisher.Publish(new SystemMessage.NoQuorumMessage());                          _noQuorumNotified = true;                      }                  }              }
Magic Number,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Init,The following statement contains a magic number: var reportPeriod = TimeSpan.FromSeconds(5);
Magic Number,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Init,The following statement contains a magic number: using (var reader = _backend.BorrowReader())              {                  var startPosition = Math.Max(0' _persistedCommitPos);                  reader.Reposition(startPosition);                    var commitedPrepares = new List<PrepareLogRecord>();                    long processed = 0;                  SeqReadResult result;                  while ((result = reader.TryReadNext()).Success && result.LogRecord.LogPosition < buildToPosition)                  {                      switch (result.LogRecord.RecordType)                      {                          case LogRecordType.Prepare:                              {                                  var prepare = (PrepareLogRecord)result.LogRecord;                                  if (prepare.Flags.HasAnyOf(PrepareFlags.IsCommitted))                                  {                                      if (prepare.Flags.HasAnyOf(PrepareFlags.SingleWrite)) {                                          Commit(commitedPrepares' false' false);                                          commitedPrepares.Clear();                                          Commit(new[] {prepare}' result.Eof' false);                                      } else {                                            if (prepare.Flags.HasAnyOf(PrepareFlags.Data | PrepareFlags.StreamDelete))                                              commitedPrepares.Add(prepare);                                          if (prepare.Flags.HasAnyOf(PrepareFlags.TransactionEnd))                                          {                                              Commit(commitedPrepares' result.Eof' false);                                              commitedPrepares.Clear();                                          }                                      }                                  }                                  break;                              }                          case LogRecordType.Commit:                              Commit((CommitLogRecord)result.LogRecord' result.Eof' false);                              break;                          case LogRecordType.System:                              break;                          default:                              throw new Exception(string.Format("Unknown RecordType: {0}"' result.LogRecord.RecordType));                      }                        processed += 1;                      if (DateTime.UtcNow - lastTime > reportPeriod || processed % 100000 == 0)                      {                          Log.Debug("ReadIndex Rebuilding: processed {0} records ({1:0.0}%)."'                                    processed' (result.RecordPostPosition - startPosition) * 100.0 / (buildToPosition - startPosition));                          lastTime = DateTime.UtcNow;                      }                  }                  Log.Debug("ReadIndex rebuilding done: total processed {0} records' time elapsed: {1}."' processed' DateTime.UtcNow - startTime);                  _bus.Publish(new StorageMessage.TfEofAtNonCommitRecord());                  _backend.SetSystemSettings(GetSystemSettings());              }
Magic Number,EventStore.Core.Services.Storage.ReaderIndex,IndexCommitter,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\ReaderIndex\IndexCommitter.cs,Init,The following statement contains a magic number: using (var reader = _backend.BorrowReader())              {                  var startPosition = Math.Max(0' _persistedCommitPos);                  reader.Reposition(startPosition);                    var commitedPrepares = new List<PrepareLogRecord>();                    long processed = 0;                  SeqReadResult result;                  while ((result = reader.TryReadNext()).Success && result.LogRecord.LogPosition < buildToPosition)                  {                      switch (result.LogRecord.RecordType)                      {                          case LogRecordType.Prepare:                              {                                  var prepare = (PrepareLogRecord)result.LogRecord;                                  if (prepare.Flags.HasAnyOf(PrepareFlags.IsCommitted))                                  {                                      if (prepare.Flags.HasAnyOf(PrepareFlags.SingleWrite)) {                                          Commit(commitedPrepares' false' false);                                          commitedPrepares.Clear();                                          Commit(new[] {prepare}' result.Eof' false);                                      } else {                                            if (prepare.Flags.HasAnyOf(PrepareFlags.Data | PrepareFlags.StreamDelete))                                              commitedPrepares.Add(prepare);                                          if (prepare.Flags.HasAnyOf(PrepareFlags.TransactionEnd))                                          {                                              Commit(commitedPrepares' result.Eof' false);                                              commitedPrepares.Clear();                                          }                                      }                                  }                                  break;                              }                          case LogRecordType.Commit:                              Commit((CommitLogRecord)result.LogRecord' result.Eof' false);                              break;                          case LogRecordType.System:                              break;                          default:                              throw new Exception(string.Format("Unknown RecordType: {0}"' result.LogRecord.RecordType));                      }                        processed += 1;                      if (DateTime.UtcNow - lastTime > reportPeriod || processed % 100000 == 0)                      {                          Log.Debug("ReadIndex Rebuilding: processed {0} records ({1:0.0}%)."'                                    processed' (result.RecordPostPosition - startPosition) * 100.0 / (buildToPosition - startPosition));                          lastTime = DateTime.UtcNow;                      }                  }                  Log.Debug("ReadIndex rebuilding done: total processed {0} records' time elapsed: {1}."' processed' DateTime.UtcNow - startTime);                  _bus.Publish(new StorageMessage.TfEofAtNonCommitRecord());                  _backend.SetSystemSettings(GetSystemSettings());              }
Magic Number,EventStore.Core.Services.Monitoring,SystemStatsHelper,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetPerfCounterInformation,The following statement contains a magic number: try              {                  _perfCounter.RefreshInstanceName();                    var procCpuUsage = _perfCounter.GetProcCpuUsage();                                     stats["proc-startTime"] = process.StartTime.ToUniversalTime().ToString("O");                  stats["proc-id"] = process.Id;                  stats["proc-mem"] = new StatMetadata(process.WorkingSet64' "Process"' "Process Virtual Memory");                  stats["proc-cpu"] = new StatMetadata(procCpuUsage' "Process"' "Process Cpu Usage");                  stats["proc-cpuScaled"] = new StatMetadata(procCpuUsage / Environment.ProcessorCount' "Process"' "Process Cpu Usage Scaled by Logical Processor Count");                  stats["proc-threadsCount"] = _perfCounter.GetProcThreadsCount();                  stats["proc-contentionsRate"] = _perfCounter.GetContentionsRateCount();                  stats["proc-thrownExceptionsRate"] = _perfCounter.GetThrownExceptionsRate();                    stats["sys-cpu"] = _perfCounter.GetTotalCpuUsage();                  stats["sys-freeMem"] = GetFreeMem();                    var gcStats = _perfCounter.GetGcStats();                  stats["proc-gc-allocationSpeed"] = gcStats.AllocationSpeed;                  stats["proc-gc-gen0ItemsCount"] = gcStats.Gen0ItemsCount;                  stats["proc-gc-gen0Size"] = gcStats.Gen0Size;                  stats["proc-gc-gen1ItemsCount"] = gcStats.Gen1ItemsCount;                  stats["proc-gc-gen1Size"] = gcStats.Gen1Size;                  stats["proc-gc-gen2ItemsCount"] = gcStats.Gen2ItemsCount;                  stats["proc-gc-gen2Size"] = gcStats.Gen2Size;                  stats["proc-gc-largeHeapSize"] = gcStats.LargeHeapSize;                  stats["proc-gc-timeInGc"] = gcStats.TimeInGc;                  stats["proc-gc-totalBytesInHeaps"] = gcStats.TotalBytesInHeaps;              }              catch (InvalidOperationException)              {                  _log.Info("Received error reading counters. Attempting to rebuild.");                  _perfCounter = new PerfCounterHelper(_log);                  _giveup = count > 10;                  if (_giveup)                      _log.Error("Maximum rebuild attempts reached. Giving up on rebuilds.");                  else                      GetPerfCounterInformation(stats' count + 1);              }
Magic Number,EventStore.Core.Services.Monitoring,SystemStatsHelper,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetFreeMemOnLinux,The following statement contains a magic number: try              {                  meminfo = ShellExecutor.GetOutput("free"' "-b");                  var meminfolines = meminfo.Split(new[] { Environment.NewLine }' StringSplitOptions.RemoveEmptyEntries);                  var ourline = meminfolines[1];                  var trimmedLine = SpacesRegex.Replace(ourline' " ");                  var freeRamStr = trimmedLine.Split(' ')[3];                  return long.Parse(freeRamStr);              }              catch (Exception ex)              {                  _log.DebugException(ex' "Could not get free mem on linux' received memory info raw string: [{0}]"' meminfo);                  return -1;              }
Magic Number,EventStore.Core.Services.Monitoring,SystemStatsHelper,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetFreeMemOnBSD,The following statement contains a magic number: try              {                  var sysctl = ShellExecutor.GetOutput("sysctl"' "-n hw.physmem hw.pagesize vm.stats.vm.v_free_count vm.stats.vm.v_cache_count vm.stats.vm.v_inactive_count");                  var sysctlStats = sysctl.Split(new[] { Environment.NewLine }' StringSplitOptions.RemoveEmptyEntries);                  long pageSize = long.Parse(sysctlStats[1]);                  long freePages = long.Parse(sysctlStats[2]);                  long cachePages = long.Parse(sysctlStats[3]);                  long inactivePages = long.Parse(sysctlStats[4]);                  return pageSize * (freePages + cachePages + inactivePages);              }              catch (Exception ex)              {                  _log.DebugException(ex' "Could not get free memory on BSD.");                  return -1;              }
Magic Number,EventStore.Core.Services.Monitoring,SystemStatsHelper,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetFreeMemOnBSD,The following statement contains a magic number: try              {                  var sysctl = ShellExecutor.GetOutput("sysctl"' "-n hw.physmem hw.pagesize vm.stats.vm.v_free_count vm.stats.vm.v_cache_count vm.stats.vm.v_inactive_count");                  var sysctlStats = sysctl.Split(new[] { Environment.NewLine }' StringSplitOptions.RemoveEmptyEntries);                  long pageSize = long.Parse(sysctlStats[1]);                  long freePages = long.Parse(sysctlStats[2]);                  long cachePages = long.Parse(sysctlStats[3]);                  long inactivePages = long.Parse(sysctlStats[4]);                  return pageSize * (freePages + cachePages + inactivePages);              }              catch (Exception ex)              {                  _log.DebugException(ex' "Could not get free memory on BSD.");                  return -1;              }
Magic Number,EventStore.Core.Services.Monitoring,SystemStatsHelper,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetFreeMemOnBSD,The following statement contains a magic number: try              {                  var sysctl = ShellExecutor.GetOutput("sysctl"' "-n hw.physmem hw.pagesize vm.stats.vm.v_free_count vm.stats.vm.v_cache_count vm.stats.vm.v_inactive_count");                  var sysctlStats = sysctl.Split(new[] { Environment.NewLine }' StringSplitOptions.RemoveEmptyEntries);                  long pageSize = long.Parse(sysctlStats[1]);                  long freePages = long.Parse(sysctlStats[2]);                  long cachePages = long.Parse(sysctlStats[3]);                  long inactivePages = long.Parse(sysctlStats[4]);                  return pageSize * (freePages + cachePages + inactivePages);              }              catch (Exception ex)              {                  _log.DebugException(ex' "Could not get free memory on BSD.");                  return -1;              }
Magic Number,EventStore.Core.Services.Monitoring,SystemStatsHelper,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetFreeMemOnOSX,The following statement contains a magic number: try              {                  var vmstat = ShellExecutor.GetOutput("vm_stat");                  var sysctlStats = vmstat.Split(new[] { Environment.NewLine }' StringSplitOptions.RemoveEmptyEntries);                  foreach(var line in sysctlStats) {                      var l = line.Substring(0' line.Length -1);                      var pieces = l.Split(':');                      if(pieces.Length == 2) {                          if(pieces[0].Trim().ToLower() == "pages free") {                              freePages = int.Parse(pieces[1]);                              break;                          }                      }                  }                  return 4096 * freePages;              }              catch (Exception ex)              {                  _log.DebugException(ex' "Could not get free memory on OSX.");                  return -1;              }
Magic Number,EventStore.Core.Services.Monitoring,SystemStatsHelper,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\SystemStatsHelper.cs,GetFreeMemOnOSX,The following statement contains a magic number: try              {                  var vmstat = ShellExecutor.GetOutput("vm_stat");                  var sysctlStats = vmstat.Split(new[] { Environment.NewLine }' StringSplitOptions.RemoveEmptyEntries);                  foreach(var line in sysctlStats) {                      var l = line.Substring(0' line.Length -1);                      var pieces = l.Split(':');                      if(pieces.Length == 2) {                          if(pieces[0].Trim().ToLower() == "pages free") {                              freePages = int.Parse(pieces[1]);                              break;                          }                      }                  }                  return 4096 * freePages;              }              catch (Exception ex)              {                  _log.DebugException(ex' "Could not get free memory on OSX.");                  return -1;              }
Magic Number,EventStore.Core.Services.Monitoring.Stats,StatsContainer,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\Stats\StatsContainer.cs,Group,The following statement contains a magic number: foreach (var entry in input)              {                  var groups = entry.Key.Split(SplitSeparator' StringSplitOptions.RemoveEmptyEntries);                  if (groups.Length < 2)                  {                      groupContainer.Add(entry.Key' entry.Value);                      continue;                  }                    hasSubGroups = true;                    string prefix = groups[0];                  string remaining = string.Join(Separator' groups.Skip(1).ToArray());                    if (!groupContainer.ContainsKey(prefix))                      groupContainer.Add(prefix' NewDictionary());                    ((Dictionary<string' object>)groupContainer[prefix]).Add(remaining' entry.Value);              }
Magic Number,EventStore.Core.Services.Monitoring.Stats,EsDriveInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\Stats\EsDriveInfo.cs,EsDriveInfo,The following statement contains a magic number: Usage = TotalBytes != 0                      ? (UsedBytes * 100 / TotalBytes).ToString(CultureInfo.InvariantCulture) + "%"                      : "0%";
Magic Number,EventStore.Core.Services.Monitoring.Stats,EsDriveInfo,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\Stats\EsDriveInfo.cs,GetDirectoryRootInUnix,The following statement contains a magic number: try              {                  if(!Directory.Exists(directory)) return null;                  var driveInfo = ShellExecutor.GetOutput("df"' string.Format("-P {0}"' directory));                  var driveInfoLines = driveInfo.Split(new[] { Environment.NewLine }' StringSplitOptions.RemoveEmptyEntries);                  if(driveInfoLines.Length == 0) return null;                  var ourline = driveInfoLines[1];                  var trimmedLine = SystemStatsHelper.SpacesRegex.Replace(ourline' " ");                  var driveName = trimmedLine.Split(' ')[5]; //we choose the 'mounted on' column                  return driveName;              }              catch (Exception ex)              {                  log.DebugException(ex' "Could not get drive name for directory '{0}' on Unix."' directory);                  return null;              }
Magic Number,EventStore.Core.Services.Storage,StorageReaderWorker,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderWorker.cs,ResolveLinkToEvent,The following statement contains a magic number: if (eventRecord.EventType == SystemEventTypes.LinkTo)              {                  try                  {                      var parts = Helper.UTF8NoBom.GetString(eventRecord.Data).Split(LinkToSeparator' 2);                      long eventNumber = long.Parse(parts[0]);                      var streamId = parts[1];                        if (!_readIndex.CheckStreamAccess(streamId' StreamAccessType.Read' user).Granted)                          return null;                        var res = _readIndex.ReadEvent(streamId' eventNumber);                      if (res.Result == ReadEventResult.Success)                          return ResolvedEvent.ForResolvedLink(res.Record' eventRecord' commitPosition);                        return ResolvedEvent.ForFailedResolvedLink(eventRecord' res.Result' commitPosition);                  }                  catch (Exception exc)                  {                      Log.ErrorException(exc' "Error while resolving link for event record: {0}"' eventRecord.ToString());                  }                  // return unresolved link                  return ResolvedEvent.ForFailedResolvedLink(eventRecord' ReadEventResult.Error' commitPosition);              }
Magic Number,EventStore.Core.Services.Storage,StorageChaser,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageChaser.cs,ChaseTransactionLog,The following statement contains a magic number: try              {                  _writerCheckpoint.Flushed += OnWriterFlushed;                    _chaser.Open();                    // We rebuild index till the chaser position' because                  // everything else will be done by chaser as during replication                  // with no concurrency issues with writer' as writer before jumping                  // into master-mode and accepting writes will wait till chaser caught up.                  _indexCommitter.Init(_chaser.Checkpoint.Read());                  _masterBus.Publish(new SystemMessage.ServiceInitialized("StorageChaser"));                    while (!_stop)                  {                      if (_systemStarted)                          ChaserIteration();                      else                          Thread.Sleep(1);                  }              }              catch (Exception exc)              {                  Log.FatalException(exc' "Error in StorageChaser. Terminating...");                  _queueStats.EnterIdle();                  _queueStats.ProcessingStarted<FaultedChaserState>(0);                  Application.Exit(ExitCode.Error' "Error in StorageChaser. Terminating...\nError: " + exc.Message);                  while (!_stop)                  {                      Thread.Sleep(100);                  }                  _queueStats.ProcessingEnded(0);              }
Magic Number,EventStore.Core.Services.Storage,StorageChaser,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageChaser.cs,ChaserIteration,The following statement contains a magic number: if (!result.Success || start - _lastFlush >= _flushDelay + MinFlushDelay)              {                  _queueStats.ProcessingStarted<ChaserCheckpointFlush>(0);                  var startflush = _watch.ElapsedTicks;                  _chaser.Flush();                  HistogramService.SetValue(_chaserFlushHistogram'                              (long)((((double)_watch.ElapsedTicks - startflush) / Stopwatch.Frequency) * 1000000000));                  _queueStats.ProcessingEnded(1);                    var end = _watch.ElapsedTicks;                  _flushDelay = end - start;                  _lastFlush = end;              }
Magic Number,EventStore.Core.Services.Storage,StorageChaser,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageChaser.cs,ChaserIteration,The following statement contains a magic number: if (!result.Success)              {                  _queueStats.EnterIdle();                  var startwait = _watch.ElapsedTicks;  #if MONO                  _flushSignal.WaitOne(FlushWaitTimeout);  #else                  _flushSignal.Wait(FlushWaitTimeout);  #endif                  HistogramService.SetValue(_chaserWaitHistogram'                      (long)((((double)_watch.ElapsedTicks - startwait) / Stopwatch.Frequency) * 1000000000));              }
Magic Number,EventStore.Core.Services.Storage,StorageReaderService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageReaderService.cs,StorageReaderService,The following statement contains a magic number: _workersMultiHandler = new MultiQueuedHandler(                  _threadCount'                  queueNum => new QueuedHandlerThreadPool(storageReaderBus'                                                          string.Format("StorageReaderQueue #{0}"' queueNum + 1)'                                                          groupName: "StorageReaderQueue"'                                                          watchSlowMsg: true'                                                          slowMsgThreshold: TimeSpan.FromMilliseconds(200)));
Magic Number,EventStore.Core.Services.Storage,StorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,StorageWriterService,The following statement contains a magic number: StorageWriterQueue = QueuedHandler.CreateQueuedHandler(new AdHocHandler<Message>(CommonHandle)'                  "StorageWriterQueue"'                  true'                  TimeSpan.FromMilliseconds(500));
Magic Number,EventStore.Core.Services.Storage,StorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Handle,The following statement contains a magic number: if (totalTime < TimeSpan.FromSeconds(5) || (int) totalTime.TotalSeconds%30 == 0) // too verbose otherwise                  Log.Debug("Still waiting for chaser to catch up already for {0}..."' totalTime);
Magic Number,EventStore.Core.Services.Storage,StorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Handle,The following statement contains a magic number: if (totalTime < TimeSpan.FromSeconds(5) || (int) totalTime.TotalSeconds%30 == 0) // too verbose otherwise                  Log.Debug("Still waiting for chaser to catch up already for {0}..."' totalTime);
Magic Number,EventStore.Core.Services.Storage,StorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Flush,The following statement contains a magic number: if (force || FlushMessagesInQueue == 0 || start - _lastFlushTimestamp >= _lastFlushDelay + _minFlushDelay)              {                  var flushSize = Writer.Checkpoint.ReadNonFlushed() - Writer.Checkpoint.Read();                    Writer.Flush();                  HistogramService.SetValue(_writerFlushHistogram'                      (long) ((((double) _watch.ElapsedTicks - start)/Stopwatch.Frequency)*1000000000));                  var end = _watch.ElapsedTicks;                  var flushDelay = end - start;                  Interlocked.Exchange(ref _lastFlushDelay' flushDelay);                  Interlocked.Exchange(ref _lastFlushSize' flushSize);                  _lastFlushTimestamp = end;                    if (_statCount >= LastStatsCount)                  {                      Interlocked.Add(ref _sumFlushSize' -_lastFlushSizes[_statIndex]);                      Interlocked.Add(ref _sumFlushDelay' -_lastFlushDelays[_statIndex]);                  }                  else                  {                      _statCount += 1;                  }                  _lastFlushSizes[_statIndex] = flushSize;                  _lastFlushDelays[_statIndex] = flushDelay;                  Interlocked.Add(ref _sumFlushSize' flushSize);                  Interlocked.Add(ref _sumFlushDelay' flushDelay);                  Interlocked.Exchange(ref _maxFlushSize' Math.Max(Interlocked.Read(ref _maxFlushSize)' flushSize));                  Interlocked.Exchange(ref _maxFlushDelay' Math.Max(Interlocked.Read(ref _maxFlushDelay)' flushDelay));                  _statIndex = (_statIndex + 1) & (LastStatsCount - 1);                    PurgeNotProcessedInfo();                    return true;              }
Magic Number,EventStore.Core.Services.Transport.Http.Authentication,PasswordChangeNotificationReader,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Authentication\PasswordChangeNotificationReader.cs,ReadNotificationsFrom,The following statement contains a magic number: _ioDispatcher.ReadForward(                  UserManagementService.UserPasswordNotificationsStreamId' fromEventNumber' 100' false'                  SystemAccount.Principal' completed =>                      {                          if (_stopped) return;                          switch (completed.Result)                          {                              case ReadStreamResult.AccessDenied:                              case ReadStreamResult.Error:                              case ReadStreamResult.NotModified:                                  _log.Error("Failed to read: " + UserManagementService.UserPasswordNotificationsStreamId + " completed.Result=" + completed.Result.ToString());                                  _ioDispatcher.Delay(                                      TimeSpan.FromSeconds(10)' () => ReadNotificationsFrom(fromEventNumber));                                  break;                              case ReadStreamResult.NoStream:                              case ReadStreamResult.StreamDeleted:                                  _ioDispatcher.Delay(                                      TimeSpan.FromSeconds(1)' () => ReadNotificationsFrom(0));                                  break;                              case ReadStreamResult.Success:                                  foreach (var @event in completed.Events)                                      PublishPasswordChangeNotificationFrom(@event);                                  if (completed.IsEndOfStream)                                      _ioDispatcher.Delay(                                          TimeSpan.FromSeconds(1)' () => ReadNotificationsFrom(completed.NextEventNumber));                                  else                                      ReadNotificationsFrom(completed.NextEventNumber);                                  break;                              default:                                  throw new NotSupportedException();                          }                      });
Magic Number,EventStore.Core.Services.Transport.Http.Authentication,PasswordChangeNotificationReader,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Authentication\PasswordChangeNotificationReader.cs,ReadNotificationsFrom,The following statement contains a magic number: _ioDispatcher.ReadForward(                  UserManagementService.UserPasswordNotificationsStreamId' fromEventNumber' 100' false'                  SystemAccount.Principal' completed =>                      {                          if (_stopped) return;                          switch (completed.Result)                          {                              case ReadStreamResult.AccessDenied:                              case ReadStreamResult.Error:                              case ReadStreamResult.NotModified:                                  _log.Error("Failed to read: " + UserManagementService.UserPasswordNotificationsStreamId + " completed.Result=" + completed.Result.ToString());                                  _ioDispatcher.Delay(                                      TimeSpan.FromSeconds(10)' () => ReadNotificationsFrom(fromEventNumber));                                  break;                              case ReadStreamResult.NoStream:                              case ReadStreamResult.StreamDeleted:                                  _ioDispatcher.Delay(                                      TimeSpan.FromSeconds(1)' () => ReadNotificationsFrom(0));                                  break;                              case ReadStreamResult.Success:                                  foreach (var @event in completed.Events)                                      PublishPasswordChangeNotificationFrom(@event);                                  if (completed.IsEndOfStream)                                      _ioDispatcher.Delay(                                          TimeSpan.FromSeconds(1)' () => ReadNotificationsFrom(completed.NextEventNumber));                                  else                                      ReadNotificationsFrom(completed.NextEventNumber);                                  break;                              default:                                  throw new NotSupportedException();                          }                      });
Magic Number,EventStore.Core.Services.Transport.Http.Authentication,TrustedHttpAuthenticationProvider,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Authentication\TrustedHttpAuthenticationProvider.cs,CreatePrincipal,The following statement contains a magic number: if (loginAndGroups.Length == 0 || loginAndGroups.Length > 2)                  return null;
Magic Number,EventStore.Core.Services.Transport.Http.Authentication,TrustedHttpAuthenticationProvider,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Authentication\TrustedHttpAuthenticationProvider.cs,CreatePrincipal,The following statement contains a magic number: if (loginAndGroups.Length == 2)              {                  var groups = loginAndGroups[1];                  var groupsSplit = groups.Split(''');                  var roles = new string[groupsSplit.Length + 1];                  Array.Copy(groupsSplit' roles' groupsSplit.Length);                  roles[roles.Length - 1] = login;                  for (var i = 0; i < roles.Length; i++)                      roles[i] = roles[i].Trim();                  return new OpenGenericPrincipal(new GenericIdentity(login)' roles);              }              else              {                  return new OpenGenericPrincipal(new GenericIdentity(login)' new[] {login});              }
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,ClusterWebUiController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ClusterWebUIController.cs,OnListNodeSubsystems,The following statement contains a magic number: http.ReplyTextContent(  				Codec.Json.To(_enabledNodeSubsystems)'  				200'  				"OK"'  				"application/json"'  				null'  				ex => Log.InfoException(ex' "Failed to prepare main menu")  				);
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,ClusterWebUiController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ClusterWebUIController.cs,RegisterRedirectAction,The following statement contains a magic number: service.RegisterAction(                  new ControllerAction(                      fromUrl'                       HttpMethod.Get'                       Codec.NoCodecs'                       new ICodec[] { Codec.ManualEncoding })'                      (http' match) => http.ReplyTextContent(                          "Moved"' 302' "Found"' "text/plain"'                          new[]                              {                                  new KeyValuePair<string' string>(                                      "Location"'   new Uri(http.HttpEntity.RequestedUrl' toUrl).AbsoluteUri)                              }' Console.WriteLine));
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,ElectController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\ElectController.cs,ElectController,The following statement contains a magic number: _operationTimeout = TimeSpan.FromMilliseconds(2000);
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,GossipController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\GossipController.cs,TryGetServerEndPoint,The following statement contains a magic number: if (IPAddress.TryParse(clusterInfoDto.ServerIp' out serverAddress)                  && clusterInfoDto.ServerPort > 0                  && clusterInfoDto.ServerPort <= 65535)              {                  serverEndPoint = new IPEndPoint(serverAddress' clusterInfoDto.ServerPort);              }
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,HistogramController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\HistogramController.cs,OnGetHistogram,The following statement contains a magic number: lock (histogram)              {                  histogram.outputPercentileDistribution(writer' outputValueUnitScalingRatio: 1000.0*1000.0);              }
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,HistogramController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\HistogramController.cs,OnGetHistogram,The following statement contains a magic number: lock (histogram)              {                  histogram.outputPercentileDistribution(writer' outputValueUnitScalingRatio: 1000.0*1000.0);              }
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,HttpHelpers,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\HttpHelpers.cs,RegisterRedirectAction,The following statement contains a magic number: service.RegisterAction(                  new ControllerAction(                      fromUrl'                      HttpMethod.Get'                      Codec.NoCodecs'                      new ICodec[] { Codec.ManualEncoding })'                      (http' match) => http.ReplyTextContent(                          "Moved"' 302' "Found"' "text/plain"'                          new[]                              {                                  new KeyValuePair<string' string>(                                      "Location"'   new Uri(match.BaseUri' toUrl).AbsoluteUri)                              }' Console.WriteLine));
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,PersistentSubscriptionController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,GetNextNMessages,The following statement contains a magic number: if (!cnt.IsEmptyString() && (!int.TryParse(cnt' out count) || count > 100 || count < 1))              {                  SendBadRequest(http' string.Format("Message count must be an integer between 1 and 100 'count' ='{0}'"' count));                  return;              }
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,SubscriptionConfigData,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscriptionConfigData,The following statement contains a magic number: MessageTimeoutMilliseconds = 10000;
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,SubscriptionConfigData,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscriptionConfigData,The following statement contains a magic number: MaxRetryCount = 10;
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,SubscriptionConfigData,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscriptionConfigData,The following statement contains a magic number: CheckPointAfterMilliseconds = 1000;
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,SubscriptionConfigData,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscriptionConfigData,The following statement contains a magic number: MinCheckPointCount = 10;
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,SubscriptionConfigData,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscriptionConfigData,The following statement contains a magic number: MaxCheckPointCount = 500;
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,SubscriptionConfigData,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscriptionConfigData,The following statement contains a magic number: MaxSubscriberCount = 10;
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,SubscriptionConfigData,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscriptionConfigData,The following statement contains a magic number: BufferSize = 500;
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,SubscriptionConfigData,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscriptionConfigData,The following statement contains a magic number: LiveBufferSize = 500;
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,SubscriptionConfigData,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\PersistentSubscriptionController.cs,SubscriptionConfigData,The following statement contains a magic number: ReadBatchSize = 20;
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,StatController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\StatController.cs,GetStatSelector,The following statement contains a magic number: if (statPath.StartsWith("stats/"))              {                  statPath = statPath.Substring(6);                  if (string.IsNullOrEmpty(statPath))                      return dict => dict;              }
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,PostEntry,The following statement contains a magic number: manager.ReadRequestAsync(                  (man' body) =>                      {                          var events = new Event[0];                          try                          {                              events = AutoEventConverter.SmartParse(body' manager.RequestCodec' idIncluded' typeIncluded);                          }                          catch (Exception ex)                          {                              SendBadRequest(manager' ex.Message);                              return;                          }                          if (events.IsEmpty())                          {                              SendBadRequest(manager' "Write request body invalid.");                              return;                          }                          foreach (var e in events)                          {                              if (e.Data.Length + e.Metadata.Length > 4 * 1024 * 1024)                              {                                  SendTooBig(manager);                              }                          }                          var envelope = new SendToHttpEnvelope(_networkSendQueue'                                                                manager'                                                                Format.WriteEventsCompleted'                                                                (a' m) => Configure.WriteEventsCompleted(a' m' stream));                          var corrId = Guid.NewGuid();                          var msg = new ClientMessage.WriteEvents(corrId' corrId' envelope' requireMaster'                                                                  stream' expectedVersion' events' manager.User);                          Publish(msg);                      }'                  e => Log.Debug("Error while reading request (POST entry): {0}."' e.Message));
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,PostEntry,The following statement contains a magic number: manager.ReadRequestAsync(                  (man' body) =>                      {                          var events = new Event[0];                          try                          {                              events = AutoEventConverter.SmartParse(body' manager.RequestCodec' idIncluded' typeIncluded);                          }                          catch (Exception ex)                          {                              SendBadRequest(manager' ex.Message);                              return;                          }                          if (events.IsEmpty())                          {                              SendBadRequest(manager' "Write request body invalid.");                              return;                          }                          foreach (var e in events)                          {                              if (e.Data.Length + e.Metadata.Length > 4 * 1024 * 1024)                              {                                  SendTooBig(manager);                              }                          }                          var envelope = new SendToHttpEnvelope(_networkSendQueue'                                                                manager'                                                                Format.WriteEventsCompleted'                                                                (a' m) => Configure.WriteEventsCompleted(a' m' stream));                          var corrId = Guid.NewGuid();                          var msg = new ClientMessage.WriteEvents(corrId' corrId' envelope' requireMaster'                                                                  stream' expectedVersion' events' manager.User);                          Publish(msg);                      }'                  e => Log.Debug("Error while reading request (POST entry): {0}."' e.Message));
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,PostEntry,The following statement contains a magic number: manager.ReadRequestAsync(                  (man' body) =>                      {                          var events = new Event[0];                          try                          {                              events = AutoEventConverter.SmartParse(body' manager.RequestCodec' idIncluded' typeIncluded);                          }                          catch (Exception ex)                          {                              SendBadRequest(manager' ex.Message);                              return;                          }                          if (events.IsEmpty())                          {                              SendBadRequest(manager' "Write request body invalid.");                              return;                          }                          foreach (var e in events)                          {                              if (e.Data.Length + e.Metadata.Length > 4 * 1024 * 1024)                              {                                  SendTooBig(manager);                              }                          }                          var envelope = new SendToHttpEnvelope(_networkSendQueue'                                                                manager'                                                                Format.WriteEventsCompleted'                                                                (a' m) => Configure.WriteEventsCompleted(a' m' stream));                          var corrId = Guid.NewGuid();                          var msg = new ClientMessage.WriteEvents(corrId' corrId' envelope' requireMaster'                                                                  stream' expectedVersion' events' manager.User);                          Publish(msg);                      }'                  e => Log.Debug("Error while reading request (POST entry): {0}."' e.Message));
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetETagStreamVersion,The following statement contains a magic number: if (etag.IsNotEmptyString())              {                  // etag format is version;contenttypehash                  var splitted = etag.Trim('\"').Split(ETagSeparatorArray);                  if (splitted.Length == 2)                  {                      var typeHash = manager.ResponseCodec.ContentType.GetHashCode().ToString(CultureInfo.InvariantCulture);                      long streamVersion;                      var res = splitted[1] == typeHash && long.TryParse(splitted[0]' out streamVersion) ? (long?)streamVersion : null;                      return res;                  }              }
Magic Number,EventStore.Core.Services.Transport.Http.Controllers,AtomController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\Controllers\AtomController.cs,GetETagTFPosition,The following statement contains a magic number: if (etag.IsNotEmptyString())              {                  // etag format is version;contenttypehash                  var splitted = etag.Trim('\"').Split(ETagSeparatorArray);                  if (splitted.Length == 2)                  {                      var typeHash = manager.ResponseCodec.ContentType.GetHashCode().ToString(CultureInfo.InvariantCulture);                      long tfEofPosition;                      return splitted[1] == typeHash && long.TryParse(splitted[0]' out tfEofPosition) ? (long?)tfEofPosition : null;                  }              }
Magic Number,EventStore.Core.Services.Transport.Http,ControllerAction,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\ControllerAction.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (UriTemplate.GetHashCode()*397) ^ HttpMethod.GetHashCode();              }
Magic Number,EventStore.Core.Services.Transport.Http,ResponseConfiguration,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\ResponseConfiguration.cs,GetHttpStatusDescription,The following statement contains a magic number: if (code == 200)                  return "OK";
Magic Number,EventStore.Core.Services.Transport.Http,ResponseConfiguration,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\ResponseConfiguration.cs,GetHttpStatusDescription,The following statement contains a magic number: var result = new StringBuilder(name.Length + 5);
Magic Number,EventStore.Core.Services.Transport.Http,SendToHttpEnvelope<TExpectedResponseMessage>,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Http\SendToHttpEnvelope.cs,Configurator,The following statement contains a magic number: try              {                  return _configurator(http.ResponseCodec' (TExpectedResponseMessage)message);              }              catch (InvalidCastException)              {                  //NOTE: using exceptions to allow handling errors in debugger                  return new ResponseConfiguration(500' "Internal server error"' "text/plain"' Helper.UTF8NoBom);              }
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpDispatcher.cs,TcpDispatcher,The following statement contains a magic number: _unwrappers = new Func<TcpPackage' IEnvelope' IPrincipal' string' string' TcpConnectionManager' Message>[2][];
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpDispatcher.cs,TcpDispatcher,The following statement contains a magic number: _unwrappers[0] = new Func<TcpPackage' IEnvelope' IPrincipal' string' string' TcpConnectionManager' Message>[255];
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpDispatcher.cs,TcpDispatcher,The following statement contains a magic number: _unwrappers[1] = new Func<TcpPackage' IEnvelope' IPrincipal' string' string' TcpConnectionManager' Message>[255];
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpDispatcher,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpDispatcher.cs,TcpDispatcher,The following statement contains a magic number: _wrappers = new Dictionary<Type' Func<Message' TcpPackage>>[2];
Magic Number,EventStore.Core.Services.Transport.Tcp,ProtobufExtensions,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ProtobufExtensions.cs,ProtobufExtensions,The following statement contains a magic number: for(var i=0;i<300;i++)              {                  _streams.Push(new MemoryStream(2048));              }
Magic Number,EventStore.Core.Services.Transport.Tcp,ProtobufExtensions,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ProtobufExtensions.cs,ProtobufExtensions,The following statement contains a magic number: for(var i=0;i<300;i++)              {                  _streams.Push(new MemoryStream(2048));              }
Magic Number,EventStore.Core.Services.Transport.Tcp,ProtobufExtensions,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ProtobufExtensions.cs,AcquireStream,The following statement contains a magic number: for(var i=0;i<1000;i++)              {                  MemoryStream ret;                  if(_streams.TryPop(out ret))                  {                      ret.SetLength(0);                      return ret;                  }                  if((i+1) % 5 == 0)                      Thread.Sleep(1); //need to do better than this              }
Magic Number,EventStore.Core.Services.Transport.Tcp,ProtobufExtensions,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\ProtobufExtensions.cs,AcquireStream,The following statement contains a magic number: for(var i=0;i<1000;i++)              {                  MemoryStream ret;                  if(_streams.TryPop(out ret))                  {                      ret.SetLength(0);                      return ret;                  }                  if((i+1) % 5 == 0)                      Thread.Sleep(1); //need to do better than this              }
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpPackage,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,FromArraySegment,The following statement contains a magic number: var guidBytes = new byte[16];
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpPackage,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,FromArraySegment,The following statement contains a magic number: Buffer.BlockCopy(data.Array' data.Offset + CorrelationOffset' guidBytes' 0' 16);
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpPackage,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,AsByteArray,The following statement contains a magic number: if ((Flags & TcpFlags.Authenticated) != 0)              {                  var loginLen = Helper.UTF8NoBom.GetByteCount(Login);                  var passLen = Helper.UTF8NoBom.GetByteCount(Password);                  if (loginLen > 255) throw new ArgumentException(string.Format("Login serialized length should be less than 256 bytes (but is {0})."' loginLen));                  if (passLen > 255) throw new ArgumentException(string.Format("Password serialized length should be less than 256 bytes (but is {0})."' passLen));                    var res = new byte[MandatorySize + 2 + loginLen + passLen + Data.Count];                  res[CommandOffset] = (byte) Command;                  res[FlagsOffset] = (byte) Flags;                  Buffer.BlockCopy(CorrelationId.ToByteArray()' 0' res' CorrelationOffset' 16);                    res[AuthOffset] = (byte) loginLen;                  Helper.UTF8NoBom.GetBytes(Login' 0' Login.Length' res' AuthOffset + 1);                  res[AuthOffset + 1 + loginLen] = (byte)passLen;                  Helper.UTF8NoBom.GetBytes(Password' 0' Password.Length' res' AuthOffset + 1 + loginLen + 1);                    Buffer.BlockCopy(Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);                  return res;              }              else              {                  var res = new byte[MandatorySize + Data.Count];                  res[CommandOffset] = (byte)Command;                  res[FlagsOffset] = (byte)Flags;                  Buffer.BlockCopy(CorrelationId.ToByteArray()' 0' res' CorrelationOffset' 16);                  Buffer.BlockCopy(Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);                  return res;              }
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpPackage,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,AsByteArray,The following statement contains a magic number: if ((Flags & TcpFlags.Authenticated) != 0)              {                  var loginLen = Helper.UTF8NoBom.GetByteCount(Login);                  var passLen = Helper.UTF8NoBom.GetByteCount(Password);                  if (loginLen > 255) throw new ArgumentException(string.Format("Login serialized length should be less than 256 bytes (but is {0})."' loginLen));                  if (passLen > 255) throw new ArgumentException(string.Format("Password serialized length should be less than 256 bytes (but is {0})."' passLen));                    var res = new byte[MandatorySize + 2 + loginLen + passLen + Data.Count];                  res[CommandOffset] = (byte) Command;                  res[FlagsOffset] = (byte) Flags;                  Buffer.BlockCopy(CorrelationId.ToByteArray()' 0' res' CorrelationOffset' 16);                    res[AuthOffset] = (byte) loginLen;                  Helper.UTF8NoBom.GetBytes(Login' 0' Login.Length' res' AuthOffset + 1);                  res[AuthOffset + 1 + loginLen] = (byte)passLen;                  Helper.UTF8NoBom.GetBytes(Password' 0' Password.Length' res' AuthOffset + 1 + loginLen + 1);                    Buffer.BlockCopy(Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);                  return res;              }              else              {                  var res = new byte[MandatorySize + Data.Count];                  res[CommandOffset] = (byte)Command;                  res[FlagsOffset] = (byte)Flags;                  Buffer.BlockCopy(CorrelationId.ToByteArray()' 0' res' CorrelationOffset' 16);                  Buffer.BlockCopy(Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);                  return res;              }
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpPackage,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,AsByteArray,The following statement contains a magic number: if ((Flags & TcpFlags.Authenticated) != 0)              {                  var loginLen = Helper.UTF8NoBom.GetByteCount(Login);                  var passLen = Helper.UTF8NoBom.GetByteCount(Password);                  if (loginLen > 255) throw new ArgumentException(string.Format("Login serialized length should be less than 256 bytes (but is {0})."' loginLen));                  if (passLen > 255) throw new ArgumentException(string.Format("Password serialized length should be less than 256 bytes (but is {0})."' passLen));                    var res = new byte[MandatorySize + 2 + loginLen + passLen + Data.Count];                  res[CommandOffset] = (byte) Command;                  res[FlagsOffset] = (byte) Flags;                  Buffer.BlockCopy(CorrelationId.ToByteArray()' 0' res' CorrelationOffset' 16);                    res[AuthOffset] = (byte) loginLen;                  Helper.UTF8NoBom.GetBytes(Login' 0' Login.Length' res' AuthOffset + 1);                  res[AuthOffset + 1 + loginLen] = (byte)passLen;                  Helper.UTF8NoBom.GetBytes(Password' 0' Password.Length' res' AuthOffset + 1 + loginLen + 1);                    Buffer.BlockCopy(Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);                  return res;              }              else              {                  var res = new byte[MandatorySize + Data.Count];                  res[CommandOffset] = (byte)Command;                  res[FlagsOffset] = (byte)Flags;                  Buffer.BlockCopy(CorrelationId.ToByteArray()' 0' res' CorrelationOffset' 16);                  Buffer.BlockCopy(Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);                  return res;              }
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpPackage,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,AsByteArray,The following statement contains a magic number: if ((Flags & TcpFlags.Authenticated) != 0)              {                  var loginLen = Helper.UTF8NoBom.GetByteCount(Login);                  var passLen = Helper.UTF8NoBom.GetByteCount(Password);                  if (loginLen > 255) throw new ArgumentException(string.Format("Login serialized length should be less than 256 bytes (but is {0})."' loginLen));                  if (passLen > 255) throw new ArgumentException(string.Format("Password serialized length should be less than 256 bytes (but is {0})."' passLen));                    var res = new byte[MandatorySize + 2 + loginLen + passLen + Data.Count];                  res[CommandOffset] = (byte) Command;                  res[FlagsOffset] = (byte) Flags;                  Buffer.BlockCopy(CorrelationId.ToByteArray()' 0' res' CorrelationOffset' 16);                    res[AuthOffset] = (byte) loginLen;                  Helper.UTF8NoBom.GetBytes(Login' 0' Login.Length' res' AuthOffset + 1);                  res[AuthOffset + 1 + loginLen] = (byte)passLen;                  Helper.UTF8NoBom.GetBytes(Password' 0' Password.Length' res' AuthOffset + 1 + loginLen + 1);                    Buffer.BlockCopy(Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);                  return res;              }              else              {                  var res = new byte[MandatorySize + Data.Count];                  res[CommandOffset] = (byte)Command;                  res[FlagsOffset] = (byte)Flags;                  Buffer.BlockCopy(CorrelationId.ToByteArray()' 0' res' CorrelationOffset' 16);                  Buffer.BlockCopy(Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);                  return res;              }
Magic Number,EventStore.Core.Services.Transport.Tcp,TcpPackage,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Transport\Tcp\TcpPackage.cs,AsByteArray,The following statement contains a magic number: if ((Flags & TcpFlags.Authenticated) != 0)              {                  var loginLen = Helper.UTF8NoBom.GetByteCount(Login);                  var passLen = Helper.UTF8NoBom.GetByteCount(Password);                  if (loginLen > 255) throw new ArgumentException(string.Format("Login serialized length should be less than 256 bytes (but is {0})."' loginLen));                  if (passLen > 255) throw new ArgumentException(string.Format("Password serialized length should be less than 256 bytes (but is {0})."' passLen));                    var res = new byte[MandatorySize + 2 + loginLen + passLen + Data.Count];                  res[CommandOffset] = (byte) Command;                  res[FlagsOffset] = (byte) Flags;                  Buffer.BlockCopy(CorrelationId.ToByteArray()' 0' res' CorrelationOffset' 16);                    res[AuthOffset] = (byte) loginLen;                  Helper.UTF8NoBom.GetBytes(Login' 0' Login.Length' res' AuthOffset + 1);                  res[AuthOffset + 1 + loginLen] = (byte)passLen;                  Helper.UTF8NoBom.GetBytes(Password' 0' Password.Length' res' AuthOffset + 1 + loginLen + 1);                    Buffer.BlockCopy(Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);                  return res;              }              else              {                  var res = new byte[MandatorySize + Data.Count];                  res[CommandOffset] = (byte)Command;                  res[FlagsOffset] = (byte)Flags;                  Buffer.BlockCopy(CorrelationId.ToByteArray()' 0' res' CorrelationOffset' 16);                  Buffer.BlockCopy(Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);                  return res;              }
Magic Number,EventStore.Core.Services.UserManagement,UserManagementService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\UserManagement\UserManagementService.cs,Handle,The following statement contains a magic number: _numberOfStandardUsersToBeCreated = 2;
Magic Number,EventStore.Core.Services.VNode,ClusterVNodeController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,ClusterVNodeController,The following statement contains a magic number: if(vnodeSettings.ClusterNodeCount == 1) {                  _serviceShutdownsToExpect = 4;              }
Magic Number,EventStore.Core.Services.VNode,ClusterVNodeController,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\VNode\ClusterVNodeController.cs,ClusterVNodeController,The following statement contains a magic number: _forwardingTimeout = vnodeSettings.PrepareTimeout + vnodeSettings.CommitTimeout + TimeSpan.FromMilliseconds(300);
Magic Number,EventStore.Core.TransactionLog.Checkpoint,FileCheckpoint,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Checkpoint\FileCheckpoint.cs,FileCheckpoint,The following statement contains a magic number: if (_fileStream.Length != 8)                  _fileStream.SetLength(8);
Magic Number,EventStore.Core.TransactionLog.Checkpoint,FileCheckpoint,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Checkpoint\FileCheckpoint.cs,FileCheckpoint,The following statement contains a magic number: if (_fileStream.Length != 8)                  _fileStream.SetLength(8);
Magic Number,EventStore.Core.TransactionLog.Checkpoint,WriteThroughFileCheckpoint,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Checkpoint\WriteThroughFileCheckpoint.cs,WriteThroughFileCheckpoint,The following statement contains a magic number: buffer = new byte[4096];
Magic Number,EventStore.Core.TransactionLog.Checkpoint,WriteThroughFileCheckpoint,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Checkpoint\WriteThroughFileCheckpoint.cs,WriteThroughFileCheckpoint,The following statement contains a magic number: _stream = new FileStream(handle' FileAccess.ReadWrite' 4096);
Magic Number,EventStore.Core.TransactionLog.Checkpoint,WriteThroughFileCheckpoint,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Checkpoint\WriteThroughFileCheckpoint.cs,WriteThroughFileCheckpoint,The following statement contains a magic number: var exists = _stream.Length == 4096;
Magic Number,EventStore.Core.TransactionLog.Checkpoint,WriteThroughFileCheckpoint,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Checkpoint\WriteThroughFileCheckpoint.cs,WriteThroughFileCheckpoint,The following statement contains a magic number: _stream.SetLength(4096);
Magic Number,EventStore.Core.TransactionLog.Chunks,TFChunkDbTruncator,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkDbTruncator.cs,TruncateChunkAndFillWithZeros,The following statement contains a magic number: using (var fs = new FileStream(chunkFilename' FileMode.Open' FileAccess.ReadWrite' FileShare.Read))              {                  fs.SetLength(ChunkHeader.Size + chunkHeader.ChunkSize + ChunkFooter.Size);                  fs.Position = ChunkHeader.Size + chunkHeader.GetLocalLogPosition(truncateChk);                  var zeros = new byte[65536];                  var leftToWrite = fs.Length - fs.Position;                  while (leftToWrite > 0)                  {                      var toWrite = (int)Math.Min(leftToWrite' zeros.Length);                      fs.Write(zeros' 0' toWrite);                      leftToWrite -= toWrite;                  }                  fs.FlushToDisk();              }
Magic Number,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ScavengeChunks,The following statement contains a magic number: try              {                  var commits = new Dictionary<long' CommitInfo>();                    foreach (var oldChunk in oldChunks)                  {                      TraverseChunk(oldChunk'                                    (prepare' _) => { /* NOOP */ }'                                    (commit' _) =>                                    {                                        if (commit.TransactionPosition >= chunkStartPos)                                            commits.Add(commit.TransactionPosition' new CommitInfo(commit));                                    }'                                    (system' _) => { /* NOOP */ });                  }                    long newSize = 0;                  int positionMapCount = 0;                    foreach (var oldChunk in oldChunks)                  {                      TraverseChunk(oldChunk'                                    (prepare' len) =>                                    {                                        if (ShouldKeepPrepare(prepare' commits' chunkStartPos' chunkEndPos))                                        {                                            newSize += len + 2 * sizeof(int);                                            positionMapCount++;                                        }                                    }'                                    (commit' len) =>                                    {                                        if (ShouldKeepCommit(commit' commits))                                        {                                            newSize += len + 2 * sizeof(int);                                            positionMapCount++;                                        }                                    }'                                    (system' len) =>                                    {                                        newSize += len + 2 * sizeof(int);                                        positionMapCount++;                                    });                  }                    newSize += positionMapCount * PosMap.FullSize + ChunkHeader.Size + ChunkFooter.Size;                    var oldVersion = oldChunks.Any(x => x.ChunkHeader.Version != 3);                  var oldSize = oldChunks.Sum(x => (long)x.PhysicalDataSize + x.ChunkFooter.MapSize + ChunkHeader.Size + ChunkFooter.Size);                    if (oldSize <= newSize && !alwaysKeepScavenged && !_unsafeIgnoreHardDeletes && !oldVersion)                  {                      Log.Trace("Scavenging of chunks:");                      Log.Trace(oldChunksList);                      Log.Trace("completed in {0}."' sw.Elapsed);                      Log.Trace("Old chunks' versions are kept as they are smaller.");                      Log.Trace("Old chunk total size: {0}' scavenged chunk size: {1}."' oldSize' newSize);                      Log.Trace("Scavenged chunk removed.");                        newChunk.MarkForDeletion();                      PublishChunksCompletedEvent(chunkStartNumber' chunkEndNumber' sw.Elapsed' false' spaceSaved);                      return false;                  }                    var positionMapping = new List<PosMap>();                  foreach (var oldChunk in oldChunks)                  {                      TraverseChunk(oldChunk'                                    (prepare' _) =>                                    {                                        if (ShouldKeepPrepare(prepare' commits' chunkStartPos' chunkEndPos))                                            positionMapping.Add(WriteRecord(newChunk' prepare));                                    }'                                    (commit' _) =>                                    {                                        if (ShouldKeepCommit(commit' commits))                                            positionMapping.Add(WriteRecord(newChunk' commit));                                    }'                                    // we always keep system log records for now                                    (system' _) => positionMapping.Add(WriteRecord(newChunk' system)));                  }                  newChunk.CompleteScavenge(positionMapping);                    if(_unsafeIgnoreHardDeletes) {                      Log.Trace("Forcing scavenge chunk to be kept even if bigger.");                  }                    if(oldVersion) {                      Log.Trace("Forcing scavenged chunk to be kept as old chunk is a previous version.");                  }                    var chunk = _db.Manager.SwitchChunk(newChunk' verifyHash: false' removeChunksWithGreaterNumbers: false);                  if (chunk != null)                  {                      Log.Trace("Scavenging of chunks:");                      Log.Trace(oldChunksList);                      Log.Trace("completed in {0}."' sw.Elapsed);                      Log.Trace("New chunk: {0} --> #{1}-{2} ({3})."' Path.GetFileName(tmpChunkPath)' chunkStartNumber'                          chunkEndNumber' Path.GetFileName(chunk.FileName));                      Log.Trace("Old chunks total size: {0}' scavenged chunk size: {1}."' oldSize' newSize);                      spaceSaved = oldSize - newSize;                      PublishChunksCompletedEvent(chunkStartNumber' chunkEndNumber' sw.Elapsed' true' spaceSaved);                      return true;                  }                  else                  {                      Log.Trace("Scavenging of chunks:");                      Log.Trace("{0}"' oldChunksList);                      Log.Trace("completed in {1}."' sw.Elapsed);                      Log.Trace("But switching was prevented for new chunk: #{0}-{1} ({2})."' chunkStartNumber' chunkEndNumber' Path.GetFileName(tmpChunkPath));                      Log.Trace("Old chunks total size: {0}' scavenged chunk size: {1}."' oldSize' newSize);                      PublishChunksCompletedEvent(chunkStartNumber' chunkEndNumber' sw.Elapsed' false' spaceSaved);                      return false;                  }              }              catch (FileBeingDeletedException exc)              {                  Log.Info("Got FileBeingDeletedException exception during scavenging' that probably means some chunks were re-replicated.");                  Log.Info("Scavenging of following chunks will be skipped:");                  Log.Info("{0}"' oldChunksList);                  Log.Info("Stopping scavenging and removing temp chunk '{0}'..."' tmpChunkPath);                  Log.Info("Exception message: {0}."' exc.Message);                  DeleteTempChunk(tmpChunkPath' MaxRetryCount);                  PublishChunksCompletedEvent(chunkStartNumber' chunkEndNumber' sw.Elapsed' false' spaceSaved' exc.Message);                  return false;              }              catch (Exception ex)              {                  Log.Info("Got exception while scavenging chunk: #{0}-{1}. This chunk will be skipped\n"                           + "Exception: {2}."' chunkStartNumber' chunkEndNumber' ex.ToString());                  DeleteTempChunk(tmpChunkPath' MaxRetryCount);                  PublishChunksCompletedEvent(chunkStartNumber' chunkEndNumber' sw.Elapsed' false' 0' ex.Message);                  return false;              }
Magic Number,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ScavengeChunks,The following statement contains a magic number: try              {                  var commits = new Dictionary<long' CommitInfo>();                    foreach (var oldChunk in oldChunks)                  {                      TraverseChunk(oldChunk'                                    (prepare' _) => { /* NOOP */ }'                                    (commit' _) =>                                    {                                        if (commit.TransactionPosition >= chunkStartPos)                                            commits.Add(commit.TransactionPosition' new CommitInfo(commit));                                    }'                                    (system' _) => { /* NOOP */ });                  }                    long newSize = 0;                  int positionMapCount = 0;                    foreach (var oldChunk in oldChunks)                  {                      TraverseChunk(oldChunk'                                    (prepare' len) =>                                    {                                        if (ShouldKeepPrepare(prepare' commits' chunkStartPos' chunkEndPos))                                        {                                            newSize += len + 2 * sizeof(int);                                            positionMapCount++;                                        }                                    }'                                    (commit' len) =>                                    {                                        if (ShouldKeepCommit(commit' commits))                                        {                                            newSize += len + 2 * sizeof(int);                                            positionMapCount++;                                        }                                    }'                                    (system' len) =>                                    {                                        newSize += len + 2 * sizeof(int);                                        positionMapCount++;                                    });                  }                    newSize += positionMapCount * PosMap.FullSize + ChunkHeader.Size + ChunkFooter.Size;                    var oldVersion = oldChunks.Any(x => x.ChunkHeader.Version != 3);                  var oldSize = oldChunks.Sum(x => (long)x.PhysicalDataSize + x.ChunkFooter.MapSize + ChunkHeader.Size + ChunkFooter.Size);                    if (oldSize <= newSize && !alwaysKeepScavenged && !_unsafeIgnoreHardDeletes && !oldVersion)                  {                      Log.Trace("Scavenging of chunks:");                      Log.Trace(oldChunksList);                      Log.Trace("completed in {0}."' sw.Elapsed);                      Log.Trace("Old chunks' versions are kept as they are smaller.");                      Log.Trace("Old chunk total size: {0}' scavenged chunk size: {1}."' oldSize' newSize);                      Log.Trace("Scavenged chunk removed.");                        newChunk.MarkForDeletion();                      PublishChunksCompletedEvent(chunkStartNumber' chunkEndNumber' sw.Elapsed' false' spaceSaved);                      return false;                  }                    var positionMapping = new List<PosMap>();                  foreach (var oldChunk in oldChunks)                  {                      TraverseChunk(oldChunk'                                    (prepare' _) =>                                    {                                        if (ShouldKeepPrepare(prepare' commits' chunkStartPos' chunkEndPos))                                            positionMapping.Add(WriteRecord(newChunk' prepare));                                    }'                                    (commit' _) =>                                    {                                        if (ShouldKeepCommit(commit' commits))                                            positionMapping.Add(WriteRecord(newChunk' commit));                                    }'                                    // we always keep system log records for now                                    (system' _) => positionMapping.Add(WriteRecord(newChunk' system)));                  }                  newChunk.CompleteScavenge(positionMapping);                    if(_unsafeIgnoreHardDeletes) {                      Log.Trace("Forcing scavenge chunk to be kept even if bigger.");                  }                    if(oldVersion) {                      Log.Trace("Forcing scavenged chunk to be kept as old chunk is a previous version.");                  }                    var chunk = _db.Manager.SwitchChunk(newChunk' verifyHash: false' removeChunksWithGreaterNumbers: false);                  if (chunk != null)                  {                      Log.Trace("Scavenging of chunks:");                      Log.Trace(oldChunksList);                      Log.Trace("completed in {0}."' sw.Elapsed);                      Log.Trace("New chunk: {0} --> #{1}-{2} ({3})."' Path.GetFileName(tmpChunkPath)' chunkStartNumber'                          chunkEndNumber' Path.GetFileName(chunk.FileName));                      Log.Trace("Old chunks total size: {0}' scavenged chunk size: {1}."' oldSize' newSize);                      spaceSaved = oldSize - newSize;                      PublishChunksCompletedEvent(chunkStartNumber' chunkEndNumber' sw.Elapsed' true' spaceSaved);                      return true;                  }                  else                  {                      Log.Trace("Scavenging of chunks:");                      Log.Trace("{0}"' oldChunksList);                      Log.Trace("completed in {1}."' sw.Elapsed);                      Log.Trace("But switching was prevented for new chunk: #{0}-{1} ({2})."' chunkStartNumber' chunkEndNumber' Path.GetFileName(tmpChunkPath));                      Log.Trace("Old chunks total size: {0}' scavenged chunk size: {1}."' oldSize' newSize);                      PublishChunksCompletedEvent(chunkStartNumber' chunkEndNumber' sw.Elapsed' false' spaceSaved);                      return false;                  }              }              catch (FileBeingDeletedException exc)              {                  Log.Info("Got FileBeingDeletedException exception during scavenging' that probably means some chunks were re-replicated.");                  Log.Info("Scavenging of following chunks will be skipped:");                  Log.Info("{0}"' oldChunksList);                  Log.Info("Stopping scavenging and removing temp chunk '{0}'..."' tmpChunkPath);                  Log.Info("Exception message: {0}."' exc.Message);                  DeleteTempChunk(tmpChunkPath' MaxRetryCount);                  PublishChunksCompletedEvent(chunkStartNumber' chunkEndNumber' sw.Elapsed' false' spaceSaved' exc.Message);                  return false;              }              catch (Exception ex)              {                  Log.Info("Got exception while scavenging chunk: #{0}-{1}. This chunk will be skipped\n"                           + "Exception: {2}."' chunkStartNumber' chunkEndNumber' ex.ToString());                  DeleteTempChunk(tmpChunkPath' MaxRetryCount);                  PublishChunksCompletedEvent(chunkStartNumber' chunkEndNumber' sw.Elapsed' false' 0' ex.Message);                  return false;              }
Magic Number,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ScavengeChunks,The following statement contains a magic number: try              {                  var commits = new Dictionary<long' CommitInfo>();                    foreach (var oldChunk in oldChunks)                  {                      TraverseChunk(oldChunk'                                    (prepare' _) => { /* NOOP */ }'                                    (commit' _) =>                                    {                                        if (commit.TransactionPosition >= chunkStartPos)                                            commits.Add(commit.TransactionPosition' new CommitInfo(commit));                                    }'                                    (system' _) => { /* NOOP */ });                  }                    long newSize = 0;                  int positionMapCount = 0;                    foreach (var oldChunk in oldChunks)                  {                      TraverseChunk(oldChunk'                                    (prepare' len) =>                                    {                                        if (ShouldKeepPrepare(prepare' commits' chunkStartPos' chunkEndPos))                                        {                                            newSize += len + 2 * sizeof(int);                                            positionMapCount++;                                        }                                    }'                                    (commit' len) =>                                    {                                        if (ShouldKeepCommit(commit' commits))                                        {                                            newSize += len + 2 * sizeof(int);                                            positionMapCount++;                                        }                                    }'                                    (system' len) =>                                    {                                        newSize += len + 2 * sizeof(int);                                        positionMapCount++;                                    });                  }                    newSize += positionMapCount * PosMap.FullSize + ChunkHeader.Size + ChunkFooter.Size;                    var oldVersion = oldChunks.Any(x => x.ChunkHeader.Version != 3);                  var oldSize = oldChunks.Sum(x => (long)x.PhysicalDataSize + x.ChunkFooter.MapSize + ChunkHeader.Size + ChunkFooter.Size);                    if (oldSize <= newSize && !alwaysKeepScavenged && !_unsafeIgnoreHardDeletes && !oldVersion)                  {                      Log.Trace("Scavenging of chunks:");                      Log.Trace(oldChunksList);                      Log.Trace("completed in {0}."' sw.Elapsed);                      Log.Trace("Old chunks' versions are kept as they are smaller.");                      Log.Trace("Old chunk total size: {0}' scavenged chunk size: {1}."' oldSize' newSize);                      Log.Trace("Scavenged chunk removed.");                        newChunk.MarkForDeletion();                      PublishChunksCompletedEvent(chunkStartNumber' chunkEndNumber' sw.Elapsed' false' spaceSaved);                      return false;                  }                    var positionMapping = new List<PosMap>();                  foreach (var oldChunk in oldChunks)                  {                      TraverseChunk(oldChunk'                                    (prepare' _) =>                                    {                                        if (ShouldKeepPrepare(prepare' commits' chunkStartPos' chunkEndPos))                                            positionMapping.Add(WriteRecord(newChunk' prepare));                                    }'                                    (commit' _) =>                                    {                                        if (ShouldKeepCommit(commit' commits))                                            positionMapping.Add(WriteRecord(newChunk' commit));                                    }'                                    // we always keep system log records for now                                    (system' _) => positionMapping.Add(WriteRecord(newChunk' system)));                  }                  newChunk.CompleteScavenge(positionMapping);                    if(_unsafeIgnoreHardDeletes) {                      Log.Trace("Forcing scavenge chunk to be kept even if bigger.");                  }                    if(oldVersion) {                      Log.Trace("Forcing scavenged chunk to be kept as old chunk is a previous version.");                  }                    var chunk = _db.Manager.SwitchChunk(newChunk' verifyHash: false' removeChunksWithGreaterNumbers: false);                  if (chunk != null)                  {                      Log.Trace("Scavenging of chunks:");                      Log.Trace(oldChunksList);                      Log.Trace("completed in {0}."' sw.Elapsed);                      Log.Trace("New chunk: {0} --> #{1}-{2} ({3})."' Path.GetFileName(tmpChunkPath)' chunkStartNumber'                          chunkEndNumber' Path.GetFileName(chunk.FileName));                      Log.Trace("Old chunks total size: {0}' scavenged chunk size: {1}."' oldSize' newSize);                      spaceSaved = oldSize - newSize;                      PublishChunksCompletedEvent(chunkStartNumber' chunkEndNumber' sw.Elapsed' true' spaceSaved);                      return true;                  }                  else                  {                      Log.Trace("Scavenging of chunks:");                      Log.Trace("{0}"' oldChunksList);                      Log.Trace("completed in {1}."' sw.Elapsed);                      Log.Trace("But switching was prevented for new chunk: #{0}-{1} ({2})."' chunkStartNumber' chunkEndNumber' Path.GetFileName(tmpChunkPath));                      Log.Trace("Old chunks total size: {0}' scavenged chunk size: {1}."' oldSize' newSize);                      PublishChunksCompletedEvent(chunkStartNumber' chunkEndNumber' sw.Elapsed' false' spaceSaved);                      return false;                  }              }              catch (FileBeingDeletedException exc)              {                  Log.Info("Got FileBeingDeletedException exception during scavenging' that probably means some chunks were re-replicated.");                  Log.Info("Scavenging of following chunks will be skipped:");                  Log.Info("{0}"' oldChunksList);                  Log.Info("Stopping scavenging and removing temp chunk '{0}'..."' tmpChunkPath);                  Log.Info("Exception message: {0}."' exc.Message);                  DeleteTempChunk(tmpChunkPath' MaxRetryCount);                  PublishChunksCompletedEvent(chunkStartNumber' chunkEndNumber' sw.Elapsed' false' spaceSaved' exc.Message);                  return false;              }              catch (Exception ex)              {                  Log.Info("Got exception while scavenging chunk: #{0}-{1}. This chunk will be skipped\n"                           + "Exception: {2}."' chunkStartNumber' chunkEndNumber' ex.ToString());                  DeleteTempChunk(tmpChunkPath' MaxRetryCount);                  PublishChunksCompletedEvent(chunkStartNumber' chunkEndNumber' sw.Elapsed' false' 0' ex.Message);                  return false;              }
Magic Number,EventStore.Core.TransactionLog.Chunks,TFChunkScavenger,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunkScavenger.cs,ScavengeChunks,The following statement contains a magic number: try              {                  var commits = new Dictionary<long' CommitInfo>();                    foreach (var oldChunk in oldChunks)                  {                      TraverseChunk(oldChunk'                                    (prepare' _) => { /* NOOP */ }'                                    (commit' _) =>                                    {                                        if (commit.TransactionPosition >= chunkStartPos)                                            commits.Add(commit.TransactionPosition' new CommitInfo(commit));                                    }'                                    (system' _) => { /* NOOP */ });                  }                    long newSize = 0;                  int positionMapCount = 0;                    foreach (var oldChunk in oldChunks)                  {                      TraverseChunk(oldChunk'                                    (prepare' len) =>                                    {                                        if (ShouldKeepPrepare(prepare' commits' chunkStartPos' chunkEndPos))                                        {                                            newSize += len + 2 * sizeof(int);                                            positionMapCount++;                                        }                                    }'                                    (commit' len) =>                                    {                                        if (ShouldKeepCommit(commit' commits))                                        {                                            newSize += len + 2 * sizeof(int);                                            positionMapCount++;                                        }                                    }'                                    (system' len) =>                                    {                                        newSize += len + 2 * sizeof(int);                                        positionMapCount++;                                    });                  }                    newSize += positionMapCount * PosMap.FullSize + ChunkHeader.Size + ChunkFooter.Size;                    var oldVersion = oldChunks.Any(x => x.ChunkHeader.Version != 3);                  var oldSize = oldChunks.Sum(x => (long)x.PhysicalDataSize + x.ChunkFooter.MapSize + ChunkHeader.Size + ChunkFooter.Size);                    if (oldSize <= newSize && !alwaysKeepScavenged && !_unsafeIgnoreHardDeletes && !oldVersion)                  {                      Log.Trace("Scavenging of chunks:");                      Log.Trace(oldChunksList);                      Log.Trace("completed in {0}."' sw.Elapsed);                      Log.Trace("Old chunks' versions are kept as they are smaller.");                      Log.Trace("Old chunk total size: {0}' scavenged chunk size: {1}."' oldSize' newSize);                      Log.Trace("Scavenged chunk removed.");                        newChunk.MarkForDeletion();                      PublishChunksCompletedEvent(chunkStartNumber' chunkEndNumber' sw.Elapsed' false' spaceSaved);                      return false;                  }                    var positionMapping = new List<PosMap>();                  foreach (var oldChunk in oldChunks)                  {                      TraverseChunk(oldChunk'                                    (prepare' _) =>                                    {                                        if (ShouldKeepPrepare(prepare' commits' chunkStartPos' chunkEndPos))                                            positionMapping.Add(WriteRecord(newChunk' prepare));                                    }'                                    (commit' _) =>                                    {                                        if (ShouldKeepCommit(commit' commits))                                            positionMapping.Add(WriteRecord(newChunk' commit));                                    }'                                    // we always keep system log records for now                                    (system' _) => positionMapping.Add(WriteRecord(newChunk' system)));                  }                  newChunk.CompleteScavenge(positionMapping);                    if(_unsafeIgnoreHardDeletes) {                      Log.Trace("Forcing scavenge chunk to be kept even if bigger.");                  }                    if(oldVersion) {                      Log.Trace("Forcing scavenged chunk to be kept as old chunk is a previous version.");                  }                    var chunk = _db.Manager.SwitchChunk(newChunk' verifyHash: false' removeChunksWithGreaterNumbers: false);                  if (chunk != null)                  {                      Log.Trace("Scavenging of chunks:");                      Log.Trace(oldChunksList);                      Log.Trace("completed in {0}."' sw.Elapsed);                      Log.Trace("New chunk: {0} --> #{1}-{2} ({3})."' Path.GetFileName(tmpChunkPath)' chunkStartNumber'                          chunkEndNumber' Path.GetFileName(chunk.FileName));                      Log.Trace("Old chunks total size: {0}' scavenged chunk size: {1}."' oldSize' newSize);                      spaceSaved = oldSize - newSize;                      PublishChunksCompletedEvent(chunkStartNumber' chunkEndNumber' sw.Elapsed' true' spaceSaved);                      return true;                  }                  else                  {                      Log.Trace("Scavenging of chunks:");                      Log.Trace("{0}"' oldChunksList);                      Log.Trace("completed in {1}."' sw.Elapsed);                      Log.Trace("But switching was prevented for new chunk: #{0}-{1} ({2})."' chunkStartNumber' chunkEndNumber' Path.GetFileName(tmpChunkPath));                      Log.Trace("Old chunks total size: {0}' scavenged chunk size: {1}."' oldSize' newSize);                      PublishChunksCompletedEvent(chunkStartNumber' chunkEndNumber' sw.Elapsed' false' spaceSaved);                      return false;                  }              }              catch (FileBeingDeletedException exc)              {                  Log.Info("Got FileBeingDeletedException exception during scavenging' that probably means some chunks were re-replicated.");                  Log.Info("Scavenging of following chunks will be skipped:");                  Log.Info("{0}"' oldChunksList);                  Log.Info("Stopping scavenging and removing temp chunk '{0}'..."' tmpChunkPath);                  Log.Info("Exception message: {0}."' exc.Message);                  DeleteTempChunk(tmpChunkPath' MaxRetryCount);                  PublishChunksCompletedEvent(chunkStartNumber' chunkEndNumber' sw.Elapsed' false' spaceSaved' exc.Message);                  return false;              }              catch (Exception ex)              {                  Log.Info("Got exception while scavenging chunk: #{0}-{1}. This chunk will be skipped\n"                           + "Exception: {2}."' chunkStartNumber' chunkEndNumber' ex.ToString());                  DeleteTempChunk(tmpChunkPath' MaxRetryCount);                  PublishChunksCompletedEvent(chunkStartNumber' chunkEndNumber' sw.Elapsed' false' 0' ex.Message);                  return false;              }
Magic Number,EventStore.Core.TransactionLog.Chunks,ChunkFooter,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\ChunkFooter.cs,AsByteArray,The following statement contains a magic number: using (var memStream = new MemoryStream(array))              using (var writer = new BinaryWriter(memStream))              {                  var flags = (byte) ((IsCompleted ? 1 : 0) | (IsMap12Bytes ? 2 : 0));                  writer.Write(flags);                  writer.Write(PhysicalDataSize);                  if (IsMap12Bytes)                      writer.Write(LogicalDataSize);                  else                      writer.Write((int)LogicalDataSize);                  writer.Write(MapSize);                    memStream.Position = Size - ChecksumSize;                  writer.Write(MD5Hash);              }
Magic Number,EventStore.Core.TransactionLog.Chunks,ChunkFooter,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\ChunkFooter.cs,FromStream,The following statement contains a magic number: var isMap12Bytes = (flags & 2) != 0;
Magic Number,EventStore.Core.TransactionLog.Chunks,ChunkHeader,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\ChunkHeader.cs,FromStream,The following statement contains a magic number: var chunkId = new Guid(reader.ReadBytes(16));
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,PosMap,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\PosMap.cs,FromOldFormat,The following statement contains a magic number: var logPos = (int)(posmap >> 32);
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,Alignv2File,The following statement contains a magic number: try             {                 SetAttributes(filename' false);                 using (var stream = new FileStream(filename' FileMode.Open' FileAccess.ReadWrite' FileShare.ReadWrite))                 {                     if (stream.Length%4096 == 0) return;                     var footerStart = stream.Length - ChunkFooter.Size;                     var alignedSize = (stream.Length/4096 + 1)*4096;                     var footer = new byte[ChunkFooter.Size];                     stream.SetLength(alignedSize);                     stream.Seek(footerStart' SeekOrigin.Begin);                     stream.Read(footer' 0' ChunkFooter.Size);                     stream.Seek(footerStart' SeekOrigin.Begin);                     var bytes = new byte[alignedSize - footerStart - ChunkFooter.Size];                     stream.Write(bytes' 0' bytes.Length);                     stream.Write(footer' 0' footer.Length);                 }             }             finally             {                 SetAttributes(filename' true);             }
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,Alignv2File,The following statement contains a magic number: try             {                 SetAttributes(filename' false);                 using (var stream = new FileStream(filename' FileMode.Open' FileAccess.ReadWrite' FileShare.ReadWrite))                 {                     if (stream.Length%4096 == 0) return;                     var footerStart = stream.Length - ChunkFooter.Size;                     var alignedSize = (stream.Length/4096 + 1)*4096;                     var footer = new byte[ChunkFooter.Size];                     stream.SetLength(alignedSize);                     stream.Seek(footerStart' SeekOrigin.Begin);                     stream.Read(footer' 0' ChunkFooter.Size);                     stream.Seek(footerStart' SeekOrigin.Begin);                     var bytes = new byte[alignedSize - footerStart - ChunkFooter.Size];                     stream.Write(bytes' 0' bytes.Length);                     stream.Write(footer' 0' footer.Length);                 }             }             finally             {                 SetAttributes(filename' true);             }
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,Alignv2File,The following statement contains a magic number: try             {                 SetAttributes(filename' false);                 using (var stream = new FileStream(filename' FileMode.Open' FileAccess.ReadWrite' FileShare.ReadWrite))                 {                     if (stream.Length%4096 == 0) return;                     var footerStart = stream.Length - ChunkFooter.Size;                     var alignedSize = (stream.Length/4096 + 1)*4096;                     var footer = new byte[ChunkFooter.Size];                     stream.SetLength(alignedSize);                     stream.Seek(footerStart' SeekOrigin.Begin);                     stream.Read(footer' 0' ChunkFooter.Size);                     stream.Seek(footerStart' SeekOrigin.Begin);                     var bytes = new byte[alignedSize - footerStart - ChunkFooter.Size];                     stream.Write(bytes' 0' bytes.Length);                     stream.Write(footer' 0' footer.Length);                 }             }             finally             {                 SetAttributes(filename' true);             }
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateInternalReaderWorkItem,The following statement contains a magic number: if (_unbuffered)              {                  stream = UnbufferedFileStream.Create(                              _filename'                              FileMode.Open'                              FileAccess.Read'                              FileShare.ReadWrite'                              false'                              1024 * 1024'                              4096'                              false'                              4096);              }              else              {                  stream = new FileStream(                              _filename'                              FileMode.Open'                              FileAccess.Read'                              FileShare.ReadWrite'                              ReadBufferSize'                              FileOptions.RandomAccess);              }
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateInternalReaderWorkItem,The following statement contains a magic number: if (_unbuffered)              {                  stream = UnbufferedFileStream.Create(                              _filename'                              FileMode.Open'                              FileAccess.Read'                              FileShare.ReadWrite'                              false'                              1024 * 1024'                              4096'                              false'                              4096);              }              else              {                  stream = new FileStream(                              _filename'                              FileMode.Open'                              FileAccess.Read'                              FileShare.ReadWrite'                              ReadBufferSize'                              FileOptions.RandomAccess);              }
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateInternalReaderWorkItem,The following statement contains a magic number: if (_unbuffered)              {                  stream = UnbufferedFileStream.Create(                              _filename'                              FileMode.Open'                              FileAccess.Read'                              FileShare.ReadWrite'                              false'                              1024 * 1024'                              4096'                              false'                              4096);              }              else              {                  stream = new FileStream(                              _filename'                              FileMode.Open'                              FileAccess.Read'                              FileShare.ReadWrite'                              ReadBufferSize'                              FileOptions.RandomAccess);              }
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,CreateInternalReaderWorkItem,The following statement contains a magic number: if (_unbuffered)              {                  stream = UnbufferedFileStream.Create(                              _filename'                              FileMode.Open'                              FileAccess.Read'                              FileShare.ReadWrite'                              false'                              1024 * 1024'                              4096'                              false'                              4096);              }              else              {                  stream = new FileStream(                              _filename'                              FileMode.Open'                              FileAccess.Read'                              FileShare.ReadWrite'                              ReadBufferSize'                              FileOptions.RandomAccess);              }
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetWriteStream,The following statement contains a magic number: if (!_unbuffered)              {                  return new FileStream(                                      _filename'                                      FileMode.Open'                                      FileAccess.ReadWrite'                                      FileShare.Read'                                      WriteBufferSize'                                      FileOptions.SequentialScan);              }              else              {                  Log.Trace("Using unbuffered access for TFChunk '{0}'..."' _filename);                  return UnbufferedFileStream.Create(                                      _filename'                                      FileMode.Open'                                      FileAccess.ReadWrite'                                      FileShare.Read'                                      false'                                      4096*1024'                                      4096'                                      _writeThrough'                                      4096);              }
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetWriteStream,The following statement contains a magic number: if (!_unbuffered)              {                  return new FileStream(                                      _filename'                                      FileMode.Open'                                      FileAccess.ReadWrite'                                      FileShare.Read'                                      WriteBufferSize'                                      FileOptions.SequentialScan);              }              else              {                  Log.Trace("Using unbuffered access for TFChunk '{0}'..."' _filename);                  return UnbufferedFileStream.Create(                                      _filename'                                      FileMode.Open'                                      FileAccess.ReadWrite'                                      FileShare.Read'                                      false'                                      4096*1024'                                      4096'                                      _writeThrough'                                      4096);              }
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetWriteStream,The following statement contains a magic number: if (!_unbuffered)              {                  return new FileStream(                                      _filename'                                      FileMode.Open'                                      FileAccess.ReadWrite'                                      FileShare.Read'                                      WriteBufferSize'                                      FileOptions.SequentialScan);              }              else              {                  Log.Trace("Using unbuffered access for TFChunk '{0}'..."' _filename);                  return UnbufferedFileStream.Create(                                      _filename'                                      FileMode.Open'                                      FileAccess.ReadWrite'                                      FileShare.Read'                                      false'                                      4096*1024'                                      4096'                                      _writeThrough'                                      4096);              }
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetWriteStream,The following statement contains a magic number: if (!_unbuffered)              {                  return new FileStream(                                      _filename'                                      FileMode.Open'                                      FileAccess.ReadWrite'                                      FileShare.Read'                                      WriteBufferSize'                                      FileOptions.SequentialScan);              }              else              {                  Log.Trace("Using unbuffered access for TFChunk '{0}'..."' _filename);                  return UnbufferedFileStream.Create(                                      _filename'                                      FileMode.Open'                                      FileAccess.ReadWrite'                                      FileShare.Read'                                      false'                                      4096*1024'                                      4096'                                      _writeThrough'                                      4096);              }
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,BuildCacheArray,The following statement contains a magic number: try              {                  if (workItem.IsMemory)                      throw new InvalidOperationException("When trying to build cache' reader worker is already in-memory reader.");                    var dataSize = _isReadOnly ? _physicalDataSize + ChunkFooter.MapSize : _chunkHeader.ChunkSize;                  _cachedLength = GetAlignedSize(ChunkHeader.Size + dataSize + ChunkFooter.Size);                  var cachedData = Marshal.AllocHGlobal(_cachedLength);                  try                  {                      using (var unmanagedStream = new UnmanagedMemoryStream((byte*)cachedData' _cachedLength' _cachedLength' FileAccess.ReadWrite))                      {                          workItem.Stream.Seek(0' SeekOrigin.Begin);                          var buffer = new byte[65536];                          // in ongoing chunk there is no need to read everything' it's enough to read just actual data written                          int toRead = _isReadOnly ? _cachedLength : ChunkHeader.Size + _physicalDataSize;                          while (toRead > 0)                          {                              int read = workItem.Stream.Read(buffer' 0' Math.Min(toRead' buffer.Length));                              if (read == 0)                                  break;                              toRead -= read;                              unmanagedStream.Write(buffer' 0' read);                          }                      }                  }                  catch                  {                      Marshal.FreeHGlobal(cachedData);                      throw;                  }                  _cachedData = cachedData;              }              finally              {                  ReturnReaderWorkItem(workItem);              }
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TryAppend,The following statement contains a magic number: buffer.SetLength(4);
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TryAppend,The following statement contains a magic number: buffer.Position = 4;
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TryAppend,The following statement contains a magic number: var length = (int) buffer.Length - 4;
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TryAppend,The following statement contains a magic number: if (workItem.StreamPosition + length + 2*sizeof(int) > ChunkHeader.Size + _chunkHeader.ChunkSize)                  return RecordWriteResult.Failed(GetDataPosition(workItem));
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TryAppend,The following statement contains a magic number: _logicalDataSize = ChunkHeader.GetLocalLogPosition(record.LogPosition + length + 2*sizeof(int));
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetAlignedSize,The following statement contains a magic number: if(size % 4096 == 0) return size;
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetAlignedSize,The following statement contains a magic number: return (size / 4096 + 1) * 4096;
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetAlignedSize,The following statement contains a magic number: return (size / 4096 + 1) * 4096;
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunk,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,GetSequentialReaderFileStream,The following statement contains a magic number: return _inMem                  ? (Stream) new UnmanagedMemoryStream((byte*) _cachedData' _fileSize)                  : new FileStream(_filename' FileMode.Open' FileAccess.Read' FileShare.ReadWrite' 65536' FileOptions.SequentialScan);
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunkReadSideScavenged,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,PopulateMidpoints,The following statement contains a magic number: if (depth > 31)                      throw new ArgumentOutOfRangeException("depth"' "Depth too for midpoints.");
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunkReadSideScavenged,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TranslateExactWithoutMidpoints,The following statement contains a magic number: while (low <= high)                  {                      var mid = low + (high - low) / 2;                      var v = ReadPosMap(workItem' mid);                        if (v.LogPos == pos)                          return v.ActualPos;                      if (v.LogPos < pos)                          low = mid + 1;                      else                          high = mid - 1;                  }
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunkReadSideScavenged,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TranslateClosestForwardWithoutMidpoints,The following statement contains a magic number: while (low < high)                  {                      var mid = low + (high - low) / 2;                      var v = ReadPosMap(workItem' mid);                        if (v.LogPos < pos)                          low = mid + 1;                      else                      {                          high = mid;                          res = v;                      }                  }
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunkReadSideScavenged,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,LowerMidpointBound,The following statement contains a magic number: while (l < r)                  {                      int m = l + (r - l + 1) / 2;                      if (midpoints[m].LogPos <= pos)                          l = m;                      else                          r = m - 1;                  }
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunkReadSideScavenged,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,UpperMidpointBound,The following statement contains a magic number: while (l < r)                  {                      int m = l + (r - l) / 2;                      if (midpoints[m].LogPos >= pos)                          r = m;                      else                          l = m + 1;                  }
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunkReadSide,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TryReadForwardInternal,The following statement contains a magic number: if (actualPosition + 2*sizeof(int) > Chunk.PhysicalDataSize) // no space even for length prefix and suffix                      return false;
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunkReadSide,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TryReadForwardInternal,The following statement contains a magic number: if (actualPosition + length + 2 * sizeof(int) > Chunk.PhysicalDataSize)                  {                      throw new UnableToReadPastEndOfStreamException(                          string.Format("There is not enough space to read full record (length prefix: {0}). "                                        + "Actual pre-position: {1}. Something is seriously wrong in chunk {2}."'                                        length' actualPosition' Chunk));                  }
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunkReadSide,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TryReadBackwardInternal,The following statement contains a magic number: if (actualPosition < 2 * sizeof(int)) // no space even for length prefix and suffix                      return false;
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunkReadSide,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TryReadBackwardInternal,The following statement contains a magic number: if (actualPosition < length + 2 * sizeof(int)) // no space for record + length prefix and suffix                  {                      throw new UnableToReadPastEndOfStreamException(                          string.Format("There is not enough space to read full record (length suffix: {0}). "                                        + "Actual post-position: {1}. Something is seriously wrong in chunk {2}."'                                        length' actualPosition' Chunk));                  }
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,TFChunkReadSide,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\TFChunkReadSide.cs,TryReadBackwardInternal,The following statement contains a magic number: workItem.Stream.Position = realPos - length - 2*sizeof(int);
Magic Number,EventStore.Core.TransactionLog.Chunks.TFChunk,WriterWorkItem,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Chunks\TFChunk\WriterWorkItem.cs,WriterWorkItem,The following statement contains a magic number: Buffer = new MemoryStream(8192);
Magic Number,EventStore.Core.TransactionLog.LogRecords,SystemLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\SystemLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = LogPosition.GetHashCode();                  result = (result * 397) ^ TimeStamp.GetHashCode();                  result = (result * 397) ^ SystemRecordType.GetHashCode();                  result = (result * 397) ^ SystemRecordSerialization.GetHashCode();                  result = (result * 397) ^ Reserved.GetHashCode();                  return result;              }
Magic Number,EventStore.Core.TransactionLog.LogRecords,SystemLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\SystemLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = LogPosition.GetHashCode();                  result = (result * 397) ^ TimeStamp.GetHashCode();                  result = (result * 397) ^ SystemRecordType.GetHashCode();                  result = (result * 397) ^ SystemRecordSerialization.GetHashCode();                  result = (result * 397) ^ Reserved.GetHashCode();                  return result;              }
Magic Number,EventStore.Core.TransactionLog.LogRecords,SystemLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\SystemLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = LogPosition.GetHashCode();                  result = (result * 397) ^ TimeStamp.GetHashCode();                  result = (result * 397) ^ SystemRecordType.GetHashCode();                  result = (result * 397) ^ SystemRecordSerialization.GetHashCode();                  result = (result * 397) ^ Reserved.GetHashCode();                  return result;              }
Magic Number,EventStore.Core.TransactionLog.LogRecords,SystemLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\SystemLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = LogPosition.GetHashCode();                  result = (result * 397) ^ TimeStamp.GetHashCode();                  result = (result * 397) ^ SystemRecordType.GetHashCode();                  result = (result * 397) ^ SystemRecordSerialization.GetHashCode();                  result = (result * 397) ^ Reserved.GetHashCode();                  return result;              }
Magic Number,EventStore.Core.TransactionLog.LogRecords,CommitLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\CommitLogRecord.cs,CommitLogRecord,The following statement contains a magic number: CorrelationId = new Guid(reader.ReadBytes(16));
Magic Number,EventStore.Core.TransactionLog.LogRecords,CommitLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\CommitLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = LogPosition.GetHashCode();                  result = (result * 397) ^ TransactionPosition.GetHashCode();                  result = (result * 397) ^ FirstEventNumber.GetHashCode();                  result = (result * 397) ^ SortKey.GetHashCode();                  result = (result * 397) ^ CorrelationId.GetHashCode();                  result = (result * 397) ^ TimeStamp.GetHashCode();                  return result;              }
Magic Number,EventStore.Core.TransactionLog.LogRecords,CommitLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\CommitLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = LogPosition.GetHashCode();                  result = (result * 397) ^ TransactionPosition.GetHashCode();                  result = (result * 397) ^ FirstEventNumber.GetHashCode();                  result = (result * 397) ^ SortKey.GetHashCode();                  result = (result * 397) ^ CorrelationId.GetHashCode();                  result = (result * 397) ^ TimeStamp.GetHashCode();                  return result;              }
Magic Number,EventStore.Core.TransactionLog.LogRecords,CommitLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\CommitLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = LogPosition.GetHashCode();                  result = (result * 397) ^ TransactionPosition.GetHashCode();                  result = (result * 397) ^ FirstEventNumber.GetHashCode();                  result = (result * 397) ^ SortKey.GetHashCode();                  result = (result * 397) ^ CorrelationId.GetHashCode();                  result = (result * 397) ^ TimeStamp.GetHashCode();                  return result;              }
Magic Number,EventStore.Core.TransactionLog.LogRecords,CommitLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\CommitLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = LogPosition.GetHashCode();                  result = (result * 397) ^ TransactionPosition.GetHashCode();                  result = (result * 397) ^ FirstEventNumber.GetHashCode();                  result = (result * 397) ^ SortKey.GetHashCode();                  result = (result * 397) ^ CorrelationId.GetHashCode();                  result = (result * 397) ^ TimeStamp.GetHashCode();                  return result;              }
Magic Number,EventStore.Core.TransactionLog.LogRecords,CommitLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\CommitLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = LogPosition.GetHashCode();                  result = (result * 397) ^ TransactionPosition.GetHashCode();                  result = (result * 397) ^ FirstEventNumber.GetHashCode();                  result = (result * 397) ^ SortKey.GetHashCode();                  result = (result * 397) ^ CorrelationId.GetHashCode();                  result = (result * 397) ^ TimeStamp.GetHashCode();                  return result;              }
Magic Number,EventStore.Core.TransactionLog.LogRecords,LogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,GetNextLogPosition,The following statement contains a magic number: return logicalPosition + length + 2*sizeof(int);
Magic Number,EventStore.Core.TransactionLog.LogRecords,LogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,GetPrevLogPosition,The following statement contains a magic number: return logicalPosition - length - 2*sizeof(int);
Magic Number,EventStore.Core.TransactionLog.LogRecords,LogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\LogRecord.cs,GetSizeWithLengthPrefixAndSuffix,The following statement contains a magic number: using (var memoryStream = new MemoryStream())              {                  WriteTo(new BinaryWriter(memoryStream));                  return 8 + (int)memoryStream.Length;              }
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,PrepareLogRecord,The following statement contains a magic number: EventId = new Guid(reader.ReadBytes(16));
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,PrepareLogRecord,The following statement contains a magic number: CorrelationId = new Guid(reader.ReadBytes(16));
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = LogPosition.GetHashCode();                  result = (result * 397) ^ Flags.GetHashCode();                  result = (result * 397) ^ TransactionPosition.GetHashCode();                  result = (result * 397) ^ TransactionOffset;                  result = (result * 397) ^ ExpectedVersion.GetHashCode();                  result = (result * 397) ^ EventStreamId.GetHashCode();                    result = (result * 397) ^ EventId.GetHashCode();                  result = (result * 397) ^ CorrelationId.GetHashCode();                  result = (result * 397) ^ TimeStamp.GetHashCode();                  result = (result * 397) ^ EventType.GetHashCode();                  result = (result * 397) ^ Data.GetHashCode();                  result = (result * 397) ^ Metadata.GetHashCode();                  return result;              }
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = LogPosition.GetHashCode();                  result = (result * 397) ^ Flags.GetHashCode();                  result = (result * 397) ^ TransactionPosition.GetHashCode();                  result = (result * 397) ^ TransactionOffset;                  result = (result * 397) ^ ExpectedVersion.GetHashCode();                  result = (result * 397) ^ EventStreamId.GetHashCode();                    result = (result * 397) ^ EventId.GetHashCode();                  result = (result * 397) ^ CorrelationId.GetHashCode();                  result = (result * 397) ^ TimeStamp.GetHashCode();                  result = (result * 397) ^ EventType.GetHashCode();                  result = (result * 397) ^ Data.GetHashCode();                  result = (result * 397) ^ Metadata.GetHashCode();                  return result;              }
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = LogPosition.GetHashCode();                  result = (result * 397) ^ Flags.GetHashCode();                  result = (result * 397) ^ TransactionPosition.GetHashCode();                  result = (result * 397) ^ TransactionOffset;                  result = (result * 397) ^ ExpectedVersion.GetHashCode();                  result = (result * 397) ^ EventStreamId.GetHashCode();                    result = (result * 397) ^ EventId.GetHashCode();                  result = (result * 397) ^ CorrelationId.GetHashCode();                  result = (result * 397) ^ TimeStamp.GetHashCode();                  result = (result * 397) ^ EventType.GetHashCode();                  result = (result * 397) ^ Data.GetHashCode();                  result = (result * 397) ^ Metadata.GetHashCode();                  return result;              }
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = LogPosition.GetHashCode();                  result = (result * 397) ^ Flags.GetHashCode();                  result = (result * 397) ^ TransactionPosition.GetHashCode();                  result = (result * 397) ^ TransactionOffset;                  result = (result * 397) ^ ExpectedVersion.GetHashCode();                  result = (result * 397) ^ EventStreamId.GetHashCode();                    result = (result * 397) ^ EventId.GetHashCode();                  result = (result * 397) ^ CorrelationId.GetHashCode();                  result = (result * 397) ^ TimeStamp.GetHashCode();                  result = (result * 397) ^ EventType.GetHashCode();                  result = (result * 397) ^ Data.GetHashCode();                  result = (result * 397) ^ Metadata.GetHashCode();                  return result;              }
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = LogPosition.GetHashCode();                  result = (result * 397) ^ Flags.GetHashCode();                  result = (result * 397) ^ TransactionPosition.GetHashCode();                  result = (result * 397) ^ TransactionOffset;                  result = (result * 397) ^ ExpectedVersion.GetHashCode();                  result = (result * 397) ^ EventStreamId.GetHashCode();                    result = (result * 397) ^ EventId.GetHashCode();                  result = (result * 397) ^ CorrelationId.GetHashCode();                  result = (result * 397) ^ TimeStamp.GetHashCode();                  result = (result * 397) ^ EventType.GetHashCode();                  result = (result * 397) ^ Data.GetHashCode();                  result = (result * 397) ^ Metadata.GetHashCode();                  return result;              }
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = LogPosition.GetHashCode();                  result = (result * 397) ^ Flags.GetHashCode();                  result = (result * 397) ^ TransactionPosition.GetHashCode();                  result = (result * 397) ^ TransactionOffset;                  result = (result * 397) ^ ExpectedVersion.GetHashCode();                  result = (result * 397) ^ EventStreamId.GetHashCode();                    result = (result * 397) ^ EventId.GetHashCode();                  result = (result * 397) ^ CorrelationId.GetHashCode();                  result = (result * 397) ^ TimeStamp.GetHashCode();                  result = (result * 397) ^ EventType.GetHashCode();                  result = (result * 397) ^ Data.GetHashCode();                  result = (result * 397) ^ Metadata.GetHashCode();                  return result;              }
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = LogPosition.GetHashCode();                  result = (result * 397) ^ Flags.GetHashCode();                  result = (result * 397) ^ TransactionPosition.GetHashCode();                  result = (result * 397) ^ TransactionOffset;                  result = (result * 397) ^ ExpectedVersion.GetHashCode();                  result = (result * 397) ^ EventStreamId.GetHashCode();                    result = (result * 397) ^ EventId.GetHashCode();                  result = (result * 397) ^ CorrelationId.GetHashCode();                  result = (result * 397) ^ TimeStamp.GetHashCode();                  result = (result * 397) ^ EventType.GetHashCode();                  result = (result * 397) ^ Data.GetHashCode();                  result = (result * 397) ^ Metadata.GetHashCode();                  return result;              }
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = LogPosition.GetHashCode();                  result = (result * 397) ^ Flags.GetHashCode();                  result = (result * 397) ^ TransactionPosition.GetHashCode();                  result = (result * 397) ^ TransactionOffset;                  result = (result * 397) ^ ExpectedVersion.GetHashCode();                  result = (result * 397) ^ EventStreamId.GetHashCode();                    result = (result * 397) ^ EventId.GetHashCode();                  result = (result * 397) ^ CorrelationId.GetHashCode();                  result = (result * 397) ^ TimeStamp.GetHashCode();                  result = (result * 397) ^ EventType.GetHashCode();                  result = (result * 397) ^ Data.GetHashCode();                  result = (result * 397) ^ Metadata.GetHashCode();                  return result;              }
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = LogPosition.GetHashCode();                  result = (result * 397) ^ Flags.GetHashCode();                  result = (result * 397) ^ TransactionPosition.GetHashCode();                  result = (result * 397) ^ TransactionOffset;                  result = (result * 397) ^ ExpectedVersion.GetHashCode();                  result = (result * 397) ^ EventStreamId.GetHashCode();                    result = (result * 397) ^ EventId.GetHashCode();                  result = (result * 397) ^ CorrelationId.GetHashCode();                  result = (result * 397) ^ TimeStamp.GetHashCode();                  result = (result * 397) ^ EventType.GetHashCode();                  result = (result * 397) ^ Data.GetHashCode();                  result = (result * 397) ^ Metadata.GetHashCode();                  return result;              }
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = LogPosition.GetHashCode();                  result = (result * 397) ^ Flags.GetHashCode();                  result = (result * 397) ^ TransactionPosition.GetHashCode();                  result = (result * 397) ^ TransactionOffset;                  result = (result * 397) ^ ExpectedVersion.GetHashCode();                  result = (result * 397) ^ EventStreamId.GetHashCode();                    result = (result * 397) ^ EventId.GetHashCode();                  result = (result * 397) ^ CorrelationId.GetHashCode();                  result = (result * 397) ^ TimeStamp.GetHashCode();                  result = (result * 397) ^ EventType.GetHashCode();                  result = (result * 397) ^ Data.GetHashCode();                  result = (result * 397) ^ Metadata.GetHashCode();                  return result;              }
Magic Number,EventStore.Core.TransactionLog.LogRecords,PrepareLogRecord,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\LogRecords\PrepareLogRecord.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = LogPosition.GetHashCode();                  result = (result * 397) ^ Flags.GetHashCode();                  result = (result * 397) ^ TransactionPosition.GetHashCode();                  result = (result * 397) ^ TransactionOffset;                  result = (result * 397) ^ ExpectedVersion.GetHashCode();                  result = (result * 397) ^ EventStreamId.GetHashCode();                    result = (result * 397) ^ EventId.GetHashCode();                  result = (result * 397) ^ CorrelationId.GetHashCode();                  result = (result * 397) ^ TimeStamp.GetHashCode();                  result = (result * 397) ^ EventType.GetHashCode();                  result = (result * 397) ^ Data.GetHashCode();                  result = (result * 397) ^ Metadata.GetHashCode();                  return result;              }
Magic Number,EventStore.Core.TransactionLog.Unbuffered,NativeFile,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Unbuffered\NativeFile.cs,SetFileSize,The following statement contains a magic number: var high = (int)(count >> 32);
Magic Number,EventStore.Core.TransactionLog.Unbuffered,NativeFile,C:\repos\EventStore_EventStore\src\EventStore.Core\TransactionLog\Unbuffered\NativeFile.cs,Seek,The following statement contains a magic number: var high = (int)(position >> 32);
Magic Number,EventStore.Core.Util,MD5Hash,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\MD5Hash.cs,ContinuousHashFor,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,EventStore.Core.Util,MiniWeb,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\MiniWeb.cs,ReplyWithContent,The following statement contains a magic number: try              {                  var extensionToContentType = new Dictionary<string' string>                  {                      { ".png"'  "image/png"} '                      { ".svg"'  "image/svg+xml"} '                      { ".woff"' "application/x-font-woff"} '                      { ".woff2"' "application/x-font-woff"} '                      { ".ttf"' "application/font-sfnt"} '                      { ".jpg"'  "image/jpeg"} '                      { ".jpeg"' "image/jpeg"} '                      { ".css"'  "text/css"} '                      { ".htm"'  "text/html"} '                      { ".html"' "text/html"} '                      { ".js"'   "application/javascript"} '                      { ".json"'   "application/json"} '                      { ".ico"'  "image/vnd.microsoft.icon"}                  };                    var extension = Path.GetExtension(contentLocalPath);                  var fullPath = Path.Combine(_fileSystemRoot' contentLocalPath);                    string contentType;                  if (string.IsNullOrEmpty(extension)                      || !extensionToContentType.TryGetValue(extension.ToLower()' out contentType)                      || !File.Exists(fullPath))                  {                      Logger.Info("Replying 404 for {0} ==> {1}"' contentLocalPath' fullPath);                      http.ReplyTextContent(                          "Not Found"' 404' "Not Found"' "text/plain"' null'                          ex => Logger.InfoException(ex' "Error while replying from MiniWeb"));                  }                  else                  {                      var config = GetWebPageConfig(contentType);                      var content = File.ReadAllBytes(fullPath);                        http.Reply(content'                                         config.Code'                                         config.Description'                                         config.ContentType'                                         config.Encoding'                                         config.Headers'                                         ex => Logger.InfoException(ex' "Error while replying from MiniWeb"));                  }              }              catch (Exception ex)              {                  http.ReplyTextContent(ex.ToString()' 500' "Internal Server Error"' "text/plain"' null' Console.WriteLine);              }
Magic Number,EventStore.Core.Util,MiniWeb,C:\repos\EventStore_EventStore\src\EventStore.Core\Util\MiniWeb.cs,ReplyWithContent,The following statement contains a magic number: try              {                  var extensionToContentType = new Dictionary<string' string>                  {                      { ".png"'  "image/png"} '                      { ".svg"'  "image/svg+xml"} '                      { ".woff"' "application/x-font-woff"} '                      { ".woff2"' "application/x-font-woff"} '                      { ".ttf"' "application/font-sfnt"} '                      { ".jpg"'  "image/jpeg"} '                      { ".jpeg"' "image/jpeg"} '                      { ".css"'  "text/css"} '                      { ".htm"'  "text/html"} '                      { ".html"' "text/html"} '                      { ".js"'   "application/javascript"} '                      { ".json"'   "application/json"} '                      { ".ico"'  "image/vnd.microsoft.icon"}                  };                    var extension = Path.GetExtension(contentLocalPath);                  var fullPath = Path.Combine(_fileSystemRoot' contentLocalPath);                    string contentType;                  if (string.IsNullOrEmpty(extension)                      || !extensionToContentType.TryGetValue(extension.ToLower()' out contentType)                      || !File.Exists(fullPath))                  {                      Logger.Info("Replying 404 for {0} ==> {1}"' contentLocalPath' fullPath);                      http.ReplyTextContent(                          "Not Found"' 404' "Not Found"' "text/plain"' null'                          ex => Logger.InfoException(ex' "Error while replying from MiniWeb"));                  }                  else                  {                      var config = GetWebPageConfig(contentType);                      var content = File.ReadAllBytes(fullPath);                        http.Reply(content'                                         config.Code'                                         config.Description'                                         config.ContentType'                                         config.Encoding'                                         config.Headers'                                         ex => Logger.InfoException(ex' "Error while replying from MiniWeb"));                  }              }              catch (Exception ex)              {                  http.ReplyTextContent(ex.ToString()' 500' "Internal Server Error"' "text/plain"' null' Console.WriteLine);              }
Magic Number,EventStore.Core.Services.TimerService,ThreadBasedScheduler,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\TimerService\ThreadBasedScheduler.cs,DoTiming,The following statement contains a magic number: while (!_stop)              {                  _queueStats.EnterBusy();                  _queueStats.ProcessingStarted<SchedulePendingTasks>(_pending.Count);                    int pending = 0;                  ScheduledTask task;                  while (_pending.TryDequeue(out task))                  {                      _tasks.Add(task);                      pending += 1;                  }                    _queueStats.ProcessingEnded(pending);                    _queueStats.ProcessingStarted<ExecuteScheduledTasks>(_tasks.Count);                  int processed = 0;                  while (_tasks.Count > 0 && _tasks.FindMin().DueTime <= _timeProvider.Now)                  {                      processed += 1;                      var scheduledTask = _tasks.DeleteMin();                      scheduledTask.Action(this' scheduledTask.State);                  }                  _queueStats.ProcessingEnded(processed);                    if (processed == 0)                  {                      _queueStats.EnterIdle();                        Thread.Sleep(10);                  }              }
Magic Number,EventStore.Core.Services.RequestManager,RequestManagementService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\RequestManagementService.cs,RequestManagementService,The following statement contains a magic number: _tickRequestMessage = TimerMessage.Schedule.Create(TimeSpan.FromMilliseconds(1000)'                                                                 new PublishEnvelope(bus)'                                                                 new StorageMessage.RequestManagerTimerTick());
Magic Number,EventStore.Core.Services.RequestManager,RequestManagementService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\RequestManager\RequestManagementService.cs,Handle,The following statement contains a magic number: if (_currentTimedRequests.TryGetValue(message.CorrelationId' out watch))              {                  HistogramService.SetValue(_requestManagerHistogram'                  (long)((((double)watch.ElapsedTicks) / Stopwatch.Frequency) * 1000000000));                  _currentTimedRequests.Remove(message.CorrelationId);              }
Magic Number,EventStore.ClientAPI.Embedded,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,WithClusterNodeSettings,The following statement contains a magic number: int quorumSize = clusterNodeCount / 2 + 1;
Magic Number,EventStore.ClientAPI.Embedded,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,OnDefaultEndpoints,The following statement contains a magic number: _internalHttp = new IPEndPoint(Opts.InternalIpDefault' 2112);
Magic Number,EventStore.ClientAPI.Embedded,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,OnDefaultEndpoints,The following statement contains a magic number: _internalTcp = new IPEndPoint(Opts.InternalIpDefault' 1112);
Magic Number,EventStore.ClientAPI.Embedded,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,OnDefaultEndpoints,The following statement contains a magic number: _externalHttp = new IPEndPoint(Opts.ExternalIpDefault' 2113);
Magic Number,EventStore.ClientAPI.Embedded,VNodeBuilder,C:\repos\EventStore_EventStore\src\EventStore.Core\VNodeBuilder.cs,OnDefaultEndpoints,The following statement contains a magic number: _externalTcp = new IPEndPoint(Opts.InternalIpDefault' 1113);
Missing Default,EventStore.Core.Data,StreamMetadata,C:\repos\EventStore_EventStore\src\EventStore.Core\Data\StreamMetadata.cs,ReadAcl,The following switch statement is missing a default case: switch (name)                  {                      case SystemMetadata.AclRead: read = ReadRoles(reader); break;                      case SystemMetadata.AclWrite: write = ReadRoles(reader); break;                      case SystemMetadata.AclDelete: delete = ReadRoles(reader); break;                      case SystemMetadata.AclMetaRead: metaRead = ReadRoles(reader); break;                      case SystemMetadata.AclMetaWrite: metaWrite = ReadRoles(reader); break;                  }
Missing Default,EventStore.Core.Index.Hashes,Murmur2Unsafe,C:\repos\EventStore_EventStore\src\EventStore.Core\Index\Hashes\Murmur2Unsafe.cs,Hash,The following switch statement is missing a default case: switch (len & 3) // mod 4              {                  case 3:                      h ^= (uint)(tail[2] << 16);                      h ^= (uint)(tail[1] << 8);                      h ^= tail[0];                      h *= m;                      break;                  case 2:                      h ^= (uint)(tail[1] << 8);                      h ^= tail[0];                      h *= m;                      break;                  case 1:                      h ^= tail[0];                      h *= m;                      break;              }
Missing Default,EventStore.Core.Services.PersistentSubscription,PersistentSubscriptionCheckpointWriter,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\PersistentSubscription\PersistentSubscriptionCheckpointWriter.cs,PublishMetadata,The following switch statement is missing a default case: switch (msg.Result)                      {                          case OperationResult.Success:                              PublishCheckpoint(state);                              break;                      }
Missing Default,EventStore.Core.Services.Monitoring,MonitoringService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Monitoring\MonitoringService.cs,Handle,The following switch statement is missing a default case: switch (message.State)              {                  case VNodeState.CatchingUp:                  case VNodeState.Clone:                  case VNodeState.Slave:                  case VNodeState.Master:                  {                      SetStatsStreamMetadata();                      break;                  }              }
Missing Default,EventStore.Core.Services.Storage,StorageWriterService,C:\repos\EventStore_EventStore\src\EventStore.Core\Services\Storage\StorageWriterService.cs,Handle,The following switch statement is missing a default case: switch (message.State)              {                  case VNodeState.Master:                  {                      _indexWriter.Reset();                      EpochManager.WriteNewEpoch(); // forces flush                      break;                  }                  case VNodeState.ShuttingDown:                  {                      Writer.Close();                      break;                  }              }
