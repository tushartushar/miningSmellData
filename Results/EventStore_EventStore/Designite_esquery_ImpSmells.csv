Implementation smell,Namespace,Class,File,Method,Description
Complex Method,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,Process,Cyclomatic complexity of the method is 16
Long Statement,esquery,HelpCommandResult,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,ToString,The length of the statement  "	return "esquery help:\n" + "\th/help: prints help\n" + "\tq/query {js query} executes a query.\n" + "\ta/append {stream} {type} {js object}: appends to a stream.\n" + "\ts/subscribe {stream}: subscribes to a stream.\n"; " is 219.
Magic Number,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,Process,The following statement contains a magic number: try {  	switch (c) {  	case "a":  	case "append":  		var append = EatFirstN (3' command);  		if (append.Count != 4)  			return new InvalidCommandResult (command);  		return Append (state.Args.BaseUri' append [1]' append [2]' append [3]);  	case "h":  	case "help":  		return new HelpCommandResult ();  	case "q":  	case "query":  		var query = EatFirstN (1' command);  		if (query.Count != 2)  			return new InvalidCommandResult (command);  		return CreateAndRunQuery (state.Args.BaseUri' query [1]' state.Args.Credentials' state.Piped);  	case "s":  	case "subscribe":  		var sub = EatFirstN (2' command);  		if (sub.Count != 3)  			return new InvalidCommandResult (command);  		return Subscribe (state.Args.BaseUri' sub [1]' state.Args.Credentials' state.Piped);  	default:  		return new InvalidCommandResult (command);  	}  } catch (Exception ex) {  	return new ExceptionResult (command' ex);  }  
Magic Number,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,Process,The following statement contains a magic number: try {  	switch (c) {  	case "a":  	case "append":  		var append = EatFirstN (3' command);  		if (append.Count != 4)  			return new InvalidCommandResult (command);  		return Append (state.Args.BaseUri' append [1]' append [2]' append [3]);  	case "h":  	case "help":  		return new HelpCommandResult ();  	case "q":  	case "query":  		var query = EatFirstN (1' command);  		if (query.Count != 2)  			return new InvalidCommandResult (command);  		return CreateAndRunQuery (state.Args.BaseUri' query [1]' state.Args.Credentials' state.Piped);  	case "s":  	case "subscribe":  		var sub = EatFirstN (2' command);  		if (sub.Count != 3)  			return new InvalidCommandResult (command);  		return Subscribe (state.Args.BaseUri' sub [1]' state.Args.Credentials' state.Piped);  	default:  		return new InvalidCommandResult (command);  	}  } catch (Exception ex) {  	return new ExceptionResult (command' ex);  }  
Magic Number,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,Process,The following statement contains a magic number: try {  	switch (c) {  	case "a":  	case "append":  		var append = EatFirstN (3' command);  		if (append.Count != 4)  			return new InvalidCommandResult (command);  		return Append (state.Args.BaseUri' append [1]' append [2]' append [3]);  	case "h":  	case "help":  		return new HelpCommandResult ();  	case "q":  	case "query":  		var query = EatFirstN (1' command);  		if (query.Count != 2)  			return new InvalidCommandResult (command);  		return CreateAndRunQuery (state.Args.BaseUri' query [1]' state.Args.Credentials' state.Piped);  	case "s":  	case "subscribe":  		var sub = EatFirstN (2' command);  		if (sub.Count != 3)  			return new InvalidCommandResult (command);  		return Subscribe (state.Args.BaseUri' sub [1]' state.Args.Credentials' state.Piped);  	default:  		return new InvalidCommandResult (command);  	}  } catch (Exception ex) {  	return new ExceptionResult (command' ex);  }  
Magic Number,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,Process,The following statement contains a magic number: try {  	switch (c) {  	case "a":  	case "append":  		var append = EatFirstN (3' command);  		if (append.Count != 4)  			return new InvalidCommandResult (command);  		return Append (state.Args.BaseUri' append [1]' append [2]' append [3]);  	case "h":  	case "help":  		return new HelpCommandResult ();  	case "q":  	case "query":  		var query = EatFirstN (1' command);  		if (query.Count != 2)  			return new InvalidCommandResult (command);  		return CreateAndRunQuery (state.Args.BaseUri' query [1]' state.Args.Credentials' state.Piped);  	case "s":  	case "subscribe":  		var sub = EatFirstN (2' command);  		if (sub.Count != 3)  			return new InvalidCommandResult (command);  		return Subscribe (state.Args.BaseUri' sub [1]' state.Args.Credentials' state.Piped);  	default:  		return new InvalidCommandResult (command);  	}  } catch (Exception ex) {  	return new ExceptionResult (command' ex);  }  
Magic Number,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,Process,The following statement contains a magic number: try {  	switch (c) {  	case "a":  	case "append":  		var append = EatFirstN (3' command);  		if (append.Count != 4)  			return new InvalidCommandResult (command);  		return Append (state.Args.BaseUri' append [1]' append [2]' append [3]);  	case "h":  	case "help":  		return new HelpCommandResult ();  	case "q":  	case "query":  		var query = EatFirstN (1' command);  		if (query.Count != 2)  			return new InvalidCommandResult (command);  		return CreateAndRunQuery (state.Args.BaseUri' query [1]' state.Args.Credentials' state.Piped);  	case "s":  	case "subscribe":  		var sub = EatFirstN (2' command);  		if (sub.Count != 3)  			return new InvalidCommandResult (command);  		return Subscribe (state.Args.BaseUri' sub [1]' state.Args.Credentials' state.Piped);  	default:  		return new InvalidCommandResult (command);  	}  } catch (Exception ex) {  	return new ExceptionResult (command' ex);  }  
Magic Number,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,Process,The following statement contains a magic number: try {  	switch (c) {  	case "a":  	case "append":  		var append = EatFirstN (3' command);  		if (append.Count != 4)  			return new InvalidCommandResult (command);  		return Append (state.Args.BaseUri' append [1]' append [2]' append [3]);  	case "h":  	case "help":  		return new HelpCommandResult ();  	case "q":  	case "query":  		var query = EatFirstN (1' command);  		if (query.Count != 2)  			return new InvalidCommandResult (command);  		return CreateAndRunQuery (state.Args.BaseUri' query [1]' state.Args.Credentials' state.Piped);  	case "s":  	case "subscribe":  		var sub = EatFirstN (2' command);  		if (sub.Count != 3)  			return new InvalidCommandResult (command);  		return Subscribe (state.Args.BaseUri' sub [1]' state.Args.Credentials' state.Piped);  	default:  		return new InvalidCommandResult (command);  	}  } catch (Exception ex) {  	return new ExceptionResult (command' ex);  }  
Magic Number,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,Process,The following statement contains a magic number: try {  	switch (c) {  	case "a":  	case "append":  		var append = EatFirstN (3' command);  		if (append.Count != 4)  			return new InvalidCommandResult (command);  		return Append (state.Args.BaseUri' append [1]' append [2]' append [3]);  	case "h":  	case "help":  		return new HelpCommandResult ();  	case "q":  	case "query":  		var query = EatFirstN (1' command);  		if (query.Count != 2)  			return new InvalidCommandResult (command);  		return CreateAndRunQuery (state.Args.BaseUri' query [1]' state.Args.Credentials' state.Piped);  	case "s":  	case "subscribe":  		var sub = EatFirstN (2' command);  		if (sub.Count != 3)  			return new InvalidCommandResult (command);  		return Subscribe (state.Args.BaseUri' sub [1]' state.Args.Credentials' state.Piped);  	default:  		return new InvalidCommandResult (command);  	}  } catch (Exception ex) {  	return new ExceptionResult (command' ex);  }  
Magic Number,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,Process,The following statement contains a magic number: switch (c) {  case "a":  case "append":  	var append = EatFirstN (3' command);  	if (append.Count != 4)  		return new InvalidCommandResult (command);  	return Append (state.Args.BaseUri' append [1]' append [2]' append [3]);  case "h":  case "help":  	return new HelpCommandResult ();  case "q":  case "query":  	var query = EatFirstN (1' command);  	if (query.Count != 2)  		return new InvalidCommandResult (command);  	return CreateAndRunQuery (state.Args.BaseUri' query [1]' state.Args.Credentials' state.Piped);  case "s":  case "subscribe":  	var sub = EatFirstN (2' command);  	if (sub.Count != 3)  		return new InvalidCommandResult (command);  	return Subscribe (state.Args.BaseUri' sub [1]' state.Args.Credentials' state.Piped);  default:  	return new InvalidCommandResult (command);  }  
Magic Number,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,Process,The following statement contains a magic number: switch (c) {  case "a":  case "append":  	var append = EatFirstN (3' command);  	if (append.Count != 4)  		return new InvalidCommandResult (command);  	return Append (state.Args.BaseUri' append [1]' append [2]' append [3]);  case "h":  case "help":  	return new HelpCommandResult ();  case "q":  case "query":  	var query = EatFirstN (1' command);  	if (query.Count != 2)  		return new InvalidCommandResult (command);  	return CreateAndRunQuery (state.Args.BaseUri' query [1]' state.Args.Credentials' state.Piped);  case "s":  case "subscribe":  	var sub = EatFirstN (2' command);  	if (sub.Count != 3)  		return new InvalidCommandResult (command);  	return Subscribe (state.Args.BaseUri' sub [1]' state.Args.Credentials' state.Piped);  default:  	return new InvalidCommandResult (command);  }  
Magic Number,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,Process,The following statement contains a magic number: switch (c) {  case "a":  case "append":  	var append = EatFirstN (3' command);  	if (append.Count != 4)  		return new InvalidCommandResult (command);  	return Append (state.Args.BaseUri' append [1]' append [2]' append [3]);  case "h":  case "help":  	return new HelpCommandResult ();  case "q":  case "query":  	var query = EatFirstN (1' command);  	if (query.Count != 2)  		return new InvalidCommandResult (command);  	return CreateAndRunQuery (state.Args.BaseUri' query [1]' state.Args.Credentials' state.Piped);  case "s":  case "subscribe":  	var sub = EatFirstN (2' command);  	if (sub.Count != 3)  		return new InvalidCommandResult (command);  	return Subscribe (state.Args.BaseUri' sub [1]' state.Args.Credentials' state.Piped);  default:  	return new InvalidCommandResult (command);  }  
Magic Number,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,Process,The following statement contains a magic number: switch (c) {  case "a":  case "append":  	var append = EatFirstN (3' command);  	if (append.Count != 4)  		return new InvalidCommandResult (command);  	return Append (state.Args.BaseUri' append [1]' append [2]' append [3]);  case "h":  case "help":  	return new HelpCommandResult ();  case "q":  case "query":  	var query = EatFirstN (1' command);  	if (query.Count != 2)  		return new InvalidCommandResult (command);  	return CreateAndRunQuery (state.Args.BaseUri' query [1]' state.Args.Credentials' state.Piped);  case "s":  case "subscribe":  	var sub = EatFirstN (2' command);  	if (sub.Count != 3)  		return new InvalidCommandResult (command);  	return Subscribe (state.Args.BaseUri' sub [1]' state.Args.Credentials' state.Piped);  default:  	return new InvalidCommandResult (command);  }  
Magic Number,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,Process,The following statement contains a magic number: switch (c) {  case "a":  case "append":  	var append = EatFirstN (3' command);  	if (append.Count != 4)  		return new InvalidCommandResult (command);  	return Append (state.Args.BaseUri' append [1]' append [2]' append [3]);  case "h":  case "help":  	return new HelpCommandResult ();  case "q":  case "query":  	var query = EatFirstN (1' command);  	if (query.Count != 2)  		return new InvalidCommandResult (command);  	return CreateAndRunQuery (state.Args.BaseUri' query [1]' state.Args.Credentials' state.Piped);  case "s":  case "subscribe":  	var sub = EatFirstN (2' command);  	if (sub.Count != 3)  		return new InvalidCommandResult (command);  	return Subscribe (state.Args.BaseUri' sub [1]' state.Args.Credentials' state.Piped);  default:  	return new InvalidCommandResult (command);  }  
Magic Number,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,Process,The following statement contains a magic number: switch (c) {  case "a":  case "append":  	var append = EatFirstN (3' command);  	if (append.Count != 4)  		return new InvalidCommandResult (command);  	return Append (state.Args.BaseUri' append [1]' append [2]' append [3]);  case "h":  case "help":  	return new HelpCommandResult ();  case "q":  case "query":  	var query = EatFirstN (1' command);  	if (query.Count != 2)  		return new InvalidCommandResult (command);  	return CreateAndRunQuery (state.Args.BaseUri' query [1]' state.Args.Credentials' state.Piped);  case "s":  case "subscribe":  	var sub = EatFirstN (2' command);  	if (sub.Count != 3)  		return new InvalidCommandResult (command);  	return Subscribe (state.Args.BaseUri' sub [1]' state.Args.Credentials' state.Piped);  default:  	return new InvalidCommandResult (command);  }  
Magic Number,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,Process,The following statement contains a magic number: switch (c) {  case "a":  case "append":  	var append = EatFirstN (3' command);  	if (append.Count != 4)  		return new InvalidCommandResult (command);  	return Append (state.Args.BaseUri' append [1]' append [2]' append [3]);  case "h":  case "help":  	return new HelpCommandResult ();  case "q":  case "query":  	var query = EatFirstN (1' command);  	if (query.Count != 2)  		return new InvalidCommandResult (command);  	return CreateAndRunQuery (state.Args.BaseUri' query [1]' state.Args.Credentials' state.Piped);  case "s":  case "subscribe":  	var sub = EatFirstN (2' command);  	if (sub.Count != 3)  		return new InvalidCommandResult (command);  	return Subscribe (state.Args.BaseUri' sub [1]' state.Args.Credentials' state.Piped);  default:  	return new InvalidCommandResult (command);  }  
Magic Number,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,Process,The following statement contains a magic number: if (append.Count != 4)  	return new InvalidCommandResult (command);  
Magic Number,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,Process,The following statement contains a magic number: return Append (state.Args.BaseUri' append [1]' append [2]' append [3]);  
Magic Number,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,Process,The following statement contains a magic number: return Append (state.Args.BaseUri' append [1]' append [2]' append [3]);  
Magic Number,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,Process,The following statement contains a magic number: if (query.Count != 2)  	return new InvalidCommandResult (command);  
Magic Number,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,Process,The following statement contains a magic number: if (sub.Count != 3)  	return new InvalidCommandResult (command);  
Magic Number,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,CreateAndRunQuery,The following statement contains a magic number: try {  	var watch = new Stopwatch ();  	watch.Start ();  	var toCheck = PostQuery (baseUri' query' credential);  	var queryInformation = new QueryInformation ();  	if (!piped)  		Console.WriteLine ("Query started. Press esc to cancel.");  	while (!queryInformation.Completed) {  		queryInformation = CheckQueryStatus (toCheck' credential);  		if (queryInformation.Faulted) {  			throw new Exception ("Query Faulted.\n" + queryInformation.FaultReason);  		}  		Console.Write ("\r{0}"' queryInformation.Progress.ToString ("f2") + "%");  		if (!piped && Console.KeyAvailable && Console.ReadKey (true).Key == ConsoleKey.Escape) {  			Console.WriteLine ("\nCancelling query.");  			Cancel (queryInformation);  			return new QueryCancelledResult ();  		}  		Thread.Sleep (500);  	}  	Console.WriteLine ("\rQuery Completed in: " + watch.Elapsed);  	if (queryInformation.IsStreamResult) {  		var last = GetLast (queryInformation.ResultStreamUrl' credential);  		last = new Uri (last.OriginalString + "?embed=body");  		ReadResults (last' credential);  		return new QueryResult () {  			Query = query  		};  	} else {  		GetResult (queryInformation.ResultUrl' credential);  		return new QueryResult () {  			Query = query  		};  	}  } catch (Exception ex) {  	return new ErrorResult (ex);  }  
Magic Number,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,CreateAndRunQuery,The following statement contains a magic number: while (!queryInformation.Completed) {  	queryInformation = CheckQueryStatus (toCheck' credential);  	if (queryInformation.Faulted) {  		throw new Exception ("Query Faulted.\n" + queryInformation.FaultReason);  	}  	Console.Write ("\r{0}"' queryInformation.Progress.ToString ("f2") + "%");  	if (!piped && Console.KeyAvailable && Console.ReadKey (true).Key == ConsoleKey.Escape) {  		Console.WriteLine ("\nCancelling query.");  		Cancel (queryInformation);  		return new QueryCancelledResult ();  	}  	Thread.Sleep (500);  }  
Magic Number,esquery,CommandProcessor,F:\newReposMay17\EventStore_EventStore\src\esquery\CommandProcessor.cs,CreateAndRunQuery,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,esquery,Program,F:\newReposMay17\EventStore_EventStore\src\esquery\Program.cs,ReadArgs,The following statement contains a magic number: if (args.Length == 2) {  	WriteUsage ();  }  
Magic Number,esquery,Program,F:\newReposMay17\EventStore_EventStore\src\esquery\Program.cs,ReadArgs,The following statement contains a magic number: if (args.Length == 3) {  	baseuri = new Uri (args [0]);  	return new Args (false' baseuri' new NetworkCredential (args [1]' args [2]));  }  
Magic Number,esquery,Program,F:\newReposMay17\EventStore_EventStore\src\esquery\Program.cs,ReadArgs,The following statement contains a magic number: if (args.Length == 3) {  	baseuri = new Uri (args [0]);  	return new Args (false' baseuri' new NetworkCredential (args [1]' args [2]));  }  
Magic Number,esquery,Program,F:\newReposMay17\EventStore_EventStore\src\esquery\Program.cs,ReadArgs,The following statement contains a magic number: return new Args (false' baseuri' new NetworkCredential (args [1]' args [2]));  
Magic Number,esquery,Program,F:\newReposMay17\EventStore_EventStore\src\esquery\Program.cs,ReadArgs,The following statement contains a magic number: if (args.Length > 4) {  	WriteUsage ();  }  
Magic Number,esquery,Program,F:\newReposMay17\EventStore_EventStore\src\esquery\Program.cs,GetValidatedNetworkCredential,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	Console.Write ("username:");  	var username = Console.ReadLine ();  	Console.Write ("password:");  	var password = ReadPassword ();  	var cred = new NetworkCredential (username' password);  	if (TryValidatePassword (baseuri' cred)) {  		return cred;  	} else {  		Console.WriteLine ("Invalid username/password");  	}  }  
