Implementation smell,Namespace,Class,File,Method,Description
Complex Method,EventStore.ClientAPI.ClientOperations,ConnectToPersistentSubscriptionOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\ConnectToPersistentSubscriptionOperation.cs,InspectPackage,Cyclomatic complexity of the method is 8
Complex Method,EventStore.ClientAPI.Internal,EventStoreConnectionLogicHandler,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreConnectionLogicHandler.cs,HandleTcpPackage,Cyclomatic complexity of the method is 13
Complex Method,EventStore.ClientAPI.Internal,SubscriptionsManager,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\SubscriptionsManager.cs,CheckTimeoutsAndRetry,Cyclomatic complexity of the method is 9
Complex Method,EventStore.ClientAPI.Transport.Tcp,TcpConnectionLockless,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpConnectionLockless.cs,TrySend,Cyclomatic complexity of the method is 8
Long Parameter List,EventStore.ClientAPI,EventStorePersistentSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStorePersistentSubscription.cs,EventStorePersistentSubscription,The method has 11 parameters. Parameters: subscriptionId' streamId' eventAppeared' subscriptionDropped' userCredentials' log' verboseLogging' settings' handler' bufferSize' autoAck
Long Parameter List,EventStore.ClientAPI,EventStorePersistentSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStorePersistentSubscription.cs,StartSubscription,The method has 7 parameters. Parameters: subscriptionId' streamId' bufferSize' userCredentials' onEventAppeared' onSubscriptionDropped' settings
Long Parameter List,EventStore.ClientAPI,EventStorePersistentSubscriptionBase,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStorePersistentSubscriptionBase.cs,EventStorePersistentSubscriptionBase,The method has 10 parameters. Parameters: subscriptionId' streamId' eventAppeared' subscriptionDropped' userCredentials' log' verboseLogging' settings' bufferSize' autoAck
Long Parameter List,EventStore.ClientAPI,EventStorePersistentSubscriptionBase,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStorePersistentSubscriptionBase.cs,StartSubscription,The method has 7 parameters. Parameters: subscriptionId' streamId' bufferSize' userCredentials' onEventAppeared' onSubscriptionDropped' settings
Long Parameter List,EventStore.ClientAPI,IEventStoreConnectionExtensions,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\IEventStoreConnectionExtensions.cs,SubscribeToStreamAsync,The method has 6 parameters. Parameters: target' stream' resolveLinkTos' eventAppeared' subscriptionDropped' userCredentials
Long Parameter List,EventStore.ClientAPI,IEventStoreConnectionExtensions,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\IEventStoreConnectionExtensions.cs,SubscribeToStreamFrom,The method has 10 parameters. Parameters: target' stream' lastCheckpoint' resolveLinkTos' eventAppeared' liveProcessingStarted' subscriptionDropped' userCredentials' readBatchSize' subscriptionName
Long Parameter List,EventStore.ClientAPI,IEventStoreConnectionExtensions,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\IEventStoreConnectionExtensions.cs,SubscribeToStreamFrom,The method has 8 parameters. Parameters: target' stream' lastCheckpoint' settings' eventAppeared' liveProcessingStarted' subscriptionDropped' userCredentials
Long Parameter List,EventStore.ClientAPI,IEventStoreConnectionExtensions,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\IEventStoreConnectionExtensions.cs,SubscribeToAllAsync,The method has 5 parameters. Parameters: target' resolveLinkTos' eventAppeared' subscriptionDropped' userCredentials
Long Parameter List,EventStore.ClientAPI,IEventStoreConnectionExtensions,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\IEventStoreConnectionExtensions.cs,ConnectToPersistentSubscription,The method has 8 parameters. Parameters: target' stream' groupName' eventAppeared' subscriptionDropped' userCredentials' bufferSize' autoAck
Long Parameter List,EventStore.ClientAPI,IEventStoreConnectionExtensions,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\IEventStoreConnectionExtensions.cs,ConnectToPersistentSubscription,The method has 8 parameters. Parameters: target' stream' groupName' eventAppeared' subscriptionDropped' userCredentials' bufferSize' autoAck
Long Parameter List,EventStore.ClientAPI,IEventStoreConnectionExtensions,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\IEventStoreConnectionExtensions.cs,ConnectToPersistentSubscriptionAsync,The method has 8 parameters. Parameters: target' stream' groupName' eventAppeared' subscriptionDropped' userCredentials' bufferSize' autoAck
Long Parameter List,EventStore.ClientAPI,IEventStoreConnectionExtensions,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\IEventStoreConnectionExtensions.cs,ConnectToPersistentSubscriptionAsync,The method has 8 parameters. Parameters: target' stream' groupName' eventAppeared' subscriptionDropped' userCredentials' bufferSize' autoAck
Long Parameter List,EventStore.ClientAPI,IEventStoreConnectionExtensions,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\IEventStoreConnectionExtensions.cs,SubscribeToAllFrom,The method has 9 parameters. Parameters: target' lastCheckpoint' resolveLinkTos' eventAppeared' liveProcessingStarted' subscriptionDropped' userCredentials' readBatchSize' subscriptionName
Long Parameter List,EventStore.ClientAPI,IEventStoreConnectionExtensions,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\IEventStoreConnectionExtensions.cs,SubscribeToAllFrom,The method has 7 parameters. Parameters: target' lastCheckpoint' settings' eventAppeared' liveProcessingStarted' subscriptionDropped' userCredentials
Long Parameter List,EventStore.ClientAPI,PersistentSubscriptionSettings,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\PersistentSubscriptionSettings.cs,PersistentSubscriptionSettings,The method has 13 parameters. Parameters: resolveLinkTos' startFrom' extraStatistics' messageTimeout' maxRetryCount' liveBufferSize' readBatchSize' historyBufferSize' checkPointAfter' minCheckPointCount' maxCheckPointCount' maxSubscriberCount' namedConsumerStrategy
Long Parameter List,EventStore.ClientAPI,PersistentSubscriptionSettingsBuilder,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\PersistentSubscriptionSettingsBuilder.cs,PersistentSubscriptionSettingsBuilder,The method has 13 parameters. Parameters: resolveLinkTos' startFrom' timingStatistics' timeout' bufferSize' liveBufferSize' maxRetryCount' readBatchSize' checkPointAfter' minCheckPointCount' maxCheckPointCount' maxSubscriberCount' namedConsumerStrategies
Long Parameter List,EventStore.ClientAPI,ConnectionSettings,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ConnectionSettings.cs,ConnectionSettings,The method has 24 parameters. Parameters: log' verboseLogging' maxQueueSize' maxConcurrentItems' maxRetries' maxReconnections' requireMaster' reconnectionDelay' operationTimeout' operationTimeoutCheckPeriod' defaultUserCredentials' useSslConnection' targetHost' validateServer' failOnNoServerResponse' heartbeatInterval' heartbeatTimeout' clientConnectionTimeout' clusterDns' gossipSeeds' maxDiscoverAttempts' externalGossipPort' gossipTimeout' preferRandomNode
Long Parameter List,EventStore.ClientAPI,ClusterSettings,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClusterSettings.cs,ClusterSettings,The method has 5 parameters. Parameters: clusterDns' maxDiscoverAttempts' externalGossipPort' gossipTimeout' preferRandomNode
Long Parameter List,EventStore.ClientAPI,StreamMetadataBuilder,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\StreamMetadataBuilder.cs,StreamMetadataBuilder,The method has 10 parameters. Parameters: maxCount' maxAge' truncateBefore' cacheControl' aclRead' aclWrite' aclDelete' aclMetaRead' aclMetaWrite' customMetadata
Long Parameter List,EventStore.ClientAPI,CatchUpSubscriptionSettings,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\CatchUpSubscriptionSettings.cs,CatchUpSubscriptionSettings,The method has 5 parameters. Parameters: maxLiveQueueSize' readBatchSize' verboseLogging' resolveLinkTos' subscriptionName
Long Parameter List,EventStore.ClientAPI,IEventStoreConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\IEventStoreConnection.cs,ReadStreamEventsForwardAsync,The method has 5 parameters. Parameters: stream' start' count' resolveLinkTos' userCredentials
Long Parameter List,EventStore.ClientAPI,IEventStoreConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\IEventStoreConnection.cs,ReadStreamEventsBackwardAsync,The method has 5 parameters. Parameters: stream' start' count' resolveLinkTos' userCredentials
Long Parameter List,EventStore.ClientAPI,IEventStoreConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\IEventStoreConnection.cs,SubscribeToStreamAsync,The method has 5 parameters. Parameters: stream' resolveLinkTos' eventAppeared' subscriptionDropped' userCredentials
Long Parameter List,EventStore.ClientAPI,IEventStoreConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\IEventStoreConnection.cs,SubscribeToStreamFrom,The method has 9 parameters. Parameters: stream' lastCheckpoint' resolveLinkTos' eventAppeared' liveProcessingStarted' subscriptionDropped' userCredentials' readBatchSize' subscriptionName
Long Parameter List,EventStore.ClientAPI,IEventStoreConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\IEventStoreConnection.cs,SubscribeToStreamFrom,The method has 7 parameters. Parameters: stream' lastCheckpoint' settings' eventAppeared' liveProcessingStarted' subscriptionDropped' userCredentials
Long Parameter List,EventStore.ClientAPI,IEventStoreConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\IEventStoreConnection.cs,ConnectToPersistentSubscription,The method has 7 parameters. Parameters: stream' groupName' eventAppeared' subscriptionDropped' userCredentials' bufferSize' autoAck
Long Parameter List,EventStore.ClientAPI,IEventStoreConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\IEventStoreConnection.cs,ConnectToPersistentSubscriptionAsync,The method has 7 parameters. Parameters: stream' groupName' eventAppeared' subscriptionDropped' userCredentials' bufferSize' autoAck
Long Parameter List,EventStore.ClientAPI,IEventStoreConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\IEventStoreConnection.cs,SubscribeToAllFrom,The method has 8 parameters. Parameters: lastCheckpoint' resolveLinkTos' eventAppeared' liveProcessingStarted' subscriptionDropped' userCredentials' readBatchSize' subscriptionName
Long Parameter List,EventStore.ClientAPI,IEventStoreConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\IEventStoreConnection.cs,SubscribeToAllFrom,The method has 6 parameters. Parameters: lastCheckpoint' settings' eventAppeared' liveProcessingStarted' subscriptionDropped' userCredentials
Long Parameter List,EventStore.ClientAPI,StreamAcl,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\StreamAcl.cs,StreamAcl,The method has 5 parameters. Parameters: readRole' writeRole' deleteRole' metaReadRole' metaWriteRole
Long Parameter List,EventStore.ClientAPI,StreamAcl,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\StreamAcl.cs,StreamAcl,The method has 5 parameters. Parameters: readRoles' writeRoles' deleteRoles' metaReadRoles' metaWriteRoles
Long Parameter List,EventStore.ClientAPI,StreamMetadata,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\StreamMetadata.cs,StreamMetadata,The method has 6 parameters. Parameters: maxCount' maxAge' truncateBefore' cacheControl' acl' customMetadata
Long Parameter List,EventStore.ClientAPI,StreamMetadata,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\StreamMetadata.cs,Create,The method has 5 parameters. Parameters: maxCount' maxAge' truncateBefore' cacheControl' acl
Long Parameter List,EventStore.ClientAPI,EventStoreCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,ReadEventsTillAsync,The method has 5 parameters. Parameters: connection' resolveLinkTos' userCredentials' lastCommitPosition' lastEventNumber
Long Parameter List,EventStore.ClientAPI,EventStoreCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,EventStoreCatchUpSubscription,The method has 8 parameters. Parameters: connection' log' streamId' userCredentials' eventAppeared' liveProcessingStarted' subscriptionDropped' settings
Long Parameter List,EventStore.ClientAPI,EventStoreAllCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,EventStoreAllCatchUpSubscription,The method has 8 parameters. Parameters: connection' log' fromPositionExclusive' userCredentials' eventAppeared' liveProcessingStarted' subscriptionDropped' settings
Long Parameter List,EventStore.ClientAPI,EventStoreAllCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,ReadEventsTillAsync,The method has 5 parameters. Parameters: connection' resolveLinkTos' userCredentials' lastCommitPosition' lastEventNumber
Long Parameter List,EventStore.ClientAPI,EventStoreStreamCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,EventStoreStreamCatchUpSubscription,The method has 9 parameters. Parameters: connection' log' streamId' fromEventNumberExclusive' userCredentials' eventAppeared' liveProcessingStarted' subscriptionDropped' settings
Long Parameter List,EventStore.ClientAPI,EventStoreStreamCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,ReadEventsTillAsync,The method has 5 parameters. Parameters: connection' resolveLinkTos' userCredentials' lastCommitPosition' lastEventNumber
Long Parameter List,EventStore.ClientAPI,EventData,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventData.cs,EventData,The method has 5 parameters. Parameters: eventId' type' isJson' data' metadata
Long Parameter List,EventStore.ClientAPI,StreamEventsSlice,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\StreamEventsSlice.cs,StreamEventsSlice,The method has 8 parameters. Parameters: status' stream' fromEventNumber' readDirection' events' nextEventNumber' lastEventNumber' isEndOfStream
Long Parameter List,EventStore.ClientAPI.ClientOperations,ConditionalAppendToStreamOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\ConditionalAppendToStreamOperation.cs,ConditionalAppendToStreamOperation,The method has 7 parameters. Parameters: log' source' requireMaster' stream' expectedVersion' events' userCredentials
Long Parameter List,EventStore.ClientAPI.ClientOperations,ConnectToPersistentSubscriptionOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\ConnectToPersistentSubscriptionOperation.cs,ConnectToPersistentSubscriptionOperation,The method has 10 parameters. Parameters: log' source' groupName' bufferSize' streamId' userCredentials' eventAppeared' subscriptionDropped' verboseLogging' getConnection
Long Parameter List,EventStore.ClientAPI.ClientOperations,CreatePersistentSubscriptionOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\CreatePersistentSubscriptionOperation.cs,CreatePersistentSubscriptionOperation,The method has 6 parameters. Parameters: log' source' stream' groupName' settings' userCredentials
Long Parameter List,EventStore.ClientAPI.ClientOperations,DeletePersistentSubscriptionOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\DeletePersistentSubscriptionOperation.cs,DeletePersistentSubscriptionOperation,The method has 5 parameters. Parameters: log' source' stream' groupName' userCredentials
Long Parameter List,EventStore.ClientAPI.ClientOperations,UpdatePersistentSubscriptionOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\UpdatePersistentSubscriptionOperation.cs,UpdatePersistentSubscriptionOperation,The method has 6 parameters. Parameters: log' source' stream' groupName' settings' userCredentials
Long Parameter List,EventStore.ClientAPI.ClientOperations,VolatileSubscriptionOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\VolatileSubscriptionOperation.cs,VolatileSubscriptionOperation,The method has 9 parameters. Parameters: log' source' streamId' resolveLinkTos' userCredentials' eventAppeared' subscriptionDropped' verboseLogging' getConnection
Long Parameter List,EventStore.ClientAPI.ClientOperations,CommitTransactionOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\CommitTransactionOperation.cs,CommitTransactionOperation,The method has 5 parameters. Parameters: log' source' requireMaster' transactionId' userCredentials
Long Parameter List,EventStore.ClientAPI.ClientOperations,ReadEventOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\ReadEventOperation.cs,ReadEventOperation,The method has 7 parameters. Parameters: log' source' stream' eventNumber' resolveLinkTo' requireMaster' userCredentials
Long Parameter List,EventStore.ClientAPI.ClientOperations,SubscriptionOperation<T;TE>,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\SubscriptionOperation.cs,SubscriptionOperation,The method has 9 parameters. Parameters: log' source' streamId' resolveLinkTos' userCredentials' eventAppeared' subscriptionDropped' verboseLogging' getConnection
Long Parameter List,EventStore.ClientAPI.ClientOperations,OperationBase<TResult;TResponse>,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\OperationBase.cs,OperationBase,The method has 5 parameters. Parameters: log' source' requestCommand' responseCommand' userCredentials
Long Parameter List,EventStore.ClientAPI.ClientOperations,ReadAllEventsBackwardOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\ReadAllEventsBackwardOperation.cs,ReadAllEventsBackwardOperation,The method has 7 parameters. Parameters: log' source' position' maxCount' resolveLinkTos' requireMaster' userCredentials
Long Parameter List,EventStore.ClientAPI.ClientOperations,ReadAllEventsForwardOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\ReadAllEventsForwardOperation.cs,ReadAllEventsForwardOperation,The method has 7 parameters. Parameters: log' source' position' maxCount' resolveLinkTos' requireMaster' userCredentials
Long Parameter List,EventStore.ClientAPI.ClientOperations,ReadStreamEventsBackwardOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\ReadStreamEventsBackwardOperation.cs,ReadStreamEventsBackwardOperation,The method has 8 parameters. Parameters: log' source' stream' fromEventNumber' maxCount' resolveLinkTos' requireMaster' userCredentials
Long Parameter List,EventStore.ClientAPI.ClientOperations,StartTransactionOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\StartTransactionOperation.cs,StartTransactionOperation,The method has 7 parameters. Parameters: log' source' requireMaster' stream' expectedVersion' parentConnection' userCredentials
Long Parameter List,EventStore.ClientAPI.ClientOperations,TransactionalWriteOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\TransactionalWriteOperation.cs,TransactionalWriteOperation,The method has 6 parameters. Parameters: log' source' requireMaster' transactionId' events' userCredentials
Long Parameter List,EventStore.ClientAPI.ClientOperations,DeleteStreamOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\DeleteStreamOperation.cs,DeleteStreamOperation,The method has 7 parameters. Parameters: log' source' requireMaster' stream' expectedVersion' hardDelete' userCredentials
Long Parameter List,EventStore.ClientAPI.ClientOperations,ReadStreamEventsForwardOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\ReadStreamEventsForwardOperation.cs,ReadStreamEventsForwardOperation,The method has 8 parameters. Parameters: log' source' stream' fromEventNumber' maxCount' resolveLinkTos' requireMaster' userCredentials
Long Parameter List,EventStore.ClientAPI.ClientOperations,AppendToStreamOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\AppendToStreamOperation.cs,AppendToStreamOperation,The method has 7 parameters. Parameters: log' source' requireMaster' stream' expectedVersion' events' userCredentials
Long Parameter List,EventStore.ClientAPI.Internal,EventStoreNodeConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreNodeConnection.cs,ReadStreamEventsForwardAsync,The method has 5 parameters. Parameters: stream' start' count' resolveLinkTos' userCredentials
Long Parameter List,EventStore.ClientAPI.Internal,EventStoreNodeConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreNodeConnection.cs,ReadStreamEventsBackwardAsync,The method has 5 parameters. Parameters: stream' start' count' resolveLinkTos' userCredentials
Long Parameter List,EventStore.ClientAPI.Internal,EventStoreNodeConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreNodeConnection.cs,SubscribeToStreamAsync,The method has 5 parameters. Parameters: stream' resolveLinkTos' eventAppeared' subscriptionDropped' userCredentials
Long Parameter List,EventStore.ClientAPI.Internal,EventStoreNodeConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreNodeConnection.cs,SubscribeToStreamFrom,The method has 9 parameters. Parameters: stream' lastCheckpoint' resolveLinkTos' eventAppeared' liveProcessingStarted' subscriptionDropped' userCredentials' readBatchSize' subscriptionName
Long Parameter List,EventStore.ClientAPI.Internal,EventStoreNodeConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreNodeConnection.cs,SubscribeToStreamFrom,The method has 7 parameters. Parameters: stream' lastCheckpoint' settings' eventAppeared' liveProcessingStarted' subscriptionDropped' userCredentials
Long Parameter List,EventStore.ClientAPI.Internal,EventStoreNodeConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreNodeConnection.cs,SubscribeToAllFrom,The method has 8 parameters. Parameters: lastCheckpoint' resolveLinkTos' eventAppeared' liveProcessingStarted' subscriptionDropped' userCredentials' readBatchSize' subscriptionName
Long Parameter List,EventStore.ClientAPI.Internal,EventStoreNodeConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreNodeConnection.cs,SubscribeToAllFrom,The method has 6 parameters. Parameters: lastCheckpoint' settings' eventAppeared' liveProcessingStarted' subscriptionDropped' userCredentials
Long Parameter List,EventStore.ClientAPI.Internal,EventStoreNodeConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreNodeConnection.cs,ConnectToPersistentSubscription,The method has 7 parameters. Parameters: stream' groupName' eventAppeared' subscriptionDropped' userCredentials' bufferSize' autoAck
Long Parameter List,EventStore.ClientAPI.Internal,EventStoreNodeConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreNodeConnection.cs,ConnectToPersistentSubscriptionAsync,The method has 7 parameters. Parameters: stream' groupName' eventAppeared' subscriptionDropped' userCredentials' bufferSize' autoAck
Long Parameter List,EventStore.ClientAPI.Internal,ClusterDnsEndPointDiscoverer,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\ClusterDnsEndPointDiscoverer.cs,ClusterDnsEndPointDiscoverer,The method has 7 parameters. Parameters: log' clusterDns' maxDiscoverAttempts' managerExternalHttpPort' gossipSeeds' gossipTimeout' preferRandomNode
Long Parameter List,EventStore.ClientAPI.Internal,StartSubscriptionMessage,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\Messages.cs,StartSubscriptionMessage,The method has 8 parameters. Parameters: source' streamId' resolveLinkTos' userCredentials' eventAppeared' subscriptionDropped' maxRetries' timeout
Long Parameter List,EventStore.ClientAPI.Internal,StartPersistentSubscriptionMessage,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\Messages.cs,StartPersistentSubscriptionMessage,The method has 9 parameters. Parameters: source' subscriptionId' streamId' bufferSize' userCredentials' eventAppeared' subscriptionDropped' maxRetries' timeout
Long Parameter List,EventStore.ClientAPI.Projections,ProjectionDetails,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\ProjectionDetails.cs,ProjectionDetails,The method has 25 parameters. Parameters: coreProcessingTime' version' epoch' effectiveName' writesInProgress' readsInProgress' partitionsCached' status' stateReason' name' mode' position' progress' lastCheckpoint' eventsProcessedAfterRestart' statusUrl' stateUrl' resultUrl' queryUrl' enableCommandUrl' disableCommandUrl' checkpointStatus' bufferedEvents' writePendingEventsBeforeCheckpoint' writePendingEventsAfterCheckpoint
Long Parameter List,EventStore.ClientAPI.Projections,QueryManager,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\QueryManager.cs,ExecuteAsync,The method has 5 parameters. Parameters: name' query' initialPollingDelay' maximumPollingDelay' userCredentials
Long Parameter List,EventStore.ClientAPI.Projections,ProjectionsClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\ProjectionsClient.cs,CreateTransient,The method has 5 parameters. Parameters: endPoint' name' query' userCredentials' httpSchema
Long Parameter List,EventStore.ClientAPI.Projections,ProjectionsClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\ProjectionsClient.cs,CreateContinuous,The method has 6 parameters. Parameters: endPoint' name' query' trackEmitted' userCredentials' httpSchema
Long Parameter List,EventStore.ClientAPI.Projections,ProjectionsClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\ProjectionsClient.cs,GetPartitionStateAsync,The method has 5 parameters. Parameters: endPoint' name' partition' userCredentials' httpSchema
Long Parameter List,EventStore.ClientAPI.Projections,ProjectionsClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\ProjectionsClient.cs,GetPartitionResultAsync,The method has 5 parameters. Parameters: endPoint' name' partition' userCredentials' httpSchema
Long Parameter List,EventStore.ClientAPI.Projections,ProjectionsClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\ProjectionsClient.cs,UpdateQuery,The method has 5 parameters. Parameters: endPoint' name' query' userCredentials' httpSchema
Long Parameter List,EventStore.ClientAPI.Projections,ProjectionsClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\ProjectionsClient.cs,UpdateQuery,The method has 6 parameters. Parameters: endPoint' name' query' userCredentials' httpSchema' emitEnabled
Long Parameter List,EventStore.ClientAPI.Projections,ProjectionsClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\ProjectionsClient.cs,Delete,The method has 5 parameters. Parameters: endPoint' name' deleteEmittedStreams' userCredentials' httpSchema
Long Parameter List,EventStore.ClientAPI.Transport.Http,HttpAsyncClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Http\HttpAsyncClient.cs,Get,The method has 5 parameters. Parameters: url' userCredentials' onSuccess' onException' hostHeader
Long Parameter List,EventStore.ClientAPI.Transport.Http,HttpAsyncClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Http\HttpAsyncClient.cs,Post,The method has 6 parameters. Parameters: url' body' contentType' userCredentials' onSuccess' onException
Long Parameter List,EventStore.ClientAPI.Transport.Http,HttpAsyncClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Http\HttpAsyncClient.cs,Put,The method has 6 parameters. Parameters: url' body' contentType' userCredentials' onSuccess' onException
Long Parameter List,EventStore.ClientAPI.Transport.Http,HttpAsyncClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Http\HttpAsyncClient.cs,Receive,The method has 6 parameters. Parameters: method' url' userCredentials' onSuccess' onException' hostHeader
Long Parameter List,EventStore.ClientAPI.Transport.Http,HttpAsyncClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Http\HttpAsyncClient.cs,Send,The method has 7 parameters. Parameters: method' url' body' contentType' userCredentials' onSuccess' onException
Long Parameter List,EventStore.ClientAPI.UserManagement,UserDetails,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\UserManagement\UserDetails.cs,UserDetails,The method has 6 parameters. Parameters: loginName' fullName' groups' disabled' dateLastUpdated' links
Long Parameter List,EventStore.ClientAPI.UserManagement,UsersManager,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\UserManagement\UsersManager.cs,CreateUserAsync,The method has 5 parameters. Parameters: login' fullName' groups' password' userCredentials
Long Parameter List,EventStore.ClientAPI.Messages,MasterInfo,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Messages\ClientMessagesExtensions.cs,MasterInfo,The method has 6 parameters. Parameters: externalTcpAddress' externalTcpPort' externalHttpAddress' externalHttpPort' externalSecureTcpAddress' externalSecureTcpPort
Long Parameter List,EventStore.ClientAPI.Messages,NewEvent,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Messages\ClientMessage.cs,NewEvent,The method has 6 parameters. Parameters: eventId' eventType' dataContentType' metadataContentType' data' metadata
Long Parameter List,EventStore.ClientAPI.Messages,EventRecord,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Messages\ClientMessage.cs,EventRecord,The method has 10 parameters. Parameters: eventStreamId' eventNumber' eventId' eventType' dataContentType' metadataContentType' data' metadata' created' createdEpoch
Long Parameter List,EventStore.ClientAPI.Messages,WriteEventsCompleted,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Messages\ClientMessage.cs,WriteEventsCompleted,The method has 7 parameters. Parameters: result' message' firstEventNumber' lastEventNumber' preparePosition' commitPosition' currentVersion
Long Parameter List,EventStore.ClientAPI.Messages,TransactionCommitCompleted,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Messages\ClientMessage.cs,TransactionCommitCompleted,The method has 7 parameters. Parameters: transactionId' result' message' firstEventNumber' lastEventNumber' preparePosition' commitPosition
Long Parameter List,EventStore.ClientAPI.Messages,ReadStreamEvents,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Messages\ClientMessage.cs,ReadStreamEvents,The method has 5 parameters. Parameters: eventStreamId' fromEventNumber' maxCount' resolveLinkTos' requireMaster
Long Parameter List,EventStore.ClientAPI.Messages,ReadStreamEventsCompleted,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Messages\ClientMessage.cs,ReadStreamEventsCompleted,The method has 7 parameters. Parameters: events' result' nextEventNumber' lastEventNumber' isEndOfStream' lastCommitPosition' error
Long Parameter List,EventStore.ClientAPI.Messages,ReadAllEvents,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Messages\ClientMessage.cs,ReadAllEvents,The method has 5 parameters. Parameters: commitPosition' preparePosition' maxCount' resolveLinkTos' requireMaster
Long Parameter List,EventStore.ClientAPI.Messages,ReadAllEventsCompleted,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Messages\ClientMessage.cs,ReadAllEventsCompleted,The method has 7 parameters. Parameters: commitPosition' preparePosition' events' nextCommitPosition' nextPreparePosition' result' error
Long Parameter List,EventStore.ClientAPI.Messages,CreatePersistentSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Messages\ClientMessage.cs,CreatePersistentSubscription,The method has 16 parameters. Parameters: subscriptionGroupName' eventStreamId' resolveLinkTos' startFrom' messageTimeoutMilliseconds' recordStatistics' liveBufferSize' readBatchSize' bufferSize' maxRetryCount' preferRoundRobin' checkpointAfterTime' checkpointMaxCount' checkpointMinCount' subscriberMaxCount' namedConsumerStrategy
Long Parameter List,EventStore.ClientAPI.Messages,UpdatePersistentSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Messages\ClientMessage.cs,UpdatePersistentSubscription,The method has 16 parameters. Parameters: subscriptionGroupName' eventStreamId' resolveLinkTos' startFrom' messageTimeoutMilliseconds' recordStatistics' liveBufferSize' readBatchSize' bufferSize' maxRetryCount' preferRoundRobin' checkpointAfterTime' checkpointMaxCount' checkpointMinCount' subscriberMaxCount' namedConsumerStrategy
Long Parameter List,EventStore.ClientAPI.SystemData,TcpPackage,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\SystemData\TcpPackage.cs,TcpPackage,The method has 6 parameters. Parameters: command' flags' correlationId' login' password' data
Long Parameter List,EventStore.ClientAPI.SystemData,TcpPackage,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\SystemData\TcpPackage.cs,TcpPackage,The method has 6 parameters. Parameters: command' flags' correlationId' login' password' data
Long Parameter List,EventStore.ClientAPI.Transport.Tcp,TcpConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpConnection.cs,CreateConnectingConnection,The method has 8 parameters. Parameters: log' connectionId' remoteEndPoint' connector' connectionTimeout' onConnectionEstablished' onConnectionFailed' onConnectionClosed
Long Parameter List,EventStore.ClientAPI.Transport.Tcp,TcpConnectionLockless,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpConnectionLockless.cs,CreateConnectingConnection,The method has 8 parameters. Parameters: log' connectionId' remoteEndPoint' connector' connectionTimeout' onConnectionEstablished' onConnectionFailed' onConnectionClosed
Long Parameter List,EventStore.ClientAPI.Transport.Tcp,TcpConnectionSsl,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpConnectionSsl.cs,CreateConnectingConnection,The method has 10 parameters. Parameters: log' connectionId' remoteEndPoint' targetHost' validateServer' connector' connectionTimeout' onConnectionEstablished' onConnectionFailed' onConnectionClosed
Long Parameter List,EventStore.ClientAPI.Transport.Tcp,TcpStats,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpStats.cs,TcpStats,The method has 9 parameters. Parameters: connections' sentBytesTotal' receivedBytesTotal' sentBytesSinceLastRunSinceLastRun' receivedBytesSinceLastRun' pendingSend' inSend' pendingReceived' measureTime
Long Parameter List,EventStore.ClientAPI.Transport.Tcp,TcpPackageConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpPackageConnection.cs,TcpPackageConnection,The method has 11 parameters. Parameters: log' remoteEndPoint' connectionId' ssl' targetHost' validateServer' timeout' handlePackage' onError' connectionEstablished' connectionClosed
Long Parameter List,EventStore.ClientAPI.Transport.Tcp,TcpClientConnector,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpClientConnector.cs,ConnectTo,The method has 10 parameters. Parameters: log' connectionId' remoteEndPoint' ssl' targetHost' validateServer' timeout' onConnectionEstablished' onConnectionFailed' onConnectionClosed
Long Parameter List,EventStore.ClientAPI.Transport.Tcp,TcpClientConnector,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpClientConnector.cs,InitConnect,The method has 5 parameters. Parameters: serverEndPoint' onConnectionEstablished' onConnectionFailed' connection' connectionTimeout
Long Identifier,EventStore.ClientAPI,Consts,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\Consts.cs,,The length of the parameter DefaultOperationTimeoutCheckPeriod is 34.
Long Identifier,EventStore.ClientAPI,Consts,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\Consts.cs,,The length of the parameter DefaultMaxClusterDiscoverAttempts is 33.
Long Identifier,EventStore.ClientAPI,Consts,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\Consts.cs,,The length of the parameter DefaultClusterManagerExternalHttpPort is 37.
Long Identifier,EventStore.ClientAPI,Consts,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\Consts.cs,,The length of the parameter CatchUpDefaultMaxPushQueueSize is 30.
Long Identifier,EventStore.ClientAPI.Projections,ProjectionDetails,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\ProjectionDetails.cs,ProjectionDetails,The length of the parameter writePendingEventsBeforeCheckpoint is 34.
Long Identifier,EventStore.ClientAPI.Projections,ProjectionDetails,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\ProjectionDetails.cs,ProjectionDetails,The length of the parameter writePendingEventsAfterCheckpoint is 33.
Long Identifier,EventStore.ClientAPI.Projections,ProjectionDetails,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\ProjectionDetails.cs,,The length of the parameter WritePendingEventsBeforeCheckpoint is 34.
Long Identifier,EventStore.ClientAPI.Projections,ProjectionDetails,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\ProjectionDetails.cs,,The length of the parameter WritePendingEventsAfterCheckpoint is 33.
Long Identifier,EventStore.ClientAPI.Transport.Tcp,TcpStats,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpStats.cs,TcpStats,The length of the parameter sentBytesSinceLastRunSinceLastRun is 33.
Long Statement,EventStore.ClientAPI,ConnectionString,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ConnectionString.cs,Apply,The length of the statement  "                    throw new Exception(string.Format("Can not map field named {0} as type {1} has no translator"' item' fi.FieldType.Name)); " is 121.
Long Statement,EventStore.ClientAPI,EventStorePersistentSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStorePersistentSubscription.cs,StartSubscription,The length of the statement  "            var source = new TaskCompletionSource<PersistentEventStoreSubscription>(TaskCreationOptions.RunContinuationsAsynchronously); " is 124.
Long Statement,EventStore.ClientAPI,EventStorePersistentSubscriptionBase,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStorePersistentSubscriptionBase.cs,ProcessQueue,The length of the statement  "                                          e.Event.OriginalEvent.EventStreamId' e.Event.OriginalEvent.EventNumber' e.Event.OriginalEvent.EventType' e.Event.OriginalEventNumber); " is 134.
Long Statement,EventStore.ClientAPI,DnsClusterSettingsBuilder,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\DnsClusterSettingsBuilder.cs,SetMaxDiscoverAttempts,The length of the statement  "                throw new ArgumentOutOfRangeException("maxDiscoverAttempts"' string.Format("maxDiscoverAttempts value is out of range: {0}. Allowed range: [-1' infinity]."' maxDiscoverAttempts)); " is 179.
Long Statement,EventStore.ClientAPI,GossipSeedClusterSettingsBuilder,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\GossipSeedClusterSettingsBuilder.cs,SetMaxDiscoverAttempts,The length of the statement  "                throw new ArgumentOutOfRangeException("maxDiscoverAttempts"' string.Format("maxDiscoverAttempts value is out of range: {0}. Allowed range: [1' infinity]."' maxDiscoverAttempts)); " is 178.
Long Statement,EventStore.ClientAPI,ConnectionSettingsBuilder,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ConnectionSettingsBuilder.cs,SetMaxDiscoverAttempts,The length of the statement  "                throw new ArgumentOutOfRangeException("maxDiscoverAttempts"' string.Format("maxDiscoverAttempts value is out of range: {0}. Allowed range: [1' infinity]."' maxDiscoverAttempts)); " is 178.
Long Statement,EventStore.ClientAPI,StreamMetadataBuilder,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\StreamMetadataBuilder.cs,Build,The length of the statement  "            return new StreamMetadata(this._maxCount' this._maxAge' this._truncateBefore' this._cacheControl' acl' this._customMetadata); " is 125.
Long Statement,EventStore.ClientAPI,StreamAcl,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\StreamAcl.cs,CheckAndReturnIfSingle,The length of the statement  "                throw new ArgumentException("Underlying stream ACL has multiple roles' which is not supported in old version of this API."); " is 124.
Long Statement,EventStore.ClientAPI,EventStoreConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreConnection.cs,Create,The length of the statement  "                throw new Exception(string.Format("Did not find ConnectTo or GossipSeeds in the connection string.\n'{0}'"' connectionString)); " is 127.
Long Statement,EventStore.ClientAPI,EventStoreConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreConnection.cs,Create,The length of the statement  "                throw new NotSupportedException(string.Format("Setting ConnectTo as well as GossipSeeds on the connection string is currently not supported.\n{0}"' connectionString)); " is 167.
Long Statement,EventStore.ClientAPI,EventStoreConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreConnection.cs,GetSingleNodeIPEndPointFrom,The length of the statement  "                if (entries.Length == 0) throw new Exception(string.Format("Unable to parse IP address or lookup DNS host for '{0}'"' uri.Host)); " is 129.
Long Statement,EventStore.ClientAPI,EventStoreConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreConnection.cs,Create,The length of the statement  "            return new EventStoreNodeConnection(connectionSettings' null' new StaticEndPointDiscoverer(tcpEndPoint' connectionSettings.UseSslConnection)' connectionName); " is 158.
Long Statement,EventStore.ClientAPI,EventStoreCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,StartAsync,The length of the statement  "            if (Verbose) Log.Debug("Catch-up Subscription {0} to {1}: starting..."' SubscriptionName' IsSubscribedToAll ? "<all>" : StreamId); " is 130.
Long Statement,EventStore.ClientAPI,EventStoreCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,Stop,The length of the statement  "            if (Verbose) Log.Debug("Catch-up Subscription {0} to {1}: requesting stop..."' SubscriptionName' IsSubscribedToAll ? "<all>" : StreamId); " is 137.
Long Statement,EventStore.ClientAPI,EventStoreCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,Stop,The length of the statement  "            if (Verbose) Log.Debug("Catch-up Subscription {0} to {1}: unhooking from connection.Connected."' SubscriptionName' IsSubscribedToAll ? "<all>" : StreamId); " is 155.
Long Statement,EventStore.ClientAPI,EventStoreCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,OnReconnect,The length of the statement  "            if (Verbose) Log.Debug("Catch-up Subscription {0} to {1}: recovering after reconnection."' SubscriptionName' IsSubscribedToAll ? "<all>" : StreamId); " is 149.
Long Statement,EventStore.ClientAPI,EventStoreCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,OnReconnect,The length of the statement  "            if (Verbose) Log.Debug("Catch-up Subscription {0} to {1}: unhooking from connection.Connected."' SubscriptionName' IsSubscribedToAll ? "<all>" : StreamId); " is 155.
Long Statement,EventStore.ClientAPI,EventStoreCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,LoadHistoricalEventsAsync,The length of the statement  "            if (Verbose) Log.Debug("Catch-up Subscription {0} to {1}: running..."' SubscriptionName' IsSubscribedToAll ? "<all>" : StreamId); " is 129.
Long Statement,EventStore.ClientAPI,EventStoreCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,LoadHistoricalEventsAsync,The length of the statement  "                if (Verbose) Log.Debug("Catch-up Subscription {0} to {1}: pulling events..."' SubscriptionName' IsSubscribedToAll ? "<all>" : StreamId); " is 136.
Long Statement,EventStore.ClientAPI,EventStoreCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,SubscribeToStreamAsync,The length of the statement  "                if (Verbose) Log.Debug("Catch-up Subscription {0} to {1}: subscribing..."' SubscriptionName' IsSubscribedToAll ? "<all>" : StreamId); " is 133.
Long Statement,EventStore.ClientAPI,EventStoreCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,SubscribeToStreamAsync,The length of the statement  "                    ? await _connection.SubscribeToAllAsync(_resolveLinkTos' EnqueuePushedEvent' ServerSubscriptionDropped' _userCredentials).ConfigureAwait(false) " is 143.
Long Statement,EventStore.ClientAPI,EventStoreCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,SubscribeToStreamAsync,The length of the statement  "                    : await _connection.SubscribeToStreamAsync(StreamId' _resolveLinkTos' EnqueuePushedEvent' ServerSubscriptionDropped' _userCredentials).ConfigureAwait(false); " is 157.
Long Statement,EventStore.ClientAPI,EventStoreCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,ReadMissedHistoricEventsAsync,The length of the statement  "                if (Verbose) Log.Debug("Catch-up Subscription {0} to {1}: pulling events (if left)..."' SubscriptionName' IsSubscribedToAll ? "<all>" : StreamId); " is 146.
Long Statement,EventStore.ClientAPI,EventStoreCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,ReadMissedHistoricEventsAsync,The length of the statement  "                await ReadEventsTillAsync(_connection' _resolveLinkTos' _userCredentials' _subscription.LastCommitPosition' _subscription.LastEventNumber).ConfigureAwait(false); " is 161.
Long Statement,EventStore.ClientAPI,EventStoreCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,StartLiveProcessing,The length of the statement  "            if (Verbose) Log.Debug("Catch-up Subscription {0} to {1}: processing live events..."' SubscriptionName' IsSubscribedToAll ? "<all>" : StreamId); " is 144.
Long Statement,EventStore.ClientAPI,EventStoreCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,StartLiveProcessing,The length of the statement  "            if (Verbose) Log.Debug("Catch-up Subscription {0} to {1}: hooking to connection.Connected"' SubscriptionName' IsSubscribedToAll ? "<all>" : StreamId); " is 150.
Long Statement,EventStore.ClientAPI,EventStoreCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,ProcessLiveQueueAsync,The length of the statement  "                        Log.Debug("Catch-up Subscription {0} to {1} Exception occurred in subscription {1}"' SubscriptionName' IsSubscribedToAll ? "<all>" : StreamId' exc); " is 148.
Long Statement,EventStore.ClientAPI,EventStoreAllCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,ReadEventsInternalAsync,The length of the statement  "                var slice = await connection.ReadAllEventsForwardAsync(_nextReadPosition' ReadBatchSize' resolveLinkTos' userCredentials).ConfigureAwait(false); " is 144.
Long Statement,EventStore.ClientAPI,EventStoreAllCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,ProcessEventsAsync,The length of the statement  "                if (e.OriginalPosition == null) throw new Exception(String.Format("Subscription {0} event came up with no OriginalPosition."' SubscriptionName)); " is 145.
Long Statement,EventStore.ClientAPI,EventStoreStreamCatchUpSubscription,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreCatchUpSubscription.cs,ReadEventsInternalAsync,The length of the statement  "                var slice = await connection.ReadStreamEventsForwardAsync(StreamId' _nextReadEventNumber' ReadBatchSize' resolveLinkTos' userCredentials).ConfigureAwait(false); " is 160.
Long Statement,EventStore.ClientAPI.ClientOperations,ConditionalAppendToStreamOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\ConditionalAppendToStreamOperation.cs,CreateRequestDto,The length of the statement  "            var dtos = _events.Select(x => new ClientMessage.NewEvent(x.EventId.ToByteArray()' x.Type' x.IsJson ? 1 : 0' 0' x.Data' x.Metadata)).ToArray(); " is 143.
Long Statement,EventStore.ClientAPI.ClientOperations,ConditionalAppendToStreamOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\ConditionalAppendToStreamOperation.cs,TransformResponse,The length of the statement  "            return new ConditionalWriteResult(response.LastEventNumber' new Position(response.PreparePosition ?? -1' response.CommitPosition ?? -1)); " is 137.
Long Statement,EventStore.ClientAPI.ClientOperations,ConnectToPersistentSubscriptionOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\ConnectToPersistentSubscriptionOperation.cs,InspectPackage,The length of the statement  "                    DropSubscription(SubscriptionDropReason.AccessDenied' new AccessDeniedException("You do not have access to the stream.")); " is 122.
Long Statement,EventStore.ClientAPI.ClientOperations,CreatePersistentSubscriptionOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\CreatePersistentSubscriptionOperation.cs,CreateRequestDto,The length of the statement  "            return new ClientMessage.CreatePersistentSubscription(_groupName' _stream' _resolveLinkTos' _startFromBeginning' _messageTimeoutMilliseconds' " is 141.
Long Statement,EventStore.ClientAPI.ClientOperations,CreatePersistentSubscriptionOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\CreatePersistentSubscriptionOperation.cs,CreateRequestDto,The length of the statement  "                                    _recordStatistics' _liveBufferSize' _readBatchSize' _bufferSize' _maxRetryCount' _namedConsumerStrategy == SystemConsumerStrategies.RoundRobin' _checkPointAfter' " is 161.
Long Statement,EventStore.ClientAPI.ClientOperations,CreatePersistentSubscriptionOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\CreatePersistentSubscriptionOperation.cs,InspectResponse,The length of the statement  "                    Fail(new InvalidOperationException(String.Format("Subscription group {0} on stream {1} failed '{2}'"' _groupName' _stream' response.Reason))); " is 142.
Long Statement,EventStore.ClientAPI.ClientOperations,CreatePersistentSubscriptionOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\CreatePersistentSubscriptionOperation.cs,InspectResponse,The length of the statement  "                    Fail(new InvalidOperationException(String.Format("Subscription group {0} on stream {1} already exists"' _groupName' _stream))); " is 127.
Long Statement,EventStore.ClientAPI.ClientOperations,DeletePersistentSubscriptionOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\DeletePersistentSubscriptionOperation.cs,InspectResponse,The length of the statement  "                    Fail(new InvalidOperationException(String.Format("Subscription group {0} on stream {1} failed '{2}'"' _groupName' _stream' response.Reason))); " is 142.
Long Statement,EventStore.ClientAPI.ClientOperations,DeletePersistentSubscriptionOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\DeletePersistentSubscriptionOperation.cs,InspectResponse,The length of the statement  "                    Fail(new InvalidOperationException(String.Format("Subscription group {0} on stream {1} does not exist"' _groupName' _stream))); " is 127.
Long Statement,EventStore.ClientAPI.ClientOperations,UpdatePersistentSubscriptionOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\UpdatePersistentSubscriptionOperation.cs,CreateRequestDto,The length of the statement  "            return new ClientMessage.UpdatePersistentSubscription(_groupName' _stream' _resolveLinkTos' _startFromBeginning' _messageTimeoutMilliseconds' " is 141.
Long Statement,EventStore.ClientAPI.ClientOperations,UpdatePersistentSubscriptionOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\UpdatePersistentSubscriptionOperation.cs,CreateRequestDto,The length of the statement  "                _recordStatistics' _liveBufferSize' _readBatchSize' _bufferSize' _maxRetryCount' _namedConsumerStrategy == SystemConsumerStrategies.RoundRobin' _checkPointAfter' " is 161.
Long Statement,EventStore.ClientAPI.ClientOperations,UpdatePersistentSubscriptionOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\UpdatePersistentSubscriptionOperation.cs,InspectResponse,The length of the statement  "                    Fail(new InvalidOperationException(String.Format("Subscription group {0} on stream {1} failed '{2}'"' _groupName' _stream' response.Reason))); " is 142.
Long Statement,EventStore.ClientAPI.ClientOperations,UpdatePersistentSubscriptionOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\UpdatePersistentSubscriptionOperation.cs,InspectResponse,The length of the statement  "                    Fail(new InvalidOperationException(String.Format("Subscription group {0} on stream {1} does not exist"' _groupName' _stream))); " is 127.
Long Statement,EventStore.ClientAPI.ClientOperations,CommitTransactionOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\CommitTransactionOperation.cs,TransformResponse,The length of the statement  "            return new WriteResult(response.LastEventNumber' new Position(response.PreparePosition ?? -1' response.CommitPosition ?? -1)); " is 126.
Long Statement,EventStore.ClientAPI.ClientOperations,SubscriptionOperation<T;TE>,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\SubscriptionOperation.cs,CreateUnsubscriptionPackage,The length of the statement  "            return new TcpPackage(TcpCommand.UnsubscribeFromStream' _correlationId' new ClientMessage.UnsubscribeFromStream().Serialize()); " is 127.
Long Statement,EventStore.ClientAPI.ClientOperations,SubscriptionOperation<T;TE>,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\SubscriptionOperation.cs,InspectPackage,The length of the statement  "                                                     new AccessDeniedException(string.Format("Subscription to '{0}' failed due to access denied."' _streamId == string.Empty ? "<all>" : _streamId))); " is 145.
Long Statement,EventStore.ClientAPI.ClientOperations,SubscriptionOperation<T;TE>,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\SubscriptionOperation.cs,InspectPackage,The length of the statement  "                                                     new ArgumentException(string.Format("Subscription to '{0}' failed due to not found."' _streamId == string.Empty ? "<all>" : _streamId))); " is 137.
Long Statement,EventStore.ClientAPI.ClientOperations,SubscriptionOperation<T;TE>,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\SubscriptionOperation.cs,InspectPackage,The length of the statement  "                            string message = Helper.EatException(() => Helper.UTF8NoBom.GetString(package.Data.Array' package.Data.Offset' package.Data.Count)); " is 132.
Long Statement,EventStore.ClientAPI.ClientOperations,SubscriptionOperation<T;TE>,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\SubscriptionOperation.cs,InspectPackage,The length of the statement  "                            string message = Helper.EatException(() => Helper.UTF8NoBom.GetString(package.Data.Array' package.Data.Offset' package.Data.Count)); " is 132.
Long Statement,EventStore.ClientAPI.ClientOperations,SubscriptionOperation<T;TE>,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\SubscriptionOperation.cs,ConfirmSubscription,The length of the statement  "                throw new ArgumentOutOfRangeException(nameof(lastCommitPosition)' string.Format("Invalid lastCommitPosition {0} on subscription confirmation."' lastCommitPosition)); " is 165.
Long Statement,EventStore.ClientAPI.ClientOperations,SubscriptionOperation<T;TE>,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\SubscriptionOperation.cs,ExecuteActionAsync,The length of the statement  "            if (_actionQueue.Count > _maxQueueSize) DropSubscription(SubscriptionDropReason.UserInitiated' new Exception("client buffer too big")); " is 135.
Long Statement,EventStore.ClientAPI.ClientOperations,OperationBase<TResult;TResponse>,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\OperationBase.cs,InspectNotAuthenticated,The length of the statement  "            string message = Helper.EatException(() => Helper.UTF8NoBom.GetString(package.Data.Array' package.Data.Offset' package.Data.Count)); " is 132.
Long Statement,EventStore.ClientAPI.ClientOperations,OperationBase<TResult;TResponse>,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\OperationBase.cs,InspectBadRequest,The length of the statement  "            string message = Helper.EatException(() => Helper.UTF8NoBom.GetString(package.Data.Array' package.Data.Offset' package.Data.Count)); " is 132.
Long Statement,EventStore.ClientAPI.ClientOperations,OperationBase<TResult;TResponse>,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\OperationBase.cs,InspectUnexpectedCommand,The length of the statement  "            Log.Error("Expected: {0}' Actual: {1}' Flags: {2}' CorrelationId: {3}"' expectedCommand' package.Command' package.Flags' package.CorrelationId); " is 144.
Long Statement,EventStore.ClientAPI.ClientOperations,OperationBase<TResult;TResponse>,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\OperationBase.cs,InspectUnexpectedCommand,The length of the statement  "            return new InspectionResult(InspectionDecision.EndOperation' string.Format("Unexpected command - {0}"' package.Command.ToString())); " is 132.
Long Statement,EventStore.ClientAPI.ClientOperations,StartTransactionOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\StartTransactionOperation.cs,InspectResponse,The length of the statement  "                    var err = string.Format("Start transaction failed due to WrongExpectedVersion. Stream: {0}' Expected version: {1}."' _stream' _expectedVersion); " is 144.
Long Statement,EventStore.ClientAPI.ClientOperations,TransactionalWriteOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\TransactionalWriteOperation.cs,CreateRequestDto,The length of the statement  "            var dtos = _events.Select(x => new ClientMessage.NewEvent(x.EventId.ToByteArray()' x.Type' x.IsJson ? 1 : 0' 0' x.Data' x.Metadata)).ToArray(); " is 143.
Long Statement,EventStore.ClientAPI.ClientOperations,DeleteStreamOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\DeleteStreamOperation.cs,InspectResponse,The length of the statement  "                    var err = string.Format("Delete stream failed due to WrongExpectedVersion. Stream: {0}' Expected version: {1}."' _stream' _expectedVersion); " is 140.
Long Statement,EventStore.ClientAPI.ClientOperations,AppendToStreamOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\AppendToStreamOperation.cs,CreateRequestDto,The length of the statement  "            var dtos = _events.Select(x => new ClientMessage.NewEvent(x.EventId.ToByteArray()' x.Type' x.IsJson ? 1 : 0' 0' x.Data' x.Metadata)).ToArray(); " is 143.
Long Statement,EventStore.ClientAPI.ClientOperations,AppendToStreamOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\AppendToStreamOperation.cs,InspectResponse,The length of the statement  "                    var err = string.Format("Append failed due to WrongExpectedVersion. Stream: {0}' Expected version: {1}' Current version: {2}"' _stream' _expectedVersion' response.CurrentVersion); " is 179.
Long Statement,EventStore.ClientAPI.ClientOperations,AppendToStreamOperation,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ClientOperations\AppendToStreamOperation.cs,TransformResponse,The length of the statement  "            return new WriteResult(response.LastEventNumber' new Position(response.PreparePosition ?? -1' response.CommitPosition ?? -1)); " is 126.
Long Statement,EventStore.ClientAPI.Common.Log,DebugLogger,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Common\Log\DebugLogger.cs,Log,The length of the statement  "            return string.Format("{0} EXCEPTION: {1}\nException: {2}"' level' args.Length == 0 ? format : string.Format(format' args)' exc); " is 128.
Long Statement,EventStore.ClientAPI.Common.Utils.Threading,ManualResetEventSlimExtensions,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Common\Utils\Threading\ManualResetEventSlimExtensions.cs,AsTask,The length of the statement  "            TaskCompletionSource<object> tcs = new TaskCompletionSource<object>(TaskCreationOptions.RunContinuationsAsynchronously); " is 120.
Long Statement,EventStore.ClientAPI.Common.Utils.Threading,TaskExtensions,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Common\Utils\Threading\TaskExtensions.cs,WithTimeout,The length of the statement  "                throw new OperationTimedOutException(string.Format("The operation did not complete within the specified time of {0}"' timeout)); " is 128.
Long Statement,EventStore.ClientAPI.Internal,EventStoreNodeConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreNodeConnection.cs,ReadStreamEventsForwardAsync,The length of the statement  "            if(count > ClientApiConstants.MaxReadSize) throw new ArgumentException(string.Format("Count should be less than {0}. For larger reads you should page."' ClientApiConstants.MaxReadSize)); " is 186.
Long Statement,EventStore.ClientAPI.Internal,EventStoreNodeConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreNodeConnection.cs,ReadStreamEventsBackwardAsync,The length of the statement  "            if (count > ClientApiConstants.MaxReadSize) throw new ArgumentException(string.Format("Count should be less than {0}. For larger reads you should page."' ClientApiConstants.MaxReadSize)); " is 187.
Long Statement,EventStore.ClientAPI.Internal,EventStoreNodeConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreNodeConnection.cs,ReadAllEventsForwardAsync,The length of the statement  "            if (maxCount > ClientApiConstants.MaxReadSize) throw new ArgumentException(string.Format("Count should be less than {0}. For larger reads you should page."' ClientApiConstants.MaxReadSize)); " is 190.
Long Statement,EventStore.ClientAPI.Internal,EventStoreNodeConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreNodeConnection.cs,ReadAllEventsBackwardAsync,The length of the statement  "            if (maxCount > ClientApiConstants.MaxReadSize) throw new ArgumentException(string.Format("Count should be less than {0}. For larger reads you should page."' ClientApiConstants.MaxReadSize)); " is 190.
Long Statement,EventStore.ClientAPI.Internal,EventStoreNodeConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreNodeConnection.cs,SubscribeToStreamFrom,The length of the statement  "            return SubscribeToStreamFrom(stream' lastCheckpoint' settings' eventAppeared' liveProcessingStarted' subscriptionDropped' userCredentials); " is 139.
Long Statement,EventStore.ClientAPI.Internal,EventStoreNodeConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreNodeConnection.cs,SubscribeToAllFrom,The length of the statement  "            return SubscribeToAllFrom(lastCheckpoint' settings'eventAppeared' liveProcessingStarted' subscriptionDropped' userCredentials); " is 127.
Long Statement,EventStore.ClientAPI.Internal,EventStoreNodeConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreNodeConnection.cs,CreatePersistentSubscriptionAsync,The length of the statement  "            var source = new TaskCompletionSource<PersistentSubscriptionCreateResult>(TaskCreationOptions.RunContinuationsAsynchronously); " is 126.
Long Statement,EventStore.ClientAPI.Internal,EventStoreNodeConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreNodeConnection.cs,CreatePersistentSubscriptionAsync,The length of the statement  "            EnqueueOperation(new CreatePersistentSubscriptionOperation(Settings.Log' source' stream' groupName' settings' credentials)); " is 124.
Long Statement,EventStore.ClientAPI.Internal,EventStoreNodeConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreNodeConnection.cs,UpdatePersistentSubscriptionAsync,The length of the statement  "            var source = new TaskCompletionSource<PersistentSubscriptionUpdateResult>(TaskCreationOptions.RunContinuationsAsynchronously); " is 126.
Long Statement,EventStore.ClientAPI.Internal,EventStoreNodeConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreNodeConnection.cs,UpdatePersistentSubscriptionAsync,The length of the statement  "            EnqueueOperation(new UpdatePersistentSubscriptionOperation(Settings.Log' source' stream' groupName' settings' credentials)); " is 124.
Long Statement,EventStore.ClientAPI.Internal,EventStoreNodeConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreNodeConnection.cs,DeletePersistentSubscriptionAsync,The length of the statement  "            var source = new TaskCompletionSource<PersistentSubscriptionDeleteResult>(TaskCreationOptions.RunContinuationsAsynchronously); " is 126.
Long Statement,EventStore.ClientAPI.Internal,EventStoreNodeConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreNodeConnection.cs,SetStreamMetadataAsync,The length of the statement  "                throw new ArgumentException(string.Format("Setting metadata for metastream '{0}' is not supported."' stream)' nameof(stream)); " is 126.
Long Statement,EventStore.ClientAPI.Internal,EventStoreNodeConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreNodeConnection.cs,SetStreamMetadataAsync,The length of the statement  "            var metaevent = new EventData(Guid.NewGuid()' SystemEventTypes.StreamMetadata' true' metadata ?? Empty.ByteArray' null); " is 120.
Long Statement,EventStore.ClientAPI.Internal,EventStoreConnectionLogicHandler,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreConnectionLogicHandler.cs,EstablishTcpConnection,The length of the statement  "            var endPoint = _settings.UseSslConnection ? endPoints.SecureTcpEndPoint ?? endPoints.TcpEndPoint : endPoints.TcpEndPoint; " is 121.
Long Statement,EventStore.ClientAPI.Internal,EventStoreConnectionLogicHandler,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreConnectionLogicHandler.cs,TcpConnectionClosed,The length of the statement  "            LogDebug("TCP connection to [{0}' L{1}' {2:B}] closed."' connection.RemoteEndPoint' connection.LocalEndPoint' connection.ConnectionId); " is 135.
Long Statement,EventStore.ClientAPI.Internal,EventStoreConnectionLogicHandler,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreConnectionLogicHandler.cs,TcpConnectionEstablished,The length of the statement  "                LogDebug("IGNORED (_state {0}' _conn.Id {1:B}' conn.Id {2:B}' conn.closed {3}): TCP connection to [{4}' L{5}] established."' " is 124.
Long Statement,EventStore.ClientAPI.Internal,EventStoreConnectionLogicHandler,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreConnectionLogicHandler.cs,TcpConnectionEstablished,The length of the statement  "            LogDebug("TCP connection to [{0}' L{1}' {2:B}] established."' connection.RemoteEndPoint' connection.LocalEndPoint' connection.ConnectionId); " is 140.
Long Statement,EventStore.ClientAPI.Internal,EventStoreConnectionLogicHandler,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreConnectionLogicHandler.cs,TimerTick,The length of the statement  "                    if (_connectingPhase == ConnectingPhase.Reconnecting && _stopwatch.Elapsed - _reconnInfo.TimeStamp >= _settings.ReconnectionDelay) " is 130.
Long Statement,EventStore.ClientAPI.Internal,EventStoreConnectionLogicHandler,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreConnectionLogicHandler.cs,TimerTick,The length of the statement  "                    if (_connectingPhase == ConnectingPhase.Authentication && _stopwatch.Elapsed - _authInfo.TimeStamp >= _settings.OperationTimeout) " is 129.
Long Statement,EventStore.ClientAPI.Internal,EventStoreConnectionLogicHandler,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreConnectionLogicHandler.cs,TimerTick,The length of the statement  "                    if (_connectingPhase == ConnectingPhase.Identification && _stopwatch.Elapsed - _identifyInfo.TimeStamp >= _settings.OperationTimeout) " is 133.
Long Statement,EventStore.ClientAPI.Internal,EventStoreConnectionLogicHandler,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreConnectionLogicHandler.cs,ManageHeartbeats,The length of the statement  "                var msg = string.Format("EventStoreConnection '{0}': closing TCP connection [{1}' {2}' {3}] due to HEARTBEAT TIMEOUT at pkgNum {4}."' " is 133.
Long Statement,EventStore.ClientAPI.Internal,EventStoreConnectionLogicHandler,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreConnectionLogicHandler.cs,StartOperation,The length of the statement  "                    operation.Fail(new InvalidOperationException(string.Format("EventStoreConnection '{0}' is not active."' _esConnection.ConnectionName))); " is 136.
Long Statement,EventStore.ClientAPI.Internal,EventStoreConnectionLogicHandler,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreConnectionLogicHandler.cs,StartSubscription,The length of the statement  "                    msg.Source.SetException(new InvalidOperationException(string.Format("EventStoreConnection '{0}' is not active."' _esConnection.ConnectionName))); " is 145.
Long Statement,EventStore.ClientAPI.Internal,EventStoreConnectionLogicHandler,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreConnectionLogicHandler.cs,StartSubscription,The length of the statement  "                    LogDebug("StartSubscription {4} {0}' {1}' {2}' {3}."' operation.GetType().Name' operation' msg.MaxRetries' msg.Timeout' _state == ConnectionState.Connected ? "fire" : "enqueue"); " is 178.
Long Statement,EventStore.ClientAPI.Internal,EventStoreConnectionLogicHandler,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreConnectionLogicHandler.cs,StartSubscription,The length of the statement  "                    msg.Source.SetException(new InvalidOperationException(string.Format("EventStoreConnection '{0}' is not active."' _esConnection.ConnectionName))); " is 145.
Long Statement,EventStore.ClientAPI.Internal,EventStoreConnectionLogicHandler,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreConnectionLogicHandler.cs,StartSubscription,The length of the statement  "                    var operation = new ConnectToPersistentSubscriptionOperation(_settings.Log' msg.Source' msg.SubscriptionId' msg.BufferSize' msg.StreamId' " is 137.
Long Statement,EventStore.ClientAPI.Internal,EventStoreConnectionLogicHandler,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreConnectionLogicHandler.cs,StartSubscription,The length of the statement  "                    LogDebug("StartSubscription {4} {0}' {1}' {2}' {3}."' operation.GetType().Name' operation' msg.MaxRetries' msg.Timeout' _state == ConnectionState.Connected ? "fire" : "enqueue"); " is 178.
Long Statement,EventStore.ClientAPI.Internal,EventStoreConnectionLogicHandler,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreConnectionLogicHandler.cs,HandleTcpPackage,The length of the statement  "                LogDebug("IGNORED: HandleTcpPackage connId {0}' package {1}' {2}."' connection.ConnectionId' package.Command' package.CorrelationId); " is 133.
Long Statement,EventStore.ClientAPI.Internal,EventStoreConnectionLogicHandler,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreConnectionLogicHandler.cs,HandleTcpPackage,The length of the statement  "            LogDebug("HandleTcpPackage connId {0}' package {1}' {2}."' _connection.ConnectionId' package.Command' package.CorrelationId); " is 125.
Long Statement,EventStore.ClientAPI.Internal,EventStoreConnectionLogicHandler,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreConnectionLogicHandler.cs,HandleTcpPackage,The length of the statement  "                string message = Helper.EatException(() => Helper.UTF8NoBom.GetString(package.Data.Array' package.Data.Offset' package.Data.Count)); " is 132.
Long Statement,EventStore.ClientAPI.Internal,EventStoreConnectionLogicHandler,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreConnectionLogicHandler.cs,HandleTcpPackage,The length of the statement  "                        string.Format("Bad request received from server. Error: {0}"' string.IsNullOrEmpty(message) ? "<no message>" : message)); " is 121.
Long Statement,EventStore.ClientAPI.Internal,EventStoreConnectionLogicHandler,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreConnectionLogicHandler.cs,HandleTcpPackage,The length of the statement  "                LogDebug("HandleTcpPackage UNMAPPED PACKAGE with CorrelationId {0:B}' Command: {1}"' package.CorrelationId' package.Command); " is 125.
Long Statement,EventStore.ClientAPI.Internal,EventStoreConnectionLogicHandler,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreConnectionLogicHandler.cs,LogDebug,The length of the statement  "            if (_settings.VerboseLogging) _settings.Log.Debug("EventStoreConnection '{0}': {1}."' _esConnection.ConnectionName' parameters.Length == 0 ? message : string.Format(message' parameters)); " is 187.
Long Statement,EventStore.ClientAPI.Internal,EventStoreConnectionLogicHandler,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\EventStoreConnectionLogicHandler.cs,LogInfo,The length of the statement  "            if (_settings.VerboseLogging) _settings.Log.Info("EventStoreConnection '{0}': {1}."' _esConnection.ConnectionName' parameters.Length == 0 ? message : string.Format(message' parameters)); " is 186.
Long Statement,EventStore.ClientAPI.Internal,OperationItem,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\OperationsManager.cs,ToString,The length of the statement  "            return string.Format("Operation {0} ({1:D}): {2}' retry count: {3}' created: {4:HH:mm:ss.fff}' last updated: {5:HH:mm:ss.fff}"' " is 127.
Long Statement,EventStore.ClientAPI.Internal,OperationsManager,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\OperationsManager.cs,CleanUp,The length of the statement  "            var connectionClosedException = new ConnectionClosedException(string.Format("Connection '{0}' was closed."' _connectionName)); " is 126.
Long Statement,EventStore.ClientAPI.Internal,OperationsManager,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\OperationsManager.cs,LogDebug,The length of the statement  "            if (_settings.VerboseLogging) _settings.Log.Debug("EventStoreConnection '{0}': {1}."' _connectionName' parameters.Length == 0 ? message : string.Format(message' parameters)); " is 174.
Long Statement,EventStore.ClientAPI.Internal,SubscriptionsManager,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\SubscriptionsManager.cs,CleanUp,The length of the statement  "            var connectionClosedException = new ConnectionClosedException(string.Format("Connection '{0}' was closed."' _connectionName)); " is 126.
Long Statement,EventStore.ClientAPI.Internal,SubscriptionsManager,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\SubscriptionsManager.cs,CheckTimeoutsAndRetry,The length of the statement  "                else if (subscription.Timeout > TimeSpan.Zero && DateTime.UtcNow - subscription.LastUpdated > _settings.OperationTimeout) " is 121.
Long Statement,EventStore.ClientAPI.Internal,SubscriptionsManager,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\SubscriptionsManager.cs,LogDebug,The length of the statement  "            if (_settings.VerboseLogging) _settings.Log.Debug("EventStoreConnection '{0}': {1}."' _connectionName' parameters.Length == 0 ? message : string.Format(message' parameters)); " is 174.
Long Statement,EventStore.ClientAPI.Internal,ClusterDnsEndPointDiscoverer,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\ClusterDnsEndPointDiscoverer.cs,GetGossipCandidatesFromOldGossip,The length of the statement  "            //_log.Debug("ClusterDnsEndPointDiscoverer: GetGossipCandidatesFromOldGossip' failedTcpEndPoint: {0}."' failedTcpEndPoint); " is 123.
Long Statement,EventStore.ClientAPI.Internal,ClusterDnsEndPointDiscoverer,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\ClusterDnsEndPointDiscoverer.cs,TryGetGossipFrom,The length of the statement  "                        //_log.Debug("ClusterDnsEndPointDiscoverer: Got gossip from [{0}]:\n{1}."' endPoint' string.Join("\n"' result.Members.Select(x => x.ToString()))); " is 146.
Long Statement,EventStore.ClientAPI.Internal,ClusterDnsEndPointDiscoverer,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\ClusterDnsEndPointDiscoverer.cs,TryDetermineBestNode,The length of the statement  "                //_log.Info("Unable to locate suitable node. Gossip info:\n{0}."' string.Join("\n"' members.Select(x => x.ToString()))); " is 120.
Long Statement,EventStore.ClientAPI.Internal,ClusterDnsEndPointDiscoverer,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\ClusterDnsEndPointDiscoverer.cs,TryDetermineBestNode,The length of the statement  "            _log.Info("Discovering: found best choice [{0}'{1}] ({2})."' normTcp' secTcp == null ? "n/a" : secTcp.ToString()' node.State); " is 126.
Long Statement,EventStore.ClientAPI.Projections,ProjectionsClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\ProjectionsClient.cs,Enable,The length of the statement  "            return SendPost(endPoint.ToHttpUrl(httpSchema' "/projection/{0}/command/enable"' name)' string.Empty' userCredentials' HttpStatusCode.OK); " is 138.
Long Statement,EventStore.ClientAPI.Projections,ProjectionsClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\ProjectionsClient.cs,Disable,The length of the statement  "            return SendPost(endPoint.ToHttpUrl(httpSchema' "/projection/{0}/command/disable"' name)' string.Empty' userCredentials' HttpStatusCode.OK); " is 139.
Long Statement,EventStore.ClientAPI.Projections,ProjectionsClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\ProjectionsClient.cs,Abort,The length of the statement  "            return SendPost(endPoint.ToHttpUrl(httpSchema' "/projection/{0}/command/abort"' name)' string.Empty' userCredentials' HttpStatusCode.OK); " is 137.
Long Statement,EventStore.ClientAPI.Projections,ProjectionsClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\ProjectionsClient.cs,CreateOneTime,The length of the statement  "            return SendPost(endPoint.ToHttpUrl(httpSchema' "/projections/onetime?type=JS")' query' userCredentials' HttpStatusCode.Created); " is 128.
Long Statement,EventStore.ClientAPI.Projections,ProjectionsClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\ProjectionsClient.cs,CreateContinuous,The length of the statement  "            return SendPost(endPoint.ToHttpUrl(httpSchema' "/projections/continuous?name={0}&type=JS&emit=1&trackemittedstreams={1}"' name' trackEmitted)' " is 142.
Long Statement,EventStore.ClientAPI.Projections,ProjectionsClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\ProjectionsClient.cs,GetPartitionStateAsync,The length of the statement  "            return SendGet(endPoint.ToHttpUrl(httpSchema' "/projection/{0}/state?partition={1}"' name' partition)' userCredentials' HttpStatusCode.OK); " is 139.
Long Statement,EventStore.ClientAPI.Projections,ProjectionsClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\ProjectionsClient.cs,GetPartitionResultAsync,The length of the statement  "            return SendGet(endPoint.ToHttpUrl(httpSchema' "/projection/{0}/result?partition={1}"' name' partition)' userCredentials' HttpStatusCode.OK); " is 140.
Long Statement,EventStore.ClientAPI.Projections,ProjectionsClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\ProjectionsClient.cs,UpdateQuery,The length of the statement  "            return SendPut(endPoint.ToHttpUrl(httpSchema' "/projection/{0}/query?type=JS"' name)' query' userCredentials' HttpStatusCode.OK); " is 129.
Long Statement,EventStore.ClientAPI.Projections,ProjectionsClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\ProjectionsClient.cs,Delete,The length of the statement  "            return SendDelete(endPoint.ToHttpUrl(httpSchema' "/projection/{0}?deleteEmittedStreams={1}"' name' deleteEmittedStreams)' userCredentials' HttpStatusCode.OK); " is 158.
Long Statement,EventStore.ClientAPI.Transport.Http,EndpointExtensions,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Http\EndpointExtensions.cs,ToHttpUrl,The length of the statement  "                return CreateHttpUrl(schema' ipEndPoint.Address.ToString()' ipEndPoint.Port' rawUrl != null ? rawUrl.TrimStart('/') : string.Empty); " is 132.
Long Statement,EventStore.ClientAPI.Transport.Http,EndpointExtensions,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Http\EndpointExtensions.cs,ToHttpUrl,The length of the statement  "                return CreateHttpUrl(schema' dnsEndpoint.Host' dnsEndpoint.Port' rawUrl != null ? rawUrl.TrimStart('/') : string.Empty); " is 120.
Long Statement,EventStore.ClientAPI.Transport.Http,EndpointExtensions,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Http\EndpointExtensions.cs,ToHttpUrl,The length of the statement  "                return CreateHttpUrl(schema' ipEndPoint.Address.ToString()' ipEndPoint.Port' string.Format(formatString.TrimStart('/')' args)); " is 127.
Long Statement,EventStore.ClientAPI.UserManagement,UsersClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\UserManagement\UsersClient.cs,Enable,The length of the statement  "            return SendPost(endPoint.ToHttpUrl(EndpointExtensions.HTTP_SCHEMA' "/users/{0}/command/enable"' login)' string.Empty' userCredentials' HttpStatusCode.OK); " is 154.
Long Statement,EventStore.ClientAPI.UserManagement,UsersClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\UserManagement\UsersClient.cs,Disable,The length of the statement  "            return SendPost(endPoint.ToHttpUrl(EndpointExtensions.HTTP_SCHEMA' "/users/{0}/command/disable"' login)' string.Empty' userCredentials' HttpStatusCode.OK); " is 155.
Long Statement,EventStore.ClientAPI.UserManagement,UsersClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\UserManagement\UsersClient.cs,Delete,The length of the statement  "            return SendDelete(endPoint.ToHttpUrl(EndpointExtensions.HTTP_SCHEMA' "/users/{0}"' login)' userCredentials' HttpStatusCode.OK); " is 127.
Long Statement,EventStore.ClientAPI.UserManagement,UsersClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\UserManagement\UsersClient.cs,GetCurrentUser,The length of the statement  "            return SendGet(endPoint.ToHttpUrl(EndpointExtensions.HTTP_SCHEMA' "/users/$current")' userCredentials' HttpStatusCode.OK) " is 121.
Long Statement,EventStore.ClientAPI.UserManagement,UsersClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\UserManagement\UsersClient.cs,GetUser,The length of the statement  "            return SendGet(endPoint.ToHttpUrl(EndpointExtensions.HTTP_SCHEMA' "/users/{0}"' login)' userCredentials' HttpStatusCode.OK) " is 123.
Long Statement,EventStore.ClientAPI.UserManagement,UsersClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\UserManagement\UsersClient.cs,CreateUser,The length of the statement  "            return SendPost(endPoint.ToHttpUrl(EndpointExtensions.HTTP_SCHEMA' "/users/")' userJson' userCredentials' HttpStatusCode.Created); " is 130.
Long Statement,EventStore.ClientAPI.UserManagement,UsersClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\UserManagement\UsersClient.cs,UpdateUser,The length of the statement  "            return SendPut(endPoint.ToHttpUrl(EndpointExtensions.HTTP_SCHEMA' "/users/{0}"' login)' updatedUser.ToJson()' userCredentials' HttpStatusCode.OK); " is 146.
Long Statement,EventStore.ClientAPI.UserManagement,UsersClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\UserManagement\UsersClient.cs,ChangePassword,The length of the statement  "            return SendPost(endPoint.ToHttpUrl(EndpointExtensions.HTTP_SCHEMA' "/users/{0}/command/change-password"' login)' changePasswordDetails.ToJson()' userCredentials' HttpStatusCode.OK); " is 181.
Long Statement,EventStore.ClientAPI.UserManagement,UsersClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\UserManagement\UsersClient.cs,ResetPassword,The length of the statement  "            return SendPost(endPoint.ToHttpUrl(EndpointExtensions.HTTP_SCHEMA' "/users/{0}/command/reset-password"' login)' resetPasswordDetails.ToJson()' userCredentials' HttpStatusCode.OK); " is 179.
Long Statement,EventStore.ClientAPI.Messages,MemberInfoDto,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Messages\ClusterMessages.cs,ToString,The length of the statement  "                return string.Format("VND {0:B} <{1}> [{2}' {3}:{4}' {5}' {6}:{7}' {8}' {9}:{10}' {11}:{12}] {13}/{14}/{15}/E{16}@{17}:{18:B} | {19:yyyy-MM-dd HH:mm:ss.fff}"' " is 158.
Long Statement,EventStore.ClientAPI.SystemData,TcpPackage,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\SystemData\TcpPackage.cs,AsByteArray,The length of the statement  "                if (loginLen > 255) throw new ArgumentException(string.Format("Login serialized length should be less than 256 bytes (but is {0})."' loginLen)); " is 144.
Long Statement,EventStore.ClientAPI.SystemData,TcpPackage,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\SystemData\TcpPackage.cs,AsByteArray,The length of the statement  "                if (passLen > 255) throw new ArgumentException(string.Format("Password serialized length should be less than 256 bytes (but is {0})."' passLen)); " is 145.
Long Statement,EventStore.ClientAPI.Transport.Tcp,TcpConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpConnection.cs,ProcessReceive,The length of the statement  "                CloseInternal(socketArgs.SocketError' socketArgs.SocketError != SocketError.Success ? "Socket receive error" : "Socket closed"); " is 128.
Long Statement,EventStore.ClientAPI.Transport.Tcp,TcpConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpConnection.cs,CloseInternal,The length of the statement  "            _log.Info("ClientAPI {0} closed [{1:HH:mm:ss.fff}: N{2}' L{3}' {4:B}]:"' GetType().Name' DateTime.UtcNow' RemoteEndPoint' LocalEndPoint' _connectionId); " is 152.
Long Statement,EventStore.ClientAPI.Transport.Tcp,LengthPrefixMessageFramer,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\LengthPrefixFramer.cs,Parse,The length of the statement  "                        throw new PackageFramingException(string.Format("Package size is out of bounds: {0} (max: {1}). This is likely an exceptionally large message (reading too many things) or there is a problem with the framing if working on a new client."' _packageLength' _maxPackageSize)); " is 271.
Long Statement,EventStore.ClientAPI.Transport.Tcp,TcpConnectionLockless,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpConnectionLockless.cs,ProcessReceive,The length of the statement  "                CloseInternal(socketArgs.SocketError' socketArgs.SocketError != SocketError.Success ? "Socket receive error" : "Socket closed"); " is 128.
Long Statement,EventStore.ClientAPI.Transport.Tcp,TcpConnectionLockless,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpConnectionLockless.cs,CloseInternal,The length of the statement  "            _log.Info("ClientAPI {0} closed [{1:HH:mm:ss.fff}: N{2}' L{3}' {4:B}]:"' GetType().Name' DateTime.UtcNow' RemoteEndPoint' LocalEndPoint' _connectionId); " is 152.
Long Statement,EventStore.ClientAPI.Transport.Tcp,TcpConnectionMonitor,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpConnectionMonitor.cs,CheckMissingReceiveCallback,The length of the statement  "                _log.Error("# {0} {1}ms since last Receive started. No completion callback received' but socket status is READY_FOR_RECEIVE"' " is 125.
Long Statement,EventStore.ClientAPI.Transport.Tcp,TcpConnectionMonitor,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpConnectionMonitor.cs,CheckMissingSendCallback,The length of the statement  "                    "# {0} {1}ms since last send started. No completion callback received' but socket status is READY_FOR_SEND. In send: {2}"' " is 122.
Long Statement,EventStore.ClientAPI.Transport.Tcp,TcpConnectionSsl,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpConnectionSsl.cs,CloseInternal,The length of the statement  "            _log.Info("ClientAPI {0} closed [{1:HH:mm:ss.fff}: S{2}' L{3}' {4:B}]:"' GetType().Name' DateTime.UtcNow' RemoteEndPoint' LocalEndPoint' _connectionId); " is 152.
Long Statement,EventStore.ClientAPI.Transport.Tcp,TcpPackageConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpPackageConnection.cs,OnRawDataReceived,The length of the statement  "                _log.Error(exc' "TcpPackageConnection: [{0}' L{1}' {2:B}]. Invalid TCP frame received."' RemoteEndPoint' LocalEndPoint' ConnectionId); " is 134.
Complex Conditional,EventStore.ClientAPI.Transport.Tcp,TcpConnectionSsl,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpConnectionSsl.cs,TrySend,The conditional expression  "_isSending || _sendQueue.Count == 0 || _sslStream == null || !_isAuthenticated"  is complex.
Empty Catch Block,EventStore.ClientAPI.Internal,ClusterDnsEndPointDiscoverer,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\ClusterDnsEndPointDiscoverer.cs,TryGetGossipFrom,The method has an empty catch block.
Empty Catch Block,EventStore.ClientAPI.Common.Utils,Helper,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Common\Utils\Helper.cs,EatException,The method has an empty catch block.
Magic Number,EventStore.ClientAPI,ConnectionString,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ConnectionString.cs,ConnectionString,The following statement contains a magic number: translators = new Dictionary<Type' Func<string' object>>()              {                  {typeof(int)' x => int.Parse(x' CultureInfo.InvariantCulture)}'                  {typeof(decimal)' x=>decimal.Parse(x' CultureInfo.InvariantCulture)}'                  {typeof(string)' x => x}'                  {typeof(bool)' x=>bool.Parse(x)}'                  {typeof(long)' x=>long.Parse(x' CultureInfo.InvariantCulture)}'                  {typeof(byte)' x=>byte.Parse(x' CultureInfo.InvariantCulture)}'                  {typeof(double)' x=>double.Parse(x' CultureInfo.InvariantCulture)}'                  {typeof(float)' x=>float.Parse(x' CultureInfo.InvariantCulture)}'                  {typeof(TimeSpan)' x => TimeSpan.FromMilliseconds(int.Parse(x' CultureInfo.InvariantCulture))}'                  {typeof(GossipSeed[])' x => x.Split(''').Select(q =>                  {                      try                      {                          var pieces = q.Trim().Split(':');                          if (pieces.Length != 2) throw new Exception("Could not split IP address from port.");                                                        return new GossipSeed(new IPEndPoint(IPAddress.Parse(pieces[0])' int.Parse(pieces[1])));                      }                      catch (Exception ex)                      {                          throw new Exception(string.Format("Gossip seed {0} is not in correct format"' q)' ex);                      }                  }).ToArray()                  }'                  {typeof(UserCredentials)' x =>                  {                      try                      {                          var pieces = x.Trim().Split(':');                          if (pieces.Length != 2) throw new Exception("Could not split into username and password.");                                                    return new UserCredentials(pieces[0]' pieces[1]);                      }                      catch (Exception ex)                      {                          throw new Exception(string.Format("User credentials {0} is not in correct format. Expected format is username:password."' x)' ex);                      }                  }                  }              };
Magic Number,EventStore.ClientAPI,ConnectionString,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ConnectionString.cs,ConnectionString,The following statement contains a magic number: translators = new Dictionary<Type' Func<string' object>>()              {                  {typeof(int)' x => int.Parse(x' CultureInfo.InvariantCulture)}'                  {typeof(decimal)' x=>decimal.Parse(x' CultureInfo.InvariantCulture)}'                  {typeof(string)' x => x}'                  {typeof(bool)' x=>bool.Parse(x)}'                  {typeof(long)' x=>long.Parse(x' CultureInfo.InvariantCulture)}'                  {typeof(byte)' x=>byte.Parse(x' CultureInfo.InvariantCulture)}'                  {typeof(double)' x=>double.Parse(x' CultureInfo.InvariantCulture)}'                  {typeof(float)' x=>float.Parse(x' CultureInfo.InvariantCulture)}'                  {typeof(TimeSpan)' x => TimeSpan.FromMilliseconds(int.Parse(x' CultureInfo.InvariantCulture))}'                  {typeof(GossipSeed[])' x => x.Split(''').Select(q =>                  {                      try                      {                          var pieces = q.Trim().Split(':');                          if (pieces.Length != 2) throw new Exception("Could not split IP address from port.");                                                        return new GossipSeed(new IPEndPoint(IPAddress.Parse(pieces[0])' int.Parse(pieces[1])));                      }                      catch (Exception ex)                      {                          throw new Exception(string.Format("Gossip seed {0} is not in correct format"' q)' ex);                      }                  }).ToArray()                  }'                  {typeof(UserCredentials)' x =>                  {                      try                      {                          var pieces = x.Trim().Split(':');                          if (pieces.Length != 2) throw new Exception("Could not split into username and password.");                                                    return new UserCredentials(pieces[0]' pieces[1]);                      }                      catch (Exception ex)                      {                          throw new Exception(string.Format("User credentials {0} is not in correct format. Expected format is username:password."' x)' ex);                      }                  }                  }              };
Magic Number,EventStore.ClientAPI,ConnectionString,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\ConnectionString.cs,WithSpaces,The following statement contains a magic number: StringBuilder nameWithSpaces = new StringBuilder(32);
Magic Number,EventStore.ClientAPI,EventStorePersistentSubscriptionBase,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStorePersistentSubscriptionBase.cs,Acknowledge,The following statement contains a magic number: if(ids.Length > 2000) throw new ArgumentOutOfRangeException("events"' "events is limited to 2000 to ack at a time");
Magic Number,EventStore.ClientAPI,EventStorePersistentSubscriptionBase,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStorePersistentSubscriptionBase.cs,Acknowledge,The following statement contains a magic number: if (ids.Length > 2000) throw new ArgumentOutOfRangeException("events"' "events is limited to 2000 to ack at a time");
Magic Number,EventStore.ClientAPI,EventStorePersistentSubscriptionBase,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStorePersistentSubscriptionBase.cs,Fail,The following statement contains a magic number: if (ids.Length > 2000) throw new ArgumentOutOfRangeException("events"' "events is limited to 2000 to ack at a time");
Magic Number,EventStore.ClientAPI,PersistentSubscriptionSettings,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\PersistentSubscriptionSettings.cs,Create,The following statement contains a magic number: return new PersistentSubscriptionSettingsBuilder(false'                                                               -1'                                                               false'                                                               TimeSpan.FromSeconds(30)'                                                               500'                                                               500'                                                               10'                                                               20'                                                               TimeSpan.FromSeconds(2)'                                                               10'                                                               1000'                                                               0'                                                               SystemConsumerStrategies.RoundRobin);
Magic Number,EventStore.ClientAPI,PersistentSubscriptionSettings,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\PersistentSubscriptionSettings.cs,Create,The following statement contains a magic number: return new PersistentSubscriptionSettingsBuilder(false'                                                               -1'                                                               false'                                                               TimeSpan.FromSeconds(30)'                                                               500'                                                               500'                                                               10'                                                               20'                                                               TimeSpan.FromSeconds(2)'                                                               10'                                                               1000'                                                               0'                                                               SystemConsumerStrategies.RoundRobin);
Magic Number,EventStore.ClientAPI,PersistentSubscriptionSettings,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\PersistentSubscriptionSettings.cs,Create,The following statement contains a magic number: return new PersistentSubscriptionSettingsBuilder(false'                                                               -1'                                                               false'                                                               TimeSpan.FromSeconds(30)'                                                               500'                                                               500'                                                               10'                                                               20'                                                               TimeSpan.FromSeconds(2)'                                                               10'                                                               1000'                                                               0'                                                               SystemConsumerStrategies.RoundRobin);
Magic Number,EventStore.ClientAPI,PersistentSubscriptionSettings,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\PersistentSubscriptionSettings.cs,Create,The following statement contains a magic number: return new PersistentSubscriptionSettingsBuilder(false'                                                               -1'                                                               false'                                                               TimeSpan.FromSeconds(30)'                                                               500'                                                               500'                                                               10'                                                               20'                                                               TimeSpan.FromSeconds(2)'                                                               10'                                                               1000'                                                               0'                                                               SystemConsumerStrategies.RoundRobin);
Magic Number,EventStore.ClientAPI,PersistentSubscriptionSettings,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\PersistentSubscriptionSettings.cs,Create,The following statement contains a magic number: return new PersistentSubscriptionSettingsBuilder(false'                                                               -1'                                                               false'                                                               TimeSpan.FromSeconds(30)'                                                               500'                                                               500'                                                               10'                                                               20'                                                               TimeSpan.FromSeconds(2)'                                                               10'                                                               1000'                                                               0'                                                               SystemConsumerStrategies.RoundRobin);
Magic Number,EventStore.ClientAPI,PersistentSubscriptionSettings,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\PersistentSubscriptionSettings.cs,Create,The following statement contains a magic number: return new PersistentSubscriptionSettingsBuilder(false'                                                               -1'                                                               false'                                                               TimeSpan.FromSeconds(30)'                                                               500'                                                               500'                                                               10'                                                               20'                                                               TimeSpan.FromSeconds(2)'                                                               10'                                                               1000'                                                               0'                                                               SystemConsumerStrategies.RoundRobin);
Magic Number,EventStore.ClientAPI,PersistentSubscriptionSettings,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\PersistentSubscriptionSettings.cs,Create,The following statement contains a magic number: return new PersistentSubscriptionSettingsBuilder(false'                                                               -1'                                                               false'                                                               TimeSpan.FromSeconds(30)'                                                               500'                                                               500'                                                               10'                                                               20'                                                               TimeSpan.FromSeconds(2)'                                                               10'                                                               1000'                                                               0'                                                               SystemConsumerStrategies.RoundRobin);
Magic Number,EventStore.ClientAPI,PersistentSubscriptionSettings,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\PersistentSubscriptionSettings.cs,Create,The following statement contains a magic number: return new PersistentSubscriptionSettingsBuilder(false'                                                               -1'                                                               false'                                                               TimeSpan.FromSeconds(30)'                                                               500'                                                               500'                                                               10'                                                               20'                                                               TimeSpan.FromSeconds(2)'                                                               10'                                                               1000'                                                               0'                                                               SystemConsumerStrategies.RoundRobin);
Magic Number,EventStore.ClientAPI,EventStoreConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreConnection.cs,GetSingleNodeIPEndPointFrom,The following statement contains a magic number: var port = uri.IsDefaultPort ? 2113 : uri.Port;
Magic Number,EventStore.ClientAPI,EventStoreConnection,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\EventStoreConnection.cs,GetCredentialFromUri,The following statement contains a magic number: if (pieces.Length != 2) throw new Exception(string.Format("Unable to parse user information '{0}'"' uri.UserInfo));
Magic Number,EventStore.ClientAPI,Position,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Position.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (CommitPosition.GetHashCode()*397) ^ PreparePosition.GetHashCode();              }
Magic Number,EventStore.ClientAPI.Internal,ClusterDnsEndPointDiscoverer,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Internal\ClusterDnsEndPointDiscoverer.cs,DiscoverAsync,The following statement contains a magic number: return Task.Factory.StartNew(() =>              {                  for (int attempt = 1; attempt <= _maxDiscoverAttempts; ++attempt)                  {                      //_log.Info("Discovering cluster. Attempt {0}/{1}..."' attempt' _maxDiscoverAttempts);                      try                      {                          var endPoints = DiscoverEndPoint(failedTcpEndPoint);                          if (endPoints != null)                          {                              _log.Info("Discovering attempt {0}/{1} successful: best candidate is {2}."' attempt' _maxDiscoverAttempts' endPoints);                              return endPoints.Value;                          }                            _log.Info("Discovering attempt {0}/{1} failed: no candidate found."' attempt' _maxDiscoverAttempts);                      }                      catch (Exception exc)                      {                          _log.Info("Discovering attempt {0}/{1} failed with error: {2}."' attempt' _maxDiscoverAttempts' exc);                      }                        Thread.Sleep(500);                  }                  throw new ClusterException(string.Format("Failed to discover candidate in {0} attempts."' _maxDiscoverAttempts));              });
Magic Number,EventStore.ClientAPI.Projections,QueryManager,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\QueryManager.cs,DelayPollingAsync,The following statement contains a magic number: var delayInMilliseconds = initialPollingDelay.TotalMilliseconds * (Math.Pow(2' attempts) - 1);
Magic Number,EventStore.ClientAPI.Projections,ProjectionsClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Projections\ProjectionsClient.cs,SendPost,The following statement contains a magic number: _client.Post(url'                           content'                           "application/json"'                           userCredentials'                           response =>                           {                               if (response.HttpStatusCode == expectedCode)                                   source.SetResult(null);                               else if (response.HttpStatusCode == 409)                                   source.SetException(new ProjectionCommandConflictException(response.HttpStatusCode' response.StatusDescription));                               else                                   source.SetException(new ProjectionCommandFailedException(                                                               response.HttpStatusCode'                                                               string.Format("Server returned {0} ({1}) for POST on {2}"'                                                                             response.HttpStatusCode'                                                                             response.StatusDescription'                                                                             url)));                           }'                           source.SetException);
Magic Number,EventStore.ClientAPI.Common,SystemStreams,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Common\SystemNames.cs,OriginalStreamOf,The following statement contains a magic number: return metastreamId.Substring(2);
Magic Number,EventStore.ClientAPI.Common.Utils,Helper,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Common\Utils\Helper.cs,FormatBinaryDump,The following statement contains a magic number: for (int row = 0' rows = (logBulk.Count + 15) / 16; row < rows; ++row)              {                  sb.AppendFormat("{0:000000}:"' row * 16);                  for (int i = 0; i < 16; ++i' ++cur)                  {                      if (cur >= len)                          sb.Append("   ");                      else                          sb.AppendFormat(" {0:X2}"' logBulk.Array[logBulk.Offset + cur]);                  }                  sb.Append("  | ");                  cur -= 16;                  for (int i = 0; i < 16; ++i' ++cur)                  {                      if (cur < len)                      {                          var b = (char)logBulk.Array[logBulk.Offset + cur];                          sb.Append(char.IsControl(b) ? '.' : b);                      }                  }                  sb.AppendLine();              }
Magic Number,EventStore.ClientAPI.Common.Utils,Helper,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Common\Utils\Helper.cs,FormatBinaryDump,The following statement contains a magic number: for (int row = 0' rows = (logBulk.Count + 15) / 16; row < rows; ++row)              {                  sb.AppendFormat("{0:000000}:"' row * 16);                  for (int i = 0; i < 16; ++i' ++cur)                  {                      if (cur >= len)                          sb.Append("   ");                      else                          sb.AppendFormat(" {0:X2}"' logBulk.Array[logBulk.Offset + cur]);                  }                  sb.Append("  | ");                  cur -= 16;                  for (int i = 0; i < 16; ++i' ++cur)                  {                      if (cur < len)                      {                          var b = (char)logBulk.Array[logBulk.Offset + cur];                          sb.Append(char.IsControl(b) ? '.' : b);                      }                  }                  sb.AppendLine();              }
Magic Number,EventStore.ClientAPI.Common.Utils,Helper,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Common\Utils\Helper.cs,FormatBinaryDump,The following statement contains a magic number: for (int row = 0' rows = (logBulk.Count + 15) / 16; row < rows; ++row)              {                  sb.AppendFormat("{0:000000}:"' row * 16);                  for (int i = 0; i < 16; ++i' ++cur)                  {                      if (cur >= len)                          sb.Append("   ");                      else                          sb.AppendFormat(" {0:X2}"' logBulk.Array[logBulk.Offset + cur]);                  }                  sb.Append("  | ");                  cur -= 16;                  for (int i = 0; i < 16; ++i' ++cur)                  {                      if (cur < len)                      {                          var b = (char)logBulk.Array[logBulk.Offset + cur];                          sb.Append(char.IsControl(b) ? '.' : b);                      }                  }                  sb.AppendLine();              }
Magic Number,EventStore.ClientAPI.Common.Utils,Helper,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Common\Utils\Helper.cs,FormatBinaryDump,The following statement contains a magic number: for (int row = 0' rows = (logBulk.Count + 15) / 16; row < rows; ++row)              {                  sb.AppendFormat("{0:000000}:"' row * 16);                  for (int i = 0; i < 16; ++i' ++cur)                  {                      if (cur >= len)                          sb.Append("   ");                      else                          sb.AppendFormat(" {0:X2}"' logBulk.Array[logBulk.Offset + cur]);                  }                  sb.Append("  | ");                  cur -= 16;                  for (int i = 0; i < 16; ++i' ++cur)                  {                      if (cur < len)                      {                          var b = (char)logBulk.Array[logBulk.Offset + cur];                          sb.Append(char.IsControl(b) ? '.' : b);                      }                  }                  sb.AppendLine();              }
Magic Number,EventStore.ClientAPI.Common.Utils,Helper,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Common\Utils\Helper.cs,FormatBinaryDump,The following statement contains a magic number: for (int row = 0' rows = (logBulk.Count + 15) / 16; row < rows; ++row)              {                  sb.AppendFormat("{0:000000}:"' row * 16);                  for (int i = 0; i < 16; ++i' ++cur)                  {                      if (cur >= len)                          sb.Append("   ");                      else                          sb.AppendFormat(" {0:X2}"' logBulk.Array[logBulk.Offset + cur]);                  }                  sb.Append("  | ");                  cur -= 16;                  for (int i = 0; i < 16; ++i' ++cur)                  {                      if (cur < len)                      {                          var b = (char)logBulk.Array[logBulk.Offset + cur];                          sb.Append(char.IsControl(b) ? '.' : b);                      }                  }                  sb.AppendLine();              }
Magic Number,EventStore.ClientAPI.Common.Utils,Helper,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Common\Utils\Helper.cs,FormatBinaryDump,The following statement contains a magic number: for (int row = 0' rows = (logBulk.Count + 15) / 16; row < rows; ++row)              {                  sb.AppendFormat("{0:000000}:"' row * 16);                  for (int i = 0; i < 16; ++i' ++cur)                  {                      if (cur >= len)                          sb.Append("   ");                      else                          sb.AppendFormat(" {0:X2}"' logBulk.Array[logBulk.Offset + cur]);                  }                  sb.Append("  | ");                  cur -= 16;                  for (int i = 0; i < 16; ++i' ++cur)                  {                      if (cur < len)                      {                          var b = (char)logBulk.Array[logBulk.Offset + cur];                          sb.Append(char.IsControl(b) ? '.' : b);                      }                  }                  sb.AppendLine();              }
Magic Number,EventStore.ClientAPI.Transport.Http,HttpAsyncClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Http\HttpAsyncClient.cs,HttpAsyncClient,The following statement contains a magic number: ServicePointManager.MaxServicePointIdleTime = 10000;
Magic Number,EventStore.ClientAPI.Transport.Http,HttpAsyncClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Http\HttpAsyncClient.cs,HttpAsyncClient,The following statement contains a magic number: ServicePointManager.DefaultConnectionLimit = 800;
Magic Number,EventStore.ClientAPI.UserManagement,UsersClient,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\UserManagement\UsersClient.cs,SendPost,The following statement contains a magic number: _client.Post(url'                  content'                  "application/json"'                  userCredentials'                  response =>                  {                      if (response.HttpStatusCode == expectedCode)                          source.SetResult(null);                      else if (response.HttpStatusCode == 409)                          source.SetException(new UserCommandConflictException(response.HttpStatusCode' response.StatusDescription));                      else                          source.SetException(new UserCommandFailedException(                              response.HttpStatusCode'                              string.Format("Server returned {0} ({1}) for POST on {2}"'                                  response.HttpStatusCode'                                  response.StatusDescription'                                  url)));                  }'                  source.SetException);
Magic Number,EventStore.ClientAPI.SystemData,TcpPackage,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\SystemData\TcpPackage.cs,FromArraySegment,The following statement contains a magic number: var guidBytes = new byte[16];
Magic Number,EventStore.ClientAPI.SystemData,TcpPackage,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\SystemData\TcpPackage.cs,FromArraySegment,The following statement contains a magic number: Buffer.BlockCopy(data.Array' data.Offset + CorrelationOffset' guidBytes' 0' 16);
Magic Number,EventStore.ClientAPI.SystemData,TcpPackage,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\SystemData\TcpPackage.cs,AsByteArray,The following statement contains a magic number: if ((Flags & TcpFlags.Authenticated) != 0)              {                  var loginLen = Helper.UTF8NoBom.GetByteCount(Login);                  var passLen = Helper.UTF8NoBom.GetByteCount(Password);                  if (loginLen > 255) throw new ArgumentException(string.Format("Login serialized length should be less than 256 bytes (but is {0})."' loginLen));                  if (passLen > 255) throw new ArgumentException(string.Format("Password serialized length should be less than 256 bytes (but is {0})."' passLen));                    var res = new byte[MandatorySize + 2 + loginLen + passLen + Data.Count];                  res[CommandOffset] = (byte)Command;                  res[FlagsOffset] = (byte)Flags;                  Buffer.BlockCopy(CorrelationId.ToByteArray()' 0' res' CorrelationOffset' 16);                    res[AuthOffset] = (byte)loginLen;                  Helper.UTF8NoBom.GetBytes(Login' 0' Login.Length' res' AuthOffset + 1);                  res[AuthOffset + 1 + loginLen] = (byte)passLen;                  Helper.UTF8NoBom.GetBytes(Password' 0' Password.Length' res' AuthOffset + 1 + loginLen + 1);                    Buffer.BlockCopy(Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);                  return res;              }              else              {                  var res = new byte[MandatorySize + Data.Count];                  res[CommandOffset] = (byte)Command;                  res[FlagsOffset] = (byte)Flags;                  Buffer.BlockCopy(CorrelationId.ToByteArray()' 0' res' CorrelationOffset' 16);                  Buffer.BlockCopy(Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);                  return res;              }
Magic Number,EventStore.ClientAPI.SystemData,TcpPackage,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\SystemData\TcpPackage.cs,AsByteArray,The following statement contains a magic number: if ((Flags & TcpFlags.Authenticated) != 0)              {                  var loginLen = Helper.UTF8NoBom.GetByteCount(Login);                  var passLen = Helper.UTF8NoBom.GetByteCount(Password);                  if (loginLen > 255) throw new ArgumentException(string.Format("Login serialized length should be less than 256 bytes (but is {0})."' loginLen));                  if (passLen > 255) throw new ArgumentException(string.Format("Password serialized length should be less than 256 bytes (but is {0})."' passLen));                    var res = new byte[MandatorySize + 2 + loginLen + passLen + Data.Count];                  res[CommandOffset] = (byte)Command;                  res[FlagsOffset] = (byte)Flags;                  Buffer.BlockCopy(CorrelationId.ToByteArray()' 0' res' CorrelationOffset' 16);                    res[AuthOffset] = (byte)loginLen;                  Helper.UTF8NoBom.GetBytes(Login' 0' Login.Length' res' AuthOffset + 1);                  res[AuthOffset + 1 + loginLen] = (byte)passLen;                  Helper.UTF8NoBom.GetBytes(Password' 0' Password.Length' res' AuthOffset + 1 + loginLen + 1);                    Buffer.BlockCopy(Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);                  return res;              }              else              {                  var res = new byte[MandatorySize + Data.Count];                  res[CommandOffset] = (byte)Command;                  res[FlagsOffset] = (byte)Flags;                  Buffer.BlockCopy(CorrelationId.ToByteArray()' 0' res' CorrelationOffset' 16);                  Buffer.BlockCopy(Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);                  return res;              }
Magic Number,EventStore.ClientAPI.SystemData,TcpPackage,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\SystemData\TcpPackage.cs,AsByteArray,The following statement contains a magic number: if ((Flags & TcpFlags.Authenticated) != 0)              {                  var loginLen = Helper.UTF8NoBom.GetByteCount(Login);                  var passLen = Helper.UTF8NoBom.GetByteCount(Password);                  if (loginLen > 255) throw new ArgumentException(string.Format("Login serialized length should be less than 256 bytes (but is {0})."' loginLen));                  if (passLen > 255) throw new ArgumentException(string.Format("Password serialized length should be less than 256 bytes (but is {0})."' passLen));                    var res = new byte[MandatorySize + 2 + loginLen + passLen + Data.Count];                  res[CommandOffset] = (byte)Command;                  res[FlagsOffset] = (byte)Flags;                  Buffer.BlockCopy(CorrelationId.ToByteArray()' 0' res' CorrelationOffset' 16);                    res[AuthOffset] = (byte)loginLen;                  Helper.UTF8NoBom.GetBytes(Login' 0' Login.Length' res' AuthOffset + 1);                  res[AuthOffset + 1 + loginLen] = (byte)passLen;                  Helper.UTF8NoBom.GetBytes(Password' 0' Password.Length' res' AuthOffset + 1 + loginLen + 1);                    Buffer.BlockCopy(Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);                  return res;              }              else              {                  var res = new byte[MandatorySize + Data.Count];                  res[CommandOffset] = (byte)Command;                  res[FlagsOffset] = (byte)Flags;                  Buffer.BlockCopy(CorrelationId.ToByteArray()' 0' res' CorrelationOffset' 16);                  Buffer.BlockCopy(Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);                  return res;              }
Magic Number,EventStore.ClientAPI.SystemData,TcpPackage,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\SystemData\TcpPackage.cs,AsByteArray,The following statement contains a magic number: if ((Flags & TcpFlags.Authenticated) != 0)              {                  var loginLen = Helper.UTF8NoBom.GetByteCount(Login);                  var passLen = Helper.UTF8NoBom.GetByteCount(Password);                  if (loginLen > 255) throw new ArgumentException(string.Format("Login serialized length should be less than 256 bytes (but is {0})."' loginLen));                  if (passLen > 255) throw new ArgumentException(string.Format("Password serialized length should be less than 256 bytes (but is {0})."' passLen));                    var res = new byte[MandatorySize + 2 + loginLen + passLen + Data.Count];                  res[CommandOffset] = (byte)Command;                  res[FlagsOffset] = (byte)Flags;                  Buffer.BlockCopy(CorrelationId.ToByteArray()' 0' res' CorrelationOffset' 16);                    res[AuthOffset] = (byte)loginLen;                  Helper.UTF8NoBom.GetBytes(Login' 0' Login.Length' res' AuthOffset + 1);                  res[AuthOffset + 1 + loginLen] = (byte)passLen;                  Helper.UTF8NoBom.GetBytes(Password' 0' Password.Length' res' AuthOffset + 1 + loginLen + 1);                    Buffer.BlockCopy(Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);                  return res;              }              else              {                  var res = new byte[MandatorySize + Data.Count];                  res[CommandOffset] = (byte)Command;                  res[FlagsOffset] = (byte)Flags;                  Buffer.BlockCopy(CorrelationId.ToByteArray()' 0' res' CorrelationOffset' 16);                  Buffer.BlockCopy(Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);                  return res;              }
Magic Number,EventStore.ClientAPI.SystemData,TcpPackage,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\SystemData\TcpPackage.cs,AsByteArray,The following statement contains a magic number: if ((Flags & TcpFlags.Authenticated) != 0)              {                  var loginLen = Helper.UTF8NoBom.GetByteCount(Login);                  var passLen = Helper.UTF8NoBom.GetByteCount(Password);                  if (loginLen > 255) throw new ArgumentException(string.Format("Login serialized length should be less than 256 bytes (but is {0})."' loginLen));                  if (passLen > 255) throw new ArgumentException(string.Format("Password serialized length should be less than 256 bytes (but is {0})."' passLen));                    var res = new byte[MandatorySize + 2 + loginLen + passLen + Data.Count];                  res[CommandOffset] = (byte)Command;                  res[FlagsOffset] = (byte)Flags;                  Buffer.BlockCopy(CorrelationId.ToByteArray()' 0' res' CorrelationOffset' 16);                    res[AuthOffset] = (byte)loginLen;                  Helper.UTF8NoBom.GetBytes(Login' 0' Login.Length' res' AuthOffset + 1);                  res[AuthOffset + 1 + loginLen] = (byte)passLen;                  Helper.UTF8NoBom.GetBytes(Password' 0' Password.Length' res' AuthOffset + 1 + loginLen + 1);                    Buffer.BlockCopy(Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);                  return res;              }              else              {                  var res = new byte[MandatorySize + Data.Count];                  res[CommandOffset] = (byte)Command;                  res[FlagsOffset] = (byte)Flags;                  Buffer.BlockCopy(CorrelationId.ToByteArray()' 0' res' CorrelationOffset' 16);                  Buffer.BlockCopy(Data.Array' Data.Offset' res' res.Length - Data.Count' Data.Count);                  return res;              }
Magic Number,EventStore.ClientAPI.Transport.Tcp,LengthPrefixMessageFramer,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\LengthPrefixFramer.cs,Parse,The following statement contains a magic number: for (int i = bytes.Offset; i < bytes.Offset + bytes.Count; i++)              {                  if (_headerBytes < HeaderLength)                  {                      _packageLength |= (data[i] << (_headerBytes * 8)); // little-endian order                      ++_headerBytes;                      if (_headerBytes != HeaderLength) continue;                      if (_packageLength <= 0 || _packageLength > _maxPackageSize)                          throw new PackageFramingException(string.Format("Package size is out of bounds: {0} (max: {1}). This is likely an exceptionally large message (reading too many things) or there is a problem with the framing if working on a new client."' _packageLength' _maxPackageSize));                        _messageBuffer = new byte[_packageLength];                  }                  else                  {                      int copyCnt = Math.Min(bytes.Count + bytes.Offset - i' _packageLength - _bufferIndex);                      Buffer.BlockCopy(bytes.Array' i' _messageBuffer' _bufferIndex' copyCnt);                      _bufferIndex += copyCnt;                      i += copyCnt - 1;                        if (_bufferIndex == _packageLength)                      {                          if (_receivedHandler != null)                              _receivedHandler(new ArraySegment<byte>(_messageBuffer' 0' _bufferIndex));                          _messageBuffer = null;                          _headerBytes = 0;                          _packageLength = 0;                          _bufferIndex = 0;                      }                  }              }
Magic Number,EventStore.ClientAPI.Transport.Tcp,LengthPrefixMessageFramer,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\LengthPrefixFramer.cs,FrameData,The following statement contains a magic number: yield return new ArraySegment<byte>(                  new[] { (byte)length' (byte)(length >> 8)' (byte)(length >> 16)' (byte)(length >> 24) });
Magic Number,EventStore.ClientAPI.Transport.Tcp,LengthPrefixMessageFramer,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\LengthPrefixFramer.cs,FrameData,The following statement contains a magic number: yield return new ArraySegment<byte>(                  new[] { (byte)length' (byte)(length >> 8)' (byte)(length >> 16)' (byte)(length >> 24) });
Magic Number,EventStore.ClientAPI.Transport.Tcp,LengthPrefixMessageFramer,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\LengthPrefixFramer.cs,FrameData,The following statement contains a magic number: yield return new ArraySegment<byte>(                  new[] { (byte)length' (byte)(length >> 8)' (byte)(length >> 16)' (byte)(length >> 24) });
Magic Number,EventStore.ClientAPI.Transport.Tcp,TcpConnectionMonitor,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpConnectionMonitor.cs,CheckMissingReceiveCallback,The following statement contains a magic number: bool missingReceiveCallback = inReceive && isReadyForReceive && sinceLastReceive > 500;
Magic Number,EventStore.ClientAPI.Transport.Tcp,TcpConnectionMonitor,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpConnectionMonitor.cs,CheckMissingSendCallback,The following statement contains a magic number: bool missingSendCallback = inSend && isReadyForSend && sinceLastSend > 500;
Magic Number,EventStore.ClientAPI.Transport.Tcp,TcpConnectionMonitor,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpConnectionMonitor.cs,CheckPendingSend,The following statement contains a magic number: if (pendingSendBytes > 128 * 1024)              {                  _log.Info("# {0} {1}kb pending send"' connection' pendingSendBytes / 1024);              }
Magic Number,EventStore.ClientAPI.Transport.Tcp,TcpConnectionMonitor,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpConnectionMonitor.cs,CheckPendingSend,The following statement contains a magic number: if (pendingSendBytes > 128 * 1024)              {                  _log.Info("# {0} {1}kb pending send"' connection' pendingSendBytes / 1024);              }
Magic Number,EventStore.ClientAPI.Transport.Tcp,TcpConnectionMonitor,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpConnectionMonitor.cs,CheckPendingSend,The following statement contains a magic number: if (pendingSendBytes > 128 * 1024)              {                  _log.Info("# {0} {1}kb pending send"' connection' pendingSendBytes / 1024);              }
Magic Number,EventStore.ClientAPI.Transport.Tcp,TcpConnectionMonitor,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpConnectionMonitor.cs,CheckPendingReceived,The following statement contains a magic number: if (pendingReceivedBytes > 128 * 1024)              {                  _log.Info("# {0} {1}kb are not dispatched"' connection' pendingReceivedBytes / 1024);              }
Magic Number,EventStore.ClientAPI.Transport.Tcp,TcpConnectionMonitor,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpConnectionMonitor.cs,CheckPendingReceived,The following statement contains a magic number: if (pendingReceivedBytes > 128 * 1024)              {                  _log.Info("# {0} {1}kb are not dispatched"' connection' pendingReceivedBytes / 1024);              }
Magic Number,EventStore.ClientAPI.Transport.Tcp,TcpConnectionMonitor,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpConnectionMonitor.cs,CheckPendingReceived,The following statement contains a magic number: if (pendingReceivedBytes > 128 * 1024)              {                  _log.Info("# {0} {1}kb are not dispatched"' connection' pendingReceivedBytes / 1024);              }
Magic Number,EventStore.ClientAPI.Transport.Tcp,TcpStats,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpStats.cs,TcpStats,The following statement contains a magic number: SendingSpeed = MeasureTime.TotalSeconds < 0.00001 ? 0 : SentBytesSinceLastRun / MeasureTime.TotalSeconds;
Magic Number,EventStore.ClientAPI.Transport.Tcp,TcpStats,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\Transport.Tcp\TcpStats.cs,TcpStats,The following statement contains a magic number: ReceivingSpeed = MeasureTime.TotalSeconds < 0.00001 ? 0 : ReceivedBytesSinceLastRun / MeasureTime.TotalSeconds;
Missing Default,EventStore.ClientAPI,StreamMetadata,C:\repos\EventStore_EventStore\src\EventStore.ClientAPI\StreamMetadata.cs,ReadAcl,The following switch statement is missing a default case: switch (name)                  {                      case SystemMetadata.AclRead: read = ReadRoles(reader); break;                      case SystemMetadata.AclWrite: write = ReadRoles(reader); break;                      case SystemMetadata.AclDelete: delete = ReadRoles(reader); break;                      case SystemMetadata.AclMetaRead: metaRead = ReadRoles(reader); break;                      case SystemMetadata.AclMetaWrite: metaWrite = ReadRoles(reader); break;                  }
