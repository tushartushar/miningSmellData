Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Reign.Input.WinForms,Keyboard,C:\repos\reignstudios_ReignSDK\Platforms\Win32\Reign.Input.WinForms\Keyboard.cs,Keyboard,The following statement contains a magic number: keys = new bool[256];
Magic Number,Reign.Input.WinForms,Keyboard,C:\repos\reignstudios_ReignSDK\Platforms\Win32\Reign.Input.WinForms\Keyboard.cs,Keyboard,The following statement contains a magic number: buttons = new Button[256];
Magic Number,Reign.Input.WinForms,Keyboard,C:\repos\reignstudios_ReignSDK\Platforms\Win32\Reign.Input.WinForms\Keyboard.cs,Keyboard,The following statement contains a magic number: for (int i = 0; i != 256; ++i)  			{  				buttons[i] = new Button();  			}
Magic Number,Reign.Input.WinForms,Keyboard,C:\repos\reignstudios_ReignSDK\Platforms\Win32\Reign.Input.WinForms\Keyboard.cs,Update,The following statement contains a magic number: for (int i = 0; i != 256; ++i)  			{  				buttons[i].Update(keys[i]);  			}
Missing Default,Reign.Input.WinForms,Keyboard,C:\repos\reignstudios_ReignSDK\Platforms\Win32\Reign.Input.WinForms\Keyboard.cs,UpdateEvent,The following switch statement is missing a default case: switch (theEvent.Type)  			{  				case ApplicationEventTypes.KeyDown:  					keys[theEvent.KeyCode] = true;  					break;  				  				case ApplicationEventTypes.KeyUp:  					keys[theEvent.KeyCode] = false;  					break;  			}
Missing Default,Reign.Input.WinForms,Mouse,C:\repos\reignstudios_ReignSDK\Platforms\Win32\Reign.Input.WinForms\Mouse.cs,UpdateEvent,The following switch statement is missing a default case: switch (theEvent.Type)  			{  				case ApplicationEventTypes.LeftMouseDown:  					leftOn = true;  					currentPosition = theEvent.CursorPosition;  					break;    				case ApplicationEventTypes.LeftMouseUp:  					leftOn = false;  					currentPosition = theEvent.CursorPosition;  					break;  				  				case ApplicationEventTypes.MiddleMouseDown:  					 middleOn = true;  					 currentPosition = theEvent.CursorPosition;  					 break;    				case ApplicationEventTypes.MiddleMouseUp:  					middleOn = false;  					currentPosition = theEvent.CursorPosition;  					break;  				  				case ApplicationEventTypes.RightMouseDown:  					rightOn = true;  					currentPosition = theEvent.CursorPosition;  					break;    				case ApplicationEventTypes.RightMouseUp:  					rightOn = false;  					currentPosition = theEvent.CursorPosition;  					break;    				case ApplicationEventTypes.MouseMove:  					currentPosition = theEvent.CursorPosition;  					break;  				  				case ApplicationEventTypes.ScrollWheel:  					scrollWheelVelocity = theEvent.ScrollWheelVelocity;  					scollWheelChanged = true;  					currentPosition = theEvent.CursorPosition;  					break;  			}
