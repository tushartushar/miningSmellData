Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,Connect,The length of the statement  "            this.formatComboBox.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBox1_SelectionChanged); " is 130.
Magic Number,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,openButton_Click,The following statement contains a magic number: if (dlg.ShowDialog(this).Value)  			{  				try  				{  					if (new FileInfo(dlg.FileName).Extension.ToLower() == ".bmpc")  					{  						var image = new ImageBMPC(dlg.FileName' false' null);  						var writable = new WriteableBitmap(image.Size.Width' image.Size.Height' 96' 96' PixelFormats.Bgra32' null);  						int stride = (image.Size.Width * 32 + 7) / 8;    						// Flip RB Color bits  						var data = new byte[image.Mipmaps[0].Data.LongLength];  						image.Mipmaps[0].Data.CopyTo(data' 0);  						for (int i2 = 0; i2 != data.Length; i2 += 4)  						{  							byte c = data[i2];  							data[i2] = data[i2+2];  							data[i2+2] = c;  						}    						writable.WritePixels(new Int32Rect(0' 0' image.Size.Width' image.Size.Height)' data' stride' 0);  						dstImage.Source = writable;  					}  					else  					{  						// Load binary data  						var bitmap = new BitmapImage(new Uri(dlg.FileName' UriKind.Absolute));  						int stride = (bitmap.PixelWidth * bitmap.Format.BitsPerPixel + 7) / 8;  						srcData = new byte[bitmap.PixelWidth * stride];  						dstData = new byte[bitmap.PixelWidth * stride];  						bitmap.CopyPixels(srcData' stride' 0);  						bitmap.CopyPixels(dstData' stride' 0);    						// Get image atributes  						var ext = new FileInfo(dlg.FileName).Extension.ToLower();  						width = bitmap.PixelWidth;  						height = bitmap.PixelHeight;    						// Display images  						var w = new WriteableBitmap(bitmap.PixelWidth' bitmap.PixelHeight' 96' 96' PixelFormats.Bgra32' null);  						w.WritePixels(new Int32Rect(0' 0' bitmap.PixelWidth' bitmap.PixelHeight)' srcData' stride' 0);  						dstImage.Source = w;  						srcImage.Source = bitmap;    						processesImage();  					}  				}  				catch (Exception ex)  				{  					MessageBox.Show(ex.Message);  				}  			}
Magic Number,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,openButton_Click,The following statement contains a magic number: if (dlg.ShowDialog(this).Value)  			{  				try  				{  					if (new FileInfo(dlg.FileName).Extension.ToLower() == ".bmpc")  					{  						var image = new ImageBMPC(dlg.FileName' false' null);  						var writable = new WriteableBitmap(image.Size.Width' image.Size.Height' 96' 96' PixelFormats.Bgra32' null);  						int stride = (image.Size.Width * 32 + 7) / 8;    						// Flip RB Color bits  						var data = new byte[image.Mipmaps[0].Data.LongLength];  						image.Mipmaps[0].Data.CopyTo(data' 0);  						for (int i2 = 0; i2 != data.Length; i2 += 4)  						{  							byte c = data[i2];  							data[i2] = data[i2+2];  							data[i2+2] = c;  						}    						writable.WritePixels(new Int32Rect(0' 0' image.Size.Width' image.Size.Height)' data' stride' 0);  						dstImage.Source = writable;  					}  					else  					{  						// Load binary data  						var bitmap = new BitmapImage(new Uri(dlg.FileName' UriKind.Absolute));  						int stride = (bitmap.PixelWidth * bitmap.Format.BitsPerPixel + 7) / 8;  						srcData = new byte[bitmap.PixelWidth * stride];  						dstData = new byte[bitmap.PixelWidth * stride];  						bitmap.CopyPixels(srcData' stride' 0);  						bitmap.CopyPixels(dstData' stride' 0);    						// Get image atributes  						var ext = new FileInfo(dlg.FileName).Extension.ToLower();  						width = bitmap.PixelWidth;  						height = bitmap.PixelHeight;    						// Display images  						var w = new WriteableBitmap(bitmap.PixelWidth' bitmap.PixelHeight' 96' 96' PixelFormats.Bgra32' null);  						w.WritePixels(new Int32Rect(0' 0' bitmap.PixelWidth' bitmap.PixelHeight)' srcData' stride' 0);  						dstImage.Source = w;  						srcImage.Source = bitmap;    						processesImage();  					}  				}  				catch (Exception ex)  				{  					MessageBox.Show(ex.Message);  				}  			}
Magic Number,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,openButton_Click,The following statement contains a magic number: if (dlg.ShowDialog(this).Value)  			{  				try  				{  					if (new FileInfo(dlg.FileName).Extension.ToLower() == ".bmpc")  					{  						var image = new ImageBMPC(dlg.FileName' false' null);  						var writable = new WriteableBitmap(image.Size.Width' image.Size.Height' 96' 96' PixelFormats.Bgra32' null);  						int stride = (image.Size.Width * 32 + 7) / 8;    						// Flip RB Color bits  						var data = new byte[image.Mipmaps[0].Data.LongLength];  						image.Mipmaps[0].Data.CopyTo(data' 0);  						for (int i2 = 0; i2 != data.Length; i2 += 4)  						{  							byte c = data[i2];  							data[i2] = data[i2+2];  							data[i2+2] = c;  						}    						writable.WritePixels(new Int32Rect(0' 0' image.Size.Width' image.Size.Height)' data' stride' 0);  						dstImage.Source = writable;  					}  					else  					{  						// Load binary data  						var bitmap = new BitmapImage(new Uri(dlg.FileName' UriKind.Absolute));  						int stride = (bitmap.PixelWidth * bitmap.Format.BitsPerPixel + 7) / 8;  						srcData = new byte[bitmap.PixelWidth * stride];  						dstData = new byte[bitmap.PixelWidth * stride];  						bitmap.CopyPixels(srcData' stride' 0);  						bitmap.CopyPixels(dstData' stride' 0);    						// Get image atributes  						var ext = new FileInfo(dlg.FileName).Extension.ToLower();  						width = bitmap.PixelWidth;  						height = bitmap.PixelHeight;    						// Display images  						var w = new WriteableBitmap(bitmap.PixelWidth' bitmap.PixelHeight' 96' 96' PixelFormats.Bgra32' null);  						w.WritePixels(new Int32Rect(0' 0' bitmap.PixelWidth' bitmap.PixelHeight)' srcData' stride' 0);  						dstImage.Source = w;  						srcImage.Source = bitmap;    						processesImage();  					}  				}  				catch (Exception ex)  				{  					MessageBox.Show(ex.Message);  				}  			}
Magic Number,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,openButton_Click,The following statement contains a magic number: if (dlg.ShowDialog(this).Value)  			{  				try  				{  					if (new FileInfo(dlg.FileName).Extension.ToLower() == ".bmpc")  					{  						var image = new ImageBMPC(dlg.FileName' false' null);  						var writable = new WriteableBitmap(image.Size.Width' image.Size.Height' 96' 96' PixelFormats.Bgra32' null);  						int stride = (image.Size.Width * 32 + 7) / 8;    						// Flip RB Color bits  						var data = new byte[image.Mipmaps[0].Data.LongLength];  						image.Mipmaps[0].Data.CopyTo(data' 0);  						for (int i2 = 0; i2 != data.Length; i2 += 4)  						{  							byte c = data[i2];  							data[i2] = data[i2+2];  							data[i2+2] = c;  						}    						writable.WritePixels(new Int32Rect(0' 0' image.Size.Width' image.Size.Height)' data' stride' 0);  						dstImage.Source = writable;  					}  					else  					{  						// Load binary data  						var bitmap = new BitmapImage(new Uri(dlg.FileName' UriKind.Absolute));  						int stride = (bitmap.PixelWidth * bitmap.Format.BitsPerPixel + 7) / 8;  						srcData = new byte[bitmap.PixelWidth * stride];  						dstData = new byte[bitmap.PixelWidth * stride];  						bitmap.CopyPixels(srcData' stride' 0);  						bitmap.CopyPixels(dstData' stride' 0);    						// Get image atributes  						var ext = new FileInfo(dlg.FileName).Extension.ToLower();  						width = bitmap.PixelWidth;  						height = bitmap.PixelHeight;    						// Display images  						var w = new WriteableBitmap(bitmap.PixelWidth' bitmap.PixelHeight' 96' 96' PixelFormats.Bgra32' null);  						w.WritePixels(new Int32Rect(0' 0' bitmap.PixelWidth' bitmap.PixelHeight)' srcData' stride' 0);  						dstImage.Source = w;  						srcImage.Source = bitmap;    						processesImage();  					}  				}  				catch (Exception ex)  				{  					MessageBox.Show(ex.Message);  				}  			}
Magic Number,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,openButton_Click,The following statement contains a magic number: if (dlg.ShowDialog(this).Value)  			{  				try  				{  					if (new FileInfo(dlg.FileName).Extension.ToLower() == ".bmpc")  					{  						var image = new ImageBMPC(dlg.FileName' false' null);  						var writable = new WriteableBitmap(image.Size.Width' image.Size.Height' 96' 96' PixelFormats.Bgra32' null);  						int stride = (image.Size.Width * 32 + 7) / 8;    						// Flip RB Color bits  						var data = new byte[image.Mipmaps[0].Data.LongLength];  						image.Mipmaps[0].Data.CopyTo(data' 0);  						for (int i2 = 0; i2 != data.Length; i2 += 4)  						{  							byte c = data[i2];  							data[i2] = data[i2+2];  							data[i2+2] = c;  						}    						writable.WritePixels(new Int32Rect(0' 0' image.Size.Width' image.Size.Height)' data' stride' 0);  						dstImage.Source = writable;  					}  					else  					{  						// Load binary data  						var bitmap = new BitmapImage(new Uri(dlg.FileName' UriKind.Absolute));  						int stride = (bitmap.PixelWidth * bitmap.Format.BitsPerPixel + 7) / 8;  						srcData = new byte[bitmap.PixelWidth * stride];  						dstData = new byte[bitmap.PixelWidth * stride];  						bitmap.CopyPixels(srcData' stride' 0);  						bitmap.CopyPixels(dstData' stride' 0);    						// Get image atributes  						var ext = new FileInfo(dlg.FileName).Extension.ToLower();  						width = bitmap.PixelWidth;  						height = bitmap.PixelHeight;    						// Display images  						var w = new WriteableBitmap(bitmap.PixelWidth' bitmap.PixelHeight' 96' 96' PixelFormats.Bgra32' null);  						w.WritePixels(new Int32Rect(0' 0' bitmap.PixelWidth' bitmap.PixelHeight)' srcData' stride' 0);  						dstImage.Source = w;  						srcImage.Source = bitmap;    						processesImage();  					}  				}  				catch (Exception ex)  				{  					MessageBox.Show(ex.Message);  				}  			}
Magic Number,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,openButton_Click,The following statement contains a magic number: if (dlg.ShowDialog(this).Value)  			{  				try  				{  					if (new FileInfo(dlg.FileName).Extension.ToLower() == ".bmpc")  					{  						var image = new ImageBMPC(dlg.FileName' false' null);  						var writable = new WriteableBitmap(image.Size.Width' image.Size.Height' 96' 96' PixelFormats.Bgra32' null);  						int stride = (image.Size.Width * 32 + 7) / 8;    						// Flip RB Color bits  						var data = new byte[image.Mipmaps[0].Data.LongLength];  						image.Mipmaps[0].Data.CopyTo(data' 0);  						for (int i2 = 0; i2 != data.Length; i2 += 4)  						{  							byte c = data[i2];  							data[i2] = data[i2+2];  							data[i2+2] = c;  						}    						writable.WritePixels(new Int32Rect(0' 0' image.Size.Width' image.Size.Height)' data' stride' 0);  						dstImage.Source = writable;  					}  					else  					{  						// Load binary data  						var bitmap = new BitmapImage(new Uri(dlg.FileName' UriKind.Absolute));  						int stride = (bitmap.PixelWidth * bitmap.Format.BitsPerPixel + 7) / 8;  						srcData = new byte[bitmap.PixelWidth * stride];  						dstData = new byte[bitmap.PixelWidth * stride];  						bitmap.CopyPixels(srcData' stride' 0);  						bitmap.CopyPixels(dstData' stride' 0);    						// Get image atributes  						var ext = new FileInfo(dlg.FileName).Extension.ToLower();  						width = bitmap.PixelWidth;  						height = bitmap.PixelHeight;    						// Display images  						var w = new WriteableBitmap(bitmap.PixelWidth' bitmap.PixelHeight' 96' 96' PixelFormats.Bgra32' null);  						w.WritePixels(new Int32Rect(0' 0' bitmap.PixelWidth' bitmap.PixelHeight)' srcData' stride' 0);  						dstImage.Source = w;  						srcImage.Source = bitmap;    						processesImage();  					}  				}  				catch (Exception ex)  				{  					MessageBox.Show(ex.Message);  				}  			}
Magic Number,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,openButton_Click,The following statement contains a magic number: if (dlg.ShowDialog(this).Value)  			{  				try  				{  					if (new FileInfo(dlg.FileName).Extension.ToLower() == ".bmpc")  					{  						var image = new ImageBMPC(dlg.FileName' false' null);  						var writable = new WriteableBitmap(image.Size.Width' image.Size.Height' 96' 96' PixelFormats.Bgra32' null);  						int stride = (image.Size.Width * 32 + 7) / 8;    						// Flip RB Color bits  						var data = new byte[image.Mipmaps[0].Data.LongLength];  						image.Mipmaps[0].Data.CopyTo(data' 0);  						for (int i2 = 0; i2 != data.Length; i2 += 4)  						{  							byte c = data[i2];  							data[i2] = data[i2+2];  							data[i2+2] = c;  						}    						writable.WritePixels(new Int32Rect(0' 0' image.Size.Width' image.Size.Height)' data' stride' 0);  						dstImage.Source = writable;  					}  					else  					{  						// Load binary data  						var bitmap = new BitmapImage(new Uri(dlg.FileName' UriKind.Absolute));  						int stride = (bitmap.PixelWidth * bitmap.Format.BitsPerPixel + 7) / 8;  						srcData = new byte[bitmap.PixelWidth * stride];  						dstData = new byte[bitmap.PixelWidth * stride];  						bitmap.CopyPixels(srcData' stride' 0);  						bitmap.CopyPixels(dstData' stride' 0);    						// Get image atributes  						var ext = new FileInfo(dlg.FileName).Extension.ToLower();  						width = bitmap.PixelWidth;  						height = bitmap.PixelHeight;    						// Display images  						var w = new WriteableBitmap(bitmap.PixelWidth' bitmap.PixelHeight' 96' 96' PixelFormats.Bgra32' null);  						w.WritePixels(new Int32Rect(0' 0' bitmap.PixelWidth' bitmap.PixelHeight)' srcData' stride' 0);  						dstImage.Source = w;  						srcImage.Source = bitmap;    						processesImage();  					}  				}  				catch (Exception ex)  				{  					MessageBox.Show(ex.Message);  				}  			}
Magic Number,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,openButton_Click,The following statement contains a magic number: if (dlg.ShowDialog(this).Value)  			{  				try  				{  					if (new FileInfo(dlg.FileName).Extension.ToLower() == ".bmpc")  					{  						var image = new ImageBMPC(dlg.FileName' false' null);  						var writable = new WriteableBitmap(image.Size.Width' image.Size.Height' 96' 96' PixelFormats.Bgra32' null);  						int stride = (image.Size.Width * 32 + 7) / 8;    						// Flip RB Color bits  						var data = new byte[image.Mipmaps[0].Data.LongLength];  						image.Mipmaps[0].Data.CopyTo(data' 0);  						for (int i2 = 0; i2 != data.Length; i2 += 4)  						{  							byte c = data[i2];  							data[i2] = data[i2+2];  							data[i2+2] = c;  						}    						writable.WritePixels(new Int32Rect(0' 0' image.Size.Width' image.Size.Height)' data' stride' 0);  						dstImage.Source = writable;  					}  					else  					{  						// Load binary data  						var bitmap = new BitmapImage(new Uri(dlg.FileName' UriKind.Absolute));  						int stride = (bitmap.PixelWidth * bitmap.Format.BitsPerPixel + 7) / 8;  						srcData = new byte[bitmap.PixelWidth * stride];  						dstData = new byte[bitmap.PixelWidth * stride];  						bitmap.CopyPixels(srcData' stride' 0);  						bitmap.CopyPixels(dstData' stride' 0);    						// Get image atributes  						var ext = new FileInfo(dlg.FileName).Extension.ToLower();  						width = bitmap.PixelWidth;  						height = bitmap.PixelHeight;    						// Display images  						var w = new WriteableBitmap(bitmap.PixelWidth' bitmap.PixelHeight' 96' 96' PixelFormats.Bgra32' null);  						w.WritePixels(new Int32Rect(0' 0' bitmap.PixelWidth' bitmap.PixelHeight)' srcData' stride' 0);  						dstImage.Source = w;  						srcImage.Source = bitmap;    						processesImage();  					}  				}  				catch (Exception ex)  				{  					MessageBox.Show(ex.Message);  				}  			}
Magic Number,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,openButton_Click,The following statement contains a magic number: if (dlg.ShowDialog(this).Value)  			{  				try  				{  					if (new FileInfo(dlg.FileName).Extension.ToLower() == ".bmpc")  					{  						var image = new ImageBMPC(dlg.FileName' false' null);  						var writable = new WriteableBitmap(image.Size.Width' image.Size.Height' 96' 96' PixelFormats.Bgra32' null);  						int stride = (image.Size.Width * 32 + 7) / 8;    						// Flip RB Color bits  						var data = new byte[image.Mipmaps[0].Data.LongLength];  						image.Mipmaps[0].Data.CopyTo(data' 0);  						for (int i2 = 0; i2 != data.Length; i2 += 4)  						{  							byte c = data[i2];  							data[i2] = data[i2+2];  							data[i2+2] = c;  						}    						writable.WritePixels(new Int32Rect(0' 0' image.Size.Width' image.Size.Height)' data' stride' 0);  						dstImage.Source = writable;  					}  					else  					{  						// Load binary data  						var bitmap = new BitmapImage(new Uri(dlg.FileName' UriKind.Absolute));  						int stride = (bitmap.PixelWidth * bitmap.Format.BitsPerPixel + 7) / 8;  						srcData = new byte[bitmap.PixelWidth * stride];  						dstData = new byte[bitmap.PixelWidth * stride];  						bitmap.CopyPixels(srcData' stride' 0);  						bitmap.CopyPixels(dstData' stride' 0);    						// Get image atributes  						var ext = new FileInfo(dlg.FileName).Extension.ToLower();  						width = bitmap.PixelWidth;  						height = bitmap.PixelHeight;    						// Display images  						var w = new WriteableBitmap(bitmap.PixelWidth' bitmap.PixelHeight' 96' 96' PixelFormats.Bgra32' null);  						w.WritePixels(new Int32Rect(0' 0' bitmap.PixelWidth' bitmap.PixelHeight)' srcData' stride' 0);  						dstImage.Source = w;  						srcImage.Source = bitmap;    						processesImage();  					}  				}  				catch (Exception ex)  				{  					MessageBox.Show(ex.Message);  				}  			}
Magic Number,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,openButton_Click,The following statement contains a magic number: if (dlg.ShowDialog(this).Value)  			{  				try  				{  					if (new FileInfo(dlg.FileName).Extension.ToLower() == ".bmpc")  					{  						var image = new ImageBMPC(dlg.FileName' false' null);  						var writable = new WriteableBitmap(image.Size.Width' image.Size.Height' 96' 96' PixelFormats.Bgra32' null);  						int stride = (image.Size.Width * 32 + 7) / 8;    						// Flip RB Color bits  						var data = new byte[image.Mipmaps[0].Data.LongLength];  						image.Mipmaps[0].Data.CopyTo(data' 0);  						for (int i2 = 0; i2 != data.Length; i2 += 4)  						{  							byte c = data[i2];  							data[i2] = data[i2+2];  							data[i2+2] = c;  						}    						writable.WritePixels(new Int32Rect(0' 0' image.Size.Width' image.Size.Height)' data' stride' 0);  						dstImage.Source = writable;  					}  					else  					{  						// Load binary data  						var bitmap = new BitmapImage(new Uri(dlg.FileName' UriKind.Absolute));  						int stride = (bitmap.PixelWidth * bitmap.Format.BitsPerPixel + 7) / 8;  						srcData = new byte[bitmap.PixelWidth * stride];  						dstData = new byte[bitmap.PixelWidth * stride];  						bitmap.CopyPixels(srcData' stride' 0);  						bitmap.CopyPixels(dstData' stride' 0);    						// Get image atributes  						var ext = new FileInfo(dlg.FileName).Extension.ToLower();  						width = bitmap.PixelWidth;  						height = bitmap.PixelHeight;    						// Display images  						var w = new WriteableBitmap(bitmap.PixelWidth' bitmap.PixelHeight' 96' 96' PixelFormats.Bgra32' null);  						w.WritePixels(new Int32Rect(0' 0' bitmap.PixelWidth' bitmap.PixelHeight)' srcData' stride' 0);  						dstImage.Source = w;  						srcImage.Source = bitmap;    						processesImage();  					}  				}  				catch (Exception ex)  				{  					MessageBox.Show(ex.Message);  				}  			}
Magic Number,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,openButton_Click,The following statement contains a magic number: if (dlg.ShowDialog(this).Value)  			{  				try  				{  					if (new FileInfo(dlg.FileName).Extension.ToLower() == ".bmpc")  					{  						var image = new ImageBMPC(dlg.FileName' false' null);  						var writable = new WriteableBitmap(image.Size.Width' image.Size.Height' 96' 96' PixelFormats.Bgra32' null);  						int stride = (image.Size.Width * 32 + 7) / 8;    						// Flip RB Color bits  						var data = new byte[image.Mipmaps[0].Data.LongLength];  						image.Mipmaps[0].Data.CopyTo(data' 0);  						for (int i2 = 0; i2 != data.Length; i2 += 4)  						{  							byte c = data[i2];  							data[i2] = data[i2+2];  							data[i2+2] = c;  						}    						writable.WritePixels(new Int32Rect(0' 0' image.Size.Width' image.Size.Height)' data' stride' 0);  						dstImage.Source = writable;  					}  					else  					{  						// Load binary data  						var bitmap = new BitmapImage(new Uri(dlg.FileName' UriKind.Absolute));  						int stride = (bitmap.PixelWidth * bitmap.Format.BitsPerPixel + 7) / 8;  						srcData = new byte[bitmap.PixelWidth * stride];  						dstData = new byte[bitmap.PixelWidth * stride];  						bitmap.CopyPixels(srcData' stride' 0);  						bitmap.CopyPixels(dstData' stride' 0);    						// Get image atributes  						var ext = new FileInfo(dlg.FileName).Extension.ToLower();  						width = bitmap.PixelWidth;  						height = bitmap.PixelHeight;    						// Display images  						var w = new WriteableBitmap(bitmap.PixelWidth' bitmap.PixelHeight' 96' 96' PixelFormats.Bgra32' null);  						w.WritePixels(new Int32Rect(0' 0' bitmap.PixelWidth' bitmap.PixelHeight)' srcData' stride' 0);  						dstImage.Source = w;  						srcImage.Source = bitmap;    						processesImage();  					}  				}  				catch (Exception ex)  				{  					MessageBox.Show(ex.Message);  				}  			}
Magic Number,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,openButton_Click,The following statement contains a magic number: if (dlg.ShowDialog(this).Value)  			{  				try  				{  					if (new FileInfo(dlg.FileName).Extension.ToLower() == ".bmpc")  					{  						var image = new ImageBMPC(dlg.FileName' false' null);  						var writable = new WriteableBitmap(image.Size.Width' image.Size.Height' 96' 96' PixelFormats.Bgra32' null);  						int stride = (image.Size.Width * 32 + 7) / 8;    						// Flip RB Color bits  						var data = new byte[image.Mipmaps[0].Data.LongLength];  						image.Mipmaps[0].Data.CopyTo(data' 0);  						for (int i2 = 0; i2 != data.Length; i2 += 4)  						{  							byte c = data[i2];  							data[i2] = data[i2+2];  							data[i2+2] = c;  						}    						writable.WritePixels(new Int32Rect(0' 0' image.Size.Width' image.Size.Height)' data' stride' 0);  						dstImage.Source = writable;  					}  					else  					{  						// Load binary data  						var bitmap = new BitmapImage(new Uri(dlg.FileName' UriKind.Absolute));  						int stride = (bitmap.PixelWidth * bitmap.Format.BitsPerPixel + 7) / 8;  						srcData = new byte[bitmap.PixelWidth * stride];  						dstData = new byte[bitmap.PixelWidth * stride];  						bitmap.CopyPixels(srcData' stride' 0);  						bitmap.CopyPixels(dstData' stride' 0);    						// Get image atributes  						var ext = new FileInfo(dlg.FileName).Extension.ToLower();  						width = bitmap.PixelWidth;  						height = bitmap.PixelHeight;    						// Display images  						var w = new WriteableBitmap(bitmap.PixelWidth' bitmap.PixelHeight' 96' 96' PixelFormats.Bgra32' null);  						w.WritePixels(new Int32Rect(0' 0' bitmap.PixelWidth' bitmap.PixelHeight)' srcData' stride' 0);  						dstImage.Source = w;  						srcImage.Source = bitmap;    						processesImage();  					}  				}  				catch (Exception ex)  				{  					MessageBox.Show(ex.Message);  				}  			}
Magic Number,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,saveButton_Click,The following statement contains a magic number: if (dlg.ShowDialog(this).Value)  			{  				try  				{  					string fileName = dlg.FileName;  					var fileInfo = new FileInfo(fileName);  					if (string.IsNullOrEmpty(fileInfo.Extension)) fileName += ((ComboBoxItem)formatComboBox.SelectedItem).Content;    					// Flip RB Color bits  					var data = new byte[dstData.LongLength];  					dstData.CopyTo(data' 0);  					for (int i2 = 0; i2 != data.Length; i2 += 4)  					{  						byte c = data[i2];  						data[i2] = data[i2+2];  						data[i2+2] = c;  					}    					using (var stream = new MemoryStream())  					using (var file = new FileStream(fileName' FileMode.Create' FileAccess.Write))  					{  						ImageBMPC.Save(data' width' height' stream' null);  						stream.Position = 0;  						stream.CopyTo(file);  					}  				}  				catch (Exception ex)  				{  					MessageBox.Show(ex.Message);  				}  			}
Magic Number,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,saveButton_Click,The following statement contains a magic number: if (dlg.ShowDialog(this).Value)  			{  				try  				{  					string fileName = dlg.FileName;  					var fileInfo = new FileInfo(fileName);  					if (string.IsNullOrEmpty(fileInfo.Extension)) fileName += ((ComboBoxItem)formatComboBox.SelectedItem).Content;    					// Flip RB Color bits  					var data = new byte[dstData.LongLength];  					dstData.CopyTo(data' 0);  					for (int i2 = 0; i2 != data.Length; i2 += 4)  					{  						byte c = data[i2];  						data[i2] = data[i2+2];  						data[i2+2] = c;  					}    					using (var stream = new MemoryStream())  					using (var file = new FileStream(fileName' FileMode.Create' FileAccess.Write))  					{  						ImageBMPC.Save(data' width' height' stream' null);  						stream.Position = 0;  						stream.CopyTo(file);  					}  				}  				catch (Exception ex)  				{  					MessageBox.Show(ex.Message);  				}  			}
Magic Number,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,saveButton_Click,The following statement contains a magic number: if (dlg.ShowDialog(this).Value)  			{  				try  				{  					string fileName = dlg.FileName;  					var fileInfo = new FileInfo(fileName);  					if (string.IsNullOrEmpty(fileInfo.Extension)) fileName += ((ComboBoxItem)formatComboBox.SelectedItem).Content;    					// Flip RB Color bits  					var data = new byte[dstData.LongLength];  					dstData.CopyTo(data' 0);  					for (int i2 = 0; i2 != data.Length; i2 += 4)  					{  						byte c = data[i2];  						data[i2] = data[i2+2];  						data[i2+2] = c;  					}    					using (var stream = new MemoryStream())  					using (var file = new FileStream(fileName' FileMode.Create' FileAccess.Write))  					{  						ImageBMPC.Save(data' width' height' stream' null);  						stream.Position = 0;  						stream.CopyTo(file);  					}  				}  				catch (Exception ex)  				{  					MessageBox.Show(ex.Message);  				}  			}
Magic Number,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.openButton = ((System.Windows.Controls.Button)(target));                            #line 6 "..\..\..\MainWindow.xaml"              this.openButton.Click += new System.Windows.RoutedEventHandler(this.openButton_Click);                            #line default              #line hidden              return;              case 2:              this.formatComboBox = ((System.Windows.Controls.ComboBox)(target));                            #line 7 "..\..\..\MainWindow.xaml"              this.formatComboBox.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBox1_SelectionChanged);                            #line default              #line hidden              return;              case 3:              this.saveButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\..\MainWindow.xaml"              this.saveButton.Click += new System.Windows.RoutedEventHandler(this.saveButton_Click);                            #line default              #line hidden              return;              case 4:              this.srcImage = ((System.Windows.Controls.Image)(target));              return;              case 5:              this.dstImage = ((System.Windows.Controls.Image)(target));              return;              case 6:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.textBlock2 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.openButton = ((System.Windows.Controls.Button)(target));                            #line 6 "..\..\..\MainWindow.xaml"              this.openButton.Click += new System.Windows.RoutedEventHandler(this.openButton_Click);                            #line default              #line hidden              return;              case 2:              this.formatComboBox = ((System.Windows.Controls.ComboBox)(target));                            #line 7 "..\..\..\MainWindow.xaml"              this.formatComboBox.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBox1_SelectionChanged);                            #line default              #line hidden              return;              case 3:              this.saveButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\..\MainWindow.xaml"              this.saveButton.Click += new System.Windows.RoutedEventHandler(this.saveButton_Click);                            #line default              #line hidden              return;              case 4:              this.srcImage = ((System.Windows.Controls.Image)(target));              return;              case 5:              this.dstImage = ((System.Windows.Controls.Image)(target));              return;              case 6:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.textBlock2 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.openButton = ((System.Windows.Controls.Button)(target));                            #line 6 "..\..\..\MainWindow.xaml"              this.openButton.Click += new System.Windows.RoutedEventHandler(this.openButton_Click);                            #line default              #line hidden              return;              case 2:              this.formatComboBox = ((System.Windows.Controls.ComboBox)(target));                            #line 7 "..\..\..\MainWindow.xaml"              this.formatComboBox.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBox1_SelectionChanged);                            #line default              #line hidden              return;              case 3:              this.saveButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\..\MainWindow.xaml"              this.saveButton.Click += new System.Windows.RoutedEventHandler(this.saveButton_Click);                            #line default              #line hidden              return;              case 4:              this.srcImage = ((System.Windows.Controls.Image)(target));              return;              case 5:              this.dstImage = ((System.Windows.Controls.Image)(target));              return;              case 6:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.textBlock2 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.openButton = ((System.Windows.Controls.Button)(target));                            #line 6 "..\..\..\MainWindow.xaml"              this.openButton.Click += new System.Windows.RoutedEventHandler(this.openButton_Click);                            #line default              #line hidden              return;              case 2:              this.formatComboBox = ((System.Windows.Controls.ComboBox)(target));                            #line 7 "..\..\..\MainWindow.xaml"              this.formatComboBox.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBox1_SelectionChanged);                            #line default              #line hidden              return;              case 3:              this.saveButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\..\MainWindow.xaml"              this.saveButton.Click += new System.Windows.RoutedEventHandler(this.saveButton_Click);                            #line default              #line hidden              return;              case 4:              this.srcImage = ((System.Windows.Controls.Image)(target));              return;              case 5:              this.dstImage = ((System.Windows.Controls.Image)(target));              return;              case 6:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.textBlock2 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.openButton = ((System.Windows.Controls.Button)(target));                            #line 6 "..\..\..\MainWindow.xaml"              this.openButton.Click += new System.Windows.RoutedEventHandler(this.openButton_Click);                            #line default              #line hidden              return;              case 2:              this.formatComboBox = ((System.Windows.Controls.ComboBox)(target));                            #line 7 "..\..\..\MainWindow.xaml"              this.formatComboBox.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBox1_SelectionChanged);                            #line default              #line hidden              return;              case 3:              this.saveButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\..\MainWindow.xaml"              this.saveButton.Click += new System.Windows.RoutedEventHandler(this.saveButton_Click);                            #line default              #line hidden              return;              case 4:              this.srcImage = ((System.Windows.Controls.Image)(target));              return;              case 5:              this.dstImage = ((System.Windows.Controls.Image)(target));              return;              case 6:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.textBlock2 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.openButton = ((System.Windows.Controls.Button)(target));                            #line 6 "..\..\..\MainWindow.xaml"              this.openButton.Click += new System.Windows.RoutedEventHandler(this.openButton_Click);                            #line default              #line hidden              return;              case 2:              this.formatComboBox = ((System.Windows.Controls.ComboBox)(target));                            #line 7 "..\..\..\MainWindow.xaml"              this.formatComboBox.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBox1_SelectionChanged);                            #line default              #line hidden              return;              case 3:              this.saveButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\..\MainWindow.xaml"              this.saveButton.Click += new System.Windows.RoutedEventHandler(this.saveButton_Click);                            #line default              #line hidden              return;              case 4:              this.srcImage = ((System.Windows.Controls.Image)(target));              return;              case 5:              this.dstImage = ((System.Windows.Controls.Image)(target));              return;              case 6:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.textBlock2 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Missing Default,ImageCompressor,MainWindow,C:\repos\reignstudios_ReignSDK\Tools\ImageCompressor\ImageCompressor\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.openButton = ((System.Windows.Controls.Button)(target));                            #line 6 "..\..\..\MainWindow.xaml"              this.openButton.Click += new System.Windows.RoutedEventHandler(this.openButton_Click);                            #line default              #line hidden              return;              case 2:              this.formatComboBox = ((System.Windows.Controls.ComboBox)(target));                            #line 7 "..\..\..\MainWindow.xaml"              this.formatComboBox.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBox1_SelectionChanged);                            #line default              #line hidden              return;              case 3:              this.saveButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\..\MainWindow.xaml"              this.saveButton.Click += new System.Windows.RoutedEventHandler(this.saveButton_Click);                            #line default              #line hidden              return;              case 4:              this.srcImage = ((System.Windows.Controls.Image)(target));              return;              case 5:              this.dstImage = ((System.Windows.Controls.Image)(target));              return;              case 6:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 7:              this.textBlock2 = ((System.Windows.Controls.TextBlock)(target));              return;              }
