Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Reign.Audio.OpenAL,AL,C:\repos\reignstudios_ReignSDK\Platforms\Common\Reign.Audio.OpenAL\AL.cs,BufferData,The method has 5 parameters. Parameters: bid' format' data' size' freq
Long Parameter List,Reign.Audio.OpenAL,AL,C:\repos\reignstudios_ReignSDK\Platforms\Common\Reign.Audio.OpenAL\AL.cs,Source3f,The method has 5 parameters. Parameters: sid' param' value1' value2' value3
Long Parameter List,Reign.Audio.OpenAL,SoundWAV,C:\repos\reignstudios_ReignSDK\Platforms\Common\Reign.Audio.OpenAL\SoundWAV.cs,New,The method has 5 parameters. Parameters: parent' fileName' instanceCount' looped' loadedCallback
Long Parameter List,Reign.Audio.OpenAL,SoundWAV,C:\repos\reignstudios_ReignSDK\Platforms\Common\Reign.Audio.OpenAL\SoundWAV.cs,SoundWAV,The method has 5 parameters. Parameters: parent' fileName' instanceCount' looped' loadedCallback
Long Parameter List,Reign.Audio.OpenAL,SoundWAV,C:\repos\reignstudios_ReignSDK\Platforms\Common\Reign.Audio.OpenAL\SoundWAV.cs,init,The method has 5 parameters. Parameters: parent' stream' instanceCount' looped' loadedCallback
Magic Number,Reign.Audio.OpenAL,SoundWAV,C:\repos\reignstudios_ReignSDK\Platforms\Common\Reign.Audio.OpenAL\SoundWAV.cs,init,The following statement contains a magic number: try  			{  				audio = parent.FindParentOrSelfWithException<Audio>();  				audio.UpdateCallback += Update;  			  				// Gen buffer  				uint bufferTEMP = 0;  				AL.GenBuffers(1' &bufferTEMP);  				buffer = bufferTEMP;  				if (buffer == 0) Debug.ThrowError("SoundWAV"' "Failed to create buffer");  				  				// load wav data  				int format = 0;  				if (bitDepth == 16)  				{  					if (channels == 2) format = AL.FORMAT_STEREO16;  					else format = AL.FORMAT_MONO16;  				}  				else  				{  					if (channels == 2) format = AL.FORMAT_STEREO8;  					else format = AL.FORMAT_MONO8;  				}  				fixed (byte* dataPtr = data)  				{  					AL.BufferData(buffer' format' dataPtr' data.Length' sampleRate);  				}  				data = null;  				  				// create instances  				for (int i = 0; i != instanceCount; ++i)  				{  					inactiveInstances.AddLast(new SoundWAVInstance(this' looped));  				}  			}  			catch (Exception e)  			{  				FailedToLoad = true;  				Loader.AddLoadableException(e);  				Dispose();  				if (loadedCallback != null) loadedCallback(this' false);  				return;  			}
Magic Number,Reign.Audio.OpenAL,SoundWAV,C:\repos\reignstudios_ReignSDK\Platforms\Common\Reign.Audio.OpenAL\SoundWAV.cs,init,The following statement contains a magic number: try  			{  				audio = parent.FindParentOrSelfWithException<Audio>();  				audio.UpdateCallback += Update;  			  				// Gen buffer  				uint bufferTEMP = 0;  				AL.GenBuffers(1' &bufferTEMP);  				buffer = bufferTEMP;  				if (buffer == 0) Debug.ThrowError("SoundWAV"' "Failed to create buffer");  				  				// load wav data  				int format = 0;  				if (bitDepth == 16)  				{  					if (channels == 2) format = AL.FORMAT_STEREO16;  					else format = AL.FORMAT_MONO16;  				}  				else  				{  					if (channels == 2) format = AL.FORMAT_STEREO8;  					else format = AL.FORMAT_MONO8;  				}  				fixed (byte* dataPtr = data)  				{  					AL.BufferData(buffer' format' dataPtr' data.Length' sampleRate);  				}  				data = null;  				  				// create instances  				for (int i = 0; i != instanceCount; ++i)  				{  					inactiveInstances.AddLast(new SoundWAVInstance(this' looped));  				}  			}  			catch (Exception e)  			{  				FailedToLoad = true;  				Loader.AddLoadableException(e);  				Dispose();  				if (loadedCallback != null) loadedCallback(this' false);  				return;  			}
Magic Number,Reign.Audio.OpenAL,SoundWAV,C:\repos\reignstudios_ReignSDK\Platforms\Common\Reign.Audio.OpenAL\SoundWAV.cs,init,The following statement contains a magic number: try  			{  				audio = parent.FindParentOrSelfWithException<Audio>();  				audio.UpdateCallback += Update;  			  				// Gen buffer  				uint bufferTEMP = 0;  				AL.GenBuffers(1' &bufferTEMP);  				buffer = bufferTEMP;  				if (buffer == 0) Debug.ThrowError("SoundWAV"' "Failed to create buffer");  				  				// load wav data  				int format = 0;  				if (bitDepth == 16)  				{  					if (channels == 2) format = AL.FORMAT_STEREO16;  					else format = AL.FORMAT_MONO16;  				}  				else  				{  					if (channels == 2) format = AL.FORMAT_STEREO8;  					else format = AL.FORMAT_MONO8;  				}  				fixed (byte* dataPtr = data)  				{  					AL.BufferData(buffer' format' dataPtr' data.Length' sampleRate);  				}  				data = null;  				  				// create instances  				for (int i = 0; i != instanceCount; ++i)  				{  					inactiveInstances.AddLast(new SoundWAVInstance(this' looped));  				}  			}  			catch (Exception e)  			{  				FailedToLoad = true;  				Loader.AddLoadableException(e);  				Dispose();  				if (loadedCallback != null) loadedCallback(this' false);  				return;  			}
Missing Default,Reign.Audio.OpenAL,SoundWAVInstance,C:\repos\reignstudios_ReignSDK\Platforms\Common\Reign.Audio.OpenAL\SoundWAV.cs,Update,The following switch statement is missing a default case: switch (playingState)  			{  				case AL.PLAYING: State = SoundStates.Playing; break;  				case AL.PAUSED: State = SoundStates.Paused; break;  				case AL.STOPPED: State = SoundStates.Stopped; break;  			}
