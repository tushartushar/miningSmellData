Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Reign.Input.X11,Mouse,C:\research\architectureSmells\repos\reignstudios_ReignSDK\Platforms\Linux\Reign.Input.X11\Mouse.cs,Update,The length of the statement  "			Reign.Core.X11.XQueryPointer(input.application.DC' input.application.Handle' out w2' out w3' out x' out y' out x2' out y2' out mask);" is 133.
Magic Number,Reign.Input.X11,Keyboard,C:\research\architectureSmells\repos\reignstudios_ReignSDK\Platforms\Linux\Reign.Input.X11\Keyboard.cs,Keyboard,The following statement contains a magic number: keys = new bool[256];
Magic Number,Reign.Input.X11,Keyboard,C:\research\architectureSmells\repos\reignstudios_ReignSDK\Platforms\Linux\Reign.Input.X11\Keyboard.cs,Keyboard,The following statement contains a magic number: buttons = new Button[256];
Magic Number,Reign.Input.X11,Keyboard,C:\research\architectureSmells\repos\reignstudios_ReignSDK\Platforms\Linux\Reign.Input.X11\Keyboard.cs,Keyboard,The following statement contains a magic number: i != 256
Magic Number,Reign.Input.X11,Keyboard,C:\research\architectureSmells\repos\reignstudios_ReignSDK\Platforms\Linux\Reign.Input.X11\Keyboard.cs,Update,The following statement contains a magic number: i != 256
Missing Default,Reign.Input.X11,Keyboard,C:\research\architectureSmells\repos\reignstudios_ReignSDK\Platforms\Linux\Reign.Input.X11\Keyboard.cs,UpdateEvent,The following switch statement is missing a default case: switch (theEvent.Type) 			{ 				case ApplicationEventTypes.KeyDown: 					keys[theEvent.KeyCode] = true; 					break; 				 				case ApplicationEventTypes.KeyUp: 					keys[theEvent.KeyCode] = false; 					break; 			}
Missing Default,Reign.Input.X11,Mouse,C:\research\architectureSmells\repos\reignstudios_ReignSDK\Platforms\Linux\Reign.Input.X11\Mouse.cs,UpdateEvent,The following switch statement is missing a default case: switch (theEvent.Type) 			{ 				case ApplicationEventTypes.LeftMouseDown: leftOn = true; break; 				case ApplicationEventTypes.LeftMouseUp: leftOn = false; break; 				 				case ApplicationEventTypes.MiddleMouseDown: middleOn = true; break; 				case ApplicationEventTypes.MiddleMouseUp: middleOn = false; break; 				 				case ApplicationEventTypes.RightMouseDown: rightOn = true; break; 				case ApplicationEventTypes.RightMouseUp: rightOn = false; break; 				 				case (ApplicationEventTypes.ScrollWheel): 					scrollWheelVelocity = theEvent.ScrollWheelVelocity; 					scollWheelChanged = true; 					break; 			}
