Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SimpleADOApp,Program,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\Program.cs,Main,Cyclomatic complexity of the method is 8
Complex Method,SimpleADOApp,Program,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\Program.cs,CreateTables,Cyclomatic complexity of the method is 15
Long Parameter List,ADOExtensions,Extensions,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\ADOExtensions.cs,AddParameter,The method has 5 parameters.
Long Parameter List,ADOExtensions,Extensions,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\ADOExtensions.cs,ExecuteReader,The method has 5 parameters.
Long Parameter List,ADOExtensions,Extensions,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\ADOExtensions.cs,ExecuteReaderSchema,The method has 5 parameters.
Long Parameter List,ADOExtensions,ReliableReader,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\ReliableReader.cs,GetBytes,The method has 5 parameters.
Long Parameter List,ADOExtensions,ReliableReader,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\ReliableReader.cs,GetChars,The method has 5 parameters.
Long Parameter List,SimpleADOApp,StructuredDataBindingList,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\StructuredDataBindingList.cs,AddVirtualProperty,The method has 5 parameters.
Long Statement,ADOExtensions,Extensions,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\ADOExtensions.cs,Delimit,The length of the statement  "		return string.Format (System.Globalization.CultureInfo.InvariantCulture' fmt' sqlArgs.Select (a => string.Concat (delim [0]' a' delim [1])).ToArray ()); " is 152.
Long Statement,SimpleADOApp,Program,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\Program.cs,Main,The length of the statement  "		Console.WriteLine ("Unknown connection string '{0}'. Use help to see list of defined connection strings."' connectionId); " is 121.
Long Statement,SimpleADOApp,Program,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\Program.cs,Main,The length of the statement  "		Console.WriteLine ("{4} {0} : {3} {1} => {2}"' css.Name' fact.GetType ().Assembly.GetName ().Version' conn.ServerVersion' css.ProviderName' backend); " is 149.
Long Statement,SimpleADOApp,Program,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\Program.cs,Count,The length of the statement  "	return Show (() => conn.ExecuteReader ("SELECT COUNT(1) FROM {0}"' x => x.GetInt32 (0)' x => x.Dump ()' name).Single ()); " is 121.
Long Statement,SimpleADOApp,Program,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\Program.cs,Show,The length of the statement  "	Console.WriteLine ("{3}  => {0'8}   duration={1} {2}"' ret' (stop - start)' ex != null ? ex.Message : ""' string.Format (name ?? ""' args)); " is 140.
Long Statement,SimpleADOApp,Program,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\Program.cs,FillTables,The length of the statement  "		ret += Show (() => conn.ExecuteNonQuery ("INSERT INTO {0}({1}'{2}'{3}) VALUES (@ID'@NAME'0)"' c => c.Parameter ("ID"' i' DbType.Int32).Parameter ("NAME"' "Name" + i' DbType.String).Transaction (txn)' name' "ID"' "NAME"' "VAL")); " is 228.
Long Statement,SimpleADOApp,StructuredData,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\StructuredData.cs,SetValue,The length of the statement  "		throw new InvalidOperationException (string.Format ("Expected instance of type '{0}'' but got '{1}'."' this.description.targetType [i].FullName' val.GetType ().FullName)); " is 171.
Long Statement,SimpleADOApp,StructuredDataDescription,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\StructuredDataDescription.cs,FindFunc,The length of the statement  "	Type t = type.IsValueType && type.IsGenericType && type.GetGenericTypeDefinition () == typeof(Nullable<>) ? type.GetGenericArguments () [0] : type; " is 147.
Magic Number,ADOExtensions,Extensions,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\ADOExtensions.cs,NewParameter,The following statement contains a magic number: p.ParameterName = delim [3] + name;  
Magic Number,ADOExtensions,Extensions,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\ADOExtensions.cs,NewParameter,The following statement contains a magic number: if (typeof(T) == typeof(string))  	p.Size = value != null ? value.ToString ().Length : 50;  
Magic Number,ADOExtensions,Extensions,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\ADOExtensions.cs,NewParameter,The following statement contains a magic number: p.Size = value != null ? value.ToString ().Length : 50;  
Magic Number,ADOExtensions,Extensions,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\ADOExtensions.cs,Delimit,The following statement contains a magic number: if (sqlArgs != null && sqlArgs.Length > 0) {  	string[] delim = GetDelimiters (connection.Backend ());  	if (delim [2] != "@")  		fmt = fmt.Replace ("@"' delim [2]);  	return string.Format (System.Globalization.CultureInfo.InvariantCulture' fmt' sqlArgs.Select (a => string.Concat (delim [0]' a' delim [1])).ToArray ());  }  
Magic Number,ADOExtensions,Extensions,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\ADOExtensions.cs,Delimit,The following statement contains a magic number: if (sqlArgs != null && sqlArgs.Length > 0) {  	string[] delim = GetDelimiters (connection.Backend ());  	if (delim [2] != "@")  		fmt = fmt.Replace ("@"' delim [2]);  	return string.Format (System.Globalization.CultureInfo.InvariantCulture' fmt' sqlArgs.Select (a => string.Concat (delim [0]' a' delim [1])).ToArray ());  }  
Magic Number,ADOExtensions,Extensions,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\ADOExtensions.cs,Delimit,The following statement contains a magic number: if (delim [2] != "@")  	fmt = fmt.Replace ("@"' delim [2]);  
Magic Number,ADOExtensions,Extensions,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\ADOExtensions.cs,Delimit,The following statement contains a magic number: if (delim [2] != "@")  	fmt = fmt.Replace ("@"' delim [2]);  
Magic Number,ADOExtensions,Extensions,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\ADOExtensions.cs,Delimit,The following statement contains a magic number: fmt = fmt.Replace ("@"' delim [2]);  
Magic Number,SimpleADOApp,Program,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\Program.cs,Main,The following statement contains a magic number: Console.WriteLine ("CLR={0}' {1}bit"' typeof(int).Assembly.ImageRuntimeVersion' IntPtr.Size * 8);  
Magic Number,SimpleADOApp,Program,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\Program.cs,Main,The following statement contains a magic number: using (var conn = fact.CreateConnection ()) {  	Console.WriteLine ("Connection");  	conn.ConnectionString = css.ConnectionString;  	conn.Open ();  	string backend = conn.Backend ();  	Console.WriteLine ("{4} {0} : {3} {1} => {2}"' css.Name' fact.GetType ().Assembly.GetName ().Version' conn.ServerVersion' css.ProviderName' backend);  	string tableName = "TESTME";  	DropTables (conn' tableName);  	CreateTables (conn' tableName);  	FillTables (conn' tableName' 100);  	Count (conn' tableName);  	ReadAllDyn (conn' tableName);  	ReadAll (conn' tableName);  	CleanTables (conn' tableName);  	DropTables (conn' tableName);  	conn.Close ();  }  
Magic Number,SimpleADOApp,Program,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\Program.cs,Main,The following statement contains a magic number: FillTables (conn' tableName' 100);  
Magic Number,SimpleADOApp,StructuredData,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\StructuredData.cs,GetHashCode,The following statement contains a magic number: if (this.hash == 0) {  	int h = 15485411;  	// Just a prime.  	for (int i = 0; i < data.Length; i++)  		h ^= (h * 17 + (data [i] != null ? data [i].GetHashCode () : 13));  	this.hash = h;  }  
Magic Number,SimpleADOApp,StructuredData,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\StructuredData.cs,GetHashCode,The following statement contains a magic number: if (this.hash == 0) {  	int h = 15485411;  	// Just a prime.  	for (int i = 0; i < data.Length; i++)  		h ^= (h * 17 + (data [i] != null ? data [i].GetHashCode () : 13));  	this.hash = h;  }  
Magic Number,SimpleADOApp,StructuredData,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\StructuredData.cs,GetHashCode,The following statement contains a magic number: if (this.hash == 0) {  	int h = 15485411;  	// Just a prime.  	for (int i = 0; i < data.Length; i++)  		h ^= (h * 17 + (data [i] != null ? data [i].GetHashCode () : 13));  	this.hash = h;  }  
Magic Number,SimpleADOApp,StructuredData,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\StructuredData.cs,GetHashCode,The following statement contains a magic number: for (int i = 0; i < data.Length; i++)  	h ^= (h * 17 + (data [i] != null ? data [i].GetHashCode () : 13));  
Magic Number,SimpleADOApp,StructuredData,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\StructuredData.cs,GetHashCode,The following statement contains a magic number: for (int i = 0; i < data.Length; i++)  	h ^= (h * 17 + (data [i] != null ? data [i].GetHashCode () : 13));  
Magic Number,SimpleADOApp,StructuredData,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\StructuredData.cs,GetHashCode,The following statement contains a magic number: h ^= (h * 17 + (data [i] != null ? data [i].GetHashCode () : 13));  
Magic Number,SimpleADOApp,StructuredData,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\StructuredData.cs,GetHashCode,The following statement contains a magic number: h ^= (h * 17 + (data [i] != null ? data [i].GetHashCode () : 13));  
Missing Default,ADOExtensions,ReliableReader,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\ReliableReader.cs,GetInt16,The following switch statement is missing a default case: switch (codes [ordinal]) {  case TypeCode.Int32:  	return (short)r.GetInt32 (ordinal);  case TypeCode.Int64:  	return (short)r.GetInt64 (ordinal);  case TypeCode.Decimal:  	return (short)r.GetDecimal (ordinal);  }  
Missing Default,ADOExtensions,ReliableReader,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\ReliableReader.cs,GetInt32,The following switch statement is missing a default case: switch (codes [ordinal]) {  case TypeCode.Int64:  	return (int)r.GetInt64 (ordinal);  case TypeCode.Decimal:  	return (int)r.GetDecimal (ordinal);  }  
Missing Default,ADOExtensions,ReliableReader,C:\repos\tkcode123_SimpleAdoApp\src\SimpleADOApp\ReliableReader.cs,GetInt64,The following switch statement is missing a default case: switch (codes [ordinal]) {  case TypeCode.Int32:  	return r.GetInt32 (ordinal);  case TypeCode.Decimal:  	return (long)r.GetDecimal (ordinal);  }  
