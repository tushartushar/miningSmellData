Implementation smell,Namespace,Class,File,Method,Description
Long Method,CoAP,MessageEncoder12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The method has 115 lines of code.
Long Method,CoAP.Stack,BlockwiseLayer,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,ReceiveRequest,The method has 106 lines of code.
Long Method,CoAP.Stack,BlockwiseLayer,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,ReceiveResponse,The method has 139 lines of code.
Long Method,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,The method has 114 lines of code.
Complex Method,CoAP,Code,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Code.cs,ToString,Cyclomatic complexity of the method is 31
Complex Method,CoAP,LinkFormat,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\LinkFormat.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,CoAP,LinkFormat,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\LinkFormat.cs,Matches,Cyclomatic complexity of the method is 14
Complex Method,CoAP,Message,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Message.cs,Equals,Cyclomatic complexity of the method is 11
Complex Method,CoAP,Option,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Option.cs,ToString,Cyclomatic complexity of the method is 23
Complex Method,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,Cyclomatic complexity of the method is 16
Complex Method,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,Cyclomatic complexity of the method is 16
Complex Method,CoAP,MessageEncoder03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 12
Complex Method,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,Cyclomatic complexity of the method is 20
Complex Method,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,Cyclomatic complexity of the method is 20
Complex Method,CoAP,MessageEncoder08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,CoAP,MessageEncoder12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 14
Complex Method,CoAP,MessageDecoder12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,Cyclomatic complexity of the method is 9
Complex Method,CoAP,MessageEncoder13,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 9
Complex Method,CoAP,MessageEncoder18,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 8
Complex Method,CoAP.Channel,UDPChannel,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Channel\UDPChannel.cs,Start,Cyclomatic complexity of the method is 9
Complex Method,CoAP.EndPoint.Resources,Resource,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\EndPoint\Resources\Resource.cs,AddSubResource,Cyclomatic complexity of the method is 15
Complex Method,CoAP.EndPoint.Resources,Resource,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\EndPoint\Resources\Resource.cs,Print,Cyclomatic complexity of the method is 8
Complex Method,CoAP.Net,CoAPEndPoint,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Net\CoAPEndPoint.cs,ReceiveData,Cyclomatic complexity of the method is 15
Complex Method,CoAP.Net,Matcher,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Net\Matcher.cs,SendResponse,Cyclomatic complexity of the method is 12
Complex Method,CoAP.Net,Matcher,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Net\Matcher.cs,ReceiveRequest,Cyclomatic complexity of the method is 13
Complex Method,CoAP.Net,Matcher,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Net\Matcher.cs,ReceiveResponse,Cyclomatic complexity of the method is 12
Complex Method,CoAP.Stack,BlockwiseLayer,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,ReceiveRequest,Cyclomatic complexity of the method is 15
Complex Method,CoAP.Stack,BlockwiseLayer,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,SendResponse,Cyclomatic complexity of the method is 10
Complex Method,CoAP.Stack,BlockwiseLayer,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,ReceiveResponse,Cyclomatic complexity of the method is 23
Complex Method,CoAP.Stack,ObserveLayer,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Stack\ObserveLayer.cs,SendResponse,Cyclomatic complexity of the method is 12
Complex Method,CoAP.Stack,ReliabilityLayer,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Stack\ReliabilityLayer.cs,ReceiveRequest,Cyclomatic complexity of the method is 10
Complex Method,CoAP.Stack,TransmissionContext,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Stack\ReliabilityLayer.cs,timer_Elapsed,Cyclomatic complexity of the method is 11
Complex Method,CoAP.Util,Utils,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\Utils.cs,OptionsToString,Cyclomatic complexity of the method is 11
Complex Method,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,TryRemoveInternal,Cyclomatic complexity of the method is 8
Complex Method,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,TryUpdateInternal,Cyclomatic complexity of the method is 8
Complex Method,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,TryAddInternal,Cyclomatic complexity of the method is 11
Complex Method,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,AddOrUpdate,Cyclomatic complexity of the method is 8
Complex Method,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,CopyTo,Cyclomatic complexity of the method is 8
Complex Method,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,Cyclomatic complexity of the method is 10
Complex Method,System.Collections.Concurrent,ConcurrentQueue<T>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentQueue.cs,GetEnumerator,Cyclomatic complexity of the method is 11
Complex Method,System.Collections.Generic,HashSet<T>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Generic\HashSet.cs,CheckUniqueAndUnfoundElements,Cyclomatic complexity of the method is 8
Complex Method,System.Collections.Generic,HashSet<T>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Generic\HashSet.cs,HashSetEquals,Cyclomatic complexity of the method is 11
Complex Method,System.Threading,SpinWait,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Threading\SpinWait.cs,SpinUntil,Cyclomatic complexity of the method is 8
Long Parameter List,CoAP,CoapClient,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\CoapClient.cs,PostAsync,The method has 5 parameters. Parameters: payload' format' accept' done' fail
Long Parameter List,CoAP,CoapClient,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\CoapClient.cs,PostAsync,The method has 5 parameters. Parameters: payload' format' accept' done' fail
Long Parameter List,CoAP,CoapClient,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\CoapClient.cs,PutAsync,The method has 5 parameters. Parameters: payload' format' accept' done' fail
Long Parameter List,CoAP.Channel,UDPChannel,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Channel\UDPChannel.cs,EndReceive,The method has 5 parameters. Parameters: socket' buffer' offset' count' ep
Long Parameter List,CoAP.Stack,Entry,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Stack\Chain.cs,Entry,The method has 6 parameters. Parameters: chain' prevEntry' nextEntry' name' filter' nextFilterFactory
Long Parameter List,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,TryAddInternal,The method has 6 parameters. Parameters: key' hashcode' value' updateIfExists' acquireLock' resultingValue
Long Parameter List,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GetBucketAndLockNo,The method has 5 parameters. Parameters: hashcode' bucketNo' lockNo' bucketCount' lockCount
Long Identifier,CoAP,CoapConfig,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\CoapConfig.cs,,The length of the parameter _notificationCheckIntervalTime is 30.
Long Identifier,CoAP,CoapConfig,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\CoapConfig.cs,,The length of the parameter _notificationCheckIntervalCount is 31.
Long Identifier,CoAP,CoapConfig,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\CoapConfig.cs,,The length of the parameter _notificationReregistrationBackoff is 34.
Long Identifier,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,,The length of the parameter DEFAULT_CONCURRENCY_MULTIPLIER is 30.
Long Identifier,System.Threading,PlatformHelper,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Threading\SpinWait.cs,,The length of the parameter PROCESSOR_COUNT_REFRESH_INTERVAL_MS is 35.
Long Identifier,System.Threading,PlatformHelper,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Threading\SpinWait.cs,,The length of the parameter s_lastProcessorCountRefreshTicks is 32.
Long Identifier,System.Threading,TimeoutHelper,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Threading\SpinWait.cs,UpdateTimeOut,The length of the parameter originalWaitMillisecondsTimeout is 31.
Long Statement,CoAP,CoapConfig,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\CoapConfig.cs,Load,The length of the statement  "            NotificationCheckIntervalTime = GetInt64(nvc' "NotificationCheckIntervalTime"' "NOTIFICATION_CHECK_INTERVAL"' NotificationCheckIntervalTime); " is 141.
Long Statement,CoAP,CoapConfig,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\CoapConfig.cs,Load,The length of the statement  "            NotificationCheckIntervalCount = GetInt32(nvc' "NotificationCheckIntervalCount"' "NOTIFICATION_CHECK_INTERVAL_COUNT"' NotificationCheckIntervalCount); " is 150.
Long Statement,CoAP,CoapConfig,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\CoapConfig.cs,Load,The length of the statement  "            NotificationReregistrationBackoff = GetInt32(nvc' "NotificationReregistrationBackoff"' "NOTIFICATION_REREGISTRATION_BACKOFF"' NotificationReregistrationBackoff); " is 161.
Long Statement,CoAP,CoapConfig,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\CoapConfig.cs,Load,The length of the statement  "            ChannelReceiveBufferSize = GetInt32(nvc' "ChannelReceiveBufferSize"' "UDP_CONNECTOR_RECEIVE_BUFFER"' ChannelReceiveBufferSize); " is 127.
Long Statement,CoAP,CoapConfig,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\CoapConfig.cs,Load,The length of the statement  "            ChannelReceivePacketSize = GetInt32(nvc' "ChannelReceivePacketSize"' "UDP_CONNECTOR_DATAGRAM_SIZE"' ChannelReceivePacketSize); " is 126.
Long Statement,CoAP.Channel,IPAddressExtensions,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,MapToIPv4,The length of the statement  "            Int64 newAddress = (UInt32)(bytes[12] & 0xff) | (UInt32)(bytes[13] & 0xff) << 8 | (UInt32)(bytes[14] & 0xff) << 16 | (UInt32)(bytes[15] & 0xff) << 24; " is 150.
Long Statement,CoAP.Net,Matcher,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Net\Matcher.cs,ReceiveResponse,The length of the statement  "                        log.Warn("Possible MID reuse before lifetime end: " + response.TokenString + " expected MID " + exchange.CurrentRequest.ID + " but received " + response.ID); " is 157.
Long Statement,CoAP.Server.Resources,Resource,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Server\Resources\Resource.cs,RemoveObserveRelation,The length of the statement  "            ((ICollection<KeyValuePair<String' ObserveRelation>>)_observeRelations).Remove(new KeyValuePair<String' ObserveRelation>(relation.Key' relation)); " is 146.
Long Statement,CoAP.Stack,BlockwiseLayer,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,ReceiveRequest,The length of the statement  "                        log.Warn("Wrong block number. Expected " + status.CurrentNUM + " but received " + block1.NUM + ". Respond with 4.08 (Request Entity Incomplete)."); " is 147.
Long Statement,CoAP.Stack,BlockwiseLayer,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,ReceiveResponse,The length of the statement  "                        log.Warn("Wrong block number. Expected " + status.CurrentNUM + " but received " + block2.NUM + ". Reject response; exchange has failed."); " is 138.
Long Statement,CoAP.Util,ByteArrayUtils,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,FromHexStream,The length of the statement  "                    Int16 high = Int16.Parse(hex[i].ToString()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture); " is 140.
Long Statement,CoAP.Util,ByteArrayUtils,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,FromHexStream,The length of the statement  "                    Int16 low = Int16.Parse(hex[i + 1].ToString()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture); " is 143.
Long Statement,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,The length of the statement  "                // Compute the new table size. We find the smallest integer larger than twice the previous table size' and not divisible by " is 123.
Long Statement,System.Collections.Concurrent,ConcurrentQueue<T>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentQueue.cs,InitializeFromCollection,The length of the statement  "            Segment localTail = new Segment(0' this);//use this local variable to avoid the extra volatile read/write. this is safe because it is only called from ctor " is 155.
Complex Conditional,CoAP,LinkFormat,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\LinkFormat.cs,Serialize,The conditional expression  "(!resource.Hidden && (resource.Name.Length > 0) || !recursive)                   && Matches(resource' query)"  is complex.
Complex Conditional,CoAP,Request,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Request.cs,WaitForResponse,The conditional expression  "_currentResponse == null &&                      !IsCancelled && !IsTimedOut && !IsRejected"  is complex.
Complex Conditional,CoAP.Observe,ObserveNotificationOrderer,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Observe\ObserveNotificationOrderer.cs,IsNew,The conditional expression  "V1 < V2 && V2 - V1 < 1 << 23                      || V1 > V2 && V1 - V2 > 1 << 23                      || T2 > T1.AddMilliseconds(notifMaxAge)"  is complex.
Complex Conditional,System.Collections.Concurrent,ConcurrentQueue<T>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentQueue.cs,GetHeadTailPositions,The conditional expression  "head != _head || tail != _tail                  //if low and high pointers' retry                  || headLow != head.Low || tailHigh != tail.High                  //if head jumps ahead of tail because of concurrent grow and dequeue' retry                  || head._index > tail._index"  is complex.
Complex Conditional,System.Collections.Generic,HashSet<T>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Generic\HashSet.cs,HashSet,The conditional expression  "(_count == 0 && _slots.Length > HashHelpers.GetMinPrime()) ||                  (_count > 0 && _slots.Length / _count > ShrinkThreshold)"  is complex.
Empty Catch Block,CoAP,CoapClient,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\CoapClient.cs,Ping,The method has an empty catch block.
Empty Catch Block,CoAP.Channel,UDPChannel,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Channel\UDPChannel.cs,SetupUDPSocket,The method has an empty catch block.
Empty Catch Block,CoAP.Channel,UDPChannel,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Channel\UDPChannel.cs,BeginReceive,The method has an empty catch block.
Empty Catch Block,CoAP.Channel,UDPChannel,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Channel\UDPChannel.cs,BeginSend,The method has an empty catch block.
Empty Catch Block,CoAP.Stack,BlockwiseLayer,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,PrepareBlockCleanup,The method has an empty catch block.
Empty Catch Block,CoAP.Stack,BlockwiseLayer,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,ClearBlockCleanup,The method has an empty catch block.
Empty Catch Block,CoAP.Stack,TransmissionContext,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Stack\ReliabilityLayer.cs,Cancel,The method has an empty catch block.
Magic Number,CoAP,BlockOption,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,DecodeSZX,The following statement contains a magic number: return 1 << (szx + 4);
Magic Number,CoAP,BlockOption,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,EncodeSZX,The following statement contains a magic number: blockSize < 16
Magic Number,CoAP,BlockOption,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,EncodeSZX,The following statement contains a magic number: return 6;
Magic Number,CoAP,BlockOption,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,EncodeSZX,The following statement contains a magic number: blockSize > 1024
Magic Number,CoAP,BlockOption,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,EncodeSZX,The following statement contains a magic number: return (Int32)(Math.Log(blockSize) / Math.Log(2)) - 4;
Magic Number,CoAP,BlockOption,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,EncodeSZX,The following statement contains a magic number: return (Int32)(Math.Log(blockSize) / Math.Log(2)) - 4;
Magic Number,CoAP,BlockOption,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,ValidSZX,The following statement contains a magic number: return (szx >= 0 && szx <= 6);
Magic Number,CoAP,BlockOption,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,Encode,The following statement contains a magic number: value |= (m ? 1 : 0) << 3;
Magic Number,CoAP,BlockOption,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,Encode,The following statement contains a magic number: value |= num << 4;
Magic Number,CoAP,CoapConfig,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\CoapConfig.cs,Load,The following statement contains a magic number: String[] tmp = line.Split(new Char[] { '=' }' 2);
Magic Number,CoAP,CoapConfig,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\CoapConfig.cs,Load,The following statement contains a magic number: tmp.Length == 2
Magic Number,CoAP,Code,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Code.cs,GetResponseClass,The following statement contains a magic number: return (code >> 5) & 0x7;
Magic Number,CoAP,Code,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Code.cs,IsRequest,The following statement contains a magic number: return (code >= 1) && (code <= 31);
Magic Number,CoAP,Code,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Code.cs,IsResponse,The following statement contains a magic number: return (code >= 64) && (code <= 191);
Magic Number,CoAP,Code,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Code.cs,IsResponse,The following statement contains a magic number: return (code >= 64) && (code <= 191);
Magic Number,CoAP,Code,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Code.cs,IsSuccess,The following statement contains a magic number: return code >= 64 && code < 96;
Magic Number,CoAP,Code,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Code.cs,IsSuccess,The following statement contains a magic number: return code >= 64 && code < 96;
Magic Number,CoAP,Code,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Code.cs,IsValid,The following statement contains a magic number: return (code >= 0) && (code <= 255);
Magic Number,CoAP,LinkFormat,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\LinkFormat.cs,Parse,The following statement contains a magic number: path = path.Substring(1' path.Length - 2);
Magic Number,CoAP,LinkFormat,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\LinkFormat.cs,Serialize,The following statement contains a magic number: linkFormat.Length > 3
Magic Number,CoAP,LinkFormat,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\LinkFormat.cs,Deserialize,The following statement contains a magic number: path = path.Substring(1' path.Length - 2);
Magic Number,CoAP,Message,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Message.cs,AddIfMatch,The following statement contains a magic number: opaque.Length > 8
Magic Number,CoAP,Message,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Message.cs,AddUriPath,The following statement contains a magic number: path.Length > 255
Magic Number,CoAP,Message,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Message.cs,AddUriQuery,The following statement contains a magic number: query.Length > 255
Magic Number,CoAP,Message,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Message.cs,AddLocationPath,The following statement contains a magic number: path.Length > 255
Magic Number,CoAP,Message,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Message.cs,AddLocationQuery,The following statement contains a magic number: query.Length > 255
Magic Number,CoAP,Option,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Option.cs,GetHashCode,The following statement contains a magic number: const Int32 prime = 31;
Magic Number,CoAP,Option,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Option.cs,IsUnsafe,The following statement contains a magic number: return ((Int32)type & 2) > 0;
Magic Number,CoAP,Int32Convertor,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Decode,The following statement contains a magic number: iOutcome <<= 8;
Magic Number,CoAP,Int32Convertor,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Encode,The following statement contains a magic number: value >= 1 << (i * 8) || value < 0
Magic Number,CoAP,Int32Convertor,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Encode,The following statement contains a magic number: i < 4
Magic Number,CoAP,Int32Convertor,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Encode,The following statement contains a magic number: ret[len - i - 1] = (Byte)(value >> i * 8);
Magic Number,CoAP,Int64Convertor,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Decode,The following statement contains a magic number: iOutcome <<= 8;
Magic Number,CoAP,Int64Convertor,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Encode,The following statement contains a magic number: value >= 1L << (i * 8) || value < 0L
Magic Number,CoAP,Int64Convertor,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Encode,The following statement contains a magic number: i < 8
Magic Number,CoAP,Int64Convertor,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Encode,The following statement contains a magic number: ret[len - i - 1] = (Byte)(value >> i * 8);
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: code == 80
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft03,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: return 16;
Magic Number,CoAP,Draft12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: optionNumber == 16
Magic Number,CoAP,MessageEncoder12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: optionDelta -= 15;
Magic Number,CoAP,MessageEncoder12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: optionDelta < 30
Magic Number,CoAP,MessageEncoder12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: optionCount < 15
Magic Number,CoAP,MessageEncoder12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: writer.Write(0xf0' 8);
Magic Number,CoAP,MessageEncoder12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: optionCount > 14
Magic Number,CoAP,MessageDecoder12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: Boolean hasMoreOptions = _optionCount == 15;
Magic Number,CoAP,MessageDecoder12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: Int32 bits = m_reader.Read(4);
Magic Number,CoAP,MessageDecoder12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }
Magic Number,CoAP,MessageDecoder12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }
Magic Number,CoAP,MessageDecoder12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }
Magic Number,CoAP,MessageDecoder12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }
Magic Number,CoAP,MessageDecoder12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }
Magic Number,CoAP,MessageDecoder12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }
Magic Number,CoAP,MessageDecoder12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }
Magic Number,CoAP,MessageDecoder12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }
Magic Number,CoAP,MessageDecoder12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }
Magic Number,CoAP,MessageDecoder12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: optionDelta == 15
Magic Number,CoAP,MessageDecoder12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: additionalLength = m_reader.Read(8);
Magic Number,CoAP,MessageDecoder12,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: length == 15
Magic Number,CoAP,Draft13,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: nibble < 13
Magic Number,CoAP,Draft13,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: optionValue <= 12
Magic Number,CoAP,Draft13,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: return 16;
Magic Number,CoAP,Draft13,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: optionNumber == 16
Magic Number,CoAP,MessageEncoder13,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: writer.Write(optionDelta - 13' 8);
Magic Number,CoAP,MessageEncoder13,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: writer.Write(optionDelta - 13' 8);
Magic Number,CoAP,MessageEncoder13,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: optionDeltaNibble == 13
Magic Number,CoAP,MessageEncoder13,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: writer.Write(optionLength - 13' 8);
Magic Number,CoAP,MessageEncoder13,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: writer.Write(optionLength - 13' 8);
Magic Number,CoAP,MessageEncoder13,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: optionLengthNibble == 13
Magic Number,CoAP,Draft18,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: optionValue <= 12
Magic Number,CoAP,Draft18,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: nibble < 13
Magic Number,CoAP,MessageEncoder18,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: writer.Write(optionDelta - 13' 8);
Magic Number,CoAP,MessageEncoder18,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: writer.Write(optionDelta - 13' 8);
Magic Number,CoAP,MessageEncoder18,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: optionDeltaNibble == 13
Magic Number,CoAP,MessageEncoder18,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: writer.Write(optionLength - 13' 8);
Magic Number,CoAP,MessageEncoder18,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: writer.Write(optionLength - 13' 8);
Magic Number,CoAP,MessageEncoder18,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: optionLengthNibble == 13
Magic Number,CoAP.Channel,IPAddressExtensions,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,IsIPv4MappedToIPv6,The following statement contains a magic number: i < 10
Magic Number,CoAP.Channel,IPAddressExtensions,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,IsIPv4MappedToIPv6,The following statement contains a magic number: return bytes[10] == 0xff && bytes[11] == 0xff;
Magic Number,CoAP.Channel,IPAddressExtensions,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,IsIPv4MappedToIPv6,The following statement contains a magic number: return bytes[10] == 0xff && bytes[11] == 0xff;
Magic Number,CoAP.Channel,IPAddressExtensions,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,MapToIPv4,The following statement contains a magic number: Int64 newAddress = (UInt32)(bytes[12] & 0xff) | (UInt32)(bytes[13] & 0xff) << 8 | (UInt32)(bytes[14] & 0xff) << 16 | (UInt32)(bytes[15] & 0xff) << 24;
Magic Number,CoAP.Channel,IPAddressExtensions,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,MapToIPv4,The following statement contains a magic number: Int64 newAddress = (UInt32)(bytes[12] & 0xff) | (UInt32)(bytes[13] & 0xff) << 8 | (UInt32)(bytes[14] & 0xff) << 16 | (UInt32)(bytes[15] & 0xff) << 24;
Magic Number,CoAP.Channel,IPAddressExtensions,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,MapToIPv4,The following statement contains a magic number: Int64 newAddress = (UInt32)(bytes[12] & 0xff) | (UInt32)(bytes[13] & 0xff) << 8 | (UInt32)(bytes[14] & 0xff) << 16 | (UInt32)(bytes[15] & 0xff) << 24;
Magic Number,CoAP.Channel,IPAddressExtensions,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,MapToIPv4,The following statement contains a magic number: Int64 newAddress = (UInt32)(bytes[12] & 0xff) | (UInt32)(bytes[13] & 0xff) << 8 | (UInt32)(bytes[14] & 0xff) << 16 | (UInt32)(bytes[15] & 0xff) << 24;
Magic Number,CoAP.Channel,IPAddressExtensions,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,MapToIPv4,The following statement contains a magic number: Int64 newAddress = (UInt32)(bytes[12] & 0xff) | (UInt32)(bytes[13] & 0xff) << 8 | (UInt32)(bytes[14] & 0xff) << 16 | (UInt32)(bytes[15] & 0xff) << 24;
Magic Number,CoAP.Channel,IPAddressExtensions,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,MapToIPv4,The following statement contains a magic number: Int64 newAddress = (UInt32)(bytes[12] & 0xff) | (UInt32)(bytes[13] & 0xff) << 8 | (UInt32)(bytes[14] & 0xff) << 16 | (UInt32)(bytes[15] & 0xff) << 24;
Magic Number,CoAP.Channel,IPAddressExtensions,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,MapToIPv4,The following statement contains a magic number: Int64 newAddress = (UInt32)(bytes[12] & 0xff) | (UInt32)(bytes[13] & 0xff) << 8 | (UInt32)(bytes[14] & 0xff) << 16 | (UInt32)(bytes[15] & 0xff) << 24;
Magic Number,CoAP.Channel,IPAddressExtensions,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,MapToIPv6,The following statement contains a magic number: Byte[] newAddress = new Byte[16] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0xff' 0xff' bytes[0]' bytes[1]' bytes[2]' bytes[3] };
Magic Number,CoAP.Channel,IPAddressExtensions,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,MapToIPv6,The following statement contains a magic number: Byte[] newAddress = new Byte[16] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0xff' 0xff' bytes[0]' bytes[1]' bytes[2]' bytes[3] };
Magic Number,CoAP.Channel,IPAddressExtensions,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,MapToIPv6,The following statement contains a magic number: Byte[] newAddress = new Byte[16] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0xff' 0xff' bytes[0]' bytes[1]' bytes[2]' bytes[3] };
Magic Number,CoAP.Channel,UDPChannel,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Channel\UDPChannel.cs,SetupUDPSocket,The following statement contains a magic number: const Int32 SIO_UDP_CONNRESET = -1744830452;
Magic Number,CoAP.Codec,DatagramReader,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Codec\DatagramReader.cs,ReadBytes,The following statement contains a magic number: bytes[i] = (Byte)Read(8);
Magic Number,CoAP.Codec,DatagramReader,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Codec\DatagramReader.cs,ReadCurrentByte,The following statement contains a magic number: _currentBitIndex = 7;
Magic Number,CoAP.Codec,DatagramWriter,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Codec\DatagramWriter.cs,DatagramWriter,The following statement contains a magic number: _currentBitIndex = 7;
Magic Number,CoAP.Codec,DatagramWriter,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Codec\DatagramWriter.cs,Write,The following statement contains a magic number: numBits < 32 && data >= (1 << numBits)
Magic Number,CoAP.Codec,DatagramWriter,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Codec\DatagramWriter.cs,WriteBytes,The following statement contains a magic number: Write(bytes[i]' 8);
Magic Number,CoAP.Codec,DatagramWriter,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Codec\DatagramWriter.cs,WriteBytes,The following statement contains a magic number: _currentBitIndex < 7
Magic Number,CoAP.Codec,DatagramWriter,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Codec\DatagramWriter.cs,WriteCurrentByte,The following statement contains a magic number: _currentBitIndex = 7;
Magic Number,CoAP.Codec,DatagramWriter,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Codec\DatagramWriter.cs,WriteCurrentByte,The following statement contains a magic number: _currentBitIndex < 7
Magic Number,CoAP.Deduplication,CropRotation,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Deduplication\CropRotation.cs,CropRotation,The following statement contains a magic number: _maps = new ConcurrentDictionary<Exchange.KeyID' Exchange>[3];
Magic Number,CoAP.Deduplication,CropRotation,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Deduplication\CropRotation.cs,CropRotation,The following statement contains a magic number: _maps[2] = new ConcurrentDictionary<Exchange.KeyID' Exchange>();
Magic Number,CoAP.Deduplication,CropRotation,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Deduplication\CropRotation.cs,Rotation,The following statement contains a magic number: _second = (_second + 1) % 3;
Magic Number,CoAP.Deduplication,CropRotation,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Deduplication\CropRotation.cs,Clear,The following statement contains a magic number: _maps[2].Clear();
Magic Number,CoAP.EndPoint.Resources,Resource,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\EndPoint\Resources\Resource.cs,Print,The following statement contains a magic number: i < indent + 3
Magic Number,CoAP.EndPoint.Resources,Resource,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\EndPoint\Resources\Resource.cs,Print,The following statement contains a magic number: sub.Print(sb' indent + 2);
Magic Number,CoAP.Net,KeyID,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Net\Exchange.cs,KeyID,The following statement contains a magic number: _hash = id * 31 + (ep == null ? 0 : ep.GetHashCode());
Magic Number,CoAP.Net,KeyUri,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Net\Exchange.cs,KeyUri,The following statement contains a magic number: _hash = _uri.GetHashCode() * 31 + ep.GetHashCode();
Magic Number,CoAP.Net,Matcher,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Net\Matcher.cs,Matcher,The following statement contains a magic number: _currentID = new Random().Next(1 << 16);
Magic Number,CoAP.Net,Matcher,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Net\Matcher.cs,SendRequest,The following statement contains a magic number: request.ID = System.Threading.Interlocked.Increment(ref _currentID) % (1 << 16);
Magic Number,CoAP.Net,Matcher,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Net\Matcher.cs,SendResponse,The following statement contains a magic number: response.ID = System.Threading.Interlocked.Increment(ref _currentID) % (1 << 16);
Magic Number,CoAP.Observe,ObserveNotificationOrderer,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Observe\ObserveNotificationOrderer.cs,GetNextObserveNumber,The following statement contains a magic number: next >= 1 << 24
Magic Number,CoAP.Observe,ObserveNotificationOrderer,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Observe\ObserveNotificationOrderer.cs,IsNew,The following statement contains a magic number: V1 < V2 && V2 - V1 < 1 << 23                      || V1 > V2 && V1 - V2 > 1 << 23                      || T2 > T1.AddMilliseconds(notifMaxAge)
Magic Number,CoAP.Observe,ObserveNotificationOrderer,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Observe\ObserveNotificationOrderer.cs,IsNew,The following statement contains a magic number: V1 < V2 && V2 - V1 < 1 << 23                      || V1 > V2 && V1 - V2 > 1 << 23                      || T2 > T1.AddMilliseconds(notifMaxAge)
Magic Number,CoAP.Server.Resources,CoapExchange,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Server\Resources\CoapExchange.cs,Respond,The following statement contains a magic number: _maxAge != 60
Magic Number,CoAP.Stack,BlockwiseLayer,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,ReceiveResponse,The following statement contains a magic number: Int32 currentSize = 1 << (4 + status.CurrentSZX);
Magic Number,CoAP.Stack,BlockwiseLayer,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,GetNextRequestBlock,The following statement contains a magic number: Int32 currentSize = 1 << (4 + szx);
Magic Number,CoAP.Stack,BlockwiseLayer,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,GetNextResponseBlock,The following statement contains a magic number: Int32 currentSize = 1 << (4 + szx);
Magic Number,CoAP.Stack,ObserveLayer,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Stack\ObserveLayer.cs,PrepareReregistration,The following statement contains a magic number: Int64 timeout = response.MaxAge * 1000 + _backoff;
Magic Number,CoAP.Stack,TokenLayer,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Stack\TokenLayer.cs,NewToken,The following statement contains a magic number: return new Byte[]              {                   (Byte)(token >> 24)' (Byte)(token >> 16)'                  (Byte)(token >> 8)' (Byte)token              };
Magic Number,CoAP.Stack,TokenLayer,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Stack\TokenLayer.cs,NewToken,The following statement contains a magic number: return new Byte[]              {                   (Byte)(token >> 24)' (Byte)(token >> 16)'                  (Byte)(token >> 8)' (Byte)token              };
Magic Number,CoAP.Stack,TokenLayer,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Stack\TokenLayer.cs,NewToken,The following statement contains a magic number: return new Byte[]              {                   (Byte)(token >> 24)' (Byte)(token >> 16)'                  (Byte)(token >> 8)' (Byte)token              };
Magic Number,CoAP.Util,ArrayEqualityComparer<T>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\ArrayEqualityComparer.cs,GetHashCode,The following statement contains a magic number: Int32 hash = 17;
Magic Number,CoAP.Util,ArrayEqualityComparer<T>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\ArrayEqualityComparer.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + _elementComparer.GetHashCode(item);
Magic Number,CoAP.Util,ByteArrayUtils,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ToHexString,The following statement contains a magic number: StringBuilder builder = new StringBuilder(data.Length * 3);
Magic Number,CoAP.Util,ByteArrayUtils,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ToHexString,The following statement contains a magic number: builder.Append(digits[(data[i] >> 4) & 0xF]);
Magic Number,CoAP.Util,ByteArrayUtils,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,FromHexStream,The following statement contains a magic number: hex.Length % 2 == 1
Magic Number,CoAP.Util,ByteArrayUtils,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,FromHexStream,The following statement contains a magic number: Byte[] tmp = new Byte[hex.Length / 2];
Magic Number,CoAP.Util,ByteArrayUtils,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,FromHexStream,The following statement contains a magic number: tmp[j++] = Convert.ToByte(high * 16 + low);
Magic Number,CoAP.Util,ByteArrayUtils,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ComputeHash,The following statement contains a magic number: const Int32 p = 16777619;
Magic Number,CoAP.Util,ByteArrayUtils,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ComputeHash,The following statement contains a magic number: Int32 hash = (Int32)2166136261;
Magic Number,CoAP.Util,ByteArrayUtils,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ComputeHash,The following statement contains a magic number: hash += hash << 13;
Magic Number,CoAP.Util,ByteArrayUtils,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ComputeHash,The following statement contains a magic number: hash ^= hash >> 7;
Magic Number,CoAP.Util,ByteArrayUtils,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ComputeHash,The following statement contains a magic number: hash += hash << 3;
Magic Number,CoAP.Util,ByteArrayUtils,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ComputeHash,The following statement contains a magic number: hash ^= hash >> 17;
Magic Number,CoAP.Util,ByteArrayUtils,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ComputeHash,The following statement contains a magic number: hash += hash << 5;
Magic Number,CoAP.Util,Utils,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\Utils.cs,ToString,The following statement contains a magic number: sb.AppendFormat("==[ COAP {0} ]============================================\n"' kind)                  .AppendFormat("ID     : {0}\n"' msg.ID)                  .AppendFormat("Type   : {0}\n"' msg.Type)                  .AppendFormat("Token  : {0}\n"' msg.TokenString)                  .AppendFormat("{1}: {0}\n"' CoAP.Code.ToString(msg.Code)' code.PadRight(7));
Magic Number,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,IsValueWriteAtomic,The following statement contains a magic number: !isAtomic && IntPtr.Size == 8
Magic Number,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,The following statement contains a magic number: _budget = 2 * _budget;
Magic Number,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,The following statement contains a magic number: approxCount < tables._buckets.Length / 4
Magic Number,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,The following statement contains a magic number: newLength = tables._buckets.Length * 2 + 1;
Magic Number,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,The following statement contains a magic number: newLength += 2;
Magic Number,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,The following statement contains a magic number: newLength % 3 == 0 || newLength % 5 == 0 || newLength % 7 == 0
Magic Number,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,The following statement contains a magic number: newLength % 3 == 0 || newLength % 5 == 0 || newLength % 7 == 0
Magic Number,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,The following statement contains a magic number: newLength % 3 == 0 || newLength % 5 == 0 || newLength % 7 == 0
Magic Number,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,The following statement contains a magic number: Assert(newLength % 2 != 0);
Magic Number,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,The following statement contains a magic number: newLocks = new object[tables._locks.Length * 2];
Magic Number,System.Collections.Generic,HashSet<T>,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Generic\HashSet.cs,SymmetricExceptWithEnumerable,The following statement contains a magic number: intArrayLength <= StackAllocThreshold / 2
Magic Number,System.Collections,HashHelpers,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Generic\HashHelpers.cs,IsPrime,The following statement contains a magic number: return (candidate == 2);
Magic Number,System.Collections,HashHelpers,D:\research\architectureSmells\repos1\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Generic\HashHelpers.cs,ExpandPrime,The following statement contains a magic number: int newSize = 2 * oldSize;
